
DCA_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000075cc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001d4  20000000  000075cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003d8c  200001d4  000077a0  000201d4  2**2
                  ALLOC
  3 .stack        00002000  20003f60  0000b52c  000201d4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
  6 .debug_info   000442dd  00000000  00000000  00020255  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000750f  00000000  00000000  00064532  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00014fb3  00000000  00000000  0006ba41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001350  00000000  00000000  000809f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000012b0  00000000  00000000  00081d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001bc9f  00000000  00000000  00082ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002235b  00000000  00000000  0009ec93  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005b037  00000000  00000000  000c0fee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003798  00000000  00000000  0011c028  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
const mac48Address_t broadcastMAC = {{0xff, 0xff, 0xff, 0xff, 0xff, 0xff}};

const mac48Address_t *MAC_getAddress(void)
{
	return &macAddress;
}
       0:	60 5f 00 20 e1 17 00 00 dd 17 00 00 dd 17 00 00     `_. ............
	...
      2c:	dd 17 00 00 00 00 00 00 00 00 00 00 dd 17 00 00     ................
      3c:	dd 17 00 00 dd 17 00 00 dd 17 00 00 dd 17 00 00     ................
      4c:	dd 17 00 00 15 24 00 00 71 25 00 00 dd 17 00 00     .....$..q%......
      5c:	dd 17 00 00 dd 17 00 00 dd 17 00 00 dd 17 00 00     ................
	...
      74:	dd 2b 00 00 dd 17 00 00 dd 17 00 00 dd 17 00 00     .+..............
      84:	f1 2b 00 00 dd 17 00 00 00 00 00 00 00 00 00 00     .+..............
      94:	dd 17 00 00 dd 17 00 00 dd 17 00 00 dd 17 00 00     ................

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	200001d4 	.word	0x200001d4
      c4:	00000000 	.word	0x00000000
      c8:	000075cc 	.word	0x000075cc

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	200001d8 	.word	0x200001d8
      f8:	000075cc 	.word	0x000075cc
      fc:	000075cc 	.word	0x000075cc
     100:	00000000 	.word	0x00000000

00000104 <_LedColorControl>:



void _LedColorControl(eLED_COLOR color) {
    // Set the LEDs according to input colour enumeration
    switch(color) {
     104:	2801      	cmp	r0, #1
     106:	d00f      	beq.n	128 <_LedColorControl+0x24>
     108:	2800      	cmp	r0, #0
     10a:	d004      	beq.n	116 <_LedColorControl+0x12>
     10c:	2802      	cmp	r0, #2
     10e:	d014      	beq.n	13a <_LedColorControl+0x36>
     110:	2803      	cmp	r0, #3
     112:	d01b      	beq.n	14c <_LedColorControl+0x48>
            gpio_set_pin_level(LED_GREEN, true);
            break;
        default:
            break;
    }
}
     114:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     116:	23c0      	movs	r3, #192	; 0xc0
     118:	05db      	lsls	r3, r3, #23
     11a:	2280      	movs	r2, #128	; 0x80
     11c:	0412      	lsls	r2, r2, #16
     11e:	615a      	str	r2, [r3, #20]
     120:	2280      	movs	r2, #128	; 0x80
     122:	03d2      	lsls	r2, r2, #15
     124:	615a      	str	r2, [r3, #20]
     126:	e7f5      	b.n	114 <_LedColorControl+0x10>
     128:	23c0      	movs	r3, #192	; 0xc0
     12a:	05db      	lsls	r3, r3, #23
     12c:	2280      	movs	r2, #128	; 0x80
     12e:	0412      	lsls	r2, r2, #16
     130:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     132:	2280      	movs	r2, #128	; 0x80
     134:	03d2      	lsls	r2, r2, #15
     136:	619a      	str	r2, [r3, #24]
     138:	e7ec      	b.n	114 <_LedColorControl+0x10>
     13a:	23c0      	movs	r3, #192	; 0xc0
     13c:	05db      	lsls	r3, r3, #23
     13e:	2280      	movs	r2, #128	; 0x80
     140:	0412      	lsls	r2, r2, #16
     142:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     144:	2280      	movs	r2, #128	; 0x80
     146:	03d2      	lsls	r2, r2, #15
     148:	615a      	str	r2, [r3, #20]
     14a:	e7e3      	b.n	114 <_LedColorControl+0x10>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     14c:	23c0      	movs	r3, #192	; 0xc0
     14e:	05db      	lsls	r3, r3, #23
     150:	2280      	movs	r2, #128	; 0x80
     152:	0412      	lsls	r2, r2, #16
     154:	619a      	str	r2, [r3, #24]
     156:	2280      	movs	r2, #128	; 0x80
     158:	03d2      	lsls	r2, r2, #15
     15a:	619a      	str	r2, [r3, #24]
     15c:	e7da      	b.n	114 <_LedColorControl+0x10>
	...

00000160 <DcaApp_Init>:
void DcaApp_Init(void) {
     160:	b570      	push	{r4, r5, r6, lr}
    uint8_t u8ResetCause = PM->RCAUSE.reg;
     162:	2338      	movs	r3, #56	; 0x38
     164:	4a28      	ldr	r2, [pc, #160]	; (208 <DcaApp_Init+0xa8>)
     166:	5cd3      	ldrb	r3, [r2, r3]
    SYSCTRL->BOD33.bit.ENABLE = 0; // Disable
     168:	4b28      	ldr	r3, [pc, #160]	; (20c <DcaApp_Init+0xac>)
     16a:	6b58      	ldr	r0, [r3, #52]	; 0x34
     16c:	2202      	movs	r2, #2
     16e:	0001      	movs	r1, r0
     170:	4391      	bics	r1, r2
     172:	6359      	str	r1, [r3, #52]	; 0x34
    SYSCTRL->BOD33.bit.LEVEL = 39; // 2.84V (from datasheet)
     174:	6b58      	ldr	r0, [r3, #52]	; 0x34
     176:	4926      	ldr	r1, [pc, #152]	; (210 <DcaApp_Init+0xb0>)
     178:	4008      	ands	r0, r1
     17a:	219c      	movs	r1, #156	; 0x9c
     17c:	0389      	lsls	r1, r1, #14
     17e:	4301      	orrs	r1, r0
     180:	6359      	str	r1, [r3, #52]	; 0x34
    SYSCTRL->BOD33.bit.ENABLE = 1; // Re-enable
     182:	6b59      	ldr	r1, [r3, #52]	; 0x34
     184:	430a      	orrs	r2, r1
     186:	635a      	str	r2, [r3, #52]	; 0x34
    Debug_InitLog();
     188:	4b22      	ldr	r3, [pc, #136]	; (214 <DcaApp_Init+0xb4>)
     18a:	4798      	blx	r3
    DEBUG_INFO("Debug log initialized. ");
     18c:	4822      	ldr	r0, [pc, #136]	; (218 <DcaApp_Init+0xb8>)
     18e:	4d23      	ldr	r5, [pc, #140]	; (21c <DcaApp_Init+0xbc>)
     190:	47a8      	blx	r5
    Watchdog_Init();
     192:	4b23      	ldr	r3, [pc, #140]	; (220 <DcaApp_Init+0xc0>)
     194:	4798      	blx	r3
    DEBUG_INFO("Watchdog initialized. ");
     196:	4823      	ldr	r0, [pc, #140]	; (224 <DcaApp_Init+0xc4>)
     198:	47a8      	blx	r5
    Timer_Init();
     19a:	4b23      	ldr	r3, [pc, #140]	; (228 <DcaApp_Init+0xc8>)
     19c:	4798      	blx	r3
    DEBUG_INFO("Timers initialized. ");
     19e:	4823      	ldr	r0, [pc, #140]	; (22c <DcaApp_Init+0xcc>)
     1a0:	47a8      	blx	r5
    Timer_AddTimer(&TIMER_APP_LED_HOLD);
     1a2:	4c23      	ldr	r4, [pc, #140]	; (230 <DcaApp_Init+0xd0>)
     1a4:	0020      	movs	r0, r4
     1a6:	4e23      	ldr	r6, [pc, #140]	; (234 <DcaApp_Init+0xd4>)
     1a8:	47b0      	blx	r6
	Timer_AddTimer(&TIMER_APP_HEARTBEAT);
     1aa:	1ca0      	adds	r0, r4, #2
     1ac:	47b0      	blx	r6
    Timer_AddTimer(&TIMER_APP_UPDATE_CLOCK);
     1ae:	1d20      	adds	r0, r4, #4
     1b0:	47b0      	blx	r6
	Timer_AddTimer(&TIMER_APP_ENWI_LINK_CHECK);
     1b2:	1da0      	adds	r0, r4, #6
     1b4:	47b0      	blx	r6
	EyedroCmdFifo_Init();
     1b6:	4b20      	ldr	r3, [pc, #128]	; (238 <DcaApp_Init+0xd8>)
     1b8:	4798      	blx	r3
	DEBUG_INFO("FIFO initialized. ");
     1ba:	4820      	ldr	r0, [pc, #128]	; (23c <DcaApp_Init+0xdc>)
     1bc:	47a8      	blx	r5
    Flash_Init();
     1be:	4b20      	ldr	r3, [pc, #128]	; (240 <DcaApp_Init+0xe0>)
     1c0:	4798      	blx	r3
    DEBUG_INFO("Flash initialized. ");
     1c2:	4820      	ldr	r0, [pc, #128]	; (244 <DcaApp_Init+0xe4>)
     1c4:	47a8      	blx	r5
    s8Status = Ethernet_Init();
     1c6:	4b20      	ldr	r3, [pc, #128]	; (248 <DcaApp_Init+0xe8>)
     1c8:	4798      	blx	r3
    if (s8Status!=0) {
     1ca:	2800      	cmp	r0, #0
     1cc:	d003      	beq.n	1d6 <DcaApp_Init+0x76>
        _LedColorControl(LED_COLOR_RED);
     1ce:	2002      	movs	r0, #2
     1d0:	4b1e      	ldr	r3, [pc, #120]	; (24c <DcaApp_Init+0xec>)
     1d2:	4798      	blx	r3
     1d4:	e7fe      	b.n	1d4 <DcaApp_Init+0x74>
    DEBUG_INFO("Ethernet initialized. ");
     1d6:	481e      	ldr	r0, [pc, #120]	; (250 <DcaApp_Init+0xf0>)
     1d8:	4b10      	ldr	r3, [pc, #64]	; (21c <DcaApp_Init+0xbc>)
     1da:	4798      	blx	r3
    s8Status = Wifi_Init();
     1dc:	4b1d      	ldr	r3, [pc, #116]	; (254 <DcaApp_Init+0xf4>)
     1de:	4798      	blx	r3
    if (s8Status!=0) {
     1e0:	2800      	cmp	r0, #0
     1e2:	d003      	beq.n	1ec <DcaApp_Init+0x8c>
        _LedColorControl(LED_COLOR_RED);
     1e4:	2002      	movs	r0, #2
     1e6:	4b19      	ldr	r3, [pc, #100]	; (24c <DcaApp_Init+0xec>)
     1e8:	4798      	blx	r3
     1ea:	e7fe      	b.n	1ea <DcaApp_Init+0x8a>
    DEBUG_INFO("WiFi initialized. ");
     1ec:	481a      	ldr	r0, [pc, #104]	; (258 <DcaApp_Init+0xf8>)
     1ee:	4c0b      	ldr	r4, [pc, #44]	; (21c <DcaApp_Init+0xbc>)
     1f0:	47a0      	blx	r4
    Ethernet_PowerDown();
     1f2:	4b1a      	ldr	r3, [pc, #104]	; (25c <DcaApp_Init+0xfc>)
     1f4:	4798      	blx	r3
    DEBUG_INFO("Application init complete. ");
     1f6:	481a      	ldr	r0, [pc, #104]	; (260 <DcaApp_Init+0x100>)
     1f8:	47a0      	blx	r4
	s_u16HeartbeatRate = EYEDRO_TIMEOUT_STARTUP_HEARTBEAT;
     1fa:	2202      	movs	r2, #2
     1fc:	4b0c      	ldr	r3, [pc, #48]	; (230 <DcaApp_Init+0xd0>)
     1fe:	811a      	strh	r2, [r3, #8]
    Timer_Register_Callback(_One_Second_Timer_Callback);
     200:	4818      	ldr	r0, [pc, #96]	; (264 <DcaApp_Init+0x104>)
     202:	4b19      	ldr	r3, [pc, #100]	; (268 <DcaApp_Init+0x108>)
     204:	4798      	blx	r3
}
     206:	bd70      	pop	{r4, r5, r6, pc}
     208:	40000400 	.word	0x40000400
     20c:	40000800 	.word	0x40000800
     210:	ffc0ffff 	.word	0xffc0ffff
     214:	00000441 	.word	0x00000441
     218:	000064d0 	.word	0x000064d0
     21c:	00000465 	.word	0x00000465
     220:	00001751 	.word	0x00001751
     224:	000064e8 	.word	0x000064e8
     228:	0000168d 	.word	0x0000168d
     22c:	00006500 	.word	0x00006500
     230:	200001f0 	.word	0x200001f0
     234:	000016b1 	.word	0x000016b1
     238:	00000405 	.word	0x00000405
     23c:	00006518 	.word	0x00006518
     240:	000014d1 	.word	0x000014d1
     244:	0000652c 	.word	0x0000652c
     248:	0000071d 	.word	0x0000071d
     24c:	00000105 	.word	0x00000105
     250:	00006540 	.word	0x00006540
     254:	000017d9 	.word	0x000017d9
     258:	00006558 	.word	0x00006558
     25c:	00000529 	.word	0x00000529
     260:	0000656c 	.word	0x0000656c
     264:	000003cd 	.word	0x000003cd
     268:	000016e9 	.word	0x000016e9

0000026c <App_SetStatus>:
    Timer_SetTimer(TIMER_APP_LED_HOLD, TIMEOUT_LED_HOLD);
}


void App_SetStatus(eStatusCode code) {
    s_u8StatusCode = code;
     26c:	4b01      	ldr	r3, [pc, #4]	; (274 <App_SetStatus+0x8>)
     26e:	7298      	strb	r0, [r3, #10]
}
     270:	4770      	bx	lr
     272:	46c0      	nop			; (mov r8, r8)
     274:	200001f0 	.word	0x200001f0

00000278 <DcaApp_Entry>:
void DcaApp_Entry(void) {
     278:	b570      	push	{r4, r5, r6, lr}
	DEBUG_INFO("Entering main state machine... ");
     27a:	4831      	ldr	r0, [pc, #196]	; (340 <DcaApp_Entry+0xc8>)
     27c:	4b31      	ldr	r3, [pc, #196]	; (344 <DcaApp_Entry+0xcc>)
     27e:	4798      	blx	r3
	App_SetStatus(STATUS_OK);
     280:	2001      	movs	r0, #1
     282:	4b31      	ldr	r3, [pc, #196]	; (348 <DcaApp_Entry+0xd0>)
     284:	4798      	blx	r3
     286:	e023      	b.n	2d0 <DcaApp_Entry+0x58>
            if (fLinked==true) {
     288:	2d00      	cmp	r5, #0
     28a:	d042      	beq.n	312 <DcaApp_Entry+0x9a>
                DEBUG_INFO("Ethernet link up. ");
     28c:	482f      	ldr	r0, [pc, #188]	; (34c <DcaApp_Entry+0xd4>)
     28e:	4c2d      	ldr	r4, [pc, #180]	; (344 <DcaApp_Entry+0xcc>)
     290:	47a0      	blx	r4
                DEBUG_INFO("Power down Wifi. ");
     292:	482f      	ldr	r0, [pc, #188]	; (350 <DcaApp_Entry+0xd8>)
     294:	47a0      	blx	r4
                s_fUseWifi = false;
     296:	2300      	movs	r3, #0
     298:	4a2e      	ldr	r2, [pc, #184]	; (354 <DcaApp_Entry+0xdc>)
     29a:	72d3      	strb	r3, [r2, #11]
			s_fCheckLink = false;
     29c:	4a2e      	ldr	r2, [pc, #184]	; (358 <DcaApp_Entry+0xe0>)
     29e:	7013      	strb	r3, [r2, #0]
		if (s_fUseWifi==true) {} // Wifi_PumpEvents();
     2a0:	4b2c      	ldr	r3, [pc, #176]	; (354 <DcaApp_Entry+0xdc>)
     2a2:	7adb      	ldrb	r3, [r3, #11]
		if (s_fUseWifi==false) Ethernet_PumpEvents();
     2a4:	2b00      	cmp	r3, #0
     2a6:	d03e      	beq.n	326 <DcaApp_Entry+0xae>
		if (Timer_GetTimer(TIMER_APP_HEARTBEAT)==0) {
     2a8:	4b2a      	ldr	r3, [pc, #168]	; (354 <DcaApp_Entry+0xdc>)
     2aa:	8858      	ldrh	r0, [r3, #2]
     2ac:	4b2b      	ldr	r3, [pc, #172]	; (35c <DcaApp_Entry+0xe4>)
     2ae:	4798      	blx	r3
     2b0:	2800      	cmp	r0, #0
     2b2:	d03b      	beq.n	32c <DcaApp_Entry+0xb4>
        bool fTimeToSend = false;
     2b4:	2400      	movs	r4, #0
            if (EyedroCmdFifo_GetByteCount()>0) {
     2b6:	4b2a      	ldr	r3, [pc, #168]	; (360 <DcaApp_Entry+0xe8>)
     2b8:	4798      	blx	r3
     2ba:	2800      	cmp	r0, #0
     2bc:	dd00      	ble.n	2c0 <DcaApp_Entry+0x48>
                fTimeToSend = true;
     2be:	2401      	movs	r4, #1
        Timer_SetTimer(TIMER_APP_ENWI_LINK_CHECK, 300);
     2c0:	4b24      	ldr	r3, [pc, #144]	; (354 <DcaApp_Entry+0xdc>)
     2c2:	88d8      	ldrh	r0, [r3, #6]
     2c4:	2196      	movs	r1, #150	; 0x96
     2c6:	0049      	lsls	r1, r1, #1
     2c8:	4b26      	ldr	r3, [pc, #152]	; (364 <DcaApp_Entry+0xec>)
     2ca:	4798      	blx	r3
        if (fTimeToSend==true) {
     2cc:	2c00      	cmp	r4, #0
     2ce:	d12f      	bne.n	330 <DcaApp_Entry+0xb8>
		Watchdog_Feed();
     2d0:	4b25      	ldr	r3, [pc, #148]	; (368 <DcaApp_Entry+0xf0>)
     2d2:	4798      	blx	r3
		if (s_fCheckLink==true) {
     2d4:	4b20      	ldr	r3, [pc, #128]	; (358 <DcaApp_Entry+0xe0>)
     2d6:	781c      	ldrb	r4, [r3, #0]
     2d8:	2c00      	cmp	r4, #0
     2da:	d0e1      	beq.n	2a0 <DcaApp_Entry+0x28>
            DEBUG_INFO("Power up Ethernet. ");
     2dc:	4823      	ldr	r0, [pc, #140]	; (36c <DcaApp_Entry+0xf4>)
     2de:	4b19      	ldr	r3, [pc, #100]	; (344 <DcaApp_Entry+0xcc>)
     2e0:	4798      	blx	r3
            Ethernet_PowerUp();
     2e2:	4b23      	ldr	r3, [pc, #140]	; (370 <DcaApp_Entry+0xf8>)
     2e4:	4798      	blx	r3
            Timer_SetTimer(TIMER_APP_ETHERNET_LINK_TIMEOUT, EYEDRO_TIMEOUT_ETHERNET_LINK);
     2e6:	2103      	movs	r1, #3
     2e8:	2000      	movs	r0, #0
     2ea:	4b1e      	ldr	r3, [pc, #120]	; (364 <DcaApp_Entry+0xec>)
     2ec:	4798      	blx	r3
            bool fLinked = false;
     2ee:	2500      	movs	r5, #0
            while(Timer_GetTimer(TIMER_APP_ETHERNET_LINK_TIMEOUT)>0) {
     2f0:	2000      	movs	r0, #0
     2f2:	4b1a      	ldr	r3, [pc, #104]	; (35c <DcaApp_Entry+0xe4>)
     2f4:	4798      	blx	r3
     2f6:	2800      	cmp	r0, #0
     2f8:	d0c6      	beq.n	288 <DcaApp_Entry+0x10>
                Watchdog_Feed();
     2fa:	4b1b      	ldr	r3, [pc, #108]	; (368 <DcaApp_Entry+0xf0>)
     2fc:	4798      	blx	r3
                if (Ethernet_HasLink()==true) {
     2fe:	4b1d      	ldr	r3, [pc, #116]	; (374 <DcaApp_Entry+0xfc>)
     300:	4798      	blx	r3
     302:	2801      	cmp	r0, #1
     304:	d1f4      	bne.n	2f0 <DcaApp_Entry+0x78>
                    Timer_SetTimer(TIMER_APP_ETHERNET_LINK_TIMEOUT, 0);
     306:	2100      	movs	r1, #0
     308:	2000      	movs	r0, #0
     30a:	4b16      	ldr	r3, [pc, #88]	; (364 <DcaApp_Entry+0xec>)
     30c:	4798      	blx	r3
                    fLinked = true;
     30e:	0025      	movs	r5, r4
     310:	e7ee      	b.n	2f0 <DcaApp_Entry+0x78>
                DEBUG_INFO("Ethernet link down. ");
     312:	4819      	ldr	r0, [pc, #100]	; (378 <DcaApp_Entry+0x100>)
     314:	4c0b      	ldr	r4, [pc, #44]	; (344 <DcaApp_Entry+0xcc>)
     316:	47a0      	blx	r4
                DEBUG_INFO("Power down Ethernet. ");
     318:	4818      	ldr	r0, [pc, #96]	; (37c <DcaApp_Entry+0x104>)
     31a:	47a0      	blx	r4
                Ethernet_PowerDown();
     31c:	4b18      	ldr	r3, [pc, #96]	; (380 <DcaApp_Entry+0x108>)
     31e:	4798      	blx	r3
                DEBUG_INFO("Power up WiFi. ");
     320:	4818      	ldr	r0, [pc, #96]	; (384 <DcaApp_Entry+0x10c>)
     322:	47a0      	blx	r4
     324:	e7fe      	b.n	324 <DcaApp_Entry+0xac>
		if (s_fUseWifi==false) Ethernet_PumpEvents();
     326:	4b18      	ldr	r3, [pc, #96]	; (388 <DcaApp_Entry+0x110>)
     328:	4798      	blx	r3
     32a:	e7bd      	b.n	2a8 <DcaApp_Entry+0x30>
            fTimeToSend = true;
     32c:	2401      	movs	r4, #1
     32e:	e7c2      	b.n	2b6 <DcaApp_Entry+0x3e>
            Ethernet_QueueServerSend();
     330:	4b16      	ldr	r3, [pc, #88]	; (38c <DcaApp_Entry+0x114>)
     332:	4798      	blx	r3
            Timer_SetTimer(TIMER_APP_HEARTBEAT, s_u16HeartbeatRate);
     334:	4b07      	ldr	r3, [pc, #28]	; (354 <DcaApp_Entry+0xdc>)
     336:	8919      	ldrh	r1, [r3, #8]
     338:	8858      	ldrh	r0, [r3, #2]
     33a:	4b0a      	ldr	r3, [pc, #40]	; (364 <DcaApp_Entry+0xec>)
     33c:	4798      	blx	r3
     33e:	e7c7      	b.n	2d0 <DcaApp_Entry+0x58>
     340:	00006588 	.word	0x00006588
     344:	00000465 	.word	0x00000465
     348:	0000026d 	.word	0x0000026d
     34c:	000065bc 	.word	0x000065bc
     350:	000065d0 	.word	0x000065d0
     354:	200001f0 	.word	0x200001f0
     358:	20000000 	.word	0x20000000
     35c:	000016dd 	.word	0x000016dd
     360:	00000429 	.word	0x00000429
     364:	000016d1 	.word	0x000016d1
     368:	000017a9 	.word	0x000017a9
     36c:	000065a8 	.word	0x000065a8
     370:	000005a1 	.word	0x000005a1
     374:	00000809 	.word	0x00000809
     378:	000065e4 	.word	0x000065e4
     37c:	000065fc 	.word	0x000065fc
     380:	00000529 	.word	0x00000529
     384:	00006614 	.word	0x00006614
     388:	00001221 	.word	0x00001221
     38c:	0000149d 	.word	0x0000149d

00000390 <App_GetStatus>:

eStatusCode App_GetStatus(void) {
    return s_u8StatusCode;
     390:	4b01      	ldr	r3, [pc, #4]	; (398 <App_GetStatus+0x8>)
     392:	7a98      	ldrb	r0, [r3, #10]
}
     394:	4770      	bx	lr
     396:	46c0      	nop			; (mov r8, r8)
     398:	200001f0 	.word	0x200001f0

0000039c <_LedControl>:
void _LedControl(void) {
     39c:	b510      	push	{r4, lr}
    eStatusCode code = App_GetStatus();
     39e:	4b07      	ldr	r3, [pc, #28]	; (3bc <_LedControl+0x20>)
     3a0:	4798      	blx	r3
    eLED_COLOR color =	STATUS_LED[code][(index++)%LED_SEQUENCE_MAXCNT];
     3a2:	4b07      	ldr	r3, [pc, #28]	; (3c0 <_LedControl+0x24>)
     3a4:	7b1a      	ldrb	r2, [r3, #12]
     3a6:	1c51      	adds	r1, r2, #1
     3a8:	7319      	strb	r1, [r3, #12]
     3aa:	2303      	movs	r3, #3
     3ac:	4013      	ands	r3, r2
     3ae:	0082      	lsls	r2, r0, #2
     3b0:	4804      	ldr	r0, [pc, #16]	; (3c4 <_LedControl+0x28>)
     3b2:	1880      	adds	r0, r0, r2
     3b4:	5cc0      	ldrb	r0, [r0, r3]
    _LedColorControl(color);
     3b6:	4b04      	ldr	r3, [pc, #16]	; (3c8 <_LedControl+0x2c>)
     3b8:	4798      	blx	r3
}
     3ba:	bd10      	pop	{r4, pc}
     3bc:	00000391 	.word	0x00000391
     3c0:	200001f0 	.word	0x200001f0
     3c4:	000064c4 	.word	0x000064c4
     3c8:	00000105 	.word	0x00000105

000003cc <_One_Second_Timer_Callback>:
static void _One_Second_Timer_Callback(void) {
     3cc:	b510      	push	{r4, lr}
    if (fSkipPump==false) Timer_Pump();
     3ce:	4b06      	ldr	r3, [pc, #24]	; (3e8 <_One_Second_Timer_Callback+0x1c>)
     3d0:	4798      	blx	r3
    if (Timer_GetTimer(TIMER_APP_LED_HOLD)==0) _LedControl();
     3d2:	4b06      	ldr	r3, [pc, #24]	; (3ec <_One_Second_Timer_Callback+0x20>)
     3d4:	8818      	ldrh	r0, [r3, #0]
     3d6:	4b06      	ldr	r3, [pc, #24]	; (3f0 <_One_Second_Timer_Callback+0x24>)
     3d8:	4798      	blx	r3
     3da:	2800      	cmp	r0, #0
     3dc:	d000      	beq.n	3e0 <_One_Second_Timer_Callback+0x14>
}
     3de:	bd10      	pop	{r4, pc}
    if (Timer_GetTimer(TIMER_APP_LED_HOLD)==0) _LedControl();
     3e0:	4b04      	ldr	r3, [pc, #16]	; (3f4 <_One_Second_Timer_Callback+0x28>)
     3e2:	4798      	blx	r3
}
     3e4:	e7fb      	b.n	3de <_One_Second_Timer_Callback+0x12>
     3e6:	46c0      	nop			; (mov r8, r8)
     3e8:	00001719 	.word	0x00001719
     3ec:	200001f0 	.word	0x200001f0
     3f0:	000016dd 	.word	0x000016dd
     3f4:	0000039d 	.word	0x0000039d

000003f8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     3f8:	b510      	push	{r4, lr}
	system_init();
     3fa:	4b01      	ldr	r3, [pc, #4]	; (400 <atmel_start_init+0x8>)
     3fc:	4798      	blx	r3
	//tcpip_lite_stack_init();
}
     3fe:	bd10      	pop	{r4, pc}
     400:	00001bfd 	.word	0x00001bfd

00000404 <EyedroCmdFifo_Init>:
/** VARIABLES *****************************************************************/
static uint16_t   s_u16FifoWriteIndex;
static uint16_t   s_u16FifoReadIndex;
static uint16_t   s_u16FifoByteCount;

void EyedroCmdFifo_Init(void) {
     404:	b510      	push	{r4, lr}
	// Clear the contents of the command FIFO
	memset(&g_acCmdFifo[0], 0, COMMAND_FIFO_NUM_BYTES);
     406:	2280      	movs	r2, #128	; 0x80
     408:	0152      	lsls	r2, r2, #5
     40a:	2100      	movs	r1, #0
     40c:	4803      	ldr	r0, [pc, #12]	; (41c <EyedroCmdFifo_Init+0x18>)
     40e:	4b04      	ldr	r3, [pc, #16]	; (420 <EyedroCmdFifo_Init+0x1c>)
     410:	4798      	blx	r3
	// Reset the buffer read/write indexes and byte count
	s_u16FifoWriteIndex = 0;
     412:	4b04      	ldr	r3, [pc, #16]	; (424 <EyedroCmdFifo_Init+0x20>)
     414:	2200      	movs	r2, #0
     416:	801a      	strh	r2, [r3, #0]
	s_u16FifoReadIndex = 0;
	s_u16FifoByteCount = 0;
     418:	805a      	strh	r2, [r3, #2]
}
     41a:	bd10      	pop	{r4, pc}
     41c:	20000a08 	.word	0x20000a08
     420:	00005a39 	.word	0x00005a39
     424:	200001fe 	.word	0x200001fe

00000428 <EyedroCmdFifo_GetByteCount>:

uint16_t EyedroCmdFifo_GetByteCount(void) {
	return s_u16FifoByteCount;
     428:	4b01      	ldr	r3, [pc, #4]	; (430 <EyedroCmdFifo_GetByteCount+0x8>)
     42a:	8858      	ldrh	r0, [r3, #2]
}
     42c:	4770      	bx	lr
     42e:	46c0      	nop			; (mov r8, r8)
     430:	200001fe 	.word	0x200001fe

00000434 <EyedroCmdFifo_Send>:

uint16_t EyedroCmdFifo_Send(char *pDst, uint16_t maxBytes) {
    uint16_t bytesToSend, trimmed;
    uint16_t bytesSent = 0;

    return s_u16FifoByteCount;
     434:	4b01      	ldr	r3, [pc, #4]	; (43c <EyedroCmdFifo_Send+0x8>)
     436:	8858      	ldrh	r0, [r3, #2]
     438:	4770      	bx	lr
     43a:	46c0      	nop			; (mov r8, r8)
     43c:	200001fe 	.word	0x200001fe

00000440 <Debug_InitLog>:
 *  @param[in]  None
 *  @param[out] None
 *  @return     Nothing
 ******************************************************************************/
void Debug_InitLog()
{
     440:	b510      	push	{r4, lr}
    // Clear the contents of the log
    memset(&s_acLogBuffer[0], 0, sizeof(s_acLogBuffer));
     442:	2280      	movs	r2, #128	; 0x80
     444:	00d2      	lsls	r2, r2, #3
     446:	2100      	movs	r1, #0
     448:	4803      	ldr	r0, [pc, #12]	; (458 <Debug_InitLog+0x18>)
     44a:	4b04      	ldr	r3, [pc, #16]	; (45c <Debug_InitLog+0x1c>)
     44c:	4798      	blx	r3
    // Reset the buffer index
    s_u16LogBufferIndex = 0;
     44e:	2200      	movs	r2, #0
     450:	4b03      	ldr	r3, [pc, #12]	; (460 <Debug_InitLog+0x20>)
     452:	801a      	strh	r2, [r3, #0]
}
     454:	bd10      	pop	{r4, pc}
     456:	46c0      	nop			; (mov r8, r8)
     458:	20000204 	.word	0x20000204
     45c:	00005a39 	.word	0x00005a39
     460:	20000604 	.word	0x20000604

00000464 <Debug_StoreLog>:
 *  Initialize the debug log (buffer in RAM)
 *  @param[in]  const char* format  sprintf formatter
 *  @param[in]  sprintf argument array
 *  @return     Nothing
 ******************************************************************************/
void Debug_StoreLog(const char *format, ...) {
     464:	b40f      	push	{r0, r1, r2, r3}
     466:	b5f0      	push	{r4, r5, r6, r7, lr}
     468:	46ce      	mov	lr, r9
     46a:	4647      	mov	r7, r8
     46c:	b580      	push	{r7, lr}
     46e:	b083      	sub	sp, #12
     470:	af00      	add	r7, sp, #0
     472:	2328      	movs	r3, #40	; 0x28
     474:	18fd      	adds	r5, r7, r3
     476:	cd10      	ldmia	r5!, {r4}
    uint16_t bytesToWrite, offset, length;
    va_list args;
    char buffer[strlen(format)];
     478:	0020      	movs	r0, r4
     47a:	4e25      	ldr	r6, [pc, #148]	; (510 <Debug_StoreLog+0xac>)
     47c:	47b0      	blx	r6
     47e:	3007      	adds	r0, #7
     480:	08c0      	lsrs	r0, r0, #3
     482:	00c0      	lsls	r0, r0, #3
     484:	466b      	mov	r3, sp
     486:	1a1b      	subs	r3, r3, r0
     488:	469d      	mov	sp, r3
     48a:	46e8      	mov	r8, sp

    va_start(args, format);
     48c:	607d      	str	r5, [r7, #4]
    vsprintf(buffer, format, args);
     48e:	002a      	movs	r2, r5
     490:	0021      	movs	r1, r4
     492:	4668      	mov	r0, sp
     494:	4b1f      	ldr	r3, [pc, #124]	; (514 <Debug_StoreLog+0xb0>)
     496:	4798      	blx	r3
#if DEBUG_STDIO_REDIRECT
    printf(buffer);
    printf("\r\n");
#endif

    bytesToWrite = strlen(buffer);
     498:	4668      	mov	r0, sp
     49a:	47b0      	blx	r6
     49c:	b284      	uxth	r4, r0
    offset = 0;
     49e:	2300      	movs	r3, #0
     4a0:	4699      	mov	r9, r3

    // Write the bytes to the debug log
    while (bytesToWrite>0) {
     4a2:	e010      	b.n	4c6 <Debug_StoreLog+0x62>
            s_u16LogBufferIndex += bytesToWrite;
            bytesToWrite = 0;

        // Not enough room... fill in remainder of buffer and roll over. Next time through while loop will complete
        } else {
            length = DEBUG_LOG_NUM_BYTES - s_u16LogBufferIndex;
     4a4:	2380      	movs	r3, #128	; 0x80
     4a6:	00db      	lsls	r3, r3, #3
     4a8:	1b9b      	subs	r3, r3, r6
     4aa:	b29d      	uxth	r5, r3
            memcpy(pDst, &buffer[offset], length);
     4ac:	4641      	mov	r1, r8
     4ae:	4449      	add	r1, r9
     4b0:	002a      	movs	r2, r5
     4b2:	4b19      	ldr	r3, [pc, #100]	; (518 <Debug_StoreLog+0xb4>)
     4b4:	4798      	blx	r3
            s_u16LogBufferIndex = 0;
     4b6:	2200      	movs	r2, #0
     4b8:	4b18      	ldr	r3, [pc, #96]	; (51c <Debug_StoreLog+0xb8>)
     4ba:	801a      	strh	r2, [r3, #0]
            bytesToWrite -= length;
     4bc:	1b64      	subs	r4, r4, r5
     4be:	b2a4      	uxth	r4, r4
            offset += length;
     4c0:	444d      	add	r5, r9
     4c2:	b2ab      	uxth	r3, r5
     4c4:	4699      	mov	r9, r3
    while (bytesToWrite>0) {
     4c6:	2c00      	cmp	r4, #0
     4c8:	d011      	beq.n	4ee <Debug_StoreLog+0x8a>
        char *pDst = &s_acLogBuffer[0] + s_u16LogBufferIndex;
     4ca:	4b14      	ldr	r3, [pc, #80]	; (51c <Debug_StoreLog+0xb8>)
     4cc:	881e      	ldrh	r6, [r3, #0]
     4ce:	4814      	ldr	r0, [pc, #80]	; (520 <Debug_StoreLog+0xbc>)
     4d0:	1980      	adds	r0, r0, r6
        if (DEBUG_LOG_NUM_BYTES > (s_u16LogBufferIndex + bytesToWrite)) {
     4d2:	1932      	adds	r2, r6, r4
     4d4:	4b13      	ldr	r3, [pc, #76]	; (524 <Debug_StoreLog+0xc0>)
     4d6:	429a      	cmp	r2, r3
     4d8:	dce4      	bgt.n	4a4 <Debug_StoreLog+0x40>
            memcpy(pDst, &buffer[offset], bytesToWrite);
     4da:	4641      	mov	r1, r8
     4dc:	4449      	add	r1, r9
     4de:	0022      	movs	r2, r4
     4e0:	4b0d      	ldr	r3, [pc, #52]	; (518 <Debug_StoreLog+0xb4>)
     4e2:	4798      	blx	r3
            s_u16LogBufferIndex += bytesToWrite;
     4e4:	19a4      	adds	r4, r4, r6
     4e6:	4a0d      	ldr	r2, [pc, #52]	; (51c <Debug_StoreLog+0xb8>)
     4e8:	8014      	strh	r4, [r2, #0]
            bytesToWrite = 0;
     4ea:	2400      	movs	r4, #0
     4ec:	e7eb      	b.n	4c6 <Debug_StoreLog+0x62>
        }
    }

    // This should never happen (because of logic above)... just a sanity check
    if (s_u16LogBufferIndex >= DEBUG_LOG_NUM_BYTES) {
     4ee:	4b0b      	ldr	r3, [pc, #44]	; (51c <Debug_StoreLog+0xb8>)
     4f0:	881a      	ldrh	r2, [r3, #0]
     4f2:	4b0c      	ldr	r3, [pc, #48]	; (524 <Debug_StoreLog+0xc0>)
     4f4:	429a      	cmp	r2, r3
     4f6:	d902      	bls.n	4fe <Debug_StoreLog+0x9a>
        s_u16LogBufferIndex = 0;
     4f8:	2200      	movs	r2, #0
     4fa:	4b08      	ldr	r3, [pc, #32]	; (51c <Debug_StoreLog+0xb8>)
     4fc:	801a      	strh	r2, [r3, #0]
    }
}
     4fe:	46bd      	mov	sp, r7
     500:	b003      	add	sp, #12
     502:	bc0c      	pop	{r2, r3}
     504:	4690      	mov	r8, r2
     506:	4699      	mov	r9, r3
     508:	bcf0      	pop	{r4, r5, r6, r7}
     50a:	bc08      	pop	{r3}
     50c:	b004      	add	sp, #16
     50e:	4718      	bx	r3
     510:	00005c01 	.word	0x00005c01
     514:	00005dcd 	.word	0x00005dcd
     518:	00005a27 	.word	0x00005a27
     51c:	20000604 	.word	0x20000604
     520:	20000204 	.word	0x20000204
     524:	000003ff 	.word	0x000003ff

00000528 <Ethernet_PowerDown>:
    tcpip_lite_stack_init();
	
	return 0;
}

void Ethernet_PowerDown(void) {
     528:	b5f0      	push	{r4, r5, r6, r7, lr}
     52a:	b083      	sub	sp, #12
	struct io_descriptor *s_ioSPI;
	uint8_t tx_buffer[2];

	// Get the IO descriptor for the SPI peripheral
	if (spi_m_sync_get_io_descriptor(&ETHERNET_SPI, &s_ioSPI)!=0 ) {
     52c:	a901      	add	r1, sp, #4
     52e:	4818      	ldr	r0, [pc, #96]	; (590 <Ethernet_PowerDown+0x68>)
     530:	4b18      	ldr	r3, [pc, #96]	; (594 <Ethernet_PowerDown+0x6c>)
     532:	4798      	blx	r3
     534:	2800      	cmp	r0, #0
     536:	d001      	beq.n	53c <Ethernet_PowerDown+0x14>
	// Disable the SPI slave (deactivates CSn)
	gpio_set_pin_level(ETHERNET_CS, 1);

	// Disable the SPI peripheral
	spi_m_sync_disable(&ETHERNET_SPI);
}
     538:	b003      	add	sp, #12
     53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tx_buffer[0] = 0xA0|0x1F;   // Bit field clear | ECON1 register address
     53c:	23bf      	movs	r3, #191	; 0xbf
     53e:	466a      	mov	r2, sp
     540:	7013      	strb	r3, [r2, #0]
	tx_buffer[1] = 0x03;        // Bank 3
     542:	2703      	movs	r7, #3
     544:	7057      	strb	r7, [r2, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     546:	24c0      	movs	r4, #192	; 0xc0
     548:	05e4      	lsls	r4, r4, #23
     54a:	2580      	movs	r5, #128	; 0x80
     54c:	012d      	lsls	r5, r5, #4
     54e:	6165      	str	r5, [r4, #20]
	io_write(s_ioSPI, tx_buffer, 2);
     550:	2202      	movs	r2, #2
     552:	4669      	mov	r1, sp
     554:	9801      	ldr	r0, [sp, #4]
     556:	4e10      	ldr	r6, [pc, #64]	; (598 <Ethernet_PowerDown+0x70>)
     558:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     55a:	61a5      	str	r5, [r4, #24]
	tx_buffer[0] = 0x80|0x1F;   // Bit field set | ECON1 register address
     55c:	239f      	movs	r3, #159	; 0x9f
     55e:	466a      	mov	r2, sp
     560:	7013      	strb	r3, [r2, #0]
	tx_buffer[1] = 0x03;        // Bank 3
     562:	7057      	strb	r7, [r2, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     564:	6165      	str	r5, [r4, #20]
	io_write(s_ioSPI, tx_buffer, 2);
     566:	2202      	movs	r2, #2
     568:	4669      	mov	r1, sp
     56a:	9801      	ldr	r0, [sp, #4]
     56c:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     56e:	61a5      	str	r5, [r4, #24]
	tx_buffer[0] = 0x80|0x1E;   // Bit field set | ECON2 register address
     570:	239e      	movs	r3, #158	; 0x9e
     572:	466a      	mov	r2, sp
     574:	7013      	strb	r3, [r2, #0]
	tx_buffer[1] = 0x20;        // PWRSV bit set
     576:	3b7e      	subs	r3, #126	; 0x7e
     578:	7053      	strb	r3, [r2, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     57a:	6165      	str	r5, [r4, #20]
	io_write(s_ioSPI, tx_buffer, 2);
     57c:	2202      	movs	r2, #2
     57e:	4669      	mov	r1, sp
     580:	9801      	ldr	r0, [sp, #4]
     582:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     584:	61a5      	str	r5, [r4, #24]
	spi_m_sync_disable(&ETHERNET_SPI);
     586:	4802      	ldr	r0, [pc, #8]	; (590 <Ethernet_PowerDown+0x68>)
     588:	4b04      	ldr	r3, [pc, #16]	; (59c <Ethernet_PowerDown+0x74>)
     58a:	4798      	blx	r3
     58c:	e7d4      	b.n	538 <Ethernet_PowerDown+0x10>
     58e:	46c0      	nop			; (mov r8, r8)
     590:	20003e0c 	.word	0x20003e0c
     594:	00002065 	.word	0x00002065
     598:	00001e8d 	.word	0x00001e8d
     59c:	00001f7d 	.word	0x00001f7d

000005a0 <Ethernet_PowerUp>:

void Ethernet_PowerUp(void) {
     5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     5a2:	b083      	sub	sp, #12
	struct io_descriptor *s_ioSPI;
    uint8_t tx_buffer[2];

    // Enable the SPI peripheral
    spi_m_sync_enable(&ETHERNET_SPI);
     5a4:	4c18      	ldr	r4, [pc, #96]	; (608 <Ethernet_PowerUp+0x68>)
     5a6:	0020      	movs	r0, r4
     5a8:	4b18      	ldr	r3, [pc, #96]	; (60c <Ethernet_PowerUp+0x6c>)
     5aa:	4798      	blx	r3

    // Get the IO descriptor for the SPI peripheral
    if (spi_m_sync_get_io_descriptor(&ETHERNET_SPI, &s_ioSPI)!=0 ) {
     5ac:	a901      	add	r1, sp, #4
     5ae:	0020      	movs	r0, r4
     5b0:	4b17      	ldr	r3, [pc, #92]	; (610 <Ethernet_PowerUp+0x70>)
     5b2:	4798      	blx	r3
     5b4:	2800      	cmp	r0, #0
     5b6:	d001      	beq.n	5bc <Ethernet_PowerUp+0x1c>
    gpio_set_pin_level(ETHERNET_CS, 0);
    // Write payload
    io_write(s_ioSPI, tx_buffer, 2);
    // Disable the SPI slave (deactivates CSn)
    gpio_set_pin_level(ETHERNET_CS, 1);
}
     5b8:	b003      	add	sp, #12
     5ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tx_buffer[0] = 0xA0|0x1F;   // Bit field clear | ECON1 register address
     5bc:	23bf      	movs	r3, #191	; 0xbf
     5be:	466a      	mov	r2, sp
     5c0:	7013      	strb	r3, [r2, #0]
    tx_buffer[1] = 0x03;        // Bank 3
     5c2:	2703      	movs	r7, #3
     5c4:	7057      	strb	r7, [r2, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5c6:	24c0      	movs	r4, #192	; 0xc0
     5c8:	05e4      	lsls	r4, r4, #23
     5ca:	2580      	movs	r5, #128	; 0x80
     5cc:	012d      	lsls	r5, r5, #4
     5ce:	6165      	str	r5, [r4, #20]
    io_write(s_ioSPI, tx_buffer, 2);
     5d0:	2202      	movs	r2, #2
     5d2:	4669      	mov	r1, sp
     5d4:	9801      	ldr	r0, [sp, #4]
     5d6:	4e0f      	ldr	r6, [pc, #60]	; (614 <Ethernet_PowerUp+0x74>)
     5d8:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5da:	61a5      	str	r5, [r4, #24]
    tx_buffer[0] = 0x80|0x1F;   // Bit field set | ECON1 register address
     5dc:	239f      	movs	r3, #159	; 0x9f
     5de:	466a      	mov	r2, sp
     5e0:	7013      	strb	r3, [r2, #0]
    tx_buffer[1] = 0x03;        // Bank 3
     5e2:	7057      	strb	r7, [r2, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5e4:	6165      	str	r5, [r4, #20]
    io_write(s_ioSPI, tx_buffer, 2);
     5e6:	2202      	movs	r2, #2
     5e8:	4669      	mov	r1, sp
     5ea:	9801      	ldr	r0, [sp, #4]
     5ec:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5ee:	61a5      	str	r5, [r4, #24]
    tx_buffer[0] = 0xA0|0x1E;   // Bit field clear | ECON2 register address
     5f0:	23be      	movs	r3, #190	; 0xbe
     5f2:	466a      	mov	r2, sp
     5f4:	7013      	strb	r3, [r2, #0]
    tx_buffer[1] = 0x20;        // PWRSV bit set
     5f6:	3b9e      	subs	r3, #158	; 0x9e
     5f8:	7053      	strb	r3, [r2, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5fa:	6165      	str	r5, [r4, #20]
    io_write(s_ioSPI, tx_buffer, 2);
     5fc:	2202      	movs	r2, #2
     5fe:	4669      	mov	r1, sp
     600:	9801      	ldr	r0, [sp, #4]
     602:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     604:	61a5      	str	r5, [r4, #24]
     606:	e7d7      	b.n	5b8 <Ethernet_PowerUp+0x18>
     608:	20003e0c 	.word	0x20003e0c
     60c:	00001f55 	.word	0x00001f55
     610:	00002065 	.word	0x00002065
     614:	00001e8d 	.word	0x00001e8d

00000618 <_DetectEthernet>:

bool _DetectEthernet() {
     618:	b510      	push	{r4, lr}
     61a:	b084      	sub	sp, #16
    int8_t result = 0;
    uint8_t tx_buffer[2];
    uint8_t rx_buffer[1];

    // Get the IO descriptor for the SPI peripheral
    if (spi_m_sync_get_io_descriptor(&ETHERNET_SPI, &s_ioSPI)!=0 ) {
     61c:	a903      	add	r1, sp, #12
     61e:	4831      	ldr	r0, [pc, #196]	; (6e4 <_DetectEthernet+0xcc>)
     620:	4b31      	ldr	r3, [pc, #196]	; (6e8 <_DetectEthernet+0xd0>)
     622:	4798      	blx	r3
     624:	2800      	cmp	r0, #0
     626:	d002      	beq.n	62e <_DetectEthernet+0x16>
        return false;
     628:	2000      	movs	r0, #0
    if (result==-1) return false;
    // 0x00 or 0xFF in the REV ID register indicates that the device is not present
    else if (rx_buffer[0]==0x00 || rx_buffer[0]==0xFF) return false;
    // If we make it here, the device is present
    else return true;
}
     62a:	b004      	add	sp, #16
     62c:	bd10      	pop	{r4, pc}
    spi_m_sync_enable(&ETHERNET_SPI);
     62e:	482d      	ldr	r0, [pc, #180]	; (6e4 <_DetectEthernet+0xcc>)
     630:	4b2e      	ldr	r3, [pc, #184]	; (6ec <_DetectEthernet+0xd4>)
     632:	4798      	blx	r3
    tx_buffer[0] = 0xA0|0x1F;   // Bit field clear | ECON1 register address
     634:	a902      	add	r1, sp, #8
     636:	23bf      	movs	r3, #191	; 0xbf
     638:	700b      	strb	r3, [r1, #0]
    tx_buffer[1] = 0x03;        // Bank 3
     63a:	3bbc      	subs	r3, #188	; 0xbc
     63c:	704b      	strb	r3, [r1, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     63e:	2280      	movs	r2, #128	; 0x80
     640:	0112      	lsls	r2, r2, #4
     642:	23c0      	movs	r3, #192	; 0xc0
     644:	05db      	lsls	r3, r3, #23
     646:	615a      	str	r2, [r3, #20]
    if (io_write(s_ioSPI, tx_buffer, 2) != 2) result = -1;
     648:	2202      	movs	r2, #2
     64a:	9803      	ldr	r0, [sp, #12]
     64c:	4b28      	ldr	r3, [pc, #160]	; (6f0 <_DetectEthernet+0xd8>)
     64e:	4798      	blx	r3
     650:	2802      	cmp	r0, #2
     652:	d040      	beq.n	6d6 <_DetectEthernet+0xbe>
     654:	2401      	movs	r4, #1
     656:	4264      	negs	r4, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     658:	23c0      	movs	r3, #192	; 0xc0
     65a:	05db      	lsls	r3, r3, #23
     65c:	2280      	movs	r2, #128	; 0x80
     65e:	0112      	lsls	r2, r2, #4
     660:	619a      	str	r2, [r3, #24]
    tx_buffer[0] = 0x80|0x1F;   // Bit field set | ECON1 register address
     662:	a902      	add	r1, sp, #8
     664:	209f      	movs	r0, #159	; 0x9f
     666:	7008      	strb	r0, [r1, #0]
    tx_buffer[1] = 0x03;        // Bank 3
     668:	389c      	subs	r0, #156	; 0x9c
     66a:	7048      	strb	r0, [r1, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     66c:	615a      	str	r2, [r3, #20]
    if (io_write(s_ioSPI, tx_buffer, 2) != 2) result = -1;
     66e:	2202      	movs	r2, #2
     670:	9803      	ldr	r0, [sp, #12]
     672:	4b1f      	ldr	r3, [pc, #124]	; (6f0 <_DetectEthernet+0xd8>)
     674:	4798      	blx	r3
     676:	2802      	cmp	r0, #2
     678:	d001      	beq.n	67e <_DetectEthernet+0x66>
     67a:	2401      	movs	r4, #1
     67c:	4264      	negs	r4, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     67e:	23c0      	movs	r3, #192	; 0xc0
     680:	05db      	lsls	r3, r3, #23
     682:	2280      	movs	r2, #128	; 0x80
     684:	0112      	lsls	r2, r2, #4
     686:	619a      	str	r2, [r3, #24]
    tx_buffer[0] = 0x00|0x12;   // Read control register | EREVID register address
     688:	a902      	add	r1, sp, #8
     68a:	2012      	movs	r0, #18
     68c:	7008      	strb	r0, [r1, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     68e:	615a      	str	r2, [r3, #20]
    if (io_write(s_ioSPI, tx_buffer, 1) != 1) result = -1;
     690:	2201      	movs	r2, #1
     692:	9803      	ldr	r0, [sp, #12]
     694:	4b16      	ldr	r3, [pc, #88]	; (6f0 <_DetectEthernet+0xd8>)
     696:	4798      	blx	r3
     698:	2801      	cmp	r0, #1
     69a:	d001      	beq.n	6a0 <_DetectEthernet+0x88>
     69c:	2401      	movs	r4, #1
     69e:	4264      	negs	r4, r4
    if (io_read(s_ioSPI, rx_buffer, 1) != 1)  result = -1;
     6a0:	2201      	movs	r2, #1
     6a2:	a901      	add	r1, sp, #4
     6a4:	9803      	ldr	r0, [sp, #12]
     6a6:	4b13      	ldr	r3, [pc, #76]	; (6f4 <_DetectEthernet+0xdc>)
     6a8:	4798      	blx	r3
     6aa:	2801      	cmp	r0, #1
     6ac:	d001      	beq.n	6b2 <_DetectEthernet+0x9a>
     6ae:	2401      	movs	r4, #1
     6b0:	4264      	negs	r4, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     6b2:	2280      	movs	r2, #128	; 0x80
     6b4:	0112      	lsls	r2, r2, #4
     6b6:	23c0      	movs	r3, #192	; 0xc0
     6b8:	05db      	lsls	r3, r3, #23
     6ba:	619a      	str	r2, [r3, #24]
    spi_m_sync_disable(&ETHERNET_SPI);
     6bc:	4809      	ldr	r0, [pc, #36]	; (6e4 <_DetectEthernet+0xcc>)
     6be:	4b0e      	ldr	r3, [pc, #56]	; (6f8 <_DetectEthernet+0xe0>)
     6c0:	4798      	blx	r3
    if (result==-1) return false;
     6c2:	1c63      	adds	r3, r4, #1
     6c4:	d00b      	beq.n	6de <_DetectEthernet+0xc6>
    else if (rx_buffer[0]==0x00 || rx_buffer[0]==0xFF) return false;
     6c6:	ab01      	add	r3, sp, #4
     6c8:	781b      	ldrb	r3, [r3, #0]
     6ca:	3b01      	subs	r3, #1
     6cc:	b2db      	uxtb	r3, r3
     6ce:	2bfd      	cmp	r3, #253	; 0xfd
     6d0:	d803      	bhi.n	6da <_DetectEthernet+0xc2>
    else return true;
     6d2:	2001      	movs	r0, #1
     6d4:	e7a9      	b.n	62a <_DetectEthernet+0x12>
    int8_t result = 0;
     6d6:	2400      	movs	r4, #0
     6d8:	e7be      	b.n	658 <_DetectEthernet+0x40>
    else if (rx_buffer[0]==0x00 || rx_buffer[0]==0xFF) return false;
     6da:	2000      	movs	r0, #0
     6dc:	e7a5      	b.n	62a <_DetectEthernet+0x12>
    if (result==-1) return false;
     6de:	2000      	movs	r0, #0
     6e0:	e7a3      	b.n	62a <_DetectEthernet+0x12>
     6e2:	46c0      	nop			; (mov r8, r8)
     6e4:	20003e0c 	.word	0x20003e0c
     6e8:	00002065 	.word	0x00002065
     6ec:	00001f55 	.word	0x00001f55
     6f0:	00001e8d 	.word	0x00001e8d
     6f4:	00001ec5 	.word	0x00001ec5
     6f8:	00001f7d 	.word	0x00001f7d

000006fc <Ethernet_Detect>:
bool Ethernet_Detect(void) {
     6fc:	b510      	push	{r4, lr}
     6fe:	2204      	movs	r2, #4
     700:	23c0      	movs	r3, #192	; 0xc0
     702:	05db      	lsls	r3, r3, #23
     704:	619a      	str	r2, [r3, #24]
    delay_ms(1);
     706:	2001      	movs	r0, #1
     708:	4b02      	ldr	r3, [pc, #8]	; (714 <Ethernet_Detect+0x18>)
     70a:	4798      	blx	r3
    return _DetectEthernet();
     70c:	4b02      	ldr	r3, [pc, #8]	; (718 <Ethernet_Detect+0x1c>)
     70e:	4798      	blx	r3
}
     710:	bd10      	pop	{r4, pc}
     712:	46c0      	nop			; (mov r8, r8)
     714:	00001d91 	.word	0x00001d91
     718:	00000619 	.word	0x00000619

0000071c <Ethernet_Init>:
int8_t Ethernet_Init(void) {
     71c:	b530      	push	{r4, r5, lr}
     71e:	b087      	sub	sp, #28
    bool fHasEthernet = Ethernet_Detect();
     720:	4b2f      	ldr	r3, [pc, #188]	; (7e0 <Ethernet_Init+0xc4>)
     722:	4798      	blx	r3
    if (fHasEthernet==false) return -1;
     724:	2800      	cmp	r0, #0
     726:	d058      	beq.n	7da <Ethernet_Init+0xbe>
    if (s_fEthernetFirstTime==true) {
     728:	4b2e      	ldr	r3, [pc, #184]	; (7e4 <Ethernet_Init+0xc8>)
     72a:	781b      	ldrb	r3, [r3, #0]
     72c:	2b00      	cmp	r3, #0
     72e:	d039      	beq.n	7a4 <Ethernet_Init+0x88>
        s_fEthernetFirstTime = false;
     730:	2200      	movs	r2, #0
     732:	4b2c      	ldr	r3, [pc, #176]	; (7e4 <Ethernet_Init+0xc8>)
     734:	701a      	strb	r2, [r3, #0]
        Timer_AddTimer(&TIMER_ETH_CONNECION_TIMEOUT);
     736:	4c2c      	ldr	r4, [pc, #176]	; (7e8 <Ethernet_Init+0xcc>)
     738:	0020      	movs	r0, r4
     73a:	4d2c      	ldr	r5, [pc, #176]	; (7ec <Ethernet_Init+0xd0>)
     73c:	47a8      	blx	r5
        Timer_AddTimer(&TIMER_ETH_DNS_TIMEOUT);
     73e:	1ca0      	adds	r0, r4, #2
     740:	47a8      	blx	r5
        Timer_AddTimer(&TIMER_ETH_SERVER_LOST_COMM);
     742:	1d20      	adds	r0, r4, #4
     744:	47a8      	blx	r5
        Timer_AddTimer(&TIMER_ETH_SERVER_ESTABLISH_COMM);
     746:	1da0      	adds	r0, r4, #6
     748:	47a8      	blx	r5
        Timer_AddTimer(&TIMER_ETH_DNS_REMOTE_RESOLUTION_TIMEOUT);
     74a:	0020      	movs	r0, r4
     74c:	3008      	adds	r0, #8
     74e:	47a8      	blx	r5
        Timer_AddTimer(&TIMER_ETH_SOCKET_REMOTE_INIT_TIMEOUT);
     750:	0020      	movs	r0, r4
     752:	300a      	adds	r0, #10
     754:	47a8      	blx	r5
        Timer_AddTimer(&TIMER_ETH_SOCKET_REMOTE_RESPONSE_TIMEOUT);
     756:	0020      	movs	r0, r4
     758:	300c      	adds	r0, #12
     75a:	47a8      	blx	r5
        Timer_AddTimer(&TIMER_ETH_SOCKET_REMOTE_CLEANUP_TIMEOUT);
     75c:	0020      	movs	r0, r4
     75e:	300e      	adds	r0, #14
     760:	47a8      	blx	r5
    memset((uint8_t *)&s_stEthernetInfo, 0, sizeof(sEthernetInfo));
     762:	2218      	movs	r2, #24
     764:	2100      	movs	r1, #0
     766:	4820      	ldr	r0, [pc, #128]	; (7e8 <Ethernet_Init+0xcc>)
     768:	3010      	adds	r0, #16
     76a:	4b21      	ldr	r3, [pc, #132]	; (7f0 <Ethernet_Init+0xd4>)
     76c:	4798      	blx	r3
    sprintf(acHostname, "DCA-00001");
     76e:	466b      	mov	r3, sp
     770:	4a20      	ldr	r2, [pc, #128]	; (7f4 <Ethernet_Init+0xd8>)
     772:	ca03      	ldmia	r2!, {r0, r1}
     774:	c303      	stmia	r3!, {r0, r1}
     776:	0019      	movs	r1, r3
     778:	8813      	ldrh	r3, [r2, #0]
     77a:	800b      	strh	r3, [r1, #0]
    g_au8MacAddress[0] = OUI_BYTE_1; // 0x60
     77c:	481e      	ldr	r0, [pc, #120]	; (7f8 <Ethernet_Init+0xdc>)
     77e:	2360      	movs	r3, #96	; 0x60
     780:	7003      	strb	r3, [r0, #0]
    g_au8MacAddress[1] = OUI_BYTE_2; // 0x54
     782:	3b0c      	subs	r3, #12
     784:	7043      	strb	r3, [r0, #1]
    g_au8MacAddress[2] = OUI_BYTE_3; // 0x64
     786:	3310      	adds	r3, #16
     788:	7083      	strb	r3, [r0, #2]
    g_au8MacAddress[3] = 0x00;
     78a:	2300      	movs	r3, #0
     78c:	70c3      	strb	r3, [r0, #3]
    g_au8MacAddress[4] =  0x10;
     78e:	3310      	adds	r3, #16
     790:	7103      	strb	r3, [r0, #4]
    g_au8MacAddress[5] = 0x01;
     792:	3b0f      	subs	r3, #15
     794:	7143      	strb	r3, [r0, #5]
    ETH_InitMAC((uint8_t*)&g_au8MacAddress[0]);
     796:	4b19      	ldr	r3, [pc, #100]	; (7fc <Ethernet_Init+0xe0>)
     798:	4798      	blx	r3
    tcpip_lite_stack_init();
     79a:	4b19      	ldr	r3, [pc, #100]	; (800 <Ethernet_Init+0xe4>)
     79c:	4798      	blx	r3
	return 0;
     79e:	2000      	movs	r0, #0
}
     7a0:	b007      	add	sp, #28
     7a2:	bd30      	pop	{r4, r5, pc}
        Timer_SetTimer(TIMER_ETH_CONNECION_TIMEOUT, 0);
     7a4:	4d10      	ldr	r5, [pc, #64]	; (7e8 <Ethernet_Init+0xcc>)
     7a6:	8828      	ldrh	r0, [r5, #0]
     7a8:	2100      	movs	r1, #0
     7aa:	4c16      	ldr	r4, [pc, #88]	; (804 <Ethernet_Init+0xe8>)
     7ac:	47a0      	blx	r4
        Timer_SetTimer(TIMER_ETH_DNS_TIMEOUT, 0);
     7ae:	8868      	ldrh	r0, [r5, #2]
     7b0:	2100      	movs	r1, #0
     7b2:	47a0      	blx	r4
        Timer_SetTimer(TIMER_ETH_SERVER_LOST_COMM, 0);
     7b4:	88a8      	ldrh	r0, [r5, #4]
     7b6:	2100      	movs	r1, #0
     7b8:	47a0      	blx	r4
        Timer_SetTimer(TIMER_ETH_SERVER_ESTABLISH_COMM, 0);
     7ba:	88e8      	ldrh	r0, [r5, #6]
     7bc:	2100      	movs	r1, #0
     7be:	47a0      	blx	r4
        Timer_SetTimer(TIMER_ETH_DNS_REMOTE_RESOLUTION_TIMEOUT, 0);
     7c0:	8928      	ldrh	r0, [r5, #8]
     7c2:	2100      	movs	r1, #0
     7c4:	47a0      	blx	r4
        Timer_SetTimer(TIMER_ETH_SOCKET_REMOTE_INIT_TIMEOUT, 0);
     7c6:	8968      	ldrh	r0, [r5, #10]
     7c8:	2100      	movs	r1, #0
     7ca:	47a0      	blx	r4
        Timer_SetTimer(TIMER_ETH_SOCKET_REMOTE_RESPONSE_TIMEOUT, 0);
     7cc:	89a8      	ldrh	r0, [r5, #12]
     7ce:	2100      	movs	r1, #0
     7d0:	47a0      	blx	r4
        Timer_SetTimer(TIMER_ETH_SOCKET_REMOTE_CLEANUP_TIMEOUT, 0);
     7d2:	89e8      	ldrh	r0, [r5, #14]
     7d4:	2100      	movs	r1, #0
     7d6:	47a0      	blx	r4
     7d8:	e7c3      	b.n	762 <Ethernet_Init+0x46>
    if (fHasEthernet==false) return -1;
     7da:	2001      	movs	r0, #1
     7dc:	4240      	negs	r0, r0
     7de:	e7df      	b.n	7a0 <Ethernet_Init+0x84>
     7e0:	000006fd 	.word	0x000006fd
     7e4:	20000001 	.word	0x20000001
     7e8:	20000608 	.word	0x20000608
     7ec:	000016b1 	.word	0x000016b1
     7f0:	00005a39 	.word	0x00005a39
     7f4:	00006654 	.word	0x00006654
     7f8:	20000900 	.word	0x20000900
     7fc:	00003a19 	.word	0x00003a19
     800:	000057a5 	.word	0x000057a5
     804:	000016d1 	.word	0x000016d1

00000808 <Ethernet_HasLink>:

bool Ethernet_HasLink(void) {
     808:	b510      	push	{r4, lr}
	return ETH_CheckLinkUp();
     80a:	4b01      	ldr	r3, [pc, #4]	; (810 <Ethernet_HasLink+0x8>)
     80c:	4798      	blx	r3
}
     80e:	bd10      	pop	{r4, pc}
     810:	0000312d 	.word	0x0000312d

00000814 <_DnsWriteHostname>:
        default:
            break;
    }
}

void _DnsWriteHostname(void) {
     814:	b5f0      	push	{r4, r5, r6, r7, lr}
     816:	46c6      	mov	lr, r8
     818:	b500      	push	{lr}
	char* pcLookAhead;
	char cByte;
	uint8_t u8Len;

	// Initialize pointers
	pcHostname = s_pcLookupHostname;
     81a:	4b1a      	ldr	r3, [pc, #104]	; (884 <_DnsWriteHostname+0x70>)
     81c:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	pcLookAhead = s_pcLookupHostname;
     81e:	0037      	movs	r7, r6
     820:	e026      	b.n	870 <_DnsWriteHostname+0x5c>
	// Loop through the host name string formatting correctly for DNS query
	while (1) {
		u8Len = 0;
		do {
			cByte = *pcLookAhead++;
			u8Len++;
     822:	001c      	movs	r4, r3
			cByte = *pcLookAhead++;
     824:	1c57      	adds	r7, r2, #1
     826:	7815      	ldrb	r5, [r2, #0]
			u8Len++;
     828:	1c63      	adds	r3, r4, #1
     82a:	b2db      	uxtb	r3, r3
		} while((cByte!='\0') && (cByte!='.') && (cByte!='/') && (cByte!=',') && (cByte!='>'));
     82c:	2d00      	cmp	r5, #0
     82e:	d008      	beq.n	842 <_DnsWriteHostname+0x2e>
     830:	2d2e      	cmp	r5, #46	; 0x2e
     832:	d006      	beq.n	842 <_DnsWriteHostname+0x2e>
     834:	2d2f      	cmp	r5, #47	; 0x2f
     836:	d004      	beq.n	842 <_DnsWriteHostname+0x2e>
     838:	2d2c      	cmp	r5, #44	; 0x2c
     83a:	d002      	beq.n	842 <_DnsWriteHostname+0x2e>
			cByte = *pcLookAhead++;
     83c:	003a      	movs	r2, r7
		} while((cByte!='\0') && (cByte!='.') && (cByte!='/') && (cByte!=',') && (cByte!='>'));
     83e:	2d3e      	cmp	r5, #62	; 0x3e
     840:	d1ef      	bne.n	822 <_DnsWriteHostname+0xe>
		// Decrement the length, to exclude the '.', and write it to the UDP
		u8Len--;
		UDP_Write8(u8Len);
     842:	0020      	movs	r0, r4
     844:	4b10      	ldr	r3, [pc, #64]	; (888 <_DnsWriteHostname+0x74>)
     846:	4798      	blx	r3
     848:	e000      	b.n	84c <_DnsWriteHostname+0x38>
		// Put the data up to (but excluding) the '.' in the host name string
		do {
			UDP_Write8(*pcHostname++);
     84a:	4646      	mov	r6, r8
     84c:	1c73      	adds	r3, r6, #1
     84e:	4698      	mov	r8, r3
     850:	7830      	ldrb	r0, [r6, #0]
     852:	4b0d      	ldr	r3, [pc, #52]	; (888 <_DnsWriteHostname+0x74>)
     854:	4798      	blx	r3
			u8Len--;
     856:	3c01      	subs	r4, #1
     858:	b2e4      	uxtb	r4, r4
		} while(u8Len>0);
     85a:	2c00      	cmp	r4, #0
     85c:	d1f5      	bne.n	84a <_DnsWriteHostname+0x36>
		pcHostname++;
     85e:	3602      	adds	r6, #2
		// Break out of the while loop if the last byte read indicates the end of the host name
		if ((cByte=='\0') || (cByte=='/') || (cByte==',') || (cByte=='>'))
     860:	2d00      	cmp	r5, #0
     862:	d008      	beq.n	876 <_DnsWriteHostname+0x62>
     864:	2d2f      	cmp	r5, #47	; 0x2f
     866:	d006      	beq.n	876 <_DnsWriteHostname+0x62>
     868:	2d2c      	cmp	r5, #44	; 0x2c
     86a:	d004      	beq.n	876 <_DnsWriteHostname+0x62>
     86c:	2d3e      	cmp	r5, #62	; 0x3e
     86e:	d002      	beq.n	876 <_DnsWriteHostname+0x62>
	pcLookAhead = s_pcLookupHostname;
     870:	003a      	movs	r2, r7
		u8Len = 0;
     872:	2400      	movs	r4, #0
     874:	e7d6      	b.n	824 <_DnsWriteHostname+0x10>
		break;
	}
	UDP_Write8(0x00); // Write the null terminator for the host name string
     876:	2000      	movs	r0, #0
     878:	4b03      	ldr	r3, [pc, #12]	; (888 <_DnsWriteHostname+0x74>)
     87a:	4798      	blx	r3
}
     87c:	bc04      	pop	{r2}
     87e:	4690      	mov	r8, r2
     880:	bdf0      	pop	{r4, r5, r6, r7, pc}
     882:	46c0      	nop			; (mov r8, r8)
     884:	20000608 	.word	0x20000608
     888:	000034a5 	.word	0x000034a5

0000088c <_ManageEthernetDnsState>:
void _ManageEthernetDnsState(void) {
     88c:	b570      	push	{r4, r5, r6, lr}
    if (s_stEthernetInfo.fConnected==false) return;
     88e:	4b50      	ldr	r3, [pc, #320]	; (9d0 <_ManageEthernetDnsState+0x144>)
     890:	7c1b      	ldrb	r3, [r3, #16]
     892:	2b00      	cmp	r3, #0
     894:	d04c      	beq.n	930 <_ManageEthernetDnsState+0xa4>
    switch(s_eEthernetDnsState) {
     896:	4a4e      	ldr	r2, [pc, #312]	; (9d0 <_ManageEthernetDnsState+0x144>)
     898:	232c      	movs	r3, #44	; 0x2c
     89a:	5cd1      	ldrb	r1, [r2, r3]
     89c:	2906      	cmp	r1, #6
     89e:	d847      	bhi.n	930 <_ManageEthernetDnsState+0xa4>
     8a0:	008b      	lsls	r3, r1, #2
     8a2:	4a4c      	ldr	r2, [pc, #304]	; (9d4 <_ManageEthernetDnsState+0x148>)
     8a4:	58d3      	ldr	r3, [r2, r3]
     8a6:	469f      	mov	pc, r3
			DEBUG_INFO("DNS STATE (START)");
     8a8:	484b      	ldr	r0, [pc, #300]	; (9d8 <_ManageEthernetDnsState+0x14c>)
     8aa:	4b4c      	ldr	r3, [pc, #304]	; (9dc <_ManageEthernetDnsState+0x150>)
     8ac:	4798      	blx	r3
            su8Attempts = 0;
     8ae:	4b48      	ldr	r3, [pc, #288]	; (9d0 <_ManageEthernetDnsState+0x144>)
     8b0:	2200      	movs	r2, #0
     8b2:	212d      	movs	r1, #45	; 0x2d
     8b4:	545a      	strb	r2, [r3, r1]
            su32DnsServer = ipv4DNS[0];
     8b6:	494a      	ldr	r1, [pc, #296]	; (9e0 <_ManageEthernetDnsState+0x154>)
     8b8:	6809      	ldr	r1, [r1, #0]
     8ba:	6319      	str	r1, [r3, #48]	; 0x30
            *s_pu32LookupHostIp = 0;
     8bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
     8be:	600a      	str	r2, [r1, #0]
            s_eEthernetDnsState = DNS_STATE_OPEN_SOCKET;
     8c0:	2102      	movs	r1, #2
     8c2:	322c      	adds	r2, #44	; 0x2c
     8c4:	5499      	strb	r1, [r3, r2]
            Timer_SetTimer(TIMER_ETH_DNS_TIMEOUT, EYEDRO_TIMEOUT_DNS_RESOLUTION);
     8c6:	8858      	ldrh	r0, [r3, #2]
     8c8:	3101      	adds	r1, #1
     8ca:	4b46      	ldr	r3, [pc, #280]	; (9e4 <_ManageEthernetDnsState+0x158>)
     8cc:	4798      	blx	r3
			DEBUG_INFO("DNS STATE (OPEN)");
     8ce:	4846      	ldr	r0, [pc, #280]	; (9e8 <_ManageEthernetDnsState+0x15c>)
     8d0:	4b42      	ldr	r3, [pc, #264]	; (9dc <_ManageEthernetDnsState+0x150>)
     8d2:	4798      	blx	r3
            if (Timer_GetTimer(TIMER_ETH_DNS_TIMEOUT)==0) {
     8d4:	4b3e      	ldr	r3, [pc, #248]	; (9d0 <_ManageEthernetDnsState+0x144>)
     8d6:	8858      	ldrh	r0, [r3, #2]
     8d8:	4b44      	ldr	r3, [pc, #272]	; (9ec <_ManageEthernetDnsState+0x160>)
     8da:	4798      	blx	r3
     8dc:	2800      	cmp	r0, #0
     8de:	d128      	bne.n	932 <_ManageEthernetDnsState+0xa6>
                s_eEthernetDnsState = DNS_STATE_FAIL;
     8e0:	2105      	movs	r1, #5
     8e2:	232c      	movs	r3, #44	; 0x2c
     8e4:	4a3a      	ldr	r2, [pc, #232]	; (9d0 <_ManageEthernetDnsState+0x144>)
     8e6:	54d1      	strb	r1, [r2, r3]
			DEBUG_INFO("DNS STATE (QUERY)");
     8e8:	4841      	ldr	r0, [pc, #260]	; (9f0 <_ManageEthernetDnsState+0x164>)
     8ea:	4b3c      	ldr	r3, [pc, #240]	; (9dc <_ManageEthernetDnsState+0x150>)
     8ec:	4798      	blx	r3
            s_u16TransactionID++;
     8ee:	4d38      	ldr	r5, [pc, #224]	; (9d0 <_ManageEthernetDnsState+0x144>)
     8f0:	8f28      	ldrh	r0, [r5, #56]	; 0x38
     8f2:	3001      	adds	r0, #1
     8f4:	b280      	uxth	r0, r0
     8f6:	8728      	strh	r0, [r5, #56]	; 0x38
            UDP_Write16(s_u16TransactionID);
     8f8:	4c3e      	ldr	r4, [pc, #248]	; (9f4 <_ManageEthernetDnsState+0x168>)
     8fa:	47a0      	blx	r4
            UDP_Write16(0x0100); // Standard query with recursion
     8fc:	2080      	movs	r0, #128	; 0x80
     8fe:	0040      	lsls	r0, r0, #1
     900:	47a0      	blx	r4
            UDP_Write16(0x0001); // 0x0001 questions
     902:	2001      	movs	r0, #1
     904:	47a0      	blx	r4
            UDP_Write16(0x0000); // 0x0000 answers
     906:	2000      	movs	r0, #0
     908:	47a0      	blx	r4
            UDP_Write16(0x0000); // 0x0000 name server resource records
     90a:	2000      	movs	r0, #0
     90c:	47a0      	blx	r4
            UDP_Write16(0x0000); // 0x0000 additional records
     90e:	2000      	movs	r0, #0
     910:	47a0      	blx	r4
            _DnsWriteHostname();
     912:	4b39      	ldr	r3, [pc, #228]	; (9f8 <_ManageEthernetDnsState+0x16c>)
     914:	4798      	blx	r3
            UDP_Write16(0x0001); // Type A (host address)
     916:	2001      	movs	r0, #1
     918:	47a0      	blx	r4
            UDP_Write16(0x0001); // Class: IN (Internet)
     91a:	2001      	movs	r0, #1
     91c:	47a0      	blx	r4
            UDP_Send();
     91e:	4b37      	ldr	r3, [pc, #220]	; (9fc <_ManageEthernetDnsState+0x170>)
     920:	4798      	blx	r3
            Timer_SetTimer(TIMER_ETH_DNS_TIMEOUT, EYEDRO_TIMEOUT_DNS_RESOLUTION);
     922:	8868      	ldrh	r0, [r5, #2]
     924:	2103      	movs	r1, #3
     926:	4b2f      	ldr	r3, [pc, #188]	; (9e4 <_ManageEthernetDnsState+0x158>)
     928:	4798      	blx	r3
            s_eEthernetDnsState = DNS_STATE_GET_RESULT;
     92a:	2204      	movs	r2, #4
     92c:	232c      	movs	r3, #44	; 0x2c
     92e:	54ea      	strb	r2, [r5, r3]
}
     930:	bd70      	pop	{r4, r5, r6, pc}
                if (UDP_Start(su32DnsServer, DNS_APP_PORT, DNS_PORT) != SUCCESS) {
     932:	4b27      	ldr	r3, [pc, #156]	; (9d0 <_ManageEthernetDnsState+0x144>)
     934:	6b18      	ldr	r0, [r3, #48]	; 0x30
     936:	2235      	movs	r2, #53	; 0x35
     938:	2180      	movs	r1, #128	; 0x80
     93a:	0149      	lsls	r1, r1, #5
     93c:	4b30      	ldr	r3, [pc, #192]	; (a00 <_ManageEthernetDnsState+0x174>)
     93e:	4798      	blx	r3
     940:	2801      	cmp	r0, #1
     942:	d1f5      	bne.n	930 <_ManageEthernetDnsState+0xa4>
                    s_eEthernetDnsState = DNS_STATE_QUERY;
     944:	2103      	movs	r1, #3
     946:	232c      	movs	r3, #44	; 0x2c
     948:	4a21      	ldr	r2, [pc, #132]	; (9d0 <_ManageEthernetDnsState+0x144>)
     94a:	54d1      	strb	r1, [r2, r3]
     94c:	e7cc      	b.n	8e8 <_ManageEthernetDnsState+0x5c>
            if (*s_pu32LookupHostIp==0) {
     94e:	4b20      	ldr	r3, [pc, #128]	; (9d0 <_ManageEthernetDnsState+0x144>)
     950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     952:	681b      	ldr	r3, [r3, #0]
     954:	2b00      	cmp	r3, #0
     956:	d10d      	bne.n	974 <_ManageEthernetDnsState+0xe8>
                if (Timer_GetTimer(TIMER_ETH_DNS_TIMEOUT)==0) {
     958:	4b1d      	ldr	r3, [pc, #116]	; (9d0 <_ManageEthernetDnsState+0x144>)
     95a:	8858      	ldrh	r0, [r3, #2]
     95c:	4b23      	ldr	r3, [pc, #140]	; (9ec <_ManageEthernetDnsState+0x160>)
     95e:	4798      	blx	r3
     960:	2800      	cmp	r0, #0
     962:	d1e5      	bne.n	930 <_ManageEthernetDnsState+0xa4>
					DEBUG_INFO("DNS STATE (GET-FAIL)");
     964:	4827      	ldr	r0, [pc, #156]	; (a04 <_ManageEthernetDnsState+0x178>)
     966:	4b1d      	ldr	r3, [pc, #116]	; (9dc <_ManageEthernetDnsState+0x150>)
     968:	4798      	blx	r3
                    s_eEthernetDnsState = DNS_STATE_FAIL;
     96a:	2105      	movs	r1, #5
     96c:	232c      	movs	r3, #44	; 0x2c
     96e:	4a18      	ldr	r2, [pc, #96]	; (9d0 <_ManageEthernetDnsState+0x144>)
     970:	54d1      	strb	r1, [r2, r3]
     972:	e7dd      	b.n	930 <_ManageEthernetDnsState+0xa4>
				DEBUG_INFO("DNS STATE (GET-DONE)");
     974:	4824      	ldr	r0, [pc, #144]	; (a08 <_ManageEthernetDnsState+0x17c>)
     976:	4b19      	ldr	r3, [pc, #100]	; (9dc <_ManageEthernetDnsState+0x150>)
     978:	4798      	blx	r3
                s_eEthernetDnsState = DNS_STATE_DONE;
     97a:	2106      	movs	r1, #6
     97c:	232c      	movs	r3, #44	; 0x2c
     97e:	4a14      	ldr	r2, [pc, #80]	; (9d0 <_ManageEthernetDnsState+0x144>)
     980:	54d1      	strb	r1, [r2, r3]
     982:	e7d5      	b.n	930 <_ManageEthernetDnsState+0xa4>
			DEBUG_INFO("DNS STATE (FAIL)");
     984:	4821      	ldr	r0, [pc, #132]	; (a0c <_ManageEthernetDnsState+0x180>)
     986:	4b15      	ldr	r3, [pc, #84]	; (9dc <_ManageEthernetDnsState+0x150>)
     988:	4798      	blx	r3
            su8Attempts++;
     98a:	4911      	ldr	r1, [pc, #68]	; (9d0 <_ManageEthernetDnsState+0x144>)
     98c:	222d      	movs	r2, #45	; 0x2d
     98e:	5c8b      	ldrb	r3, [r1, r2]
     990:	3301      	adds	r3, #1
     992:	b2db      	uxtb	r3, r3
     994:	548b      	strb	r3, [r1, r2]
            if (su8Attempts<2) {
     996:	2b01      	cmp	r3, #1
     998:	d906      	bls.n	9a8 <_ManageEthernetDnsState+0x11c>
                s_eEthernetDnsState = DNS_STATE_IDLE;
     99a:	4b0d      	ldr	r3, [pc, #52]	; (9d0 <_ManageEthernetDnsState+0x144>)
     99c:	2100      	movs	r1, #0
     99e:	222c      	movs	r2, #44	; 0x2c
     9a0:	5499      	strb	r1, [r3, r2]
                s_pfDnsResponseCb();
     9a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     9a4:	4798      	blx	r3
     9a6:	e7c3      	b.n	930 <_ManageEthernetDnsState+0xa4>
                s_eEthernetDnsState = DNS_STATE_OPEN_SOCKET;
     9a8:	000b      	movs	r3, r1
     9aa:	2102      	movs	r1, #2
     9ac:	3a01      	subs	r2, #1
     9ae:	5499      	strb	r1, [r3, r2]
                Timer_SetTimer(TIMER_ETH_DNS_TIMEOUT, EYEDRO_TIMEOUT_DNS_RESOLUTION);
     9b0:	8858      	ldrh	r0, [r3, #2]
     9b2:	3101      	adds	r1, #1
     9b4:	4b0b      	ldr	r3, [pc, #44]	; (9e4 <_ManageEthernetDnsState+0x158>)
     9b6:	4798      	blx	r3
     9b8:	e7ba      	b.n	930 <_ManageEthernetDnsState+0xa4>
			DEBUG_INFO("DNS STATE (DONE)");
     9ba:	4815      	ldr	r0, [pc, #84]	; (a10 <_ManageEthernetDnsState+0x184>)
     9bc:	4b07      	ldr	r3, [pc, #28]	; (9dc <_ManageEthernetDnsState+0x150>)
     9be:	4798      	blx	r3
            s_eEthernetDnsState = DNS_STATE_IDLE;
     9c0:	4b03      	ldr	r3, [pc, #12]	; (9d0 <_ManageEthernetDnsState+0x144>)
     9c2:	2100      	movs	r1, #0
     9c4:	222c      	movs	r2, #44	; 0x2c
     9c6:	5499      	strb	r1, [r3, r2]
            s_pfDnsResponseCb();
     9c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     9ca:	4798      	blx	r3
     9cc:	e7b0      	b.n	930 <_ManageEthernetDnsState+0xa4>
     9ce:	46c0      	nop			; (mov r8, r8)
     9d0:	20000608 	.word	0x20000608
     9d4:	00006624 	.word	0x00006624
     9d8:	00006660 	.word	0x00006660
     9dc:	00000465 	.word	0x00000465
     9e0:	20003f30 	.word	0x20003f30
     9e4:	000016d1 	.word	0x000016d1
     9e8:	00006674 	.word	0x00006674
     9ec:	000016dd 	.word	0x000016dd
     9f0:	00006688 	.word	0x00006688
     9f4:	000034d5 	.word	0x000034d5
     9f8:	00000815 	.word	0x00000815
     9fc:	0000563d 	.word	0x0000563d
     a00:	00005601 	.word	0x00005601
     a04:	0000669c 	.word	0x0000669c
     a08:	000066b4 	.word	0x000066b4
     a0c:	000066cc 	.word	0x000066cc
     a10:	000066e0 	.word	0x000066e0

00000a14 <_InitEthernetSockets>:

void _InitEthernetSockets(void) {
    s_fEthernetSocketsInitialized = true;
     a14:	2101      	movs	r1, #1
     a16:	2340      	movs	r3, #64	; 0x40
     a18:	4a01      	ldr	r2, [pc, #4]	; (a20 <_InitEthernetSockets+0xc>)
     a1a:	54d1      	strb	r1, [r2, r3]
}
     a1c:	4770      	bx	lr
     a1e:	46c0      	nop			; (mov r8, r8)
     a20:	20000608 	.word	0x20000608

00000a24 <_DnsLookup>:

void _DnsLookup(char* pcHostname, uint32_t* pu32HostIp, dns_function_ptr pfResponseHandler) {
     a24:	b510      	push	{r4, lr}
	// Bail out if the DNS is already in use
	if (s_eEthernetDnsState!=DNS_STATE_IDLE) return;
     a26:	232c      	movs	r3, #44	; 0x2c
     a28:	4c05      	ldr	r4, [pc, #20]	; (a40 <_DnsLookup+0x1c>)
     a2a:	5ce3      	ldrb	r3, [r4, r3]
     a2c:	2b00      	cmp	r3, #0
     a2e:	d105      	bne.n	a3c <_DnsLookup+0x18>

	// Store the result pointers
	s_pcLookupHostname = pcHostname;
     a30:	62a0      	str	r0, [r4, #40]	; 0x28
	s_pu32LookupHostIp = pu32HostIp;
     a32:	6361      	str	r1, [r4, #52]	; 0x34
	s_pfDnsResponseCb = pfResponseHandler;
     a34:	63e2      	str	r2, [r4, #60]	; 0x3c

	// Initiate the DNS
	s_eEthernetDnsState = DNS_STATE_START;
     a36:	2101      	movs	r1, #1
     a38:	222c      	movs	r2, #44	; 0x2c
     a3a:	54a1      	strb	r1, [r4, r2]
}
     a3c:	bd10      	pop	{r4, pc}
     a3e:	46c0      	nop			; (mov r8, r8)
     a40:	20000608 	.word	0x20000608

00000a44 <_DnsRemoteHostCb>:
void _DnsRemoteHostCb(void) {
     a44:	b5f0      	push	{r4, r5, r6, r7, lr}
     a46:	b083      	sub	sp, #12
    memcpy(&au8Tmp[0], (uint8_t*)&s_u32EthernetRemoteHostIp, 4);
     a48:	ae01      	add	r6, sp, #4
     a4a:	4f1c      	ldr	r7, [pc, #112]	; (abc <_DnsRemoteHostCb+0x78>)
     a4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
     a4e:	9101      	str	r1, [sp, #4]
	DEBUG_INFO("%u-", au8Tmp[3]);
     a50:	0e09      	lsrs	r1, r1, #24
     a52:	4d1b      	ldr	r5, [pc, #108]	; (ac0 <_DnsRemoteHostCb+0x7c>)
     a54:	0028      	movs	r0, r5
     a56:	4c1b      	ldr	r4, [pc, #108]	; (ac4 <_DnsRemoteHostCb+0x80>)
     a58:	47a0      	blx	r4
	DEBUG_INFO("%u-", au8Tmp[2]);
     a5a:	78b1      	ldrb	r1, [r6, #2]
     a5c:	0028      	movs	r0, r5
     a5e:	47a0      	blx	r4
	DEBUG_INFO("%u-", au8Tmp[1]);
     a60:	7871      	ldrb	r1, [r6, #1]
     a62:	0028      	movs	r0, r5
     a64:	47a0      	blx	r4
	DEBUG_INFO("%u-", au8Tmp[0]);
     a66:	7831      	ldrb	r1, [r6, #0]
     a68:	0028      	movs	r0, r5
     a6a:	47a0      	blx	r4
	DEBUG_INFO("DNS Remove Host CB");
     a6c:	4816      	ldr	r0, [pc, #88]	; (ac8 <_DnsRemoteHostCb+0x84>)
     a6e:	47a0      	blx	r4
	if (s_u32EthernetRemoteHostIp!=0) {
     a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     a72:	2b00      	cmp	r3, #0
     a74:	d10c      	bne.n	a90 <_DnsRemoteHostCb+0x4c>
		DEBUG_INFO("Failed resolving %s. ", s_pcLookupHostname);
     a76:	4c11      	ldr	r4, [pc, #68]	; (abc <_DnsRemoteHostCb+0x78>)
     a78:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     a7a:	4814      	ldr	r0, [pc, #80]	; (acc <_DnsRemoteHostCb+0x88>)
     a7c:	4b11      	ldr	r3, [pc, #68]	; (ac4 <_DnsRemoteHostCb+0x80>)
     a7e:	4798      	blx	r3
		if (s_u8EthernetRemoteDnsAttempts<3) {
     a80:	2348      	movs	r3, #72	; 0x48
     a82:	5ce3      	ldrb	r3, [r4, r3]
     a84:	2b02      	cmp	r3, #2
     a86:	d90c      	bls.n	aa2 <_DnsRemoteHostCb+0x5e>
			DEBUG_INFO("Unable to resolve. ");
     a88:	4811      	ldr	r0, [pc, #68]	; (ad0 <_DnsRemoteHostCb+0x8c>)
     a8a:	4b0e      	ldr	r3, [pc, #56]	; (ac4 <_DnsRemoteHostCb+0x80>)
     a8c:	4798      	blx	r3
}
     a8e:	e006      	b.n	a9e <_DnsRemoteHostCb+0x5a>
		DEBUG_INFO("%s resolved to IP Address 0x%X. ", s_pcLookupHostname, *s_pu32LookupHostIp);
     a90:	4b0a      	ldr	r3, [pc, #40]	; (abc <_DnsRemoteHostCb+0x78>)
     a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
     a94:	6812      	ldr	r2, [r2, #0]
     a96:	6a99      	ldr	r1, [r3, #40]	; 0x28
     a98:	480e      	ldr	r0, [pc, #56]	; (ad4 <_DnsRemoteHostCb+0x90>)
     a9a:	4b0a      	ldr	r3, [pc, #40]	; (ac4 <_DnsRemoteHostCb+0x80>)
     a9c:	4798      	blx	r3
}
     a9e:	b003      	add	sp, #12
     aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					_DnsLookup(hostname, &s_u32EthernetRemoteHostIp, &_DnsRemoteHostCb);
     aa2:	4c06      	ldr	r4, [pc, #24]	; (abc <_DnsRemoteHostCb+0x78>)
     aa4:	0021      	movs	r1, r4
     aa6:	3144      	adds	r1, #68	; 0x44
     aa8:	4a0b      	ldr	r2, [pc, #44]	; (ad8 <_DnsRemoteHostCb+0x94>)
     aaa:	480c      	ldr	r0, [pc, #48]	; (adc <_DnsRemoteHostCb+0x98>)
     aac:	4b0c      	ldr	r3, [pc, #48]	; (ae0 <_DnsRemoteHostCb+0x9c>)
     aae:	4798      	blx	r3
			s_fEthernetServerCommEstablished = false;
     ab0:	2200      	movs	r2, #0
     ab2:	2349      	movs	r3, #73	; 0x49
     ab4:	54e2      	strb	r2, [r4, r3]
			s_stEthernetInfo.eState = ETHERNET_STATE_ERROR;
     ab6:	3b46      	subs	r3, #70	; 0x46
     ab8:	7463      	strb	r3, [r4, #17]
     aba:	e7f0      	b.n	a9e <_DnsRemoteHostCb+0x5a>
     abc:	20000608 	.word	0x20000608
     ac0:	000066f4 	.word	0x000066f4
     ac4:	00000465 	.word	0x00000465
     ac8:	000066f8 	.word	0x000066f8
     acc:	00006730 	.word	0x00006730
     ad0:	0000675c 	.word	0x0000675c
     ad4:	0000670c 	.word	0x0000670c
     ad8:	00000a45 	.word	0x00000a45
     adc:	00006748 	.word	0x00006748
     ae0:	00000a25 	.word	0x00000a25

00000ae4 <Ethernet_IsConnected>:

bool Ethernet_IsConnected(void) {
	if (s_stEthernetInfo.fConnected==true && s_stEthernetInfo.eState==ETHERNET_STATE_IDLE) return true;
     ae4:	4b04      	ldr	r3, [pc, #16]	; (af8 <Ethernet_IsConnected+0x14>)
     ae6:	8a1a      	ldrh	r2, [r3, #16]
     ae8:	4b04      	ldr	r3, [pc, #16]	; (afc <Ethernet_IsConnected+0x18>)
     aea:	429a      	cmp	r2, r3
     aec:	d001      	beq.n	af2 <Ethernet_IsConnected+0xe>
	else return false;
     aee:	2000      	movs	r0, #0
}
     af0:	4770      	bx	lr
	if (s_stEthernetInfo.fConnected==true && s_stEthernetInfo.eState==ETHERNET_STATE_IDLE) return true;
     af2:	2001      	movs	r0, #1
     af4:	e7fc      	b.n	af0 <Ethernet_IsConnected+0xc>
     af6:	46c0      	nop			; (mov r8, r8)
     af8:	20000608 	.word	0x20000608
     afc:	00000201 	.word	0x00000201

00000b00 <_ManageEthernetRemoteSocketState>:
void _ManageEthernetRemoteSocketState(void) {
     b00:	b5f0      	push	{r4, r5, r6, r7, lr}
     b02:	46d6      	mov	lr, sl
     b04:	464f      	mov	r7, r9
     b06:	b580      	push	{r7, lr}
     b08:	b083      	sub	sp, #12
    if (s_fEthernetSocketsInitialized==false) return;
     b0a:	2340      	movs	r3, #64	; 0x40
     b0c:	4aca      	ldr	r2, [pc, #808]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     b0e:	5cd3      	ldrb	r3, [r2, r3]
     b10:	2b00      	cmp	r3, #0
     b12:	d104      	bne.n	b1e <_ManageEthernetRemoteSocketState+0x1e>
}
     b14:	b003      	add	sp, #12
     b16:	bc0c      	pop	{r2, r3}
     b18:	4691      	mov	r9, r2
     b1a:	469a      	mov	sl, r3
     b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eSocketState = TCP_SocketPoll(&s_stEthernetSocketRemote);
     b1e:	0010      	movs	r0, r2
     b20:	304c      	adds	r0, #76	; 0x4c
     b22:	4bc6      	ldr	r3, [pc, #792]	; (e3c <_ManageEthernetRemoteSocketState+0x33c>)
     b24:	4798      	blx	r3
    switch (eSocketState) {
     b26:	2804      	cmp	r0, #4
     b28:	d900      	bls.n	b2c <_ManageEthernetRemoteSocketState+0x2c>
     b2a:	e218      	b.n	f5e <_ManageEthernetRemoteSocketState+0x45e>
     b2c:	0080      	lsls	r0, r0, #2
     b2e:	4bc4      	ldr	r3, [pc, #784]	; (e40 <_ManageEthernetRemoteSocketState+0x340>)
     b30:	581b      	ldr	r3, [r3, r0]
     b32:	469f      	mov	pc, r3
			DEBUG_INFO("Socket (NOT A SOCKET)");
     b34:	48c3      	ldr	r0, [pc, #780]	; (e44 <_ManageEthernetRemoteSocketState+0x344>)
     b36:	4bc4      	ldr	r3, [pc, #784]	; (e48 <_ManageEthernetRemoteSocketState+0x348>)
     b38:	4798      	blx	r3
            if (TCP_SocketInit(&s_stEthernetSocketRemote) != SUCCESS) return;
     b3a:	48bf      	ldr	r0, [pc, #764]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     b3c:	304c      	adds	r0, #76	; 0x4c
     b3e:	4bc3      	ldr	r3, [pc, #780]	; (e4c <_ManageEthernetRemoteSocketState+0x34c>)
     b40:	4798      	blx	r3
     b42:	2801      	cmp	r0, #1
     b44:	d1e6      	bne.n	b14 <_ManageEthernetRemoteSocketState+0x14>
     b46:	e1dc      	b.n	f02 <_ManageEthernetRemoteSocketState+0x402>
            if (s_fPendingClose==true) {
     b48:	4bc1      	ldr	r3, [pc, #772]	; (e50 <_ManageEthernetRemoteSocketState+0x350>)
     b4a:	7f1b      	ldrb	r3, [r3, #28]
     b4c:	2b00      	cmp	r3, #0
     b4e:	d12c      	bne.n	baa <_ManageEthernetRemoteSocketState+0xaa>
			if (s_fEthernetQueueServerSend==true && s_u32EthernetRemoteHostIp!=0) {
     b50:	4bbf      	ldr	r3, [pc, #764]	; (e50 <_ManageEthernetRemoteSocketState+0x350>)
     b52:	7f9b      	ldrb	r3, [r3, #30]
     b54:	2b00      	cmp	r3, #0
     b56:	d100      	bne.n	b5a <_ManageEthernetRemoteSocketState+0x5a>
     b58:	e1d3      	b.n	f02 <_ManageEthernetRemoteSocketState+0x402>
     b5a:	4bb7      	ldr	r3, [pc, #732]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     b5e:	2b00      	cmp	r3, #0
     b60:	d100      	bne.n	b64 <_ManageEthernetRemoteSocketState+0x64>
     b62:	e1ce      	b.n	f02 <_ManageEthernetRemoteSocketState+0x402>
                if (s_u16EthernetPostLengthOffset==0) {
     b64:	4bba      	ldr	r3, [pc, #744]	; (e50 <_ManageEthernetRemoteSocketState+0x350>)
     b66:	8c1b      	ldrh	r3, [r3, #32]
     b68:	2b00      	cmp	r3, #0
     b6a:	d027      	beq.n	bbc <_ManageEthernetRemoteSocketState+0xbc>
                DEBUG_INFO("Open remote socket. ");
     b6c:	48b9      	ldr	r0, [pc, #740]	; (e54 <_ManageEthernetRemoteSocketState+0x354>)
     b6e:	4bb6      	ldr	r3, [pc, #728]	; (e48 <_ManageEthernetRemoteSocketState+0x348>)
     b70:	4798      	blx	r3
                s_stEthernetSocketAddressRemote.addr.s_addr = s_u32EthernetRemoteHostIp;
     b72:	4bb9      	ldr	r3, [pc, #740]	; (e58 <_ManageEthernetRemoteSocketState+0x358>)
     b74:	48b0      	ldr	r0, [pc, #704]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     b76:	6c42      	ldr	r2, [r0, #68]	; 0x44
     b78:	62da      	str	r2, [r3, #44]	; 0x2c
                s_stEthernetSocketAddressRemote.port = ETHERNET_SOCKET_PORT_HTTP;
     b7a:	2250      	movs	r2, #80	; 0x50
     b7c:	851a      	strh	r2, [r3, #40]	; 0x28
                if (TCP_InsertRxBuffer(&s_stEthernetSocketRemote, (uint8_t*)g_acRxBuffer, RX_BUFFER_NUM_BYTES) != true) {
     b7e:	304c      	adds	r0, #76	; 0x4c
     b80:	2280      	movs	r2, #128	; 0x80
     b82:	0112      	lsls	r2, r2, #4
     b84:	49b5      	ldr	r1, [pc, #724]	; (e5c <_ManageEthernetRemoteSocketState+0x35c>)
     b86:	4bb6      	ldr	r3, [pc, #728]	; (e60 <_ManageEthernetRemoteSocketState+0x360>)
     b88:	4798      	blx	r3
     b8a:	2800      	cmp	r0, #0
     b8c:	d125      	bne.n	bda <_ManageEthernetRemoteSocketState+0xda>
                    if (s_u8TxAttemptCount>5) {} //EyedroApp_SetLastError(EYEDRO_ERROR_ETH_RX_BUFFER_FAILURE);
     b8e:	2330      	movs	r3, #48	; 0x30
     b90:	4ab1      	ldr	r2, [pc, #708]	; (e58 <_ManageEthernetRemoteSocketState+0x358>)
     b92:	5cd3      	ldrb	r3, [r2, r3]
     b94:	2b05      	cmp	r3, #5
     b96:	d803      	bhi.n	ba0 <_ManageEthernetRemoteSocketState+0xa0>
                    else s_u8TxAttemptCount++;
     b98:	3301      	adds	r3, #1
     b9a:	2230      	movs	r2, #48	; 0x30
     b9c:	49ae      	ldr	r1, [pc, #696]	; (e58 <_ManageEthernetRemoteSocketState+0x358>)
     b9e:	548b      	strb	r3, [r1, r2]
                    TCP_SocketRemove(&s_stEthernetSocketRemote);
     ba0:	48a5      	ldr	r0, [pc, #660]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     ba2:	304c      	adds	r0, #76	; 0x4c
     ba4:	4baf      	ldr	r3, [pc, #700]	; (e64 <_ManageEthernetRemoteSocketState+0x364>)
     ba6:	4798      	blx	r3
                    return;
     ba8:	e7b4      	b.n	b14 <_ManageEthernetRemoteSocketState+0x14>
                TCP_SocketRemove(&s_stEthernetSocketRemote);
     baa:	48a3      	ldr	r0, [pc, #652]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     bac:	304c      	adds	r0, #76	; 0x4c
     bae:	4bad      	ldr	r3, [pc, #692]	; (e64 <_ManageEthernetRemoteSocketState+0x364>)
     bb0:	4798      	blx	r3
                s_fPendingRepsonse = false;
     bb2:	4ba7      	ldr	r3, [pc, #668]	; (e50 <_ManageEthernetRemoteSocketState+0x350>)
     bb4:	2200      	movs	r2, #0
     bb6:	775a      	strb	r2, [r3, #29]
                s_fPendingClose = false;
     bb8:	771a      	strb	r2, [r3, #28]
                return;
     bba:	e7ab      	b.n	b14 <_ManageEthernetRemoteSocketState+0x14>
                    DEBUG_INFO("Build common header. ");
     bbc:	48aa      	ldr	r0, [pc, #680]	; (e68 <_ManageEthernetRemoteSocketState+0x368>)
     bbe:	4ba2      	ldr	r3, [pc, #648]	; (e48 <_ManageEthernetRemoteSocketState+0x348>)
     bc0:	4798      	blx	r3
                    s_u16EthernetPostPayloadOffset = Http_BuildPostHeaderCommon(&s_acEthernetStrPostHeader[0], pcHostname, false);
     bc2:	4ca3      	ldr	r4, [pc, #652]	; (e50 <_ManageEthernetRemoteSocketState+0x350>)
     bc4:	0020      	movs	r0, r4
     bc6:	3024      	adds	r0, #36	; 0x24
     bc8:	2200      	movs	r2, #0
     bca:	49a8      	ldr	r1, [pc, #672]	; (e6c <_ManageEthernetRemoteSocketState+0x36c>)
     bcc:	4ba8      	ldr	r3, [pc, #672]	; (e70 <_ManageEthernetRemoteSocketState+0x370>)
     bce:	4798      	blx	r3
     bd0:	4ba1      	ldr	r3, [pc, #644]	; (e58 <_ManageEthernetRemoteSocketState+0x358>)
     bd2:	8498      	strh	r0, [r3, #36]	; 0x24
                    s_u16EthernetPostLengthOffset = s_u16EthernetPostPayloadOffset - 8; // shift back double CRLF and 4 digits...
     bd4:	3808      	subs	r0, #8
     bd6:	8420      	strh	r0, [r4, #32]
     bd8:	e7c8      	b.n	b6c <_ManageEthernetRemoteSocketState+0x6c>
                if (TCP_Connect(&s_stEthernetSocketRemote, &s_stEthernetSocketAddressRemote) == false) {
     bda:	499f      	ldr	r1, [pc, #636]	; (e58 <_ManageEthernetRemoteSocketState+0x358>)
     bdc:	3128      	adds	r1, #40	; 0x28
     bde:	4896      	ldr	r0, [pc, #600]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     be0:	304c      	adds	r0, #76	; 0x4c
     be2:	4ba4      	ldr	r3, [pc, #656]	; (e74 <_ManageEthernetRemoteSocketState+0x374>)
     be4:	4798      	blx	r3
     be6:	2800      	cmp	r0, #0
     be8:	d10d      	bne.n	c06 <_ManageEthernetRemoteSocketState+0x106>
                    if (s_u8TxAttemptCount>5) {} //EyedroApp_SetLastError(EYEDRO_ERROR_ETH_REMOTE_SOCKET_OPEN);
     bea:	2330      	movs	r3, #48	; 0x30
     bec:	4a9a      	ldr	r2, [pc, #616]	; (e58 <_ManageEthernetRemoteSocketState+0x358>)
     bee:	5cd3      	ldrb	r3, [r2, r3]
     bf0:	2b05      	cmp	r3, #5
     bf2:	d803      	bhi.n	bfc <_ManageEthernetRemoteSocketState+0xfc>
                    else s_u8TxAttemptCount++;
     bf4:	3301      	adds	r3, #1
     bf6:	2230      	movs	r2, #48	; 0x30
     bf8:	4997      	ldr	r1, [pc, #604]	; (e58 <_ManageEthernetRemoteSocketState+0x358>)
     bfa:	548b      	strb	r3, [r1, r2]
                    TCP_SocketRemove(&s_stEthernetSocketRemote);
     bfc:	488e      	ldr	r0, [pc, #568]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     bfe:	304c      	adds	r0, #76	; 0x4c
     c00:	4b98      	ldr	r3, [pc, #608]	; (e64 <_ManageEthernetRemoteSocketState+0x364>)
     c02:	4798      	blx	r3
                    return;
     c04:	e786      	b.n	b14 <_ManageEthernetRemoteSocketState+0x14>
                Timer_SetTimer(TIMER_ETH_SOCKET_REMOTE_INIT_TIMEOUT, EYEDRO_TIMEOUT_SOCKET_REMOTE_INIT);
     c06:	4b8c      	ldr	r3, [pc, #560]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     c08:	8958      	ldrh	r0, [r3, #10]
     c0a:	210a      	movs	r1, #10
     c0c:	4b9a      	ldr	r3, [pc, #616]	; (e78 <_ManageEthernetRemoteSocketState+0x378>)
     c0e:	4798      	blx	r3
     c10:	e177      	b.n	f02 <_ManageEthernetRemoteSocketState+0x402>
        if (Timer_GetTimer(TIMER_ETH_SOCKET_REMOTE_INIT_TIMEOUT) == 0) {
     c12:	4b89      	ldr	r3, [pc, #548]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     c14:	8958      	ldrh	r0, [r3, #10]
     c16:	4b99      	ldr	r3, [pc, #612]	; (e7c <_ManageEthernetRemoteSocketState+0x37c>)
     c18:	4798      	blx	r3
     c1a:	2800      	cmp	r0, #0
     c1c:	d000      	beq.n	c20 <_ManageEthernetRemoteSocketState+0x120>
     c1e:	e170      	b.n	f02 <_ManageEthernetRemoteSocketState+0x402>
            TCP_Close(&s_stEthernetSocketRemote);
     c20:	4885      	ldr	r0, [pc, #532]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     c22:	304c      	adds	r0, #76	; 0x4c
     c24:	4b96      	ldr	r3, [pc, #600]	; (e80 <_ManageEthernetRemoteSocketState+0x380>)
     c26:	4798      	blx	r3
     c28:	e16b      	b.n	f02 <_ManageEthernetRemoteSocketState+0x402>
            if (s_fEthernetQueueServerSend==true && s_fPendingRepsonse==false) {
     c2a:	4b89      	ldr	r3, [pc, #548]	; (e50 <_ManageEthernetRemoteSocketState+0x350>)
     c2c:	7f9b      	ldrb	r3, [r3, #30]
     c2e:	2b00      	cmp	r3, #0
     c30:	d003      	beq.n	c3a <_ManageEthernetRemoteSocketState+0x13a>
     c32:	4b87      	ldr	r3, [pc, #540]	; (e50 <_ManageEthernetRemoteSocketState+0x350>)
     c34:	7f5b      	ldrb	r3, [r3, #29]
     c36:	2b00      	cmp	r3, #0
     c38:	d032      	beq.n	ca0 <_ManageEthernetRemoteSocketState+0x1a0>
            if (s_u16EthernetRemainingRemoteBytes!=0) {
     c3a:	4b87      	ldr	r3, [pc, #540]	; (e58 <_ManageEthernetRemoteSocketState+0x358>)
     c3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
     c3e:	2b00      	cmp	r3, #0
     c40:	d100      	bne.n	c44 <_ManageEthernetRemoteSocketState+0x144>
     c42:	e0c9      	b.n	dd8 <_ManageEthernetRemoteSocketState+0x2d8>
                s_stEthernetSocketRemote.localWnd = LOCAL_RX_BUFFER_NUM_BYTES; // set the window to the RX buffer size (to avoid TCP ZeroWindow warnings in Wireshark)
     c44:	487c      	ldr	r0, [pc, #496]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     c46:	304c      	adds	r0, #76	; 0x4c
     c48:	2380      	movs	r3, #128	; 0x80
     c4a:	00db      	lsls	r3, r3, #3
     c4c:	83c3      	strh	r3, [r0, #30]
                if (TCP_SendDone(&s_stEthernetSocketRemote)) {
     c4e:	4b8d      	ldr	r3, [pc, #564]	; (e84 <_ManageEthernetRemoteSocketState+0x384>)
     c50:	4798      	blx	r3
     c52:	2800      	cmp	r0, #0
     c54:	d100      	bne.n	c58 <_ManageEthernetRemoteSocketState+0x158>
     c56:	e0b0      	b.n	dba <_ManageEthernetRemoteSocketState+0x2ba>
                    if (s_u16EthernetRemainingRemoteBytes>MAX_TCP_CHUNK_SIZE) {
     c58:	4b7f      	ldr	r3, [pc, #508]	; (e58 <_ManageEthernetRemoteSocketState+0x358>)
     c5a:	8e59      	ldrh	r1, [r3, #50]	; 0x32
     c5c:	4b8a      	ldr	r3, [pc, #552]	; (e88 <_ManageEthernetRemoteSocketState+0x388>)
     c5e:	4299      	cmp	r1, r3
     c60:	d800      	bhi.n	c64 <_ManageEthernetRemoteSocketState+0x164>
     c62:	e08e      	b.n	d82 <_ManageEthernetRemoteSocketState+0x282>
                        DEBUG_INFO("Sending %d bytes of data to server. ", MAX_TCP_CHUNK_SIZE);
     c64:	001c      	movs	r4, r3
     c66:	0019      	movs	r1, r3
     c68:	4888      	ldr	r0, [pc, #544]	; (e8c <_ManageEthernetRemoteSocketState+0x38c>)
     c6a:	4d77      	ldr	r5, [pc, #476]	; (e48 <_ManageEthernetRemoteSocketState+0x348>)
     c6c:	47a8      	blx	r5
						DEBUG_INFO("%s", (char *)g_acTxBuffer[0]);
     c6e:	4b88      	ldr	r3, [pc, #544]	; (e90 <_ManageEthernetRemoteSocketState+0x390>)
     c70:	7819      	ldrb	r1, [r3, #0]
     c72:	4888      	ldr	r0, [pc, #544]	; (e94 <_ManageEthernetRemoteSocketState+0x394>)
     c74:	47a8      	blx	r5
                        if (TCP_Send(&s_stEthernetSocketRemote, (uint8_t*)s_pvEthernetRemainingRemoteBuffer, MAX_TCP_CHUNK_SIZE) != true) {
     c76:	4b78      	ldr	r3, [pc, #480]	; (e58 <_ManageEthernetRemoteSocketState+0x358>)
     c78:	6b59      	ldr	r1, [r3, #52]	; 0x34
     c7a:	0022      	movs	r2, r4
     c7c:	486e      	ldr	r0, [pc, #440]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     c7e:	304c      	adds	r0, #76	; 0x4c
     c80:	4b85      	ldr	r3, [pc, #532]	; (e98 <_ManageEthernetRemoteSocketState+0x398>)
     c82:	4798      	blx	r3
     c84:	2800      	cmp	r0, #0
     c86:	d074      	beq.n	d72 <_ManageEthernetRemoteSocketState+0x272>
                        s_pvEthernetRemainingRemoteBuffer = (void*)(s_pvEthernetRemainingRemoteBuffer + MAX_TCP_CHUNK_SIZE);
     c88:	4b73      	ldr	r3, [pc, #460]	; (e58 <_ManageEthernetRemoteSocketState+0x358>)
     c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
     c8c:	497e      	ldr	r1, [pc, #504]	; (e88 <_ManageEthernetRemoteSocketState+0x388>)
     c8e:	468c      	mov	ip, r1
     c90:	4462      	add	r2, ip
     c92:	635a      	str	r2, [r3, #52]	; 0x34
                        s_u16EthernetRemainingRemoteBytes = s_u16EthernetRemainingRemoteBytes - MAX_TCP_CHUNK_SIZE;
     c94:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
     c96:	4981      	ldr	r1, [pc, #516]	; (e9c <_ManageEthernetRemoteSocketState+0x39c>)
     c98:	468c      	mov	ip, r1
     c9a:	4462      	add	r2, ip
     c9c:	865a      	strh	r2, [r3, #50]	; 0x32
     c9e:	e130      	b.n	f02 <_ManageEthernetRemoteSocketState+0x402>
                memcpy(pTxDst, s_acEthernetStrPostHeader, s_u16EthernetPostPayloadOffset);
     ca0:	4b6d      	ldr	r3, [pc, #436]	; (e58 <_ManageEthernetRemoteSocketState+0x358>)
     ca2:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
     ca4:	4d7a      	ldr	r5, [pc, #488]	; (e90 <_ManageEthernetRemoteSocketState+0x390>)
     ca6:	0022      	movs	r2, r4
     ca8:	4969      	ldr	r1, [pc, #420]	; (e50 <_ManageEthernetRemoteSocketState+0x350>)
     caa:	3124      	adds	r1, #36	; 0x24
     cac:	0028      	movs	r0, r5
     cae:	4b7c      	ldr	r3, [pc, #496]	; (ea0 <_ManageEthernetRemoteSocketState+0x3a0>)
     cb0:	4798      	blx	r3
                pTxDst += s_u16EthernetPostPayloadOffset;
     cb2:	1964      	adds	r4, r4, r5
                u16FifoBytes = EyedroCmdFifo_Send(pTxDst, COMMAND_FIFO_NUM_BYTES);
     cb4:	2180      	movs	r1, #128	; 0x80
     cb6:	0149      	lsls	r1, r1, #5
     cb8:	0020      	movs	r0, r4
     cba:	4b7a      	ldr	r3, [pc, #488]	; (ea4 <_ManageEthernetRemoteSocketState+0x3a4>)
     cbc:	4798      	blx	r3
     cbe:	b283      	uxth	r3, r0
     cc0:	4699      	mov	r9, r3
     cc2:	0400      	lsls	r0, r0, #16
     cc4:	0c07      	lsrs	r7, r0, #16
				DEBUG_INFO("%u", u16FifoBytes);
     cc6:	0039      	movs	r1, r7
     cc8:	4877      	ldr	r0, [pc, #476]	; (ea8 <_ManageEthernetRemoteSocketState+0x3a8>)
     cca:	4b5f      	ldr	r3, [pc, #380]	; (e48 <_ManageEthernetRemoteSocketState+0x348>)
     ccc:	4798      	blx	r3
                pTxDst += u16FifoBytes;
     cce:	19e4      	adds	r4, r4, r7
                if (u16PayloadBytes>999)     {digits = 4;}
     cd0:	4b76      	ldr	r3, [pc, #472]	; (eac <_ManageEthernetRemoteSocketState+0x3ac>)
     cd2:	4599      	cmp	r9, r3
     cd4:	d806      	bhi.n	ce4 <_ManageEthernetRemoteSocketState+0x1e4>
                else if (u16PayloadBytes>99) {digits = 3;}
     cd6:	464b      	mov	r3, r9
     cd8:	2b63      	cmp	r3, #99	; 0x63
     cda:	d832      	bhi.n	d42 <_ManageEthernetRemoteSocketState+0x242>
                else if (u16PayloadBytes>9)  {digits = 2;}
     cdc:	2b09      	cmp	r3, #9
     cde:	d932      	bls.n	d46 <_ManageEthernetRemoteSocketState+0x246>
     ce0:	2602      	movs	r6, #2
     ce2:	e000      	b.n	ce6 <_ManageEthernetRemoteSocketState+0x1e6>
                if (u16PayloadBytes>999)     {digits = 4;}
     ce4:	2604      	movs	r6, #4
                sprintf(acLength, "%d", u16PayloadBytes);
     ce6:	003a      	movs	r2, r7
     ce8:	4971      	ldr	r1, [pc, #452]	; (eb0 <_ManageEthernetRemoteSocketState+0x3b0>)
     cea:	4668      	mov	r0, sp
     cec:	4b71      	ldr	r3, [pc, #452]	; (eb4 <_ManageEthernetRemoteSocketState+0x3b4>)
     cee:	4798      	blx	r3
                char* pDst = &g_acTxBuffer[s_u16EthernetPostLengthOffset];
     cf0:	4b57      	ldr	r3, [pc, #348]	; (e50 <_ManageEthernetRemoteSocketState+0x350>)
     cf2:	8c1d      	ldrh	r5, [r3, #32]
     cf4:	4866      	ldr	r0, [pc, #408]	; (e90 <_ManageEthernetRemoteSocketState+0x390>)
     cf6:	182d      	adds	r5, r5, r0
                memcpy(pDst, acLength, digits);
     cf8:	0032      	movs	r2, r6
     cfa:	4669      	mov	r1, sp
     cfc:	0028      	movs	r0, r5
     cfe:	4b68      	ldr	r3, [pc, #416]	; (ea0 <_ManageEthernetRemoteSocketState+0x3a0>)
     d00:	469a      	mov	sl, r3
     d02:	4798      	blx	r3
                pDst += digits;
     d04:	19ad      	adds	r5, r5, r6
                memcpy(pDst, "\r\n\r\n", 4);
     d06:	2204      	movs	r2, #4
     d08:	496b      	ldr	r1, [pc, #428]	; (eb8 <_ManageEthernetRemoteSocketState+0x3b8>)
     d0a:	0028      	movs	r0, r5
     d0c:	47d0      	blx	sl
                pDst += 4;
     d0e:	1d28      	adds	r0, r5, #4
                if (digits < 4) {
     d10:	2e03      	cmp	r6, #3
     d12:	d91a      	bls.n	d4a <_ManageEthernetRemoteSocketState+0x24a>
                u16BytesToSend = pTxDst - &g_acTxBuffer[0];
     d14:	4b5e      	ldr	r3, [pc, #376]	; (e90 <_ManageEthernetRemoteSocketState+0x390>)
     d16:	1ae4      	subs	r4, r4, r3
     d18:	b2a4      	uxth	r4, r4
                if (u16PayloadBytes>0) {
     d1a:	464b      	mov	r3, r9
     d1c:	2b00      	cmp	r3, #0
     d1e:	d01e      	beq.n	d5e <_ManageEthernetRemoteSocketState+0x25e>
                    s_u16EthernetRemainingRemoteBytes = u16BytesToSend;
     d20:	4b4d      	ldr	r3, [pc, #308]	; (e58 <_ManageEthernetRemoteSocketState+0x358>)
     d22:	865c      	strh	r4, [r3, #50]	; 0x32
                    s_pvEthernetRemainingRemoteBuffer = (void*)&g_acTxBuffer[0];
     d24:	4a5a      	ldr	r2, [pc, #360]	; (e90 <_ManageEthernetRemoteSocketState+0x390>)
     d26:	635a      	str	r2, [r3, #52]	; 0x34
                    Timer_SetTimer(TIMER_ETH_SOCKET_REMOTE_RESPONSE_TIMEOUT, EYEDRO_TIMEOUT_SOCKET_REMOTE_RESPONSE);
     d28:	4b43      	ldr	r3, [pc, #268]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     d2a:	8998      	ldrh	r0, [r3, #12]
     d2c:	210a      	movs	r1, #10
     d2e:	4b52      	ldr	r3, [pc, #328]	; (e78 <_ManageEthernetRemoteSocketState+0x378>)
     d30:	4798      	blx	r3
                s_fEthernetQueueServerSend = false;
     d32:	2300      	movs	r3, #0
     d34:	4a46      	ldr	r2, [pc, #280]	; (e50 <_ManageEthernetRemoteSocketState+0x350>)
     d36:	7793      	strb	r3, [r2, #30]
                s_u8TxAttemptCount = 0;
     d38:	4a47      	ldr	r2, [pc, #284]	; (e58 <_ManageEthernetRemoteSocketState+0x358>)
     d3a:	2130      	movs	r1, #48	; 0x30
     d3c:	5453      	strb	r3, [r2, r1]
                s_u16ResponseSize = 0;
     d3e:	8713      	strh	r3, [r2, #56]	; 0x38
     d40:	e77b      	b.n	c3a <_ManageEthernetRemoteSocketState+0x13a>
                else if (u16PayloadBytes>99) {digits = 3;}
     d42:	2603      	movs	r6, #3
     d44:	e7cf      	b.n	ce6 <_ManageEthernetRemoteSocketState+0x1e6>
                else                         {digits = 1;}
     d46:	2601      	movs	r6, #1
     d48:	e7cd      	b.n	ce6 <_ManageEthernetRemoteSocketState+0x1e6>
                    memcpy(pDst, (char*)&g_acTxBuffer[s_u16EthernetPostPayloadOffset], u16PayloadBytes);
     d4a:	4b43      	ldr	r3, [pc, #268]	; (e58 <_ManageEthernetRemoteSocketState+0x358>)
     d4c:	8c99      	ldrh	r1, [r3, #36]	; 0x24
     d4e:	4b50      	ldr	r3, [pc, #320]	; (e90 <_ManageEthernetRemoteSocketState+0x390>)
     d50:	18c9      	adds	r1, r1, r3
     d52:	003a      	movs	r2, r7
     d54:	4b52      	ldr	r3, [pc, #328]	; (ea0 <_ManageEthernetRemoteSocketState+0x3a0>)
     d56:	4798      	blx	r3
                    pTxDst += digits;
     d58:	3e04      	subs	r6, #4
     d5a:	19a4      	adds	r4, r4, r6
     d5c:	e7da      	b.n	d14 <_ManageEthernetRemoteSocketState+0x214>
                    DEBUG_INFO("Empty payload. ");
     d5e:	4857      	ldr	r0, [pc, #348]	; (ebc <_ManageEthernetRemoteSocketState+0x3bc>)
     d60:	4c39      	ldr	r4, [pc, #228]	; (e48 <_ManageEthernetRemoteSocketState+0x348>)
     d62:	47a0      	blx	r4
                    TCP_Close(&s_stEthernetSocketRemote);
     d64:	4834      	ldr	r0, [pc, #208]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     d66:	304c      	adds	r0, #76	; 0x4c
     d68:	4b45      	ldr	r3, [pc, #276]	; (e80 <_ManageEthernetRemoteSocketState+0x380>)
     d6a:	4798      	blx	r3
					 DEBUG_INFO("Socket closed");
     d6c:	4854      	ldr	r0, [pc, #336]	; (ec0 <_ManageEthernetRemoteSocketState+0x3c0>)
     d6e:	47a0      	blx	r4
     d70:	e7df      	b.n	d32 <_ManageEthernetRemoteSocketState+0x232>
                            DEBUG_INFO("Failed sending segment. ");
     d72:	4854      	ldr	r0, [pc, #336]	; (ec4 <_ManageEthernetRemoteSocketState+0x3c4>)
     d74:	4b34      	ldr	r3, [pc, #208]	; (e48 <_ManageEthernetRemoteSocketState+0x348>)
     d76:	4798      	blx	r3
                            TCP_Close(&s_stEthernetSocketRemote);
     d78:	482f      	ldr	r0, [pc, #188]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     d7a:	304c      	adds	r0, #76	; 0x4c
     d7c:	4b40      	ldr	r3, [pc, #256]	; (e80 <_ManageEthernetRemoteSocketState+0x380>)
     d7e:	4798      	blx	r3
                            return;
     d80:	e6c8      	b.n	b14 <_ManageEthernetRemoteSocketState+0x14>
                        DEBUG_INFO("Sending %d bytes of data to server. ", s_u16EthernetRemainingRemoteBytes);
     d82:	4842      	ldr	r0, [pc, #264]	; (e8c <_ManageEthernetRemoteSocketState+0x38c>)
     d84:	4b30      	ldr	r3, [pc, #192]	; (e48 <_ManageEthernetRemoteSocketState+0x348>)
     d86:	4798      	blx	r3
                        if (TCP_Send(&s_stEthernetSocketRemote, (uint8_t*)s_pvEthernetRemainingRemoteBuffer, s_u16EthernetRemainingRemoteBytes) != true) {
     d88:	4b33      	ldr	r3, [pc, #204]	; (e58 <_ManageEthernetRemoteSocketState+0x358>)
     d8a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
     d8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
     d8e:	482a      	ldr	r0, [pc, #168]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     d90:	304c      	adds	r0, #76	; 0x4c
     d92:	4b41      	ldr	r3, [pc, #260]	; (e98 <_ManageEthernetRemoteSocketState+0x398>)
     d94:	4798      	blx	r3
     d96:	2800      	cmp	r0, #0
     d98:	d007      	beq.n	daa <_ManageEthernetRemoteSocketState+0x2aa>
                        s_pvEthernetRemainingRemoteBuffer = NULL;
     d9a:	4b2f      	ldr	r3, [pc, #188]	; (e58 <_ManageEthernetRemoteSocketState+0x358>)
     d9c:	2200      	movs	r2, #0
     d9e:	635a      	str	r2, [r3, #52]	; 0x34
                        s_u16EthernetRemainingRemoteBytes = 0;
     da0:	865a      	strh	r2, [r3, #50]	; 0x32
                        s_fPendingRepsonse = true;
     da2:	3201      	adds	r2, #1
     da4:	4b2a      	ldr	r3, [pc, #168]	; (e50 <_ManageEthernetRemoteSocketState+0x350>)
     da6:	775a      	strb	r2, [r3, #29]
     da8:	e0ab      	b.n	f02 <_ManageEthernetRemoteSocketState+0x402>
                            DEBUG_INFO("Failed sending. ");
     daa:	4847      	ldr	r0, [pc, #284]	; (ec8 <_ManageEthernetRemoteSocketState+0x3c8>)
     dac:	4b26      	ldr	r3, [pc, #152]	; (e48 <_ManageEthernetRemoteSocketState+0x348>)
     dae:	4798      	blx	r3
                            TCP_Close(&s_stEthernetSocketRemote);
     db0:	4821      	ldr	r0, [pc, #132]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     db2:	304c      	adds	r0, #76	; 0x4c
     db4:	4b32      	ldr	r3, [pc, #200]	; (e80 <_ManageEthernetRemoteSocketState+0x380>)
     db6:	4798      	blx	r3
                            return;
     db8:	e6ac      	b.n	b14 <_ManageEthernetRemoteSocketState+0x14>
                } else if (Timer_GetTimer(TIMER_ETH_SOCKET_REMOTE_RESPONSE_TIMEOUT)==0) {
     dba:	4b1f      	ldr	r3, [pc, #124]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     dbc:	8998      	ldrh	r0, [r3, #12]
     dbe:	4b2f      	ldr	r3, [pc, #188]	; (e7c <_ManageEthernetRemoteSocketState+0x37c>)
     dc0:	4798      	blx	r3
     dc2:	2800      	cmp	r0, #0
     dc4:	d000      	beq.n	dc8 <_ManageEthernetRemoteSocketState+0x2c8>
     dc6:	e09c      	b.n	f02 <_ManageEthernetRemoteSocketState+0x402>
                    DEBUG_INFO("Failed sending. ");
     dc8:	483f      	ldr	r0, [pc, #252]	; (ec8 <_ManageEthernetRemoteSocketState+0x3c8>)
     dca:	4b1f      	ldr	r3, [pc, #124]	; (e48 <_ManageEthernetRemoteSocketState+0x348>)
     dcc:	4798      	blx	r3
                    TCP_Close(&s_stEthernetSocketRemote);
     dce:	481a      	ldr	r0, [pc, #104]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     dd0:	304c      	adds	r0, #76	; 0x4c
     dd2:	4b2b      	ldr	r3, [pc, #172]	; (e80 <_ManageEthernetRemoteSocketState+0x380>)
     dd4:	4798      	blx	r3
                    return;
     dd6:	e69d      	b.n	b14 <_ManageEthernetRemoteSocketState+0x14>
                if (Timer_GetTimer(TIMER_ETH_SOCKET_REMOTE_RESPONSE_TIMEOUT)==0) {
     dd8:	4b17      	ldr	r3, [pc, #92]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     dda:	8998      	ldrh	r0, [r3, #12]
     ddc:	4b27      	ldr	r3, [pc, #156]	; (e7c <_ManageEthernetRemoteSocketState+0x37c>)
     dde:	4798      	blx	r3
     de0:	2800      	cmp	r0, #0
     de2:	d024      	beq.n	e2e <_ManageEthernetRemoteSocketState+0x32e>
                if (TCP_SendDone(&s_stEthernetSocketRemote)) {
     de4:	4814      	ldr	r0, [pc, #80]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     de6:	304c      	adds	r0, #76	; 0x4c
     de8:	4b26      	ldr	r3, [pc, #152]	; (e84 <_ManageEthernetRemoteSocketState+0x384>)
     dea:	4798      	blx	r3
     dec:	2800      	cmp	r0, #0
     dee:	d100      	bne.n	df2 <_ManageEthernetRemoteSocketState+0x2f2>
     df0:	e087      	b.n	f02 <_ManageEthernetRemoteSocketState+0x402>
                    u16RxSize = TCP_GetRxLength(&s_stEthernetSocketRemote);
     df2:	4811      	ldr	r0, [pc, #68]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     df4:	304c      	adds	r0, #76	; 0x4c
     df6:	4b35      	ldr	r3, [pc, #212]	; (ecc <_ManageEthernetRemoteSocketState+0x3cc>)
     df8:	4798      	blx	r3
                    if (u16RxSize > 0) {
     dfa:	2800      	cmp	r0, #0
     dfc:	d100      	bne.n	e00 <_ManageEthernetRemoteSocketState+0x300>
     dfe:	e080      	b.n	f02 <_ManageEthernetRemoteSocketState+0x402>
                        u16RxSize = TCP_GetReceivedData(&s_stEthernetSocketRemote);
     e00:	480d      	ldr	r0, [pc, #52]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     e02:	304c      	adds	r0, #76	; 0x4c
     e04:	4b32      	ldr	r3, [pc, #200]	; (ed0 <_ManageEthernetRemoteSocketState+0x3d0>)
     e06:	4798      	blx	r3
     e08:	b284      	uxth	r4, r0
                        DEBUG_INFO("Received %d bytes of data from server. ", u16RxSize);
     e0a:	0021      	movs	r1, r4
     e0c:	4831      	ldr	r0, [pc, #196]	; (ed4 <_ManageEthernetRemoteSocketState+0x3d4>)
     e0e:	4b0e      	ldr	r3, [pc, #56]	; (e48 <_ManageEthernetRemoteSocketState+0x348>)
     e10:	4798      	blx	r3
                        s_u16ResponseSize += u16RxSize;
     e12:	4b11      	ldr	r3, [pc, #68]	; (e58 <_ManageEthernetRemoteSocketState+0x358>)
     e14:	8f19      	ldrh	r1, [r3, #56]	; 0x38
     e16:	1861      	adds	r1, r4, r1
     e18:	b289      	uxth	r1, r1
     e1a:	8719      	strh	r1, [r3, #56]	; 0x38
                        if (EyedroTcpParser_ParseServerResponse((char*)g_acRxBuffer, s_u16ResponseSize)==true) {
     e1c:	480f      	ldr	r0, [pc, #60]	; (e5c <_ManageEthernetRemoteSocketState+0x35c>)
     e1e:	4b2e      	ldr	r3, [pc, #184]	; (ed8 <_ManageEthernetRemoteSocketState+0x3d8>)
     e20:	4798      	blx	r3
     e22:	2801      	cmp	r0, #1
     e24:	d05c      	beq.n	ee0 <_ManageEthernetRemoteSocketState+0x3e0>
							DEBUG_INFO("ERROR - invalid response! ");
     e26:	482d      	ldr	r0, [pc, #180]	; (edc <_ManageEthernetRemoteSocketState+0x3dc>)
     e28:	4b07      	ldr	r3, [pc, #28]	; (e48 <_ManageEthernetRemoteSocketState+0x348>)
     e2a:	4798      	blx	r3
     e2c:	e069      	b.n	f02 <_ManageEthernetRemoteSocketState+0x402>
                    TCP_Close(&s_stEthernetSocketRemote);
     e2e:	4802      	ldr	r0, [pc, #8]	; (e38 <_ManageEthernetRemoteSocketState+0x338>)
     e30:	304c      	adds	r0, #76	; 0x4c
     e32:	4b13      	ldr	r3, [pc, #76]	; (e80 <_ManageEthernetRemoteSocketState+0x380>)
     e34:	4798      	blx	r3
                    return;
     e36:	e66d      	b.n	b14 <_ManageEthernetRemoteSocketState+0x14>
     e38:	20000608 	.word	0x20000608
     e3c:	00005371 	.word	0x00005371
     e40:	00006640 	.word	0x00006640
     e44:	00006770 	.word	0x00006770
     e48:	00000465 	.word	0x00000465
     e4c:	00005319 	.word	0x00005319
     e50:	20000688 	.word	0x20000688
     e54:	000067a0 	.word	0x000067a0
     e58:	20000708 	.word	0x20000708
     e5c:	2000360c 	.word	0x2000360c
     e60:	000054c1 	.word	0x000054c1
     e64:	0000538d 	.word	0x0000538d
     e68:	00006788 	.word	0x00006788
     e6c:	00006748 	.word	0x00006748
     e70:	000014d5 	.word	0x000014d5
     e74:	000053b1 	.word	0x000053b1
     e78:	000016d1 	.word	0x000016d1
     e7c:	000016dd 	.word	0x000016dd
     e80:	00005409 	.word	0x00005409
     e84:	000054a1 	.word	0x000054a1
     e88:	00000574 	.word	0x00000574
     e8c:	000067e8 	.word	0x000067e8
     e90:	20001e0c 	.word	0x20001e0c
     e94:	00006810 	.word	0x00006810
     e98:	00005449 	.word	0x00005449
     e9c:	fffffa8c 	.word	0xfffffa8c
     ea0:	00005a27 	.word	0x00005a27
     ea4:	00000435 	.word	0x00000435
     ea8:	000067b8 	.word	0x000067b8
     eac:	000003e7 	.word	0x000003e7
     eb0:	000067bc 	.word	0x000067bc
     eb4:	00005bbd 	.word	0x00005bbd
     eb8:	000067c0 	.word	0x000067c0
     ebc:	000067c8 	.word	0x000067c8
     ec0:	000067d8 	.word	0x000067d8
     ec4:	00006814 	.word	0x00006814
     ec8:	00006830 	.word	0x00006830
     ecc:	00005531 	.word	0x00005531
     ed0:	000054f9 	.word	0x000054f9
     ed4:	00006844 	.word	0x00006844
     ed8:	0000161d 	.word	0x0000161d
     edc:	0000688c 	.word	0x0000688c
                            DEBUG_INFO("Response successfully parsed. ");
     ee0:	4823      	ldr	r0, [pc, #140]	; (f70 <_ManageEthernetRemoteSocketState+0x470>)
     ee2:	4b24      	ldr	r3, [pc, #144]	; (f74 <_ManageEthernetRemoteSocketState+0x474>)
     ee4:	4798      	blx	r3
                            s_fEthernetServerCommEstablished = true;
     ee6:	4824      	ldr	r0, [pc, #144]	; (f78 <_ManageEthernetRemoteSocketState+0x478>)
     ee8:	2201      	movs	r2, #1
     eea:	2349      	movs	r3, #73	; 0x49
     eec:	54c2      	strb	r2, [r0, r3]
                            s_fPendingRepsonse = false;
     eee:	2200      	movs	r2, #0
     ef0:	4b22      	ldr	r3, [pc, #136]	; (f7c <_ManageEthernetRemoteSocketState+0x47c>)
     ef2:	775a      	strb	r2, [r3, #29]
                            TCP_Close(&s_stEthernetSocketRemote);
     ef4:	304c      	adds	r0, #76	; 0x4c
     ef6:	4b22      	ldr	r3, [pc, #136]	; (f80 <_ManageEthernetRemoteSocketState+0x480>)
     ef8:	4798      	blx	r3
     efa:	e002      	b.n	f02 <_ManageEthernetRemoteSocketState+0x402>
			DEBUG_INFO("Socket (SOCKET CLOSING)");
     efc:	4821      	ldr	r0, [pc, #132]	; (f84 <_ManageEthernetRemoteSocketState+0x484>)
     efe:	4b1d      	ldr	r3, [pc, #116]	; (f74 <_ManageEthernetRemoteSocketState+0x474>)
     f00:	4798      	blx	r3
    if (Timer_GetTimer(TIMER_ETH_DNS_REMOTE_RESOLUTION_TIMEOUT)==0) {
     f02:	4b1d      	ldr	r3, [pc, #116]	; (f78 <_ManageEthernetRemoteSocketState+0x478>)
     f04:	8918      	ldrh	r0, [r3, #8]
     f06:	4b20      	ldr	r3, [pc, #128]	; (f88 <_ManageEthernetRemoteSocketState+0x488>)
     f08:	4798      	blx	r3
     f0a:	2800      	cmp	r0, #0
     f0c:	d000      	beq.n	f10 <_ManageEthernetRemoteSocketState+0x410>
     f0e:	e601      	b.n	b14 <_ManageEthernetRemoteSocketState+0x14>
        s_u32EthernetRemoteHostIp = 0;
     f10:	2300      	movs	r3, #0
     f12:	4a19      	ldr	r2, [pc, #100]	; (f78 <_ManageEthernetRemoteSocketState+0x478>)
     f14:	6453      	str	r3, [r2, #68]	; 0x44
        s_u16EthernetPostPayloadOffset = 0;
     f16:	4a1d      	ldr	r2, [pc, #116]	; (f8c <_ManageEthernetRemoteSocketState+0x48c>)
     f18:	8493      	strh	r3, [r2, #36]	; 0x24
        s_u16EthernetPostLengthOffset = 0;
     f1a:	4a18      	ldr	r2, [pc, #96]	; (f7c <_ManageEthernetRemoteSocketState+0x47c>)
     f1c:	8413      	strh	r3, [r2, #32]
        if (Ethernet_IsConnected()==true && s_eEthernetDnsState==DNS_STATE_IDLE) {
     f1e:	4b1c      	ldr	r3, [pc, #112]	; (f90 <_ManageEthernetRemoteSocketState+0x490>)
     f20:	4798      	blx	r3
     f22:	2800      	cmp	r0, #0
     f24:	d100      	bne.n	f28 <_ManageEthernetRemoteSocketState+0x428>
     f26:	e5f5      	b.n	b14 <_ManageEthernetRemoteSocketState+0x14>
     f28:	232c      	movs	r3, #44	; 0x2c
     f2a:	4a13      	ldr	r2, [pc, #76]	; (f78 <_ManageEthernetRemoteSocketState+0x478>)
     f2c:	5cd3      	ldrb	r3, [r2, r3]
     f2e:	2b00      	cmp	r3, #0
     f30:	d000      	beq.n	f34 <_ManageEthernetRemoteSocketState+0x434>
     f32:	e5ef      	b.n	b14 <_ManageEthernetRemoteSocketState+0x14>
            s_u8EthernetRemoteDnsAttempts = 0;
     f34:	0014      	movs	r4, r2
     f36:	2200      	movs	r2, #0
     f38:	3348      	adds	r3, #72	; 0x48
     f3a:	54e2      	strb	r2, [r4, r3]
                    _DnsLookup(hostname, &s_u32EthernetRemoteHostIp, &_DnsRemoteHostCb);
     f3c:	0021      	movs	r1, r4
     f3e:	3144      	adds	r1, #68	; 0x44
     f40:	4d14      	ldr	r5, [pc, #80]	; (f94 <_ManageEthernetRemoteSocketState+0x494>)
     f42:	4a15      	ldr	r2, [pc, #84]	; (f98 <_ManageEthernetRemoteSocketState+0x498>)
     f44:	0028      	movs	r0, r5
     f46:	4b15      	ldr	r3, [pc, #84]	; (f9c <_ManageEthernetRemoteSocketState+0x49c>)
     f48:	4798      	blx	r3
					DEBUG_INFO("HostName-%s", hostname);
     f4a:	0029      	movs	r1, r5
     f4c:	4814      	ldr	r0, [pc, #80]	; (fa0 <_ManageEthernetRemoteSocketState+0x4a0>)
     f4e:	4b09      	ldr	r3, [pc, #36]	; (f74 <_ManageEthernetRemoteSocketState+0x474>)
     f50:	4798      	blx	r3
            Timer_SetTimer(TIMER_ETH_DNS_REMOTE_RESOLUTION_TIMEOUT, EYEDRO_TIMEOUT_DNS_RERESOLVE);
     f52:	8920      	ldrh	r0, [r4, #8]
     f54:	21e1      	movs	r1, #225	; 0xe1
     f56:	0109      	lsls	r1, r1, #4
     f58:	4b12      	ldr	r3, [pc, #72]	; (fa4 <_ManageEthernetRemoteSocketState+0x4a4>)
     f5a:	4798      	blx	r3
     f5c:	e5da      	b.n	b14 <_ManageEthernetRemoteSocketState+0x14>
            DEBUG_INFO("Invalid remote socket state! ");
     f5e:	4812      	ldr	r0, [pc, #72]	; (fa8 <_ManageEthernetRemoteSocketState+0x4a8>)
     f60:	4b04      	ldr	r3, [pc, #16]	; (f74 <_ManageEthernetRemoteSocketState+0x474>)
     f62:	4798      	blx	r3
            s_fEthernetQueueServerSend = false;
     f64:	4b05      	ldr	r3, [pc, #20]	; (f7c <_ManageEthernetRemoteSocketState+0x47c>)
     f66:	2200      	movs	r2, #0
     f68:	779a      	strb	r2, [r3, #30]
            s_fPendingRepsonse = false;
     f6a:	775a      	strb	r2, [r3, #29]
            s_fPendingClose = false;
     f6c:	771a      	strb	r2, [r3, #28]
            break;
     f6e:	e7c8      	b.n	f02 <_ManageEthernetRemoteSocketState+0x402>
     f70:	0000686c 	.word	0x0000686c
     f74:	00000465 	.word	0x00000465
     f78:	20000608 	.word	0x20000608
     f7c:	20000688 	.word	0x20000688
     f80:	00005409 	.word	0x00005409
     f84:	000068a8 	.word	0x000068a8
     f88:	000016dd 	.word	0x000016dd
     f8c:	20000708 	.word	0x20000708
     f90:	00000ae5 	.word	0x00000ae5
     f94:	00006748 	.word	0x00006748
     f98:	00000a45 	.word	0x00000a45
     f9c:	00000a25 	.word	0x00000a25
     fa0:	000068e0 	.word	0x000068e0
     fa4:	000016d1 	.word	0x000016d1
     fa8:	000068c0 	.word	0x000068c0

00000fac <_DeinitEthernetSockets>:

void _DeinitEthernetSockets(void) {
     fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s_fEthernetSocketsInitialized = false;
     fae:	4d08      	ldr	r5, [pc, #32]	; (fd0 <_DeinitEthernetSockets+0x24>)
     fb0:	2400      	movs	r4, #0
     fb2:	2340      	movs	r3, #64	; 0x40
     fb4:	54ec      	strb	r4, [r5, r3]
    TCP_SocketRemove(&s_stEthernetSocketLocal);
     fb6:	4e07      	ldr	r6, [pc, #28]	; (fd4 <_DeinitEthernetSockets+0x28>)
     fb8:	0030      	movs	r0, r6
     fba:	303c      	adds	r0, #60	; 0x3c
     fbc:	4f06      	ldr	r7, [pc, #24]	; (fd8 <_DeinitEthernetSockets+0x2c>)
     fbe:	47b8      	blx	r7
    s_pvEthernetRemainingLocalBuffer = NULL;
    s_u16EthernetRemainingLocalBytes = 0;
     fc0:	4b06      	ldr	r3, [pc, #24]	; (fdc <_DeinitEthernetSockets+0x30>)
     fc2:	819c      	strh	r4, [r3, #12]
    TCP_SocketRemove(&s_stEthernetSocketRemote);
     fc4:	0028      	movs	r0, r5
     fc6:	304c      	adds	r0, #76	; 0x4c
     fc8:	47b8      	blx	r7
    s_pvEthernetRemainingRemoteBuffer = NULL;
     fca:	6374      	str	r4, [r6, #52]	; 0x34
    s_u16EthernetRemainingRemoteBytes = 0;
     fcc:	8674      	strh	r4, [r6, #50]	; 0x32
}
     fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fd0:	20000608 	.word	0x20000608
     fd4:	20000708 	.word	0x20000708
     fd8:	0000538d 	.word	0x0000538d
     fdc:	20000788 	.word	0x20000788

00000fe0 <_ManageEthernetState>:
void _ManageEthernetState(void){
     fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
     fe2:	46de      	mov	lr, fp
     fe4:	4657      	mov	r7, sl
     fe6:	464e      	mov	r6, r9
     fe8:	b5c0      	push	{r6, r7, lr}
     fea:	b082      	sub	sp, #8
	Network_Manage();
     fec:	4b77      	ldr	r3, [pc, #476]	; (11cc <_ManageEthernetState+0x1ec>)
     fee:	4798      	blx	r3
    switch (s_stEthernetInfo.eState) {
     ff0:	4b77      	ldr	r3, [pc, #476]	; (11d0 <_ManageEthernetState+0x1f0>)
     ff2:	7c5b      	ldrb	r3, [r3, #17]
     ff4:	2b01      	cmp	r3, #1
     ff6:	d01b      	beq.n	1030 <_ManageEthernetState+0x50>
     ff8:	2b00      	cmp	r3, #0
     ffa:	d00b      	beq.n	1014 <_ManageEthernetState+0x34>
     ffc:	2b02      	cmp	r3, #2
     ffe:	d100      	bne.n	1002 <_ManageEthernetState+0x22>
    1000:	e09a      	b.n	1138 <_ManageEthernetState+0x158>
    1002:	2b03      	cmp	r3, #3
    1004:	d100      	bne.n	1008 <_ManageEthernetState+0x28>
    1006:	e0d2      	b.n	11ae <_ManageEthernetState+0x1ce>
}
    1008:	b002      	add	sp, #8
    100a:	bc1c      	pop	{r2, r3, r4}
    100c:	4691      	mov	r9, r2
    100e:	469a      	mov	sl, r3
    1010:	46a3      	mov	fp, r4
    1012:	bdf0      	pop	{r4, r5, r6, r7, pc}
            memset((uint8_t *)&s_stEthernetInfo, 0, sizeof(sEthernetInfo));
    1014:	4c6e      	ldr	r4, [pc, #440]	; (11d0 <_ManageEthernetState+0x1f0>)
    1016:	0020      	movs	r0, r4
    1018:	3010      	adds	r0, #16
    101a:	2218      	movs	r2, #24
    101c:	2100      	movs	r1, #0
    101e:	4b6d      	ldr	r3, [pc, #436]	; (11d4 <_ManageEthernetState+0x1f4>)
    1020:	4798      	blx	r3
            s_stEthernetInfo.eState = ETHERNET_STATE_NETWORK_CONFIG;
    1022:	2301      	movs	r3, #1
    1024:	7463      	strb	r3, [r4, #17]
            Timer_SetTimer(TIMER_ETH_CONNECION_TIMEOUT, 3);
    1026:	8820      	ldrh	r0, [r4, #0]
    1028:	2103      	movs	r1, #3
    102a:	4b6b      	ldr	r3, [pc, #428]	; (11d8 <_ManageEthernetState+0x1f8>)
    102c:	4798      	blx	r3
            break;
    102e:	e7eb      	b.n	1008 <_ManageEthernetState+0x28>
            ip = IPV4_GetMyIP();	
    1030:	4b6a      	ldr	r3, [pc, #424]	; (11dc <_ManageEthernetState+0x1fc>)
    1032:	4798      	blx	r3
            if (ip != s_stEthernetInfo.u32IpAddr) {
    1034:	4b66      	ldr	r3, [pc, #408]	; (11d0 <_ManageEthernetState+0x1f0>)
    1036:	695b      	ldr	r3, [r3, #20]
    1038:	4298      	cmp	r0, r3
    103a:	d071      	beq.n	1120 <_ManageEthernetState+0x140>
				DEBUG_INFO("ETHERNET STATE CONFIG (IP CHANGED)");
    103c:	4868      	ldr	r0, [pc, #416]	; (11e0 <_ManageEthernetState+0x200>)
    103e:	4f69      	ldr	r7, [pc, #420]	; (11e4 <_ManageEthernetState+0x204>)
    1040:	47b8      	blx	r7
                DEBUG_INFO("IP Assigned. ");
    1042:	4869      	ldr	r0, [pc, #420]	; (11e8 <_ManageEthernetState+0x208>)
    1044:	47b8      	blx	r7
                s_stEthernetInfo.u32IpAddr = ipv4Address;
    1046:	4c62      	ldr	r4, [pc, #392]	; (11d0 <_ManageEthernetState+0x1f0>)
    1048:	4b68      	ldr	r3, [pc, #416]	; (11ec <_ManageEthernetState+0x20c>)
    104a:	681b      	ldr	r3, [r3, #0]
    104c:	6163      	str	r3, [r4, #20]
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4Address, 4);
    104e:	0c18      	lsrs	r0, r3, #16
    1050:	0a1a      	lsrs	r2, r3, #8
    1052:	9301      	str	r3, [sp, #4]
                s_stEthernetInfo.au8IpAddr[0] = au8Tmp[3];
    1054:	0e19      	lsrs	r1, r3, #24
    1056:	7621      	strb	r1, [r4, #24]
                s_stEthernetInfo.au8IpAddr[1] = au8Tmp[2];
    1058:	7660      	strb	r0, [r4, #25]
                s_stEthernetInfo.au8IpAddr[2] = au8Tmp[1];
    105a:	76a2      	strb	r2, [r4, #26]
                s_stEthernetInfo.au8IpAddr[3] = au8Tmp[0];
    105c:	76e3      	strb	r3, [r4, #27]
				DEBUG_INFO("%u-", s_stEthernetInfo.au8IpAddr[0]);
    105e:	4d64      	ldr	r5, [pc, #400]	; (11f0 <_ManageEthernetState+0x210>)
    1060:	0028      	movs	r0, r5
    1062:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8IpAddr[1]);
    1064:	7e61      	ldrb	r1, [r4, #25]
    1066:	0028      	movs	r0, r5
    1068:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8IpAddr[2]);
    106a:	7ea1      	ldrb	r1, [r4, #26]
    106c:	0028      	movs	r0, r5
    106e:	47b8      	blx	r7
				DEBUG_INFO("%u", s_stEthernetInfo.au8IpAddr[3]);
    1070:	7ee1      	ldrb	r1, [r4, #27]
    1072:	4860      	ldr	r0, [pc, #384]	; (11f4 <_ManageEthernetState+0x214>)
    1074:	47b8      	blx	r7
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4SubnetMask, 4);
    1076:	4b60      	ldr	r3, [pc, #384]	; (11f8 <_ManageEthernetState+0x218>)
    1078:	681b      	ldr	r3, [r3, #0]
    107a:	0c18      	lsrs	r0, r3, #16
    107c:	0a1a      	lsrs	r2, r3, #8
    107e:	9301      	str	r3, [sp, #4]
                s_stEthernetInfo.au8SubnetMask[0] = au8Tmp[3];
    1080:	0e19      	lsrs	r1, r3, #24
    1082:	7721      	strb	r1, [r4, #28]
                s_stEthernetInfo.au8SubnetMask[1] = au8Tmp[2];
    1084:	7760      	strb	r0, [r4, #29]
                s_stEthernetInfo.au8SubnetMask[2] = au8Tmp[1];
    1086:	77a2      	strb	r2, [r4, #30]
                s_stEthernetInfo.au8SubnetMask[3] = au8Tmp[0];
    1088:	77e3      	strb	r3, [r4, #31]
				DEBUG_INFO(",%u-", s_stEthernetInfo.au8SubnetMask[0]);
    108a:	485c      	ldr	r0, [pc, #368]	; (11fc <_ManageEthernetState+0x21c>)
    108c:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8SubnetMask[1]);
    108e:	7f61      	ldrb	r1, [r4, #29]
    1090:	0028      	movs	r0, r5
    1092:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8SubnetMask[2]);
    1094:	7fa1      	ldrb	r1, [r4, #30]
    1096:	0028      	movs	r0, r5
    1098:	47b8      	blx	r7
				DEBUG_INFO("%u", s_stEthernetInfo.au8SubnetMask[3]);
    109a:	7fe1      	ldrb	r1, [r4, #31]
    109c:	4855      	ldr	r0, [pc, #340]	; (11f4 <_ManageEthernetState+0x214>)
    109e:	47b8      	blx	r7
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4Router, 4);
    10a0:	4b57      	ldr	r3, [pc, #348]	; (1200 <_ManageEthernetState+0x220>)
    10a2:	681b      	ldr	r3, [r3, #0]
    10a4:	0c18      	lsrs	r0, r3, #16
    10a6:	0a1a      	lsrs	r2, r3, #8
    10a8:	9301      	str	r3, [sp, #4]
                s_stEthernetInfo.au8Gateway[0] = au8Tmp[3];
    10aa:	0e19      	lsrs	r1, r3, #24
    10ac:	2620      	movs	r6, #32
    10ae:	55a1      	strb	r1, [r4, r6]
                s_stEthernetInfo.au8Gateway[1] = au8Tmp[2];
    10b0:	3601      	adds	r6, #1
    10b2:	55a0      	strb	r0, [r4, r6]
                s_stEthernetInfo.au8Gateway[2] = au8Tmp[1];
    10b4:	2022      	movs	r0, #34	; 0x22
    10b6:	4682      	mov	sl, r0
    10b8:	5422      	strb	r2, [r4, r0]
                s_stEthernetInfo.au8Gateway[3] = au8Tmp[0];
    10ba:	2223      	movs	r2, #35	; 0x23
    10bc:	4691      	mov	r9, r2
    10be:	54a3      	strb	r3, [r4, r2]
				DEBUG_INFO(",%u-", s_stEthernetInfo.au8Gateway[0]);
    10c0:	484e      	ldr	r0, [pc, #312]	; (11fc <_ManageEthernetState+0x21c>)
    10c2:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8Gateway[1]);
    10c4:	5da1      	ldrb	r1, [r4, r6]
    10c6:	0028      	movs	r0, r5
    10c8:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8Gateway[2]);
    10ca:	4653      	mov	r3, sl
    10cc:	5ce1      	ldrb	r1, [r4, r3]
    10ce:	0028      	movs	r0, r5
    10d0:	47b8      	blx	r7
				DEBUG_INFO("%u", s_stEthernetInfo.au8Gateway[3]);
    10d2:	464b      	mov	r3, r9
    10d4:	5ce1      	ldrb	r1, [r4, r3]
    10d6:	4847      	ldr	r0, [pc, #284]	; (11f4 <_ManageEthernetState+0x214>)
    10d8:	47b8      	blx	r7
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4DNS, 4);
    10da:	4b4a      	ldr	r3, [pc, #296]	; (1204 <_ManageEthernetState+0x224>)
    10dc:	681b      	ldr	r3, [r3, #0]
    10de:	0c18      	lsrs	r0, r3, #16
    10e0:	0a1a      	lsrs	r2, r3, #8
    10e2:	9301      	str	r3, [sp, #4]
                s_stEthernetInfo.au8Dns[0] = au8Tmp[3];
    10e4:	0e19      	lsrs	r1, r3, #24
    10e6:	3603      	adds	r6, #3
    10e8:	55a1      	strb	r1, [r4, r6]
                s_stEthernetInfo.au8Dns[1] = au8Tmp[2];
    10ea:	3601      	adds	r6, #1
    10ec:	55a0      	strb	r0, [r4, r6]
                s_stEthernetInfo.au8Dns[2] = au8Tmp[1];
    10ee:	2026      	movs	r0, #38	; 0x26
    10f0:	4682      	mov	sl, r0
    10f2:	5422      	strb	r2, [r4, r0]
                s_stEthernetInfo.au8Dns[3] = au8Tmp[0];
    10f4:	2227      	movs	r2, #39	; 0x27
    10f6:	4691      	mov	r9, r2
    10f8:	54a3      	strb	r3, [r4, r2]
				DEBUG_INFO(",%u-", s_stEthernetInfo.au8Dns[0]);
    10fa:	4840      	ldr	r0, [pc, #256]	; (11fc <_ManageEthernetState+0x21c>)
    10fc:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8Dns[1]);
    10fe:	5da1      	ldrb	r1, [r4, r6]
    1100:	0028      	movs	r0, r5
    1102:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8Dns[2]);
    1104:	4653      	mov	r3, sl
    1106:	5ce1      	ldrb	r1, [r4, r3]
    1108:	0028      	movs	r0, r5
    110a:	47b8      	blx	r7
				DEBUG_INFO("%u", s_stEthernetInfo.au8Dns[3]);
    110c:	464b      	mov	r3, r9
    110e:	5ce1      	ldrb	r1, [r4, r3]
    1110:	4838      	ldr	r0, [pc, #224]	; (11f4 <_ManageEthernetState+0x214>)
    1112:	47b8      	blx	r7
                _InitEthernetSockets();
    1114:	4b3c      	ldr	r3, [pc, #240]	; (1208 <_ManageEthernetState+0x228>)
    1116:	4798      	blx	r3
                s_stEthernetInfo.fConnected = true;
    1118:	2301      	movs	r3, #1
    111a:	7423      	strb	r3, [r4, #16]
                s_stEthernetInfo.eState = ETHERNET_STATE_IDLE;
    111c:	3301      	adds	r3, #1
    111e:	7463      	strb	r3, [r4, #17]
            if (Timer_GetTimer(TIMER_ETH_CONNECION_TIMEOUT)==0) {
    1120:	4b2b      	ldr	r3, [pc, #172]	; (11d0 <_ManageEthernetState+0x1f0>)
    1122:	8818      	ldrh	r0, [r3, #0]
    1124:	4b39      	ldr	r3, [pc, #228]	; (120c <_ManageEthernetState+0x22c>)
    1126:	4798      	blx	r3
    1128:	2800      	cmp	r0, #0
    112a:	d000      	beq.n	112e <_ManageEthernetState+0x14e>
    112c:	e76c      	b.n	1008 <_ManageEthernetState+0x28>
                s_stEthernetInfo.fConnected = false;
    112e:	4b28      	ldr	r3, [pc, #160]	; (11d0 <_ManageEthernetState+0x1f0>)
    1130:	2200      	movs	r2, #0
    1132:	741a      	strb	r2, [r3, #16]
                s_stEthernetInfo.eState = ETHERNET_STATE_INITIALIZE;
    1134:	745a      	strb	r2, [r3, #17]
    1136:	e767      	b.n	1008 <_ManageEthernetState+0x28>
            ip = IPV4_GetMyIP();
    1138:	4b28      	ldr	r3, [pc, #160]	; (11dc <_ManageEthernetState+0x1fc>)
    113a:	4798      	blx	r3
            if (ip != s_stEthernetInfo.u32IpAddr) {
    113c:	4b24      	ldr	r3, [pc, #144]	; (11d0 <_ManageEthernetState+0x1f0>)
    113e:	695b      	ldr	r3, [r3, #20]
    1140:	4298      	cmp	r0, r3
    1142:	d100      	bne.n	1146 <_ManageEthernetState+0x166>
    1144:	e760      	b.n	1008 <_ManageEthernetState+0x28>
				DEBUG_INFO("ETHERNET STATE IDLE (IP CHANGED)");
    1146:	4832      	ldr	r0, [pc, #200]	; (1210 <_ManageEthernetState+0x230>)
    1148:	4c26      	ldr	r4, [pc, #152]	; (11e4 <_ManageEthernetState+0x204>)
    114a:	47a0      	blx	r4
                DEBUG_INFO("IP address changed. ");
    114c:	4831      	ldr	r0, [pc, #196]	; (1214 <_ManageEthernetState+0x234>)
    114e:	47a0      	blx	r4
                s_stEthernetInfo.u32IpAddr = ipv4Address;
    1150:	4b1f      	ldr	r3, [pc, #124]	; (11d0 <_ManageEthernetState+0x1f0>)
    1152:	4a26      	ldr	r2, [pc, #152]	; (11ec <_ManageEthernetState+0x20c>)
    1154:	6812      	ldr	r2, [r2, #0]
    1156:	615a      	str	r2, [r3, #20]
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4Address, 4);
    1158:	0c10      	lsrs	r0, r2, #16
    115a:	0a11      	lsrs	r1, r2, #8
                s_stEthernetInfo.au8IpAddr[0] = au8Tmp[3];
    115c:	0e14      	lsrs	r4, r2, #24
    115e:	761c      	strb	r4, [r3, #24]
                s_stEthernetInfo.au8IpAddr[1] = au8Tmp[2];
    1160:	7658      	strb	r0, [r3, #25]
                s_stEthernetInfo.au8IpAddr[2] = au8Tmp[1];
    1162:	7699      	strb	r1, [r3, #26]
                s_stEthernetInfo.au8IpAddr[3] = au8Tmp[0];
    1164:	76da      	strb	r2, [r3, #27]
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4SubnetMask, 4);
    1166:	4a24      	ldr	r2, [pc, #144]	; (11f8 <_ManageEthernetState+0x218>)
    1168:	6812      	ldr	r2, [r2, #0]
    116a:	0c10      	lsrs	r0, r2, #16
    116c:	0a11      	lsrs	r1, r2, #8
                s_stEthernetInfo.au8SubnetMask[0] = au8Tmp[3];
    116e:	0e14      	lsrs	r4, r2, #24
    1170:	771c      	strb	r4, [r3, #28]
                s_stEthernetInfo.au8SubnetMask[1] = au8Tmp[2];
    1172:	7758      	strb	r0, [r3, #29]
                s_stEthernetInfo.au8SubnetMask[2] = au8Tmp[1];
    1174:	7799      	strb	r1, [r3, #30]
                s_stEthernetInfo.au8SubnetMask[3] = au8Tmp[0];
    1176:	77da      	strb	r2, [r3, #31]
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4Router, 4);
    1178:	4a21      	ldr	r2, [pc, #132]	; (1200 <_ManageEthernetState+0x220>)
    117a:	6812      	ldr	r2, [r2, #0]
    117c:	0c14      	lsrs	r4, r2, #16
    117e:	0a10      	lsrs	r0, r2, #8
                s_stEthernetInfo.au8Gateway[0] = au8Tmp[3];
    1180:	0e15      	lsrs	r5, r2, #24
    1182:	2120      	movs	r1, #32
    1184:	545d      	strb	r5, [r3, r1]
                s_stEthernetInfo.au8Gateway[1] = au8Tmp[2];
    1186:	3101      	adds	r1, #1
    1188:	545c      	strb	r4, [r3, r1]
                s_stEthernetInfo.au8Gateway[2] = au8Tmp[1];
    118a:	3101      	adds	r1, #1
    118c:	5458      	strb	r0, [r3, r1]
                s_stEthernetInfo.au8Gateway[3] = au8Tmp[0];
    118e:	3101      	adds	r1, #1
    1190:	545a      	strb	r2, [r3, r1]
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4DNS, 4);
    1192:	4a1c      	ldr	r2, [pc, #112]	; (1204 <_ManageEthernetState+0x224>)
    1194:	6812      	ldr	r2, [r2, #0]
    1196:	0c14      	lsrs	r4, r2, #16
    1198:	0a10      	lsrs	r0, r2, #8
                s_stEthernetInfo.au8Dns[0] = au8Tmp[3];
    119a:	0e15      	lsrs	r5, r2, #24
    119c:	3101      	adds	r1, #1
    119e:	545d      	strb	r5, [r3, r1]
                s_stEthernetInfo.au8Dns[1] = au8Tmp[2];
    11a0:	3101      	adds	r1, #1
    11a2:	545c      	strb	r4, [r3, r1]
                s_stEthernetInfo.au8Dns[2] = au8Tmp[1];
    11a4:	3101      	adds	r1, #1
    11a6:	5458      	strb	r0, [r3, r1]
                s_stEthernetInfo.au8Dns[3] = au8Tmp[0];
    11a8:	3101      	adds	r1, #1
    11aa:	545a      	strb	r2, [r3, r1]
    11ac:	e72c      	b.n	1008 <_ManageEthernetState+0x28>
			DEBUG_INFO("ETHERNET STATE ERROR");
    11ae:	481a      	ldr	r0, [pc, #104]	; (1218 <_ManageEthernetState+0x238>)
    11b0:	4b0c      	ldr	r3, [pc, #48]	; (11e4 <_ManageEthernetState+0x204>)
    11b2:	4798      	blx	r3
            s_stEthernetInfo.u32IpAddr = 0;
    11b4:	4c06      	ldr	r4, [pc, #24]	; (11d0 <_ManageEthernetState+0x1f0>)
    11b6:	2500      	movs	r5, #0
    11b8:	6165      	str	r5, [r4, #20]
            memset(&s_stEthernetInfo.au8IpAddr[0], 0, 4);
    11ba:	61a5      	str	r5, [r4, #24]
            memset(&s_stEthernetInfo.au8SubnetMask[0], 0, 4);
    11bc:	61e5      	str	r5, [r4, #28]
            memset(&s_stEthernetInfo.au8Gateway[0], 0, 4);
    11be:	6225      	str	r5, [r4, #32]
            memset(&s_stEthernetInfo.au8Dns[0], 0, 4);
    11c0:	6265      	str	r5, [r4, #36]	; 0x24
			_DeinitEthernetSockets();
    11c2:	4b16      	ldr	r3, [pc, #88]	; (121c <_ManageEthernetState+0x23c>)
    11c4:	4798      	blx	r3
            s_stEthernetInfo.fConnected = false;
    11c6:	7425      	strb	r5, [r4, #16]
            s_stEthernetInfo.eState = ETHERNET_STATE_INITIALIZE;
    11c8:	7465      	strb	r5, [r4, #17]
}
    11ca:	e71d      	b.n	1008 <_ManageEthernetState+0x28>
    11cc:	00004561 	.word	0x00004561
    11d0:	20000608 	.word	0x20000608
    11d4:	00005a39 	.word	0x00005a39
    11d8:	000016d1 	.word	0x000016d1
    11dc:	00004459 	.word	0x00004459
    11e0:	000068ec 	.word	0x000068ec
    11e4:	00000465 	.word	0x00000465
    11e8:	00006910 	.word	0x00006910
    11ec:	20003f2c 	.word	0x20003f2c
    11f0:	000066f4 	.word	0x000066f4
    11f4:	000067b8 	.word	0x000067b8
    11f8:	20003f14 	.word	0x20003f14
    11fc:	00006920 	.word	0x00006920
    1200:	20003f0c 	.word	0x20003f0c
    1204:	20003f30 	.word	0x20003f30
    1208:	00000a15 	.word	0x00000a15
    120c:	000016dd 	.word	0x000016dd
    1210:	00006928 	.word	0x00006928
    1214:	0000694c 	.word	0x0000694c
    1218:	00006964 	.word	0x00006964
    121c:	00000fad 	.word	0x00000fad

00001220 <Ethernet_PumpEvents>:
void Ethernet_PumpEvents(void) {
    1220:	b510      	push	{r4, lr}
    if (s_fLinkUp==false) {
    1222:	4b2a      	ldr	r3, [pc, #168]	; (12cc <Ethernet_PumpEvents+0xac>)
    1224:	7b9b      	ldrb	r3, [r3, #14]
    1226:	2b00      	cmp	r3, #0
    1228:	d106      	bne.n	1238 <Ethernet_PumpEvents+0x18>
        if (Ethernet_HasLink()==false) {
    122a:	4b29      	ldr	r3, [pc, #164]	; (12d0 <Ethernet_PumpEvents+0xb0>)
    122c:	4798      	blx	r3
    122e:	2800      	cmp	r0, #0
    1230:	d014      	beq.n	125c <Ethernet_PumpEvents+0x3c>
            s_fLinkUp = true;
    1232:	2201      	movs	r2, #1
    1234:	4b25      	ldr	r3, [pc, #148]	; (12cc <Ethernet_PumpEvents+0xac>)
    1236:	739a      	strb	r2, [r3, #14]
    _ManageEthernetState();
    1238:	4b26      	ldr	r3, [pc, #152]	; (12d4 <Ethernet_PumpEvents+0xb4>)
    123a:	4798      	blx	r3
    if (s_u16EthernetRemainingLocalBytes==0) {
    123c:	4b23      	ldr	r3, [pc, #140]	; (12cc <Ethernet_PumpEvents+0xac>)
    123e:	899b      	ldrh	r3, [r3, #12]
    1240:	2b00      	cmp	r3, #0
    1242:	d00f      	beq.n	1264 <Ethernet_PumpEvents+0x44>
    _ManageEthernetDnsState();
    1244:	4b24      	ldr	r3, [pc, #144]	; (12d8 <Ethernet_PumpEvents+0xb8>)
    1246:	4798      	blx	r3
    if (s_fEthernetServerCommEstablished==true) {
    1248:	2349      	movs	r3, #73	; 0x49
    124a:	4a24      	ldr	r2, [pc, #144]	; (12dc <Ethernet_PumpEvents+0xbc>)
    124c:	5cd3      	ldrb	r3, [r2, r3]
    124e:	2b00      	cmp	r3, #0
    1250:	d10b      	bne.n	126a <Ethernet_PumpEvents+0x4a>
    if (s_fEthernetServerCommLost==true) {
    1252:	4b1e      	ldr	r3, [pc, #120]	; (12cc <Ethernet_PumpEvents+0xac>)
    1254:	7bdb      	ldrb	r3, [r3, #15]
    1256:	2b00      	cmp	r3, #0
    1258:	d132      	bne.n	12c0 <Ethernet_PumpEvents+0xa0>
}
    125a:	bd10      	pop	{r4, pc}
            App_SetStatus(STATUS_NO_SERVER_COMM);
    125c:	3002      	adds	r0, #2
    125e:	4b20      	ldr	r3, [pc, #128]	; (12e0 <Ethernet_PumpEvents+0xc0>)
    1260:	4798      	blx	r3
            return;
    1262:	e7fa      	b.n	125a <Ethernet_PumpEvents+0x3a>
        _ManageEthernetRemoteSocketState();
    1264:	4b1f      	ldr	r3, [pc, #124]	; (12e4 <Ethernet_PumpEvents+0xc4>)
    1266:	4798      	blx	r3
    1268:	e7ec      	b.n	1244 <Ethernet_PumpEvents+0x24>
        if (Timer_GetTimer(TIMER_ETH_SERVER_LOST_COMM)==0) {
    126a:	8890      	ldrh	r0, [r2, #4]
    126c:	4b1e      	ldr	r3, [pc, #120]	; (12e8 <Ethernet_PumpEvents+0xc8>)
    126e:	4798      	blx	r3
    1270:	2800      	cmp	r0, #0
    1272:	d11e      	bne.n	12b2 <Ethernet_PumpEvents+0x92>
            DEBUG_INFO("Server not responding. ");
    1274:	481d      	ldr	r0, [pc, #116]	; (12ec <Ethernet_PumpEvents+0xcc>)
    1276:	4b1e      	ldr	r3, [pc, #120]	; (12f0 <Ethernet_PumpEvents+0xd0>)
    1278:	4798      	blx	r3
            App_SetStatus(STATUS_NO_SERVER_COMM);
    127a:	2002      	movs	r0, #2
    127c:	4b18      	ldr	r3, [pc, #96]	; (12e0 <Ethernet_PumpEvents+0xc0>)
    127e:	4798      	blx	r3
            s_fEthernetServerCommEstablished = false;
    1280:	2100      	movs	r1, #0
    1282:	2349      	movs	r3, #73	; 0x49
    1284:	4a15      	ldr	r2, [pc, #84]	; (12dc <Ethernet_PumpEvents+0xbc>)
    1286:	54d1      	strb	r1, [r2, r3]
            s_fEthernetServerCommLost = true;
    1288:	4a10      	ldr	r2, [pc, #64]	; (12cc <Ethernet_PumpEvents+0xac>)
    128a:	3b48      	subs	r3, #72	; 0x48
    128c:	73d3      	strb	r3, [r2, #15]
            s_u8EthernetHostIdx++; // alt1, alt2, primary, failsafe
    128e:	7c13      	ldrb	r3, [r2, #16]
    1290:	3301      	adds	r3, #1
    1292:	b2db      	uxtb	r3, r3
    1294:	7413      	strb	r3, [r2, #16]
            if (s_u8EthernetHostIdx>=4) s_u8EthernetHostIdx=0;
    1296:	2b03      	cmp	r3, #3
    1298:	d902      	bls.n	12a0 <Ethernet_PumpEvents+0x80>
    129a:	2200      	movs	r2, #0
    129c:	4b0b      	ldr	r3, [pc, #44]	; (12cc <Ethernet_PumpEvents+0xac>)
    129e:	741a      	strb	r2, [r3, #16]
            s_stEthernetInfo.eState = ETHERNET_STATE_ERROR;
    12a0:	4b0e      	ldr	r3, [pc, #56]	; (12dc <Ethernet_PumpEvents+0xbc>)
    12a2:	2203      	movs	r2, #3
    12a4:	745a      	strb	r2, [r3, #17]
            Timer_SetTimer(TIMER_ETH_SERVER_ESTABLISH_COMM, EYEDRO_TIMEOUT_ESTABLISH_COMM); // 10 minutes before we try a soft reset
    12a6:	88d8      	ldrh	r0, [r3, #6]
    12a8:	2196      	movs	r1, #150	; 0x96
    12aa:	0089      	lsls	r1, r1, #2
    12ac:	4b11      	ldr	r3, [pc, #68]	; (12f4 <Ethernet_PumpEvents+0xd4>)
    12ae:	4798      	blx	r3
    12b0:	e7cf      	b.n	1252 <Ethernet_PumpEvents+0x32>
            App_SetStatus(STATUS_OK);
    12b2:	2001      	movs	r0, #1
    12b4:	4b0a      	ldr	r3, [pc, #40]	; (12e0 <Ethernet_PumpEvents+0xc0>)
    12b6:	4798      	blx	r3
            s_fEthernetServerCommLost = false;
    12b8:	2200      	movs	r2, #0
    12ba:	4b04      	ldr	r3, [pc, #16]	; (12cc <Ethernet_PumpEvents+0xac>)
    12bc:	73da      	strb	r2, [r3, #15]
    12be:	e7c8      	b.n	1252 <Ethernet_PumpEvents+0x32>
        if (Timer_GetTimer(TIMER_ETH_SERVER_ESTABLISH_COMM)==0){
    12c0:	4b06      	ldr	r3, [pc, #24]	; (12dc <Ethernet_PumpEvents+0xbc>)
    12c2:	88d8      	ldrh	r0, [r3, #6]
    12c4:	4b08      	ldr	r3, [pc, #32]	; (12e8 <Ethernet_PumpEvents+0xc8>)
    12c6:	4798      	blx	r3
    12c8:	e7c7      	b.n	125a <Ethernet_PumpEvents+0x3a>
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	20000788 	.word	0x20000788
    12d0:	00000809 	.word	0x00000809
    12d4:	00000fe1 	.word	0x00000fe1
    12d8:	0000088d 	.word	0x0000088d
    12dc:	20000608 	.word	0x20000608
    12e0:	0000026d 	.word	0x0000026d
    12e4:	00000b01 	.word	0x00000b01
    12e8:	000016dd 	.word	0x000016dd
    12ec:	0000697c 	.word	0x0000697c
    12f0:	00000465 	.word	0x00000465
    12f4:	000016d1 	.word	0x000016d1

000012f8 <_DnsDiscardName>:

DoneSearchingRecords:
    s_eEthernetDnsState = DNS_STATE_DONE;
}

void _DnsDiscardName(void) {
    12f8:	b510      	push	{r4, lr}
    12fa:	e009      	b.n	1310 <_DnsDiscardName+0x18>

    while (1) {
        // Get first byte which will tell us if this is a 16-bit pointer or the length of a label
        u8Byte = UDP_Read8();
        if ((u8Byte & 0xC0u) == 0xC0u) {
            u8Byte = UDP_Read8();
    12fc:	4b0a      	ldr	r3, [pc, #40]	; (1328 <_DnsDiscardName+0x30>)
    12fe:	4798      	blx	r3
        // Discard complete label
        while (u8Byte--) {
            UDP_Read8();
        }
    }
}
    1300:	bd10      	pop	{r4, pc}
            UDP_Read8();
    1302:	4b09      	ldr	r3, [pc, #36]	; (1328 <_DnsDiscardName+0x30>)
    1304:	4798      	blx	r3
        while (u8Byte--) {
    1306:	0022      	movs	r2, r4
    1308:	1e54      	subs	r4, r2, #1
    130a:	b2e4      	uxtb	r4, r4
    130c:	2a00      	cmp	r2, #0
    130e:	d1f8      	bne.n	1302 <_DnsDiscardName+0xa>
        u8Byte = UDP_Read8();
    1310:	4b05      	ldr	r3, [pc, #20]	; (1328 <_DnsDiscardName+0x30>)
    1312:	4798      	blx	r3
    1314:	0002      	movs	r2, r0
        if ((u8Byte & 0xC0u) == 0xC0u) {
    1316:	233f      	movs	r3, #63	; 0x3f
    1318:	4398      	bics	r0, r3
    131a:	b2c0      	uxtb	r0, r0
    131c:	28c0      	cmp	r0, #192	; 0xc0
    131e:	d0ed      	beq.n	12fc <_DnsDiscardName+0x4>
        if (u8Byte == 0u) return;
    1320:	2a00      	cmp	r2, #0
    1322:	d1f1      	bne.n	1308 <_DnsDiscardName+0x10>
    1324:	e7ec      	b.n	1300 <_DnsDiscardName+0x8>
    1326:	46c0      	nop			; (mov r8, r8)
    1328:	00003359 	.word	0x00003359

0000132c <DNS_Handler>:
{
    132c:	b530      	push	{r4, r5, lr}
    132e:	b087      	sub	sp, #28
    DEBUG_INFO("Process DNS query response. ");
    1330:	4851      	ldr	r0, [pc, #324]	; (1478 <DNS_Handler+0x14c>)
    1332:	4b52      	ldr	r3, [pc, #328]	; (147c <DNS_Handler+0x150>)
    1334:	4798      	blx	r3
    stDnsHeader.u16TransactionID = UDP_Read16();
    1336:	4b52      	ldr	r3, [pc, #328]	; (1480 <DNS_Handler+0x154>)
    1338:	4798      	blx	r3
    if (stDnsHeader.u16TransactionID!=s_u16TransactionID) {
    133a:	4b52      	ldr	r3, [pc, #328]	; (1484 <DNS_Handler+0x158>)
    133c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    133e:	4298      	cmp	r0, r3
    1340:	d004      	beq.n	134c <DNS_Handler+0x20>
        DEBUG_INFO("Unexpected transaction ID. ");
    1342:	4851      	ldr	r0, [pc, #324]	; (1488 <DNS_Handler+0x15c>)
    1344:	4b4d      	ldr	r3, [pc, #308]	; (147c <DNS_Handler+0x150>)
    1346:	4798      	blx	r3
}
    1348:	b007      	add	sp, #28
    134a:	bd30      	pop	{r4, r5, pc}
    stDnsHeader.u16Flags = UDP_Read16();
    134c:	4c4c      	ldr	r4, [pc, #304]	; (1480 <DNS_Handler+0x154>)
    134e:	47a0      	blx	r4
    stDnsHeader.u16Questions = UDP_Read16();
    1350:	47a0      	blx	r4
    1352:	ad03      	add	r5, sp, #12
    1354:	80a8      	strh	r0, [r5, #4]
    stDnsHeader.u16Answers = UDP_Read16();
    1356:	47a0      	blx	r4
    1358:	80e8      	strh	r0, [r5, #6]
    stDnsHeader.u16AuthoritativeRecords = UDP_Read16();
    135a:	47a0      	blx	r4
    135c:	8128      	strh	r0, [r5, #8]
    stDnsHeader.u16AdditionalRecords = UDP_Read16();
    135e:	47a0      	blx	r4
    1360:	8168      	strh	r0, [r5, #10]
    while(stDnsHeader.u16Questions--) {
    1362:	aa03      	add	r2, sp, #12
    1364:	8893      	ldrh	r3, [r2, #4]
    1366:	1e59      	subs	r1, r3, #1
    1368:	8091      	strh	r1, [r2, #4]
    136a:	2b00      	cmp	r3, #0
    136c:	d00e      	beq.n	138c <DNS_Handler+0x60>
        _DnsDiscardName(); // Throw away response name
    136e:	4b47      	ldr	r3, [pc, #284]	; (148c <DNS_Handler+0x160>)
    1370:	4798      	blx	r3
        UDP_Read16(); // Question type
    1372:	4c43      	ldr	r4, [pc, #268]	; (1480 <DNS_Handler+0x154>)
    1374:	47a0      	blx	r4
        UDP_Read16(); // Question class
    1376:	47a0      	blx	r4
    1378:	e7f3      	b.n	1362 <DNS_Handler+0x36>
                UDP_Read8();
    137a:	4b45      	ldr	r3, [pc, #276]	; (1490 <DNS_Handler+0x164>)
    137c:	4798      	blx	r3
            while(stDnsAnswerHeader.u16ResponseLen--) {
    137e:	466b      	mov	r3, sp
    1380:	891b      	ldrh	r3, [r3, #8]
    1382:	1e5a      	subs	r2, r3, #1
    1384:	4669      	mov	r1, sp
    1386:	810a      	strh	r2, [r1, #8]
    1388:	2b00      	cmp	r3, #0
    138a:	d1f6      	bne.n	137a <DNS_Handler+0x4e>
    while(stDnsHeader.u16Answers--) {
    138c:	aa03      	add	r2, sp, #12
    138e:	88d3      	ldrh	r3, [r2, #6]
    1390:	1e59      	subs	r1, r3, #1
    1392:	80d1      	strh	r1, [r2, #6]
    1394:	2b00      	cmp	r3, #0
    1396:	d026      	beq.n	13e6 <DNS_Handler+0xba>
        _DnsDiscardName(); // Throw away response name
    1398:	4b3c      	ldr	r3, [pc, #240]	; (148c <DNS_Handler+0x160>)
    139a:	4798      	blx	r3
        stDnsAnswerHeader.u16ResponseType = UDP_Read16(); // Response type
    139c:	4c38      	ldr	r4, [pc, #224]	; (1480 <DNS_Handler+0x154>)
    139e:	47a0      	blx	r4
    13a0:	466b      	mov	r3, sp
    13a2:	8018      	strh	r0, [r3, #0]
        stDnsAnswerHeader.u16ResponseClass = UDP_Read16(); // Response class
    13a4:	47a0      	blx	r4
    13a6:	466b      	mov	r3, sp
    13a8:	8058      	strh	r0, [r3, #2]
        stDnsAnswerHeader.u32ResponseTTL = UDP_Read32(); // Time to live
    13aa:	4b3a      	ldr	r3, [pc, #232]	; (1494 <DNS_Handler+0x168>)
    13ac:	4798      	blx	r3
        stDnsAnswerHeader.u16ResponseLen = UDP_Read16(); // Response length
    13ae:	47a0      	blx	r4
    13b0:	466b      	mov	r3, sp
    13b2:	8118      	strh	r0, [r3, #8]
        if (stDnsAnswerHeader.u16ResponseType == 0x0001u && stDnsAnswerHeader.u16ResponseClass == 0x0001u && stDnsAnswerHeader.u16ResponseLen == 0x0004u) {
    13b4:	4b38      	ldr	r3, [pc, #224]	; (1498 <DNS_Handler+0x16c>)
    13b6:	9900      	ldr	r1, [sp, #0]
    13b8:	4299      	cmp	r1, r3
    13ba:	d1e0      	bne.n	137e <DNS_Handler+0x52>
    13bc:	2804      	cmp	r0, #4
    13be:	d1de      	bne.n	137e <DNS_Handler+0x52>
            *s_pu32LookupHostIp = UDP_Read32();
    13c0:	4b30      	ldr	r3, [pc, #192]	; (1484 <DNS_Handler+0x158>)
    13c2:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    13c4:	4b33      	ldr	r3, [pc, #204]	; (1494 <DNS_Handler+0x168>)
    13c6:	4798      	blx	r3
    13c8:	6020      	str	r0, [r4, #0]
    s_eEthernetDnsState = DNS_STATE_DONE;
    13ca:	2106      	movs	r1, #6
    13cc:	232c      	movs	r3, #44	; 0x2c
    13ce:	4a2d      	ldr	r2, [pc, #180]	; (1484 <DNS_Handler+0x158>)
    13d0:	54d1      	strb	r1, [r2, r3]
    13d2:	e7b9      	b.n	1348 <DNS_Handler+0x1c>
                UDP_Read8();
    13d4:	4b2e      	ldr	r3, [pc, #184]	; (1490 <DNS_Handler+0x164>)
    13d6:	4798      	blx	r3
            while(stDnsAnswerHeader.u16ResponseLen--) {
    13d8:	466b      	mov	r3, sp
    13da:	891b      	ldrh	r3, [r3, #8]
    13dc:	1e5a      	subs	r2, r3, #1
    13de:	4669      	mov	r1, sp
    13e0:	810a      	strh	r2, [r1, #8]
    13e2:	2b00      	cmp	r3, #0
    13e4:	d1f6      	bne.n	13d4 <DNS_Handler+0xa8>
    while(stDnsHeader.u16AuthoritativeRecords--) {
    13e6:	aa03      	add	r2, sp, #12
    13e8:	8913      	ldrh	r3, [r2, #8]
    13ea:	1e59      	subs	r1, r3, #1
    13ec:	8111      	strh	r1, [r2, #8]
    13ee:	2b00      	cmp	r3, #0
    13f0:	d022      	beq.n	1438 <DNS_Handler+0x10c>
        _DnsDiscardName(); // Throw away response name
    13f2:	4b26      	ldr	r3, [pc, #152]	; (148c <DNS_Handler+0x160>)
    13f4:	4798      	blx	r3
        stDnsAnswerHeader.u16ResponseType = UDP_Read16(); // Response type
    13f6:	4c22      	ldr	r4, [pc, #136]	; (1480 <DNS_Handler+0x154>)
    13f8:	47a0      	blx	r4
    13fa:	466b      	mov	r3, sp
    13fc:	8018      	strh	r0, [r3, #0]
        stDnsAnswerHeader.u16ResponseClass = UDP_Read16(); // Response class
    13fe:	47a0      	blx	r4
    1400:	466b      	mov	r3, sp
    1402:	8058      	strh	r0, [r3, #2]
        stDnsAnswerHeader.u32ResponseTTL = UDP_Read32(); // Time to live
    1404:	4b23      	ldr	r3, [pc, #140]	; (1494 <DNS_Handler+0x168>)
    1406:	4798      	blx	r3
        stDnsAnswerHeader.u16ResponseLen = UDP_Read16(); // Response length
    1408:	47a0      	blx	r4
    140a:	466b      	mov	r3, sp
    140c:	8118      	strh	r0, [r3, #8]
        if (stDnsAnswerHeader.u16ResponseType == 0x0001u && stDnsAnswerHeader.u16ResponseClass == 0x0001u && stDnsAnswerHeader.u16ResponseLen == 0x0004u) {
    140e:	4b22      	ldr	r3, [pc, #136]	; (1498 <DNS_Handler+0x16c>)
    1410:	9900      	ldr	r1, [sp, #0]
    1412:	4299      	cmp	r1, r3
    1414:	d1e0      	bne.n	13d8 <DNS_Handler+0xac>
    1416:	2804      	cmp	r0, #4
    1418:	d1de      	bne.n	13d8 <DNS_Handler+0xac>
            *s_pu32LookupHostIp = UDP_Read32();
    141a:	4b1a      	ldr	r3, [pc, #104]	; (1484 <DNS_Handler+0x158>)
    141c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    141e:	4b1d      	ldr	r3, [pc, #116]	; (1494 <DNS_Handler+0x168>)
    1420:	4798      	blx	r3
    1422:	6020      	str	r0, [r4, #0]
            goto DoneSearchingRecords;
    1424:	e7d1      	b.n	13ca <DNS_Handler+0x9e>
                UDP_Read8();
    1426:	4b1a      	ldr	r3, [pc, #104]	; (1490 <DNS_Handler+0x164>)
    1428:	4798      	blx	r3
            while(stDnsAnswerHeader.u16ResponseLen--) {
    142a:	466b      	mov	r3, sp
    142c:	891b      	ldrh	r3, [r3, #8]
    142e:	1e5a      	subs	r2, r3, #1
    1430:	4669      	mov	r1, sp
    1432:	810a      	strh	r2, [r1, #8]
    1434:	2b00      	cmp	r3, #0
    1436:	d1f6      	bne.n	1426 <DNS_Handler+0xfa>
    while(stDnsHeader.u16AdditionalRecords--) {
    1438:	aa03      	add	r2, sp, #12
    143a:	8953      	ldrh	r3, [r2, #10]
    143c:	1e59      	subs	r1, r3, #1
    143e:	8151      	strh	r1, [r2, #10]
    1440:	2b00      	cmp	r3, #0
    1442:	d0c2      	beq.n	13ca <DNS_Handler+0x9e>
        _DnsDiscardName(); // Throw away response name
    1444:	4b11      	ldr	r3, [pc, #68]	; (148c <DNS_Handler+0x160>)
    1446:	4798      	blx	r3
        stDnsAnswerHeader.u16ResponseType = UDP_Read16(); // Response type
    1448:	4c0d      	ldr	r4, [pc, #52]	; (1480 <DNS_Handler+0x154>)
    144a:	47a0      	blx	r4
    144c:	466b      	mov	r3, sp
    144e:	8018      	strh	r0, [r3, #0]
        stDnsAnswerHeader.u16ResponseClass = UDP_Read16(); // Response class
    1450:	47a0      	blx	r4
    1452:	466b      	mov	r3, sp
    1454:	8058      	strh	r0, [r3, #2]
        stDnsAnswerHeader.u32ResponseTTL = UDP_Read32(); // Time to live
    1456:	4b0f      	ldr	r3, [pc, #60]	; (1494 <DNS_Handler+0x168>)
    1458:	4798      	blx	r3
        stDnsAnswerHeader.u16ResponseLen = UDP_Read16(); // Response length
    145a:	47a0      	blx	r4
    145c:	466b      	mov	r3, sp
    145e:	8118      	strh	r0, [r3, #8]
        if (stDnsAnswerHeader.u16ResponseType == 0x0001u && stDnsAnswerHeader.u16ResponseClass == 0x0001u && stDnsAnswerHeader.u16ResponseLen == 0x0004u) {
    1460:	4b0d      	ldr	r3, [pc, #52]	; (1498 <DNS_Handler+0x16c>)
    1462:	9900      	ldr	r1, [sp, #0]
    1464:	4299      	cmp	r1, r3
    1466:	d1e0      	bne.n	142a <DNS_Handler+0xfe>
    1468:	2804      	cmp	r0, #4
    146a:	d1de      	bne.n	142a <DNS_Handler+0xfe>
            *s_pu32LookupHostIp = UDP_Read32();
    146c:	4b05      	ldr	r3, [pc, #20]	; (1484 <DNS_Handler+0x158>)
    146e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    1470:	4b08      	ldr	r3, [pc, #32]	; (1494 <DNS_Handler+0x168>)
    1472:	4798      	blx	r3
    1474:	6020      	str	r0, [r4, #0]
            goto DoneSearchingRecords;
    1476:	e7a8      	b.n	13ca <DNS_Handler+0x9e>
    1478:	00006994 	.word	0x00006994
    147c:	00000465 	.word	0x00000465
    1480:	000033d9 	.word	0x000033d9
    1484:	20000608 	.word	0x20000608
    1488:	000069b4 	.word	0x000069b4
    148c:	000012f9 	.word	0x000012f9
    1490:	00003359 	.word	0x00003359
    1494:	0000340d 	.word	0x0000340d
    1498:	00010001 	.word	0x00010001

0000149c <Ethernet_QueueServerSend>:

void Ethernet_QueueServerSend(void) {
    149c:	b510      	push	{r4, lr}
    // No point in setting the flag if it is already set
    if (s_fEthernetQueueServerSend==true) return;
    149e:	4b09      	ldr	r3, [pc, #36]	; (14c4 <Ethernet_QueueServerSend+0x28>)
    14a0:	7f9b      	ldrb	r3, [r3, #30]
    14a2:	2b00      	cmp	r3, #0
    14a4:	d10d      	bne.n	14c2 <Ethernet_QueueServerSend+0x26>
    // No point in setting the flag is still waiting on a response
    if (s_stEthernetSocketRemote.socketState==SOCKET_CONNECTED || s_stEthernetSocketRemote.socketState==SOCKET_IN_PROGRESS) return;
    14a6:	4b08      	ldr	r3, [pc, #32]	; (14c8 <Ethernet_QueueServerSend+0x2c>)
    14a8:	339a      	adds	r3, #154	; 0x9a
    14aa:	781b      	ldrb	r3, [r3, #0]
    14ac:	3b02      	subs	r3, #2
    14ae:	b2db      	uxtb	r3, r3
    14b0:	2b01      	cmp	r3, #1
    14b2:	d906      	bls.n	14c2 <Ethernet_QueueServerSend+0x26>
	
	if (EyedroCmdFifo_GetByteCount()>0) s_fEthernetQueueServerSend = true;
    14b4:	4b05      	ldr	r3, [pc, #20]	; (14cc <Ethernet_QueueServerSend+0x30>)
    14b6:	4798      	blx	r3
    14b8:	2800      	cmp	r0, #0
    14ba:	dd02      	ble.n	14c2 <Ethernet_QueueServerSend+0x26>
    14bc:	2201      	movs	r2, #1
    14be:	4b01      	ldr	r3, [pc, #4]	; (14c4 <Ethernet_QueueServerSend+0x28>)
    14c0:	779a      	strb	r2, [r3, #30]
    14c2:	bd10      	pop	{r4, pc}
    14c4:	20000688 	.word	0x20000688
    14c8:	20000608 	.word	0x20000608
    14cc:	00000429 	.word	0x00000429

000014d0 <Flash_Init>:
 *  @param[out] None
 *  @return     Nothing
 ******************************************************************************/
void Flash_Init(void) {
    // Initialization of FLASH_0 already done in driver_init.c
}
    14d0:	4770      	bx	lr
	...

000014d4 <Http_BuildPostHeaderCommon>:
    totalBytes = (uint16_t)(pDst - buffer);
    return totalBytes;
}


uint16_t Http_BuildPostHeaderCommon(char* buffer, char* hostname, bool useFailsafe) {
    14d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14d6:	b083      	sub	sp, #12
    14d8:	0007      	movs	r7, r0
    14da:	9101      	str	r1, [sp, #4]
    uint16_t  totalBytes = 0;
    char    *pDst = buffer;

    // POST {path} HTTP/1.1\r\n
    sprintf(g_acBuffer256, HTTP_HDR_POST, "index.php");
    14dc:	4a17      	ldr	r2, [pc, #92]	; (153c <Http_BuildPostHeaderCommon+0x68>)
    14de:	4918      	ldr	r1, [pc, #96]	; (1540 <Http_BuildPostHeaderCommon+0x6c>)
    14e0:	4818      	ldr	r0, [pc, #96]	; (1544 <Http_BuildPostHeaderCommon+0x70>)
    14e2:	4d19      	ldr	r5, [pc, #100]	; (1548 <Http_BuildPostHeaderCommon+0x74>)
    14e4:	47a8      	blx	r5
    sprintf(pDst, g_acBuffer256); pDst += strlen(g_acBuffer256);
    14e6:	4917      	ldr	r1, [pc, #92]	; (1544 <Http_BuildPostHeaderCommon+0x70>)
    14e8:	0038      	movs	r0, r7
    14ea:	47a8      	blx	r5
    14ec:	4815      	ldr	r0, [pc, #84]	; (1544 <Http_BuildPostHeaderCommon+0x70>)
    14ee:	4e17      	ldr	r6, [pc, #92]	; (154c <Http_BuildPostHeaderCommon+0x78>)
    14f0:	47b0      	blx	r6
    14f2:	183c      	adds	r4, r7, r0
    // Host: {domain}\r\n
    sprintf(g_acBuffer256, HTTP_HDR_HOST, hostname);
    14f4:	9a01      	ldr	r2, [sp, #4]
    14f6:	4916      	ldr	r1, [pc, #88]	; (1550 <Http_BuildPostHeaderCommon+0x7c>)
    14f8:	4812      	ldr	r0, [pc, #72]	; (1544 <Http_BuildPostHeaderCommon+0x70>)
    14fa:	47a8      	blx	r5
    sprintf(pDst, g_acBuffer256); pDst += strlen(g_acBuffer256);
    14fc:	4911      	ldr	r1, [pc, #68]	; (1544 <Http_BuildPostHeaderCommon+0x70>)
    14fe:	0020      	movs	r0, r4
    1500:	47a8      	blx	r5
    1502:	4810      	ldr	r0, [pc, #64]	; (1544 <Http_BuildPostHeaderCommon+0x70>)
    1504:	47b0      	blx	r6
    1506:	1824      	adds	r4, r4, r0
    // Connection: close\r\n
    sprintf(pDst, HTTP_HDR_CONNECTION_CLOSE);
    1508:	2214      	movs	r2, #20
    150a:	4912      	ldr	r1, [pc, #72]	; (1554 <Http_BuildPostHeaderCommon+0x80>)
    150c:	0020      	movs	r0, r4
    150e:	4d12      	ldr	r5, [pc, #72]	; (1558 <Http_BuildPostHeaderCommon+0x84>)
    1510:	47a8      	blx	r5
    pDst += strlen(HTTP_HDR_CONNECTION_CLOSE);
    1512:	0020      	movs	r0, r4
    1514:	3013      	adds	r0, #19
	
	sprintf(pDst, HTTP_HDR_CONTENT_TYPE_PLAIN);
    1516:	222a      	movs	r2, #42	; 0x2a
    1518:	4910      	ldr	r1, [pc, #64]	; (155c <Http_BuildPostHeaderCommon+0x88>)
    151a:	47a8      	blx	r5
    pDst += strlen(HTTP_HDR_CONTENT_TYPE_PLAIN);
    151c:	0020      	movs	r0, r4
    151e:	303c      	adds	r0, #60	; 0x3c
	
    // Content-Length: xxxx\r\n\r\n
    // It is critical that this is always at the end and doesn't change size - it gets updated later
    sprintf(pDst, HTTP_HDR_CONTENT_LENGTH);
    1520:	2217      	movs	r2, #23
    1522:	490f      	ldr	r1, [pc, #60]	; (1560 <Http_BuildPostHeaderCommon+0x8c>)
    1524:	47a8      	blx	r5
    pDst += strlen(HTTP_HDR_CONTENT_LENGTH);
    1526:	0020      	movs	r0, r4
    1528:	3052      	adds	r0, #82	; 0x52
    sprintf(pDst, HTTP_HDR_CRLF);
    152a:	2203      	movs	r2, #3
    152c:	490d      	ldr	r1, [pc, #52]	; (1564 <Http_BuildPostHeaderCommon+0x90>)
    152e:	47a8      	blx	r5
    pDst += strlen(HTTP_HDR_CRLF);
    1530:	0020      	movs	r0, r4
    1532:	3054      	adds	r0, #84	; 0x54

    // Return the total byte count
    totalBytes = (uint16_t)(pDst - buffer);
    1534:	1bc0      	subs	r0, r0, r7
    1536:	b280      	uxth	r0, r0
    return totalBytes;
}
    1538:	b003      	add	sp, #12
    153a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    153c:	00006b60 	.word	0x00006b60
    1540:	00006b6c 	.word	0x00006b6c
    1544:	20000908 	.word	0x20000908
    1548:	00005bbd 	.word	0x00005bbd
    154c:	00005c01 	.word	0x00005c01
    1550:	00006b80 	.word	0x00006b80
    1554:	00006a2c 	.word	0x00006a2c
    1558:	00005a27 	.word	0x00005a27
    155c:	00006b8c 	.word	0x00006b8c
    1560:	00006ab0 	.word	0x00006ab0
    1564:	00006ac4 	.word	0x00006ac4

00001568 <_FindOkResponse>:
 *  Look for 200 OK in the buffer
 *  @param[in]  char*   buff    Pointer to buffer to search "200 OK"
 *  @param[out] None
 *  @return     true=found. false=not found.
 ******************************************************************************/
bool _FindOkResponse(char* buff) {
    1568:	b510      	push	{r4, lr}
    char* ptr = NULL;
    ptr = strstr(buff, "200 OK");
    156a:	4904      	ldr	r1, [pc, #16]	; (157c <_FindOkResponse+0x14>)
    156c:	4b04      	ldr	r3, [pc, #16]	; (1580 <_FindOkResponse+0x18>)
    156e:	4798      	blx	r3
    if (ptr!=NULL) return true;
    1570:	2800      	cmp	r0, #0
    1572:	d001      	beq.n	1578 <_FindOkResponse+0x10>
    1574:	2001      	movs	r0, #1
    else return false;
}
    1576:	bd10      	pop	{r4, pc}
    else return false;
    1578:	2000      	movs	r0, #0
    157a:	e7fc      	b.n	1576 <_FindOkResponse+0xe>
    157c:	00006bb8 	.word	0x00006bb8
    1580:	00005c0f 	.word	0x00005c0f

00001584 <_FindContentPointer>:
 *  @param[in]  char*   buff    Pointer to buffer to search content length
 *  @param[out] None
 *  @return     Pointer to beginning of the content. Null if not found
 ******************************************************************************/
char* _FindContentPointer(char* buff)
{
    1584:	b510      	push	{r4, lr}
    char* ptr = NULL;
    ptr = strstr(buff, "\r\n\r\n");
    1586:	4903      	ldr	r1, [pc, #12]	; (1594 <_FindContentPointer+0x10>)
    1588:	4b03      	ldr	r3, [pc, #12]	; (1598 <_FindContentPointer+0x14>)
    158a:	4798      	blx	r3
    if (ptr!=NULL) ptr += 4;
    158c:	2800      	cmp	r0, #0
    158e:	d000      	beq.n	1592 <_FindContentPointer+0xe>
    1590:	3004      	adds	r0, #4
    return ptr;
}
    1592:	bd10      	pop	{r4, pc}
    1594:	000067c0 	.word	0x000067c0
    1598:	00005c0f 	.word	0x00005c0f

0000159c <_FindTokenValue>:
 *  @param[in]  char*   max_sz  Maximum length of response
 *  @param[out] char*   value   Destination buffer
 *  @return     Pointer to beginning of the content. 0 if token not found
 ******************************************************************************/
uint16_t _FindTokenValue(char *buff, const char *tok, char term, uint16_t max_sz, char *value)
{
    159c:	b5f0      	push	{r4, r5, r6, r7, lr}
    159e:	b083      	sub	sp, #12
    15a0:	9101      	str	r1, [sp, #4]
    15a2:	0017      	movs	r7, r2
    15a4:	001e      	movs	r6, r3
    15a6:	9d08      	ldr	r5, [sp, #32]
    uint8_t i = 0;

    // Search for token in string, then advance pointer
    char *pch = strstr(buff, tok);
    15a8:	4b0f      	ldr	r3, [pc, #60]	; (15e8 <_FindTokenValue+0x4c>)
    15aa:	4798      	blx	r3
    15ac:	0004      	movs	r4, r0
    pch += strlen(tok);
    15ae:	9801      	ldr	r0, [sp, #4]
    15b0:	4b0e      	ldr	r3, [pc, #56]	; (15ec <_FindTokenValue+0x50>)
    15b2:	4798      	blx	r3
    15b4:	1824      	adds	r4, r4, r0

    // Clear out buffer before parsing
    memset(value, 0, max_sz);
    15b6:	0032      	movs	r2, r6
    15b8:	2100      	movs	r1, #0
    15ba:	0028      	movs	r0, r5
    15bc:	4b0c      	ldr	r3, [pc, #48]	; (15f0 <_FindTokenValue+0x54>)
    15be:	4798      	blx	r3
    uint8_t i = 0;
    15c0:	2300      	movs	r3, #0

    // Copy value into buffer up to the 'term' character (or null)
    while (i < max_sz) {
    15c2:	b298      	uxth	r0, r3
    15c4:	4286      	cmp	r6, r0
    15c6:	d909      	bls.n	15dc <_FindTokenValue+0x40>
        if ((*pch == term) || (*pch == 0)) {break;}
    15c8:	7822      	ldrb	r2, [r4, #0]
    15ca:	42ba      	cmp	r2, r7
    15cc:	d006      	beq.n	15dc <_FindTokenValue+0x40>
    15ce:	2a00      	cmp	r2, #0
    15d0:	d004      	beq.n	15dc <_FindTokenValue+0x40>
        value[i++] = *pch++;
    15d2:	1c59      	adds	r1, r3, #1
    15d4:	3401      	adds	r4, #1
    15d6:	54ea      	strb	r2, [r5, r3]
    15d8:	b2cb      	uxtb	r3, r1
    15da:	e7f2      	b.n	15c2 <_FindTokenValue+0x26>
    }

    /* add terminating 'null' to string */
    value[i] = 0;
    15dc:	18eb      	adds	r3, r5, r3
    15de:	2200      	movs	r2, #0
    15e0:	701a      	strb	r2, [r3, #0]

    return i;
}
    15e2:	b003      	add	sp, #12
    15e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15e6:	46c0      	nop			; (mov r8, r8)
    15e8:	00005c0f 	.word	0x00005c0f
    15ec:	00005c01 	.word	0x00005c01
    15f0:	00005a39 	.word	0x00005a39

000015f4 <_FindContentLength>:
{
    15f4:	b530      	push	{r4, r5, lr}
    15f6:	b085      	sub	sp, #20
    _FindTokenValue(buff, "Content-Length: ", '\r', sizeof(value), value);
    15f8:	ac02      	add	r4, sp, #8
    15fa:	9400      	str	r4, [sp, #0]
    15fc:	2305      	movs	r3, #5
    15fe:	220d      	movs	r2, #13
    1600:	4903      	ldr	r1, [pc, #12]	; (1610 <_FindContentLength+0x1c>)
    1602:	4d04      	ldr	r5, [pc, #16]	; (1614 <_FindContentLength+0x20>)
    1604:	47a8      	blx	r5
    length = atoi(value);
    1606:	0020      	movs	r0, r4
    1608:	4b03      	ldr	r3, [pc, #12]	; (1618 <_FindContentLength+0x24>)
    160a:	4798      	blx	r3
}
    160c:	b005      	add	sp, #20
    160e:	bd30      	pop	{r4, r5, pc}
    1610:	00006bc0 	.word	0x00006bc0
    1614:	0000159d 	.word	0x0000159d
    1618:	000059b5 	.word	0x000059b5

0000161c <EyedroTcpParser_ParseServerResponse>:
bool EyedroTcpParser_ParseServerResponse(char* pcResponseBuff, uint16_t u16ResponseSize) {
    161c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    161e:	0004      	movs	r4, r0
    1620:	000f      	movs	r7, r1
    if (_FindOkResponse(pcResponseBuff)==false) {
    1622:	4b12      	ldr	r3, [pc, #72]	; (166c <EyedroTcpParser_ParseServerResponse+0x50>)
    1624:	4798      	blx	r3
    1626:	1e05      	subs	r5, r0, #0
    1628:	d013      	beq.n	1652 <EyedroTcpParser_ParseServerResponse+0x36>
    contentLen = _FindContentLength(pcResponseBuff);
    162a:	0020      	movs	r0, r4
    162c:	4b10      	ldr	r3, [pc, #64]	; (1670 <EyedroTcpParser_ParseServerResponse+0x54>)
    162e:	4798      	blx	r3
    1630:	0006      	movs	r6, r0
    pContent = _FindContentPointer(pcResponseBuff);
    1632:	0020      	movs	r0, r4
    1634:	4b0f      	ldr	r3, [pc, #60]	; (1674 <EyedroTcpParser_ParseServerResponse+0x58>)
    1636:	4798      	blx	r3
    if (pContent==NULL) {
    1638:	2800      	cmp	r0, #0
    163a:	d012      	beq.n	1662 <EyedroTcpParser_ParseServerResponse+0x46>
    pBuffEnd = pcResponseBuff + u16ResponseSize;
    163c:	19e4      	adds	r4, r4, r7
    payloadBytes = (int)(pBuffEnd - pContent);
    163e:	1a24      	subs	r4, r4, r0
    if (payloadBytes<contentLen){
    1640:	0436      	lsls	r6, r6, #16
    1642:	0c36      	lsrs	r6, r6, #16
    1644:	42a6      	cmp	r6, r4
    1646:	dd0a      	ble.n	165e <EyedroTcpParser_ParseServerResponse+0x42>
        DEBUG_INFO("Content missing or incomplete. ");
    1648:	480b      	ldr	r0, [pc, #44]	; (1678 <EyedroTcpParser_ParseServerResponse+0x5c>)
    164a:	4b0c      	ldr	r3, [pc, #48]	; (167c <EyedroTcpParser_ParseServerResponse+0x60>)
    164c:	4798      	blx	r3
        return false;
    164e:	2500      	movs	r5, #0
    1650:	e005      	b.n	165e <EyedroTcpParser_ParseServerResponse+0x42>
        DEBUG_INFO("Unable to find 200 OK. ");
    1652:	480b      	ldr	r0, [pc, #44]	; (1680 <EyedroTcpParser_ParseServerResponse+0x64>)
    1654:	4e09      	ldr	r6, [pc, #36]	; (167c <EyedroTcpParser_ParseServerResponse+0x60>)
    1656:	47b0      	blx	r6
		DEBUG_INFO("%s", pcResponseBuff);
    1658:	0021      	movs	r1, r4
    165a:	480a      	ldr	r0, [pc, #40]	; (1684 <EyedroTcpParser_ParseServerResponse+0x68>)
    165c:	47b0      	blx	r6
}
    165e:	0028      	movs	r0, r5
    1660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        DEBUG_INFO("Unable to find start of content. ");
    1662:	4809      	ldr	r0, [pc, #36]	; (1688 <EyedroTcpParser_ParseServerResponse+0x6c>)
    1664:	4b05      	ldr	r3, [pc, #20]	; (167c <EyedroTcpParser_ParseServerResponse+0x60>)
    1666:	4798      	blx	r3
        return false;
    1668:	2500      	movs	r5, #0
    166a:	e7f8      	b.n	165e <EyedroTcpParser_ParseServerResponse+0x42>
    166c:	00001569 	.word	0x00001569
    1670:	000015f5 	.word	0x000015f5
    1674:	00001585 	.word	0x00001585
    1678:	00006c10 	.word	0x00006c10
    167c:	00000465 	.word	0x00000465
    1680:	00006bd4 	.word	0x00006bd4
    1684:	00006810 	.word	0x00006810
    1688:	00006bec 	.word	0x00006bec

0000168c <Timer_Init>:
 *  callback on (one second) roll over.
 *  @param[in]  None
 *  @param[out] None
 *  @return     0 indicates success. Anything else is an error.
 ******************************************************************************/
int16_t Timer_Init(void) {
    168c:	b510      	push	{r4, lr}
    // Initialization of TIMER_0 already done in driver_init.c

    // Clear the contents of the timer array
    memset(&s_au16Timers[0], 0, sizeof(s_au16Timers));
    168e:	2280      	movs	r2, #128	; 0x80
    1690:	2100      	movs	r1, #0
    1692:	4804      	ldr	r0, [pc, #16]	; (16a4 <Timer_Init+0x18>)
    1694:	4b04      	ldr	r3, [pc, #16]	; (16a8 <Timer_Init+0x1c>)
    1696:	4798      	blx	r3
    // Reset timer counter
    s_u16TimerCount = 0;
    1698:	2200      	movs	r2, #0
    169a:	4b04      	ldr	r3, [pc, #16]	; (16ac <Timer_Init+0x20>)
    169c:	801a      	strh	r2, [r3, #0]
    return 0;
}
    169e:	2000      	movs	r0, #0
    16a0:	bd10      	pop	{r4, pc}
    16a2:	46c0      	nop			; (mov r8, r8)
    16a4:	2000079c 	.word	0x2000079c
    16a8:	00005a39 	.word	0x00005a39
    16ac:	2000081c 	.word	0x2000081c

000016b0 <Timer_AddTimer>:
 *  @param[out] uint16_t    Index of the new timer
 *  @return     0 indicates success. Anything else is an error.
 ******************************************************************************/
int16_t Timer_AddTimer(uint16_t *u16Timer) {
    // Bail out with error if there are no timers left
    if (s_u16TimerCount>=TIMER_MAX_COUNT) return -1;
    16b0:	4b06      	ldr	r3, [pc, #24]	; (16cc <Timer_AddTimer+0x1c>)
    16b2:	881b      	ldrh	r3, [r3, #0]
    16b4:	2b3f      	cmp	r3, #63	; 0x3f
    16b6:	d805      	bhi.n	16c4 <Timer_AddTimer+0x14>

    // Assign current timer count as the new index;
    *u16Timer = s_u16TimerCount;
    16b8:	8003      	strh	r3, [r0, #0]
    // Increment the timer count
    s_u16TimerCount++;
    16ba:	3301      	adds	r3, #1
    16bc:	4a03      	ldr	r2, [pc, #12]	; (16cc <Timer_AddTimer+0x1c>)
    16be:	8013      	strh	r3, [r2, #0]

    // Return success
    return 0;
    16c0:	2000      	movs	r0, #0
}
    16c2:	4770      	bx	lr
    if (s_u16TimerCount>=TIMER_MAX_COUNT) return -1;
    16c4:	2001      	movs	r0, #1
    16c6:	4240      	negs	r0, r0
    16c8:	e7fb      	b.n	16c2 <Timer_AddTimer+0x12>
    16ca:	46c0      	nop			; (mov r8, r8)
    16cc:	2000081c 	.word	0x2000081c

000016d0 <Timer_SetTimer>:
 *  @param[in]  uint16_t    Value (in seconds) to set
 *  @param[out] None
 *  @return     Nothing
 ******************************************************************************/
void Timer_SetTimer(uint16_t timer, uint16_t sec) {
    s_au16Timers[timer] = sec;
    16d0:	0040      	lsls	r0, r0, #1
    16d2:	4b01      	ldr	r3, [pc, #4]	; (16d8 <Timer_SetTimer+0x8>)
    16d4:	52c1      	strh	r1, [r0, r3]
}
    16d6:	4770      	bx	lr
    16d8:	2000079c 	.word	0x2000079c

000016dc <Timer_GetTimer>:
 *  @param[in]  uint16_t    Index of timer to retrieve
 *  @param[out] None
 *  @return     uint16_t    Current timer value (in seconds)
 ******************************************************************************/
uint16_t Timer_GetTimer(uint16_t timer) {
    return s_au16Timers[timer];
    16dc:	0040      	lsls	r0, r0, #1
    16de:	4b01      	ldr	r3, [pc, #4]	; (16e4 <Timer_GetTimer+0x8>)
    16e0:	5a18      	ldrh	r0, [r3, r0]
}
    16e2:	4770      	bx	lr
    16e4:	2000079c 	.word	0x2000079c

000016e8 <Timer_Register_Callback>:
 *  @param[in]  void*   Pointer to user callback function
 *  @param[out] None
 *  @return     Nothing
 ******************************************************************************/
static struct timer_task task;
void Timer_Register_Callback(void* fpTimerCb) {
    16e8:	b510      	push	{r4, lr}
    task.interval = 1; // Timer output configured for one second
    16ea:	4907      	ldr	r1, [pc, #28]	; (1708 <Timer_Register_Callback+0x20>)
    16ec:	2301      	movs	r3, #1
    16ee:	60cb      	str	r3, [r1, #12]
    task.cb = fpTimerCb;
    16f0:	6108      	str	r0, [r1, #16]
    task.mode = TIMER_TASK_REPEAT;
    16f2:	750b      	strb	r3, [r1, #20]
    timer_add_task(&TIMER_0, &task);
    16f4:	3104      	adds	r1, #4
    16f6:	4c05      	ldr	r4, [pc, #20]	; (170c <Timer_Register_Callback+0x24>)
    16f8:	0020      	movs	r0, r4
    16fa:	4b05      	ldr	r3, [pc, #20]	; (1710 <Timer_Register_Callback+0x28>)
    16fc:	4798      	blx	r3
    timer_start(&TIMER_0);
    16fe:	0020      	movs	r0, r4
    1700:	4b04      	ldr	r3, [pc, #16]	; (1714 <Timer_Register_Callback+0x2c>)
    1702:	4798      	blx	r3
}
    1704:	bd10      	pop	{r4, pc}
    1706:	46c0      	nop			; (mov r8, r8)
    1708:	2000081c 	.word	0x2000081c
    170c:	20003e78 	.word	0x20003e78
    1710:	000021d1 	.word	0x000021d1
    1714:	00002195 	.word	0x00002195

00001718 <Timer_Pump>:
 *  Pumps all timers. Decrements all non-zero timers. MUST be called from user callback
 *  @param[in]  None
 *  @param[out] None
 *  @return     Nothing
 ******************************************************************************/
void Timer_Pump(void) {
    1718:	b510      	push	{r4, lr}
    for (uint16_t index=0; index<s_u16TimerCount; index++) {
    171a:	2400      	movs	r4, #0
    171c:	e001      	b.n	1722 <Timer_Pump+0xa>
    171e:	3401      	adds	r4, #1
    1720:	b2a4      	uxth	r4, r4
    1722:	4b08      	ldr	r3, [pc, #32]	; (1744 <Timer_Pump+0x2c>)
    1724:	881b      	ldrh	r3, [r3, #0]
    1726:	429c      	cmp	r4, r3
    1728:	d20a      	bcs.n	1740 <Timer_Pump+0x28>
        uint16_t count = Timer_GetTimer(index);
    172a:	0020      	movs	r0, r4
    172c:	4b06      	ldr	r3, [pc, #24]	; (1748 <Timer_Pump+0x30>)
    172e:	4798      	blx	r3
        if (count>0) Timer_SetTimer(index, count-1);
    1730:	2800      	cmp	r0, #0
    1732:	d0f4      	beq.n	171e <Timer_Pump+0x6>
    1734:	3801      	subs	r0, #1
    1736:	b281      	uxth	r1, r0
    1738:	0020      	movs	r0, r4
    173a:	4b04      	ldr	r3, [pc, #16]	; (174c <Timer_Pump+0x34>)
    173c:	4798      	blx	r3
    173e:	e7ee      	b.n	171e <Timer_Pump+0x6>
    }
}
    1740:	bd10      	pop	{r4, pc}
    1742:	46c0      	nop			; (mov r8, r8)
    1744:	2000081c 	.word	0x2000081c
    1748:	000016dd 	.word	0x000016dd
    174c:	000016d1 	.word	0x000016d1

00001750 <Watchdog_Init>:
/** INCLUDES ******************************************************************/
#include "driver_init.h"
#include "Watchdog.h"
#include <App/DcaApp.h>

void Watchdog_Init() {
    1750:	b510      	push	{r4, lr}
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
    1752:	4b10      	ldr	r3, [pc, #64]	; (1794 <Watchdog_Init+0x44>)
    1754:	681b      	ldr	r3, [r3, #0]
    1756:	2b00      	cmp	r3, #0
    1758:	d018      	beq.n	178c <Watchdog_Init+0x3c>
    175a:	2001      	movs	r0, #1
    175c:	226f      	movs	r2, #111	; 0x6f
    175e:	490e      	ldr	r1, [pc, #56]	; (1798 <Watchdog_Init+0x48>)
    1760:	4b0e      	ldr	r3, [pc, #56]	; (179c <Watchdog_Init+0x4c>)
    1762:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    1764:	4c0b      	ldr	r4, [pc, #44]	; (1794 <Watchdog_Init+0x44>)
    1766:	22fa      	movs	r2, #250	; 0xfa
    1768:	0152      	lsls	r2, r2, #5
    176a:	2180      	movs	r1, #128	; 0x80
    176c:	00c9      	lsls	r1, r1, #3
    176e:	0020      	movs	r0, r4
    1770:	4b0b      	ldr	r3, [pc, #44]	; (17a0 <Watchdog_Init+0x50>)
    1772:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    1774:	6823      	ldr	r3, [r4, #0]
    1776:	2b00      	cmp	r3, #0
    1778:	d00a      	beq.n	1790 <Watchdog_Init+0x40>
    177a:	2001      	movs	r0, #1
    177c:	228c      	movs	r2, #140	; 0x8c
    177e:	4906      	ldr	r1, [pc, #24]	; (1798 <Watchdog_Init+0x48>)
    1780:	4b06      	ldr	r3, [pc, #24]	; (179c <Watchdog_Init+0x4c>)
    1782:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
    1784:	4803      	ldr	r0, [pc, #12]	; (1794 <Watchdog_Init+0x44>)
    1786:	4b07      	ldr	r3, [pc, #28]	; (17a4 <Watchdog_Init+0x54>)
    1788:	4798      	blx	r3
	timeout_period = WATCHDOG_TIMEOUT_MS; // 8s
	wdt_set_timeout_period(&WDT_0, RT_CLOCK_FREQUENCY_HZ, timeout_period);

	// Enable the dog.
	wdt_enable(&WDT_0);
}
    178a:	bd10      	pop	{r4, pc}
	ASSERT(wdt && wdt->dev.hw);
    178c:	2000      	movs	r0, #0
    178e:	e7e5      	b.n	175c <Watchdog_Init+0xc>
	ASSERT(wdt && wdt->dev.hw);
    1790:	2000      	movs	r0, #0
    1792:	e7f3      	b.n	177c <Watchdog_Init+0x2c>
    1794:	20003e40 	.word	0x20003e40
    1798:	00006c30 	.word	0x00006c30
    179c:	00002281 	.word	0x00002281
    17a0:	00002c79 	.word	0x00002c79
    17a4:	00002d95 	.word	0x00002d95

000017a8 <Watchdog_Feed>:

void Watchdog_Feed(void) {
    17a8:	b510      	push	{r4, lr}
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    17aa:	4b07      	ldr	r3, [pc, #28]	; (17c8 <Watchdog_Feed+0x20>)
    17ac:	681b      	ldr	r3, [r3, #0]
    17ae:	2b00      	cmp	r3, #0
    17b0:	d008      	beq.n	17c4 <Watchdog_Feed+0x1c>
    17b2:	2001      	movs	r0, #1
    17b4:	22a9      	movs	r2, #169	; 0xa9
    17b6:	4905      	ldr	r1, [pc, #20]	; (17cc <Watchdog_Feed+0x24>)
    17b8:	4b05      	ldr	r3, [pc, #20]	; (17d0 <Watchdog_Feed+0x28>)
    17ba:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
    17bc:	4802      	ldr	r0, [pc, #8]	; (17c8 <Watchdog_Feed+0x20>)
    17be:	4b05      	ldr	r3, [pc, #20]	; (17d4 <Watchdog_Feed+0x2c>)
    17c0:	4798      	blx	r3
	wdt_feed(&WDT_0);
    17c2:	bd10      	pop	{r4, pc}
	ASSERT(wdt && wdt->dev.hw);
    17c4:	2000      	movs	r0, #0
    17c6:	e7f5      	b.n	17b4 <Watchdog_Feed+0xc>
    17c8:	20003e40 	.word	0x20003e40
    17cc:	00006c30 	.word	0x00006c30
    17d0:	00002281 	.word	0x00002281
    17d4:	00002dd1 	.word	0x00002dd1

000017d8 <Wifi_Init>:


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
int8_t Wifi_Init(void) {
    return 0;
}
    17d8:	2000      	movs	r0, #0
    17da:	4770      	bx	lr

000017dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    17dc:	e7fe      	b.n	17dc <Dummy_Handler>
	...

000017e0 <Reset_Handler>:
{
    17e0:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    17e2:	4a12      	ldr	r2, [pc, #72]	; (182c <Reset_Handler+0x4c>)
    17e4:	4b12      	ldr	r3, [pc, #72]	; (1830 <Reset_Handler+0x50>)
    17e6:	429a      	cmp	r2, r3
    17e8:	d009      	beq.n	17fe <Reset_Handler+0x1e>
    17ea:	4b11      	ldr	r3, [pc, #68]	; (1830 <Reset_Handler+0x50>)
    17ec:	4a0f      	ldr	r2, [pc, #60]	; (182c <Reset_Handler+0x4c>)
    17ee:	e003      	b.n	17f8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    17f0:	6811      	ldr	r1, [r2, #0]
    17f2:	6019      	str	r1, [r3, #0]
    17f4:	3304      	adds	r3, #4
    17f6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    17f8:	490e      	ldr	r1, [pc, #56]	; (1834 <Reset_Handler+0x54>)
    17fa:	428b      	cmp	r3, r1
    17fc:	d3f8      	bcc.n	17f0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    17fe:	4b0e      	ldr	r3, [pc, #56]	; (1838 <Reset_Handler+0x58>)
    1800:	e002      	b.n	1808 <Reset_Handler+0x28>
                *pDest++ = 0;
    1802:	2200      	movs	r2, #0
    1804:	601a      	str	r2, [r3, #0]
    1806:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    1808:	4a0c      	ldr	r2, [pc, #48]	; (183c <Reset_Handler+0x5c>)
    180a:	4293      	cmp	r3, r2
    180c:	d3f9      	bcc.n	1802 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    180e:	4a0c      	ldr	r2, [pc, #48]	; (1840 <Reset_Handler+0x60>)
    1810:	21ff      	movs	r1, #255	; 0xff
    1812:	4b0c      	ldr	r3, [pc, #48]	; (1844 <Reset_Handler+0x64>)
    1814:	438b      	bics	r3, r1
    1816:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1818:	4a0b      	ldr	r2, [pc, #44]	; (1848 <Reset_Handler+0x68>)
    181a:	6851      	ldr	r1, [r2, #4]
    181c:	2380      	movs	r3, #128	; 0x80
    181e:	430b      	orrs	r3, r1
    1820:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1822:	4b0a      	ldr	r3, [pc, #40]	; (184c <Reset_Handler+0x6c>)
    1824:	4798      	blx	r3
        main();
    1826:	4b0a      	ldr	r3, [pc, #40]	; (1850 <Reset_Handler+0x70>)
    1828:	4798      	blx	r3
    182a:	e7fe      	b.n	182a <Reset_Handler+0x4a>
    182c:	000075cc 	.word	0x000075cc
    1830:	20000000 	.word	0x20000000
    1834:	200001d4 	.word	0x200001d4
    1838:	200001d4 	.word	0x200001d4
    183c:	20003f60 	.word	0x20003f60
    1840:	e000ed00 	.word	0xe000ed00
    1844:	00000000 	.word	0x00000000
    1848:	41004000 	.word	0x41004000
    184c:	000059c1 	.word	0x000059c1
    1850:	00002e09 	.word	0x00002e09

00001854 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
    1854:	b510      	push	{r4, lr}
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    1856:	4a08      	ldr	r2, [pc, #32]	; (1878 <TIMER_0_init+0x24>)
    1858:	6a11      	ldr	r1, [r2, #32]
    185a:	2380      	movs	r3, #128	; 0x80
    185c:	005b      	lsls	r3, r3, #1
    185e:	430b      	orrs	r3, r1
    1860:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
    1862:	4a06      	ldr	r2, [pc, #24]	; (187c <TIMER_0_init+0x28>)
    1864:	4b06      	ldr	r3, [pc, #24]	; (1880 <TIMER_0_init+0x2c>)
    1866:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC0);
	_gclk_enable_channel(TC0_GCLK_ID, CONF_GCLK_TC0_SRC);

	timer_init(&TIMER_0, TC0, _tc_get_timer());
    1868:	4b06      	ldr	r3, [pc, #24]	; (1884 <TIMER_0_init+0x30>)
    186a:	4798      	blx	r3
    186c:	0002      	movs	r2, r0
    186e:	4906      	ldr	r1, [pc, #24]	; (1888 <TIMER_0_init+0x34>)
    1870:	4806      	ldr	r0, [pc, #24]	; (188c <TIMER_0_init+0x38>)
    1872:	4b07      	ldr	r3, [pc, #28]	; (1890 <TIMER_0_init+0x3c>)
    1874:	4798      	blx	r3
}
    1876:	bd10      	pop	{r4, pc}
    1878:	40000400 	.word	0x40000400
    187c:	00004113 	.word	0x00004113
    1880:	40000c00 	.word	0x40000c00
    1884:	00002bbb 	.word	0x00002bbb
    1888:	42002000 	.word	0x42002000
    188c:	20003e78 	.word	0x20003e78
    1890:	00002151 	.word	0x00002151

00001894 <TICK_TIMER_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TICK_TIMER_init(void)
{
    1894:	b510      	push	{r4, lr}
    1896:	4a08      	ldr	r2, [pc, #32]	; (18b8 <TICK_TIMER_init+0x24>)
    1898:	6a11      	ldr	r1, [r2, #32]
    189a:	2380      	movs	r3, #128	; 0x80
    189c:	015b      	lsls	r3, r3, #5
    189e:	430b      	orrs	r3, r1
    18a0:	6213      	str	r3, [r2, #32]
    18a2:	4a06      	ldr	r2, [pc, #24]	; (18bc <TICK_TIMER_init+0x28>)
    18a4:	4b06      	ldr	r3, [pc, #24]	; (18c0 <TICK_TIMER_init+0x2c>)
    18a6:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC4);
	_gclk_enable_channel(TC4_GCLK_ID, CONF_GCLK_TC4_SRC);

	timer_init(&TICK_TIMER, TC4, _tc_get_timer());
    18a8:	4b06      	ldr	r3, [pc, #24]	; (18c4 <TICK_TIMER_init+0x30>)
    18aa:	4798      	blx	r3
    18ac:	0002      	movs	r2, r0
    18ae:	4906      	ldr	r1, [pc, #24]	; (18c8 <TICK_TIMER_init+0x34>)
    18b0:	4806      	ldr	r0, [pc, #24]	; (18cc <TICK_TIMER_init+0x38>)
    18b2:	4b07      	ldr	r3, [pc, #28]	; (18d0 <TICK_TIMER_init+0x3c>)
    18b4:	4798      	blx	r3
}
    18b6:	bd10      	pop	{r4, pc}
    18b8:	40000400 	.word	0x40000400
    18bc:	00004015 	.word	0x00004015
    18c0:	40000c00 	.word	0x40000c00
    18c4:	00002bbb 	.word	0x00002bbb
    18c8:	42003000 	.word	0x42003000
    18cc:	20003e44 	.word	0x20003e44
    18d0:	00002151 	.word	0x00002151

000018d4 <EXTERNAL_IRQ_0_init>:
{
    18d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18d6:	46c6      	mov	lr, r8
    18d8:	b500      	push	{lr}
    18da:	4a20      	ldr	r2, [pc, #128]	; (195c <EXTERNAL_IRQ_0_init+0x88>)
    18dc:	4b20      	ldr	r3, [pc, #128]	; (1960 <EXTERNAL_IRQ_0_init+0x8c>)
    18de:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    18e0:	20c0      	movs	r0, #192	; 0xc0
    18e2:	05c0      	lsls	r0, r0, #23
    18e4:	2180      	movs	r1, #128	; 0x80
    18e6:	01c9      	lsls	r1, r1, #7
    18e8:	6041      	str	r1, [r0, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    18ea:	4b1e      	ldr	r3, [pc, #120]	; (1964 <EXTERNAL_IRQ_0_init+0x90>)
    18ec:	4a1e      	ldr	r2, [pc, #120]	; (1968 <EXTERNAL_IRQ_0_init+0x94>)
    18ee:	629a      	str	r2, [r3, #40]	; 0x28
    18f0:	4f1e      	ldr	r7, [pc, #120]	; (196c <EXTERNAL_IRQ_0_init+0x98>)
    18f2:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    18f4:	6041      	str	r1, [r0, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    18f6:	244e      	movs	r4, #78	; 0x4e
    18f8:	5d1a      	ldrb	r2, [r3, r4]
    18fa:	2504      	movs	r5, #4
    18fc:	46ac      	mov	ip, r5
    18fe:	4665      	mov	r5, ip
    1900:	432a      	orrs	r2, r5
    1902:	b2d2      	uxtb	r2, r2
    1904:	551a      	strb	r2, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1906:	6181      	str	r1, [r0, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1908:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    190a:	2601      	movs	r6, #1
    190c:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    190e:	2201      	movs	r2, #1
    1910:	4690      	mov	r8, r2
    1912:	4642      	mov	r2, r8
    1914:	4311      	orrs	r1, r2
    1916:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1918:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    191a:	3c17      	subs	r4, #23
    191c:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    191e:	210f      	movs	r1, #15
    1920:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1922:	551a      	strb	r2, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1924:	2280      	movs	r2, #128	; 0x80
    1926:	0212      	lsls	r2, r2, #8
    1928:	6042      	str	r2, [r0, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    192a:	4911      	ldr	r1, [pc, #68]	; (1970 <EXTERNAL_IRQ_0_init+0x9c>)
    192c:	6299      	str	r1, [r3, #40]	; 0x28
    192e:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1930:	6042      	str	r2, [r0, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1932:	274f      	movs	r7, #79	; 0x4f
    1934:	5dd9      	ldrb	r1, [r3, r7]
    1936:	4329      	orrs	r1, r5
    1938:	b2c9      	uxtb	r1, r1
    193a:	55d9      	strb	r1, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    193c:	6182      	str	r2, [r0, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    193e:	5dda      	ldrb	r2, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1940:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1942:	4641      	mov	r1, r8
    1944:	430a      	orrs	r2, r1
    1946:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1948:	55da      	strb	r2, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    194a:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    194c:	210f      	movs	r1, #15
    194e:	400a      	ands	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1950:	551a      	strb	r2, [r3, r4]
	ext_irq_init();
    1952:	4b08      	ldr	r3, [pc, #32]	; (1974 <EXTERNAL_IRQ_0_init+0xa0>)
    1954:	4798      	blx	r3
}
    1956:	bc04      	pop	{r2}
    1958:	4690      	mov	r8, r2
    195a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    195c:	00004003 	.word	0x00004003
    1960:	40000c00 	.word	0x40000c00
    1964:	41004400 	.word	0x41004400
    1968:	40024000 	.word	0x40024000
    196c:	c0020000 	.word	0xc0020000
    1970:	40028000 	.word	0x40028000
    1974:	00001df5 	.word	0x00001df5

00001978 <FLASH_0_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
    1978:	4a02      	ldr	r2, [pc, #8]	; (1984 <FLASH_0_CLOCK_init+0xc>)
    197a:	69d3      	ldr	r3, [r2, #28]
    197c:	2104      	movs	r1, #4
    197e:	430b      	orrs	r3, r1
    1980:	61d3      	str	r3, [r2, #28]
}
    1982:	4770      	bx	lr
    1984:	40000400 	.word	0x40000400

00001988 <FLASH_0_init>:
{
    1988:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
    198a:	4b03      	ldr	r3, [pc, #12]	; (1998 <FLASH_0_init+0x10>)
    198c:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
    198e:	4903      	ldr	r1, [pc, #12]	; (199c <FLASH_0_init+0x14>)
    1990:	4803      	ldr	r0, [pc, #12]	; (19a0 <FLASH_0_init+0x18>)
    1992:	4b04      	ldr	r3, [pc, #16]	; (19a4 <FLASH_0_init+0x1c>)
    1994:	4798      	blx	r3
}
    1996:	bd10      	pop	{r4, pc}
    1998:	00001979 	.word	0x00001979
    199c:	41004000 	.word	0x41004000
    19a0:	20003e24 	.word	0x20003e24
    19a4:	00001e41 	.word	0x00001e41

000019a8 <ETHERNET_SPI_PORT_init>:
{
    19a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    19aa:	24c0      	movs	r4, #192	; 0xc0
    19ac:	05e4      	lsls	r4, r4, #23
    19ae:	2380      	movs	r3, #128	; 0x80
    19b0:	005b      	lsls	r3, r3, #1
    19b2:	6163      	str	r3, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    19b4:	60a3      	str	r3, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    19b6:	4b22      	ldr	r3, [pc, #136]	; (1a40 <ETHERNET_SPI_PORT_init+0x98>)
    19b8:	4a22      	ldr	r2, [pc, #136]	; (1a44 <ETHERNET_SPI_PORT_init+0x9c>)
    19ba:	629a      	str	r2, [r3, #40]	; 0x28
    19bc:	21c0      	movs	r1, #192	; 0xc0
    19be:	0609      	lsls	r1, r1, #24
    19c0:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    19c2:	2048      	movs	r0, #72	; 0x48
    19c4:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    19c6:	2501      	movs	r5, #1
    19c8:	46ac      	mov	ip, r5
    19ca:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    19cc:	2701      	movs	r7, #1
    19ce:	433a      	orrs	r2, r7
    19d0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    19d2:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    19d4:	3533      	adds	r5, #51	; 0x33
    19d6:	5d5a      	ldrb	r2, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    19d8:	3839      	subs	r0, #57	; 0x39
    19da:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
    19dc:	2002      	movs	r0, #2
    19de:	4302      	orrs	r2, r0
    19e0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    19e2:	555a      	strb	r2, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    19e4:	2280      	movs	r2, #128	; 0x80
    19e6:	0092      	lsls	r2, r2, #2
    19e8:	6062      	str	r2, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    19ea:	4a17      	ldr	r2, [pc, #92]	; (1a48 <ETHERNET_SPI_PORT_init+0xa0>)
    19ec:	629a      	str	r2, [r3, #40]	; 0x28
    19ee:	4a17      	ldr	r2, [pc, #92]	; (1a4c <ETHERNET_SPI_PORT_init+0xa4>)
    19f0:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    19f2:	2049      	movs	r0, #73	; 0x49
    19f4:	5c1a      	ldrb	r2, [r3, r0]
    19f6:	2604      	movs	r6, #4
    19f8:	43b2      	bics	r2, r6
    19fa:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    19fc:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    19fe:	4666      	mov	r6, ip
    1a00:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1a02:	433a      	orrs	r2, r7
    1a04:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1a06:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1a08:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1a0a:	360e      	adds	r6, #14
    1a0c:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
    1a0e:	2220      	movs	r2, #32
    1a10:	4310      	orrs	r0, r2
    1a12:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1a14:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1a16:	2280      	movs	r2, #128	; 0x80
    1a18:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1a1a:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1a1c:	4a0c      	ldr	r2, [pc, #48]	; (1a50 <ETHERNET_SPI_PORT_init+0xa8>)
    1a1e:	629a      	str	r2, [r3, #40]	; 0x28
    1a20:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1a22:	2247      	movs	r2, #71	; 0x47
    1a24:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1a26:	4660      	mov	r0, ip
    1a28:	4381      	bics	r1, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1a2a:	4339      	orrs	r1, r7
    1a2c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1a2e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1a30:	2133      	movs	r1, #51	; 0x33
    1a32:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1a34:	4032      	ands	r2, r6
	tmp |= PORT_PMUX_PMUXO(data);
    1a36:	2030      	movs	r0, #48	; 0x30
    1a38:	4302      	orrs	r2, r0
    1a3a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1a3c:	545a      	strb	r2, [r3, r1]
}
    1a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a40:	41004400 	.word	0x41004400
    1a44:	40000100 	.word	0x40000100
    1a48:	40020200 	.word	0x40020200
    1a4c:	c0020000 	.word	0xc0020000
    1a50:	40000080 	.word	0x40000080

00001a54 <ETHERNET_SPI_CLOCK_init>:
		PM->APBCMASK.reg |= 1 << peripheral;
    1a54:	4a04      	ldr	r2, [pc, #16]	; (1a68 <ETHERNET_SPI_CLOCK_init+0x14>)
    1a56:	6a13      	ldr	r3, [r2, #32]
    1a58:	2104      	movs	r1, #4
    1a5a:	430b      	orrs	r3, r1
    1a5c:	6213      	str	r3, [r2, #32]
    1a5e:	4a03      	ldr	r2, [pc, #12]	; (1a6c <ETHERNET_SPI_CLOCK_init+0x18>)
    1a60:	4b03      	ldr	r3, [pc, #12]	; (1a70 <ETHERNET_SPI_CLOCK_init+0x1c>)
    1a62:	805a      	strh	r2, [r3, #2]
}
    1a64:	4770      	bx	lr
    1a66:	46c0      	nop			; (mov r8, r8)
    1a68:	40000400 	.word	0x40000400
    1a6c:	0000400d 	.word	0x0000400d
    1a70:	40000c00 	.word	0x40000c00

00001a74 <ETHERNET_SPI_init>:
{
    1a74:	b510      	push	{r4, lr}
	ETHERNET_SPI_CLOCK_init();
    1a76:	4b04      	ldr	r3, [pc, #16]	; (1a88 <ETHERNET_SPI_init+0x14>)
    1a78:	4798      	blx	r3
	spi_m_sync_init(&ETHERNET_SPI, SERCOM0);
    1a7a:	4904      	ldr	r1, [pc, #16]	; (1a8c <ETHERNET_SPI_init+0x18>)
    1a7c:	4804      	ldr	r0, [pc, #16]	; (1a90 <ETHERNET_SPI_init+0x1c>)
    1a7e:	4b05      	ldr	r3, [pc, #20]	; (1a94 <ETHERNET_SPI_init+0x20>)
    1a80:	4798      	blx	r3
	ETHERNET_SPI_PORT_init();
    1a82:	4b05      	ldr	r3, [pc, #20]	; (1a98 <ETHERNET_SPI_init+0x24>)
    1a84:	4798      	blx	r3
}
    1a86:	bd10      	pop	{r4, pc}
    1a88:	00001a55 	.word	0x00001a55
    1a8c:	42000800 	.word	0x42000800
    1a90:	20003e0c 	.word	0x20003e0c
    1a94:	00001efd 	.word	0x00001efd
    1a98:	000019a9 	.word	0x000019a9

00001a9c <WIRELESS_SPI_PORT_init>:
{
    1a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1a9e:	24c0      	movs	r4, #192	; 0xc0
    1aa0:	05e4      	lsls	r4, r4, #23
    1aa2:	2380      	movs	r3, #128	; 0x80
    1aa4:	025b      	lsls	r3, r3, #9
    1aa6:	6163      	str	r3, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1aa8:	60a3      	str	r3, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1aaa:	4b23      	ldr	r3, [pc, #140]	; (1b38 <WIRELESS_SPI_PORT_init+0x9c>)
    1aac:	2180      	movs	r1, #128	; 0x80
    1aae:	05c9      	lsls	r1, r1, #23
    1ab0:	6299      	str	r1, [r3, #40]	; 0x28
    1ab2:	4a22      	ldr	r2, [pc, #136]	; (1b3c <WIRELESS_SPI_PORT_init+0xa0>)
    1ab4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1ab6:	2050      	movs	r0, #80	; 0x50
    1ab8:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1aba:	2501      	movs	r5, #1
    1abc:	46ac      	mov	ip, r5
    1abe:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1ac0:	2701      	movs	r7, #1
    1ac2:	433a      	orrs	r2, r7
    1ac4:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1ac6:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1ac8:	3537      	adds	r5, #55	; 0x37
    1aca:	5d5a      	ldrb	r2, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1acc:	3841      	subs	r0, #65	; 0x41
    1ace:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
    1ad0:	2002      	movs	r0, #2
    1ad2:	4302      	orrs	r2, r0
    1ad4:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1ad6:	555a      	strb	r2, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1ad8:	2280      	movs	r2, #128	; 0x80
    1ada:	0292      	lsls	r2, r2, #10
    1adc:	6062      	str	r2, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1ade:	4a18      	ldr	r2, [pc, #96]	; (1b40 <WIRELESS_SPI_PORT_init+0xa4>)
    1ae0:	629a      	str	r2, [r3, #40]	; 0x28
    1ae2:	4a18      	ldr	r2, [pc, #96]	; (1b44 <WIRELESS_SPI_PORT_init+0xa8>)
    1ae4:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1ae6:	2051      	movs	r0, #81	; 0x51
    1ae8:	5c1a      	ldrb	r2, [r3, r0]
    1aea:	2604      	movs	r6, #4
    1aec:	43b2      	bics	r2, r6
    1aee:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1af0:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1af2:	4666      	mov	r6, ip
    1af4:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1af6:	433a      	orrs	r2, r7
    1af8:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1afa:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1afc:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1afe:	360e      	adds	r6, #14
    1b00:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
    1b02:	2220      	movs	r2, #32
    1b04:	4310      	orrs	r0, r2
    1b06:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1b08:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1b0a:	2280      	movs	r2, #128	; 0x80
    1b0c:	0612      	lsls	r2, r2, #24
    1b0e:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1b10:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1b12:	6299      	str	r1, [r3, #40]	; 0x28
    1b14:	4a0c      	ldr	r2, [pc, #48]	; (1b48 <WIRELESS_SPI_PORT_init+0xac>)
    1b16:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1b18:	225f      	movs	r2, #95	; 0x5f
    1b1a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1b1c:	4660      	mov	r0, ip
    1b1e:	4381      	bics	r1, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1b20:	4339      	orrs	r1, r7
    1b22:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1b24:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1b26:	213f      	movs	r1, #63	; 0x3f
    1b28:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1b2a:	4032      	ands	r2, r6
	tmp |= PORT_PMUX_PMUXO(data);
    1b2c:	2030      	movs	r0, #48	; 0x30
    1b2e:	4302      	orrs	r2, r0
    1b30:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1b32:	545a      	strb	r2, [r3, r1]
}
    1b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	41004400 	.word	0x41004400
    1b3c:	c0000001 	.word	0xc0000001
    1b40:	40020000 	.word	0x40020000
    1b44:	c0020002 	.word	0xc0020002
    1b48:	c0008000 	.word	0xc0008000

00001b4c <WIRELESS_SPI_CLOCK_init>:
    1b4c:	4a04      	ldr	r2, [pc, #16]	; (1b60 <WIRELESS_SPI_CLOCK_init+0x14>)
    1b4e:	6a13      	ldr	r3, [r2, #32]
    1b50:	2108      	movs	r1, #8
    1b52:	430b      	orrs	r3, r1
    1b54:	6213      	str	r3, [r2, #32]
    1b56:	4a03      	ldr	r2, [pc, #12]	; (1b64 <WIRELESS_SPI_CLOCK_init+0x18>)
    1b58:	4b03      	ldr	r3, [pc, #12]	; (1b68 <WIRELESS_SPI_CLOCK_init+0x1c>)
    1b5a:	805a      	strh	r2, [r3, #2]
}
    1b5c:	4770      	bx	lr
    1b5e:	46c0      	nop			; (mov r8, r8)
    1b60:	40000400 	.word	0x40000400
    1b64:	0000400e 	.word	0x0000400e
    1b68:	40000c00 	.word	0x40000c00

00001b6c <WIRELESS_SPI_init>:
{
    1b6c:	b510      	push	{r4, lr}
	WIRELESS_SPI_CLOCK_init();
    1b6e:	4b04      	ldr	r3, [pc, #16]	; (1b80 <WIRELESS_SPI_init+0x14>)
    1b70:	4798      	blx	r3
	spi_m_sync_init(&WIRELESS_SPI, SERCOM1);
    1b72:	4904      	ldr	r1, [pc, #16]	; (1b84 <WIRELESS_SPI_init+0x18>)
    1b74:	4804      	ldr	r0, [pc, #16]	; (1b88 <WIRELESS_SPI_init+0x1c>)
    1b76:	4b05      	ldr	r3, [pc, #20]	; (1b8c <WIRELESS_SPI_init+0x20>)
    1b78:	4798      	blx	r3
	WIRELESS_SPI_PORT_init();
    1b7a:	4b05      	ldr	r3, [pc, #20]	; (1b90 <WIRELESS_SPI_init+0x24>)
    1b7c:	4798      	blx	r3
}
    1b7e:	bd10      	pop	{r4, pc}
    1b80:	00001b4d 	.word	0x00001b4d
    1b84:	42000c00 	.word	0x42000c00
    1b88:	20003e60 	.word	0x20003e60
    1b8c:	00001efd 	.word	0x00001efd
    1b90:	00001a9d 	.word	0x00001a9d

00001b94 <delay_driver_init>:
{
    1b94:	b510      	push	{r4, lr}
	delay_init(SysTick);
    1b96:	4802      	ldr	r0, [pc, #8]	; (1ba0 <delay_driver_init+0xc>)
    1b98:	4b02      	ldr	r3, [pc, #8]	; (1ba4 <delay_driver_init+0x10>)
    1b9a:	4798      	blx	r3
}
    1b9c:	bd10      	pop	{r4, pc}
    1b9e:	46c0      	nop			; (mov r8, r8)
    1ba0:	e000e010 	.word	0xe000e010
    1ba4:	00001d5d 	.word	0x00001d5d

00001ba8 <WDT_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
    1ba8:	4a04      	ldr	r2, [pc, #16]	; (1bbc <WDT_0_CLOCK_init+0x14>)
    1baa:	6993      	ldr	r3, [r2, #24]
    1bac:	2110      	movs	r1, #16
    1bae:	430b      	orrs	r3, r1
    1bb0:	6193      	str	r3, [r2, #24]
    1bb2:	4a03      	ldr	r2, [pc, #12]	; (1bc0 <WDT_0_CLOCK_init+0x18>)
    1bb4:	4b03      	ldr	r3, [pc, #12]	; (1bc4 <WDT_0_CLOCK_init+0x1c>)
    1bb6:	805a      	strh	r2, [r3, #2]

void WDT_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, WDT);
	_gclk_enable_channel(WDT_GCLK_ID, CONF_GCLK_WDT_SRC);
}
    1bb8:	4770      	bx	lr
    1bba:	46c0      	nop			; (mov r8, r8)
    1bbc:	40000400 	.word	0x40000400
    1bc0:	00004101 	.word	0x00004101
    1bc4:	40000c00 	.word	0x40000c00

00001bc8 <WDT_0_init>:

void WDT_0_init(void)
{
    1bc8:	b510      	push	{r4, lr}
	WDT_0_CLOCK_init();
    1bca:	4b06      	ldr	r3, [pc, #24]	; (1be4 <WDT_0_init+0x1c>)
    1bcc:	4798      	blx	r3
	ASSERT(wdt && hw);
    1bce:	2248      	movs	r2, #72	; 0x48
    1bd0:	4905      	ldr	r1, [pc, #20]	; (1be8 <WDT_0_init+0x20>)
    1bd2:	2001      	movs	r0, #1
    1bd4:	4b05      	ldr	r3, [pc, #20]	; (1bec <WDT_0_init+0x24>)
    1bd6:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
    1bd8:	4805      	ldr	r0, [pc, #20]	; (1bf0 <WDT_0_init+0x28>)
    1bda:	4b06      	ldr	r3, [pc, #24]	; (1bf4 <WDT_0_init+0x2c>)
    1bdc:	6003      	str	r3, [r0, #0]
	return _wdt_init(&wdt->dev);
    1bde:	4b06      	ldr	r3, [pc, #24]	; (1bf8 <WDT_0_init+0x30>)
    1be0:	4798      	blx	r3
	wdt_init(&WDT_0, WDT);
}
    1be2:	bd10      	pop	{r4, pc}
    1be4:	00001ba9 	.word	0x00001ba9
    1be8:	00006c30 	.word	0x00006c30
    1bec:	00002281 	.word	0x00002281
    1bf0:	20003e40 	.word	0x20003e40
    1bf4:	40001000 	.word	0x40001000
    1bf8:	00002c05 	.word	0x00002c05

00001bfc <system_init>:

void system_init(void)
{
    1bfc:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    1bfe:	4b3d      	ldr	r3, [pc, #244]	; (1cf4 <system_init+0xf8>)
    1c00:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1c02:	22c0      	movs	r2, #192	; 0xc0
    1c04:	05d2      	lsls	r2, r2, #23
    1c06:	2304      	movs	r3, #4
    1c08:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1c0a:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1c0c:	4b3a      	ldr	r3, [pc, #232]	; (1cf8 <system_init+0xfc>)
    1c0e:	493b      	ldr	r1, [pc, #236]	; (1cfc <system_init+0x100>)
    1c10:	6299      	str	r1, [r3, #40]	; 0x28
    1c12:	20c0      	movs	r0, #192	; 0xc0
    1c14:	0600      	lsls	r0, r0, #24
    1c16:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1c18:	2542      	movs	r5, #66	; 0x42
    1c1a:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1c1c:	2101      	movs	r1, #1
    1c1e:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1c20:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1c22:	2408      	movs	r4, #8
    1c24:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1c26:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1c28:	4c35      	ldr	r4, [pc, #212]	; (1d00 <system_init+0x104>)
    1c2a:	629c      	str	r4, [r3, #40]	; 0x28
    1c2c:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1c2e:	3501      	adds	r5, #1
    1c30:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1c32:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1c34:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1c36:	2410      	movs	r4, #16
    1c38:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1c3a:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1c3c:	4c31      	ldr	r4, [pc, #196]	; (1d04 <system_init+0x108>)
    1c3e:	629c      	str	r4, [r3, #40]	; 0x28
    1c40:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1c42:	3501      	adds	r5, #1
    1c44:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1c46:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1c48:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1c4a:	2420      	movs	r4, #32
    1c4c:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1c4e:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1c50:	4c2d      	ldr	r4, [pc, #180]	; (1d08 <system_init+0x10c>)
    1c52:	629c      	str	r4, [r3, #40]	; 0x28
    1c54:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1c56:	3501      	adds	r5, #1
    1c58:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1c5a:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1c5c:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1c5e:	2480      	movs	r4, #128	; 0x80
    1c60:	0124      	lsls	r4, r4, #4
    1c62:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1c64:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1c66:	4c29      	ldr	r4, [pc, #164]	; (1d0c <system_init+0x110>)
    1c68:	629c      	str	r4, [r3, #40]	; 0x28
    1c6a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1c6c:	244b      	movs	r4, #75	; 0x4b
    1c6e:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1c70:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1c72:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1c74:	2080      	movs	r0, #128	; 0x80
    1c76:	02c0      	lsls	r0, r0, #11
    1c78:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1c7a:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1c7c:	2080      	movs	r0, #128	; 0x80
    1c7e:	05c0      	lsls	r0, r0, #23
    1c80:	6298      	str	r0, [r3, #40]	; 0x28
    1c82:	4c23      	ldr	r4, [pc, #140]	; (1d10 <system_init+0x114>)
    1c84:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1c86:	350d      	adds	r5, #13
    1c88:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1c8a:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1c8c:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1c8e:	2480      	movs	r4, #128	; 0x80
    1c90:	0324      	lsls	r4, r4, #12
    1c92:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1c94:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1c96:	6298      	str	r0, [r3, #40]	; 0x28
    1c98:	4c1e      	ldr	r4, [pc, #120]	; (1d14 <system_init+0x118>)
    1c9a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1c9c:	3501      	adds	r5, #1
    1c9e:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1ca0:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1ca2:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1ca4:	2480      	movs	r4, #128	; 0x80
    1ca6:	03e4      	lsls	r4, r4, #15
    1ca8:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1caa:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1cac:	6298      	str	r0, [r3, #40]	; 0x28
    1cae:	4c1a      	ldr	r4, [pc, #104]	; (1d18 <system_init+0x11c>)
    1cb0:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1cb2:	3503      	adds	r5, #3
    1cb4:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1cb6:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1cb8:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1cba:	2480      	movs	r4, #128	; 0x80
    1cbc:	0424      	lsls	r4, r4, #16
    1cbe:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1cc0:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1cc2:	6298      	str	r0, [r3, #40]	; 0x28
    1cc4:	4a15      	ldr	r2, [pc, #84]	; (1d1c <system_init+0x120>)
    1cc6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1cc8:	2057      	movs	r0, #87	; 0x57
    1cca:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1ccc:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1cce:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(LED_RED, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED_RED, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
    1cd0:	4b13      	ldr	r3, [pc, #76]	; (1d20 <system_init+0x124>)
    1cd2:	4798      	blx	r3

	FLASH_0_init();
    1cd4:	4b13      	ldr	r3, [pc, #76]	; (1d24 <system_init+0x128>)
    1cd6:	4798      	blx	r3

	ETHERNET_SPI_init();
    1cd8:	4b13      	ldr	r3, [pc, #76]	; (1d28 <system_init+0x12c>)
    1cda:	4798      	blx	r3

	WIRELESS_SPI_init();
    1cdc:	4b13      	ldr	r3, [pc, #76]	; (1d2c <system_init+0x130>)
    1cde:	4798      	blx	r3

	delay_driver_init();
    1ce0:	4b13      	ldr	r3, [pc, #76]	; (1d30 <system_init+0x134>)
    1ce2:	4798      	blx	r3

	TIMER_0_init();
    1ce4:	4b13      	ldr	r3, [pc, #76]	; (1d34 <system_init+0x138>)
    1ce6:	4798      	blx	r3
	TICK_TIMER_init();
    1ce8:	4b13      	ldr	r3, [pc, #76]	; (1d38 <system_init+0x13c>)
    1cea:	4798      	blx	r3

	WDT_0_init();
    1cec:	4b13      	ldr	r3, [pc, #76]	; (1d3c <system_init+0x140>)
    1cee:	4798      	blx	r3
}
    1cf0:	bd70      	pop	{r4, r5, r6, pc}
    1cf2:	46c0      	nop			; (mov r8, r8)
    1cf4:	00002355 	.word	0x00002355
    1cf8:	41004400 	.word	0x41004400
    1cfc:	40000004 	.word	0x40000004
    1d00:	40000008 	.word	0x40000008
    1d04:	40000010 	.word	0x40000010
    1d08:	40000020 	.word	0x40000020
    1d0c:	40000800 	.word	0x40000800
    1d10:	c0000004 	.word	0xc0000004
    1d14:	c0000008 	.word	0xc0000008
    1d18:	c0000040 	.word	0xc0000040
    1d1c:	c0000080 	.word	0xc0000080
    1d20:	000018d5 	.word	0x000018d5
    1d24:	00001989 	.word	0x00001989
    1d28:	00001a75 	.word	0x00001a75
    1d2c:	00001b6d 	.word	0x00001b6d
    1d30:	00001b95 	.word	0x00001b95
    1d34:	00001855 	.word	0x00001855
    1d38:	00001895 	.word	0x00001895
    1d3c:	00001bc9 	.word	0x00001bc9

00001d40 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1d40:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    1d44:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1d46:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1d48:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    1d4c:	4770      	bx	lr

00001d4e <atomic_leave_critical>:
    1d4e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    1d52:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1d54:	f383 8810 	msr	PRIMASK, r3
}
    1d58:	4770      	bx	lr
	...

00001d5c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1d5c:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
    1d5e:	4b02      	ldr	r3, [pc, #8]	; (1d68 <delay_init+0xc>)
    1d60:	6018      	str	r0, [r3, #0]
    1d62:	4b02      	ldr	r3, [pc, #8]	; (1d6c <delay_init+0x10>)
    1d64:	4798      	blx	r3
}
    1d66:	bd10      	pop	{r4, pc}
    1d68:	20000834 	.word	0x20000834
    1d6c:	00002999 	.word	0x00002999

00001d70 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    1d70:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    1d72:	4b04      	ldr	r3, [pc, #16]	; (1d84 <delay_us+0x14>)
    1d74:	681c      	ldr	r4, [r3, #0]
    1d76:	4b04      	ldr	r3, [pc, #16]	; (1d88 <delay_us+0x18>)
    1d78:	4798      	blx	r3
    1d7a:	0001      	movs	r1, r0
    1d7c:	0020      	movs	r0, r4
    1d7e:	4b03      	ldr	r3, [pc, #12]	; (1d8c <delay_us+0x1c>)
    1d80:	4798      	blx	r3
}
    1d82:	bd10      	pop	{r4, pc}
    1d84:	20000834 	.word	0x20000834
    1d88:	00002329 	.word	0x00002329
    1d8c:	000029a5 	.word	0x000029a5

00001d90 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1d90:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1d92:	4b04      	ldr	r3, [pc, #16]	; (1da4 <delay_ms+0x14>)
    1d94:	681c      	ldr	r4, [r3, #0]
    1d96:	4b04      	ldr	r3, [pc, #16]	; (1da8 <delay_ms+0x18>)
    1d98:	4798      	blx	r3
    1d9a:	0001      	movs	r1, r0
    1d9c:	0020      	movs	r0, r4
    1d9e:	4b03      	ldr	r3, [pc, #12]	; (1dac <delay_ms+0x1c>)
    1da0:	4798      	blx	r3
}
    1da2:	bd10      	pop	{r4, pc}
    1da4:	20000834 	.word	0x20000834
    1da8:	00002345 	.word	0x00002345
    1dac:	000029a5 	.word	0x000029a5

00001db0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1db0:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1db2:	2502      	movs	r5, #2
    1db4:	2400      	movs	r4, #0

	while (upper >= lower) {
    1db6:	e007      	b.n	1dc8 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
    1db8:	4a0d      	ldr	r2, [pc, #52]	; (1df0 <process_ext_irq+0x40>)
    1dba:	58b3      	ldr	r3, [r6, r2]
    1dbc:	2b00      	cmp	r3, #0
    1dbe:	d000      	beq.n	1dc2 <process_ext_irq+0x12>
				ext_irqs[middle].cb();
    1dc0:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
    1dc2:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
    1dc4:	3a01      	subs	r2, #1
    1dc6:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
    1dc8:	42ac      	cmp	r4, r5
    1dca:	d8fa      	bhi.n	1dc2 <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
    1dcc:	192b      	adds	r3, r5, r4
    1dce:	105b      	asrs	r3, r3, #1
    1dd0:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
    1dd2:	2a01      	cmp	r2, #1
    1dd4:	d8f5      	bhi.n	1dc2 <process_ext_irq+0x12>
    1dd6:	21ff      	movs	r1, #255	; 0xff
    1dd8:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
    1dda:	00de      	lsls	r6, r3, #3
    1ddc:	4904      	ldr	r1, [pc, #16]	; (1df0 <process_ext_irq+0x40>)
    1dde:	1989      	adds	r1, r1, r6
    1de0:	6849      	ldr	r1, [r1, #4]
    1de2:	4281      	cmp	r1, r0
    1de4:	d0e8      	beq.n	1db8 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
    1de6:	d2ed      	bcs.n	1dc4 <process_ext_irq+0x14>
			lower = middle + 1;
    1de8:	3201      	adds	r2, #1
    1dea:	b2d4      	uxtb	r4, r2
    1dec:	e7ec      	b.n	1dc8 <process_ext_irq+0x18>
    1dee:	46c0      	nop			; (mov r8, r8)
    1df0:	20000838 	.word	0x20000838

00001df4 <ext_irq_init>:
{
    1df4:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1df6:	2300      	movs	r3, #0
    1df8:	e009      	b.n	1e0e <ext_irq_init+0x1a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    1dfa:	4a08      	ldr	r2, [pc, #32]	; (1e1c <ext_irq_init+0x28>)
    1dfc:	00d9      	lsls	r1, r3, #3
    1dfe:	1850      	adds	r0, r2, r1
    1e00:	2401      	movs	r4, #1
    1e02:	4264      	negs	r4, r4
    1e04:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
    1e06:	2000      	movs	r0, #0
    1e08:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1e0a:	3301      	adds	r3, #1
    1e0c:	b29b      	uxth	r3, r3
    1e0e:	2b01      	cmp	r3, #1
    1e10:	d9f3      	bls.n	1dfa <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
    1e12:	4803      	ldr	r0, [pc, #12]	; (1e20 <ext_irq_init+0x2c>)
    1e14:	4b03      	ldr	r3, [pc, #12]	; (1e24 <ext_irq_init+0x30>)
    1e16:	4798      	blx	r3
}
    1e18:	bd10      	pop	{r4, pc}
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	20000838 	.word	0x20000838
    1e20:	00001db1 	.word	0x00001db1
    1e24:	00002385 	.word	0x00002385

00001e28 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    1e28:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    1e2a:	6943      	ldr	r3, [r0, #20]
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	d000      	beq.n	1e32 <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
    1e30:	4798      	blx	r3
	}
}
    1e32:	bd10      	pop	{r4, pc}

00001e34 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    1e34:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    1e36:	6983      	ldr	r3, [r0, #24]
    1e38:	2b00      	cmp	r3, #0
    1e3a:	d000      	beq.n	1e3e <flash_error+0xa>
		descr->callbacks.cb_error(descr);
    1e3c:	4798      	blx	r3
	}
}
    1e3e:	bd10      	pop	{r4, pc}

00001e40 <flash_init>:
{
    1e40:	b570      	push	{r4, r5, r6, lr}
    1e42:	0004      	movs	r4, r0
    1e44:	000d      	movs	r5, r1
	ASSERT(flash && hw);
    1e46:	2800      	cmp	r0, #0
    1e48:	d013      	beq.n	1e72 <flash_init+0x32>
    1e4a:	2900      	cmp	r1, #0
    1e4c:	d00f      	beq.n	1e6e <flash_init+0x2e>
    1e4e:	2001      	movs	r0, #1
    1e50:	2238      	movs	r2, #56	; 0x38
    1e52:	4909      	ldr	r1, [pc, #36]	; (1e78 <flash_init+0x38>)
    1e54:	4b09      	ldr	r3, [pc, #36]	; (1e7c <flash_init+0x3c>)
    1e56:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    1e58:	0029      	movs	r1, r5
    1e5a:	0020      	movs	r0, r4
    1e5c:	4b08      	ldr	r3, [pc, #32]	; (1e80 <flash_init+0x40>)
    1e5e:	4798      	blx	r3
	if (rc) {
    1e60:	2800      	cmp	r0, #0
    1e62:	d103      	bne.n	1e6c <flash_init+0x2c>
	flash->dev.flash_cb.ready_cb = flash_ready;
    1e64:	4b07      	ldr	r3, [pc, #28]	; (1e84 <flash_init+0x44>)
    1e66:	6023      	str	r3, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    1e68:	4b07      	ldr	r3, [pc, #28]	; (1e88 <flash_init+0x48>)
    1e6a:	6063      	str	r3, [r4, #4]
}
    1e6c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(flash && hw);
    1e6e:	2000      	movs	r0, #0
    1e70:	e7ee      	b.n	1e50 <flash_init+0x10>
    1e72:	2000      	movs	r0, #0
    1e74:	e7ec      	b.n	1e50 <flash_init+0x10>
    1e76:	46c0      	nop			; (mov r8, r8)
    1e78:	00006c4c 	.word	0x00006c4c
    1e7c:	00002281 	.word	0x00002281
    1e80:	00002511 	.word	0x00002511
    1e84:	00001e29 	.word	0x00001e29
    1e88:	00001e35 	.word	0x00001e35

00001e8c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1e8c:	b570      	push	{r4, r5, r6, lr}
    1e8e:	0004      	movs	r4, r0
    1e90:	000d      	movs	r5, r1
    1e92:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    1e94:	2800      	cmp	r0, #0
    1e96:	d00e      	beq.n	1eb6 <io_write+0x2a>
    1e98:	2900      	cmp	r1, #0
    1e9a:	d00a      	beq.n	1eb2 <io_write+0x26>
    1e9c:	2001      	movs	r0, #1
    1e9e:	2234      	movs	r2, #52	; 0x34
    1ea0:	4906      	ldr	r1, [pc, #24]	; (1ebc <io_write+0x30>)
    1ea2:	4b07      	ldr	r3, [pc, #28]	; (1ec0 <io_write+0x34>)
    1ea4:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1ea6:	6823      	ldr	r3, [r4, #0]
    1ea8:	0032      	movs	r2, r6
    1eaa:	0029      	movs	r1, r5
    1eac:	0020      	movs	r0, r4
    1eae:	4798      	blx	r3
}
    1eb0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    1eb2:	2000      	movs	r0, #0
    1eb4:	e7f3      	b.n	1e9e <io_write+0x12>
    1eb6:	2000      	movs	r0, #0
    1eb8:	e7f1      	b.n	1e9e <io_write+0x12>
    1eba:	46c0      	nop			; (mov r8, r8)
    1ebc:	00006c64 	.word	0x00006c64
    1ec0:	00002281 	.word	0x00002281

00001ec4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1ec4:	b570      	push	{r4, r5, r6, lr}
    1ec6:	0004      	movs	r4, r0
    1ec8:	000d      	movs	r5, r1
    1eca:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    1ecc:	2800      	cmp	r0, #0
    1ece:	d00e      	beq.n	1eee <io_read+0x2a>
    1ed0:	2900      	cmp	r1, #0
    1ed2:	d00a      	beq.n	1eea <io_read+0x26>
    1ed4:	2001      	movs	r0, #1
    1ed6:	223d      	movs	r2, #61	; 0x3d
    1ed8:	4906      	ldr	r1, [pc, #24]	; (1ef4 <io_read+0x30>)
    1eda:	4b07      	ldr	r3, [pc, #28]	; (1ef8 <io_read+0x34>)
    1edc:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1ede:	6863      	ldr	r3, [r4, #4]
    1ee0:	0032      	movs	r2, r6
    1ee2:	0029      	movs	r1, r5
    1ee4:	0020      	movs	r0, r4
    1ee6:	4798      	blx	r3
}
    1ee8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    1eea:	2000      	movs	r0, #0
    1eec:	e7f3      	b.n	1ed6 <io_read+0x12>
    1eee:	2000      	movs	r0, #0
    1ef0:	e7f1      	b.n	1ed6 <io_read+0x12>
    1ef2:	46c0      	nop			; (mov r8, r8)
    1ef4:	00006c64 	.word	0x00006c64
    1ef8:	00002281 	.word	0x00002281

00001efc <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    1efc:	b570      	push	{r4, r5, r6, lr}
    1efe:	0004      	movs	r4, r0
    1f00:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    1f02:	2800      	cmp	r0, #0
    1f04:	d017      	beq.n	1f36 <spi_m_sync_init+0x3a>
    1f06:	2900      	cmp	r1, #0
    1f08:	d013      	beq.n	1f32 <spi_m_sync_init+0x36>
    1f0a:	2001      	movs	r0, #1
    1f0c:	2240      	movs	r2, #64	; 0x40
    1f0e:	490b      	ldr	r1, [pc, #44]	; (1f3c <spi_m_sync_init+0x40>)
    1f10:	4b0b      	ldr	r3, [pc, #44]	; (1f40 <spi_m_sync_init+0x44>)
    1f12:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1f14:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    1f16:	1d20      	adds	r0, r4, #4
    1f18:	0029      	movs	r1, r5
    1f1a:	4b0a      	ldr	r3, [pc, #40]	; (1f44 <spi_m_sync_init+0x48>)
    1f1c:	4798      	blx	r3

	if (rc < 0) {
    1f1e:	2800      	cmp	r0, #0
    1f20:	db06      	blt.n	1f30 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    1f22:	4b09      	ldr	r3, [pc, #36]	; (1f48 <spi_m_sync_init+0x4c>)
    1f24:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    1f26:	4b09      	ldr	r3, [pc, #36]	; (1f4c <spi_m_sync_init+0x50>)
    1f28:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    1f2a:	4b09      	ldr	r3, [pc, #36]	; (1f50 <spi_m_sync_init+0x54>)
    1f2c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    1f2e:	2000      	movs	r0, #0
}
    1f30:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
    1f32:	2000      	movs	r0, #0
    1f34:	e7ea      	b.n	1f0c <spi_m_sync_init+0x10>
    1f36:	2000      	movs	r0, #0
    1f38:	e7e8      	b.n	1f0c <spi_m_sync_init+0x10>
    1f3a:	46c0      	nop			; (mov r8, r8)
    1f3c:	00006c78 	.word	0x00006c78
    1f40:	00002281 	.word	0x00002281
    1f44:	0000260d 	.word	0x0000260d
    1f48:	ffff8000 	.word	0xffff8000
    1f4c:	00002029 	.word	0x00002029
    1f50:	00001fed 	.word	0x00001fed

00001f54 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    1f54:	b510      	push	{r4, lr}
    1f56:	0004      	movs	r4, r0
	ASSERT(spi);
    1f58:	1e43      	subs	r3, r0, #1
    1f5a:	4198      	sbcs	r0, r3
    1f5c:	b2c0      	uxtb	r0, r0
    1f5e:	2257      	movs	r2, #87	; 0x57
    1f60:	4903      	ldr	r1, [pc, #12]	; (1f70 <spi_m_sync_enable+0x1c>)
    1f62:	4b04      	ldr	r3, [pc, #16]	; (1f74 <spi_m_sync_enable+0x20>)
    1f64:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    1f66:	1d20      	adds	r0, r4, #4
    1f68:	4b03      	ldr	r3, [pc, #12]	; (1f78 <spi_m_sync_enable+0x24>)
    1f6a:	4798      	blx	r3
}
    1f6c:	bd10      	pop	{r4, pc}
    1f6e:	46c0      	nop			; (mov r8, r8)
    1f70:	00006c78 	.word	0x00006c78
    1f74:	00002281 	.word	0x00002281
    1f78:	000027cd 	.word	0x000027cd

00001f7c <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    1f7c:	b510      	push	{r4, lr}
    1f7e:	0004      	movs	r4, r0
	ASSERT(spi);
    1f80:	1e43      	subs	r3, r0, #1
    1f82:	4198      	sbcs	r0, r3
    1f84:	b2c0      	uxtb	r0, r0
    1f86:	225d      	movs	r2, #93	; 0x5d
    1f88:	4903      	ldr	r1, [pc, #12]	; (1f98 <spi_m_sync_disable+0x1c>)
    1f8a:	4b04      	ldr	r3, [pc, #16]	; (1f9c <spi_m_sync_disable+0x20>)
    1f8c:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    1f8e:	1d20      	adds	r0, r4, #4
    1f90:	4b03      	ldr	r3, [pc, #12]	; (1fa0 <spi_m_sync_disable+0x24>)
    1f92:	4798      	blx	r3
}
    1f94:	bd10      	pop	{r4, pc}
    1f96:	46c0      	nop			; (mov r8, r8)
    1f98:	00006c78 	.word	0x00006c78
    1f9c:	00002281 	.word	0x00002281
    1fa0:	00002805 	.word	0x00002805

00001fa4 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1fa4:	b530      	push	{r4, r5, lr}
    1fa6:	b087      	sub	sp, #28
    1fa8:	0004      	movs	r4, r0
    1faa:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    1fac:	2800      	cmp	r0, #0
    1fae:	d015      	beq.n	1fdc <spi_m_sync_transfer+0x38>
    1fb0:	2900      	cmp	r1, #0
    1fb2:	d011      	beq.n	1fd8 <spi_m_sync_transfer+0x34>
    1fb4:	2001      	movs	r0, #1
    1fb6:	22b3      	movs	r2, #179	; 0xb3
    1fb8:	4909      	ldr	r1, [pc, #36]	; (1fe0 <spi_m_sync_transfer+0x3c>)
    1fba:	4b0a      	ldr	r3, [pc, #40]	; (1fe4 <spi_m_sync_transfer+0x40>)
    1fbc:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    1fbe:	682b      	ldr	r3, [r5, #0]
    1fc0:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    1fc2:	686b      	ldr	r3, [r5, #4]
    1fc4:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    1fc6:	68ab      	ldr	r3, [r5, #8]
    1fc8:	9301      	str	r3, [sp, #4]
    1fca:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1fcc:	1d20      	adds	r0, r4, #4
    1fce:	a903      	add	r1, sp, #12
    1fd0:	4b05      	ldr	r3, [pc, #20]	; (1fe8 <spi_m_sync_transfer+0x44>)
    1fd2:	4798      	blx	r3
}
    1fd4:	b007      	add	sp, #28
    1fd6:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
    1fd8:	2000      	movs	r0, #0
    1fda:	e7ec      	b.n	1fb6 <spi_m_sync_transfer+0x12>
    1fdc:	2000      	movs	r0, #0
    1fde:	e7ea      	b.n	1fb6 <spi_m_sync_transfer+0x12>
    1fe0:	00006c78 	.word	0x00006c78
    1fe4:	00002281 	.word	0x00002281
    1fe8:	0000283d 	.word	0x0000283d

00001fec <_spi_m_sync_io_write>:
{
    1fec:	b570      	push	{r4, r5, r6, lr}
    1fee:	b084      	sub	sp, #16
    1ff0:	0004      	movs	r4, r0
    1ff2:	000e      	movs	r6, r1
    1ff4:	0015      	movs	r5, r2
	ASSERT(io);
    1ff6:	1e43      	subs	r3, r0, #1
    1ff8:	4198      	sbcs	r0, r3
    1ffa:	b2c0      	uxtb	r0, r0
    1ffc:	22a3      	movs	r2, #163	; 0xa3
    1ffe:	4907      	ldr	r1, [pc, #28]	; (201c <STACK_SIZE+0x1c>)
    2000:	4b07      	ldr	r3, [pc, #28]	; (2020 <STACK_SIZE+0x20>)
    2002:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2004:	0020      	movs	r0, r4
    2006:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
    2008:	2300      	movs	r3, #0
    200a:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    200c:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    200e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    2010:	a901      	add	r1, sp, #4
    2012:	4b04      	ldr	r3, [pc, #16]	; (2024 <STACK_SIZE+0x24>)
    2014:	4798      	blx	r3
}
    2016:	b004      	add	sp, #16
    2018:	bd70      	pop	{r4, r5, r6, pc}
    201a:	46c0      	nop			; (mov r8, r8)
    201c:	00006c78 	.word	0x00006c78
    2020:	00002281 	.word	0x00002281
    2024:	00001fa5 	.word	0x00001fa5

00002028 <_spi_m_sync_io_read>:
{
    2028:	b570      	push	{r4, r5, r6, lr}
    202a:	b084      	sub	sp, #16
    202c:	0004      	movs	r4, r0
    202e:	000e      	movs	r6, r1
    2030:	0015      	movs	r5, r2
	ASSERT(io);
    2032:	1e43      	subs	r3, r0, #1
    2034:	4198      	sbcs	r0, r3
    2036:	b2c0      	uxtb	r0, r0
    2038:	2287      	movs	r2, #135	; 0x87
    203a:	4907      	ldr	r1, [pc, #28]	; (2058 <_spi_m_sync_io_read+0x30>)
    203c:	4b07      	ldr	r3, [pc, #28]	; (205c <_spi_m_sync_io_read+0x34>)
    203e:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2040:	0020      	movs	r0, r4
    2042:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
    2044:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    2046:	2300      	movs	r3, #0
    2048:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    204a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    204c:	a901      	add	r1, sp, #4
    204e:	4b04      	ldr	r3, [pc, #16]	; (2060 <_spi_m_sync_io_read+0x38>)
    2050:	4798      	blx	r3
}
    2052:	b004      	add	sp, #16
    2054:	bd70      	pop	{r4, r5, r6, pc}
    2056:	46c0      	nop			; (mov r8, r8)
    2058:	00006c78 	.word	0x00006c78
    205c:	00002281 	.word	0x00002281
    2060:	00001fa5 	.word	0x00001fa5

00002064 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    2064:	b570      	push	{r4, r5, r6, lr}
    2066:	0004      	movs	r4, r0
    2068:	000d      	movs	r5, r1
	ASSERT(spi && io);
    206a:	2800      	cmp	r0, #0
    206c:	d00c      	beq.n	2088 <spi_m_sync_get_io_descriptor+0x24>
    206e:	2900      	cmp	r1, #0
    2070:	d008      	beq.n	2084 <spi_m_sync_get_io_descriptor+0x20>
    2072:	2001      	movs	r0, #1
    2074:	22bd      	movs	r2, #189	; 0xbd
    2076:	4905      	ldr	r1, [pc, #20]	; (208c <spi_m_sync_get_io_descriptor+0x28>)
    2078:	4b05      	ldr	r3, [pc, #20]	; (2090 <spi_m_sync_get_io_descriptor+0x2c>)
    207a:	4798      	blx	r3
	*io = &spi->io;
    207c:	340c      	adds	r4, #12
    207e:	602c      	str	r4, [r5, #0]
	return 0;
}
    2080:	2000      	movs	r0, #0
    2082:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && io);
    2084:	2000      	movs	r0, #0
    2086:	e7f5      	b.n	2074 <spi_m_sync_get_io_descriptor+0x10>
    2088:	2000      	movs	r0, #0
    208a:	e7f3      	b.n	2074 <spi_m_sync_get_io_descriptor+0x10>
    208c:	00006c78 	.word	0x00006c78
    2090:	00002281 	.word	0x00002281

00002094 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    2096:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    2098:	2e00      	cmp	r6, #0
    209a:	d002      	beq.n	20a2 <timer_add_timer_task+0xe>
    209c:	0033      	movs	r3, r6
    209e:	2500      	movs	r5, #0
    20a0:	e00c      	b.n	20bc <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    20a2:	4b10      	ldr	r3, [pc, #64]	; (20e4 <timer_add_timer_task+0x50>)
    20a4:	4798      	blx	r3
		return;
    20a6:	e018      	b.n	20da <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    20a8:	689f      	ldr	r7, [r3, #8]
    20aa:	46bc      	mov	ip, r7
    20ac:	4464      	add	r4, ip
    20ae:	1aa4      	subs	r4, r4, r2
    20b0:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
    20b2:	688f      	ldr	r7, [r1, #8]
    20b4:	42bc      	cmp	r4, r7
    20b6:	d20b      	bcs.n	20d0 <timer_add_timer_task+0x3c>
			break;
		prev = it;
    20b8:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    20ba:	681b      	ldr	r3, [r3, #0]
    20bc:	2b00      	cmp	r3, #0
    20be:	d007      	beq.n	20d0 <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
    20c0:	685c      	ldr	r4, [r3, #4]
    20c2:	4294      	cmp	r4, r2
    20c4:	d8f0      	bhi.n	20a8 <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
    20c6:	1aa4      	subs	r4, r4, r2
    20c8:	689f      	ldr	r7, [r3, #8]
    20ca:	46bc      	mov	ip, r7
    20cc:	4464      	add	r4, ip
    20ce:	e7f0      	b.n	20b2 <timer_add_timer_task+0x1e>
	}

	if (it == head) {
    20d0:	42b3      	cmp	r3, r6
    20d2:	d003      	beq.n	20dc <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    20d4:	0028      	movs	r0, r5
    20d6:	4b04      	ldr	r3, [pc, #16]	; (20e8 <timer_add_timer_task+0x54>)
    20d8:	4798      	blx	r3
	}
}
    20da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    20dc:	4b01      	ldr	r3, [pc, #4]	; (20e4 <timer_add_timer_task+0x50>)
    20de:	4798      	blx	r3
    20e0:	e7fb      	b.n	20da <timer_add_timer_task+0x46>
    20e2:	46c0      	nop			; (mov r8, r8)
    20e4:	000022a1 	.word	0x000022a1
    20e8:	000022cd 	.word	0x000022cd

000020ec <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    20ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20ee:	0005      	movs	r5, r0
    20f0:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    20f2:	6903      	ldr	r3, [r0, #16]
    20f4:	1c5e      	adds	r6, r3, #1
    20f6:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    20f8:	7e03      	ldrb	r3, [r0, #24]
    20fa:	07db      	lsls	r3, r3, #31
    20fc:	d402      	bmi.n	2104 <timer_process_counted+0x18>
    20fe:	7e03      	ldrb	r3, [r0, #24]
    2100:	079b      	lsls	r3, r3, #30
    2102:	d50a      	bpl.n	211a <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2104:	7e2b      	ldrb	r3, [r5, #24]
    2106:	2202      	movs	r2, #2
    2108:	4313      	orrs	r3, r2
    210a:	b2db      	uxtb	r3, r3
    210c:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
    210e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2110:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
    2112:	68e3      	ldr	r3, [r4, #12]
    2114:	0020      	movs	r0, r4
    2116:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2118:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
    211a:	2c00      	cmp	r4, #0
    211c:	d0f7      	beq.n	210e <timer_process_counted+0x22>
    211e:	6863      	ldr	r3, [r4, #4]
    2120:	1af3      	subs	r3, r6, r3
    2122:	68a2      	ldr	r2, [r4, #8]
    2124:	4293      	cmp	r3, r2
    2126:	d3f2      	bcc.n	210e <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
    2128:	002f      	movs	r7, r5
    212a:	3714      	adds	r7, #20
    212c:	0038      	movs	r0, r7
    212e:	4b06      	ldr	r3, [pc, #24]	; (2148 <timer_process_counted+0x5c>)
    2130:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2132:	7c23      	ldrb	r3, [r4, #16]
    2134:	2b01      	cmp	r3, #1
    2136:	d1eb      	bne.n	2110 <timer_process_counted+0x24>
			tmp->time_label = time;
    2138:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    213a:	0032      	movs	r2, r6
    213c:	0021      	movs	r1, r4
    213e:	0038      	movs	r0, r7
    2140:	4b02      	ldr	r3, [pc, #8]	; (214c <timer_process_counted+0x60>)
    2142:	4798      	blx	r3
    2144:	e7e4      	b.n	2110 <timer_process_counted+0x24>
    2146:	46c0      	nop			; (mov r8, r8)
    2148:	000022d5 	.word	0x000022d5
    214c:	00002095 	.word	0x00002095

00002150 <timer_init>:
{
    2150:	b570      	push	{r4, r5, r6, lr}
    2152:	0004      	movs	r4, r0
    2154:	000d      	movs	r5, r1
	ASSERT(descr && hw);
    2156:	2800      	cmp	r0, #0
    2158:	d012      	beq.n	2180 <timer_init+0x30>
    215a:	2900      	cmp	r1, #0
    215c:	d00e      	beq.n	217c <timer_init+0x2c>
    215e:	2001      	movs	r0, #1
    2160:	223b      	movs	r2, #59	; 0x3b
    2162:	4908      	ldr	r1, [pc, #32]	; (2184 <timer_init+0x34>)
    2164:	4b08      	ldr	r3, [pc, #32]	; (2188 <timer_init+0x38>)
    2166:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    2168:	0029      	movs	r1, r5
    216a:	0020      	movs	r0, r4
    216c:	4b07      	ldr	r3, [pc, #28]	; (218c <timer_init+0x3c>)
    216e:	4798      	blx	r3
	descr->time                           = 0;
    2170:	2300      	movs	r3, #0
    2172:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2174:	4b06      	ldr	r3, [pc, #24]	; (2190 <timer_init+0x40>)
    2176:	6023      	str	r3, [r4, #0]
}
    2178:	2000      	movs	r0, #0
    217a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
    217c:	2000      	movs	r0, #0
    217e:	e7ef      	b.n	2160 <timer_init+0x10>
    2180:	2000      	movs	r0, #0
    2182:	e7ed      	b.n	2160 <timer_init+0x10>
    2184:	00006c94 	.word	0x00006c94
    2188:	00002281 	.word	0x00002281
    218c:	00002a7d 	.word	0x00002a7d
    2190:	000020ed 	.word	0x000020ed

00002194 <timer_start>:
{
    2194:	b510      	push	{r4, lr}
    2196:	0004      	movs	r4, r0
	ASSERT(descr);
    2198:	1e43      	subs	r3, r0, #1
    219a:	4198      	sbcs	r0, r3
    219c:	b2c0      	uxtb	r0, r0
    219e:	2253      	movs	r2, #83	; 0x53
    21a0:	4907      	ldr	r1, [pc, #28]	; (21c0 <timer_start+0x2c>)
    21a2:	4b08      	ldr	r3, [pc, #32]	; (21c4 <timer_start+0x30>)
    21a4:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    21a6:	0020      	movs	r0, r4
    21a8:	4b07      	ldr	r3, [pc, #28]	; (21c8 <timer_start+0x34>)
    21aa:	4798      	blx	r3
    21ac:	2800      	cmp	r0, #0
    21ae:	d104      	bne.n	21ba <timer_start+0x26>
	_timer_start(&descr->device);
    21b0:	0020      	movs	r0, r4
    21b2:	4b06      	ldr	r3, [pc, #24]	; (21cc <timer_start+0x38>)
    21b4:	4798      	blx	r3
	return ERR_NONE;
    21b6:	2000      	movs	r0, #0
}
    21b8:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    21ba:	2011      	movs	r0, #17
    21bc:	4240      	negs	r0, r0
    21be:	e7fb      	b.n	21b8 <timer_start+0x24>
    21c0:	00006c94 	.word	0x00006c94
    21c4:	00002281 	.word	0x00002281
    21c8:	00002baf 	.word	0x00002baf
    21cc:	00002ba1 	.word	0x00002ba1

000021d0 <timer_add_task>:
{
    21d0:	b570      	push	{r4, r5, r6, lr}
    21d2:	b082      	sub	sp, #8
    21d4:	0004      	movs	r4, r0
    21d6:	000d      	movs	r5, r1
	ASSERT(descr && task);
    21d8:	2800      	cmp	r0, #0
    21da:	d026      	beq.n	222a <timer_add_task+0x5a>
    21dc:	2900      	cmp	r1, #0
    21de:	d022      	beq.n	2226 <timer_add_task+0x56>
    21e0:	2001      	movs	r0, #1
    21e2:	227a      	movs	r2, #122	; 0x7a
    21e4:	491f      	ldr	r1, [pc, #124]	; (2264 <timer_add_task+0x94>)
    21e6:	4b20      	ldr	r3, [pc, #128]	; (2268 <timer_add_task+0x98>)
    21e8:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    21ea:	7e23      	ldrb	r3, [r4, #24]
    21ec:	2201      	movs	r2, #1
    21ee:	4313      	orrs	r3, r2
    21f0:	b2db      	uxtb	r3, r3
    21f2:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    21f4:	0026      	movs	r6, r4
    21f6:	3614      	adds	r6, #20
    21f8:	0029      	movs	r1, r5
    21fa:	0030      	movs	r0, r6
    21fc:	4b1b      	ldr	r3, [pc, #108]	; (226c <timer_add_task+0x9c>)
    21fe:	4798      	blx	r3
    2200:	2800      	cmp	r0, #0
    2202:	d114      	bne.n	222e <timer_add_task+0x5e>
	task->time_label = descr->time;
    2204:	6923      	ldr	r3, [r4, #16]
    2206:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2208:	6922      	ldr	r2, [r4, #16]
    220a:	0029      	movs	r1, r5
    220c:	0030      	movs	r0, r6
    220e:	4b18      	ldr	r3, [pc, #96]	; (2270 <timer_add_task+0xa0>)
    2210:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2212:	7e23      	ldrb	r3, [r4, #24]
    2214:	2201      	movs	r2, #1
    2216:	4393      	bics	r3, r2
    2218:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    221a:	7e23      	ldrb	r3, [r4, #24]
    221c:	079b      	lsls	r3, r3, #30
    221e:	d412      	bmi.n	2246 <timer_add_task+0x76>
	return ERR_NONE;
    2220:	2000      	movs	r0, #0
}
    2222:	b002      	add	sp, #8
    2224:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    2226:	2000      	movs	r0, #0
    2228:	e7db      	b.n	21e2 <timer_add_task+0x12>
    222a:	2000      	movs	r0, #0
    222c:	e7d9      	b.n	21e2 <timer_add_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    222e:	7e23      	ldrb	r3, [r4, #24]
    2230:	2201      	movs	r2, #1
    2232:	4393      	bics	r3, r2
    2234:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    2236:	327e      	adds	r2, #126	; 0x7e
    2238:	490a      	ldr	r1, [pc, #40]	; (2264 <timer_add_task+0x94>)
    223a:	2000      	movs	r0, #0
    223c:	4b0a      	ldr	r3, [pc, #40]	; (2268 <timer_add_task+0x98>)
    223e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2240:	2012      	movs	r0, #18
    2242:	4240      	negs	r0, r0
    2244:	e7ed      	b.n	2222 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    2246:	a801      	add	r0, sp, #4
    2248:	4b0a      	ldr	r3, [pc, #40]	; (2274 <timer_add_task+0xa4>)
    224a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    224c:	7e23      	ldrb	r3, [r4, #24]
    224e:	2202      	movs	r2, #2
    2250:	4393      	bics	r3, r2
    2252:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    2254:	0020      	movs	r0, r4
    2256:	4b08      	ldr	r3, [pc, #32]	; (2278 <timer_add_task+0xa8>)
    2258:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    225a:	a801      	add	r0, sp, #4
    225c:	4b07      	ldr	r3, [pc, #28]	; (227c <timer_add_task+0xac>)
    225e:	4798      	blx	r3
	return ERR_NONE;
    2260:	2000      	movs	r0, #0
    2262:	e7de      	b.n	2222 <timer_add_task+0x52>
    2264:	00006c94 	.word	0x00006c94
    2268:	00002281 	.word	0x00002281
    226c:	00002289 	.word	0x00002289
    2270:	00002095 	.word	0x00002095
    2274:	00001d41 	.word	0x00001d41
    2278:	00002bc1 	.word	0x00002bc1
    227c:	00001d4f 	.word	0x00001d4f

00002280 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    2280:	2800      	cmp	r0, #0
    2282:	d100      	bne.n	2286 <assert+0x6>
		__asm("BKPT #0");
    2284:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    2286:	4770      	bx	lr

00002288 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    2288:	6803      	ldr	r3, [r0, #0]
    228a:	2b00      	cmp	r3, #0
    228c:	d003      	beq.n	2296 <is_list_element+0xe>
		if (it == element) {
    228e:	428b      	cmp	r3, r1
    2290:	d003      	beq.n	229a <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
    2292:	681b      	ldr	r3, [r3, #0]
    2294:	e7f9      	b.n	228a <is_list_element+0x2>
			return true;
		}
	}

	return false;
    2296:	2000      	movs	r0, #0
}
    2298:	4770      	bx	lr
			return true;
    229a:	2001      	movs	r0, #1
    229c:	e7fc      	b.n	2298 <is_list_element+0x10>
	...

000022a0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    22a0:	b570      	push	{r4, r5, r6, lr}
    22a2:	0004      	movs	r4, r0
    22a4:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    22a6:	4b06      	ldr	r3, [pc, #24]	; (22c0 <list_insert_as_head+0x20>)
    22a8:	4798      	blx	r3
    22aa:	2301      	movs	r3, #1
    22ac:	4058      	eors	r0, r3
    22ae:	b2c0      	uxtb	r0, r0
    22b0:	2239      	movs	r2, #57	; 0x39
    22b2:	4904      	ldr	r1, [pc, #16]	; (22c4 <list_insert_as_head+0x24>)
    22b4:	4b04      	ldr	r3, [pc, #16]	; (22c8 <list_insert_as_head+0x28>)
    22b6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    22b8:	6823      	ldr	r3, [r4, #0]
    22ba:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    22bc:	6025      	str	r5, [r4, #0]
}
    22be:	bd70      	pop	{r4, r5, r6, pc}
    22c0:	00002289 	.word	0x00002289
    22c4:	00006cac 	.word	0x00006cac
    22c8:	00002281 	.word	0x00002281

000022cc <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    22cc:	6803      	ldr	r3, [r0, #0]
    22ce:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    22d0:	6001      	str	r1, [r0, #0]
}
    22d2:	4770      	bx	lr

000022d4 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    22d4:	6803      	ldr	r3, [r0, #0]
    22d6:	2b00      	cmp	r3, #0
    22d8:	d003      	beq.n	22e2 <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    22da:	681a      	ldr	r2, [r3, #0]
    22dc:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    22de:	0018      	movs	r0, r3
	}

	return NULL;
}
    22e0:	4770      	bx	lr
	return NULL;
    22e2:	2000      	movs	r0, #0
    22e4:	e7fc      	b.n	22e0 <list_remove_head+0xc>
	...

000022e8 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    22e8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    22ea:	4a06      	ldr	r2, [pc, #24]	; (2304 <_sbrk+0x1c>)
    22ec:	6812      	ldr	r2, [r2, #0]
    22ee:	2a00      	cmp	r2, #0
    22f0:	d004      	beq.n	22fc <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    22f2:	4a04      	ldr	r2, [pc, #16]	; (2304 <_sbrk+0x1c>)
    22f4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    22f6:	18c3      	adds	r3, r0, r3
    22f8:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    22fa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    22fc:	4902      	ldr	r1, [pc, #8]	; (2308 <_sbrk+0x20>)
    22fe:	4a01      	ldr	r2, [pc, #4]	; (2304 <_sbrk+0x1c>)
    2300:	6011      	str	r1, [r2, #0]
    2302:	e7f6      	b.n	22f2 <_sbrk+0xa>
    2304:	20000848 	.word	0x20000848
    2308:	20005f60 	.word	0x20005f60

0000230c <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
    230c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    230e:	2b00      	cmp	r3, #0
    2310:	db07      	blt.n	2322 <_irq_set+0x16>
  {
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2312:	231f      	movs	r3, #31
    2314:	4018      	ands	r0, r3
    2316:	3b1e      	subs	r3, #30
    2318:	4083      	lsls	r3, r0
    231a:	2280      	movs	r2, #128	; 0x80
    231c:	0052      	lsls	r2, r2, #1
    231e:	4901      	ldr	r1, [pc, #4]	; (2324 <_irq_set+0x18>)
    2320:	508b      	str	r3, [r1, r2]
}
    2322:	4770      	bx	lr
    2324:	e000e100 	.word	0xe000e100

00002328 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    2328:	b510      	push	{r4, lr}
    232a:	0003      	movs	r3, r0
		return (us * (freq / 10000) - 1) / 100 + 1;
    232c:	20c8      	movs	r0, #200	; 0xc8
    232e:	0080      	lsls	r0, r0, #2
    2330:	4358      	muls	r0, r3
    2332:	3801      	subs	r0, #1
    2334:	2164      	movs	r1, #100	; 0x64
    2336:	4b02      	ldr	r3, [pc, #8]	; (2340 <_get_cycles_for_us+0x18>)
    2338:	4798      	blx	r3
    233a:	3001      	adds	r0, #1
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    233c:	bd10      	pop	{r4, pc}
    233e:	46c0      	nop			; (mov r8, r8)
    2340:	000057f5 	.word	0x000057f5

00002344 <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
    2344:	23c8      	movs	r3, #200	; 0xc8
    2346:	009b      	lsls	r3, r3, #2
    2348:	4358      	muls	r0, r3
    234a:	0083      	lsls	r3, r0, #2
    234c:	181b      	adds	r3, r3, r0
    234e:	0058      	lsls	r0, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2350:	4770      	bx	lr
	...

00002354 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2354:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    2356:	4b06      	ldr	r3, [pc, #24]	; (2370 <_init_chip+0x1c>)
    2358:	685a      	ldr	r2, [r3, #4]
    235a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    235c:	4b05      	ldr	r3, [pc, #20]	; (2374 <_init_chip+0x20>)
    235e:	4798      	blx	r3
	_sysctrl_init_sources();
    2360:	4b05      	ldr	r3, [pc, #20]	; (2378 <_init_chip+0x24>)
    2362:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    2364:	4b05      	ldr	r3, [pc, #20]	; (237c <_init_chip+0x28>)
    2366:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2368:	20ff      	movs	r0, #255	; 0xff
    236a:	4b05      	ldr	r3, [pc, #20]	; (2380 <_init_chip+0x2c>)
    236c:	4798      	blx	r3
}
    236e:	bd10      	pop	{r4, pc}
    2370:	41004000 	.word	0x41004000
    2374:	000025a1 	.word	0x000025a1
    2378:	00002925 	.word	0x00002925
    237c:	00002981 	.word	0x00002981
    2380:	000024d1 	.word	0x000024d1

00002384 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    2384:	4b20      	ldr	r3, [pc, #128]	; (2408 <_ext_irq_init+0x84>)
    2386:	785b      	ldrb	r3, [r3, #1]
    2388:	09db      	lsrs	r3, r3, #7
    238a:	d1fb      	bne.n	2384 <_ext_irq_init>
    238c:	4b1e      	ldr	r3, [pc, #120]	; (2408 <_ext_irq_init+0x84>)
    238e:	785b      	ldrb	r3, [r3, #1]
    2390:	09db      	lsrs	r3, r3, #7
    2392:	d1fb      	bne.n	238c <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    2394:	4b1c      	ldr	r3, [pc, #112]	; (2408 <_ext_irq_init+0x84>)
    2396:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    2398:	079b      	lsls	r3, r3, #30
    239a:	d50a      	bpl.n	23b2 <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    239c:	2200      	movs	r2, #0
    239e:	4b1a      	ldr	r3, [pc, #104]	; (2408 <_ext_irq_init+0x84>)
    23a0:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    23a2:	4b19      	ldr	r3, [pc, #100]	; (2408 <_ext_irq_init+0x84>)
    23a4:	785b      	ldrb	r3, [r3, #1]
    23a6:	09db      	lsrs	r3, r3, #7
    23a8:	d1fb      	bne.n	23a2 <_ext_irq_init+0x1e>
    23aa:	4b17      	ldr	r3, [pc, #92]	; (2408 <_ext_irq_init+0x84>)
    23ac:	785b      	ldrb	r3, [r3, #1]
    23ae:	09db      	lsrs	r3, r3, #7
    23b0:	d1fb      	bne.n	23aa <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
    23b2:	2201      	movs	r2, #1
    23b4:	4b14      	ldr	r3, [pc, #80]	; (2408 <_ext_irq_init+0x84>)
    23b6:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    23b8:	4b13      	ldr	r3, [pc, #76]	; (2408 <_ext_irq_init+0x84>)
    23ba:	785b      	ldrb	r3, [r3, #1]
    23bc:	09db      	lsrs	r3, r3, #7
    23be:	d1fb      	bne.n	23b8 <_ext_irq_init+0x34>
    23c0:	4b11      	ldr	r3, [pc, #68]	; (2408 <_ext_irq_init+0x84>)
    23c2:	785b      	ldrb	r3, [r3, #1]
    23c4:	09db      	lsrs	r3, r3, #7
    23c6:	d1fb      	bne.n	23c0 <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    23c8:	4b0f      	ldr	r3, [pc, #60]	; (2408 <_ext_irq_init+0x84>)
    23ca:	2200      	movs	r2, #0
    23cc:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    23ce:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    23d0:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    23d2:	619a      	str	r2, [r3, #24]
    23d4:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    23d6:	781a      	ldrb	r2, [r3, #0]
    23d8:	2102      	movs	r1, #2
    23da:	430a      	orrs	r2, r1
    23dc:	b2d2      	uxtb	r2, r2
    23de:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    23e0:	4b09      	ldr	r3, [pc, #36]	; (2408 <_ext_irq_init+0x84>)
    23e2:	785b      	ldrb	r3, [r3, #1]
    23e4:	09db      	lsrs	r3, r3, #7
    23e6:	d1fb      	bne.n	23e0 <_ext_irq_init+0x5c>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    23e8:	4b08      	ldr	r3, [pc, #32]	; (240c <_ext_irq_init+0x88>)
    23ea:	2210      	movs	r2, #16
    23ec:	2180      	movs	r1, #128	; 0x80
    23ee:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    23f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    23f4:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    23f8:	3101      	adds	r1, #1
    23fa:	31ff      	adds	r1, #255	; 0xff
    23fc:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    23fe:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    2400:	4b03      	ldr	r3, [pc, #12]	; (2410 <_ext_irq_init+0x8c>)
    2402:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    2404:	2000      	movs	r0, #0
    2406:	4770      	bx	lr
    2408:	40001800 	.word	0x40001800
    240c:	e000e100 	.word	0xe000e100
    2410:	2000084c 	.word	0x2000084c

00002414 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    2414:	b5f0      	push	{r4, r5, r6, r7, lr}
    2416:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
    2418:	4b27      	ldr	r3, [pc, #156]	; (24b8 <EIC_Handler+0xa4>)
    241a:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    241c:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    241e:	400a      	ands	r2, r1
    2420:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    2422:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    2424:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    2426:	4b25      	ldr	r3, [pc, #148]	; (24bc <EIC_Handler+0xa8>)
    2428:	6818      	ldr	r0, [r3, #0]
    242a:	1e43      	subs	r3, r0, #1
    242c:	4198      	sbcs	r0, r3
    242e:	b2c0      	uxtb	r0, r0
    2430:	22d2      	movs	r2, #210	; 0xd2
    2432:	4923      	ldr	r1, [pc, #140]	; (24c0 <EIC_Handler+0xac>)
    2434:	4b23      	ldr	r3, [pc, #140]	; (24c4 <EIC_Handler+0xb0>)
    2436:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    2438:	2501      	movs	r5, #1
    243a:	426d      	negs	r5, r5

	while (flags) {
    243c:	e031      	b.n	24a2 <EIC_Handler+0x8e>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    243e:	00db      	lsls	r3, r3, #3
    2440:	4a21      	ldr	r2, [pc, #132]	; (24c8 <EIC_Handler+0xb4>)
    2442:	18d3      	adds	r3, r2, r3
    2444:	685d      	ldr	r5, [r3, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    2446:	1c6b      	adds	r3, r5, #1
    2448:	d003      	beq.n	2452 <EIC_Handler+0x3e>
				callback(pin);
    244a:	4b1c      	ldr	r3, [pc, #112]	; (24bc <EIC_Handler+0xa8>)
    244c:	681b      	ldr	r3, [r3, #0]
    244e:	0028      	movs	r0, r5
    2450:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    2452:	2201      	movs	r2, #1
    2454:	40a2      	lsls	r2, r4
    2456:	9b01      	ldr	r3, [sp, #4]
    2458:	4393      	bics	r3, r2
    245a:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    245c:	9801      	ldr	r0, [sp, #4]
    245e:	4b1b      	ldr	r3, [pc, #108]	; (24cc <EIC_Handler+0xb8>)
    2460:	4798      	blx	r3
    2462:	3801      	subs	r0, #1
    2464:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    2466:	1c63      	adds	r3, r4, #1
    2468:	d014      	beq.n	2494 <EIC_Handler+0x80>
    246a:	2602      	movs	r6, #2
    246c:	2000      	movs	r0, #0
    246e:	e001      	b.n	2474 <EIC_Handler+0x60>
					upper = middle - 1;
    2470:	3901      	subs	r1, #1
    2472:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
    2474:	42b0      	cmp	r0, r6
    2476:	d8e6      	bhi.n	2446 <EIC_Handler+0x32>
				middle = (upper + lower) >> 1;
    2478:	1833      	adds	r3, r6, r0
    247a:	105b      	asrs	r3, r3, #1
    247c:	b2d9      	uxtb	r1, r3
    247e:	22ff      	movs	r2, #255	; 0xff
    2480:	4013      	ands	r3, r2
				if (_map[middle].extint == pos) {
    2482:	00df      	lsls	r7, r3, #3
    2484:	4a10      	ldr	r2, [pc, #64]	; (24c8 <EIC_Handler+0xb4>)
    2486:	5cba      	ldrb	r2, [r7, r2]
    2488:	42a2      	cmp	r2, r4
    248a:	d0d8      	beq.n	243e <EIC_Handler+0x2a>
				if (_map[middle].extint < pos) {
    248c:	daf0      	bge.n	2470 <EIC_Handler+0x5c>
					lower = middle + 1;
    248e:	3101      	adds	r1, #1
    2490:	b2c8      	uxtb	r0, r1
    2492:	e7ef      	b.n	2474 <EIC_Handler+0x60>
	return ((Eic *)hw)->INTFLAG.reg;
    2494:	4b08      	ldr	r3, [pc, #32]	; (24b8 <EIC_Handler+0xa4>)
    2496:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    2498:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    249a:	400a      	ands	r2, r1
    249c:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    249e:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    24a0:	611a      	str	r2, [r3, #16]
	while (flags) {
    24a2:	9b01      	ldr	r3, [sp, #4]
    24a4:	2b00      	cmp	r3, #0
    24a6:	d005      	beq.n	24b4 <EIC_Handler+0xa0>
		pos = ffs(flags) - 1;
    24a8:	9801      	ldr	r0, [sp, #4]
    24aa:	4b08      	ldr	r3, [pc, #32]	; (24cc <EIC_Handler+0xb8>)
    24ac:	4798      	blx	r3
    24ae:	3801      	subs	r0, #1
    24b0:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    24b2:	e7d8      	b.n	2466 <EIC_Handler+0x52>
	}
}
    24b4:	b003      	add	sp, #12
    24b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24b8:	40001800 	.word	0x40001800
    24bc:	2000084c 	.word	0x2000084c
    24c0:	00006cdc 	.word	0x00006cdc
    24c4:	00002281 	.word	0x00002281
    24c8:	00006ccc 	.word	0x00006ccc
    24cc:	00005961 	.word	0x00005961

000024d0 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    24d0:	07c3      	lsls	r3, r0, #31
    24d2:	d50a      	bpl.n	24ea <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    24d4:	4b0b      	ldr	r3, [pc, #44]	; (2504 <_gclk_init_generators_by_fref+0x34>)
    24d6:	2280      	movs	r2, #128	; 0x80
    24d8:	0052      	lsls	r2, r2, #1
    24da:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    24dc:	2283      	movs	r2, #131	; 0x83
    24de:	0252      	lsls	r2, r2, #9
    24e0:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    24e2:	4b08      	ldr	r3, [pc, #32]	; (2504 <_gclk_init_generators_by_fref+0x34>)
    24e4:	785b      	ldrb	r3, [r3, #1]
    24e6:	09db      	lsrs	r3, r3, #7
    24e8:	d1fb      	bne.n	24e2 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    24ea:	0783      	lsls	r3, r0, #30
    24ec:	d508      	bpl.n	2500 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
    24ee:	4b05      	ldr	r3, [pc, #20]	; (2504 <_gclk_init_generators_by_fref+0x34>)
    24f0:	4a05      	ldr	r2, [pc, #20]	; (2508 <_gclk_init_generators_by_fref+0x38>)
    24f2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    24f4:	4a05      	ldr	r2, [pc, #20]	; (250c <_gclk_init_generators_by_fref+0x3c>)
    24f6:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    24f8:	4b02      	ldr	r3, [pc, #8]	; (2504 <_gclk_init_generators_by_fref+0x34>)
    24fa:	785b      	ldrb	r3, [r3, #1]
    24fc:	09db      	lsrs	r3, r3, #7
    24fe:	d1fb      	bne.n	24f8 <_gclk_init_generators_by_fref+0x28>
		        | (CONF_GCLK_GEN_7_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_7_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_7_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_7_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SRC | GCLK_GENCTRL_ID(7));
	}
#endif
}
    2500:	4770      	bx	lr
    2502:	46c0      	nop			; (mov r8, r8)
    2504:	40000c00 	.word	0x40000c00
    2508:	00002001 	.word	0x00002001
    250c:	00010401 	.word	0x00010401

00002510 <_flash_init>:

/**
 * \brief Initialize NVM
 */
int32_t _flash_init(struct _flash_device *const device, void *const hw)
{
    2510:	b570      	push	{r4, r5, r6, lr}
    2512:	0005      	movs	r5, r0
    2514:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    2516:	2800      	cmp	r0, #0
    2518:	d01c      	beq.n	2554 <_flash_init+0x44>
    251a:	4b10      	ldr	r3, [pc, #64]	; (255c <_flash_init+0x4c>)
    251c:	4299      	cmp	r1, r3
    251e:	d01b      	beq.n	2558 <_flash_init+0x48>
    2520:	2000      	movs	r0, #0
    2522:	2246      	movs	r2, #70	; 0x46
    2524:	490e      	ldr	r1, [pc, #56]	; (2560 <_flash_init+0x50>)
    2526:	4b0f      	ldr	r3, [pc, #60]	; (2564 <_flash_init+0x54>)
    2528:	4798      	blx	r3
	uint32_t ctrlb;

	device->hw = hw;
    252a:	612c      	str	r4, [r5, #16]
}

static inline hri_nvmctrl_ctrlb_reg_t hri_nvmctrl_get_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
    252c:	6862      	ldr	r2, [r4, #4]
	tmp &= mask;
    252e:	239e      	movs	r3, #158	; 0x9e
    2530:	4013      	ands	r3, r2
}

static inline void hri_nvmctrl_write_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg = data;
    2532:	6063      	str	r3, [r4, #4]
	ctrlb      = _nvm.ctrlb & ~(NVMCTRL_CTRLB_RWS_Msk | NVMCTRL_CTRLB_MANW);
	ctrlb |= hri_nvmctrl_get_CTRLB_reg(device->hw, NVMCTRL_CTRLB_RWS_Msk | NVMCTRL_CTRLB_MANW);
	hri_nvmctrl_write_CTRLB_reg(device->hw, ctrlb);

	_nvm_dev = device;
    2534:	4b0c      	ldr	r3, [pc, #48]	; (2568 <_flash_init+0x58>)
    2536:	601d      	str	r5, [r3, #0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2538:	4b0c      	ldr	r3, [pc, #48]	; (256c <_flash_init+0x5c>)
    253a:	2220      	movs	r2, #32
    253c:	2180      	movs	r1, #128	; 0x80
    253e:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    2540:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2544:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2548:	3101      	adds	r1, #1
    254a:	31ff      	adds	r1, #255	; 0xff
    254c:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    254e:	601a      	str	r2, [r3, #0]
	NVIC_DisableIRQ(NVMCTRL_IRQn);
	NVIC_ClearPendingIRQ(NVMCTRL_IRQn);
	NVIC_EnableIRQ(NVMCTRL_IRQn);
	return ERR_NONE;
}
    2550:	2000      	movs	r0, #0
    2552:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(device && (hw == NVMCTRL));
    2554:	2000      	movs	r0, #0
    2556:	e7e4      	b.n	2522 <_flash_init+0x12>
    2558:	2001      	movs	r0, #1
    255a:	e7e2      	b.n	2522 <_flash_init+0x12>
    255c:	41004000 	.word	0x41004000
    2560:	00006cf4 	.word	0x00006cf4
    2564:	00002281 	.word	0x00002281
    2568:	20000850 	.word	0x20000850
    256c:	e000e100 	.word	0xe000e100

00002570 <NVMCTRL_Handler>:

/**
 * \internal NVM interrupt handler
 */
void NVMCTRL_Handler(void)
{
    2570:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
    2572:	4b0a      	ldr	r3, [pc, #40]	; (259c <NVMCTRL_Handler+0x2c>)
    2574:	6818      	ldr	r0, [r3, #0]
    2576:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    2578:	7d1a      	ldrb	r2, [r3, #20]

	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    257a:	07d2      	lsls	r2, r2, #31
    257c:	d504      	bpl.n	2588 <NVMCTRL_Handler+0x18>
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
    257e:	6803      	ldr	r3, [r0, #0]
    2580:	2b00      	cmp	r3, #0
    2582:	d000      	beq.n	2586 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
    2584:	4798      	blx	r3
		hri_nvmctrl_clear_interrupt_ERROR_bit(hw);
		if (NULL != _nvm_dev->flash_cb.error_cb) {
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
		}
	}
}
    2586:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
    2588:	7d1a      	ldrb	r2, [r3, #20]
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
    258a:	0792      	lsls	r2, r2, #30
    258c:	d5fb      	bpl.n	2586 <NVMCTRL_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
    258e:	2202      	movs	r2, #2
    2590:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
    2592:	6843      	ldr	r3, [r0, #4]
    2594:	2b00      	cmp	r3, #0
    2596:	d0f6      	beq.n	2586 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
    2598:	4798      	blx	r3
}
    259a:	e7f4      	b.n	2586 <NVMCTRL_Handler+0x16>
    259c:	20000850 	.word	0x20000850

000025a0 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    25a0:	4b06      	ldr	r3, [pc, #24]	; (25bc <_pm_init+0x1c>)
    25a2:	7a1a      	ldrb	r2, [r3, #8]
    25a4:	b2d2      	uxtb	r2, r2
    25a6:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    25a8:	7a5a      	ldrb	r2, [r3, #9]
    25aa:	b2d2      	uxtb	r2, r2
    25ac:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    25ae:	7a9a      	ldrb	r2, [r3, #10]
    25b0:	b2d2      	uxtb	r2, r2
    25b2:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    25b4:	7ada      	ldrb	r2, [r3, #11]
    25b6:	b2d2      	uxtb	r2, r2
    25b8:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    25ba:	4770      	bx	lr
    25bc:	40000400 	.word	0x40000400

000025c0 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    25c0:	4b02      	ldr	r3, [pc, #8]	; (25cc <_sercom_get_hardware_index+0xc>)
    25c2:	469c      	mov	ip, r3
    25c4:	4460      	add	r0, ip
    25c6:	0a80      	lsrs	r0, r0, #10
    25c8:	b2c0      	uxtb	r0, r0
}
    25ca:	4770      	bx	lr
    25cc:	bdfff800 	.word	0xbdfff800

000025d0 <_spi_sync_enable>:
		;
}

static inline bool hri_sercomspi_is_syncing(const void *const hw)
{
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
    25d0:	8a03      	ldrh	r3, [r0, #16]
    25d2:	0bdb      	lsrs	r3, r3, #15
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw)) {
    25d4:	d108      	bne.n	25e8 <_spi_sync_enable+0x18>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    25d6:	6803      	ldr	r3, [r0, #0]
    25d8:	2202      	movs	r2, #2
    25da:	4313      	orrs	r3, r2
    25dc:	6003      	str	r3, [r0, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    25de:	8a03      	ldrh	r3, [r0, #16]
    25e0:	0bdb      	lsrs	r3, r3, #15
    25e2:	d1fc      	bne.n	25de <_spi_sync_enable+0xe>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    25e4:	2000      	movs	r0, #0
}
    25e6:	4770      	bx	lr
		return ERR_BUSY;
    25e8:	2004      	movs	r0, #4
    25ea:	4240      	negs	r0, r0
    25ec:	e7fb      	b.n	25e6 <_spi_sync_enable+0x16>

000025ee <_spi_sync_disable>:
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
    25ee:	8a03      	ldrh	r3, [r0, #16]
    25f0:	0bdb      	lsrs	r3, r3, #15
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw)) {
    25f2:	d108      	bne.n	2606 <_spi_sync_disable+0x18>
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    25f4:	6803      	ldr	r3, [r0, #0]
    25f6:	2202      	movs	r2, #2
    25f8:	4393      	bics	r3, r2
    25fa:	6003      	str	r3, [r0, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    25fc:	8a03      	ldrh	r3, [r0, #16]
    25fe:	0bdb      	lsrs	r3, r3, #15
    2600:	d1fc      	bne.n	25fc <_spi_sync_disable+0xe>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    2602:	2000      	movs	r0, #0
}
    2604:	4770      	bx	lr
		return ERR_BUSY;
    2606:	2004      	movs	r0, #4
    2608:	4240      	negs	r0, r0
    260a:	e7fb      	b.n	2604 <_spi_sync_disable+0x16>

0000260c <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    260c:	b570      	push	{r4, r5, r6, lr}
    260e:	0006      	movs	r6, r0
    2610:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    2612:	0008      	movs	r0, r1
    2614:	4b63      	ldr	r3, [pc, #396]	; (27a4 <_spi_m_sync_init+0x198>)
    2616:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    2618:	2300      	movs	r3, #0
    261a:	2b01      	cmp	r3, #1
    261c:	d80d      	bhi.n	263a <_spi_m_sync_init+0x2e>
		if (sercomspi_regs[i].n == n) {
    261e:	0119      	lsls	r1, r3, #4
    2620:	4a61      	ldr	r2, [pc, #388]	; (27a8 <_spi_m_sync_init+0x19c>)
    2622:	3238      	adds	r2, #56	; 0x38
    2624:	1852      	adds	r2, r2, r1
    2626:	7bd2      	ldrb	r2, [r2, #15]
    2628:	4290      	cmp	r0, r2
    262a:	d002      	beq.n	2632 <_spi_m_sync_init+0x26>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    262c:	3301      	adds	r3, #1
    262e:	b2db      	uxtb	r3, r3
    2630:	e7f3      	b.n	261a <_spi_m_sync_init+0xe>
			return &sercomspi_regs[i];
    2632:	4b5d      	ldr	r3, [pc, #372]	; (27a8 <_spi_m_sync_init+0x19c>)
    2634:	3338      	adds	r3, #56	; 0x38
    2636:	185d      	adds	r5, r3, r1
    2638:	e000      	b.n	263c <_spi_m_sync_init+0x30>
	return NULL;
    263a:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    263c:	2e00      	cmp	r6, #0
    263e:	d100      	bne.n	2642 <_spi_m_sync_init+0x36>
    2640:	e06a      	b.n	2718 <_spi_m_sync_init+0x10c>
    2642:	2c00      	cmp	r4, #0
    2644:	d100      	bne.n	2648 <_spi_m_sync_init+0x3c>
    2646:	e065      	b.n	2714 <_spi_m_sync_init+0x108>
    2648:	2001      	movs	r0, #1
    264a:	4a58      	ldr	r2, [pc, #352]	; (27ac <_spi_m_sync_init+0x1a0>)
    264c:	4958      	ldr	r1, [pc, #352]	; (27b0 <_spi_m_sync_init+0x1a4>)
    264e:	4b59      	ldr	r3, [pc, #356]	; (27b4 <_spi_m_sync_init+0x1a8>)
    2650:	4798      	blx	r3

	if (regs == NULL) {
    2652:	2d00      	cmp	r5, #0
    2654:	d100      	bne.n	2658 <_spi_m_sync_init+0x4c>
    2656:	e0a2      	b.n	279e <_spi_m_sync_init+0x192>
    2658:	8a23      	ldrh	r3, [r4, #16]
    265a:	0bdb      	lsrs	r3, r3, #15
    265c:	d1fc      	bne.n	2658 <_spi_m_sync_init+0x4c>
    265e:	8a23      	ldrh	r3, [r4, #16]
    2660:	0bdb      	lsrs	r3, r3, #15
    2662:	d1fc      	bne.n	265e <_spi_m_sync_init+0x52>
static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw);
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2664:	6823      	ldr	r3, [r4, #0]
		return ERR_INVALID_ARG;
	}

	hri_sercomspi_wait_for_sync(hw);
	if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    2666:	079b      	lsls	r3, r3, #30
    2668:	d507      	bpl.n	267a <_spi_m_sync_init+0x6e>
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    266a:	2300      	movs	r3, #0
    266c:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    266e:	8a23      	ldrh	r3, [r4, #16]
    2670:	0bdb      	lsrs	r3, r3, #15
    2672:	d1fc      	bne.n	266e <_spi_m_sync_init+0x62>
    2674:	8a23      	ldrh	r3, [r4, #16]
    2676:	0bdb      	lsrs	r3, r3, #15
    2678:	d1fc      	bne.n	2674 <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    267a:	2301      	movs	r3, #1
    267c:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    267e:	8a23      	ldrh	r3, [r4, #16]
    2680:	0bdb      	lsrs	r3, r3, #15
    2682:	d1fc      	bne.n	267e <_spi_m_sync_init+0x72>
    2684:	8a23      	ldrh	r3, [r4, #16]
    2686:	0bdb      	lsrs	r3, r3, #15
    2688:	d1fc      	bne.n	2684 <_spi_m_sync_init+0x78>
		hri_sercomspi_wait_for_sync(hw);
	}
	hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST);
	hri_sercomspi_wait_for_sync(hw);

	dev->prvt = hw;
    268a:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    268c:	782b      	ldrb	r3, [r5, #0]
    268e:	786a      	ldrb	r2, [r5, #1]
    2690:	0212      	lsls	r2, r2, #8
    2692:	431a      	orrs	r2, r3
    2694:	78ab      	ldrb	r3, [r5, #2]
    2696:	041b      	lsls	r3, r3, #16
    2698:	431a      	orrs	r2, r3
    269a:	78eb      	ldrb	r3, [r5, #3]
    269c:	061b      	lsls	r3, r3, #24
    269e:	4313      	orrs	r3, r2
    26a0:	221c      	movs	r2, #28
    26a2:	4013      	ands	r3, r2
    26a4:	2b08      	cmp	r3, #8
    26a6:	d039      	beq.n	271c <_spi_m_sync_init+0x110>
	ASSERT(hw && regs);
    26a8:	2c00      	cmp	r4, #0
    26aa:	d100      	bne.n	26ae <_spi_m_sync_init+0xa2>
    26ac:	e073      	b.n	2796 <_spi_m_sync_init+0x18a>
    26ae:	2d00      	cmp	r5, #0
    26b0:	d100      	bne.n	26b4 <_spi_m_sync_init+0xa8>
    26b2:	e06e      	b.n	2792 <_spi_m_sync_init+0x186>
    26b4:	2001      	movs	r0, #1
    26b6:	4a40      	ldr	r2, [pc, #256]	; (27b8 <_spi_m_sync_init+0x1ac>)
    26b8:	493d      	ldr	r1, [pc, #244]	; (27b0 <_spi_m_sync_init+0x1a4>)
    26ba:	4b3e      	ldr	r3, [pc, #248]	; (27b4 <_spi_m_sync_init+0x1a8>)
    26bc:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    26be:	782b      	ldrb	r3, [r5, #0]
    26c0:	786a      	ldrb	r2, [r5, #1]
    26c2:	0212      	lsls	r2, r2, #8
    26c4:	431a      	orrs	r2, r3
    26c6:	78ab      	ldrb	r3, [r5, #2]
    26c8:	041b      	lsls	r3, r3, #16
    26ca:	431a      	orrs	r2, r3
    26cc:	78eb      	ldrb	r3, [r5, #3]
    26ce:	061b      	lsls	r3, r3, #24
    26d0:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    26d2:	4a3a      	ldr	r2, [pc, #232]	; (27bc <_spi_m_sync_init+0x1b0>)
    26d4:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    26d6:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    26d8:	8a23      	ldrh	r3, [r4, #16]
    26da:	0bdb      	lsrs	r3, r3, #15
    26dc:	d1fc      	bne.n	26d8 <_spi_m_sync_init+0xcc>
	    hw, (regs->ctrlb & ~(SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_PLOADEN)) | (SERCOM_SPI_CTRLB_RXEN));
    26de:	792b      	ldrb	r3, [r5, #4]
    26e0:	796a      	ldrb	r2, [r5, #5]
    26e2:	0212      	lsls	r2, r2, #8
    26e4:	431a      	orrs	r2, r3
    26e6:	79ab      	ldrb	r3, [r5, #6]
    26e8:	041b      	lsls	r3, r3, #16
    26ea:	431a      	orrs	r2, r3
    26ec:	79eb      	ldrb	r3, [r5, #7]
    26ee:	061b      	lsls	r3, r3, #24
    26f0:	4313      	orrs	r3, r2
    26f2:	4a33      	ldr	r2, [pc, #204]	; (27c0 <_spi_m_sync_init+0x1b4>)
    26f4:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    26f6:	2280      	movs	r2, #128	; 0x80
    26f8:	0292      	lsls	r2, r2, #10
    26fa:	4313      	orrs	r3, r2
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    26fc:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    26fe:	7b2b      	ldrb	r3, [r5, #12]
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    2700:	72a3      	strb	r3, [r4, #10]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    2702:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2704:	7223      	strb	r3, [r4, #8]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    2706:	792b      	ldrb	r3, [r5, #4]
    2708:	075b      	lsls	r3, r3, #29
    270a:	d146      	bne.n	279a <_spi_m_sync_init+0x18e>
    270c:	2301      	movs	r3, #1
    270e:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
    2710:	2000      	movs	r0, #0
}
    2712:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    2714:	2000      	movs	r0, #0
    2716:	e798      	b.n	264a <_spi_m_sync_init+0x3e>
    2718:	2000      	movs	r0, #0
    271a:	e796      	b.n	264a <_spi_m_sync_init+0x3e>
	ASSERT(hw && regs);
    271c:	2c00      	cmp	r4, #0
    271e:	d036      	beq.n	278e <_spi_m_sync_init+0x182>
    2720:	2d00      	cmp	r5, #0
    2722:	d032      	beq.n	278a <_spi_m_sync_init+0x17e>
    2724:	2001      	movs	r0, #1
    2726:	4a27      	ldr	r2, [pc, #156]	; (27c4 <_spi_m_sync_init+0x1b8>)
    2728:	4921      	ldr	r1, [pc, #132]	; (27b0 <_spi_m_sync_init+0x1a4>)
    272a:	4b22      	ldr	r3, [pc, #136]	; (27b4 <_spi_m_sync_init+0x1a8>)
    272c:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    272e:	782b      	ldrb	r3, [r5, #0]
    2730:	786a      	ldrb	r2, [r5, #1]
    2732:	0212      	lsls	r2, r2, #8
    2734:	431a      	orrs	r2, r3
    2736:	78ab      	ldrb	r3, [r5, #2]
    2738:	041b      	lsls	r3, r3, #16
    273a:	431a      	orrs	r2, r3
    273c:	78eb      	ldrb	r3, [r5, #3]
    273e:	061b      	lsls	r3, r3, #24
    2740:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    2742:	4a1e      	ldr	r2, [pc, #120]	; (27bc <_spi_m_sync_init+0x1b0>)
    2744:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    2746:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    2748:	8a23      	ldrh	r3, [r4, #16]
    274a:	0bdb      	lsrs	r3, r3, #15
    274c:	d1fc      	bne.n	2748 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_CTRLB_reg(hw, regs->ctrlb | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_PLOADEN));
    274e:	792b      	ldrb	r3, [r5, #4]
    2750:	796a      	ldrb	r2, [r5, #5]
    2752:	0212      	lsls	r2, r2, #8
    2754:	431a      	orrs	r2, r3
    2756:	79ab      	ldrb	r3, [r5, #6]
    2758:	041b      	lsls	r3, r3, #16
    275a:	431a      	orrs	r2, r3
    275c:	79eb      	ldrb	r3, [r5, #7]
    275e:	061b      	lsls	r3, r3, #24
    2760:	4313      	orrs	r3, r2
    2762:	4a19      	ldr	r2, [pc, #100]	; (27c8 <_spi_m_sync_init+0x1bc>)
    2764:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    2766:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    2768:	7a2b      	ldrb	r3, [r5, #8]
    276a:	7a6a      	ldrb	r2, [r5, #9]
    276c:	0212      	lsls	r2, r2, #8
    276e:	431a      	orrs	r2, r3
    2770:	7aab      	ldrb	r3, [r5, #10]
    2772:	041b      	lsls	r3, r3, #16
    2774:	431a      	orrs	r2, r3
    2776:	7aeb      	ldrb	r3, [r5, #11]
    2778:	061b      	lsls	r3, r3, #24
    277a:	4313      	orrs	r3, r2
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    277c:	6163      	str	r3, [r4, #20]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    277e:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    2780:	7223      	strb	r3, [r4, #8]
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
    2782:	8a23      	ldrh	r3, [r4, #16]
    2784:	0bdb      	lsrs	r3, r3, #15
	while (hri_sercomspi_is_syncing(hw))
    2786:	d1fc      	bne.n	2782 <_spi_m_sync_init+0x176>
    2788:	e7bd      	b.n	2706 <_spi_m_sync_init+0xfa>
	ASSERT(hw && regs);
    278a:	2000      	movs	r0, #0
    278c:	e7cb      	b.n	2726 <_spi_m_sync_init+0x11a>
    278e:	2000      	movs	r0, #0
    2790:	e7c9      	b.n	2726 <_spi_m_sync_init+0x11a>
	ASSERT(hw && regs);
    2792:	2000      	movs	r0, #0
    2794:	e78f      	b.n	26b6 <_spi_m_sync_init+0xaa>
    2796:	2000      	movs	r0, #0
    2798:	e78d      	b.n	26b6 <_spi_m_sync_init+0xaa>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    279a:	2302      	movs	r3, #2
    279c:	e7b7      	b.n	270e <_spi_m_sync_init+0x102>
		return ERR_INVALID_ARG;
    279e:	200d      	movs	r0, #13
    27a0:	4240      	negs	r0, r0
    27a2:	e7b6      	b.n	2712 <_spi_m_sync_init+0x106>
    27a4:	000025c1 	.word	0x000025c1
    27a8:	00006d14 	.word	0x00006d14
    27ac:	000008a3 	.word	0x000008a3
    27b0:	00006d6c 	.word	0x00006d6c
    27b4:	00002281 	.word	0x00002281
    27b8:	00000872 	.word	0x00000872
    27bc:	fffffefc 	.word	0xfffffefc
    27c0:	fffd3fbf 	.word	0xfffd3fbf
    27c4:	00000883 	.word	0x00000883
    27c8:	00020040 	.word	0x00020040

000027cc <_spi_m_sync_enable>:

	return _spi_deinit(hw);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    27cc:	b510      	push	{r4, lr}
    27ce:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    27d0:	d00d      	beq.n	27ee <_spi_m_sync_enable+0x22>
    27d2:	6803      	ldr	r3, [r0, #0]
    27d4:	2b00      	cmp	r3, #0
    27d6:	d008      	beq.n	27ea <_spi_m_sync_enable+0x1e>
    27d8:	2001      	movs	r0, #1
    27da:	4a06      	ldr	r2, [pc, #24]	; (27f4 <_spi_m_sync_enable+0x28>)
    27dc:	4906      	ldr	r1, [pc, #24]	; (27f8 <_spi_m_sync_enable+0x2c>)
    27de:	4b07      	ldr	r3, [pc, #28]	; (27fc <_spi_m_sync_enable+0x30>)
    27e0:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    27e2:	6820      	ldr	r0, [r4, #0]
    27e4:	4b06      	ldr	r3, [pc, #24]	; (2800 <_spi_m_sync_enable+0x34>)
    27e6:	4798      	blx	r3
}
    27e8:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    27ea:	2000      	movs	r0, #0
    27ec:	e7f5      	b.n	27da <_spi_m_sync_enable+0xe>
    27ee:	2000      	movs	r0, #0
    27f0:	e7f3      	b.n	27da <_spi_m_sync_enable+0xe>
    27f2:	46c0      	nop			; (mov r8, r8)
    27f4:	0000090a 	.word	0x0000090a
    27f8:	00006d6c 	.word	0x00006d6c
    27fc:	00002281 	.word	0x00002281
    2800:	000025d1 	.word	0x000025d1

00002804 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    2804:	b510      	push	{r4, lr}
    2806:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    2808:	d00d      	beq.n	2826 <_spi_m_sync_disable+0x22>
    280a:	6803      	ldr	r3, [r0, #0]
    280c:	2b00      	cmp	r3, #0
    280e:	d008      	beq.n	2822 <_spi_m_sync_disable+0x1e>
    2810:	2001      	movs	r0, #1
    2812:	4a06      	ldr	r2, [pc, #24]	; (282c <_spi_m_sync_disable+0x28>)
    2814:	4906      	ldr	r1, [pc, #24]	; (2830 <_spi_m_sync_disable+0x2c>)
    2816:	4b07      	ldr	r3, [pc, #28]	; (2834 <_spi_m_sync_disable+0x30>)
    2818:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    281a:	6820      	ldr	r0, [r4, #0]
    281c:	4b06      	ldr	r3, [pc, #24]	; (2838 <_spi_m_sync_disable+0x34>)
    281e:	4798      	blx	r3
}
    2820:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    2822:	2000      	movs	r0, #0
    2824:	e7f5      	b.n	2812 <_spi_m_sync_disable+0xe>
    2826:	2000      	movs	r0, #0
    2828:	e7f3      	b.n	2812 <_spi_m_sync_disable+0xe>
    282a:	46c0      	nop			; (mov r8, r8)
    282c:	00000926 	.word	0x00000926
    2830:	00006d6c 	.word	0x00006d6c
    2834:	00002281 	.word	0x00002281
    2838:	000025ef 	.word	0x000025ef

0000283c <_spi_m_sync_trans>:
	ctrl->txcnt++;
	hri_sercomspi_write_DATA_reg(hw, data);
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    283c:	b570      	push	{r4, r5, r6, lr}
    283e:	b088      	sub	sp, #32
    2840:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    2842:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    2844:	680b      	ldr	r3, [r1, #0]
    2846:	9303      	str	r3, [sp, #12]
    2848:	684b      	ldr	r3, [r1, #4]
    284a:	9304      	str	r3, [sp, #16]
    284c:	2300      	movs	r3, #0
    284e:	9305      	str	r3, [sp, #20]
    2850:	9306      	str	r3, [sp, #24]
    2852:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    2854:	2800      	cmp	r0, #0
    2856:	d014      	beq.n	2882 <_spi_m_sync_trans+0x46>
    2858:	2c00      	cmp	r4, #0
    285a:	d010      	beq.n	287e <_spi_m_sync_trans+0x42>
    285c:	2001      	movs	r0, #1
    285e:	4a2d      	ldr	r2, [pc, #180]	; (2914 <_spi_m_sync_trans+0xd8>)
    2860:	492d      	ldr	r1, [pc, #180]	; (2918 <_spi_m_sync_trans+0xdc>)
    2862:	4b2e      	ldr	r3, [pc, #184]	; (291c <_spi_m_sync_trans+0xe0>)
    2864:	4798      	blx	r3
    2866:	8a23      	ldrh	r3, [r4, #16]
    2868:	0bdb      	lsrs	r3, r3, #15

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(hw)) {
    286a:	d14f      	bne.n	290c <_spi_m_sync_trans+0xd0>
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    286c:	8a23      	ldrh	r3, [r4, #16]
    286e:	0bdb      	lsrs	r3, r3, #15
    2870:	d1fc      	bne.n	286c <_spi_m_sync_trans+0x30>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    2872:	6823      	ldr	r3, [r4, #0]
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    2874:	079b      	lsls	r3, r3, #30
    2876:	d418      	bmi.n	28aa <_spi_m_sync_trans+0x6e>
		return ERR_NOT_INITIALIZED;
    2878:	2014      	movs	r0, #20
    287a:	4240      	negs	r0, r0
    287c:	e044      	b.n	2908 <_spi_m_sync_trans+0xcc>
	ASSERT(dev && hw);
    287e:	2000      	movs	r0, #0
    2880:	e7ed      	b.n	285e <_spi_m_sync_trans+0x22>
    2882:	2000      	movs	r0, #0
    2884:	e7eb      	b.n	285e <_spi_m_sync_trans+0x22>
		return false;
    2886:	2200      	movs	r2, #0
    2888:	e026      	b.n	28d8 <_spi_m_sync_trans+0x9c>
			data |= (*ctrl->txbuf) << 8;
    288a:	7858      	ldrb	r0, [r3, #1]
    288c:	0200      	lsls	r0, r0, #8
    288e:	4301      	orrs	r1, r0
			ctrl->txbuf++;
    2890:	3302      	adds	r3, #2
    2892:	9303      	str	r3, [sp, #12]
	ctrl->txcnt++;
    2894:	3201      	adds	r2, #1
    2896:	9205      	str	r2, [sp, #20]
	hri_sercomspi_write_DATA_reg(hw, data);
    2898:	b289      	uxth	r1, r1
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    289a:	8321      	strh	r1, [r4, #24]
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check(hw, iflag, &ctrl);
			}
		}

		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    289c:	9805      	ldr	r0, [sp, #20]
    289e:	68ab      	ldr	r3, [r5, #8]
    28a0:	4298      	cmp	r0, r3
    28a2:	d302      	bcc.n	28aa <_spi_m_sync_trans+0x6e>
    28a4:	9a06      	ldr	r2, [sp, #24]
    28a6:	4293      	cmp	r3, r2
    28a8:	d929      	bls.n	28fe <_spi_m_sync_trans+0xc2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    28aa:	7ba3      	ldrb	r3, [r4, #14]
    28ac:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    28ae:	075a      	lsls	r2, r3, #29
    28b0:	d5e9      	bpl.n	2886 <_spi_m_sync_trans+0x4a>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.DATA.reg;
    28b2:	8b22      	ldrh	r2, [r4, #24]
    28b4:	b292      	uxth	r2, r2
	if (ctrl->rxbuf) {
    28b6:	9904      	ldr	r1, [sp, #16]
    28b8:	2900      	cmp	r1, #0
    28ba:	d008      	beq.n	28ce <_spi_m_sync_trans+0x92>
		*ctrl->rxbuf++ = (uint8_t)data;
    28bc:	1c48      	adds	r0, r1, #1
    28be:	9004      	str	r0, [sp, #16]
    28c0:	700a      	strb	r2, [r1, #0]
		if (ctrl->char_size > 1) {
    28c2:	2e01      	cmp	r6, #1
    28c4:	d903      	bls.n	28ce <_spi_m_sync_trans+0x92>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    28c6:	1c88      	adds	r0, r1, #2
    28c8:	9004      	str	r0, [sp, #16]
    28ca:	0a12      	lsrs	r2, r2, #8
    28cc:	704a      	strb	r2, [r1, #1]
	ctrl->rxcnt++;
    28ce:	9a06      	ldr	r2, [sp, #24]
    28d0:	9201      	str	r2, [sp, #4]
    28d2:	3201      	adds	r2, #1
    28d4:	9206      	str	r2, [sp, #24]
	return true;
    28d6:	2201      	movs	r2, #1
		if (!_spi_rx_check(hw, iflag, &ctrl)) {
    28d8:	2a00      	cmp	r2, #0
    28da:	d1df      	bne.n	289c <_spi_m_sync_trans+0x60>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    28dc:	9906      	ldr	r1, [sp, #24]
    28de:	9a05      	ldr	r2, [sp, #20]
    28e0:	4291      	cmp	r1, r2
    28e2:	d3db      	bcc.n	289c <_spi_m_sync_trans+0x60>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    28e4:	07db      	lsls	r3, r3, #31
    28e6:	d5d9      	bpl.n	289c <_spi_m_sync_trans+0x60>
	if (ctrl->txbuf) {
    28e8:	9b03      	ldr	r3, [sp, #12]
    28ea:	2b00      	cmp	r3, #0
    28ec:	d005      	beq.n	28fa <_spi_m_sync_trans+0xbe>
		data = *ctrl->txbuf++;
    28ee:	1c59      	adds	r1, r3, #1
    28f0:	9103      	str	r1, [sp, #12]
    28f2:	7819      	ldrb	r1, [r3, #0]
		if (ctrl->char_size > 1) {
    28f4:	2e01      	cmp	r6, #1
    28f6:	d8c8      	bhi.n	288a <_spi_m_sync_trans+0x4e>
    28f8:	e7cc      	b.n	2894 <_spi_m_sync_trans+0x58>
		data = SPI_DUMMY_CHAR;
    28fa:	4909      	ldr	r1, [pc, #36]	; (2920 <_spi_m_sync_trans+0xe4>)
    28fc:	e7ca      	b.n	2894 <_spi_m_sync_trans+0x58>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    28fe:	7ba3      	ldrb	r3, [r4, #14]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    2900:	079b      	lsls	r3, r3, #30
    2902:	d0fc      	beq.n	28fe <_spi_m_sync_trans+0xc2>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    2904:	2303      	movs	r3, #3
    2906:	73a3      	strb	r3, [r4, #14]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    2908:	b008      	add	sp, #32
    290a:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BUSY;
    290c:	2004      	movs	r0, #4
    290e:	4240      	negs	r0, r0
    2910:	e7fa      	b.n	2908 <_spi_m_sync_trans+0xcc>
    2912:	46c0      	nop			; (mov r8, r8)
    2914:	00000a01 	.word	0x00000a01
    2918:	00006d6c 	.word	0x00006d6c
    291c:	00002281 	.word	0x00002281
    2920:	000001ff 	.word	0x000001ff

00002924 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    2924:	4a13      	ldr	r2, [pc, #76]	; (2974 <_sysctrl_init_sources+0x50>)
    2926:	6a11      	ldr	r1, [r2, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    2928:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    292a:	6a13      	ldr	r3, [r2, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    292c:	0f9b      	lsrs	r3, r3, #30
    292e:	079b      	lsls	r3, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    2930:	0409      	lsls	r1, r1, #16
    2932:	4811      	ldr	r0, [pc, #68]	; (2978 <_sysctrl_init_sources+0x54>)
    2934:	4001      	ands	r1, r0
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    2936:	430b      	orrs	r3, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    2938:	2102      	movs	r1, #2
    293a:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    293c:	6213      	str	r3, [r2, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    293e:	6993      	ldr	r3, [r2, #24]
	tmp = (tmp & SYSCTRL_OSC32K_CALIB_Msk) >> SYSCTRL_OSC32K_CALIB_Pos;
    2940:	0c1b      	lsrs	r3, r3, #16
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
    2942:	041b      	lsls	r3, r3, #16
    2944:	21fe      	movs	r1, #254	; 0xfe
    2946:	03c9      	lsls	r1, r1, #15
    2948:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    294a:	490c      	ldr	r1, [pc, #48]	; (297c <_sysctrl_init_sources+0x58>)
    294c:	430b      	orrs	r3, r1
	((Sysctrl *)hw)->OSC32K.reg = data;
    294e:	6193      	str	r3, [r2, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    2950:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    2952:	211f      	movs	r1, #31
    2954:	400b      	ands	r3, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    2956:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    2958:	4b06      	ldr	r3, [pc, #24]	; (2974 <_sysctrl_init_sources+0x50>)
    295a:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    295c:	075b      	lsls	r3, r3, #29
    295e:	d5fb      	bpl.n	2958 <_sysctrl_init_sources+0x34>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    2960:	4b04      	ldr	r3, [pc, #16]	; (2974 <_sysctrl_init_sources+0x50>)
    2962:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    2964:	071b      	lsls	r3, r3, #28
    2966:	d5fb      	bpl.n	2960 <_sysctrl_init_sources+0x3c>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    2968:	4a02      	ldr	r2, [pc, #8]	; (2974 <_sysctrl_init_sources+0x50>)
    296a:	6a13      	ldr	r3, [r2, #32]
    296c:	2180      	movs	r1, #128	; 0x80
    296e:	430b      	orrs	r3, r1
    2970:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    2972:	4770      	bx	lr
    2974:	40000800 	.word	0x40000800
    2978:	0fff0000 	.word	0x0fff0000
    297c:	00000706 	.word	0x00000706

00002980 <_sysctrl_init_referenced_generators>:
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    2980:	4770      	bx	lr
	...

00002984 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2984:	4b02      	ldr	r3, [pc, #8]	; (2990 <_system_time_init+0xc>)
    2986:	4a03      	ldr	r2, [pc, #12]	; (2994 <_system_time_init+0x10>)
    2988:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    298a:	2205      	movs	r2, #5
    298c:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    298e:	4770      	bx	lr
    2990:	e000e010 	.word	0xe000e010
    2994:	00ffffff 	.word	0x00ffffff

00002998 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    2998:	b510      	push	{r4, lr}
	_system_time_init(hw);
    299a:	4b01      	ldr	r3, [pc, #4]	; (29a0 <_delay_init+0x8>)
    299c:	4798      	blx	r3
}
    299e:	bd10      	pop	{r4, pc}
    29a0:	00002985 	.word	0x00002985

000029a4 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    29a4:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    29a6:	e00b      	b.n	29c0 <_delay_cycles+0x1c>
		SysTick->LOAD = 0xFFFFFF;
    29a8:	4b0b      	ldr	r3, [pc, #44]	; (29d8 <_delay_cycles+0x34>)
    29aa:	480c      	ldr	r0, [pc, #48]	; (29dc <_delay_cycles+0x38>)
    29ac:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    29ae:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    29b0:	4b09      	ldr	r3, [pc, #36]	; (29d8 <_delay_cycles+0x34>)
    29b2:	681b      	ldr	r3, [r3, #0]
    29b4:	03db      	lsls	r3, r3, #15
    29b6:	d5fb      	bpl.n	29b0 <_delay_cycles+0xc>
			;
		buf -= 0xFFFFFF;
    29b8:	4b09      	ldr	r3, [pc, #36]	; (29e0 <_delay_cycles+0x3c>)
    29ba:	469c      	mov	ip, r3
    29bc:	4461      	add	r1, ip
	while (n--) {
    29be:	0010      	movs	r0, r2
    29c0:	1e42      	subs	r2, r0, #1
    29c2:	b2d2      	uxtb	r2, r2
    29c4:	2800      	cmp	r0, #0
    29c6:	d1ef      	bne.n	29a8 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    29c8:	4b03      	ldr	r3, [pc, #12]	; (29d8 <_delay_cycles+0x34>)
    29ca:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    29cc:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    29ce:	4b02      	ldr	r3, [pc, #8]	; (29d8 <_delay_cycles+0x34>)
    29d0:	681b      	ldr	r3, [r3, #0]
    29d2:	03db      	lsls	r3, r3, #15
    29d4:	d5fb      	bpl.n	29ce <_delay_cycles+0x2a>
		;
}
    29d6:	4770      	bx	lr
    29d8:	e000e010 	.word	0xe000e010
    29dc:	00ffffff 	.word	0x00ffffff
    29e0:	ff000001 	.word	0xff000001

000029e4 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    29e4:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    29e6:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    29e8:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    29ea:	07d2      	lsls	r2, r2, #31
    29ec:	d400      	bmi.n	29f0 <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    29ee:	bd10      	pop	{r4, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    29f0:	2201      	movs	r2, #1
    29f2:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    29f4:	6803      	ldr	r3, [r0, #0]
    29f6:	4798      	blx	r3
}
    29f8:	e7f9      	b.n	29ee <tc_interrupt_handler+0xa>
	...

000029fc <tc_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    29fc:	4b02      	ldr	r3, [pc, #8]	; (2a08 <tc_get_hardware_index+0xc>)
    29fe:	469c      	mov	ip, r3
    2a00:	4460      	add	r0, ip
    2a02:	0a80      	lsrs	r0, r0, #10
    2a04:	b2c0      	uxtb	r0, r0
#else
	return ((uint32_t)hw - TC_HW_BASE_ADDR) / sizeof(Tc);
#endif
}
    2a06:	4770      	bx	lr
    2a08:	bdffe000 	.word	0xbdffe000

00002a0c <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    2a0c:	4b06      	ldr	r3, [pc, #24]	; (2a28 <_tc_init_irq_param+0x1c>)
    2a0e:	4298      	cmp	r0, r3
    2a10:	d003      	beq.n	2a1a <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    2a12:	4b06      	ldr	r3, [pc, #24]	; (2a2c <_tc_init_irq_param+0x20>)
    2a14:	4298      	cmp	r0, r3
    2a16:	d003      	beq.n	2a20 <_tc_init_irq_param+0x14>
		_tc4_dev = (struct _timer_device *)dev;
	}
}
    2a18:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
    2a1a:	4b05      	ldr	r3, [pc, #20]	; (2a30 <_tc_init_irq_param+0x24>)
    2a1c:	6019      	str	r1, [r3, #0]
    2a1e:	e7f8      	b.n	2a12 <_tc_init_irq_param+0x6>
		_tc4_dev = (struct _timer_device *)dev;
    2a20:	4b03      	ldr	r3, [pc, #12]	; (2a30 <_tc_init_irq_param+0x24>)
    2a22:	6059      	str	r1, [r3, #4]
}
    2a24:	e7f8      	b.n	2a18 <_tc_init_irq_param+0xc>
    2a26:	46c0      	nop			; (mov r8, r8)
    2a28:	42002000 	.word	0x42002000
    2a2c:	42003000 	.word	0x42003000
    2a30:	20000854 	.word	0x20000854

00002a34 <get_tc_index>:
{
    2a34:	b510      	push	{r4, lr}
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    2a36:	4b0d      	ldr	r3, [pc, #52]	; (2a6c <get_tc_index+0x38>)
    2a38:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2a3a:	2300      	movs	r3, #0
    2a3c:	2b01      	cmp	r3, #1
    2a3e:	d80b      	bhi.n	2a58 <get_tc_index+0x24>
		if (_tcs[i].number == tc_offset) {
    2a40:	009a      	lsls	r2, r3, #2
    2a42:	18d2      	adds	r2, r2, r3
    2a44:	0091      	lsls	r1, r2, #2
    2a46:	4a0a      	ldr	r2, [pc, #40]	; (2a70 <get_tc_index+0x3c>)
    2a48:	5c8a      	ldrb	r2, [r1, r2]
    2a4a:	4290      	cmp	r0, r2
    2a4c:	d002      	beq.n	2a54 <get_tc_index+0x20>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2a4e:	3301      	adds	r3, #1
    2a50:	b2db      	uxtb	r3, r3
    2a52:	e7f3      	b.n	2a3c <get_tc_index+0x8>
			return i;
    2a54:	b258      	sxtb	r0, r3
    2a56:	e007      	b.n	2a68 <get_tc_index+0x34>
	ASSERT(false);
    2a58:	22ad      	movs	r2, #173	; 0xad
    2a5a:	0052      	lsls	r2, r2, #1
    2a5c:	4905      	ldr	r1, [pc, #20]	; (2a74 <get_tc_index+0x40>)
    2a5e:	2000      	movs	r0, #0
    2a60:	4b05      	ldr	r3, [pc, #20]	; (2a78 <get_tc_index+0x44>)
    2a62:	4798      	blx	r3
	return -1;
    2a64:	2001      	movs	r0, #1
    2a66:	4240      	negs	r0, r0
}
    2a68:	bd10      	pop	{r4, pc}
    2a6a:	46c0      	nop			; (mov r8, r8)
    2a6c:	000029fd 	.word	0x000029fd
    2a70:	00006d88 	.word	0x00006d88
    2a74:	00006db0 	.word	0x00006db0
    2a78:	00002281 	.word	0x00002281

00002a7c <_timer_init>:
{
    2a7c:	b570      	push	{r4, r5, r6, lr}
    2a7e:	0006      	movs	r6, r0
    2a80:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    2a82:	0008      	movs	r0, r1
    2a84:	4b3f      	ldr	r3, [pc, #252]	; (2b84 <_timer_init+0x108>)
    2a86:	4798      	blx	r3
    2a88:	0005      	movs	r5, r0
	device->hw = hw;
    2a8a:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2a8c:	229f      	movs	r2, #159	; 0x9f
    2a8e:	493e      	ldr	r1, [pc, #248]	; (2b88 <_timer_init+0x10c>)
    2a90:	2001      	movs	r0, #1
    2a92:	4b3e      	ldr	r3, [pc, #248]	; (2b8c <_timer_init+0x110>)
    2a94:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2a96:	7be3      	ldrb	r3, [r4, #15]
    2a98:	09db      	lsrs	r3, r3, #7
    2a9a:	d1fc      	bne.n	2a96 <_timer_init+0x1a>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2a9c:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    2a9e:	079b      	lsls	r3, r3, #30
    2aa0:	d504      	bpl.n	2aac <_timer_init+0x30>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2aa2:	2300      	movs	r3, #0
    2aa4:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2aa6:	7be3      	ldrb	r3, [r4, #15]
    2aa8:	09db      	lsrs	r3, r3, #7
    2aaa:	d1fc      	bne.n	2aa6 <_timer_init+0x2a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2aac:	2301      	movs	r3, #1
    2aae:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    2ab0:	7be3      	ldrb	r3, [r4, #15]
    2ab2:	09db      	lsrs	r3, r3, #7
    2ab4:	d1fc      	bne.n	2ab0 <_timer_init+0x34>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2ab6:	00aa      	lsls	r2, r5, #2
    2ab8:	1952      	adds	r2, r2, r5
    2aba:	0091      	lsls	r1, r2, #2
    2abc:	4b34      	ldr	r3, [pc, #208]	; (2b90 <_timer_init+0x114>)
    2abe:	185b      	adds	r3, r3, r1
    2ac0:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    2ac2:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2ac4:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2ac6:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2ac8:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2aca:	8163      	strh	r3, [r4, #10]
    2acc:	230c      	movs	r3, #12
    2ace:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2ad0:	2b08      	cmp	r3, #8
    2ad2:	d039      	beq.n	2b48 <_timer_init+0xcc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2ad4:	2b00      	cmp	r3, #0
    2ad6:	d143      	bne.n	2b60 <_timer_init+0xe4>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    2ad8:	4a2d      	ldr	r2, [pc, #180]	; (2b90 <_timer_init+0x114>)
    2ada:	00ab      	lsls	r3, r5, #2
    2adc:	1958      	adds	r0, r3, r5
    2ade:	0081      	lsls	r1, r0, #2
    2ae0:	0008      	movs	r0, r1
    2ae2:	1851      	adds	r1, r2, r1
    2ae4:	8989      	ldrh	r1, [r1, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2ae6:	8321      	strh	r1, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    2ae8:	1812      	adds	r2, r2, r0
    2aea:	8a13      	ldrh	r3, [r2, #16]
    2aec:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    2aee:	2301      	movs	r3, #1
    2af0:	7363      	strb	r3, [r4, #13]
	_tc_init_irq_param(hw, (void *)device);
    2af2:	0031      	movs	r1, r6
    2af4:	0020      	movs	r0, r4
    2af6:	4b27      	ldr	r3, [pc, #156]	; (2b94 <_timer_init+0x118>)
    2af8:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    2afa:	0020      	movs	r0, r4
    2afc:	4b26      	ldr	r3, [pc, #152]	; (2b98 <_timer_init+0x11c>)
    2afe:	4798      	blx	r3
    2b00:	300d      	adds	r0, #13
    2b02:	b2c0      	uxtb	r0, r0
    2b04:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2b06:	2b00      	cmp	r3, #0
    2b08:	db0a      	blt.n	2b20 <_timer_init+0xa4>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b0a:	211f      	movs	r1, #31
    2b0c:	4001      	ands	r1, r0
    2b0e:	2201      	movs	r2, #1
    2b10:	408a      	lsls	r2, r1
    2b12:	2180      	movs	r1, #128	; 0x80
    2b14:	4c21      	ldr	r4, [pc, #132]	; (2b9c <_timer_init+0x120>)
    2b16:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    2b18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b1c:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    2b20:	2b00      	cmp	r3, #0
    2b22:	db07      	blt.n	2b34 <_timer_init+0xb8>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b24:	211f      	movs	r1, #31
    2b26:	4001      	ands	r1, r0
    2b28:	2201      	movs	r2, #1
    2b2a:	408a      	lsls	r2, r1
    2b2c:	21c0      	movs	r1, #192	; 0xc0
    2b2e:	0049      	lsls	r1, r1, #1
    2b30:	4c1a      	ldr	r4, [pc, #104]	; (2b9c <_timer_init+0x120>)
    2b32:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    2b34:	2b00      	cmp	r3, #0
    2b36:	db05      	blt.n	2b44 <_timer_init+0xc8>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b38:	231f      	movs	r3, #31
    2b3a:	4018      	ands	r0, r3
    2b3c:	3b1e      	subs	r3, #30
    2b3e:	4083      	lsls	r3, r0
    2b40:	4a16      	ldr	r2, [pc, #88]	; (2b9c <_timer_init+0x120>)
    2b42:	6013      	str	r3, [r2, #0]
}
    2b44:	2000      	movs	r0, #0
    2b46:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2b48:	4a11      	ldr	r2, [pc, #68]	; (2b90 <_timer_init+0x114>)
    2b4a:	00ab      	lsls	r3, r5, #2
    2b4c:	1958      	adds	r0, r3, r5
    2b4e:	0081      	lsls	r1, r0, #2
    2b50:	0008      	movs	r0, r1
    2b52:	1851      	adds	r1, r2, r1
    2b54:	68c9      	ldr	r1, [r1, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2b56:	61a1      	str	r1, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2b58:	1812      	adds	r2, r2, r0
    2b5a:	6913      	ldr	r3, [r2, #16]
    2b5c:	61e3      	str	r3, [r4, #28]
    2b5e:	e7c6      	b.n	2aee <_timer_init+0x72>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2b60:	2b04      	cmp	r3, #4
    2b62:	d1c4      	bne.n	2aee <_timer_init+0x72>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    2b64:	490a      	ldr	r1, [pc, #40]	; (2b90 <_timer_init+0x114>)
    2b66:	00ab      	lsls	r3, r5, #2
    2b68:	1958      	adds	r0, r3, r5
    2b6a:	0082      	lsls	r2, r0, #2
    2b6c:	188a      	adds	r2, r1, r2
    2b6e:	7b10      	ldrb	r0, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2b70:	7620      	strb	r0, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    2b72:	7c12      	ldrb	r2, [r2, #16]
    2b74:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    2b76:	195d      	adds	r5, r3, r5
    2b78:	00ab      	lsls	r3, r5, #2
    2b7a:	18c9      	adds	r1, r1, r3
    2b7c:	7a0b      	ldrb	r3, [r1, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2b7e:	7523      	strb	r3, [r4, #20]
    2b80:	e7b5      	b.n	2aee <_timer_init+0x72>
    2b82:	46c0      	nop			; (mov r8, r8)
    2b84:	00002a35 	.word	0x00002a35
    2b88:	00006db0 	.word	0x00006db0
    2b8c:	00002281 	.word	0x00002281
    2b90:	00006d88 	.word	0x00006d88
    2b94:	00002a0d 	.word	0x00002a0d
    2b98:	000029fd 	.word	0x000029fd
    2b9c:	e000e100 	.word	0xe000e100

00002ba0 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2ba0:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    2ba2:	8813      	ldrh	r3, [r2, #0]
    2ba4:	2102      	movs	r1, #2
    2ba6:	430b      	orrs	r3, r1
    2ba8:	b29b      	uxth	r3, r3
    2baa:	8013      	strh	r3, [r2, #0]
}
    2bac:	4770      	bx	lr

00002bae <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    2bae:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2bb0:	881b      	ldrh	r3, [r3, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    2bb2:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
    2bb4:	2001      	movs	r0, #1
    2bb6:	4018      	ands	r0, r3
}
    2bb8:	4770      	bx	lr

00002bba <_tc_get_timer>:
}
    2bba:	2000      	movs	r0, #0
    2bbc:	4770      	bx	lr
	...

00002bc0 <_timer_set_irq>:
{
    2bc0:	b510      	push	{r4, lr}
	_irq_set((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(device->hw)));
    2bc2:	68c0      	ldr	r0, [r0, #12]
    2bc4:	4b03      	ldr	r3, [pc, #12]	; (2bd4 <_timer_set_irq+0x14>)
    2bc6:	4798      	blx	r3
    2bc8:	300d      	adds	r0, #13
    2bca:	b2c0      	uxtb	r0, r0
    2bcc:	4b02      	ldr	r3, [pc, #8]	; (2bd8 <_timer_set_irq+0x18>)
    2bce:	4798      	blx	r3
}
    2bd0:	bd10      	pop	{r4, pc}
    2bd2:	46c0      	nop			; (mov r8, r8)
    2bd4:	000029fd 	.word	0x000029fd
    2bd8:	0000230d 	.word	0x0000230d

00002bdc <TC0_Handler>:
{
    2bdc:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc0_dev);
    2bde:	4b02      	ldr	r3, [pc, #8]	; (2be8 <TC0_Handler+0xc>)
    2be0:	6818      	ldr	r0, [r3, #0]
    2be2:	4b02      	ldr	r3, [pc, #8]	; (2bec <TC0_Handler+0x10>)
    2be4:	4798      	blx	r3
}
    2be6:	bd10      	pop	{r4, pc}
    2be8:	20000854 	.word	0x20000854
    2bec:	000029e5 	.word	0x000029e5

00002bf0 <TC4_Handler>:
{
    2bf0:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc4_dev);
    2bf2:	4b02      	ldr	r3, [pc, #8]	; (2bfc <TC4_Handler+0xc>)
    2bf4:	6858      	ldr	r0, [r3, #4]
    2bf6:	4b02      	ldr	r3, [pc, #8]	; (2c00 <TC4_Handler+0x10>)
    2bf8:	4798      	blx	r3
}
    2bfa:	bd10      	pop	{r4, pc}
    2bfc:	20000854 	.word	0x20000854
    2c00:	000029e5 	.word	0x000029e5

00002c04 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    2c04:	b510      	push	{r4, lr}
    2c06:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    2c08:	d02a      	beq.n	2c60 <_wdt_init+0x5c>
    2c0a:	6803      	ldr	r3, [r0, #0]
    2c0c:	2b00      	cmp	r3, #0
    2c0e:	d025      	beq.n	2c5c <_wdt_init+0x58>
    2c10:	2001      	movs	r0, #1
    2c12:	224f      	movs	r2, #79	; 0x4f
    2c14:	4916      	ldr	r1, [pc, #88]	; (2c70 <_wdt_init+0x6c>)
    2c16:	4b17      	ldr	r3, [pc, #92]	; (2c74 <_wdt_init+0x70>)
    2c18:	4798      	blx	r3

	if (hri_wdt_get_CTRL_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRL_ENABLE_bit(dev->hw)) {
    2c1a:	6822      	ldr	r2, [r4, #0]
typedef uint8_t hri_wdt_intflag_reg_t;
typedef uint8_t hri_wdt_status_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw)
{
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    2c1c:	79d3      	ldrb	r3, [r2, #7]
    2c1e:	09db      	lsrs	r3, r3, #7
    2c20:	d1fc      	bne.n	2c1c <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRL_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw);
	tmp = ((Wdt *)hw)->CTRL.reg;
    2c22:	7813      	ldrb	r3, [r2, #0]
	tmp = (tmp & WDT_CTRL_ALWAYSON) >> WDT_CTRL_ALWAYSON_Pos;
    2c24:	09db      	lsrs	r3, r3, #7
    2c26:	d11d      	bne.n	2c64 <_wdt_init+0x60>
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    2c28:	79d3      	ldrb	r3, [r2, #7]
    2c2a:	09db      	lsrs	r3, r3, #7
    2c2c:	d1fc      	bne.n	2c28 <_wdt_init+0x24>
	tmp = ((Wdt *)hw)->CTRL.reg;
    2c2e:	7813      	ldrb	r3, [r2, #0]
    2c30:	079b      	lsls	r3, r3, #30
    2c32:	d41a      	bmi.n	2c6a <_wdt_init+0x66>
	((Wdt *)hw)->CTRL.reg &= ~WDT_CTRL_WEN;
    2c34:	7813      	ldrb	r3, [r2, #0]
    2c36:	2104      	movs	r1, #4
    2c38:	438b      	bics	r3, r1
    2c3a:	7013      	strb	r3, [r2, #0]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    2c3c:	79d3      	ldrb	r3, [r2, #7]
    2c3e:	09db      	lsrs	r3, r3, #7
    2c40:	d1fc      	bne.n	2c3c <_wdt_init+0x38>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRL_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    2c42:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    2c44:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    2c46:	210f      	movs	r1, #15
    2c48:	438b      	bics	r3, r1
	tmp |= WDT_CONFIG_PER(data);
    2c4a:	210b      	movs	r1, #11
    2c4c:	430b      	orrs	r3, r1
    2c4e:	b2db      	uxtb	r3, r3
	((Wdt *)hw)->CONFIG.reg = tmp;
    2c50:	7053      	strb	r3, [r2, #1]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    2c52:	79d3      	ldrb	r3, [r2, #7]
    2c54:	09db      	lsrs	r3, r3, #7
    2c56:	d1fc      	bne.n	2c52 <_wdt_init+0x4e>
	}

	return ERR_NONE;
    2c58:	2000      	movs	r0, #0
}
    2c5a:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
    2c5c:	2000      	movs	r0, #0
    2c5e:	e7d8      	b.n	2c12 <_wdt_init+0xe>
    2c60:	2000      	movs	r0, #0
    2c62:	e7d6      	b.n	2c12 <_wdt_init+0xe>
		return ERR_DENIED;
    2c64:	2011      	movs	r0, #17
    2c66:	4240      	negs	r0, r0
    2c68:	e7f7      	b.n	2c5a <_wdt_init+0x56>
    2c6a:	2011      	movs	r0, #17
    2c6c:	4240      	negs	r0, r0
    2c6e:	e7f4      	b.n	2c5a <_wdt_init+0x56>
    2c70:	00006dc4 	.word	0x00006dc4
    2c74:	00002281 	.word	0x00002281

00002c78 <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    2c78:	b570      	push	{r4, r5, r6, lr}
    2c7a:	0006      	movs	r6, r0
    2c7c:	000d      	movs	r5, r1
    2c7e:	0014      	movs	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    2c80:	2800      	cmp	r0, #0
    2c82:	d038      	beq.n	2cf6 <_wdt_set_timeout_period+0x7e>
    2c84:	6803      	ldr	r3, [r0, #0]
    2c86:	2b00      	cmp	r3, #0
    2c88:	d033      	beq.n	2cf2 <_wdt_set_timeout_period+0x7a>
    2c8a:	2001      	movs	r0, #1
    2c8c:	2279      	movs	r2, #121	; 0x79
    2c8e:	493e      	ldr	r1, [pc, #248]	; (2d88 <_wdt_set_timeout_period+0x110>)
    2c90:	4b3e      	ldr	r3, [pc, #248]	; (2d8c <_wdt_set_timeout_period+0x114>)
    2c92:	4798      	blx	r3

	if (hri_wdt_get_CTRL_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRL_ENABLE_bit(dev->hw)) {
    2c94:	6836      	ldr	r6, [r6, #0]
    2c96:	79f3      	ldrb	r3, [r6, #7]
    2c98:	09db      	lsrs	r3, r3, #7
    2c9a:	d1fc      	bne.n	2c96 <_wdt_set_timeout_period+0x1e>
	tmp = ((Wdt *)hw)->CTRL.reg;
    2c9c:	7833      	ldrb	r3, [r6, #0]
	tmp = (tmp & WDT_CTRL_ALWAYSON) >> WDT_CTRL_ALWAYSON_Pos;
    2c9e:	09db      	lsrs	r3, r3, #7
    2ca0:	d000      	beq.n	2ca4 <_wdt_set_timeout_period+0x2c>
    2ca2:	e068      	b.n	2d76 <_wdt_set_timeout_period+0xfe>
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    2ca4:	79f3      	ldrb	r3, [r6, #7]
    2ca6:	09db      	lsrs	r3, r3, #7
    2ca8:	d1fc      	bne.n	2ca4 <_wdt_set_timeout_period+0x2c>
	tmp = ((Wdt *)hw)->CTRL.reg;
    2caa:	7833      	ldrb	r3, [r6, #0]
    2cac:	079b      	lsls	r3, r3, #30
    2cae:	d465      	bmi.n	2d7c <_wdt_set_timeout_period+0x104>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    2cb0:	002a      	movs	r2, r5
    2cb2:	2300      	movs	r3, #0
    2cb4:	0020      	movs	r0, r4
    2cb6:	2100      	movs	r1, #0
    2cb8:	4c35      	ldr	r4, [pc, #212]	; (2d90 <_wdt_set_timeout_period+0x118>)
    2cba:	47a0      	blx	r4

		/* check whether overflow*/
		if (tmp >> 32) {
    2cbc:	2900      	cmp	r1, #0
    2cbe:	d160      	bne.n	2d82 <_wdt_set_timeout_period+0x10a>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    2cc0:	23fa      	movs	r3, #250	; 0xfa
    2cc2:	029b      	lsls	r3, r3, #10
    2cc4:	4298      	cmp	r0, r3
    2cc6:	d04a      	beq.n	2d5e <_wdt_set_timeout_period+0xe6>
    2cc8:	d917      	bls.n	2cfa <_wdt_set_timeout_period+0x82>
    2cca:	23fa      	movs	r3, #250	; 0xfa
    2ccc:	035b      	lsls	r3, r3, #13
    2cce:	4298      	cmp	r0, r3
    2cd0:	d049      	beq.n	2d66 <_wdt_set_timeout_period+0xee>
    2cd2:	d92b      	bls.n	2d2c <_wdt_set_timeout_period+0xb4>
    2cd4:	23fa      	movs	r3, #250	; 0xfa
    2cd6:	03db      	lsls	r3, r3, #15
    2cd8:	4298      	cmp	r0, r3
    2cda:	d048      	beq.n	2d6e <_wdt_set_timeout_period+0xf6>
    2cdc:	23fa      	movs	r3, #250	; 0xfa
    2cde:	041b      	lsls	r3, r3, #16
    2ce0:	4298      	cmp	r0, r3
    2ce2:	d046      	beq.n	2d72 <_wdt_set_timeout_period+0xfa>
    2ce4:	23fa      	movs	r3, #250	; 0xfa
    2ce6:	039b      	lsls	r3, r3, #14
    2ce8:	4298      	cmp	r0, r3
    2cea:	d03e      	beq.n	2d6a <_wdt_set_timeout_period+0xf2>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    2cec:	200d      	movs	r0, #13
    2cee:	4240      	negs	r0, r0
    2cf0:	e030      	b.n	2d54 <_wdt_set_timeout_period+0xdc>
	ASSERT(dev && dev->hw);
    2cf2:	2000      	movs	r0, #0
    2cf4:	e7ca      	b.n	2c8c <_wdt_set_timeout_period+0x14>
    2cf6:	2000      	movs	r0, #0
    2cf8:	e7c8      	b.n	2c8c <_wdt_set_timeout_period+0x14>
		switch (period_cycles) {
    2cfa:	23fa      	movs	r3, #250	; 0xfa
    2cfc:	01db      	lsls	r3, r3, #7
    2cfe:	4298      	cmp	r0, r3
    2d00:	d029      	beq.n	2d56 <_wdt_set_timeout_period+0xde>
    2d02:	d809      	bhi.n	2d18 <_wdt_set_timeout_period+0xa0>
    2d04:	23fa      	movs	r3, #250	; 0xfa
    2d06:	015b      	lsls	r3, r3, #5
    2d08:	4298      	cmp	r0, r3
    2d0a:	d019      	beq.n	2d40 <_wdt_set_timeout_period+0xc8>
    2d0c:	23fa      	movs	r3, #250	; 0xfa
    2d0e:	019b      	lsls	r3, r3, #6
    2d10:	4298      	cmp	r0, r3
    2d12:	d1eb      	bne.n	2cec <_wdt_set_timeout_period+0x74>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    2d14:	2101      	movs	r1, #1
    2d16:	e014      	b.n	2d42 <_wdt_set_timeout_period+0xca>
		switch (period_cycles) {
    2d18:	23fa      	movs	r3, #250	; 0xfa
    2d1a:	021b      	lsls	r3, r3, #8
    2d1c:	4298      	cmp	r0, r3
    2d1e:	d01c      	beq.n	2d5a <_wdt_set_timeout_period+0xe2>
    2d20:	23fa      	movs	r3, #250	; 0xfa
    2d22:	025b      	lsls	r3, r3, #9
    2d24:	4298      	cmp	r0, r3
    2d26:	d1e1      	bne.n	2cec <_wdt_set_timeout_period+0x74>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    2d28:	2104      	movs	r1, #4
			break;
    2d2a:	e00a      	b.n	2d42 <_wdt_set_timeout_period+0xca>
		switch (period_cycles) {
    2d2c:	23fa      	movs	r3, #250	; 0xfa
    2d2e:	02db      	lsls	r3, r3, #11
    2d30:	4298      	cmp	r0, r3
    2d32:	d016      	beq.n	2d62 <_wdt_set_timeout_period+0xea>
    2d34:	23fa      	movs	r3, #250	; 0xfa
    2d36:	031b      	lsls	r3, r3, #12
    2d38:	4298      	cmp	r0, r3
    2d3a:	d1d7      	bne.n	2cec <_wdt_set_timeout_period+0x74>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    2d3c:	2107      	movs	r1, #7
			break;
    2d3e:	e000      	b.n	2d42 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    2d40:	2100      	movs	r1, #0
	tmp = ((Wdt *)hw)->CONFIG.reg;
    2d42:	7873      	ldrb	r3, [r6, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    2d44:	220f      	movs	r2, #15
    2d46:	4393      	bics	r3, r2
	tmp |= WDT_CONFIG_PER(data);
    2d48:	430b      	orrs	r3, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    2d4a:	7073      	strb	r3, [r6, #1]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    2d4c:	79f3      	ldrb	r3, [r6, #7]
    2d4e:	09db      	lsrs	r3, r3, #7
    2d50:	d1fc      	bne.n	2d4c <_wdt_set_timeout_period+0xd4>
		}
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
    2d52:	2000      	movs	r0, #0
}
    2d54:	bd70      	pop	{r4, r5, r6, pc}
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    2d56:	2102      	movs	r1, #2
			break;
    2d58:	e7f3      	b.n	2d42 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    2d5a:	2103      	movs	r1, #3
			break;
    2d5c:	e7f1      	b.n	2d42 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    2d5e:	2105      	movs	r1, #5
			break;
    2d60:	e7ef      	b.n	2d42 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    2d62:	2106      	movs	r1, #6
			break;
    2d64:	e7ed      	b.n	2d42 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    2d66:	2108      	movs	r1, #8
			break;
    2d68:	e7eb      	b.n	2d42 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    2d6a:	2109      	movs	r1, #9
			break;
    2d6c:	e7e9      	b.n	2d42 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    2d6e:	210a      	movs	r1, #10
			break;
    2d70:	e7e7      	b.n	2d42 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    2d72:	210b      	movs	r1, #11
			break;
    2d74:	e7e5      	b.n	2d42 <_wdt_set_timeout_period+0xca>
		return ERR_DENIED;
    2d76:	2011      	movs	r0, #17
    2d78:	4240      	negs	r0, r0
    2d7a:	e7eb      	b.n	2d54 <_wdt_set_timeout_period+0xdc>
    2d7c:	2011      	movs	r0, #17
    2d7e:	4240      	negs	r0, r0
    2d80:	e7e8      	b.n	2d54 <_wdt_set_timeout_period+0xdc>
			return ERR_INVALID_ARG;
    2d82:	200d      	movs	r0, #13
    2d84:	4240      	negs	r0, r0
    2d86:	e7e5      	b.n	2d54 <_wdt_set_timeout_period+0xdc>
    2d88:	00006dc4 	.word	0x00006dc4
    2d8c:	00002281 	.word	0x00002281
    2d90:	0000590d 	.word	0x0000590d

00002d94 <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    2d94:	b510      	push	{r4, lr}
    2d96:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    2d98:	d014      	beq.n	2dc4 <_wdt_enable+0x30>
    2d9a:	6803      	ldr	r3, [r0, #0]
    2d9c:	2b00      	cmp	r3, #0
    2d9e:	d00f      	beq.n	2dc0 <_wdt_enable+0x2c>
    2da0:	2001      	movs	r0, #1
    2da2:	22fa      	movs	r2, #250	; 0xfa
    2da4:	4908      	ldr	r1, [pc, #32]	; (2dc8 <_wdt_enable+0x34>)
    2da6:	4b09      	ldr	r3, [pc, #36]	; (2dcc <_wdt_enable+0x38>)
    2da8:	4798      	blx	r3

	hri_wdt_set_CTRL_ENABLE_bit(dev->hw);
    2daa:	6822      	ldr	r2, [r4, #0]
	((Wdt *)hw)->CTRL.reg |= WDT_CTRL_ENABLE;
    2dac:	7813      	ldrb	r3, [r2, #0]
    2dae:	2102      	movs	r1, #2
    2db0:	430b      	orrs	r3, r1
    2db2:	b2db      	uxtb	r3, r3
    2db4:	7013      	strb	r3, [r2, #0]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    2db6:	79d3      	ldrb	r3, [r2, #7]
    2db8:	09db      	lsrs	r3, r3, #7
    2dba:	d1fc      	bne.n	2db6 <_wdt_enable+0x22>

	return ERR_NONE;
}
    2dbc:	2000      	movs	r0, #0
    2dbe:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
    2dc0:	2000      	movs	r0, #0
    2dc2:	e7ee      	b.n	2da2 <_wdt_enable+0xe>
    2dc4:	2000      	movs	r0, #0
    2dc6:	e7ec      	b.n	2da2 <_wdt_enable+0xe>
    2dc8:	00006dc4 	.word	0x00006dc4
    2dcc:	00002281 	.word	0x00002281

00002dd0 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    2dd0:	b510      	push	{r4, lr}
    2dd2:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    2dd4:	d012      	beq.n	2dfc <_wdt_feed+0x2c>
    2dd6:	6803      	ldr	r3, [r0, #0]
    2dd8:	2b00      	cmp	r3, #0
    2dda:	d00d      	beq.n	2df8 <_wdt_feed+0x28>
    2ddc:	2001      	movs	r0, #1
    2dde:	228c      	movs	r2, #140	; 0x8c
    2de0:	0052      	lsls	r2, r2, #1
    2de2:	4907      	ldr	r1, [pc, #28]	; (2e00 <_wdt_feed+0x30>)
    2de4:	4b07      	ldr	r3, [pc, #28]	; (2e04 <_wdt_feed+0x34>)
    2de6:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    2de8:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_wdt_write_CLEAR_reg(const void *const hw, hri_wdt_clear_reg_t data)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CLEAR.reg = data;
    2dea:	23a5      	movs	r3, #165	; 0xa5
    2dec:	7213      	strb	r3, [r2, #8]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    2dee:	79d3      	ldrb	r3, [r2, #7]
    2df0:	09db      	lsrs	r3, r3, #7
    2df2:	d1fc      	bne.n	2dee <_wdt_feed+0x1e>

	return ERR_NONE;
}
    2df4:	2000      	movs	r0, #0
    2df6:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
    2df8:	2000      	movs	r0, #0
    2dfa:	e7f0      	b.n	2dde <_wdt_feed+0xe>
    2dfc:	2000      	movs	r0, #0
    2dfe:	e7ee      	b.n	2dde <_wdt_feed+0xe>
    2e00:	00006dc4 	.word	0x00006dc4
    2e04:	00002281 	.word	0x00002281

00002e08 <main>:
#include <atmel_start.h>
#include <sys/time.h>
#include <App/DcaApp.h>

int main(void) {
    2e08:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    2e0a:	4b04      	ldr	r3, [pc, #16]	; (2e1c <main+0x14>)
    2e0c:	4798      	blx	r3

	// Initialize specific functionality
	DcaApp_Init();
    2e0e:	4b04      	ldr	r3, [pc, #16]	; (2e20 <main+0x18>)
    2e10:	4798      	blx	r3

	// Main processing loop
	DcaApp_Entry();
    2e12:	4b04      	ldr	r3, [pc, #16]	; (2e24 <main+0x1c>)
    2e14:	4798      	blx	r3
	
	// Return Success.
	return true;
}
    2e16:	2001      	movs	r0, #1
    2e18:	bd10      	pop	{r4, pc}
    2e1a:	46c0      	nop			; (mov r8, r8)
    2e1c:	000003f9 	.word	0x000003f9
    2e20:	00000161 	.word	0x00000161
    2e24:	00000279 	.word	0x00000279

00002e28 <ENC28_BankSel>:
/**
 * Bank Select
 * @param r
 */
static void ENC28_BankSel(enc28j60_registers_t r)
{
    2e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t a = r & BANK_MASK;
    2e2a:	231f      	movs	r3, #31
    2e2c:	4398      	bics	r0, r3
    2e2e:	0004      	movs	r4, r0

	if (a != sfr_common && a != lastBank) {
    2e30:	28e0      	cmp	r0, #224	; 0xe0
    2e32:	d01c      	beq.n	2e6e <ENC28_BankSel+0x46>
    2e34:	4b0e      	ldr	r3, [pc, #56]	; (2e70 <ENC28_BankSel+0x48>)
    2e36:	781b      	ldrb	r3, [r3, #0]
    2e38:	4298      	cmp	r0, r3
    2e3a:	d018      	beq.n	2e6e <ENC28_BankSel+0x46>
		lastBank = a;
    2e3c:	4b0c      	ldr	r3, [pc, #48]	; (2e70 <ENC28_BankSel+0x48>)
    2e3e:	7018      	strb	r0, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2e40:	25c0      	movs	r5, #192	; 0xc0
    2e42:	05ed      	lsls	r5, r5, #23
    2e44:	2680      	movs	r6, #128	; 0x80
    2e46:	0136      	lsls	r6, r6, #4
    2e48:	616e      	str	r6, [r5, #20]
		// clear the bank bits
		ETH_NCS_LOW();
		ETH_SPI_WRITE8(bfc_inst | 0x1F);
    2e4a:	21bf      	movs	r1, #191	; 0xbf
    2e4c:	2001      	movs	r0, #1
    2e4e:	4f09      	ldr	r7, [pc, #36]	; (2e74 <ENC28_BankSel+0x4c>)
    2e50:	47b8      	blx	r7
		ETH_SPI_WRITE8(0x03);
    2e52:	2103      	movs	r1, #3
    2e54:	2001      	movs	r0, #1
    2e56:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e58:	61ae      	str	r6, [r5, #24]
		ETH_NCS_HIGH();
		NOP();
    2e5a:	46c0      	nop			; (mov r8, r8)
		NOP();
    2e5c:	46c0      	nop			; (mov r8, r8)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2e5e:	616e      	str	r6, [r5, #20]
		// set the needed bits
		ETH_NCS_LOW();
		ETH_SPI_WRITE8(bfs_inst | 0x1F);
    2e60:	219f      	movs	r1, #159	; 0x9f
    2e62:	2001      	movs	r0, #1
    2e64:	47b8      	blx	r7
		ETH_SPI_WRITE8(a >> 6);
    2e66:	09a1      	lsrs	r1, r4, #6
    2e68:	2001      	movs	r0, #1
    2e6a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e6c:	61ae      	str	r6, [r5, #24]
		ETH_NCS_HIGH();
	}
}
    2e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e70:	20003ea0 	.word	0x20003ea0
    2e74:	00005761 	.word	0x00005761

00002e78 <ENC28_Rcr8>:
 * Read 1 byte from SFRs
 * @param a
 * @return
 */
static uint8_t ENC28_Rcr8(enc28j60_registers_t a)
{
    2e78:	b570      	push	{r4, r5, r6, lr}
    2e7a:	0006      	movs	r6, r0
	uint8_t v;

	ENC28_BankSel(a);
    2e7c:	4b08      	ldr	r3, [pc, #32]	; (2ea0 <ENC28_Rcr8+0x28>)
    2e7e:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2e80:	24c0      	movs	r4, #192	; 0xc0
    2e82:	05e4      	lsls	r4, r4, #23
    2e84:	2580      	movs	r5, #128	; 0x80
    2e86:	012d      	lsls	r5, r5, #4
    2e88:	6165      	str	r5, [r4, #20]
	ETH_NCS_LOW();
	ETH_SPI_WRITE8(rcr_inst | (a & SFR_MASK));
    2e8a:	211f      	movs	r1, #31
    2e8c:	4031      	ands	r1, r6
    2e8e:	2001      	movs	r0, #1
    2e90:	4e04      	ldr	r6, [pc, #16]	; (2ea4 <ENC28_Rcr8+0x2c>)
    2e92:	47b0      	blx	r6
	v = ETH_SPI_READ8();
    2e94:	2100      	movs	r1, #0
    2e96:	2000      	movs	r0, #0
    2e98:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e9a:	61a5      	str	r5, [r4, #24]
	ETH_NCS_HIGH();

	return v;
}
    2e9c:	bd70      	pop	{r4, r5, r6, pc}
    2e9e:	46c0      	nop			; (mov r8, r8)
    2ea0:	00002e29 	.word	0x00002e29
    2ea4:	00005761 	.word	0x00005761

00002ea8 <ENC28_Bfs>:
 * SFR Bit Field Set
 * @param a
 * @param bits
 */
static void ENC28_Bfs(enc28j60_registers_t a, char bits) // can only be used for ETH Control Registers
{
    2ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2eaa:	0007      	movs	r7, r0
    2eac:	000c      	movs	r4, r1
	ENC28_BankSel(a);
    2eae:	4b0a      	ldr	r3, [pc, #40]	; (2ed8 <ENC28_Bfs+0x30>)
    2eb0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2eb2:	25c0      	movs	r5, #192	; 0xc0
    2eb4:	05ed      	lsls	r5, r5, #23
    2eb6:	2680      	movs	r6, #128	; 0x80
    2eb8:	0136      	lsls	r6, r6, #4
    2eba:	616e      	str	r6, [r5, #20]
	ETH_NCS_LOW();
	ETH_SPI_WRITE8(bfs_inst | (a & SFR_MASK));
    2ebc:	211f      	movs	r1, #31
    2ebe:	400f      	ands	r7, r1
    2ec0:	399f      	subs	r1, #159	; 0x9f
    2ec2:	4339      	orrs	r1, r7
    2ec4:	b249      	sxtb	r1, r1
    2ec6:	b2c9      	uxtb	r1, r1
    2ec8:	2001      	movs	r0, #1
    2eca:	4f04      	ldr	r7, [pc, #16]	; (2edc <ENC28_Bfs+0x34>)
    2ecc:	47b8      	blx	r7
	ETH_SPI_WRITE8(bits);
    2ece:	0021      	movs	r1, r4
    2ed0:	2001      	movs	r0, #1
    2ed2:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2ed4:	61ae      	str	r6, [r5, #24]
	ETH_NCS_HIGH();
}
    2ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ed8:	00002e29 	.word	0x00002e29
    2edc:	00005761 	.word	0x00005761

00002ee0 <ENC28_Wcr8>:
{
    2ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ee2:	0007      	movs	r7, r0
    2ee4:	000c      	movs	r4, r1
	ENC28_BankSel(a);
    2ee6:	4b0a      	ldr	r3, [pc, #40]	; (2f10 <ENC28_Wcr8+0x30>)
    2ee8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2eea:	25c0      	movs	r5, #192	; 0xc0
    2eec:	05ed      	lsls	r5, r5, #23
    2eee:	2680      	movs	r6, #128	; 0x80
    2ef0:	0136      	lsls	r6, r6, #4
    2ef2:	616e      	str	r6, [r5, #20]
	ETH_SPI_WRITE8(wcr_inst | (a & SFR_MASK));
    2ef4:	211f      	movs	r1, #31
    2ef6:	4039      	ands	r1, r7
    2ef8:	2340      	movs	r3, #64	; 0x40
    2efa:	4319      	orrs	r1, r3
    2efc:	b249      	sxtb	r1, r1
    2efe:	b2c9      	uxtb	r1, r1
    2f00:	2001      	movs	r0, #1
    2f02:	4f04      	ldr	r7, [pc, #16]	; (2f14 <ENC28_Wcr8+0x34>)
    2f04:	47b8      	blx	r7
	ETH_SPI_WRITE8(v);
    2f06:	0021      	movs	r1, r4
    2f08:	2001      	movs	r0, #1
    2f0a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2f0c:	61ae      	str	r6, [r5, #24]
}
    2f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f10:	00002e29 	.word	0x00002e29
    2f14:	00005761 	.word	0x00005761

00002f18 <ENC28_Wcr16>:
{
    2f18:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f1a:	46ce      	mov	lr, r9
    2f1c:	4647      	mov	r7, r8
    2f1e:	b580      	push	{r7, lr}
    2f20:	b083      	sub	sp, #12
    2f22:	0006      	movs	r6, r0
    2f24:	466b      	mov	r3, sp
    2f26:	1d9d      	adds	r5, r3, #6
    2f28:	8029      	strh	r1, [r5, #0]
	ENC28_BankSel(a);
    2f2a:	4b14      	ldr	r3, [pc, #80]	; (2f7c <ENC28_Wcr16+0x64>)
    2f2c:	4798      	blx	r3
	a &= SFR_MASK;
    2f2e:	241f      	movs	r4, #31
    2f30:	4034      	ands	r4, r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2f32:	26c0      	movs	r6, #192	; 0xc0
    2f34:	05f6      	lsls	r6, r6, #23
    2f36:	2780      	movs	r7, #128	; 0x80
    2f38:	013f      	lsls	r7, r7, #4
    2f3a:	6177      	str	r7, [r6, #20]
	ETH_SPI_WRITE8(wcr_inst | (a));
    2f3c:	2340      	movs	r3, #64	; 0x40
    2f3e:	4699      	mov	r9, r3
    2f40:	4649      	mov	r1, r9
    2f42:	4321      	orrs	r1, r4
    2f44:	b2c9      	uxtb	r1, r1
    2f46:	2001      	movs	r0, #1
    2f48:	4b0d      	ldr	r3, [pc, #52]	; (2f80 <ENC28_Wcr16+0x68>)
    2f4a:	4698      	mov	r8, r3
    2f4c:	4798      	blx	r3
	ETH_SPI_WRITE8(((char *)&v)[0]);
    2f4e:	7829      	ldrb	r1, [r5, #0]
    2f50:	2001      	movs	r0, #1
    2f52:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2f54:	61b7      	str	r7, [r6, #24]
	NOP();
    2f56:	46c0      	nop			; (mov r8, r8)
	NOP();
    2f58:	46c0      	nop			; (mov r8, r8)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2f5a:	6177      	str	r7, [r6, #20]
	ETH_SPI_WRITE8(wcr_inst | (a + 1));
    2f5c:	3401      	adds	r4, #1
    2f5e:	464b      	mov	r3, r9
    2f60:	431c      	orrs	r4, r3
    2f62:	b2e1      	uxtb	r1, r4
    2f64:	2001      	movs	r0, #1
    2f66:	47c0      	blx	r8
	ETH_SPI_WRITE8(((char *)&v)[1]);
    2f68:	7869      	ldrb	r1, [r5, #1]
    2f6a:	2001      	movs	r0, #1
    2f6c:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2f6e:	61b7      	str	r7, [r6, #24]
}
    2f70:	b003      	add	sp, #12
    2f72:	bc0c      	pop	{r2, r3}
    2f74:	4690      	mov	r8, r2
    2f76:	4699      	mov	r9, r3
    2f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f7a:	46c0      	nop			; (mov r8, r8)
    2f7c:	00002e29 	.word	0x00002e29
    2f80:	00005761 	.word	0x00005761

00002f84 <ENC28_PhyWrite>:
 * Write PHY  register
 * @param a
 * @param d
 */
static void ENC28_PhyWrite(enc28j60_phy_registers_t a, uint16_t d)
{
    2f84:	b510      	push	{r4, lr}
    2f86:	000c      	movs	r4, r1
	uint8_t v = 1;

	ENC28_Wcr8(J60_MIREGADR, a);
    2f88:	0001      	movs	r1, r0
    2f8a:	2094      	movs	r0, #148	; 0x94
    2f8c:	4b06      	ldr	r3, [pc, #24]	; (2fa8 <ENC28_PhyWrite+0x24>)
    2f8e:	4798      	blx	r3
	ENC28_Wcr16(J60_MIWRL, d);
    2f90:	0021      	movs	r1, r4
    2f92:	2096      	movs	r0, #150	; 0x96
    2f94:	4b05      	ldr	r3, [pc, #20]	; (2fac <ENC28_PhyWrite+0x28>)
    2f96:	4798      	blx	r3
	uint8_t v = 1;
    2f98:	2001      	movs	r0, #1
	while (v & 0x01) {
    2f9a:	e002      	b.n	2fa2 <ENC28_PhyWrite+0x1e>
		v = ENC28_Rcr8(J60_MISTAT);
    2f9c:	20ca      	movs	r0, #202	; 0xca
    2f9e:	4b04      	ldr	r3, [pc, #16]	; (2fb0 <ENC28_PhyWrite+0x2c>)
    2fa0:	4798      	blx	r3
	while (v & 0x01) {
    2fa2:	07c3      	lsls	r3, r0, #31
    2fa4:	d4fa      	bmi.n	2f9c <ENC28_PhyWrite+0x18>
	}
}
    2fa6:	bd10      	pop	{r4, pc}
    2fa8:	00002ee1 	.word	0x00002ee1
    2fac:	00002f19 	.word	0x00002f19
    2fb0:	00002e79 	.word	0x00002e79

00002fb4 <ENC28_Rcr16>:
{
    2fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fb6:	46c6      	mov	lr, r8
    2fb8:	b500      	push	{lr}
    2fba:	b082      	sub	sp, #8
    2fbc:	0005      	movs	r5, r0
	ENC28_BankSel(a);
    2fbe:	4b13      	ldr	r3, [pc, #76]	; (300c <ENC28_Rcr16+0x58>)
    2fc0:	4798      	blx	r3
	a &= SFR_MASK;
    2fc2:	241f      	movs	r4, #31
    2fc4:	402c      	ands	r4, r5
    2fc6:	46a0      	mov	r8, r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2fc8:	25c0      	movs	r5, #192	; 0xc0
    2fca:	05ed      	lsls	r5, r5, #23
    2fcc:	2780      	movs	r7, #128	; 0x80
    2fce:	013f      	lsls	r7, r7, #4
    2fd0:	616f      	str	r7, [r5, #20]
	ETH_SPI_WRITE8(rcr_inst | (a));
    2fd2:	0021      	movs	r1, r4
    2fd4:	2001      	movs	r0, #1
    2fd6:	4c0e      	ldr	r4, [pc, #56]	; (3010 <ENC28_Rcr16+0x5c>)
    2fd8:	47a0      	blx	r4
	((char *)&v)[0] = ETH_SPI_READ8();
    2fda:	2100      	movs	r1, #0
    2fdc:	2000      	movs	r0, #0
    2fde:	47a0      	blx	r4
    2fe0:	466b      	mov	r3, sp
    2fe2:	1d9e      	adds	r6, r3, #6
    2fe4:	7030      	strb	r0, [r6, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2fe6:	61af      	str	r7, [r5, #24]
	NOP();
    2fe8:	46c0      	nop			; (mov r8, r8)
	NOP();
    2fea:	46c0      	nop			; (mov r8, r8)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2fec:	616f      	str	r7, [r5, #20]
	ETH_SPI_WRITE8(rcr_inst | (a + 1));
    2fee:	4643      	mov	r3, r8
    2ff0:	1c59      	adds	r1, r3, #1
    2ff2:	2001      	movs	r0, #1
    2ff4:	47a0      	blx	r4
	((char *)&v)[1] = ETH_SPI_READ8();
    2ff6:	2100      	movs	r1, #0
    2ff8:	2000      	movs	r0, #0
    2ffa:	47a0      	blx	r4
    2ffc:	7070      	strb	r0, [r6, #1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2ffe:	61af      	str	r7, [r5, #24]
	return v;
    3000:	8830      	ldrh	r0, [r6, #0]
}
    3002:	b002      	add	sp, #8
    3004:	bc04      	pop	{r2}
    3006:	4690      	mov	r8, r2
    3008:	bdf0      	pop	{r4, r5, r6, r7, pc}
    300a:	46c0      	nop			; (mov r8, r8)
    300c:	00002e29 	.word	0x00002e29
    3010:	00005761 	.word	0x00005761

00003014 <ENC28_Bfc>:
{
    3014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3016:	0007      	movs	r7, r0
    3018:	000c      	movs	r4, r1
	ENC28_BankSel(a);
    301a:	4b0a      	ldr	r3, [pc, #40]	; (3044 <ENC28_Bfc+0x30>)
    301c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    301e:	25c0      	movs	r5, #192	; 0xc0
    3020:	05ed      	lsls	r5, r5, #23
    3022:	2680      	movs	r6, #128	; 0x80
    3024:	0136      	lsls	r6, r6, #4
    3026:	616e      	str	r6, [r5, #20]
	ETH_SPI_WRITE8(bfc_inst | (a & SFR_MASK));
    3028:	211f      	movs	r1, #31
    302a:	400f      	ands	r7, r1
    302c:	397f      	subs	r1, #127	; 0x7f
    302e:	4339      	orrs	r1, r7
    3030:	b249      	sxtb	r1, r1
    3032:	b2c9      	uxtb	r1, r1
    3034:	2001      	movs	r0, #1
    3036:	4f04      	ldr	r7, [pc, #16]	; (3048 <ENC28_Bfc+0x34>)
    3038:	47b8      	blx	r7
	ETH_SPI_WRITE8(bits);
    303a:	0021      	movs	r1, r4
    303c:	2001      	movs	r0, #1
    303e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3040:	61ae      	str	r6, [r5, #24]
}
    3042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3044:	00002e29 	.word	0x00002e29
    3048:	00005761 	.word	0x00005761

0000304c <ENC28_PhyRead>:
 * Read PHY register
 * @param a
 * @return
 */
static uint16_t ENC28_PhyRead(enc28j60_phy_registers_t a)
{
    304c:	b510      	push	{r4, lr}
    304e:	0001      	movs	r1, r0
	ENC28_Wcr8(J60_MIREGADR, a);
    3050:	2094      	movs	r0, #148	; 0x94
    3052:	4b09      	ldr	r3, [pc, #36]	; (3078 <ENC28_PhyRead+0x2c>)
    3054:	4798      	blx	r3
	ENC28_Bfs(J60_MICMD, 0x01); // set the read flag
    3056:	2101      	movs	r1, #1
    3058:	2092      	movs	r0, #146	; 0x92
    305a:	4b08      	ldr	r3, [pc, #32]	; (307c <ENC28_PhyRead+0x30>)
    305c:	4798      	blx	r3
	while (ENC28_Rcr8(J60_MISTAT) & 0x01)
    305e:	20ca      	movs	r0, #202	; 0xca
    3060:	4b07      	ldr	r3, [pc, #28]	; (3080 <ENC28_PhyRead+0x34>)
    3062:	4798      	blx	r3
    3064:	07c3      	lsls	r3, r0, #31
    3066:	d4fa      	bmi.n	305e <ENC28_PhyRead+0x12>
		;                       // wait for the busy flag to clear
	ENC28_Bfc(J60_MICMD, 0x01); // clear the read flag
    3068:	2101      	movs	r1, #1
    306a:	2092      	movs	r0, #146	; 0x92
    306c:	4b05      	ldr	r3, [pc, #20]	; (3084 <ENC28_PhyRead+0x38>)
    306e:	4798      	blx	r3

	return ENC28_Rcr16(J60_MIRDL);
    3070:	2098      	movs	r0, #152	; 0x98
    3072:	4b05      	ldr	r3, [pc, #20]	; (3088 <ENC28_PhyRead+0x3c>)
    3074:	4798      	blx	r3
}
    3076:	bd10      	pop	{r4, pc}
    3078:	00002ee1 	.word	0x00002ee1
    307c:	00002ea9 	.word	0x00002ea9
    3080:	00002e79 	.word	0x00002e79
    3084:	00003015 	.word	0x00003015
    3088:	00002fb5 	.word	0x00002fb5

0000308c <ETH_NextPacketUpdate>:
{
    308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (nextPacketPointer == RXSTART)
    308e:	4b1c      	ldr	r3, [pc, #112]	; (3100 <ETH_NextPacketUpdate+0x74>)
    3090:	8819      	ldrh	r1, [r3, #0]
    3092:	2900      	cmp	r1, #0
    3094:	d02f      	beq.n	30f6 <ETH_NextPacketUpdate+0x6a>
		ENC28_Wcr16(J60_ERXRDPTL, nextPacketPointer - 1);
    3096:	3901      	subs	r1, #1
    3098:	b289      	uxth	r1, r1
    309a:	200c      	movs	r0, #12
    309c:	4b19      	ldr	r3, [pc, #100]	; (3104 <ETH_NextPacketUpdate+0x78>)
    309e:	4798      	blx	r3
	ENC28_Wcr16(J60_ERDPTL, nextPacketPointer);
    30a0:	4c17      	ldr	r4, [pc, #92]	; (3100 <ETH_NextPacketUpdate+0x74>)
    30a2:	8821      	ldrh	r1, [r4, #0]
    30a4:	2000      	movs	r0, #0
    30a6:	4b17      	ldr	r3, [pc, #92]	; (3104 <ETH_NextPacketUpdate+0x78>)
    30a8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    30aa:	26c0      	movs	r6, #192	; 0xc0
    30ac:	05f6      	lsls	r6, r6, #23
    30ae:	2780      	movs	r7, #128	; 0x80
    30b0:	013f      	lsls	r7, r7, #4
    30b2:	6177      	str	r7, [r6, #20]
	ETH_SPI_WRITE8(rbm_inst);
    30b4:	213a      	movs	r1, #58	; 0x3a
    30b6:	2001      	movs	r0, #1
    30b8:	4d13      	ldr	r5, [pc, #76]	; (3108 <ETH_NextPacketUpdate+0x7c>)
    30ba:	47a8      	blx	r5
	((char *)&nextPacketPointer)[0]    = ETH_SPI_READ8();
    30bc:	2100      	movs	r1, #0
    30be:	2000      	movs	r0, #0
    30c0:	47a8      	blx	r5
    30c2:	7020      	strb	r0, [r4, #0]
	((char *)&nextPacketPointer)[1]    = ETH_SPI_READ8();
    30c4:	2100      	movs	r1, #0
    30c6:	2000      	movs	r0, #0
    30c8:	47a8      	blx	r5
    30ca:	7060      	strb	r0, [r4, #1]
	((char *)&rxPacketStatusVector)[0] = ETH_SPI_READ8();
    30cc:	2100      	movs	r1, #0
    30ce:	2000      	movs	r0, #0
    30d0:	47a8      	blx	r5
    30d2:	7120      	strb	r0, [r4, #4]
	((char *)&rxPacketStatusVector)[1] = ETH_SPI_READ8();
    30d4:	2100      	movs	r1, #0
    30d6:	2000      	movs	r0, #0
    30d8:	47a8      	blx	r5
    30da:	7160      	strb	r0, [r4, #5]
	((char *)&rxPacketStatusVector)[2] = ETH_SPI_READ8();
    30dc:	2100      	movs	r1, #0
    30de:	2000      	movs	r0, #0
    30e0:	47a8      	blx	r5
    30e2:	71a0      	strb	r0, [r4, #6]
	((char *)&rxPacketStatusVector)[3] = ETH_SPI_READ8();
    30e4:	2100      	movs	r1, #0
    30e6:	2000      	movs	r0, #0
    30e8:	47a8      	blx	r5
    30ea:	71e0      	strb	r0, [r4, #7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    30ec:	61b7      	str	r7, [r6, #24]
	rxPacketStatusVector.byteCount -= 4; // I don't care about the frame checksum at the end.
    30ee:	88a3      	ldrh	r3, [r4, #4]
    30f0:	3b04      	subs	r3, #4
    30f2:	80a3      	strh	r3, [r4, #4]
}
    30f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ENC28_Wcr16(J60_ERXRDPTL, RXEND);
    30f6:	4905      	ldr	r1, [pc, #20]	; (310c <ETH_NextPacketUpdate+0x80>)
    30f8:	200c      	movs	r0, #12
    30fa:	4b02      	ldr	r3, [pc, #8]	; (3104 <ETH_NextPacketUpdate+0x78>)
    30fc:	4798      	blx	r3
    30fe:	e7cf      	b.n	30a0 <ETH_NextPacketUpdate+0x14>
    3100:	2000085c 	.word	0x2000085c
    3104:	00002f19 	.word	0x00002f19
    3108:	00005761 	.word	0x00005761
    310c:	00001a21 	.word	0x00001a21

00003110 <ETH_SendSystemReset>:

/**
 * System Software Reset
 */
void ETH_SendSystemReset(void)
{
    3110:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3112:	24c0      	movs	r4, #192	; 0xc0
    3114:	05e4      	lsls	r4, r4, #23
    3116:	2580      	movs	r5, #128	; 0x80
    3118:	012d      	lsls	r5, r5, #4
    311a:	6165      	str	r5, [r4, #20]
	ETH_NCS_LOW();
	ETH_SPI_WRITE8(src_inst);
    311c:	21ff      	movs	r1, #255	; 0xff
    311e:	2001      	movs	r0, #1
    3120:	4b01      	ldr	r3, [pc, #4]	; (3128 <ETH_SendSystemReset+0x18>)
    3122:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3124:	61a5      	str	r5, [r4, #24]
	ETH_NCS_HIGH();
}
    3126:	bd70      	pop	{r4, r5, r6, pc}
    3128:	00005761 	.word	0x00005761

0000312c <ETH_CheckLinkUp>:
/**
 * Check for the link presence
 * @return
 */
bool ETH_CheckLinkUp()
{
    312c:	b510      	push	{r4, lr}
	uint16_t phstat2;

	phstat2 = ENC28_PhyRead(J60_PHSTAT2);
    312e:	2011      	movs	r0, #17
    3130:	4b06      	ldr	r3, [pc, #24]	; (314c <ETH_CheckLinkUp+0x20>)
    3132:	4798      	blx	r3

	if (phstat2 & 0x0400) {
    3134:	0543      	lsls	r3, r0, #21
    3136:	d506      	bpl.n	3146 <ETH_CheckLinkUp+0x1a>
		ethData.up = true;
    3138:	4a05      	ldr	r2, [pc, #20]	; (3150 <ETH_CheckLinkUp+0x24>)
    313a:	7813      	ldrb	r3, [r2, #0]
    313c:	2104      	movs	r1, #4
    313e:	430b      	orrs	r3, r1
    3140:	7013      	strb	r3, [r2, #0]
		return true;
    3142:	2001      	movs	r0, #1
	} else
		return false;
}
    3144:	bd10      	pop	{r4, pc}
		return false;
    3146:	2000      	movs	r0, #0
    3148:	e7fc      	b.n	3144 <ETH_CheckLinkUp+0x18>
    314a:	46c0      	nop			; (mov r8, r8)
    314c:	0000304d 	.word	0x0000304d
    3150:	20003e98 	.word	0x20003e98

00003154 <ETH_Init>:
{
    3154:	b570      	push	{r4, r5, r6, lr}
	ethData.error      = false; // no error
    3156:	4b41      	ldr	r3, [pc, #260]	; (325c <ETH_Init+0x108>)
    3158:	781a      	ldrb	r2, [r3, #0]
    315a:	2101      	movs	r1, #1
    315c:	438a      	bics	r2, r1
    315e:	701a      	strb	r2, [r3, #0]
	ethData.up         = false; // no link
    3160:	781a      	ldrb	r2, [r3, #0]
    3162:	3103      	adds	r1, #3
    3164:	438a      	bics	r2, r1
    3166:	701a      	strb	r2, [r3, #0]
	ethData.linkChange = false;
    3168:	781a      	ldrb	r2, [r3, #0]
    316a:	310c      	adds	r1, #12
    316c:	438a      	bics	r2, r1
    316e:	701a      	strb	r2, [r3, #0]
	ethData.bufferBusy = false; // transmit data buffer is free
    3170:	781a      	ldrb	r2, [r3, #0]
    3172:	3110      	adds	r1, #16
    3174:	438a      	bics	r2, r1
    3176:	701a      	strb	r2, [r3, #0]
	ethData.saveRDPT   = 0;
    3178:	2200      	movs	r2, #0
    317a:	809a      	strh	r2, [r3, #4]
	lastBank = sfr_bank0;
    317c:	4b38      	ldr	r3, [pc, #224]	; (3260 <ETH_Init+0x10c>)
    317e:	701a      	strb	r2, [r3, #0]
	__delay_us(100);
    3180:	2064      	movs	r0, #100	; 0x64
    3182:	4b38      	ldr	r3, [pc, #224]	; (3264 <ETH_Init+0x110>)
    3184:	4798      	blx	r3
	ETH_SendSystemReset(); // software reset
    3186:	4b38      	ldr	r3, [pc, #224]	; (3268 <ETH_Init+0x114>)
    3188:	4798      	blx	r3
	__delay_ms(10);
    318a:	200a      	movs	r0, #10
    318c:	4b37      	ldr	r3, [pc, #220]	; (326c <ETH_Init+0x118>)
    318e:	4798      	blx	r3
	while (!(ENC28_Rcr8(J60_ESTAT) & 0x01))
    3190:	20fd      	movs	r0, #253	; 0xfd
    3192:	4b37      	ldr	r3, [pc, #220]	; (3270 <ETH_Init+0x11c>)
    3194:	4798      	blx	r3
    3196:	07c3      	lsls	r3, r0, #31
    3198:	d5fa      	bpl.n	3190 <ETH_Init+0x3c>
	nextPacketPointer = RXSTART;
    319a:	4e36      	ldr	r6, [pc, #216]	; (3274 <ETH_Init+0x120>)
    319c:	2300      	movs	r3, #0
    319e:	8033      	strh	r3, [r6, #0]
	ENC28_Bfs(J60_ECON2, 0x80); // enable AUTOINC
    31a0:	2180      	movs	r1, #128	; 0x80
    31a2:	20fe      	movs	r0, #254	; 0xfe
    31a4:	4b34      	ldr	r3, [pc, #208]	; (3278 <ETH_Init+0x124>)
    31a6:	4798      	blx	r3
	ENC28_Wcr16(J60_ETXSTL, TXSTART);
    31a8:	4c34      	ldr	r4, [pc, #208]	; (327c <ETH_Init+0x128>)
    31aa:	0021      	movs	r1, r4
    31ac:	2004      	movs	r0, #4
    31ae:	4d34      	ldr	r5, [pc, #208]	; (3280 <ETH_Init+0x12c>)
    31b0:	47a8      	blx	r5
	ENC28_Wcr16(J60_ETXNDL, TXEND);
    31b2:	4934      	ldr	r1, [pc, #208]	; (3284 <ETH_Init+0x130>)
    31b4:	2006      	movs	r0, #6
    31b6:	47a8      	blx	r5
	ENC28_Wcr16(J60_ERXSTL, RXSTART);
    31b8:	2100      	movs	r1, #0
    31ba:	2008      	movs	r0, #8
    31bc:	47a8      	blx	r5
	ENC28_Wcr16(J60_ERXNDL, RXEND);
    31be:	4932      	ldr	r1, [pc, #200]	; (3288 <ETH_Init+0x134>)
    31c0:	200a      	movs	r0, #10
    31c2:	47a8      	blx	r5
	ENC28_Wcr16(J60_ERDPTL, nextPacketPointer);
    31c4:	8831      	ldrh	r1, [r6, #0]
    31c6:	2000      	movs	r0, #0
    31c8:	47a8      	blx	r5
	ENC28_Wcr16(J60_ERDPTL, RXSTART);
    31ca:	2100      	movs	r1, #0
    31cc:	2000      	movs	r0, #0
    31ce:	47a8      	blx	r5
	ENC28_Wcr16(J60_EWRPTL, TXSTART);
    31d0:	0021      	movs	r1, r4
    31d2:	2002      	movs	r0, #2
    31d4:	47a8      	blx	r5
	ENC28_Wcr8(J60_ERXFCON, 0b10101001); // UCEN,OR,CRCEN,MPEN,BCEN (unicast,crc,magic packet,broadcast)
    31d6:	21a9      	movs	r1, #169	; 0xa9
    31d8:	2058      	movs	r0, #88	; 0x58
    31da:	4c2c      	ldr	r4, [pc, #176]	; (328c <ETH_Init+0x138>)
    31dc:	47a0      	blx	r4
	ENC28_Wcr8(J60_MACON1, 0x0D); // TXPAUS, RXPAUS, MARXEN
    31de:	210d      	movs	r1, #13
    31e0:	2080      	movs	r0, #128	; 0x80
    31e2:	47a0      	blx	r4
	ENC28_Wcr8(J60_MACON3, 0xB2); // VLAN padded to 64 bytes (others pad to 60 bytes), Enable CRC, Frame Check, Half Duplex
    31e4:	21b2      	movs	r1, #178	; 0xb2
    31e6:	2082      	movs	r0, #130	; 0x82
    31e8:	47a0      	blx	r4
	ENC28_Wcr8(J60_MACON4, 0x40); // DEFER set
    31ea:	2140      	movs	r1, #64	; 0x40
    31ec:	2083      	movs	r0, #131	; 0x83
    31ee:	47a0      	blx	r4
	ENC28_Wcr16(J60_MAIPGL, 0x0c12);
    31f0:	4927      	ldr	r1, [pc, #156]	; (3290 <ETH_Init+0x13c>)
    31f2:	2086      	movs	r0, #134	; 0x86
    31f4:	47a8      	blx	r5
	ENC28_Wcr8(J60_MABBIPG, 0x12);
    31f6:	2112      	movs	r1, #18
    31f8:	2084      	movs	r0, #132	; 0x84
    31fa:	47a0      	blx	r4
	ENC28_Wcr16(J60_MAMXFLL, MAX_TX_PACKET);
    31fc:	4925      	ldr	r1, [pc, #148]	; (3294 <ETH_Init+0x140>)
    31fe:	208a      	movs	r0, #138	; 0x8a
    3200:	47a8      	blx	r5
    ENC28_Wcr8(J60_ECOCON, 0x00); // RNG: Disable the clock out output to reduce EMI generation
    3202:	2100      	movs	r1, #0
    3204:	20d5      	movs	r0, #213	; 0xd5
    3206:	47a0      	blx	r4
	ENC28_Wcr8(J60_MAADR1, eth_MAC.mac_array[0]);
    3208:	7a31      	ldrb	r1, [r6, #8]
    320a:	20c4      	movs	r0, #196	; 0xc4
    320c:	47a0      	blx	r4
	ENC28_Wcr8(J60_MAADR2, eth_MAC.mac_array[1]);
    320e:	7a71      	ldrb	r1, [r6, #9]
    3210:	20c5      	movs	r0, #197	; 0xc5
    3212:	47a0      	blx	r4
	ENC28_Wcr8(J60_MAADR3, eth_MAC.mac_array[2]);
    3214:	7ab1      	ldrb	r1, [r6, #10]
    3216:	20c2      	movs	r0, #194	; 0xc2
    3218:	47a0      	blx	r4
	ENC28_Wcr8(J60_MAADR4, eth_MAC.mac_array[3]);
    321a:	7af1      	ldrb	r1, [r6, #11]
    321c:	20c3      	movs	r0, #195	; 0xc3
    321e:	47a0      	blx	r4
	ENC28_Wcr8(J60_MAADR5, eth_MAC.mac_array[4]);
    3220:	7b31      	ldrb	r1, [r6, #12]
    3222:	20c0      	movs	r0, #192	; 0xc0
    3224:	47a0      	blx	r4
	ENC28_Wcr8(J60_MAADR6, eth_MAC.mac_array[5]);
    3226:	7b71      	ldrb	r1, [r6, #13]
    3228:	20c1      	movs	r0, #193	; 0xc1
    322a:	47a0      	blx	r4
	ENC28_Wcr8(J60_ECON1, 0x04); // RXEN enabled
    322c:	2104      	movs	r1, #4
    322e:	20ff      	movs	r0, #255	; 0xff
    3230:	47a0      	blx	r4
	ENC28_PhyWrite(J60_PHCON1, 0x0000);
    3232:	2100      	movs	r1, #0
    3234:	2000      	movs	r0, #0
    3236:	4e18      	ldr	r6, [pc, #96]	; (3298 <ETH_Init+0x144>)
    3238:	47b0      	blx	r6
	ENC28_PhyWrite(J60_PHCON2, 0x0100); // Do not transmit loopback
    323a:	2180      	movs	r1, #128	; 0x80
    323c:	0049      	lsls	r1, r1, #1
    323e:	2010      	movs	r0, #16
    3240:	47b0      	blx	r6
	ENC28_PhyWrite(J60_PHLCON, 0x0472); // LED control - LEDA = Link, LEDB = TX/RX, Stretched LED
    3242:	4916      	ldr	r1, [pc, #88]	; (329c <ETH_Init+0x148>)
    3244:	2014      	movs	r0, #20
    3246:	47b0      	blx	r6
	ENC28_Wcr8(J60_EIE, 0xDB);   // Enable PKTIE,INTIE,LINKIE,TXIE,TXERIE,RXERIE
    3248:	21db      	movs	r1, #219	; 0xdb
    324a:	20fb      	movs	r0, #251	; 0xfb
    324c:	47a0      	blx	r4
	ENC28_Wcr16(J60_PHIE, 0x12); // Enable PLNKIE and PGEIE
    324e:	2112      	movs	r1, #18
    3250:	2012      	movs	r0, #18
    3252:	47a8      	blx	r5
	ETH_CheckLinkUp();
    3254:	4b12      	ldr	r3, [pc, #72]	; (32a0 <ETH_Init+0x14c>)
    3256:	4798      	blx	r3
}
    3258:	bd70      	pop	{r4, r5, r6, pc}
    325a:	46c0      	nop			; (mov r8, r8)
    325c:	20003e98 	.word	0x20003e98
    3260:	20003ea0 	.word	0x20003ea0
    3264:	00001d71 	.word	0x00001d71
    3268:	00003111 	.word	0x00003111
    326c:	00001d91 	.word	0x00001d91
    3270:	00002e79 	.word	0x00002e79
    3274:	2000085c 	.word	0x2000085c
    3278:	00002ea9 	.word	0x00002ea9
    327c:	00001a23 	.word	0x00001a23
    3280:	00002f19 	.word	0x00002f19
    3284:	00001fff 	.word	0x00001fff
    3288:	00001a21 	.word	0x00001a21
    328c:	00002ee1 	.word	0x00002ee1
    3290:	00000c12 	.word	0x00000c12
    3294:	000005dc 	.word	0x000005dc
    3298:	00002f85 	.word	0x00002f85
    329c:	00000472 	.word	0x00000472
    32a0:	0000312d 	.word	0x0000312d

000032a4 <ETH_EventHandler>:
{
    32a4:	b570      	push	{r4, r5, r6, lr}
	eir_val.val     = ENC28_Rcr8(J60_EIR);
    32a6:	20fc      	movs	r0, #252	; 0xfc
    32a8:	4b23      	ldr	r3, [pc, #140]	; (3338 <ETH_EventHandler+0x94>)
    32aa:	4798      	blx	r3
    32ac:	0004      	movs	r4, r0
    32ae:	0005      	movs	r5, r0
	phstat2_val.val = ENC28_Rcr16(J60_PHSTAT2);
    32b0:	2011      	movs	r0, #17
    32b2:	4b22      	ldr	r3, [pc, #136]	; (333c <ETH_EventHandler+0x98>)
    32b4:	4798      	blx	r3
    32b6:	0006      	movs	r6, r0
	if (eir_val.LINKIF) // something about the link changed.... update the link parameters
    32b8:	06e3      	lsls	r3, r4, #27
    32ba:	d40d      	bmi.n	32d8 <ETH_EventHandler+0x34>
	if (eir_val.TXIF) // finished sending a packet
    32bc:	0723      	lsls	r3, r4, #28
    32be:	d42a      	bmi.n	3316 <ETH_EventHandler+0x72>
	if (eir_val.PKTIF || ENC28_Rcr8(J60_EPKTCNT)) // Packet receive buffer has at least 1 unprocessed packet
    32c0:	0663      	lsls	r3, r4, #25
    32c2:	d532      	bpl.n	332a <ETH_EventHandler+0x86>
		ethData.pktReady = true;
    32c4:	4a1e      	ldr	r2, [pc, #120]	; (3340 <ETH_EventHandler+0x9c>)
    32c6:	7813      	ldrb	r3, [r2, #0]
    32c8:	2102      	movs	r1, #2
    32ca:	430b      	orrs	r3, r1
    32cc:	7013      	strb	r3, [r2, #0]
	ENC28_Wcr8(J60_EIR, eir_val.val); // write the eir value back to clear any of the interrupts
    32ce:	b2e9      	uxtb	r1, r5
    32d0:	20fc      	movs	r0, #252	; 0xfc
    32d2:	4b1c      	ldr	r3, [pc, #112]	; (3344 <ETH_EventHandler+0xa0>)
    32d4:	4798      	blx	r3
}
    32d6:	bd70      	pop	{r4, r5, r6, pc}
		ethData.linkChange = true;
    32d8:	4b19      	ldr	r3, [pc, #100]	; (3340 <ETH_EventHandler+0x9c>)
    32da:	781a      	ldrb	r2, [r3, #0]
    32dc:	2110      	movs	r1, #16
    32de:	430a      	orrs	r2, r1
    32e0:	701a      	strb	r2, [r3, #0]
		ethData.up         = false;
    32e2:	781a      	ldrb	r2, [r3, #0]
    32e4:	2104      	movs	r1, #4
    32e6:	438a      	bics	r2, r1
    32e8:	701a      	strb	r2, [r3, #0]
		if (ETH_CheckLinkUp()) {
    32ea:	4b17      	ldr	r3, [pc, #92]	; (3348 <ETH_EventHandler+0xa4>)
    32ec:	4798      	blx	r3
		if (phstat2_val.DPXSTAT) // Update MAC duplex settings to match PHY duplex setting
    32ee:	05b3      	lsls	r3, r6, #22
    32f0:	d508      	bpl.n	3304 <ETH_EventHandler+0x60>
			ENC28_Wcr16(J60_MABBIPG, 0x15); // Switching to full duplex
    32f2:	2115      	movs	r1, #21
    32f4:	2084      	movs	r0, #132	; 0x84
    32f6:	4b15      	ldr	r3, [pc, #84]	; (334c <ETH_EventHandler+0xa8>)
    32f8:	4798      	blx	r3
			ENC28_Bfs(J60_PHSTAT2, 0x01);
    32fa:	2101      	movs	r1, #1
    32fc:	2011      	movs	r0, #17
    32fe:	4b14      	ldr	r3, [pc, #80]	; (3350 <ETH_EventHandler+0xac>)
    3300:	4798      	blx	r3
    3302:	e7db      	b.n	32bc <ETH_EventHandler+0x18>
			ENC28_Wcr16(J60_MABBIPG, 0x12); // Switching to half duplex
    3304:	2112      	movs	r1, #18
    3306:	2084      	movs	r0, #132	; 0x84
    3308:	4b10      	ldr	r3, [pc, #64]	; (334c <ETH_EventHandler+0xa8>)
    330a:	4798      	blx	r3
			ENC28_Bfc(J60_PHSTAT2, 0x01);
    330c:	2101      	movs	r1, #1
    330e:	2011      	movs	r0, #17
    3310:	4b10      	ldr	r3, [pc, #64]	; (3354 <ETH_EventHandler+0xb0>)
    3312:	4798      	blx	r3
    3314:	e7d2      	b.n	32bc <ETH_EventHandler+0x18>
		ethData.bufferBusy = false;
    3316:	4a0a      	ldr	r2, [pc, #40]	; (3340 <ETH_EventHandler+0x9c>)
    3318:	7813      	ldrb	r3, [r2, #0]
    331a:	2120      	movs	r1, #32
    331c:	438b      	bics	r3, r1
    331e:	7013      	strb	r3, [r2, #0]
		ENC28_Bfc(J60_EIR, 0x08);
    3320:	3918      	subs	r1, #24
    3322:	20fc      	movs	r0, #252	; 0xfc
    3324:	4b0b      	ldr	r3, [pc, #44]	; (3354 <ETH_EventHandler+0xb0>)
    3326:	4798      	blx	r3
    3328:	e7ca      	b.n	32c0 <ETH_EventHandler+0x1c>
	if (eir_val.PKTIF || ENC28_Rcr8(J60_EPKTCNT)) // Packet receive buffer has at least 1 unprocessed packet
    332a:	2059      	movs	r0, #89	; 0x59
    332c:	4b02      	ldr	r3, [pc, #8]	; (3338 <ETH_EventHandler+0x94>)
    332e:	4798      	blx	r3
    3330:	2800      	cmp	r0, #0
    3332:	d1c7      	bne.n	32c4 <ETH_EventHandler+0x20>
    3334:	e7cb      	b.n	32ce <ETH_EventHandler+0x2a>
    3336:	46c0      	nop			; (mov r8, r8)
    3338:	00002e79 	.word	0x00002e79
    333c:	00002fb5 	.word	0x00002fb5
    3340:	20003e98 	.word	0x20003e98
    3344:	00002ee1 	.word	0x00002ee1
    3348:	0000312d 	.word	0x0000312d
    334c:	00002f19 	.word	0x00002f19
    3350:	00002ea9 	.word	0x00002ea9
    3354:	00003015 	.word	0x00003015

00003358 <ETH_Read8>:
 * Read 1 byte of data from the RX Buffer
 * @return
 */

uint8_t ETH_Read8(void)
{
    3358:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    335a:	24c0      	movs	r4, #192	; 0xc0
    335c:	05e4      	lsls	r4, r4, #23
    335e:	2580      	movs	r5, #128	; 0x80
    3360:	012d      	lsls	r5, r5, #4
    3362:	6165      	str	r5, [r4, #20]
	uint8_t b;

	ETH_NCS_LOW();
	ETH_SPI_WRITE8(rbm_inst);
    3364:	213a      	movs	r1, #58	; 0x3a
    3366:	2001      	movs	r0, #1
    3368:	4e03      	ldr	r6, [pc, #12]	; (3378 <ETH_Read8+0x20>)
    336a:	47b0      	blx	r6
	b = ETH_SPI_READ8();
    336c:	2100      	movs	r1, #0
    336e:	2000      	movs	r0, #0
    3370:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3372:	61a5      	str	r5, [r4, #24]
	ETH_NCS_HIGH();

	return b;
}
    3374:	bd70      	pop	{r4, r5, r6, pc}
    3376:	46c0      	nop			; (mov r8, r8)
    3378:	00005761 	.word	0x00005761

0000337c <ETH_ComputeChecksum>:
	// TODO: RESET(); // reboot for now
	return DMA_TIMEOUT;
}

static uint16_t ETH_ComputeChecksum(uint16_t len, uint16_t seed)
{
    337c:	b5f0      	push	{r4, r5, r6, r7, lr}
    337e:	b083      	sub	sp, #12
    3380:	0005      	movs	r5, r0
    3382:	000c      	movs	r4, r1
	uint32_t cksm;
	uint16_t v;

	cksm = seed;

	while (len > 1) {
    3384:	e00c      	b.n	33a0 <ETH_ComputeChecksum+0x24>
		v               = 0;
    3386:	466b      	mov	r3, sp
    3388:	1d9e      	adds	r6, r3, #6
    338a:	2300      	movs	r3, #0
    338c:	8033      	strh	r3, [r6, #0]
		((char *)&v)[1] = ETH_Read8();
    338e:	4f11      	ldr	r7, [pc, #68]	; (33d4 <ETH_ComputeChecksum+0x58>)
    3390:	47b8      	blx	r7
    3392:	7070      	strb	r0, [r6, #1]
		((char *)&v)[0] = ETH_Read8();
    3394:	47b8      	blx	r7
    3396:	7030      	strb	r0, [r6, #0]
		cksm += v;
    3398:	8833      	ldrh	r3, [r6, #0]
    339a:	18e4      	adds	r4, r4, r3
		len -= 2;
    339c:	3d02      	subs	r5, #2
    339e:	b2ad      	uxth	r5, r5
	while (len > 1) {
    33a0:	2d01      	cmp	r5, #1
    33a2:	d8f0      	bhi.n	3386 <ETH_ComputeChecksum+0xa>
	}

	if (len) {
    33a4:	2d00      	cmp	r5, #0
    33a6:	d00e      	beq.n	33c6 <ETH_ComputeChecksum+0x4a>
		v               = 0;
    33a8:	466b      	mov	r3, sp
    33aa:	1d9d      	adds	r5, r3, #6
    33ac:	2300      	movs	r3, #0
    33ae:	802b      	strh	r3, [r5, #0]
		((char *)&v)[1] = ETH_Read8();
    33b0:	4b08      	ldr	r3, [pc, #32]	; (33d4 <ETH_ComputeChecksum+0x58>)
    33b2:	4798      	blx	r3
    33b4:	7068      	strb	r0, [r5, #1]
		((char *)&v)[0] = 0;
    33b6:	2300      	movs	r3, #0
    33b8:	702b      	strb	r3, [r5, #0]
		cksm += v;
    33ba:	882b      	ldrh	r3, [r5, #0]
    33bc:	18e4      	adds	r4, r4, r3
    33be:	e002      	b.n	33c6 <ETH_ComputeChecksum+0x4a>
	}

	// wrap the checksum
	while (cksm >> 16) {
		cksm = (cksm & 0x0FFFF) + (cksm >> 16);
    33c0:	0424      	lsls	r4, r4, #16
    33c2:	0c24      	lsrs	r4, r4, #16
    33c4:	191c      	adds	r4, r3, r4
	while (cksm >> 16) {
    33c6:	0c23      	lsrs	r3, r4, #16
    33c8:	d1fa      	bne.n	33c0 <ETH_ComputeChecksum+0x44>
	}

	// invert the number.
	cksm = ~cksm;
    33ca:	43e0      	mvns	r0, r4

	// Return the resulting checksum
	return cksm;
    33cc:	b280      	uxth	r0, r0
}
    33ce:	b003      	add	sp, #12
    33d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33d2:	46c0      	nop			; (mov r8, r8)
    33d4:	00003359 	.word	0x00003359

000033d8 <ETH_Read16>:
{
    33d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    33da:	25c0      	movs	r5, #192	; 0xc0
    33dc:	05ed      	lsls	r5, r5, #23
    33de:	2680      	movs	r6, #128	; 0x80
    33e0:	0136      	lsls	r6, r6, #4
    33e2:	616e      	str	r6, [r5, #20]
	ETH_SPI_WRITE8(rbm_inst);
    33e4:	213a      	movs	r1, #58	; 0x3a
    33e6:	2001      	movs	r0, #1
    33e8:	4f07      	ldr	r7, [pc, #28]	; (3408 <ETH_Read16+0x30>)
    33ea:	47b8      	blx	r7
	b = ETH_SPI_READ8() << 8;
    33ec:	2100      	movs	r1, #0
    33ee:	2000      	movs	r0, #0
    33f0:	47b8      	blx	r7
    33f2:	b280      	uxth	r0, r0
    33f4:	0200      	lsls	r0, r0, #8
    33f6:	b284      	uxth	r4, r0
	b |= ETH_SPI_READ8();
    33f8:	2100      	movs	r1, #0
    33fa:	2000      	movs	r0, #0
    33fc:	47b8      	blx	r7
    33fe:	b280      	uxth	r0, r0
    3400:	4320      	orrs	r0, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3402:	61ae      	str	r6, [r5, #24]
}
    3404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3406:	46c0      	nop			; (mov r8, r8)
    3408:	00005761 	.word	0x00005761

0000340c <ETH_Read32>:
{
    340c:	b5f0      	push	{r4, r5, r6, r7, lr}
    340e:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3410:	26c0      	movs	r6, #192	; 0xc0
    3412:	05f6      	lsls	r6, r6, #23
    3414:	2780      	movs	r7, #128	; 0x80
    3416:	013f      	lsls	r7, r7, #4
    3418:	6177      	str	r7, [r6, #20]
	ETH_SPI_WRITE8(rbm_inst);
    341a:	213a      	movs	r1, #58	; 0x3a
    341c:	2001      	movs	r0, #1
    341e:	4c0b      	ldr	r4, [pc, #44]	; (344c <ETH_Read32+0x40>)
    3420:	47a0      	blx	r4
	((char *)&b)[3] = ETH_SPI_READ8();
    3422:	2100      	movs	r1, #0
    3424:	2000      	movs	r0, #0
    3426:	47a0      	blx	r4
    3428:	ad01      	add	r5, sp, #4
    342a:	70e8      	strb	r0, [r5, #3]
	((char *)&b)[2] = ETH_SPI_READ8();
    342c:	2100      	movs	r1, #0
    342e:	2000      	movs	r0, #0
    3430:	47a0      	blx	r4
    3432:	70a8      	strb	r0, [r5, #2]
	((char *)&b)[1] = ETH_SPI_READ8();
    3434:	2100      	movs	r1, #0
    3436:	2000      	movs	r0, #0
    3438:	47a0      	blx	r4
    343a:	7068      	strb	r0, [r5, #1]
	((char *)&b)[0] = ETH_SPI_READ8();
    343c:	2100      	movs	r1, #0
    343e:	2000      	movs	r0, #0
    3440:	47a0      	blx	r4
    3442:	7028      	strb	r0, [r5, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3444:	61b7      	str	r7, [r6, #24]
}
    3446:	9801      	ldr	r0, [sp, #4]
    3448:	b003      	add	sp, #12
    344a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    344c:	00005761 	.word	0x00005761

00003450 <ETH_ReadBlock>:
{
    3450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3452:	0005      	movs	r5, r0
	if (rxPacketStatusVector.byteCount < length)
    3454:	4b11      	ldr	r3, [pc, #68]	; (349c <ETH_ReadBlock+0x4c>)
    3456:	889f      	ldrh	r7, [r3, #4]
    3458:	42b9      	cmp	r1, r7
    345a:	d800      	bhi.n	345e <ETH_ReadBlock+0xe>
	uint16_t readCount = length;
    345c:	000f      	movs	r7, r1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    345e:	2280      	movs	r2, #128	; 0x80
    3460:	0112      	lsls	r2, r2, #4
    3462:	23c0      	movs	r3, #192	; 0xc0
    3464:	05db      	lsls	r3, r3, #23
    3466:	615a      	str	r2, [r3, #20]
	ETH_SPI_WRITE8(rbm_inst);
    3468:	213a      	movs	r1, #58	; 0x3a
    346a:	2001      	movs	r0, #1
    346c:	4b0c      	ldr	r3, [pc, #48]	; (34a0 <ETH_ReadBlock+0x50>)
    346e:	4798      	blx	r3
	length = readCount;
    3470:	003a      	movs	r2, r7
	while (length--)
    3472:	e007      	b.n	3484 <ETH_ReadBlock+0x34>
		*p++ = ETH_SPI_READ8();
    3474:	1c6e      	adds	r6, r5, #1
    3476:	2100      	movs	r1, #0
    3478:	2000      	movs	r0, #0
    347a:	4b09      	ldr	r3, [pc, #36]	; (34a0 <ETH_ReadBlock+0x50>)
    347c:	4798      	blx	r3
    347e:	7028      	strb	r0, [r5, #0]
    3480:	0035      	movs	r5, r6
	while (length--)
    3482:	0022      	movs	r2, r4
    3484:	1e54      	subs	r4, r2, #1
    3486:	b2a4      	uxth	r4, r4
    3488:	2a00      	cmp	r2, #0
    348a:	d1f3      	bne.n	3474 <ETH_ReadBlock+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    348c:	2280      	movs	r2, #128	; 0x80
    348e:	0112      	lsls	r2, r2, #4
    3490:	23c0      	movs	r3, #192	; 0xc0
    3492:	05db      	lsls	r3, r3, #23
    3494:	619a      	str	r2, [r3, #24]
}
    3496:	0038      	movs	r0, r7
    3498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    349a:	46c0      	nop			; (mov r8, r8)
    349c:	2000085c 	.word	0x2000085c
    34a0:	00005761 	.word	0x00005761

000034a4 <ETH_Write8>:
{
    34a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34a6:	0005      	movs	r5, r0
	TXPacketSize += 1;
    34a8:	4a08      	ldr	r2, [pc, #32]	; (34cc <ETH_Write8+0x28>)
    34aa:	8813      	ldrh	r3, [r2, #0]
    34ac:	3301      	adds	r3, #1
    34ae:	8013      	strh	r3, [r2, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    34b0:	24c0      	movs	r4, #192	; 0xc0
    34b2:	05e4      	lsls	r4, r4, #23
    34b4:	2680      	movs	r6, #128	; 0x80
    34b6:	0136      	lsls	r6, r6, #4
    34b8:	6166      	str	r6, [r4, #20]
	ETH_SPI_WRITE8(wbm_inst);
    34ba:	217a      	movs	r1, #122	; 0x7a
    34bc:	2001      	movs	r0, #1
    34be:	4f04      	ldr	r7, [pc, #16]	; (34d0 <ETH_Write8+0x2c>)
    34c0:	47b8      	blx	r7
	ETH_SPI_WRITE8(data);
    34c2:	0029      	movs	r1, r5
    34c4:	2001      	movs	r0, #1
    34c6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    34c8:	61a6      	str	r6, [r4, #24]
}
    34ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34cc:	20003e94 	.word	0x20003e94
    34d0:	00005761 	.word	0x00005761

000034d4 <ETH_Write16>:
{
    34d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34d6:	0004      	movs	r4, r0
	TXPacketSize += 2;
    34d8:	4a0a      	ldr	r2, [pc, #40]	; (3504 <ETH_Write16+0x30>)
    34da:	8813      	ldrh	r3, [r2, #0]
    34dc:	3302      	adds	r3, #2
    34de:	8013      	strh	r3, [r2, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    34e0:	26c0      	movs	r6, #192	; 0xc0
    34e2:	05f6      	lsls	r6, r6, #23
    34e4:	2780      	movs	r7, #128	; 0x80
    34e6:	013f      	lsls	r7, r7, #4
    34e8:	6177      	str	r7, [r6, #20]
	ETH_SPI_WRITE8(wbm_inst);
    34ea:	217a      	movs	r1, #122	; 0x7a
    34ec:	2001      	movs	r0, #1
    34ee:	4d06      	ldr	r5, [pc, #24]	; (3508 <ETH_Write16+0x34>)
    34f0:	47a8      	blx	r5
	ETH_SPI_WRITE8(data >> 8);
    34f2:	0a21      	lsrs	r1, r4, #8
    34f4:	2001      	movs	r0, #1
    34f6:	47a8      	blx	r5
	ETH_SPI_WRITE8(data);
    34f8:	b2e1      	uxtb	r1, r4
    34fa:	2001      	movs	r0, #1
    34fc:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    34fe:	61b7      	str	r7, [r6, #24]
}
    3500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3502:	46c0      	nop			; (mov r8, r8)
    3504:	20003e94 	.word	0x20003e94
    3508:	00005761 	.word	0x00005761

0000350c <ETH_Write32>:
{
    350c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    350e:	0004      	movs	r4, r0
	TXPacketSize += 4;
    3510:	4a0e      	ldr	r2, [pc, #56]	; (354c <ETH_Write32+0x40>)
    3512:	8813      	ldrh	r3, [r2, #0]
    3514:	3304      	adds	r3, #4
    3516:	8013      	strh	r3, [r2, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3518:	26c0      	movs	r6, #192	; 0xc0
    351a:	05f6      	lsls	r6, r6, #23
    351c:	2780      	movs	r7, #128	; 0x80
    351e:	013f      	lsls	r7, r7, #4
    3520:	6177      	str	r7, [r6, #20]
	ETH_SPI_WRITE8(wbm_inst);
    3522:	217a      	movs	r1, #122	; 0x7a
    3524:	2001      	movs	r0, #1
    3526:	4d0a      	ldr	r5, [pc, #40]	; (3550 <ETH_Write32+0x44>)
    3528:	47a8      	blx	r5
	ETH_SPI_WRITE8(data >> 24);
    352a:	0e21      	lsrs	r1, r4, #24
    352c:	2001      	movs	r0, #1
    352e:	47a8      	blx	r5
	ETH_SPI_WRITE8(data >> 16);
    3530:	0c21      	lsrs	r1, r4, #16
    3532:	b2c9      	uxtb	r1, r1
    3534:	2001      	movs	r0, #1
    3536:	47a8      	blx	r5
	ETH_SPI_WRITE8(data >> 8);
    3538:	0a21      	lsrs	r1, r4, #8
    353a:	b2c9      	uxtb	r1, r1
    353c:	2001      	movs	r0, #1
    353e:	47a8      	blx	r5
	ETH_SPI_WRITE8(data);
    3540:	b2e1      	uxtb	r1, r4
    3542:	2001      	movs	r0, #1
    3544:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3546:	61b7      	str	r7, [r6, #24]
}
    3548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    354a:	46c0      	nop			; (mov r8, r8)
    354c:	20003e94 	.word	0x20003e94
    3550:	00005761 	.word	0x00005761

00003554 <ETH_WriteBlock>:
{
    3554:	b570      	push	{r4, r5, r6, lr}
    3556:	0004      	movs	r4, r0
    3558:	000d      	movs	r5, r1
	TXPacketSize += length;
    355a:	4a10      	ldr	r2, [pc, #64]	; (359c <ETH_WriteBlock+0x48>)
    355c:	8813      	ldrh	r3, [r2, #0]
    355e:	18cb      	adds	r3, r1, r3
    3560:	8013      	strh	r3, [r2, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3562:	2280      	movs	r2, #128	; 0x80
    3564:	0112      	lsls	r2, r2, #4
    3566:	23c0      	movs	r3, #192	; 0xc0
    3568:	05db      	lsls	r3, r3, #23
    356a:	615a      	str	r2, [r3, #20]
	ETH_SPI_WRITE8(wbm_inst);
    356c:	217a      	movs	r1, #122	; 0x7a
    356e:	2001      	movs	r0, #1
    3570:	4b0b      	ldr	r3, [pc, #44]	; (35a0 <ETH_WriteBlock+0x4c>)
    3572:	4798      	blx	r3
	char *p = data;
    3574:	0020      	movs	r0, r4
	while (length--) {
    3576:	e006      	b.n	3586 <ETH_WriteBlock+0x32>
		ETH_SPI_WRITE8(*p++);
    3578:	1c45      	adds	r5, r0, #1
    357a:	7801      	ldrb	r1, [r0, #0]
    357c:	2001      	movs	r0, #1
    357e:	4b08      	ldr	r3, [pc, #32]	; (35a0 <ETH_WriteBlock+0x4c>)
    3580:	4798      	blx	r3
    3582:	0028      	movs	r0, r5
	while (length--) {
    3584:	0025      	movs	r5, r4
    3586:	1e6c      	subs	r4, r5, #1
    3588:	b2a4      	uxth	r4, r4
    358a:	2d00      	cmp	r5, #0
    358c:	d1f4      	bne.n	3578 <ETH_WriteBlock+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    358e:	2280      	movs	r2, #128	; 0x80
    3590:	0112      	lsls	r2, r2, #4
    3592:	23c0      	movs	r3, #192	; 0xc0
    3594:	05db      	lsls	r3, r3, #23
    3596:	619a      	str	r2, [r3, #24]
}
    3598:	0020      	movs	r0, r4
    359a:	bd70      	pop	{r4, r5, r6, pc}
    359c:	20003e94 	.word	0x20003e94
    35a0:	00005761 	.word	0x00005761

000035a4 <ETH_WriteStart>:
{
    35a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35a6:	46ce      	mov	lr, r9
    35a8:	4647      	mov	r7, r8
    35aa:	b580      	push	{r7, lr}
    35ac:	0004      	movs	r4, r0
    35ae:	000d      	movs	r5, r1
	if (ethData.bufferBusy) {
    35b0:	4b31      	ldr	r3, [pc, #196]	; (3678 <ETH_WriteStart+0xd4>)
    35b2:	681b      	ldr	r3, [r3, #0]
    35b4:	069b      	lsls	r3, r3, #26
    35b6:	d504      	bpl.n	35c2 <ETH_WriteStart+0x1e>
		return BUFFER_BUSY;
    35b8:	2003      	movs	r0, #3
}
    35ba:	bc0c      	pop	{r2, r3}
    35bc:	4690      	mov	r8, r2
    35be:	4699      	mov	r9, r3
    35c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((ENC28_Rcr8(J60_ECON1) & 0x08)) {
    35c2:	20ff      	movs	r0, #255	; 0xff
    35c4:	4b2d      	ldr	r3, [pc, #180]	; (367c <ETH_WriteStart+0xd8>)
    35c6:	4798      	blx	r3
    35c8:	0703      	lsls	r3, r0, #28
    35ca:	d501      	bpl.n	35d0 <ETH_WriteStart+0x2c>
		return TX_LOGIC_NOT_IDLE;
    35cc:	2004      	movs	r0, #4
    35ce:	e7f4      	b.n	35ba <ETH_WriteStart+0x16>
	ENC28_Wcr16(J60_ETXSTL, TXSTART);
    35d0:	4f2b      	ldr	r7, [pc, #172]	; (3680 <ETH_WriteStart+0xdc>)
    35d2:	0039      	movs	r1, r7
    35d4:	2004      	movs	r0, #4
    35d6:	4e2b      	ldr	r6, [pc, #172]	; (3684 <ETH_WriteStart+0xe0>)
    35d8:	47b0      	blx	r6
	ENC28_Wcr16(J60_EWRPTL, TXSTART);
    35da:	0039      	movs	r1, r7
    35dc:	2002      	movs	r0, #2
    35de:	47b0      	blx	r6
	TXPacketSize = 0;
    35e0:	4f29      	ldr	r7, [pc, #164]	; (3688 <ETH_WriteStart+0xe4>)
    35e2:	2300      	movs	r3, #0
    35e4:	803b      	strh	r3, [r7, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    35e6:	23c0      	movs	r3, #192	; 0xc0
    35e8:	05db      	lsls	r3, r3, #23
    35ea:	4698      	mov	r8, r3
    35ec:	2380      	movs	r3, #128	; 0x80
    35ee:	011b      	lsls	r3, r3, #4
    35f0:	4699      	mov	r9, r3
    35f2:	4643      	mov	r3, r8
    35f4:	464a      	mov	r2, r9
    35f6:	615a      	str	r2, [r3, #20]
	ETH_SPI_WRITE8(wbm_inst);
    35f8:	217a      	movs	r1, #122	; 0x7a
    35fa:	2001      	movs	r0, #1
    35fc:	4e23      	ldr	r6, [pc, #140]	; (368c <ETH_WriteStart+0xe8>)
    35fe:	47b0      	blx	r6
	ETH_SPI_WRITE8(Control_Byte);
    3600:	2100      	movs	r1, #0
    3602:	2001      	movs	r0, #1
    3604:	47b0      	blx	r6
	ETH_SPI_WRITE8(dest_mac->mac_array[0]);
    3606:	7821      	ldrb	r1, [r4, #0]
    3608:	2001      	movs	r0, #1
    360a:	47b0      	blx	r6
	ETH_SPI_WRITE8(dest_mac->mac_array[1]);
    360c:	7861      	ldrb	r1, [r4, #1]
    360e:	2001      	movs	r0, #1
    3610:	47b0      	blx	r6
	ETH_SPI_WRITE8(dest_mac->mac_array[2]);
    3612:	78a1      	ldrb	r1, [r4, #2]
    3614:	2001      	movs	r0, #1
    3616:	47b0      	blx	r6
	ETH_SPI_WRITE8(dest_mac->mac_array[3]);
    3618:	78e1      	ldrb	r1, [r4, #3]
    361a:	2001      	movs	r0, #1
    361c:	47b0      	blx	r6
	ETH_SPI_WRITE8(dest_mac->mac_array[4]);
    361e:	7921      	ldrb	r1, [r4, #4]
    3620:	2001      	movs	r0, #1
    3622:	47b0      	blx	r6
	ETH_SPI_WRITE8(dest_mac->mac_array[5]);
    3624:	7961      	ldrb	r1, [r4, #5]
    3626:	2001      	movs	r0, #1
    3628:	47b0      	blx	r6
	ETH_SPI_WRITE8(eth_MAC.mac_array[0]);
    362a:	4c19      	ldr	r4, [pc, #100]	; (3690 <ETH_WriteStart+0xec>)
    362c:	7a21      	ldrb	r1, [r4, #8]
    362e:	2001      	movs	r0, #1
    3630:	47b0      	blx	r6
	ETH_SPI_WRITE8(eth_MAC.mac_array[1]);
    3632:	7a61      	ldrb	r1, [r4, #9]
    3634:	2001      	movs	r0, #1
    3636:	47b0      	blx	r6
	ETH_SPI_WRITE8(eth_MAC.mac_array[2]);
    3638:	7aa1      	ldrb	r1, [r4, #10]
    363a:	2001      	movs	r0, #1
    363c:	47b0      	blx	r6
	ETH_SPI_WRITE8(eth_MAC.mac_array[3]);
    363e:	7ae1      	ldrb	r1, [r4, #11]
    3640:	2001      	movs	r0, #1
    3642:	47b0      	blx	r6
	ETH_SPI_WRITE8(eth_MAC.mac_array[4]);
    3644:	7b21      	ldrb	r1, [r4, #12]
    3646:	2001      	movs	r0, #1
    3648:	47b0      	blx	r6
	ETH_SPI_WRITE8(eth_MAC.mac_array[5]);
    364a:	7b61      	ldrb	r1, [r4, #13]
    364c:	2001      	movs	r0, #1
    364e:	47b0      	blx	r6
	ETH_SPI_WRITE8(type >> 8);
    3650:	0a29      	lsrs	r1, r5, #8
    3652:	2001      	movs	r0, #1
    3654:	47b0      	blx	r6
	ETH_SPI_WRITE8(type & 0x0FF);
    3656:	b2e9      	uxtb	r1, r5
    3658:	2001      	movs	r0, #1
    365a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    365c:	4643      	mov	r3, r8
    365e:	464a      	mov	r2, r9
    3660:	619a      	str	r2, [r3, #24]
	TXPacketSize += 15;
    3662:	883b      	ldrh	r3, [r7, #0]
    3664:	330f      	adds	r3, #15
    3666:	803b      	strh	r3, [r7, #0]
	ethData.bufferBusy = true;
    3668:	4a03      	ldr	r2, [pc, #12]	; (3678 <ETH_WriteStart+0xd4>)
    366a:	7813      	ldrb	r3, [r2, #0]
    366c:	2120      	movs	r1, #32
    366e:	430b      	orrs	r3, r1
    3670:	7013      	strb	r3, [r2, #0]
	return SUCCESS;
    3672:	2001      	movs	r0, #1
    3674:	e7a1      	b.n	35ba <ETH_WriteStart+0x16>
    3676:	46c0      	nop			; (mov r8, r8)
    3678:	20003e98 	.word	0x20003e98
    367c:	00002e79 	.word	0x00002e79
    3680:	00001a23 	.word	0x00001a23
    3684:	00002f19 	.word	0x00002f19
    3688:	20003e94 	.word	0x20003e94
    368c:	00005761 	.word	0x00005761
    3690:	2000085c 	.word	0x2000085c

00003694 <ETH_Send>:
{
    3694:	b510      	push	{r4, lr}
	ENC28_Wcr16(J60_ETXNDL, TXSTART + TXPacketSize);
    3696:	4b10      	ldr	r3, [pc, #64]	; (36d8 <ETH_Send+0x44>)
    3698:	8819      	ldrh	r1, [r3, #0]
    369a:	4b10      	ldr	r3, [pc, #64]	; (36dc <ETH_Send+0x48>)
    369c:	469c      	mov	ip, r3
    369e:	4461      	add	r1, ip
    36a0:	b289      	uxth	r1, r1
    36a2:	2006      	movs	r0, #6
    36a4:	4b0e      	ldr	r3, [pc, #56]	; (36e0 <ETH_Send+0x4c>)
    36a6:	4798      	blx	r3
	if (!ethData.up) {
    36a8:	4b0e      	ldr	r3, [pc, #56]	; (36e4 <ETH_Send+0x50>)
    36aa:	681b      	ldr	r3, [r3, #0]
    36ac:	075b      	lsls	r3, r3, #29
    36ae:	d401      	bmi.n	36b4 <ETH_Send+0x20>
		return LINK_NOT_FOUND;
    36b0:	2002      	movs	r0, #2
}
    36b2:	bd10      	pop	{r4, pc}
	if (!ethData.bufferBusy) {
    36b4:	4b0b      	ldr	r3, [pc, #44]	; (36e4 <ETH_Send+0x50>)
    36b6:	681b      	ldr	r3, [r3, #0]
    36b8:	069b      	lsls	r3, r3, #26
    36ba:	d401      	bmi.n	36c0 <ETH_Send+0x2c>
		return BUFFER_BUSY;
    36bc:	2003      	movs	r0, #3
    36be:	e7f8      	b.n	36b2 <ETH_Send+0x1e>
	ENC28_Bfs(J60_ECON1, 0x08); // start the transmission
    36c0:	2108      	movs	r1, #8
    36c2:	20ff      	movs	r0, #255	; 0xff
    36c4:	4b08      	ldr	r3, [pc, #32]	; (36e8 <ETH_Send+0x54>)
    36c6:	4798      	blx	r3
	ethData.bufferBusy = false;
    36c8:	4a06      	ldr	r2, [pc, #24]	; (36e4 <ETH_Send+0x50>)
    36ca:	7813      	ldrb	r3, [r2, #0]
    36cc:	2120      	movs	r1, #32
    36ce:	438b      	bics	r3, r1
    36d0:	7013      	strb	r3, [r2, #0]
	return SUCCESS;
    36d2:	2001      	movs	r0, #1
    36d4:	e7ed      	b.n	36b2 <ETH_Send+0x1e>
    36d6:	46c0      	nop			; (mov r8, r8)
    36d8:	20003e94 	.word	0x20003e94
    36dc:	00001a23 	.word	0x00001a23
    36e0:	00002f19 	.word	0x00002f19
    36e4:	20003e98 	.word	0x20003e98
    36e8:	00002ea9 	.word	0x00002ea9

000036ec <ETH_Dump>:
{
    36ec:	b510      	push	{r4, lr}
	length = (rxPacketStatusVector.byteCount <= length) ? rxPacketStatusVector.byteCount : length;
    36ee:	4b0b      	ldr	r3, [pc, #44]	; (371c <ETH_Dump+0x30>)
    36f0:	889b      	ldrh	r3, [r3, #4]
    36f2:	1c1c      	adds	r4, r3, #0
    36f4:	4283      	cmp	r3, r0
    36f6:	d900      	bls.n	36fa <ETH_Dump+0xe>
    36f8:	1c04      	adds	r4, r0, #0
    36fa:	b2a4      	uxth	r4, r4
	if (length) {
    36fc:	2c00      	cmp	r4, #0
    36fe:	d100      	bne.n	3702 <ETH_Dump+0x16>
}
    3700:	bd10      	pop	{r4, pc}
		newRXTail = ENC28_Rcr16(J60_ERDPTL);
    3702:	2000      	movs	r0, #0
    3704:	4b06      	ldr	r3, [pc, #24]	; (3720 <ETH_Dump+0x34>)
    3706:	4798      	blx	r3
		newRXTail += length;
    3708:	1820      	adds	r0, r4, r0
    370a:	b281      	uxth	r1, r0
		ENC28_Wcr16(J60_ERDPTL, newRXTail);
    370c:	2000      	movs	r0, #0
    370e:	4b05      	ldr	r3, [pc, #20]	; (3724 <ETH_Dump+0x38>)
    3710:	4798      	blx	r3
		rxPacketStatusVector.byteCount -= length;
    3712:	4a02      	ldr	r2, [pc, #8]	; (371c <ETH_Dump+0x30>)
    3714:	8893      	ldrh	r3, [r2, #4]
    3716:	1b1c      	subs	r4, r3, r4
    3718:	8094      	strh	r4, [r2, #4]
}
    371a:	e7f1      	b.n	3700 <ETH_Dump+0x14>
    371c:	2000085c 	.word	0x2000085c
    3720:	00002fb5 	.word	0x00002fb5
    3724:	00002f19 	.word	0x00002f19

00003728 <ETH_Flush>:
{
    3728:	b510      	push	{r4, lr}
	ethData.pktReady = false;
    372a:	4a0e      	ldr	r2, [pc, #56]	; (3764 <ETH_Flush+0x3c>)
    372c:	7813      	ldrb	r3, [r2, #0]
    372e:	2102      	movs	r1, #2
    3730:	438b      	bics	r3, r1
    3732:	7013      	strb	r3, [r2, #0]
	if (nextPacketPointer == RXSTART)
    3734:	4b0c      	ldr	r3, [pc, #48]	; (3768 <ETH_Flush+0x40>)
    3736:	8819      	ldrh	r1, [r3, #0]
    3738:	2900      	cmp	r1, #0
    373a:	d00e      	beq.n	375a <ETH_Flush+0x32>
		ENC28_Wcr16(J60_ERXRDPTL, nextPacketPointer - 1);
    373c:	3901      	subs	r1, #1
    373e:	b289      	uxth	r1, r1
    3740:	200c      	movs	r0, #12
    3742:	4b0a      	ldr	r3, [pc, #40]	; (376c <ETH_Flush+0x44>)
    3744:	4798      	blx	r3
	ENC28_Wcr16(J60_ERDPTL, nextPacketPointer);
    3746:	4b08      	ldr	r3, [pc, #32]	; (3768 <ETH_Flush+0x40>)
    3748:	8819      	ldrh	r1, [r3, #0]
    374a:	2000      	movs	r0, #0
    374c:	4b07      	ldr	r3, [pc, #28]	; (376c <ETH_Flush+0x44>)
    374e:	4798      	blx	r3
	ENC28_Bfs(J60_ECON2, 0x40);
    3750:	2140      	movs	r1, #64	; 0x40
    3752:	20fe      	movs	r0, #254	; 0xfe
    3754:	4b06      	ldr	r3, [pc, #24]	; (3770 <ETH_Flush+0x48>)
    3756:	4798      	blx	r3
}
    3758:	bd10      	pop	{r4, pc}
		ENC28_Wcr16(J60_ERXRDPTL, RXEND);
    375a:	4906      	ldr	r1, [pc, #24]	; (3774 <ETH_Flush+0x4c>)
    375c:	200c      	movs	r0, #12
    375e:	4b03      	ldr	r3, [pc, #12]	; (376c <ETH_Flush+0x44>)
    3760:	4798      	blx	r3
    3762:	e7f0      	b.n	3746 <ETH_Flush+0x1e>
    3764:	20003e98 	.word	0x20003e98
    3768:	2000085c 	.word	0x2000085c
    376c:	00002f19 	.word	0x00002f19
    3770:	00002ea9 	.word	0x00002ea9
    3774:	00001a21 	.word	0x00001a21

00003778 <ETH_Insert>:
{
    3778:	b5f0      	push	{r4, r5, r6, r7, lr}
    377a:	46d6      	mov	lr, sl
    377c:	4647      	mov	r7, r8
    377e:	b580      	push	{r7, lr}
    3780:	b083      	sub	sp, #12
    3782:	0006      	movs	r6, r0
    3784:	000c      	movs	r4, r1
    3786:	0015      	movs	r5, r2
	current_tx_pointer = ENC28_Rcr16(J60_EWRPTL);
    3788:	2002      	movs	r0, #2
    378a:	4b15      	ldr	r3, [pc, #84]	; (37e0 <ETH_Insert+0x68>)
    378c:	4798      	blx	r3
    378e:	9001      	str	r0, [sp, #4]
	ENC28_Wcr16(J60_EWRPTL, TXSTART + offset);
    3790:	4b14      	ldr	r3, [pc, #80]	; (37e4 <ETH_Insert+0x6c>)
    3792:	469c      	mov	ip, r3
    3794:	4465      	add	r5, ip
    3796:	b2a9      	uxth	r1, r5
    3798:	2002      	movs	r0, #2
    379a:	4b13      	ldr	r3, [pc, #76]	; (37e8 <ETH_Insert+0x70>)
    379c:	4798      	blx	r3
	while (len--) {
    379e:	e010      	b.n	37c2 <ETH_Insert+0x4a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    37a0:	24c0      	movs	r4, #192	; 0xc0
    37a2:	05e4      	lsls	r4, r4, #23
    37a4:	2580      	movs	r5, #128	; 0x80
    37a6:	012d      	lsls	r5, r5, #4
    37a8:	6165      	str	r5, [r4, #20]
		ETH_SPI_WRITE8(wbm_inst); // WBM command
    37aa:	217a      	movs	r1, #122	; 0x7a
    37ac:	2001      	movs	r0, #1
    37ae:	4f0f      	ldr	r7, [pc, #60]	; (37ec <ETH_Insert+0x74>)
    37b0:	47b8      	blx	r7
		ETH_SPI_WRITE8(*data++);
    37b2:	1c73      	adds	r3, r6, #1
    37b4:	469a      	mov	sl, r3
    37b6:	7831      	ldrb	r1, [r6, #0]
    37b8:	2001      	movs	r0, #1
    37ba:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    37bc:	61a5      	str	r5, [r4, #24]
	while (len--) {
    37be:	4644      	mov	r4, r8
		ETH_SPI_WRITE8(*data++);
    37c0:	4656      	mov	r6, sl
	while (len--) {
    37c2:	1e63      	subs	r3, r4, #1
    37c4:	b29b      	uxth	r3, r3
    37c6:	4698      	mov	r8, r3
    37c8:	2c00      	cmp	r4, #0
    37ca:	d1e9      	bne.n	37a0 <ETH_Insert+0x28>
	ENC28_Wcr16(J60_EWRPTL, current_tx_pointer);
    37cc:	9901      	ldr	r1, [sp, #4]
    37ce:	2002      	movs	r0, #2
    37d0:	4b05      	ldr	r3, [pc, #20]	; (37e8 <ETH_Insert+0x70>)
    37d2:	4798      	blx	r3
}
    37d4:	b003      	add	sp, #12
    37d6:	bc0c      	pop	{r2, r3}
    37d8:	4690      	mov	r8, r2
    37da:	469a      	mov	sl, r3
    37dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37de:	46c0      	nop			; (mov r8, r8)
    37e0:	00002fb5 	.word	0x00002fb5
    37e4:	00001a24 	.word	0x00001a24
    37e8:	00002f19 	.word	0x00002f19
    37ec:	00005761 	.word	0x00005761

000037f0 <ETH_Copy>:
{
    37f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37f2:	1e05      	subs	r5, r0, #0
    if (len==0) return SUCCESS; // nothing to copy
    37f4:	d05a      	beq.n	38ac <ETH_Copy+0xbc>
	timer = 2 * len;
    37f6:	0044      	lsls	r4, r0, #1
    37f8:	b2a4      	uxth	r4, r4
	while ((ENC28_Rcr8(J60_ECON1) & 0x20) != 0 && --timer)
    37fa:	e000      	b.n	37fe <ETH_Copy+0xe>
		NOP(); // sit here until the DMAST bit is clear
    37fc:	46c0      	nop			; (mov r8, r8)
	while ((ENC28_Rcr8(J60_ECON1) & 0x20) != 0 && --timer)
    37fe:	20ff      	movs	r0, #255	; 0xff
    3800:	4b2b      	ldr	r3, [pc, #172]	; (38b0 <ETH_Copy+0xc0>)
    3802:	4798      	blx	r3
    3804:	0683      	lsls	r3, r0, #26
    3806:	d503      	bpl.n	3810 <ETH_Copy+0x20>
    3808:	3c01      	subs	r4, #1
    380a:	b2a4      	uxth	r4, r4
    380c:	2c00      	cmp	r4, #0
    380e:	d1f5      	bne.n	37fc <ETH_Copy+0xc>
	if ((ENC28_Rcr8(J60_ECON1) & 0x20) == 0) {
    3810:	20ff      	movs	r0, #255	; 0xff
    3812:	4b27      	ldr	r3, [pc, #156]	; (38b0 <ETH_Copy+0xc0>)
    3814:	4798      	blx	r3
    3816:	0683      	lsls	r3, r0, #26
    3818:	d501      	bpl.n	381e <ETH_Copy+0x2e>
	return DMA_TIMEOUT;
    381a:	200c      	movs	r0, #12
}
    381c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_buffer_address = ENC28_Rcr16(J60_EWRPTL); // Current TX Write Pointer
    381e:	2002      	movs	r0, #2
    3820:	4b24      	ldr	r3, [pc, #144]	; (38b4 <ETH_Copy+0xc4>)
    3822:	4798      	blx	r3
    3824:	0006      	movs	r6, r0
		ENC28_Wcr16(J60_EDMADSTL, tx_buffer_address);
    3826:	0001      	movs	r1, r0
    3828:	2014      	movs	r0, #20
    382a:	4f23      	ldr	r7, [pc, #140]	; (38b8 <ETH_Copy+0xc8>)
    382c:	47b8      	blx	r7
		ENC28_Wcr16(J60_EDMASTL, ethData.saveRDPT);
    382e:	4c23      	ldr	r4, [pc, #140]	; (38bc <ETH_Copy+0xcc>)
    3830:	88a1      	ldrh	r1, [r4, #4]
    3832:	b289      	uxth	r1, r1
    3834:	2010      	movs	r0, #16
    3836:	47b8      	blx	r7
		tx_buffer_address += len;
    3838:	19ae      	adds	r6, r5, r6
    383a:	b2b6      	uxth	r6, r6
		temp_len = ethData.saveRDPT + len;
    383c:	88a1      	ldrh	r1, [r4, #4]
    383e:	1949      	adds	r1, r1, r5
    3840:	b289      	uxth	r1, r1
		if (temp_len > RXEND) {
    3842:	4b1f      	ldr	r3, [pc, #124]	; (38c0 <ETH_Copy+0xd0>)
    3844:	4299      	cmp	r1, r3
    3846:	d912      	bls.n	386e <ETH_Copy+0x7e>
			temp_len = temp_len - (RXEND) + RXSTART;
    3848:	4b1e      	ldr	r3, [pc, #120]	; (38c4 <ETH_Copy+0xd4>)
    384a:	469c      	mov	ip, r3
    384c:	4461      	add	r1, ip
    384e:	b289      	uxth	r1, r1
			ENC28_Wcr16(J60_EDMANDL, temp_len);
    3850:	2012      	movs	r0, #18
    3852:	4b19      	ldr	r3, [pc, #100]	; (38b8 <ETH_Copy+0xc8>)
    3854:	4798      	blx	r3
		ENC28_Bfc(J60_ECON1, 0x10);
    3856:	2110      	movs	r1, #16
    3858:	20ff      	movs	r0, #255	; 0xff
    385a:	4b1b      	ldr	r3, [pc, #108]	; (38c8 <ETH_Copy+0xd8>)
    385c:	4798      	blx	r3
		ENC28_Bfs(J60_ECON1, 0x20);
    385e:	2120      	movs	r1, #32
    3860:	20ff      	movs	r0, #255	; 0xff
    3862:	4b1a      	ldr	r3, [pc, #104]	; (38cc <ETH_Copy+0xdc>)
    3864:	4798      	blx	r3
		timer = 40 * len;
    3866:	2428      	movs	r4, #40	; 0x28
    3868:	436c      	muls	r4, r5
    386a:	b2a4      	uxth	r4, r4
		while ((ENC28_Rcr8(J60_ECON1) & 0x20) != 0 && --timer)
    386c:	e004      	b.n	3878 <ETH_Copy+0x88>
			ENC28_Wcr16(J60_EDMANDL, temp_len);
    386e:	2012      	movs	r0, #18
    3870:	4b11      	ldr	r3, [pc, #68]	; (38b8 <ETH_Copy+0xc8>)
    3872:	4798      	blx	r3
    3874:	e7ef      	b.n	3856 <ETH_Copy+0x66>
			NOP(); // sit here until the DMAST bit is clear
    3876:	46c0      	nop			; (mov r8, r8)
		while ((ENC28_Rcr8(J60_ECON1) & 0x20) != 0 && --timer)
    3878:	20ff      	movs	r0, #255	; 0xff
    387a:	4b0d      	ldr	r3, [pc, #52]	; (38b0 <ETH_Copy+0xc0>)
    387c:	4798      	blx	r3
    387e:	0683      	lsls	r3, r0, #26
    3880:	d503      	bpl.n	388a <ETH_Copy+0x9a>
    3882:	3c01      	subs	r4, #1
    3884:	b2a4      	uxth	r4, r4
    3886:	2c00      	cmp	r4, #0
    3888:	d1f5      	bne.n	3876 <ETH_Copy+0x86>
		if ((ENC28_Rcr8(J60_ECON1) & 0x20) == 0) {
    388a:	20ff      	movs	r0, #255	; 0xff
    388c:	4b08      	ldr	r3, [pc, #32]	; (38b0 <ETH_Copy+0xc0>)
    388e:	4798      	blx	r3
    3890:	0683      	lsls	r3, r0, #26
    3892:	d501      	bpl.n	3898 <ETH_Copy+0xa8>
	return DMA_TIMEOUT;
    3894:	200c      	movs	r0, #12
    3896:	e7c1      	b.n	381c <ETH_Copy+0x2c>
			ENC28_Wcr16(J60_EWRPTL, tx_buffer_address);
    3898:	0031      	movs	r1, r6
    389a:	2002      	movs	r0, #2
    389c:	4b06      	ldr	r3, [pc, #24]	; (38b8 <ETH_Copy+0xc8>)
    389e:	4798      	blx	r3
			TXPacketSize += len; // fix the packet length
    38a0:	4b0b      	ldr	r3, [pc, #44]	; (38d0 <ETH_Copy+0xe0>)
    38a2:	881a      	ldrh	r2, [r3, #0]
    38a4:	18ad      	adds	r5, r5, r2
    38a6:	801d      	strh	r5, [r3, #0]
			return SUCCESS;
    38a8:	2001      	movs	r0, #1
    38aa:	e7b7      	b.n	381c <ETH_Copy+0x2c>
    if (len==0) return SUCCESS; // nothing to copy
    38ac:	2001      	movs	r0, #1
    38ae:	e7b5      	b.n	381c <ETH_Copy+0x2c>
    38b0:	00002e79 	.word	0x00002e79
    38b4:	00002fb5 	.word	0x00002fb5
    38b8:	00002f19 	.word	0x00002f19
    38bc:	20003e98 	.word	0x20003e98
    38c0:	00001a21 	.word	0x00001a21
    38c4:	ffffe5df 	.word	0xffffe5df
    38c8:	00003015 	.word	0x00003015
    38cc:	00002ea9 	.word	0x00002ea9
    38d0:	20003e94 	.word	0x20003e94

000038d4 <ETH_TxComputeChecksum>:
 * @param position
 * @param length
 * @return
 */
uint16_t ETH_TxComputeChecksum(uint16_t position, uint16_t length, uint16_t seed)
{
    38d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38d6:	0006      	movs	r6, r0
    38d8:	000f      	movs	r7, r1
    38da:	0014      	movs	r4, r2
	uint32_t cksm = 0;

	//    cksm = seed;
	position += 1; /* sizeof(Control_Byte) */
    38dc:	1c45      	adds	r5, r0, #1
    38de:	b2ad      	uxth	r5, r5

	while ((ENC28_Rcr8(J60_ECON1) & 0x20) != 0)
    38e0:	20ff      	movs	r0, #255	; 0xff
    38e2:	4b1e      	ldr	r3, [pc, #120]	; (395c <ETH_TxComputeChecksum+0x88>)
    38e4:	4798      	blx	r3
    38e6:	0683      	lsls	r3, r0, #26
    38e8:	d4fa      	bmi.n	38e0 <ETH_TxComputeChecksum+0xc>
		; // sit here until the DMAST bit is clear

	ENC28_Wcr16(J60_EDMASTL, (TXSTART + position));
    38ea:	4b1d      	ldr	r3, [pc, #116]	; (3960 <ETH_TxComputeChecksum+0x8c>)
    38ec:	469c      	mov	ip, r3
    38ee:	4466      	add	r6, ip
    38f0:	b2b1      	uxth	r1, r6
    38f2:	2010      	movs	r0, #16
    38f4:	4e1b      	ldr	r6, [pc, #108]	; (3964 <ETH_TxComputeChecksum+0x90>)
    38f6:	47b0      	blx	r6
	ENC28_Wcr16(J60_EDMANDL, TXSTART + position + (length - 1));
    38f8:	19ed      	adds	r5, r5, r7
    38fa:	b2a9      	uxth	r1, r5
    38fc:	4b1a      	ldr	r3, [pc, #104]	; (3968 <ETH_TxComputeChecksum+0x94>)
    38fe:	469c      	mov	ip, r3
    3900:	4461      	add	r1, ip
    3902:	b289      	uxth	r1, r1
    3904:	2012      	movs	r0, #18
    3906:	47b0      	blx	r6

	if (!(ENC28_Rcr8(J60_ECON1) & 0x10)) // Make sure CSUMEN is not set already
    3908:	20ff      	movs	r0, #255	; 0xff
    390a:	4b14      	ldr	r3, [pc, #80]	; (395c <ETH_TxComputeChecksum+0x88>)
    390c:	4798      	blx	r3
    390e:	06c3      	lsls	r3, r0, #27
    3910:	d502      	bpl.n	3918 <ETH_TxComputeChecksum+0x44>
	uint32_t cksm = 0;
    3912:	2300      	movs	r3, #0
				cksm = (cksm & 0x0FFFF) + (cksm >> 16);
			}
		}
		cksm = htons(cksm);
	}
	return cksm;
    3914:	b298      	uxth	r0, r3
}
    3916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ENC28_Bfs(J60_ECON1, 0x30);
    3918:	2130      	movs	r1, #48	; 0x30
    391a:	20ff      	movs	r0, #255	; 0xff
    391c:	4b13      	ldr	r3, [pc, #76]	; (396c <ETH_TxComputeChecksum+0x98>)
    391e:	4798      	blx	r3
		while ((ENC28_Rcr8(J60_ECON1) & 0x20) != 0)
    3920:	20ff      	movs	r0, #255	; 0xff
    3922:	4b0e      	ldr	r3, [pc, #56]	; (395c <ETH_TxComputeChecksum+0x88>)
    3924:	4798      	blx	r3
    3926:	0683      	lsls	r3, r0, #26
    3928:	d4fa      	bmi.n	3920 <ETH_TxComputeChecksum+0x4c>
		ENC28_Bfc(J60_ECON1, 0x10);
    392a:	2110      	movs	r1, #16
    392c:	20ff      	movs	r0, #255	; 0xff
    392e:	4b10      	ldr	r3, [pc, #64]	; (3970 <ETH_TxComputeChecksum+0x9c>)
    3930:	4798      	blx	r3
		cksm = ENC28_Rcr16(J60_EDMACSL);
    3932:	2016      	movs	r0, #22
    3934:	4b0f      	ldr	r3, [pc, #60]	; (3974 <ETH_TxComputeChecksum+0xa0>)
    3936:	4798      	blx	r3
    3938:	0003      	movs	r3, r0
		if (seed) {
    393a:	2c00      	cmp	r4, #0
    393c:	d008      	beq.n	3950 <ETH_TxComputeChecksum+0x7c>
			seed = ~(seed);
    393e:	43e3      	mvns	r3, r4
    3940:	b29b      	uxth	r3, r3
			cksm += seed;
    3942:	18c3      	adds	r3, r0, r3
			while (cksm >> 16) {
    3944:	e002      	b.n	394c <ETH_TxComputeChecksum+0x78>
				cksm = (cksm & 0x0FFFF) + (cksm >> 16);
    3946:	041b      	lsls	r3, r3, #16
    3948:	0c1b      	lsrs	r3, r3, #16
    394a:	18d3      	adds	r3, r2, r3
			while (cksm >> 16) {
    394c:	0c1a      	lsrs	r2, r3, #16
    394e:	d1fa      	bne.n	3946 <ETH_TxComputeChecksum+0x72>
		cksm = htons(cksm);
    3950:	b298      	uxth	r0, r3
    3952:	0a00      	lsrs	r0, r0, #8
    3954:	061b      	lsls	r3, r3, #24
    3956:	0c1b      	lsrs	r3, r3, #16
    3958:	4303      	orrs	r3, r0
    395a:	e7db      	b.n	3914 <ETH_TxComputeChecksum+0x40>
    395c:	00002e79 	.word	0x00002e79
    3960:	00001a24 	.word	0x00001a24
    3964:	00002f19 	.word	0x00002f19
    3968:	00001a22 	.word	0x00001a22
    396c:	00002ea9 	.word	0x00002ea9
    3970:	00003015 	.word	0x00003015
    3974:	00002fb5 	.word	0x00002fb5

00003978 <ETH_RxComputeChecksum>:
 * @param len
 * @param seed
 * @return
 */
uint16_t ETH_RxComputeChecksum(uint16_t len, uint16_t seed)
{
    3978:	b570      	push	{r4, r5, r6, lr}
    397a:	0004      	movs	r4, r0
    397c:	000e      	movs	r6, r1
	uint16_t rxptr;
	uint32_t cksm;

	// Save the read pointer starting address
	rxptr = ENC28_Rcr16(J60_ERDPTL);
    397e:	2000      	movs	r0, #0
    3980:	4b09      	ldr	r3, [pc, #36]	; (39a8 <ETH_RxComputeChecksum+0x30>)
    3982:	4798      	blx	r3
    3984:	0005      	movs	r5, r0
	;

	cksm = ETH_ComputeChecksum(len, seed);
    3986:	0031      	movs	r1, r6
    3988:	0020      	movs	r0, r4
    398a:	4b08      	ldr	r3, [pc, #32]	; (39ac <ETH_RxComputeChecksum+0x34>)
    398c:	4798      	blx	r3
    398e:	0004      	movs	r4, r0

	// Restore old read pointer location
	ENC28_Wcr16(J60_ERDPTL, rxptr);
    3990:	0029      	movs	r1, r5
    3992:	2000      	movs	r0, #0
    3994:	4b06      	ldr	r3, [pc, #24]	; (39b0 <ETH_RxComputeChecksum+0x38>)
    3996:	4798      	blx	r3

	// Return the resulting checksum
	return ((cksm & 0xFF00) >> 8) | ((cksm & 0x00FF) << 8);
    3998:	0a23      	lsrs	r3, r4, #8
    399a:	20ff      	movs	r0, #255	; 0xff
    399c:	4003      	ands	r3, r0
    399e:	0224      	lsls	r4, r4, #8
    39a0:	b2a0      	uxth	r0, r4
    39a2:	4318      	orrs	r0, r3
}
    39a4:	bd70      	pop	{r4, r5, r6, pc}
    39a6:	46c0      	nop			; (mov r8, r8)
    39a8:	00002fb5 	.word	0x00002fb5
    39ac:	0000337d 	.word	0x0000337d
    39b0:	00002f19 	.word	0x00002f19

000039b4 <ETH_GetMAC>:
/**
 * To get the MAC address
 * @param mac
 */
void ETH_GetMAC(uint8_t *macAddr)
{
    39b4:	b510      	push	{r4, lr}
#if 1

    // RNG: MAC registers are flakey when clocked < 8MHz... since MAC is tied to serial, over-ride with application set MAC
    memcpy(macAddr, (uint8_t*)&eth_MAC.mac_array[0], 6);
    39b6:	2206      	movs	r2, #6
    39b8:	4902      	ldr	r1, [pc, #8]	; (39c4 <ETH_GetMAC+0x10>)
    39ba:	3108      	adds	r1, #8
    39bc:	4b02      	ldr	r3, [pc, #8]	; (39c8 <ETH_GetMAC+0x14>)
    39be:	4798      	blx	r3
	*macAddr++ = ENC28_Rcr8(J60_MAADR4);
	*macAddr++ = ENC28_Rcr8(J60_MAADR5);
	*macAddr++ = ENC28_Rcr8(J60_MAADR6);

#endif
}
    39c0:	bd10      	pop	{r4, pc}
    39c2:	46c0      	nop			; (mov r8, r8)
    39c4:	2000085c 	.word	0x2000085c
    39c8:	00005a27 	.word	0x00005a27

000039cc <ETH_SaveRDPT>:
	ENC28_Wcr8(J60_MAADR5, *macAddr++);
	ENC28_Wcr8(J60_MAADR6, *macAddr++);
}

void ETH_SaveRDPT(void)
{
    39cc:	b510      	push	{r4, lr}
	ethData.saveRDPT = ENC28_Rcr16(J60_ERDPTL);
    39ce:	2000      	movs	r0, #0
    39d0:	4b02      	ldr	r3, [pc, #8]	; (39dc <ETH_SaveRDPT+0x10>)
    39d2:	4798      	blx	r3
    39d4:	4b02      	ldr	r3, [pc, #8]	; (39e0 <ETH_SaveRDPT+0x14>)
    39d6:	8098      	strh	r0, [r3, #4]
}
    39d8:	bd10      	pop	{r4, pc}
    39da:	46c0      	nop			; (mov r8, r8)
    39dc:	00002fb5 	.word	0x00002fb5
    39e0:	20003e98 	.word	0x20003e98

000039e4 <ETH_ResetByteCount>:

void ETH_ResetByteCount(void)
{
    39e4:	b510      	push	{r4, lr}
	ethData.saveWRPT = ENC28_Rcr16(J60_EWRPTL);
    39e6:	2002      	movs	r0, #2
    39e8:	4b02      	ldr	r3, [pc, #8]	; (39f4 <ETH_ResetByteCount+0x10>)
    39ea:	4798      	blx	r3
    39ec:	4b02      	ldr	r3, [pc, #8]	; (39f8 <ETH_ResetByteCount+0x14>)
    39ee:	80d8      	strh	r0, [r3, #6]
}
    39f0:	bd10      	pop	{r4, pc}
    39f2:	46c0      	nop			; (mov r8, r8)
    39f4:	00002fb5 	.word	0x00002fb5
    39f8:	20003e98 	.word	0x20003e98

000039fc <ETH_GetByteCount>:

uint16_t ETH_GetByteCount(void)
{
    39fc:	b510      	push	{r4, lr}
	uint16_t wptr;

	wptr = ENC28_Rcr16(J60_EWRPTL);
    39fe:	2002      	movs	r0, #2
    3a00:	4b03      	ldr	r3, [pc, #12]	; (3a10 <ETH_GetByteCount+0x14>)
    3a02:	4798      	blx	r3

	return (wptr - ethData.saveWRPT);
    3a04:	4b03      	ldr	r3, [pc, #12]	; (3a14 <ETH_GetByteCount+0x18>)
    3a06:	88db      	ldrh	r3, [r3, #6]
    3a08:	1ac0      	subs	r0, r0, r3
    3a0a:	b280      	uxth	r0, r0
}
    3a0c:	bd10      	pop	{r4, pc}
    3a0e:	46c0      	nop			; (mov r8, r8)
    3a10:	00002fb5 	.word	0x00002fb5
    3a14:	20003e98 	.word	0x20003e98

00003a18 <ETH_InitMAC>:
/**This function was added by Eyedro to set the MAC address BEFORE initializing the stack and performing DHCP requests
 *
 * @param pau8MAC
 *      MAC address to use
 */
void ETH_InitMAC(uint8_t *pau8MAC) {
    3a18:	b510      	push	{r4, lr}
    3a1a:	0001      	movs	r1, r0
    memcpy((uint8_t*)&eth_MAC.mac_array[0], pau8MAC, 6);
    3a1c:	2206      	movs	r2, #6
    3a1e:	4802      	ldr	r0, [pc, #8]	; (3a28 <ETH_InitMAC+0x10>)
    3a20:	3008      	adds	r0, #8
    3a22:	4b02      	ldr	r3, [pc, #8]	; (3a2c <ETH_InitMAC+0x14>)
    3a24:	4798      	blx	r3
}
    3a26:	bd10      	pop	{r4, pc}
    3a28:	2000085c 	.word	0x2000085c
    3a2c:	00005a27 	.word	0x00005a27

00003a30 <ARPV4_Init>:
 * ARP Initialization
 */

void ARPV4_Init(void)
{
	for (uint8_t x = 0; x < sizeof(arpMap); x++)
    3a30:	2300      	movs	r3, #0
    3a32:	e005      	b.n	3a40 <ARPV4_Init+0x10>
		((char *)arpMap)[x] = 0;
    3a34:	4a04      	ldr	r2, [pc, #16]	; (3a48 <ARPV4_Init+0x18>)
    3a36:	189a      	adds	r2, r3, r2
    3a38:	2100      	movs	r1, #0
    3a3a:	7011      	strb	r1, [r2, #0]
	for (uint8_t x = 0; x < sizeof(arpMap); x++)
    3a3c:	3301      	adds	r3, #1
    3a3e:	b2db      	uxtb	r3, r3
    3a40:	2b67      	cmp	r3, #103	; 0x67
    3a42:	d9f7      	bls.n	3a34 <ARPV4_Init+0x4>
}
    3a44:	4770      	bx	lr
    3a46:	46c0      	nop			; (mov r8, r8)
    3a48:	20003ea4 	.word	0x20003ea4

00003a4c <ARPV4_Packet>:
 * ARP Packet received
 * @return
 */

error_msg ARPV4_Packet(void)
{
    3a4c:	b530      	push	{r4, r5, lr}
    3a4e:	b089      	sub	sp, #36	; 0x24
	uint16_t    length;
	error_msg   ret;

	ret = ERROR;

	length = ETH_ReadBlock((char *)&header, sizeof(arpHeader_t));
    3a50:	211c      	movs	r1, #28
    3a52:	a801      	add	r0, sp, #4
    3a54:	4b5c      	ldr	r3, [pc, #368]	; (3bc8 <ARPV4_Packet+0x17c>)
    3a56:	4798      	blx	r3
	if (length == sizeof(arpHeader_t)) {
    3a58:	281c      	cmp	r0, #28
    3a5a:	d02d      	beq.n	3ab8 <ARPV4_Packet+0x6c>
	ret = ERROR;
    3a5c:	2000      	movs	r0, #0
		} else {
			ret = ARP_IP_NOT_MATCHED;
		}
	}
	return ret;
}
    3a5e:	b009      	add	sp, #36	; 0x24
    3a60:	bd30      	pop	{r4, r5, pc}
			entryPointer++;
    3a62:	300d      	adds	r0, #13
		for (uint8_t x = ARP_MAP_SIZE; x > 0; x--) {
    3a64:	3c01      	subs	r4, #1
    3a66:	b2e4      	uxtb	r4, r4
    3a68:	2c00      	cmp	r4, #0
    3a6a:	d01f      	beq.n	3aac <ARPV4_Packet+0x60>
			if ((header.spa == entryPointer->ipAddress) && (header.ptype == entryPointer->protocolType)) {
    3a6c:	ab01      	add	r3, sp, #4
    3a6e:	89d9      	ldrh	r1, [r3, #14]
    3a70:	8a1a      	ldrh	r2, [r3, #16]
    3a72:	0412      	lsls	r2, r2, #16
    3a74:	430a      	orrs	r2, r1
    3a76:	7983      	ldrb	r3, [r0, #6]
    3a78:	79c1      	ldrb	r1, [r0, #7]
    3a7a:	0209      	lsls	r1, r1, #8
    3a7c:	4319      	orrs	r1, r3
    3a7e:	7a03      	ldrb	r3, [r0, #8]
    3a80:	041b      	lsls	r3, r3, #16
    3a82:	4319      	orrs	r1, r3
    3a84:	7a43      	ldrb	r3, [r0, #9]
    3a86:	061b      	lsls	r3, r3, #24
    3a88:	430b      	orrs	r3, r1
    3a8a:	429a      	cmp	r2, r3
    3a8c:	d1e9      	bne.n	3a62 <ARPV4_Packet+0x16>
    3a8e:	ab01      	add	r3, sp, #4
    3a90:	885a      	ldrh	r2, [r3, #2]
    3a92:	7a81      	ldrb	r1, [r0, #10]
    3a94:	7ac3      	ldrb	r3, [r0, #11]
    3a96:	021b      	lsls	r3, r3, #8
    3a98:	430b      	orrs	r3, r1
    3a9a:	429a      	cmp	r2, r3
    3a9c:	d1e1      	bne.n	3a62 <ARPV4_Packet+0x16>
				entryPointer->age          = 0; // reset the age
    3a9e:	2300      	movs	r3, #0
    3aa0:	7303      	strb	r3, [r0, #12]
				entryPointer->macAddress.s = header.sha.s;
    3aa2:	2206      	movs	r2, #6
    3aa4:	a903      	add	r1, sp, #12
    3aa6:	4b49      	ldr	r3, [pc, #292]	; (3bcc <ARPV4_Packet+0x180>)
    3aa8:	4798      	blx	r3
				mergeFlag                  = true;
    3aaa:	2401      	movs	r4, #1
		if (ipv4Address
    3aac:	4b48      	ldr	r3, [pc, #288]	; (3bd0 <ARPV4_Packet+0x184>)
    3aae:	681a      	ldr	r2, [r3, #0]
    3ab0:	2a00      	cmp	r2, #0
    3ab2:	d104      	bne.n	3abe <ARPV4_Packet+0x72>
			ret = ARP_IP_NOT_MATCHED;
    3ab4:	200e      	movs	r0, #14
    3ab6:	e7d2      	b.n	3a5e <ARPV4_Packet+0x12>
    3ab8:	2408      	movs	r4, #8
    3aba:	4846      	ldr	r0, [pc, #280]	; (3bd4 <ARPV4_Packet+0x188>)
    3abc:	e7d4      	b.n	3a68 <ARPV4_Packet+0x1c>
		        == (((header.tpa >> 24) & 0xff) | ((header.tpa << 8) & 0xff0000) | ((header.tpa >> 8) & 0xff00)
    3abe:	9907      	ldr	r1, [sp, #28]
    3ac0:	0e0b      	lsrs	r3, r1, #24
    3ac2:	0208      	lsls	r0, r1, #8
    3ac4:	25ff      	movs	r5, #255	; 0xff
    3ac6:	042d      	lsls	r5, r5, #16
    3ac8:	4028      	ands	r0, r5
    3aca:	4303      	orrs	r3, r0
    3acc:	0a08      	lsrs	r0, r1, #8
    3ace:	25ff      	movs	r5, #255	; 0xff
    3ad0:	022d      	lsls	r5, r5, #8
    3ad2:	4028      	ands	r0, r5
    3ad4:	4303      	orrs	r3, r0
		            | ((header.tpa << 24) & 0xff000000)))) {
    3ad6:	0609      	lsls	r1, r1, #24
    3ad8:	430b      	orrs	r3, r1
		    && (ipv4Address
    3ada:	429a      	cmp	r2, r3
    3adc:	d001      	beq.n	3ae2 <ARPV4_Packet+0x96>
			ret = ARP_IP_NOT_MATCHED;
    3ade:	200e      	movs	r0, #14
    3ae0:	e7bd      	b.n	3a5e <ARPV4_Packet+0x12>
			if (!mergeFlag) {
    3ae2:	2c00      	cmp	r4, #0
    3ae4:	d131      	bne.n	3b4a <ARPV4_Packet+0xfe>
    3ae6:	2308      	movs	r3, #8
    3ae8:	4a3a      	ldr	r2, [pc, #232]	; (3bd4 <ARPV4_Packet+0x188>)
    3aea:	0014      	movs	r4, r2
    3aec:	e002      	b.n	3af4 <ARPV4_Packet+0xa8>
					arpPtr++;
    3aee:	320d      	adds	r2, #13
				for (uint8_t x = ARP_MAP_SIZE; x != 0; x--) {
    3af0:	3b01      	subs	r3, #1
    3af2:	b2db      	uxtb	r3, r3
    3af4:	2b00      	cmp	r3, #0
    3af6:	d005      	beq.n	3b04 <ARPV4_Packet+0xb8>
					if (entryPointer->age < arpPtr->age) {
    3af8:	7b20      	ldrb	r0, [r4, #12]
    3afa:	7b11      	ldrb	r1, [r2, #12]
    3afc:	4288      	cmp	r0, r1
    3afe:	d2f6      	bcs.n	3aee <ARPV4_Packet+0xa2>
						entryPointer = arpPtr;
    3b00:	0014      	movs	r4, r2
    3b02:	e7f4      	b.n	3aee <ARPV4_Packet+0xa2>
				entryPointer->age          = 0;
    3b04:	7323      	strb	r3, [r4, #12]
				entryPointer->macAddress.s = header.sha.s;
    3b06:	ad01      	add	r5, sp, #4
    3b08:	2206      	movs	r2, #6
    3b0a:	a903      	add	r1, sp, #12
    3b0c:	0020      	movs	r0, r4
    3b0e:	4b2f      	ldr	r3, [pc, #188]	; (3bcc <ARPV4_Packet+0x180>)
    3b10:	4798      	blx	r3
				entryPointer->ipAddress    = ntohl(header.spa);
    3b12:	89eb      	ldrh	r3, [r5, #14]
    3b14:	8a2a      	ldrh	r2, [r5, #16]
    3b16:	0412      	lsls	r2, r2, #16
    3b18:	431a      	orrs	r2, r3
    3b1a:	0e13      	lsrs	r3, r2, #24
    3b1c:	0a11      	lsrs	r1, r2, #8
    3b1e:	20ff      	movs	r0, #255	; 0xff
    3b20:	0200      	lsls	r0, r0, #8
    3b22:	4001      	ands	r1, r0
    3b24:	430b      	orrs	r3, r1
    3b26:	0211      	lsls	r1, r2, #8
    3b28:	20ff      	movs	r0, #255	; 0xff
    3b2a:	0400      	lsls	r0, r0, #16
    3b2c:	4001      	ands	r1, r0
    3b2e:	430b      	orrs	r3, r1
    3b30:	0612      	lsls	r2, r2, #24
    3b32:	4313      	orrs	r3, r2
    3b34:	71a3      	strb	r3, [r4, #6]
    3b36:	0a19      	lsrs	r1, r3, #8
    3b38:	71e1      	strb	r1, [r4, #7]
    3b3a:	0c19      	lsrs	r1, r3, #16
    3b3c:	7221      	strb	r1, [r4, #8]
    3b3e:	0e1b      	lsrs	r3, r3, #24
    3b40:	7263      	strb	r3, [r4, #9]
				entryPointer->protocolType = header.ptype;
    3b42:	886b      	ldrh	r3, [r5, #2]
    3b44:	72a3      	strb	r3, [r4, #10]
    3b46:	0a1b      	lsrs	r3, r3, #8
    3b48:	72e3      	strb	r3, [r4, #11]
			if (header.oper == ntohs(ARP_REQUEST)) {
    3b4a:	ab01      	add	r3, sp, #4
    3b4c:	88da      	ldrh	r2, [r3, #6]
    3b4e:	2380      	movs	r3, #128	; 0x80
    3b50:	005b      	lsls	r3, r3, #1
    3b52:	429a      	cmp	r2, r3
    3b54:	d001      	beq.n	3b5a <ARPV4_Packet+0x10e>
	ret = ERROR;
    3b56:	2000      	movs	r0, #0
    3b58:	e781      	b.n	3a5e <ARPV4_Packet+0x12>
				ret = ETH_WriteStart(&header.sha, ETHERTYPE_ARP);
    3b5a:	491f      	ldr	r1, [pc, #124]	; (3bd8 <ARPV4_Packet+0x18c>)
    3b5c:	a803      	add	r0, sp, #12
    3b5e:	4b1f      	ldr	r3, [pc, #124]	; (3bdc <ARPV4_Packet+0x190>)
    3b60:	4798      	blx	r3
				if (ret == SUCCESS) {
    3b62:	2801      	cmp	r0, #1
    3b64:	d000      	beq.n	3b68 <ARPV4_Packet+0x11c>
    3b66:	e77a      	b.n	3a5e <ARPV4_Packet+0x12>
					header.tha.s = header.sha.s;
    3b68:	ac01      	add	r4, sp, #4
    3b6a:	2206      	movs	r2, #6
    3b6c:	a903      	add	r1, sp, #12
    3b6e:	3015      	adds	r0, #21
    3b70:	4468      	add	r0, sp
    3b72:	4b16      	ldr	r3, [pc, #88]	; (3bcc <ARPV4_Packet+0x180>)
    3b74:	4798      	blx	r3
					ETH_GetMAC(header.sha.mac_array);
    3b76:	a803      	add	r0, sp, #12
    3b78:	4b19      	ldr	r3, [pc, #100]	; (3be0 <ARPV4_Packet+0x194>)
    3b7a:	4798      	blx	r3
					header.tpa  = header.spa;
    3b7c:	89e2      	ldrh	r2, [r4, #14]
    3b7e:	8a23      	ldrh	r3, [r4, #16]
    3b80:	041b      	lsls	r3, r3, #16
    3b82:	4313      	orrs	r3, r2
    3b84:	61a3      	str	r3, [r4, #24]
					header.spa  = htonl(ipv4Address);
    3b86:	4b12      	ldr	r3, [pc, #72]	; (3bd0 <ARPV4_Packet+0x184>)
    3b88:	681a      	ldr	r2, [r3, #0]
    3b8a:	0e13      	lsrs	r3, r2, #24
    3b8c:	0a11      	lsrs	r1, r2, #8
    3b8e:	20ff      	movs	r0, #255	; 0xff
    3b90:	0200      	lsls	r0, r0, #8
    3b92:	4001      	ands	r1, r0
    3b94:	430b      	orrs	r3, r1
    3b96:	0211      	lsls	r1, r2, #8
    3b98:	20ff      	movs	r0, #255	; 0xff
    3b9a:	0400      	lsls	r0, r0, #16
    3b9c:	4001      	ands	r1, r0
    3b9e:	430b      	orrs	r3, r1
    3ba0:	0612      	lsls	r2, r2, #24
    3ba2:	4313      	orrs	r3, r2
    3ba4:	2112      	movs	r1, #18
    3ba6:	4469      	add	r1, sp
    3ba8:	041a      	lsls	r2, r3, #16
    3baa:	0c12      	lsrs	r2, r2, #16
    3bac:	800a      	strh	r2, [r1, #0]
    3bae:	0c1b      	lsrs	r3, r3, #16
    3bb0:	804b      	strh	r3, [r1, #2]
					header.oper = htons(ARP_REPLY);
    3bb2:	2380      	movs	r3, #128	; 0x80
    3bb4:	009b      	lsls	r3, r3, #2
    3bb6:	80e3      	strh	r3, [r4, #6]
					ETH_WriteBlock((char *)&header, sizeof(header));
    3bb8:	211c      	movs	r1, #28
    3bba:	0020      	movs	r0, r4
    3bbc:	4b09      	ldr	r3, [pc, #36]	; (3be4 <ARPV4_Packet+0x198>)
    3bbe:	4798      	blx	r3
					ret = ETH_Send(); // remember this could fail to send.
    3bc0:	4b09      	ldr	r3, [pc, #36]	; (3be8 <ARPV4_Packet+0x19c>)
    3bc2:	4798      	blx	r3
    3bc4:	e74b      	b.n	3a5e <ARPV4_Packet+0x12>
    3bc6:	46c0      	nop			; (mov r8, r8)
    3bc8:	00003451 	.word	0x00003451
    3bcc:	00005a27 	.word	0x00005a27
    3bd0:	20003f2c 	.word	0x20003f2c
    3bd4:	20003ea4 	.word	0x20003ea4
    3bd8:	00000806 	.word	0x00000806
    3bdc:	000035a5 	.word	0x000035a5
    3be0:	000039b5 	.word	0x000039b5
    3be4:	00003555 	.word	0x00003555
    3be8:	00003695 	.word	0x00003695

00003bec <ARPV4_Update>:
 */

void ARPV4_Update(void) // call me every 10 seconds or so and I will age the arp table.
{
	arpMap_t *entryPointer = arpMap;
	for (uint8_t x = 0; x < ARP_MAP_SIZE; x++) {
    3bec:	2300      	movs	r3, #0
	arpMap_t *entryPointer = arpMap;
    3bee:	4a05      	ldr	r2, [pc, #20]	; (3c04 <ARPV4_Update+0x18>)
	for (uint8_t x = 0; x < ARP_MAP_SIZE; x++) {
    3bf0:	e005      	b.n	3bfe <ARPV4_Update+0x12>
		entryPointer->age++;
    3bf2:	7b11      	ldrb	r1, [r2, #12]
    3bf4:	3101      	adds	r1, #1
    3bf6:	7311      	strb	r1, [r2, #12]
		entryPointer++;
    3bf8:	320d      	adds	r2, #13
	for (uint8_t x = 0; x < ARP_MAP_SIZE; x++) {
    3bfa:	3301      	adds	r3, #1
    3bfc:	b2db      	uxtb	r3, r3
    3bfe:	2b07      	cmp	r3, #7
    3c00:	d9f7      	bls.n	3bf2 <ARPV4_Update+0x6>
	}
}
    3c02:	4770      	bx	lr
    3c04:	20003ea4 	.word	0x20003ea4

00003c08 <ARPV4_Request>:
 * ARP send Request
 * @param dest_address
 * @return
 */
error_msg ARPV4_Request(uint32_t destAddress)
{
    3c08:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c0a:	b089      	sub	sp, #36	; 0x24
    3c0c:	0005      	movs	r5, r0
	error_msg ret;

	ret = ERROR;

	arpHeader_t header;
	header.htype = htons(1);
    3c0e:	ac01      	add	r4, sp, #4
    3c10:	2380      	movs	r3, #128	; 0x80
    3c12:	005b      	lsls	r3, r3, #1
    3c14:	8023      	strh	r3, [r4, #0]
	header.ptype = htons(0x0800);
    3c16:	2208      	movs	r2, #8
    3c18:	8062      	strh	r2, [r4, #2]
	header.hlen  = 6;
    3c1a:	3a02      	subs	r2, #2
    3c1c:	7122      	strb	r2, [r4, #4]
	header.plen  = 4;
    3c1e:	3a02      	subs	r2, #2
    3c20:	7162      	strb	r2, [r4, #5]
	header.oper  = htons(ARP_REQUEST);
    3c22:	80e3      	strh	r3, [r4, #6]
	ETH_GetMAC(header.sha.mac_array);
    3c24:	a803      	add	r0, sp, #12
    3c26:	4b1d      	ldr	r3, [pc, #116]	; (3c9c <ARPV4_Request+0x94>)
    3c28:	4798      	blx	r3
	header.spa         = htonl(ipv4Address);
    3c2a:	4b1d      	ldr	r3, [pc, #116]	; (3ca0 <ARPV4_Request+0x98>)
    3c2c:	681a      	ldr	r2, [r3, #0]
    3c2e:	0e13      	lsrs	r3, r2, #24
    3c30:	0a11      	lsrs	r1, r2, #8
    3c32:	26ff      	movs	r6, #255	; 0xff
    3c34:	0236      	lsls	r6, r6, #8
    3c36:	4031      	ands	r1, r6
    3c38:	430b      	orrs	r3, r1
    3c3a:	0210      	lsls	r0, r2, #8
    3c3c:	21ff      	movs	r1, #255	; 0xff
    3c3e:	0409      	lsls	r1, r1, #16
    3c40:	4008      	ands	r0, r1
    3c42:	4303      	orrs	r3, r0
    3c44:	0612      	lsls	r2, r2, #24
    3c46:	4313      	orrs	r3, r2
    3c48:	2012      	movs	r0, #18
    3c4a:	4468      	add	r0, sp
    3c4c:	041f      	lsls	r7, r3, #16
    3c4e:	0c3f      	lsrs	r7, r7, #16
    3c50:	2200      	movs	r2, #0
    3c52:	8007      	strh	r7, [r0, #0]
    3c54:	0c1b      	lsrs	r3, r3, #16
    3c56:	8043      	strh	r3, [r0, #2]
	header.tpa         = htonl(destAddress);
    3c58:	0e28      	lsrs	r0, r5, #24
    3c5a:	0a2b      	lsrs	r3, r5, #8
    3c5c:	4033      	ands	r3, r6
    3c5e:	4318      	orrs	r0, r3
    3c60:	022b      	lsls	r3, r5, #8
    3c62:	400b      	ands	r3, r1
    3c64:	4318      	orrs	r0, r3
    3c66:	062d      	lsls	r5, r5, #24
    3c68:	4328      	orrs	r0, r5
    3c6a:	61a0      	str	r0, [r4, #24]
	header.tha.s.byte1 = 0;
    3c6c:	74a2      	strb	r2, [r4, #18]
	header.tha.s.byte2 = 0;
    3c6e:	74e2      	strb	r2, [r4, #19]
	header.tha.s.byte3 = 0;
    3c70:	7522      	strb	r2, [r4, #20]
	header.tha.s.byte4 = 0;
    3c72:	7562      	strb	r2, [r4, #21]
	header.tha.s.byte5 = 0;
    3c74:	75a2      	strb	r2, [r4, #22]
	header.tha.s.byte6 = 0;
    3c76:	75e2      	strb	r2, [r4, #23]

	ret = ETH_WriteStart(&broadcastMAC, ETHERTYPE_ARP);
    3c78:	490a      	ldr	r1, [pc, #40]	; (3ca4 <ARPV4_Request+0x9c>)
    3c7a:	480b      	ldr	r0, [pc, #44]	; (3ca8 <ARPV4_Request+0xa0>)
    3c7c:	4b0b      	ldr	r3, [pc, #44]	; (3cac <ARPV4_Request+0xa4>)
    3c7e:	4798      	blx	r3
	if (ret == SUCCESS) {
    3c80:	2801      	cmp	r0, #1
    3c82:	d001      	beq.n	3c88 <ARPV4_Request+0x80>
		if (ret == SUCCESS) {
			return MAC_NOT_FOUND;
		}
	}
	return ret;
}
    3c84:	b009      	add	sp, #36	; 0x24
    3c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ETH_WriteBlock((char *)&header, sizeof(arpHeader_t));
    3c88:	211c      	movs	r1, #28
    3c8a:	a801      	add	r0, sp, #4
    3c8c:	4b08      	ldr	r3, [pc, #32]	; (3cb0 <ARPV4_Request+0xa8>)
    3c8e:	4798      	blx	r3
		ret = ETH_Send();
    3c90:	4b08      	ldr	r3, [pc, #32]	; (3cb4 <ARPV4_Request+0xac>)
    3c92:	4798      	blx	r3
		if (ret == SUCCESS) {
    3c94:	2801      	cmp	r0, #1
    3c96:	d1f5      	bne.n	3c84 <ARPV4_Request+0x7c>
			return MAC_NOT_FOUND;
    3c98:	3004      	adds	r0, #4
    3c9a:	e7f3      	b.n	3c84 <ARPV4_Request+0x7c>
    3c9c:	000039b5 	.word	0x000039b5
    3ca0:	20003f2c 	.word	0x20003f2c
    3ca4:	00000806 	.word	0x00000806
    3ca8:	00006f50 	.word	0x00006f50
    3cac:	000035a5 	.word	0x000035a5
    3cb0:	00003555 	.word	0x00003555
    3cb4:	00003695 	.word	0x00003695

00003cb8 <ARPV4_Lookup>:
 * ARP Lookup Table
 * @param ip_address
 * @return
 */
mac48Address_t *ARPV4_Lookup(uint32_t ip_address)
{
    3cb8:	b510      	push	{r4, lr}
	arpMap_t *entry_pointer = arpMap;
	uint8_t   x;

	for (x = 0; x < ARP_MAP_SIZE; x++) {
    3cba:	2400      	movs	r4, #0
	arpMap_t *entry_pointer = arpMap;
    3cbc:	4b0b      	ldr	r3, [pc, #44]	; (3cec <ARPV4_Lookup+0x34>)
	for (x = 0; x < ARP_MAP_SIZE; x++) {
    3cbe:	2c07      	cmp	r4, #7
    3cc0:	d811      	bhi.n	3ce6 <ARPV4_Lookup+0x2e>
		if (entry_pointer->ipAddress == ip_address)
    3cc2:	799a      	ldrb	r2, [r3, #6]
    3cc4:	79d9      	ldrb	r1, [r3, #7]
    3cc6:	0209      	lsls	r1, r1, #8
    3cc8:	4311      	orrs	r1, r2
    3cca:	7a1a      	ldrb	r2, [r3, #8]
    3ccc:	0412      	lsls	r2, r2, #16
    3cce:	4311      	orrs	r1, r2
    3cd0:	7a5a      	ldrb	r2, [r3, #9]
    3cd2:	0612      	lsls	r2, r2, #24
    3cd4:	430a      	orrs	r2, r1
    3cd6:	4282      	cmp	r2, r0
    3cd8:	d003      	beq.n	3ce2 <ARPV4_Lookup+0x2a>
			return &entry_pointer->macAddress;
		entry_pointer++;
    3cda:	330d      	adds	r3, #13
	for (x = 0; x < ARP_MAP_SIZE; x++) {
    3cdc:	3401      	adds	r4, #1
    3cde:	b2e4      	uxtb	r4, r4
    3ce0:	e7ed      	b.n	3cbe <ARPV4_Lookup+0x6>
			return &entry_pointer->macAddress;
    3ce2:	0018      	movs	r0, r3
    3ce4:	e000      	b.n	3ce8 <ARPV4_Lookup+0x30>
	}
	return 0;
    3ce6:	2000      	movs	r0, #0
}
    3ce8:	bd10      	pop	{r4, pc}
    3cea:	46c0      	nop			; (mov r8, r8)
    3cec:	20003ea4 	.word	0x20003ea4

00003cf0 <DHCP_WriteZeros>:
		}
	}
}

void DHCP_WriteZeros(uint16_t length)
{
    3cf0:	b510      	push	{r4, lr}
	while (length--) {
    3cf2:	e003      	b.n	3cfc <DHCP_WriteZeros+0xc>
		ETH_Write8(0);
    3cf4:	2000      	movs	r0, #0
    3cf6:	4b04      	ldr	r3, [pc, #16]	; (3d08 <DHCP_WriteZeros+0x18>)
    3cf8:	4798      	blx	r3
	while (length--) {
    3cfa:	0020      	movs	r0, r4
    3cfc:	1e44      	subs	r4, r0, #1
    3cfe:	b2a4      	uxth	r4, r4
    3d00:	2800      	cmp	r0, #0
    3d02:	d1f7      	bne.n	3cf4 <DHCP_WriteZeros+0x4>
	}
}
    3d04:	bd10      	pop	{r4, pc}
    3d06:	46c0      	nop			; (mov r8, r8)
    3d08:	000034a5 	.word	0x000034a5

00003d0c <DHCP_Request>:
{
    3d0c:	b570      	push	{r4, r5, r6, lr}
    3d0e:	b082      	sub	sp, #8
    3d10:	0005      	movs	r5, r0
	ETH_GetMAC(ethMAC.mac_array);
    3d12:	4668      	mov	r0, sp
    3d14:	4b3b      	ldr	r3, [pc, #236]	; (3e04 <DHCP_Request+0xf8>)
    3d16:	4798      	blx	r3
	started = UDP_Start(0xFFFFFFFF, 68, 67);
    3d18:	2243      	movs	r2, #67	; 0x43
    3d1a:	2144      	movs	r1, #68	; 0x44
    3d1c:	2001      	movs	r0, #1
    3d1e:	4240      	negs	r0, r0
    3d20:	4b39      	ldr	r3, [pc, #228]	; (3e08 <DHCP_Request+0xfc>)
    3d22:	4798      	blx	r3
	if (started == SUCCESS) {
    3d24:	2800      	cmp	r0, #0
    3d26:	d101      	bne.n	3d2c <DHCP_Request+0x20>
}
    3d28:	b002      	add	sp, #8
    3d2a:	bd70      	pop	{r4, r5, r6, pc}
		ETH_Write32(0x01010600); // OP, HTYPE, HLEN, HOPS
    3d2c:	4837      	ldr	r0, [pc, #220]	; (3e0c <DHCP_Request+0x100>)
    3d2e:	4c38      	ldr	r4, [pc, #224]	; (3e10 <DHCP_Request+0x104>)
    3d30:	47a0      	blx	r4
		ETH_Write32(xidValue);   // XID : made up number...
    3d32:	4838      	ldr	r0, [pc, #224]	; (3e14 <DHCP_Request+0x108>)
    3d34:	47a0      	blx	r4
		ETH_Write32(0x00008000); // SECS, FLAGS (broadcast)
    3d36:	2080      	movs	r0, #128	; 0x80
    3d38:	0200      	lsls	r0, r0, #8
    3d3a:	47a0      	blx	r4
		if (type == DHCP_REQUEST) {
    3d3c:	2d03      	cmp	r5, #3
    3d3e:	d04c      	beq.n	3dda <DHCP_Request+0xce>
			ETH_Write32(ipv4Address); // CIADDR
    3d40:	4b35      	ldr	r3, [pc, #212]	; (3e18 <DHCP_Request+0x10c>)
    3d42:	6818      	ldr	r0, [r3, #0]
    3d44:	4b32      	ldr	r3, [pc, #200]	; (3e10 <DHCP_Request+0x104>)
    3d46:	4798      	blx	r3
		ETH_Write32(0);                     // YIADDR
    3d48:	2000      	movs	r0, #0
    3d4a:	4c31      	ldr	r4, [pc, #196]	; (3e10 <DHCP_Request+0x104>)
    3d4c:	47a0      	blx	r4
		ETH_Write32(0);                     // SIADDR
    3d4e:	2000      	movs	r0, #0
    3d50:	47a0      	blx	r4
		ETH_Write32(0);                     // GIADDR
    3d52:	2000      	movs	r0, #0
    3d54:	47a0      	blx	r4
		ETH_WriteBlock((char *)&ethMAC, 6); // Hardware Address
    3d56:	2106      	movs	r1, #6
    3d58:	4668      	mov	r0, sp
    3d5a:	4b30      	ldr	r3, [pc, #192]	; (3e1c <DHCP_Request+0x110>)
    3d5c:	4798      	blx	r3
		DHCP_WriteZeros(202);               // 0 padding  + 192 bytes of BOOTP padding
    3d5e:	20ca      	movs	r0, #202	; 0xca
    3d60:	4b2f      	ldr	r3, [pc, #188]	; (3e20 <DHCP_Request+0x114>)
    3d62:	4798      	blx	r3
		ETH_Write32(0x63825363);            // MAGIC COOKIE - Options to Follow
    3d64:	482f      	ldr	r0, [pc, #188]	; (3e24 <DHCP_Request+0x118>)
    3d66:	47a0      	blx	r4
		ETH_Write8(53);
    3d68:	2035      	movs	r0, #53	; 0x35
    3d6a:	4c2f      	ldr	r4, [pc, #188]	; (3e28 <DHCP_Request+0x11c>)
    3d6c:	47a0      	blx	r4
		ETH_Write8(1);
    3d6e:	2001      	movs	r0, #1
    3d70:	47a0      	blx	r4
		ETH_Write8(type); // option 53 - DHCP packet type
    3d72:	0028      	movs	r0, r5
    3d74:	47a0      	blx	r4
		if (type == DHCP_REQUEST) {
    3d76:	2d03      	cmp	r5, #3
    3d78:	d033      	beq.n	3de2 <DHCP_Request+0xd6>
		ETH_Write8(55);
    3d7a:	2037      	movs	r0, #55	; 0x37
    3d7c:	4c2a      	ldr	r4, [pc, #168]	; (3e28 <DHCP_Request+0x11c>)
    3d7e:	47a0      	blx	r4
		ETH_Write8(4);
    3d80:	2004      	movs	r0, #4
    3d82:	47a0      	blx	r4
		ETH_Write8(1);
    3d84:	2001      	movs	r0, #1
    3d86:	47a0      	blx	r4
		ETH_Write8(3);
    3d88:	2003      	movs	r0, #3
    3d8a:	47a0      	blx	r4
		ETH_Write8(6);
    3d8c:	2006      	movs	r0, #6
    3d8e:	47a0      	blx	r4
		ETH_Write8(15);
    3d90:	200f      	movs	r0, #15
    3d92:	47a0      	blx	r4
		ETH_Write8(57);
    3d94:	2039      	movs	r0, #57	; 0x39
    3d96:	47a0      	blx	r4
		ETH_Write8(2);
    3d98:	2002      	movs	r0, #2
    3d9a:	47a0      	blx	r4
		ETH_Write16(512); // option 57 - DHCP maximum packet length
    3d9c:	2080      	movs	r0, #128	; 0x80
    3d9e:	0080      	lsls	r0, r0, #2
    3da0:	4b22      	ldr	r3, [pc, #136]	; (3e2c <DHCP_Request+0x120>)
    3da2:	4798      	blx	r3
		ETH_Write8(12);
    3da4:	200c      	movs	r0, #12
    3da6:	47a0      	blx	r4
		ETH_Write8(DHCP_NAME_SIZE);
    3da8:	200d      	movs	r0, #13
    3daa:	47a0      	blx	r4
		ETH_WriteBlock((char *)dhcpName, DHCP_NAME_SIZE);
    3dac:	210d      	movs	r1, #13
    3dae:	4820      	ldr	r0, [pc, #128]	; (3e30 <DHCP_Request+0x124>)
    3db0:	4e1a      	ldr	r6, [pc, #104]	; (3e1c <DHCP_Request+0x110>)
    3db2:	47b0      	blx	r6
		ETH_Write8(61);
    3db4:	203d      	movs	r0, #61	; 0x3d
    3db6:	47a0      	blx	r4
		ETH_Write8(7);
    3db8:	2007      	movs	r0, #7
    3dba:	47a0      	blx	r4
		ETH_Write8(1);
    3dbc:	2001      	movs	r0, #1
    3dbe:	47a0      	blx	r4
		ETH_WriteBlock((char *)&ethMAC, 6);
    3dc0:	2106      	movs	r1, #6
    3dc2:	4668      	mov	r0, sp
    3dc4:	47b0      	blx	r6
		ETH_Write8(255); // finished
    3dc6:	20ff      	movs	r0, #255	; 0xff
    3dc8:	47a0      	blx	r4
		UDP_Send();
    3dca:	4b1a      	ldr	r3, [pc, #104]	; (3e34 <DHCP_Request+0x128>)
    3dcc:	4798      	blx	r3
		if (type == DHCP_DISCOVER)
    3dce:	2d01      	cmp	r5, #1
    3dd0:	d1aa      	bne.n	3d28 <DHCP_Request+0x1c>
			clientState = SELECTING;
    3dd2:	2203      	movs	r2, #3
    3dd4:	4b18      	ldr	r3, [pc, #96]	; (3e38 <DHCP_Request+0x12c>)
    3dd6:	701a      	strb	r2, [r3, #0]
}
    3dd8:	e7a6      	b.n	3d28 <DHCP_Request+0x1c>
			ETH_Write32(0);
    3dda:	2000      	movs	r0, #0
    3ddc:	4b0c      	ldr	r3, [pc, #48]	; (3e10 <DHCP_Request+0x104>)
    3dde:	4798      	blx	r3
    3de0:	e7b2      	b.n	3d48 <DHCP_Request+0x3c>
			ETH_Write8(54);
    3de2:	2036      	movs	r0, #54	; 0x36
    3de4:	4c10      	ldr	r4, [pc, #64]	; (3e28 <DHCP_Request+0x11c>)
    3de6:	47a0      	blx	r4
			ETH_Write8(4);
    3de8:	2004      	movs	r0, #4
    3dea:	47a0      	blx	r4
			ETH_Write32(dhcpServerId);
    3dec:	4b13      	ldr	r3, [pc, #76]	; (3e3c <DHCP_Request+0x130>)
    3dee:	6818      	ldr	r0, [r3, #0]
    3df0:	4e07      	ldr	r6, [pc, #28]	; (3e10 <DHCP_Request+0x104>)
    3df2:	47b0      	blx	r6
			ETH_Write8(50);
    3df4:	2032      	movs	r0, #50	; 0x32
    3df6:	47a0      	blx	r4
			ETH_Write8(4);
    3df8:	2004      	movs	r0, #4
    3dfa:	47a0      	blx	r4
			ETH_Write32(ipv4Address);
    3dfc:	4b06      	ldr	r3, [pc, #24]	; (3e18 <DHCP_Request+0x10c>)
    3dfe:	6818      	ldr	r0, [r3, #0]
    3e00:	47b0      	blx	r6
    3e02:	e7ba      	b.n	3d7a <DHCP_Request+0x6e>
    3e04:	000039b5 	.word	0x000039b5
    3e08:	00005601 	.word	0x00005601
    3e0c:	01010600 	.word	0x01010600
    3e10:	0000350d 	.word	0x0000350d
    3e14:	4d434850 	.word	0x4d434850
    3e18:	20003f2c 	.word	0x20003f2c
    3e1c:	00003555 	.word	0x00003555
    3e20:	00003cf1 	.word	0x00003cf1
    3e24:	63825363 	.word	0x63825363
    3e28:	000034a5 	.word	0x000034a5
    3e2c:	000034d5 	.word	0x000034d5
    3e30:	00006ebc 	.word	0x00006ebc
    3e34:	0000563d 	.word	0x0000563d
    3e38:	20000002 	.word	0x20000002
    3e3c:	2000086c 	.word	0x2000086c

00003e40 <DHCP_Manage>:
{
    3e40:	b510      	push	{r4, lr}
	if (ethData.linkChange) {
    3e42:	4b22      	ldr	r3, [pc, #136]	; (3ecc <DHCP_Manage+0x8c>)
    3e44:	681b      	ldr	r3, [r3, #0]
    3e46:	06db      	lsls	r3, r3, #27
    3e48:	d51b      	bpl.n	3e82 <DHCP_Manage+0x42>
		if (clientState == BOUND && dhcpLeaseTime) {
    3e4a:	4b21      	ldr	r3, [pc, #132]	; (3ed0 <DHCP_Manage+0x90>)
    3e4c:	781b      	ldrb	r3, [r3, #0]
    3e4e:	2b05      	cmp	r3, #5
    3e50:	d00b      	beq.n	3e6a <DHCP_Manage+0x2a>
			clientState = INIT;
    3e52:	2201      	movs	r2, #1
    3e54:	4b1e      	ldr	r3, [pc, #120]	; (3ed0 <DHCP_Manage+0x90>)
    3e56:	701a      	strb	r2, [r3, #0]
			DHCP_Request(DHCP_DISCOVER);
    3e58:	2001      	movs	r0, #1
    3e5a:	4b1e      	ldr	r3, [pc, #120]	; (3ed4 <DHCP_Manage+0x94>)
    3e5c:	4798      	blx	r3
		ethData.linkChange = false;
    3e5e:	4a1b      	ldr	r2, [pc, #108]	; (3ecc <DHCP_Manage+0x8c>)
    3e60:	7813      	ldrb	r3, [r2, #0]
    3e62:	2110      	movs	r1, #16
    3e64:	438b      	bics	r3, r1
    3e66:	7013      	strb	r3, [r2, #0]
}
    3e68:	bd10      	pop	{r4, pc}
		if (clientState == BOUND && dhcpLeaseTime) {
    3e6a:	4b1b      	ldr	r3, [pc, #108]	; (3ed8 <DHCP_Manage+0x98>)
    3e6c:	685b      	ldr	r3, [r3, #4]
    3e6e:	2b00      	cmp	r3, #0
    3e70:	d0ef      	beq.n	3e52 <DHCP_Manage+0x12>
			dhcpServerId = 0xFFFFFFFF;
    3e72:	2201      	movs	r2, #1
    3e74:	4252      	negs	r2, r2
    3e76:	4b18      	ldr	r3, [pc, #96]	; (3ed8 <DHCP_Manage+0x98>)
    3e78:	601a      	str	r2, [r3, #0]
			DHCP_Request(DHCP_REQUEST);
    3e7a:	2003      	movs	r0, #3
    3e7c:	4b15      	ldr	r3, [pc, #84]	; (3ed4 <DHCP_Manage+0x94>)
    3e7e:	4798      	blx	r3
    3e80:	e7ed      	b.n	3e5e <DHCP_Manage+0x1e>
	} else if (clientState == INIT || clientState == INIT_REBOOT) {
    3e82:	4b13      	ldr	r3, [pc, #76]	; (3ed0 <DHCP_Manage+0x90>)
    3e84:	781a      	ldrb	r2, [r3, #0]
    3e86:	1e53      	subs	r3, r2, #1
    3e88:	b2db      	uxtb	r3, r3
    3e8a:	2b01      	cmp	r3, #1
    3e8c:	d90d      	bls.n	3eaa <DHCP_Manage+0x6a>
	} else if ((dhcpLeaseTime < 100) && clientState == BOUND) // 100 seconds remaining on my dhcp lease
    3e8e:	4b12      	ldr	r3, [pc, #72]	; (3ed8 <DHCP_Manage+0x98>)
    3e90:	685b      	ldr	r3, [r3, #4]
    3e92:	2b63      	cmp	r3, #99	; 0x63
    3e94:	d801      	bhi.n	3e9a <DHCP_Manage+0x5a>
    3e96:	2a05      	cmp	r2, #5
    3e98:	d00e      	beq.n	3eb8 <DHCP_Manage+0x78>
		if (clientState == BOUND && dhcpLeaseTime)
    3e9a:	2a05      	cmp	r2, #5
    3e9c:	d010      	beq.n	3ec0 <DHCP_Manage+0x80>
		else if (!dhcpLeaseTime)
    3e9e:	2b00      	cmp	r3, #0
    3ea0:	d1e2      	bne.n	3e68 <DHCP_Manage+0x28>
			clientState = INIT_REBOOT;
    3ea2:	2202      	movs	r2, #2
    3ea4:	4b0a      	ldr	r3, [pc, #40]	; (3ed0 <DHCP_Manage+0x90>)
    3ea6:	701a      	strb	r2, [r3, #0]
}
    3ea8:	e7de      	b.n	3e68 <DHCP_Manage+0x28>
		clientState = INIT;
    3eaa:	2201      	movs	r2, #1
    3eac:	4b08      	ldr	r3, [pc, #32]	; (3ed0 <DHCP_Manage+0x90>)
    3eae:	701a      	strb	r2, [r3, #0]
		DHCP_Request(DHCP_DISCOVER);
    3eb0:	2001      	movs	r0, #1
    3eb2:	4b08      	ldr	r3, [pc, #32]	; (3ed4 <DHCP_Manage+0x94>)
    3eb4:	4798      	blx	r3
    3eb6:	e7d7      	b.n	3e68 <DHCP_Manage+0x28>
		DHCP_Request(DHCP_REQUEST);
    3eb8:	2003      	movs	r0, #3
    3eba:	4b06      	ldr	r3, [pc, #24]	; (3ed4 <DHCP_Manage+0x94>)
    3ebc:	4798      	blx	r3
    3ebe:	e7d3      	b.n	3e68 <DHCP_Manage+0x28>
		if (clientState == BOUND && dhcpLeaseTime)
    3ec0:	2b00      	cmp	r3, #0
    3ec2:	d0ec      	beq.n	3e9e <DHCP_Manage+0x5e>
			dhcpLeaseTime--;
    3ec4:	3b01      	subs	r3, #1
    3ec6:	4a04      	ldr	r2, [pc, #16]	; (3ed8 <DHCP_Manage+0x98>)
    3ec8:	6053      	str	r3, [r2, #4]
    3eca:	e7cd      	b.n	3e68 <DHCP_Manage+0x28>
    3ecc:	20003e98 	.word	0x20003e98
    3ed0:	20000002 	.word	0x20000002
    3ed4:	00003d0d 	.word	0x00003d0d
    3ed8:	2000086c 	.word	0x2000086c

00003edc <DHCP_Handler>:
{
    3edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ede:	b087      	sub	sp, #28
    3ee0:	0004      	movs	r4, r0
	ETH_GetMAC(ethMAC.mac_array);
    3ee2:	a802      	add	r0, sp, #8
    3ee4:	4b47      	ldr	r3, [pc, #284]	; (4004 <DHCP_Handler+0x128>)
    3ee6:	4798      	blx	r3
	if (length > DHCP_HEADER_SIZE) {
    3ee8:	2cf0      	cmp	r4, #240	; 0xf0
    3eea:	dc01      	bgt.n	3ef0 <DHCP_Handler+0x14>
}
    3eec:	b007      	add	sp, #28
    3eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		v16 = ETH_Read16();
    3ef0:	4b45      	ldr	r3, [pc, #276]	; (4008 <DHCP_Handler+0x12c>)
    3ef2:	4798      	blx	r3
		if (v16 == 0x0201) {
    3ef4:	4b45      	ldr	r3, [pc, #276]	; (400c <DHCP_Handler+0x130>)
    3ef6:	4298      	cmp	r0, r3
    3ef8:	d1f8      	bne.n	3eec <DHCP_Handler+0x10>
			ETH_Dump(2);
    3efa:	2002      	movs	r0, #2
    3efc:	4b44      	ldr	r3, [pc, #272]	; (4010 <DHCP_Handler+0x134>)
    3efe:	4798      	blx	r3
			v = ETH_Read32();
    3f00:	4b44      	ldr	r3, [pc, #272]	; (4014 <DHCP_Handler+0x138>)
    3f02:	4798      	blx	r3
			if (v == xidValue) {
    3f04:	4b44      	ldr	r3, [pc, #272]	; (4018 <DHCP_Handler+0x13c>)
    3f06:	4298      	cmp	r0, r3
    3f08:	d1f0      	bne.n	3eec <DHCP_Handler+0x10>
				ETH_Dump(8);          // dump SECS, FLAGS & CIADDR
    3f0a:	2008      	movs	r0, #8
    3f0c:	4d40      	ldr	r5, [pc, #256]	; (4010 <DHCP_Handler+0x134>)
    3f0e:	47a8      	blx	r5
				myip  = ETH_Read32(); // CIADDR
    3f10:	4b40      	ldr	r3, [pc, #256]	; (4014 <DHCP_Handler+0x138>)
    3f12:	4798      	blx	r3
    3f14:	9001      	str	r0, [sp, #4]
				ETH_Dump(8);                                            // SIADDR, GIADDR, CHADDR
    3f16:	2008      	movs	r0, #8
    3f18:	47a8      	blx	r5
				ETH_ReadBlock((char *)&ethPktMAC, sizeof(ethPktMAC.s)); // This is a DHCP for IPv4
    3f1a:	2106      	movs	r1, #6
    3f1c:	a804      	add	r0, sp, #16
    3f1e:	4b3f      	ldr	r3, [pc, #252]	; (401c <DHCP_Handler+0x140>)
    3f20:	4798      	blx	r3
				if (memcmp(&ethPktMAC.s, &ethMAC.s, 6) == 0) // only compare 6 bytes of MAC address.
    3f22:	2206      	movs	r2, #6
    3f24:	a902      	add	r1, sp, #8
    3f26:	a804      	add	r0, sp, #16
    3f28:	4b3d      	ldr	r3, [pc, #244]	; (4020 <DHCP_Handler+0x144>)
    3f2a:	4798      	blx	r3
    3f2c:	2800      	cmp	r0, #0
    3f2e:	d163      	bne.n	3ff8 <DHCP_Handler+0x11c>
					ETH_Dump(202);
    3f30:	30ca      	adds	r0, #202	; 0xca
    3f32:	4b37      	ldr	r3, [pc, #220]	; (4010 <DHCP_Handler+0x134>)
    3f34:	4798      	blx	r3
					if (ETH_Read32() == 0x63825363) {
    3f36:	4b37      	ldr	r3, [pc, #220]	; (4014 <DHCP_Handler+0x138>)
    3f38:	4798      	blx	r3
    3f3a:	4b3a      	ldr	r3, [pc, #232]	; (4024 <DHCP_Handler+0x148>)
    3f3c:	4298      	cmp	r0, r3
    3f3e:	d1d5      	bne.n	3eec <DHCP_Handler+0x10>
						length -= 240;
    3f40:	3cf0      	subs	r4, #240	; 0xf0
						while (length > 0) {
    3f42:	e003      	b.n	3f4c <DHCP_Handler+0x70>
								ipv4SubnetMask = ETH_Read32();
    3f44:	4b33      	ldr	r3, [pc, #204]	; (4014 <DHCP_Handler+0x138>)
    3f46:	4798      	blx	r3
    3f48:	4b37      	ldr	r3, [pc, #220]	; (4028 <DHCP_Handler+0x14c>)
    3f4a:	6018      	str	r0, [r3, #0]
						while (length > 0) {
    3f4c:	2c00      	cmp	r4, #0
    3f4e:	dd4a      	ble.n	3fe6 <DHCP_Handler+0x10a>
							option       = ETH_Read8();
    3f50:	4f36      	ldr	r7, [pc, #216]	; (402c <DHCP_Handler+0x150>)
    3f52:	47b8      	blx	r7
    3f54:	0005      	movs	r5, r0
							optionLength = ETH_Read8();
    3f56:	47b8      	blx	r7
    3f58:	0007      	movs	r7, r0
							length -= 2 + optionLength;
    3f5a:	1c83      	adds	r3, r0, #2
    3f5c:	1ae4      	subs	r4, r4, r3
							switch (option) {
    3f5e:	2d36      	cmp	r5, #54	; 0x36
    3f60:	d83d      	bhi.n	3fde <DHCP_Handler+0x102>
    3f62:	00ad      	lsls	r5, r5, #2
    3f64:	4b32      	ldr	r3, [pc, #200]	; (4030 <DHCP_Handler+0x154>)
    3f66:	595b      	ldr	r3, [r3, r5]
    3f68:	469f      	mov	pc, r3
								ipv4Router = ETH_Read32(); // get MAC address of this router
    3f6a:	4b2a      	ldr	r3, [pc, #168]	; (4014 <DHCP_Handler+0x138>)
    3f6c:	4798      	blx	r3
    3f6e:	4b31      	ldr	r3, [pc, #196]	; (4034 <DHCP_Handler+0x158>)
    3f70:	6018      	str	r0, [r3, #0]
								break;
    3f72:	e7eb      	b.n	3f4c <DHCP_Handler+0x70>
								if (optionLength >= 4) {
    3f74:	2803      	cmp	r0, #3
    3f76:	d9e9      	bls.n	3f4c <DHCP_Handler+0x70>
									ipv4DNS[0] = ETH_Read32();
    3f78:	4b26      	ldr	r3, [pc, #152]	; (4014 <DHCP_Handler+0x138>)
    3f7a:	4798      	blx	r3
    3f7c:	4b2e      	ldr	r3, [pc, #184]	; (4038 <DHCP_Handler+0x15c>)
    3f7e:	6018      	str	r0, [r3, #0]
									optionLength -= 4;
    3f80:	3f04      	subs	r7, #4
    3f82:	b2ff      	uxtb	r7, r7
									if (optionLength >= 4) {
    3f84:	2f03      	cmp	r7, #3
    3f86:	d9e1      	bls.n	3f4c <DHCP_Handler+0x70>
										ipv4DNS[1] = ETH_Read32();
    3f88:	4b22      	ldr	r3, [pc, #136]	; (4014 <DHCP_Handler+0x138>)
    3f8a:	4798      	blx	r3
    3f8c:	4b2a      	ldr	r3, [pc, #168]	; (4038 <DHCP_Handler+0x15c>)
    3f8e:	6058      	str	r0, [r3, #4]
    3f90:	e7dc      	b.n	3f4c <DHCP_Handler+0x70>
								if (optionLength >= 4) {
    3f92:	2803      	cmp	r0, #3
    3f94:	d9da      	bls.n	3f4c <DHCP_Handler+0x70>
									dhcpLeaseTime = ETH_Read32();
    3f96:	4b1f      	ldr	r3, [pc, #124]	; (4014 <DHCP_Handler+0x138>)
    3f98:	4798      	blx	r3
    3f9a:	4b28      	ldr	r3, [pc, #160]	; (403c <DHCP_Handler+0x160>)
    3f9c:	6058      	str	r0, [r3, #4]
    3f9e:	e7d5      	b.n	3f4c <DHCP_Handler+0x70>
								dhcpServerId = ETH_Read32();
    3fa0:	4b1c      	ldr	r3, [pc, #112]	; (4014 <DHCP_Handler+0x138>)
    3fa2:	4798      	blx	r3
    3fa4:	4b25      	ldr	r3, [pc, #148]	; (403c <DHCP_Handler+0x160>)
    3fa6:	6018      	str	r0, [r3, #0]
								break;
    3fa8:	e7d0      	b.n	3f4c <DHCP_Handler+0x70>
								switch (ETH_Read8()) {
    3faa:	4b20      	ldr	r3, [pc, #128]	; (402c <DHCP_Handler+0x150>)
    3fac:	4798      	blx	r3
    3fae:	2805      	cmp	r0, #5
    3fb0:	d00a      	beq.n	3fc8 <DHCP_Handler+0xec>
    3fb2:	2806      	cmp	r0, #6
    3fb4:	d00f      	beq.n	3fd6 <DHCP_Handler+0xfa>
    3fb6:	2802      	cmp	r0, #2
    3fb8:	d1c8      	bne.n	3f4c <DHCP_Handler+0x70>
									ipv4Address = myip;
    3fba:	4b21      	ldr	r3, [pc, #132]	; (4040 <DHCP_Handler+0x164>)
    3fbc:	9a01      	ldr	r2, [sp, #4]
    3fbe:	601a      	str	r2, [r3, #0]
									clientState = REQUESTING;
    3fc0:	2204      	movs	r2, #4
    3fc2:	4b20      	ldr	r3, [pc, #128]	; (4044 <DHCP_Handler+0x168>)
    3fc4:	701a      	strb	r2, [r3, #0]
									break;
    3fc6:	e7c1      	b.n	3f4c <DHCP_Handler+0x70>
									ipv4Address = myip;
    3fc8:	4b1d      	ldr	r3, [pc, #116]	; (4040 <DHCP_Handler+0x164>)
    3fca:	9a01      	ldr	r2, [sp, #4]
    3fcc:	601a      	str	r2, [r3, #0]
									clientState = BOUND;
    3fce:	2205      	movs	r2, #5
    3fd0:	4b1c      	ldr	r3, [pc, #112]	; (4044 <DHCP_Handler+0x168>)
    3fd2:	701a      	strb	r2, [r3, #0]
									break;
    3fd4:	e7ba      	b.n	3f4c <DHCP_Handler+0x70>
									clientState = INIT;
    3fd6:	2201      	movs	r2, #1
    3fd8:	4b1a      	ldr	r3, [pc, #104]	; (4044 <DHCP_Handler+0x168>)
    3fda:	701a      	strb	r2, [r3, #0]
								break;
    3fdc:	e7b6      	b.n	3f4c <DHCP_Handler+0x70>
								ETH_Dump(optionLength); // dump any unused bytes
    3fde:	b2b8      	uxth	r0, r7
    3fe0:	4b0b      	ldr	r3, [pc, #44]	; (4010 <DHCP_Handler+0x134>)
    3fe2:	4798      	blx	r3
								break;
    3fe4:	e7b2      	b.n	3f4c <DHCP_Handler+0x70>
						if (clientState == REQUESTING)
    3fe6:	4b17      	ldr	r3, [pc, #92]	; (4044 <DHCP_Handler+0x168>)
    3fe8:	781b      	ldrb	r3, [r3, #0]
    3fea:	2b04      	cmp	r3, #4
    3fec:	d000      	beq.n	3ff0 <DHCP_Handler+0x114>
    3fee:	e77d      	b.n	3eec <DHCP_Handler+0x10>
							DHCP_Request(DHCP_REQUEST);
    3ff0:	2003      	movs	r0, #3
    3ff2:	4b15      	ldr	r3, [pc, #84]	; (4048 <DHCP_Handler+0x16c>)
    3ff4:	4798      	blx	r3
    3ff6:	e779      	b.n	3eec <DHCP_Handler+0x10>
					ETH_Dump(length - 34);
    3ff8:	3c22      	subs	r4, #34	; 0x22
    3ffa:	b2a0      	uxth	r0, r4
    3ffc:	4b04      	ldr	r3, [pc, #16]	; (4010 <DHCP_Handler+0x134>)
    3ffe:	4798      	blx	r3
}
    4000:	e774      	b.n	3eec <DHCP_Handler+0x10>
    4002:	46c0      	nop			; (mov r8, r8)
    4004:	000039b5 	.word	0x000039b5
    4008:	000033d9 	.word	0x000033d9
    400c:	00000201 	.word	0x00000201
    4010:	000036ed 	.word	0x000036ed
    4014:	0000340d 	.word	0x0000340d
    4018:	4d434850 	.word	0x4d434850
    401c:	00003451 	.word	0x00003451
    4020:	00005a09 	.word	0x00005a09
    4024:	63825363 	.word	0x63825363
    4028:	20003f14 	.word	0x20003f14
    402c:	00003359 	.word	0x00003359
    4030:	00006ddc 	.word	0x00006ddc
    4034:	20003f0c 	.word	0x20003f0c
    4038:	20003f30 	.word	0x20003f30
    403c:	2000086c 	.word	0x2000086c
    4040:	20003f2c 	.word	0x20003f2c
    4044:	20000002 	.word	0x20000002
    4048:	00003d0d 	.word	0x00003d0d

0000404c <ICMP_EchoReply>:
 * @param payload_length
 * @return
 */

error_msg ICMP_EchoReply(icmpHeader_t *icmpHdr, ipv4Header_t *ipv4Hdr)
{
    404c:	b570      	push	{r4, r5, r6, lr}
    404e:	b082      	sub	sp, #8
    4050:	0005      	movs	r5, r0
    4052:	000c      	movs	r4, r1
	uint16_t  cksm = 0;
    4054:	2200      	movs	r2, #0
    4056:	466b      	mov	r3, sp
    4058:	80da      	strh	r2, [r3, #6]
	error_msg ret  = ERROR;

	ret = IPv4_Start(ipv4Hdr->srcIpAddress, ipv4Hdr->protocol);
    405a:	7a49      	ldrb	r1, [r1, #9]
    405c:	68e0      	ldr	r0, [r4, #12]
    405e:	4b1c      	ldr	r3, [pc, #112]	; (40d0 <ICMP_EchoReply+0x84>)
    4060:	4798      	blx	r3
	if (ret == SUCCESS) {
    4062:	2801      	cmp	r0, #1
    4064:	d001      	beq.n	406a <ICMP_EchoReply+0x1e>
			           sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) + offsetof(icmpHeader_t, checksum));
			ret = IPV4_Send(ipv4PayloadLength);
		}
	}
	return ret;
}
    4066:	b002      	add	sp, #8
    4068:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t ipv4PayloadLength = ipv4Hdr->length - sizeof(ipv4Header_t);
    406a:	8863      	ldrh	r3, [r4, #2]
		ipv4PayloadLength = ipv4Hdr->length - (uint16_t)(ipv4Hdr->ihl << 2);
    406c:	7824      	ldrb	r4, [r4, #0]
    406e:	0724      	lsls	r4, r4, #28
    4070:	0ea4      	lsrs	r4, r4, #26
    4072:	1b1c      	subs	r4, r3, r4
    4074:	b2a4      	uxth	r4, r4
		ETH_Write16(ECHO_REPLY);
    4076:	2000      	movs	r0, #0
    4078:	4e16      	ldr	r6, [pc, #88]	; (40d4 <ICMP_EchoReply+0x88>)
    407a:	47b0      	blx	r6
		ETH_Write16(0); // checksum
    407c:	2000      	movs	r0, #0
    407e:	47b0      	blx	r6
		ETH_Write16(ntohs(icmpHdr->identifier));
    4080:	88ab      	ldrh	r3, [r5, #4]
    4082:	0a18      	lsrs	r0, r3, #8
    4084:	021b      	lsls	r3, r3, #8
    4086:	4318      	orrs	r0, r3
    4088:	b280      	uxth	r0, r0
    408a:	47b0      	blx	r6
		ETH_Write16(ntohs(icmpHdr->sequence));
    408c:	88eb      	ldrh	r3, [r5, #6]
    408e:	0a18      	lsrs	r0, r3, #8
    4090:	021b      	lsls	r3, r3, #8
    4092:	4318      	orrs	r0, r3
    4094:	b280      	uxth	r0, r0
    4096:	47b0      	blx	r6
		ret = ETH_Copy(ipv4PayloadLength - sizeof(icmpHeader_t));
    4098:	0020      	movs	r0, r4
    409a:	3808      	subs	r0, #8
    409c:	b280      	uxth	r0, r0
    409e:	4b0e      	ldr	r3, [pc, #56]	; (40d8 <ICMP_EchoReply+0x8c>)
    40a0:	4798      	blx	r3
		if (ret == SUCCESS) // copy can timeout in heavy network situations like flood ping
    40a2:	2801      	cmp	r0, #1
    40a4:	d1df      	bne.n	4066 <ICMP_EchoReply+0x1a>
			ETH_SaveRDPT();
    40a6:	4b0d      	ldr	r3, [pc, #52]	; (40dc <ICMP_EchoReply+0x90>)
    40a8:	4798      	blx	r3
			cksm            = sizeof(ethernetFrame_t) + sizeof(ipv4Header_t);
    40aa:	466b      	mov	r3, sp
    40ac:	1d9d      	adds	r5, r3, #6
    40ae:	2322      	movs	r3, #34	; 0x22
    40b0:	802b      	strh	r3, [r5, #0]
			cksm            = ETH_TxComputeChecksum(icmp_cksm_start, ipv4PayloadLength, 0);
    40b2:	2200      	movs	r2, #0
    40b4:	0021      	movs	r1, r4
    40b6:	2022      	movs	r0, #34	; 0x22
    40b8:	4b09      	ldr	r3, [pc, #36]	; (40e0 <ICMP_EchoReply+0x94>)
    40ba:	4798      	blx	r3
    40bc:	8028      	strh	r0, [r5, #0]
			ETH_Insert((char *)&cksm,
    40be:	2224      	movs	r2, #36	; 0x24
    40c0:	2102      	movs	r1, #2
    40c2:	0028      	movs	r0, r5
    40c4:	4b07      	ldr	r3, [pc, #28]	; (40e4 <ICMP_EchoReply+0x98>)
    40c6:	4798      	blx	r3
			ret = IPV4_Send(ipv4PayloadLength);
    40c8:	0020      	movs	r0, r4
    40ca:	4b07      	ldr	r3, [pc, #28]	; (40e8 <ICMP_EchoReply+0x9c>)
    40cc:	4798      	blx	r3
    40ce:	e7ca      	b.n	4066 <ICMP_EchoReply+0x1a>
    40d0:	00004331 	.word	0x00004331
    40d4:	000034d5 	.word	0x000034d5
    40d8:	000037f1 	.word	0x000037f1
    40dc:	000039cd 	.word	0x000039cd
    40e0:	000038d5 	.word	0x000038d5
    40e4:	00003779 	.word	0x00003779
    40e8:	00004411 	.word	0x00004411

000040ec <ICMP_Receive>:
{
    40ec:	b510      	push	{r4, lr}
    40ee:	b082      	sub	sp, #8
    40f0:	0004      	movs	r4, r0
	ETH_ReadBlock((char *)&icmpHdr, sizeof(icmpHeader_t));
    40f2:	2108      	movs	r1, #8
    40f4:	4668      	mov	r0, sp
    40f6:	4b0b      	ldr	r3, [pc, #44]	; (4124 <ICMP_Receive+0x38>)
    40f8:	4798      	blx	r3
	ETH_SaveRDPT();
    40fa:	4b0b      	ldr	r3, [pc, #44]	; (4128 <ICMP_Receive+0x3c>)
    40fc:	4798      	blx	r3
	switch (ntohs((icmpTypeCodes_t)icmpHdr.typeCode)) {
    40fe:	466b      	mov	r3, sp
    4100:	881b      	ldrh	r3, [r3, #0]
    4102:	0a1a      	lsrs	r2, r3, #8
    4104:	061b      	lsls	r3, r3, #24
    4106:	0c1b      	lsrs	r3, r3, #16
    4108:	4313      	orrs	r3, r2
    410a:	2280      	movs	r2, #128	; 0x80
    410c:	0112      	lsls	r2, r2, #4
    410e:	4293      	cmp	r3, r2
    4110:	d002      	beq.n	4118 <ICMP_Receive+0x2c>
	error_msg    ret = ERROR;
    4112:	2000      	movs	r0, #0
}
    4114:	b002      	add	sp, #8
    4116:	bd10      	pop	{r4, pc}
		ret = ICMP_EchoReply(&icmpHdr, ipv4Hdr);
    4118:	0021      	movs	r1, r4
    411a:	4668      	mov	r0, sp
    411c:	4b03      	ldr	r3, [pc, #12]	; (412c <ICMP_Receive+0x40>)
    411e:	4798      	blx	r3
	} break;
    4120:	e7f8      	b.n	4114 <ICMP_Receive+0x28>
    4122:	46c0      	nop			; (mov r8, r8)
    4124:	00003451 	.word	0x00003451
    4128:	000039cd 	.word	0x000039cd
    412c:	0000404d 	.word	0x0000404d

00004130 <IPV4_Init>:
 */
extern void TCP_Recv(uint32_t, uint16_t);

void IPV4_Init(void)
{
	ipv4Address = 0;
    4130:	2200      	movs	r2, #0
    4132:	4b01      	ldr	r3, [pc, #4]	; (4138 <IPV4_Init+0x8>)
    4134:	601a      	str	r2, [r3, #0]
}
    4136:	4770      	bx	lr
    4138:	20003f2c 	.word	0x20003f2c

0000413c <IPV4_PseudoHeaderChecksum>:

uint16_t IPV4_PseudoHeaderChecksum(uint16_t payloadLen)
{
    413c:	b084      	sub	sp, #16
	ipv4_pseudo_header_t tmp;
	uint8_t              len;
	uint32_t             cksm = 0;
	uint16_t *           v;

	tmp.srcIpAddress = ipv4Header.srcIpAddress;
    413e:	4b0e      	ldr	r3, [pc, #56]	; (4178 <IPV4_PseudoHeaderChecksum+0x3c>)
    4140:	aa01      	add	r2, sp, #4
    4142:	68d9      	ldr	r1, [r3, #12]
    4144:	9101      	str	r1, [sp, #4]
	tmp.dstIpAddress = ipv4Header.dstIpAddress;
    4146:	6919      	ldr	r1, [r3, #16]
    4148:	6051      	str	r1, [r2, #4]
	tmp.protocol     = ipv4Header.protocol;
    414a:	7a5b      	ldrb	r3, [r3, #9]
    414c:	7213      	strb	r3, [r2, #8]
	tmp.z            = 0;
    414e:	2300      	movs	r3, #0
    4150:	7253      	strb	r3, [r2, #9]
	tmp.length       = payloadLen;
    4152:	8150      	strh	r0, [r2, #10]
	uint32_t             cksm = 0;
    4154:	2100      	movs	r1, #0

	len = sizeof(tmp);
	len = len >> 1;
    4156:	3306      	adds	r3, #6

	v = (uint16_t *)&tmp;

	while (len) {
    4158:	e004      	b.n	4164 <IPV4_PseudoHeaderChecksum+0x28>
		cksm += *v;
    415a:	8810      	ldrh	r0, [r2, #0]
    415c:	1809      	adds	r1, r1, r0
		len--;
    415e:	3b01      	subs	r3, #1
    4160:	b2db      	uxtb	r3, r3
		v++;
    4162:	3202      	adds	r2, #2
	while (len) {
    4164:	2b00      	cmp	r3, #0
    4166:	d1f8      	bne.n	415a <IPV4_PseudoHeaderChecksum+0x1e>
	}

	// wrap the checksum
	cksm = (cksm & 0x0FFFF) + (cksm >> 16);
    4168:	0408      	lsls	r0, r1, #16
    416a:	0c00      	lsrs	r0, r0, #16
    416c:	0c09      	lsrs	r1, r1, #16
    416e:	1840      	adds	r0, r0, r1

	// Return the resulting checksum
	return cksm;
    4170:	b280      	uxth	r0, r0
}
    4172:	b004      	add	sp, #16
    4174:	4770      	bx	lr
    4176:	46c0      	nop			; (mov r8, r8)
    4178:	20003f18 	.word	0x20003f18

0000417c <IPV4_Packet>:

error_msg IPV4_Packet(void)
{
    417c:	b5f0      	push	{r4, r5, r6, r7, lr}
    417e:	b08b      	sub	sp, #44	; 0x2c
	uint16_t length = 0;
	char     msg[40];
	uint8_t  hdrLen;

	// calculate the IPv4 checksum
	cksm = ETH_RxComputeChecksum(sizeof(ipv4Header_t), 0);
    4180:	2100      	movs	r1, #0
    4182:	2014      	movs	r0, #20
    4184:	4b56      	ldr	r3, [pc, #344]	; (42e0 <IPV4_Packet+0x164>)
    4186:	4798      	blx	r3
	if (cksm != 0) {
    4188:	2800      	cmp	r0, #0
    418a:	d005      	beq.n	4198 <IPV4_Packet+0x1c>
		IPV4_SyslogWrite("IP Header wrong cksm");
    418c:	4855      	ldr	r0, [pc, #340]	; (42e4 <IPV4_Packet+0x168>)
    418e:	4b56      	ldr	r3, [pc, #344]	; (42e8 <IPV4_Packet+0x16c>)
    4190:	4798      	blx	r3
		return IPV4_CHECKSUM_FAILS;
    4192:	2007      	movs	r0, #7
		IPV4_Sprintf(msg, "ip address : %X", (unsigned int)ipv4Header.dstIpAddress);
		IPV4_SyslogWrite(msg);
		IPV4_SyslogWrite("DEST IP NOT MATCHED");
		return DEST_IP_NOT_MATCHED;
	}
}
    4194:	b00b      	add	sp, #44	; 0x2c
    4196:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ETH_ReadBlock((char *)&ipv4Header, sizeof(ipv4Header_t));
    4198:	4c54      	ldr	r4, [pc, #336]	; (42ec <IPV4_Packet+0x170>)
    419a:	2114      	movs	r1, #20
    419c:	0020      	movs	r0, r4
    419e:	4b54      	ldr	r3, [pc, #336]	; (42f0 <IPV4_Packet+0x174>)
    41a0:	4798      	blx	r3
	if (ipv4Header.version != 4) {
    41a2:	7823      	ldrb	r3, [r4, #0]
    41a4:	220f      	movs	r2, #15
    41a6:	4393      	bics	r3, r2
    41a8:	2b40      	cmp	r3, #64	; 0x40
    41aa:	d001      	beq.n	41b0 <IPV4_Packet+0x34>
		return IP_WRONG_VERSION; // Incorrect version number
    41ac:	2006      	movs	r0, #6
    41ae:	e7f1      	b.n	4194 <IPV4_Packet+0x18>
	ipv4Header.dstIpAddress = ntohl(ipv4Header.dstIpAddress);
    41b0:	484e      	ldr	r0, [pc, #312]	; (42ec <IPV4_Packet+0x170>)
    41b2:	6901      	ldr	r1, [r0, #16]
    41b4:	0e0a      	lsrs	r2, r1, #24
    41b6:	0a0b      	lsrs	r3, r1, #8
    41b8:	27ff      	movs	r7, #255	; 0xff
    41ba:	023f      	lsls	r7, r7, #8
    41bc:	403b      	ands	r3, r7
    41be:	431a      	orrs	r2, r3
    41c0:	020c      	lsls	r4, r1, #8
    41c2:	26ff      	movs	r6, #255	; 0xff
    41c4:	0436      	lsls	r6, r6, #16
    41c6:	4034      	ands	r4, r6
    41c8:	4322      	orrs	r2, r4
    41ca:	0609      	lsls	r1, r1, #24
    41cc:	430a      	orrs	r2, r1
    41ce:	6102      	str	r2, [r0, #16]
	ipv4Header.srcIpAddress = ntohl(ipv4Header.srcIpAddress);
    41d0:	68c1      	ldr	r1, [r0, #12]
    41d2:	0e0b      	lsrs	r3, r1, #24
    41d4:	0a0d      	lsrs	r5, r1, #8
    41d6:	403d      	ands	r5, r7
    41d8:	432b      	orrs	r3, r5
    41da:	020c      	lsls	r4, r1, #8
    41dc:	4034      	ands	r4, r6
    41de:	4323      	orrs	r3, r4
    41e0:	0609      	lsls	r1, r1, #24
    41e2:	430b      	orrs	r3, r1
    41e4:	60c3      	str	r3, [r0, #12]
	if ((ipv4Header.dstIpAddress == ipv4Address) || (ipv4Header.dstIpAddress == IPV4_BROADCAST)) {
    41e6:	4b43      	ldr	r3, [pc, #268]	; (42f4 <IPV4_Packet+0x178>)
    41e8:	681b      	ldr	r3, [r3, #0]
    41ea:	429a      	cmp	r2, r3
    41ec:	d00c      	beq.n	4208 <IPV4_Packet+0x8c>
    41ee:	1c53      	adds	r3, r2, #1
    41f0:	d00a      	beq.n	4208 <IPV4_Packet+0x8c>
		IPV4_Sprintf(msg, "ip address : %X", (unsigned int)ipv4Header.dstIpAddress);
    41f2:	4941      	ldr	r1, [pc, #260]	; (42f8 <IPV4_Packet+0x17c>)
    41f4:	4668      	mov	r0, sp
    41f6:	4b41      	ldr	r3, [pc, #260]	; (42fc <IPV4_Packet+0x180>)
    41f8:	4798      	blx	r3
		IPV4_SyslogWrite(msg);
    41fa:	4668      	mov	r0, sp
    41fc:	4c3a      	ldr	r4, [pc, #232]	; (42e8 <IPV4_Packet+0x16c>)
    41fe:	47a0      	blx	r4
		IPV4_SyslogWrite("DEST IP NOT MATCHED");
    4200:	483f      	ldr	r0, [pc, #252]	; (4300 <IPV4_Packet+0x184>)
    4202:	47a0      	blx	r4
		return DEST_IP_NOT_MATCHED;
    4204:	2008      	movs	r0, #8
    4206:	e7c5      	b.n	4194 <IPV4_Packet+0x18>
		ipv4Header.length = ntohs(ipv4Header.length);
    4208:	4a38      	ldr	r2, [pc, #224]	; (42ec <IPV4_Packet+0x170>)
    420a:	8853      	ldrh	r3, [r2, #2]
    420c:	0a19      	lsrs	r1, r3, #8
    420e:	021b      	lsls	r3, r3, #8
    4210:	430b      	orrs	r3, r1
    4212:	8053      	strh	r3, [r2, #2]
		hdrLen = (uint8_t)(ipv4Header.ihl << 2);
    4214:	7813      	ldrb	r3, [r2, #0]
    4216:	071b      	lsls	r3, r3, #28
    4218:	0f1b      	lsrs	r3, r3, #28
    421a:	009c      	lsls	r4, r3, #2
		if (ipv4Header.ihl > 5) {
    421c:	2b05      	cmp	r3, #5
    421e:	dc0d      	bgt.n	423c <IPV4_Packet+0xc0>
		switch ((ipProtocolNumbers)ipv4Header.protocol) {
    4220:	4b32      	ldr	r3, [pc, #200]	; (42ec <IPV4_Packet+0x170>)
    4222:	7a5b      	ldrb	r3, [r3, #9]
    4224:	2b06      	cmp	r3, #6
    4226:	d03c      	beq.n	42a2 <IPV4_Packet+0x126>
    4228:	2b11      	cmp	r3, #17
    422a:	d028      	beq.n	427e <IPV4_Packet+0x102>
    422c:	2b01      	cmp	r3, #1
    422e:	d00b      	beq.n	4248 <IPV4_Packet+0xcc>
			ETH_Dump(ipv4Header.length);
    4230:	4b2e      	ldr	r3, [pc, #184]	; (42ec <IPV4_Packet+0x170>)
    4232:	8858      	ldrh	r0, [r3, #2]
    4234:	4b33      	ldr	r3, [pc, #204]	; (4304 <IPV4_Packet+0x188>)
    4236:	4798      	blx	r3
		return SUCCESS;
    4238:	2001      	movs	r0, #1
			break;
    423a:	e7ab      	b.n	4194 <IPV4_Packet+0x18>
			ETH_Dump((uint16_t)(hdrLen - sizeof(ipv4Header_t)));
    423c:	0020      	movs	r0, r4
    423e:	3814      	subs	r0, #20
    4240:	b280      	uxth	r0, r0
    4242:	4b30      	ldr	r3, [pc, #192]	; (4304 <IPV4_Packet+0x188>)
    4244:	4798      	blx	r3
    4246:	e7eb      	b.n	4220 <IPV4_Packet+0xa4>
			IPV4_SyslogWrite("rx icmp");
    4248:	482f      	ldr	r0, [pc, #188]	; (4308 <IPV4_Packet+0x18c>)
    424a:	4b27      	ldr	r3, [pc, #156]	; (42e8 <IPV4_Packet+0x16c>)
    424c:	4798      	blx	r3
			length = ipv4Header.length - hdrLen;
    424e:	4b27      	ldr	r3, [pc, #156]	; (42ec <IPV4_Packet+0x170>)
    4250:	8858      	ldrh	r0, [r3, #2]
    4252:	1b00      	subs	r0, r0, r4
    4254:	b280      	uxth	r0, r0
			cksm   = ETH_RxComputeChecksum(length, 0);
    4256:	2100      	movs	r1, #0
    4258:	4b21      	ldr	r3, [pc, #132]	; (42e0 <IPV4_Packet+0x164>)
    425a:	4798      	blx	r3
			if (cksm == 0) {
    425c:	2800      	cmp	r0, #0
    425e:	d009      	beq.n	4274 <IPV4_Packet+0xf8>
				IPV4_Sprintf(msg, "icmp wrong cksm : %x", cksm);
    4260:	0002      	movs	r2, r0
    4262:	492a      	ldr	r1, [pc, #168]	; (430c <IPV4_Packet+0x190>)
    4264:	4668      	mov	r0, sp
    4266:	4b25      	ldr	r3, [pc, #148]	; (42fc <IPV4_Packet+0x180>)
    4268:	4798      	blx	r3
				IPV4_SyslogWrite(msg);
    426a:	4668      	mov	r0, sp
    426c:	4b1e      	ldr	r3, [pc, #120]	; (42e8 <IPV4_Packet+0x16c>)
    426e:	4798      	blx	r3
				return ICMP_CHECKSUM_FAILS;
    4270:	2009      	movs	r0, #9
    4272:	e78f      	b.n	4194 <IPV4_Packet+0x18>
				ICMP_Receive(&ipv4Header);
    4274:	481d      	ldr	r0, [pc, #116]	; (42ec <IPV4_Packet+0x170>)
    4276:	4b26      	ldr	r3, [pc, #152]	; (4310 <IPV4_Packet+0x194>)
    4278:	4798      	blx	r3
		return SUCCESS;
    427a:	2001      	movs	r0, #1
		} break;
    427c:	e78a      	b.n	4194 <IPV4_Packet+0x18>
			IPV4_SyslogWrite("rx udp");
    427e:	4825      	ldr	r0, [pc, #148]	; (4314 <IPV4_Packet+0x198>)
    4280:	4b19      	ldr	r3, [pc, #100]	; (42e8 <IPV4_Packet+0x16c>)
    4282:	4798      	blx	r3
			length = ipv4Header.length - hdrLen;
    4284:	4b19      	ldr	r3, [pc, #100]	; (42ec <IPV4_Packet+0x170>)
    4286:	885b      	ldrh	r3, [r3, #2]
    4288:	1b1c      	subs	r4, r3, r4
    428a:	b2a4      	uxth	r4, r4
			cksm = IPV4_PseudoHeaderChecksum(length); // Calculate pseudo header checksum
    428c:	0020      	movs	r0, r4
    428e:	4b22      	ldr	r3, [pc, #136]	; (4318 <IPV4_Packet+0x19c>)
    4290:	4798      	blx	r3
    4292:	0001      	movs	r1, r0
			cksm = ETH_RxComputeChecksum(
    4294:	0020      	movs	r0, r4
    4296:	4b12      	ldr	r3, [pc, #72]	; (42e0 <IPV4_Packet+0x164>)
    4298:	4798      	blx	r3
			UDP_Receive(cksm);
    429a:	4b20      	ldr	r3, [pc, #128]	; (431c <IPV4_Packet+0x1a0>)
    429c:	4798      	blx	r3
		return SUCCESS;
    429e:	2001      	movs	r0, #1
			break;
    42a0:	e778      	b.n	4194 <IPV4_Packet+0x18>
			IPV4_SyslogWrite("rx tcp");
    42a2:	481f      	ldr	r0, [pc, #124]	; (4320 <IPV4_Packet+0x1a4>)
    42a4:	4b10      	ldr	r3, [pc, #64]	; (42e8 <IPV4_Packet+0x16c>)
    42a6:	4798      	blx	r3
			length = ipv4Header.length - hdrLen;
    42a8:	4b10      	ldr	r3, [pc, #64]	; (42ec <IPV4_Packet+0x170>)
    42aa:	885b      	ldrh	r3, [r3, #2]
    42ac:	1b1c      	subs	r4, r3, r4
    42ae:	b2a4      	uxth	r4, r4
			cksm   = IPV4_PseudoHeaderChecksum(length);
    42b0:	0020      	movs	r0, r4
    42b2:	4b19      	ldr	r3, [pc, #100]	; (4318 <IPV4_Packet+0x19c>)
    42b4:	4798      	blx	r3
    42b6:	0001      	movs	r1, r0
			cksm   = ETH_RxComputeChecksum(length, cksm);
    42b8:	0020      	movs	r0, r4
    42ba:	4b09      	ldr	r3, [pc, #36]	; (42e0 <IPV4_Packet+0x164>)
    42bc:	4798      	blx	r3
			if (cksm == 0) {
    42be:	2800      	cmp	r0, #0
    42c0:	d108      	bne.n	42d4 <IPV4_Packet+0x158>
				remoteIpv4Address = ipv4Header.srcIpAddress;
    42c2:	4b0a      	ldr	r3, [pc, #40]	; (42ec <IPV4_Packet+0x170>)
    42c4:	68d8      	ldr	r0, [r3, #12]
    42c6:	4b17      	ldr	r3, [pc, #92]	; (4324 <IPV4_Packet+0x1a8>)
    42c8:	6018      	str	r0, [r3, #0]
				TCP_Recv(remoteIpv4Address, length);
    42ca:	0021      	movs	r1, r4
    42cc:	4b16      	ldr	r3, [pc, #88]	; (4328 <IPV4_Packet+0x1ac>)
    42ce:	4798      	blx	r3
		return SUCCESS;
    42d0:	2001      	movs	r0, #1
    42d2:	e75f      	b.n	4194 <IPV4_Packet+0x18>
				IPV4_SyslogWrite("rx bad tcp cksm");
    42d4:	4815      	ldr	r0, [pc, #84]	; (432c <IPV4_Packet+0x1b0>)
    42d6:	4b04      	ldr	r3, [pc, #16]	; (42e8 <IPV4_Packet+0x16c>)
    42d8:	4798      	blx	r3
		return SUCCESS;
    42da:	2001      	movs	r0, #1
    42dc:	e75a      	b.n	4194 <IPV4_Packet+0x18>
    42de:	46c0      	nop			; (mov r8, r8)
    42e0:	00003979 	.word	0x00003979
    42e4:	00006ecc 	.word	0x00006ecc
    42e8:	000045cb 	.word	0x000045cb
    42ec:	20003f18 	.word	0x20003f18
    42f0:	00003451 	.word	0x00003451
    42f4:	20003f2c 	.word	0x20003f2c
    42f8:	00006f24 	.word	0x00006f24
    42fc:	00005bbd 	.word	0x00005bbd
    4300:	00006f34 	.word	0x00006f34
    4304:	000036ed 	.word	0x000036ed
    4308:	00006ee4 	.word	0x00006ee4
    430c:	00006eec 	.word	0x00006eec
    4310:	000040ed 	.word	0x000040ed
    4314:	00006f04 	.word	0x00006f04
    4318:	0000413d 	.word	0x0000413d
    431c:	000056b1 	.word	0x000056b1
    4320:	00006f0c 	.word	0x00006f0c
    4324:	20003f10 	.word	0x20003f10
    4328:	00005139 	.word	0x00005139
    432c:	00006f14 	.word	0x00006f14

00004330 <IPv4_Start>:

error_msg IPv4_Start(uint32_t destAddress, ipProtocolNumbers protocol)
{
    4330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4332:	46ce      	mov	lr, r9
    4334:	4647      	mov	r7, r8
    4336:	b580      	push	{r7, lr}
    4338:	0006      	movs	r6, r0
    433a:	000d      	movs	r5, r1
	// get the dest mac address
	const mac48Address_t *macAddress;
	uint32_t              targetAddress;

	// Check if we have a valid IPadress and if it's different then 127.0.0.1
	if (((ipv4Address != 0) || (protocol == UDP)) && (ipv4Address != 0x7F000001)) {
    433c:	4b27      	ldr	r3, [pc, #156]	; (43dc <IPv4_Start+0xac>)
    433e:	681b      	ldr	r3, [r3, #0]
    4340:	2b00      	cmp	r3, #0
    4342:	d103      	bne.n	434c <IPv4_Start+0x1c>
    4344:	2911      	cmp	r1, #17
    4346:	d001      	beq.n	434c <IPv4_Start+0x1c>
	error_msg ret = ERROR;
    4348:	2400      	movs	r4, #0
    434a:	e017      	b.n	437c <IPv4_Start+0x4c>
	if (((ipv4Address != 0) || (protocol == UDP)) && (ipv4Address != 0x7F000001)) {
    434c:	4a24      	ldr	r2, [pc, #144]	; (43e0 <IPv4_Start+0xb0>)
    434e:	4293      	cmp	r3, r2
    4350:	d041      	beq.n	43d6 <IPv4_Start+0xa6>
		if (destAddress != 0xFFFFFFFF) {
    4352:	1c72      	adds	r2, r6, #1
    4354:	d01e      	beq.n	4394 <IPv4_Start+0x64>
			if ((ipv4SubnetMask & destAddress) == (ipv4SubnetMask & ipv4Address)) // check for subnet
    4356:	4073      	eors	r3, r6
    4358:	4a22      	ldr	r2, [pc, #136]	; (43e4 <IPv4_Start+0xb4>)
    435a:	6812      	ldr	r2, [r2, #0]
    435c:	421a      	tst	r2, r3
    435e:	d012      	beq.n	4386 <IPv4_Start+0x56>
			{
				targetAddress = destAddress;
			} else {
				targetAddress = ipv4Router;
    4360:	4b21      	ldr	r3, [pc, #132]	; (43e8 <IPv4_Start+0xb8>)
    4362:	681c      	ldr	r4, [r3, #0]
			}

			macAddress = ARPV4_Lookup(targetAddress);
    4364:	0020      	movs	r0, r4
    4366:	4b21      	ldr	r3, [pc, #132]	; (43ec <IPv4_Start+0xbc>)
    4368:	4798      	blx	r3
			if (macAddress == 0) {
    436a:	2800      	cmp	r0, #0
    436c:	d00d      	beq.n	438a <IPv4_Start+0x5a>
				return ret;
			}
		} else {
			macAddress = &broadcastMAC;
		}
		ret = ETH_WriteStart(macAddress, ETHERTYPE_IPV4);
    436e:	2180      	movs	r1, #128	; 0x80
    4370:	0109      	lsls	r1, r1, #4
    4372:	4b1f      	ldr	r3, [pc, #124]	; (43f0 <IPv4_Start+0xc0>)
    4374:	4798      	blx	r3
    4376:	0004      	movs	r4, r0
		if (ret == SUCCESS) {
    4378:	2801      	cmp	r0, #1
    437a:	d00d      	beq.n	4398 <IPv4_Start+0x68>
			ipv4Header.dstIpAddress = destAddress;
			ipv4Header.protocol     = protocol;
		}
	}
	return ret;
}
    437c:	0020      	movs	r0, r4
    437e:	bc0c      	pop	{r2, r3}
    4380:	4690      	mov	r8, r2
    4382:	4699      	mov	r9, r3
    4384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				targetAddress = destAddress;
    4386:	0034      	movs	r4, r6
    4388:	e7ec      	b.n	4364 <IPv4_Start+0x34>
				ret = ARPV4_Request(targetAddress); // schedule an arp request
    438a:	0020      	movs	r0, r4
    438c:	4b19      	ldr	r3, [pc, #100]	; (43f4 <IPv4_Start+0xc4>)
    438e:	4798      	blx	r3
    4390:	0004      	movs	r4, r0
				return ret;
    4392:	e7f3      	b.n	437c <IPv4_Start+0x4c>
			macAddress = &broadcastMAC;
    4394:	4818      	ldr	r0, [pc, #96]	; (43f8 <IPv4_Start+0xc8>)
    4396:	e7ea      	b.n	436e <IPv4_Start+0x3e>
			ETH_Write16(0x4500);     // VERSION, IHL, DSCP, ECN
    4398:	208a      	movs	r0, #138	; 0x8a
    439a:	01c0      	lsls	r0, r0, #7
    439c:	4b17      	ldr	r3, [pc, #92]	; (43fc <IPv4_Start+0xcc>)
    439e:	4698      	mov	r8, r3
    43a0:	4798      	blx	r3
			ETH_Write16(0);          // total packet length
    43a2:	2000      	movs	r0, #0
    43a4:	47c0      	blx	r8
			ETH_Write32(0xAA554000); // My IPV4 magic Number..., FLAGS, Fragment Offset
    43a6:	4816      	ldr	r0, [pc, #88]	; (4400 <IPv4_Start+0xd0>)
    43a8:	4f16      	ldr	r7, [pc, #88]	; (4404 <IPv4_Start+0xd4>)
    43aa:	47b8      	blx	r7
			ETH_Write8(IPv4_TTL);    // TTL
    43ac:	2040      	movs	r0, #64	; 0x40
    43ae:	4b16      	ldr	r3, [pc, #88]	; (4408 <IPv4_Start+0xd8>)
    43b0:	4699      	mov	r9, r3
    43b2:	4798      	blx	r3
			ETH_Write8(protocol);    // protocol
    43b4:	0028      	movs	r0, r5
    43b6:	47c8      	blx	r9
			ETH_Write16(0);          // checksum. set to zero and overwrite with correct value
    43b8:	2000      	movs	r0, #0
    43ba:	47c0      	blx	r8
			ETH_Write32(ipv4Address);
    43bc:	4b07      	ldr	r3, [pc, #28]	; (43dc <IPv4_Start+0xac>)
    43be:	4698      	mov	r8, r3
    43c0:	6818      	ldr	r0, [r3, #0]
    43c2:	47b8      	blx	r7
			ETH_Write32(destAddress);
    43c4:	0030      	movs	r0, r6
    43c6:	47b8      	blx	r7
			ipv4Header.srcIpAddress = ipv4Address;
    43c8:	4b10      	ldr	r3, [pc, #64]	; (440c <IPv4_Start+0xdc>)
    43ca:	4642      	mov	r2, r8
    43cc:	6812      	ldr	r2, [r2, #0]
    43ce:	60da      	str	r2, [r3, #12]
			ipv4Header.dstIpAddress = destAddress;
    43d0:	611e      	str	r6, [r3, #16]
			ipv4Header.protocol     = protocol;
    43d2:	725d      	strb	r5, [r3, #9]
    43d4:	e7d2      	b.n	437c <IPv4_Start+0x4c>
	error_msg ret = ERROR;
    43d6:	2400      	movs	r4, #0
    43d8:	e7d0      	b.n	437c <IPv4_Start+0x4c>
    43da:	46c0      	nop			; (mov r8, r8)
    43dc:	20003f2c 	.word	0x20003f2c
    43e0:	7f000001 	.word	0x7f000001
    43e4:	20003f14 	.word	0x20003f14
    43e8:	20003f0c 	.word	0x20003f0c
    43ec:	00003cb9 	.word	0x00003cb9
    43f0:	000035a5 	.word	0x000035a5
    43f4:	00003c09 	.word	0x00003c09
    43f8:	00006f50 	.word	0x00006f50
    43fc:	000034d5 	.word	0x000034d5
    4400:	aa554000 	.word	0xaa554000
    4404:	0000350d 	.word	0x0000350d
    4408:	000034a5 	.word	0x000034a5
    440c:	20003f18 	.word	0x20003f18

00004410 <IPV4_Send>:

error_msg IPV4_Send(uint16_t payloadLength)
{
    4410:	b510      	push	{r4, lr}
    4412:	b082      	sub	sp, #8
	uint16_t  totalLength;
	uint16_t  cksm;
	error_msg ret;

	totalLength = 20 + payloadLength;
    4414:	3014      	adds	r0, #20
    4416:	b280      	uxth	r0, r0
	totalLength = ntohs(totalLength);
    4418:	0a03      	lsrs	r3, r0, #8
    441a:	0200      	lsls	r0, r0, #8
    441c:	4318      	orrs	r0, r3
    441e:	466b      	mov	r3, sp
    4420:	80d8      	strh	r0, [r3, #6]
    4422:	3306      	adds	r3, #6

	// Insert IPv4 Total Length
	ETH_Insert((char *)&totalLength, 2, sizeof(ethernetFrame_t) + offsetof(ipv4Header_t, length));
    4424:	2210      	movs	r2, #16
    4426:	2102      	movs	r1, #2
    4428:	0018      	movs	r0, r3
    442a:	4c08      	ldr	r4, [pc, #32]	; (444c <IPV4_Send+0x3c>)
    442c:	47a0      	blx	r4

	cksm = ETH_TxComputeChecksum(sizeof(ethernetFrame_t), sizeof(ipv4Header_t), 0);
    442e:	2200      	movs	r2, #0
    4430:	2114      	movs	r1, #20
    4432:	200e      	movs	r0, #14
    4434:	4b06      	ldr	r3, [pc, #24]	; (4450 <IPV4_Send+0x40>)
    4436:	4798      	blx	r3
    4438:	ab01      	add	r3, sp, #4
    443a:	8018      	strh	r0, [r3, #0]
	// Insert Ipv4 Header Checksum
	ETH_Insert((char *)&cksm, 2, sizeof(ethernetFrame_t) + offsetof(ipv4Header_t, headerCksm));
    443c:	2218      	movs	r2, #24
    443e:	2102      	movs	r1, #2
    4440:	0018      	movs	r0, r3
    4442:	47a0      	blx	r4
	ret = ETH_Send();
    4444:	4b03      	ldr	r3, [pc, #12]	; (4454 <IPV4_Send+0x44>)
    4446:	4798      	blx	r3

	return ret;
}
    4448:	b002      	add	sp, #8
    444a:	bd10      	pop	{r4, pc}
    444c:	00003779 	.word	0x00003779
    4450:	000038d5 	.word	0x000038d5
    4454:	00003695 	.word	0x00003695

00004458 <IPV4_GetMyIP>:

uint32_t IPV4_GetMyIP(void)
{
	return (ipv4Address);
    4458:	4b01      	ldr	r3, [pc, #4]	; (4460 <IPV4_GetMyIP+0x8>)
    445a:	6818      	ldr	r0, [r3, #0]
}
    445c:	4770      	bx	lr
    445e:	46c0      	nop			; (mov r8, r8)
    4460:	20003f2c 	.word	0x20003f2c

00004464 <Network_Init>:
#else
#define NET_SyslogWrite(x)
#endif

void Network_Init(void)
{
    4464:	b510      	push	{r4, lr}
	ETH_Init();
    4466:	4b08      	ldr	r3, [pc, #32]	; (4488 <Network_Init+0x24>)
    4468:	4798      	blx	r3
	ARPV4_Init();
    446a:	4b08      	ldr	r3, [pc, #32]	; (448c <Network_Init+0x28>)
    446c:	4798      	blx	r3
	IPV4_Init();
    446e:	4b08      	ldr	r3, [pc, #32]	; (4490 <Network_Init+0x2c>)
    4470:	4798      	blx	r3
	TCP_Init();
    4472:	4b08      	ldr	r3, [pc, #32]	; (4494 <Network_Init+0x30>)
    4474:	4798      	blx	r3

	time(&arpTimer);
    4476:	4c08      	ldr	r4, [pc, #32]	; (4498 <Network_Init+0x34>)
    4478:	0020      	movs	r0, r4
    447a:	4b08      	ldr	r3, [pc, #32]	; (449c <Network_Init+0x38>)
    447c:	4798      	blx	r3
	arpTimer += 10;
    447e:	6823      	ldr	r3, [r4, #0]
    4480:	330a      	adds	r3, #10
    4482:	6023      	str	r3, [r4, #0]
}
    4484:	bd10      	pop	{r4, pc}
    4486:	46c0      	nop			; (mov r8, r8)
    4488:	00003155 	.word	0x00003155
    448c:	00003a31 	.word	0x00003a31
    4490:	00004131 	.word	0x00004131
    4494:	000052f5 	.word	0x000052f5
    4498:	20003f38 	.word	0x20003f38
    449c:	00005d75 	.word	0x00005d75

000044a0 <Network_Read>:
	}
	nowPv = now;
}

void Network_Read(void)
{
    44a0:	b510      	push	{r4, lr}
    44a2:	b098      	sub	sp, #96	; 0x60
	ethernetFrame_t header;
	char            debug_str[80];

	if (ETH_packetReady()) {
    44a4:	4b1f      	ldr	r3, [pc, #124]	; (4524 <Network_Read+0x84>)
    44a6:	681b      	ldr	r3, [r3, #0]
    44a8:	079b      	lsls	r3, r3, #30
    44aa:	d401      	bmi.n	44b0 <Network_Read+0x10>
			NET_SyslogWrite(debug_str);
			break;
		}
		ETH_Flush();
	}
}
    44ac:	b018      	add	sp, #96	; 0x60
    44ae:	bd10      	pop	{r4, pc}
		ETH_NextPacketUpdate();
    44b0:	4b1d      	ldr	r3, [pc, #116]	; (4528 <Network_Read+0x88>)
    44b2:	4798      	blx	r3
		ETH_ReadBlock((char *)&header, sizeof(header));
    44b4:	ac14      	add	r4, sp, #80	; 0x50
    44b6:	210e      	movs	r1, #14
    44b8:	0020      	movs	r0, r4
    44ba:	4b1c      	ldr	r3, [pc, #112]	; (452c <Network_Read+0x8c>)
    44bc:	4798      	blx	r3
		header.id.type = ntohs(header.id.type); // reverse the type field
    44be:	89a3      	ldrh	r3, [r4, #12]
    44c0:	0a1a      	lsrs	r2, r3, #8
    44c2:	021b      	lsls	r3, r3, #8
    44c4:	431a      	orrs	r2, r3
    44c6:	b292      	uxth	r2, r2
    44c8:	81a2      	strh	r2, [r4, #12]
		switch (header.id.type) {
    44ca:	4b19      	ldr	r3, [pc, #100]	; (4530 <Network_Read+0x90>)
    44cc:	429a      	cmp	r2, r3
    44ce:	d01a      	beq.n	4506 <Network_Read+0x66>
    44d0:	d90a      	bls.n	44e8 <Network_Read+0x48>
    44d2:	2381      	movs	r3, #129	; 0x81
    44d4:	021b      	lsls	r3, r3, #8
    44d6:	429a      	cmp	r2, r3
    44d8:	d00f      	beq.n	44fa <Network_Read+0x5a>
    44da:	4b16      	ldr	r3, [pc, #88]	; (4534 <Network_Read+0x94>)
    44dc:	429a      	cmp	r2, r3
    44de:	d118      	bne.n	4512 <Network_Read+0x72>
			NET_SyslogWrite("IPV6 Packet Dropped");
    44e0:	4815      	ldr	r0, [pc, #84]	; (4538 <Network_Read+0x98>)
    44e2:	4b16      	ldr	r3, [pc, #88]	; (453c <Network_Read+0x9c>)
    44e4:	4798      	blx	r3
			break;
    44e6:	e00b      	b.n	4500 <Network_Read+0x60>
		switch (header.id.type) {
    44e8:	3b06      	subs	r3, #6
    44ea:	429a      	cmp	r2, r3
    44ec:	d111      	bne.n	4512 <Network_Read+0x72>
			NET_SyslogWrite("RX IPV4 Packet");
    44ee:	4814      	ldr	r0, [pc, #80]	; (4540 <Network_Read+0xa0>)
    44f0:	4b12      	ldr	r3, [pc, #72]	; (453c <Network_Read+0x9c>)
    44f2:	4798      	blx	r3
			IPV4_Packet();
    44f4:	4b13      	ldr	r3, [pc, #76]	; (4544 <Network_Read+0xa4>)
    44f6:	4798      	blx	r3
			break;
    44f8:	e002      	b.n	4500 <Network_Read+0x60>
			NET_SyslogWrite("VLAN Packet Dropped");
    44fa:	4813      	ldr	r0, [pc, #76]	; (4548 <Network_Read+0xa8>)
    44fc:	4b0f      	ldr	r3, [pc, #60]	; (453c <Network_Read+0x9c>)
    44fe:	4798      	blx	r3
		ETH_Flush();
    4500:	4b12      	ldr	r3, [pc, #72]	; (454c <Network_Read+0xac>)
    4502:	4798      	blx	r3
}
    4504:	e7d2      	b.n	44ac <Network_Read+0xc>
			NET_SyslogWrite("RX ARPV4 Packet");
    4506:	4812      	ldr	r0, [pc, #72]	; (4550 <Network_Read+0xb0>)
    4508:	4b0c      	ldr	r3, [pc, #48]	; (453c <Network_Read+0x9c>)
    450a:	4798      	blx	r3
			ARPV4_Packet();
    450c:	4b11      	ldr	r3, [pc, #68]	; (4554 <Network_Read+0xb4>)
    450e:	4798      	blx	r3
			break;
    4510:	e7f6      	b.n	4500 <Network_Read+0x60>
			sprintf(debug_str, "%x : %d", header.id.type, header.id.length);
    4512:	0013      	movs	r3, r2
    4514:	4910      	ldr	r1, [pc, #64]	; (4558 <Network_Read+0xb8>)
    4516:	4668      	mov	r0, sp
    4518:	4c10      	ldr	r4, [pc, #64]	; (455c <Network_Read+0xbc>)
    451a:	47a0      	blx	r4
			NET_SyslogWrite(debug_str);
    451c:	4668      	mov	r0, sp
    451e:	4b07      	ldr	r3, [pc, #28]	; (453c <Network_Read+0x9c>)
    4520:	4798      	blx	r3
			break;
    4522:	e7ed      	b.n	4500 <Network_Read+0x60>
    4524:	20003e98 	.word	0x20003e98
    4528:	0000308d 	.word	0x0000308d
    452c:	00003451 	.word	0x00003451
    4530:	00000806 	.word	0x00000806
    4534:	000086dd 	.word	0x000086dd
    4538:	00006f8c 	.word	0x00006f8c
    453c:	000045cb 	.word	0x000045cb
    4540:	00006f7c 	.word	0x00006f7c
    4544:	0000417d 	.word	0x0000417d
    4548:	00006f58 	.word	0x00006f58
    454c:	00003729 	.word	0x00003729
    4550:	00006f6c 	.word	0x00006f6c
    4554:	00003a4d 	.word	0x00003a4d
    4558:	00006fa0 	.word	0x00006fa0
    455c:	00005bbd 	.word	0x00005bbd

00004560 <Network_Manage>:
{
    4560:	b500      	push	{lr}
    4562:	b083      	sub	sp, #12
	ETH_EventHandler();
    4564:	4b10      	ldr	r3, [pc, #64]	; (45a8 <Network_Manage+0x48>)
    4566:	4798      	blx	r3
	Network_Read(); // handle any packets that have arrived...
    4568:	4b10      	ldr	r3, [pc, #64]	; (45ac <Network_Manage+0x4c>)
    456a:	4798      	blx	r3
	time(&now);
    456c:	a801      	add	r0, sp, #4
    456e:	4b10      	ldr	r3, [pc, #64]	; (45b0 <Network_Manage+0x50>)
    4570:	4798      	blx	r3
	if (now >= arpTimer) {
    4572:	4b10      	ldr	r3, [pc, #64]	; (45b4 <Network_Manage+0x54>)
    4574:	681b      	ldr	r3, [r3, #0]
    4576:	9a01      	ldr	r2, [sp, #4]
    4578:	429a      	cmp	r2, r3
    457a:	da09      	bge.n	4590 <Network_Manage+0x30>
	if (now > nowPv) // at least 1 second has elapsed
    457c:	4b0e      	ldr	r3, [pc, #56]	; (45b8 <Network_Manage+0x58>)
    457e:	681b      	ldr	r3, [r3, #0]
    4580:	9a01      	ldr	r2, [sp, #4]
    4582:	429a      	cmp	r2, r3
    4584:	dc0b      	bgt.n	459e <Network_Manage+0x3e>
	nowPv = now;
    4586:	4b0c      	ldr	r3, [pc, #48]	; (45b8 <Network_Manage+0x58>)
    4588:	9a01      	ldr	r2, [sp, #4]
    458a:	601a      	str	r2, [r3, #0]
}
    458c:	b003      	add	sp, #12
    458e:	bd00      	pop	{pc}
		ARPV4_Update();
    4590:	4b0a      	ldr	r3, [pc, #40]	; (45bc <Network_Manage+0x5c>)
    4592:	4798      	blx	r3
		arpTimer += 10;
    4594:	4a07      	ldr	r2, [pc, #28]	; (45b4 <Network_Manage+0x54>)
    4596:	6813      	ldr	r3, [r2, #0]
    4598:	330a      	adds	r3, #10
    459a:	6013      	str	r3, [r2, #0]
    459c:	e7ee      	b.n	457c <Network_Manage+0x1c>
		DHCP_Manage(); // update the DHCP status every second
    459e:	4b08      	ldr	r3, [pc, #32]	; (45c0 <Network_Manage+0x60>)
    45a0:	4798      	blx	r3
		TCP_Update(); // handle timeouts
    45a2:	4b08      	ldr	r3, [pc, #32]	; (45c4 <Network_Manage+0x64>)
    45a4:	4798      	blx	r3
    45a6:	e7ee      	b.n	4586 <Network_Manage+0x26>
    45a8:	000032a5 	.word	0x000032a5
    45ac:	000044a1 	.word	0x000044a1
    45b0:	00005d75 	.word	0x00005d75
    45b4:	20003f38 	.word	0x20003f38
    45b8:	20000874 	.word	0x20000874
    45bc:	00003bed 	.word	0x00003bed
    45c0:	00003e41 	.word	0x00003e41
    45c4:	0000555d 	.word	0x0000555d

000045c8 <SYSLOG_Init>:
#if ENABLE_SYSLOG_DEBUG
	unsigned long t = time(0);

	printf("\r\n\r\nStarting Syslog at %lu\r\n", t);
#endif
}
    45c8:	4770      	bx	lr

000045ca <SYSLOG_Write>:
{
#if ENABLE_SYSLOG_DEBUG
	unsigned int t = (unsigned int)time(0); // only printing the LSW of the time
	printf("%u : %s\r\n", t, message);
#endif
}
    45ca:	4770      	bx	lr

000045cc <TCB_Insert>:
 */
static void TCB_Insert(tcpTCB_t *ptr)
{
	// Insert the new TCB at the head of the list.
	// This prevents a list traversal and saves time.
	if (tcbList != NULL) {
    45cc:	4b07      	ldr	r3, [pc, #28]	; (45ec <TCB_Insert+0x20>)
    45ce:	681b      	ldr	r3, [r3, #0]
    45d0:	2b00      	cmp	r3, #0
    45d2:	d000      	beq.n	45d6 <TCB_Insert+0xa>
		// link this TCB as the previous one for the top of the list
		tcbList->prevTCB = ptr;
    45d4:	6458      	str	r0, [r3, #68]	; 0x44
	}
	ptr->nextTCB = tcbList; // put the existing list at the end of this tcb...
    45d6:	6403      	str	r3, [r0, #64]	; 0x40
	tcbList      = ptr;     // put this tcb at the head of the list.
    45d8:	4b04      	ldr	r3, [pc, #16]	; (45ec <TCB_Insert+0x20>)
    45da:	6018      	str	r0, [r3, #0]
	ptr->prevTCB = NULL;    // make sure that the upstream pointer is empty
    45dc:	2300      	movs	r3, #0
    45de:	6443      	str	r3, [r0, #68]	; 0x44
	tcbListSize++;
    45e0:	4a03      	ldr	r2, [pc, #12]	; (45f0 <TCB_Insert+0x24>)
    45e2:	7813      	ldrb	r3, [r2, #0]
    45e4:	3301      	adds	r3, #1
    45e6:	7013      	strb	r3, [r2, #0]
}
    45e8:	4770      	bx	lr
    45ea:	46c0      	nop			; (mov r8, r8)
    45ec:	20003f40 	.word	0x20003f40
    45f0:	20003f44 	.word	0x20003f44

000045f4 <TCB_Remove>:
 * @return
 *      None
 */
static void TCB_Remove(tcpTCB_t *ptr)
{
	if (tcbListSize > 1) {
    45f4:	4b0e      	ldr	r3, [pc, #56]	; (4630 <TCB_Remove+0x3c>)
    45f6:	781b      	ldrb	r3, [r3, #0]
    45f8:	b25b      	sxtb	r3, r3
    45fa:	2b01      	cmp	r3, #1
    45fc:	dd12      	ble.n	4624 <TCB_Remove+0x30>
		// check if this is the first in list
		if (ptr->prevTCB == NULL) {
    45fe:	6c43      	ldr	r3, [r0, #68]	; 0x44
    4600:	2b00      	cmp	r3, #0
    4602:	d009      	beq.n	4618 <TCB_Remove+0x24>
			tcbList                               = ptr->nextTCB;
			((tcpTCB_t *)(ptr->nextTCB))->prevTCB = NULL;
		} else {
			((tcpTCB_t *)(ptr->prevTCB))->nextTCB = ptr->nextTCB;
    4604:	6c02      	ldr	r2, [r0, #64]	; 0x40
    4606:	641a      	str	r2, [r3, #64]	; 0x40
			((tcpTCB_t *)(ptr->nextTCB))->prevTCB = ptr->prevTCB;
    4608:	6c03      	ldr	r3, [r0, #64]	; 0x40
    460a:	6c42      	ldr	r2, [r0, #68]	; 0x44
    460c:	645a      	str	r2, [r3, #68]	; 0x44
		}
		tcbListSize--;
    460e:	4a08      	ldr	r2, [pc, #32]	; (4630 <TCB_Remove+0x3c>)
    4610:	7813      	ldrb	r3, [r2, #0]
    4612:	3b01      	subs	r3, #1
    4614:	7013      	strb	r3, [r2, #0]
	} else if (tcbListSize == 1) {
		tcbList = NULL;
	}
}
    4616:	4770      	bx	lr
			tcbList                               = ptr->nextTCB;
    4618:	6c03      	ldr	r3, [r0, #64]	; 0x40
    461a:	4a06      	ldr	r2, [pc, #24]	; (4634 <TCB_Remove+0x40>)
    461c:	6013      	str	r3, [r2, #0]
			((tcpTCB_t *)(ptr->nextTCB))->prevTCB = NULL;
    461e:	2200      	movs	r2, #0
    4620:	645a      	str	r2, [r3, #68]	; 0x44
    4622:	e7f4      	b.n	460e <TCB_Remove+0x1a>
	} else if (tcbListSize == 1) {
    4624:	2b01      	cmp	r3, #1
    4626:	d1f6      	bne.n	4616 <TCB_Remove+0x22>
		tcbList = NULL;
    4628:	2200      	movs	r2, #0
    462a:	4b02      	ldr	r3, [pc, #8]	; (4634 <TCB_Remove+0x40>)
    462c:	601a      	str	r2, [r3, #0]
}
    462e:	e7f2      	b.n	4616 <TCB_Remove+0x22>
    4630:	20003f44 	.word	0x20003f44
    4634:	20003f40 	.word	0x20003f40

00004638 <TCB_Reset>:
 * @return
 *      None
 */
static void TCB_Reset(tcpTCB_t *tcbPtr)
{
	tcbPtr->destIP       = 0;
    4638:	2300      	movs	r3, #0
    463a:	6043      	str	r3, [r0, #4]
	tcbPtr->destPort     = 0;
    463c:	2200      	movs	r2, #0
    463e:	8103      	strh	r3, [r0, #8]
	tcbPtr->localSeqno   = 0;
    4640:	6143      	str	r3, [r0, #20]
	tcbPtr->localLastAck = 0;
    4642:	6183      	str	r3, [r0, #24]
	tcbPtr->remoteSeqno  = 0;
    4644:	60c3      	str	r3, [r0, #12]
	tcbPtr->remoteAck    = 0;
    4646:	6103      	str	r3, [r0, #16]
	tcbPtr->remoteWnd    = 0;
    4648:	8383      	strh	r3, [r0, #28]

	tcbPtr->timeout            = 0;
    464a:	2148      	movs	r1, #72	; 0x48
    464c:	5243      	strh	r3, [r0, r1]
	tcbPtr->timeoutReloadValue = 0;
    464e:	3102      	adds	r1, #2
    4650:	5243      	strh	r3, [r0, r1]
	tcbPtr->timeoutsCount      = 0;
    4652:	3102      	adds	r1, #2
    4654:	5442      	strb	r2, [r0, r1]
	tcbPtr->flags              = 0;
    4656:	3101      	adds	r1, #1
    4658:	5442      	strb	r2, [r0, r1]

	tcbPtr->localPort   = 0;
    465a:	8003      	strh	r3, [r0, #0]
	tcbPtr->socketState = SOCKET_CLOSED;
    465c:	2201      	movs	r2, #1
    465e:	334e      	adds	r3, #78	; 0x4e
    4660:	54c2      	strb	r2, [r0, r3]
}
    4662:	4770      	bx	lr

00004664 <TCB_Check>:
{
	tcpTCB_t *     tcbPtr;
	bool           ret   = false;
	socklistsize_t count = 0;

	if ((tcbList != NULL) && (ptr != NULL)) {
    4664:	4b0d      	ldr	r3, [pc, #52]	; (469c <TCB_Check+0x38>)
    4666:	681a      	ldr	r2, [r3, #0]
    4668:	2a00      	cmp	r2, #0
    466a:	d011      	beq.n	4690 <TCB_Check+0x2c>
    466c:	2800      	cmp	r0, #0
    466e:	d014      	beq.n	469a <TCB_Check+0x36>
    4670:	2300      	movs	r3, #0
		// search for ptr into the active TCB/sockets list
		tcbPtr = tcbList;
		while ((tcbPtr != NULL) && (count < tcbListSize)) {
    4672:	2a00      	cmp	r2, #0
    4674:	d010      	beq.n	4698 <TCB_Check+0x34>
    4676:	490a      	ldr	r1, [pc, #40]	; (46a0 <TCB_Check+0x3c>)
    4678:	7809      	ldrb	r1, [r1, #0]
    467a:	b249      	sxtb	r1, r1
    467c:	428b      	cmp	r3, r1
    467e:	da05      	bge.n	468c <TCB_Check+0x28>
			if (tcbPtr == ptr) {
    4680:	4282      	cmp	r2, r0
    4682:	d007      	beq.n	4694 <TCB_Check+0x30>
				ret = true;
				break;
			} else {
				tcbPtr = tcbPtr->nextTCB;
    4684:	6c12      	ldr	r2, [r2, #64]	; 0x40
				count++;
    4686:	3301      	adds	r3, #1
    4688:	b25b      	sxtb	r3, r3
    468a:	e7f2      	b.n	4672 <TCB_Check+0xe>
	bool           ret   = false;
    468c:	2000      	movs	r0, #0
    468e:	e004      	b.n	469a <TCB_Check+0x36>
    4690:	2000      	movs	r0, #0
    4692:	e002      	b.n	469a <TCB_Check+0x36>
				ret = true;
    4694:	2001      	movs	r0, #1
    4696:	e000      	b.n	469a <TCB_Check+0x36>
	bool           ret   = false;
    4698:	2000      	movs	r0, #0
			}
		}
	}
	return ret;
}
    469a:	4770      	bx	lr
    469c:	20003f40 	.word	0x20003f40
    46a0:	20003f44 	.word	0x20003f44

000046a4 <TCP_Snd>:
 *      true - The buffer was send successfully
 * @return
 *      false - Send buffer fails.
 */
static bool TCP_Snd(tcpTCB_t *tcbPtr)
{
    46a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    46a6:	46c6      	mov	lr, r8
    46a8:	b500      	push	{lr}
    46aa:	b086      	sub	sp, #24
    46ac:	0004      	movs	r4, r0
	uint16_t    payloadLength;
	uint16_t    cksm;
	uint16_t    tcpDataLength;
	uint8_t *   data;

	txHeader.sourcePort = htons(tcbPtr->localPort);
    46ae:	8803      	ldrh	r3, [r0, #0]
    46b0:	0a1a      	lsrs	r2, r3, #8
    46b2:	021b      	lsls	r3, r3, #8
    46b4:	431a      	orrs	r2, r3
    46b6:	ab01      	add	r3, sp, #4
    46b8:	801a      	strh	r2, [r3, #0]
	txHeader.destPort   = htons(tcbPtr->destPort);
    46ba:	8902      	ldrh	r2, [r0, #8]
    46bc:	0a11      	lsrs	r1, r2, #8
    46be:	0212      	lsls	r2, r2, #8
    46c0:	430a      	orrs	r2, r1
    46c2:	805a      	strh	r2, [r3, #2]

	txHeader.sequenceNumber = htonl(tcbPtr->localSeqno);
    46c4:	6940      	ldr	r0, [r0, #20]
    46c6:	0e01      	lsrs	r1, r0, #24
    46c8:	0a02      	lsrs	r2, r0, #8
    46ca:	27ff      	movs	r7, #255	; 0xff
    46cc:	023f      	lsls	r7, r7, #8
    46ce:	403a      	ands	r2, r7
    46d0:	4311      	orrs	r1, r2
    46d2:	0202      	lsls	r2, r0, #8
    46d4:	26ff      	movs	r6, #255	; 0xff
    46d6:	0436      	lsls	r6, r6, #16
    46d8:	4032      	ands	r2, r6
    46da:	4311      	orrs	r1, r2
    46dc:	0600      	lsls	r0, r0, #24
    46de:	4301      	orrs	r1, r0
    46e0:	9102      	str	r1, [sp, #8]

	txHeader.ackNumber = htonl(tcbPtr->remoteAck); // ask for next packet
    46e2:	6921      	ldr	r1, [r4, #16]
    46e4:	0e0a      	lsrs	r2, r1, #24
    46e6:	0a08      	lsrs	r0, r1, #8
    46e8:	4038      	ands	r0, r7
    46ea:	4302      	orrs	r2, r0
    46ec:	0208      	lsls	r0, r1, #8
    46ee:	4030      	ands	r0, r6
    46f0:	4302      	orrs	r2, r0
    46f2:	0609      	lsls	r1, r1, #24
    46f4:	430a      	orrs	r2, r1
    46f6:	9203      	str	r2, [sp, #12]

	txHeader.ns         = 0; // make sure we clean unused fields
    46f8:	7b1a      	ldrb	r2, [r3, #12]
	txHeader.reserved   = 0; // make sure we clean unused fields
    46fa:	2101      	movs	r1, #1
    46fc:	438a      	bics	r2, r1
	txHeader.dataOffset = 5; // We don't support options for now
    46fe:	310d      	adds	r1, #13
    4700:	438a      	bics	r2, r1
    4702:	0011      	movs	r1, r2
    4704:	220f      	movs	r2, #15
    4706:	400a      	ands	r2, r1
    4708:	2150      	movs	r1, #80	; 0x50
    470a:	430a      	orrs	r2, r1
    470c:	731a      	strb	r2, [r3, #12]
	txHeader.windowSize = htons(tcbPtr->localWnd);
    470e:	8be2      	ldrh	r2, [r4, #30]
    4710:	0a11      	lsrs	r1, r2, #8
    4712:	0212      	lsls	r2, r2, #8
    4714:	430a      	orrs	r2, r1
    4716:	81da      	strh	r2, [r3, #14]
	txHeader.checksum   = 0;
    4718:	2200      	movs	r2, #0
    471a:	821a      	strh	r2, [r3, #16]
	txHeader.urgentPtr  = 0;
    471c:	825a      	strh	r2, [r3, #18]

	if ((tcbPtr->flags) & (TCP_SYN_FLAG | TCP_RST_FLAG)) {
    471e:	234d      	movs	r3, #77	; 0x4d
    4720:	5ce3      	ldrb	r3, [r4, r3]
    4722:	3206      	adds	r2, #6
    4724:	421a      	tst	r2, r3
    4726:	d118      	bne.n	475a <TCP_Snd+0xb6>
		tcpDataLength = 0; // SYN and RST packets doesn't have any payload
	} else {
		tcpDataLength = tcbPtr->bytesToSend;
    4728:	8f27      	ldrh	r7, [r4, #56]	; 0x38

		if (tcpDataLength != 0) {
    472a:	2f00      	cmp	r7, #0
    472c:	d016      	beq.n	475c <TCP_Snd+0xb8>
			if (tcpDataLength > tcbPtr->remoteWnd) {
    472e:	8ba1      	ldrh	r1, [r4, #28]
    4730:	428f      	cmp	r7, r1
    4732:	d800      	bhi.n	4736 <TCP_Snd+0x92>
		tcpDataLength = tcbPtr->bytesToSend;
    4734:	0039      	movs	r1, r7
				tcpDataLength = tcbPtr->remoteWnd;
			}

			if (tcpDataLength > tcbPtr->mss) {
    4736:	8c22      	ldrh	r2, [r4, #32]
    4738:	4291      	cmp	r1, r2
    473a:	d800      	bhi.n	473e <TCP_Snd+0x9a>
    473c:	000a      	movs	r2, r1
				tcpDataLength = tcbPtr->mss;
			}
			data = tcbPtr->txBufferPtr;
    473e:	6b65      	ldr	r5, [r4, #52]	; 0x34

			// update the pointer to the next byte that needs to be sent
			tcbPtr->txBufferPtr = tcbPtr->txBufferPtr + tcpDataLength;
    4740:	18a9      	adds	r1, r5, r2
    4742:	6361      	str	r1, [r4, #52]	; 0x34
			tcbPtr->bytesToSend = tcbPtr->bytesToSend - tcpDataLength;
    4744:	1abf      	subs	r7, r7, r2
    4746:	b2bf      	uxth	r7, r7
    4748:	8727      	strh	r7, [r4, #56]	; 0x38

			if (tcbPtr->bytesToSend == 0) {
    474a:	2f00      	cmp	r7, #0
    474c:	d12a      	bne.n	47a4 <TCP_Snd+0x100>
				tcbPtr->flags |= TCP_PSH_FLAG;
    474e:	2108      	movs	r1, #8
    4750:	430b      	orrs	r3, r1
    4752:	214d      	movs	r1, #77	; 0x4d
    4754:	5463      	strb	r3, [r4, r1]
    4756:	0017      	movs	r7, r2
    4758:	e000      	b.n	475c <TCP_Snd+0xb8>
		tcpDataLength = 0; // SYN and RST packets doesn't have any payload
    475a:	2700      	movs	r7, #0
			}
		}
	}
	// update the TCP Flags
	txHeader.flags = tcbPtr->flags;
    475c:	234d      	movs	r3, #77	; 0x4d
    475e:	5ce2      	ldrb	r2, [r4, r3]
    4760:	ab01      	add	r3, sp, #4
    4762:	735a      	strb	r2, [r3, #13]
	payloadLength  = sizeof(tcpHeader_t) + tcpDataLength;
    4764:	0038      	movs	r0, r7
    4766:	3014      	adds	r0, #20
    4768:	b283      	uxth	r3, r0
    476a:	4698      	mov	r8, r3

	ret = IPv4_Start(tcbPtr->destIP, TCP);
    476c:	2106      	movs	r1, #6
    476e:	6860      	ldr	r0, [r4, #4]
    4770:	4b23      	ldr	r3, [pc, #140]	; (4800 <TCP_Snd+0x15c>)
    4772:	4798      	blx	r3
    4774:	0006      	movs	r6, r0
    4776:	1e73      	subs	r3, r6, #1
    4778:	419e      	sbcs	r6, r3
    477a:	b2f6      	uxtb	r6, r6
	if (ret) {
    477c:	2800      	cmp	r0, #0
    477e:	d113      	bne.n	47a8 <TCP_Snd+0x104>
		ret = IPV4_Send(payloadLength);
	}

	// The packet wasn't transmitted
	// Use the timeout to retry again later
	if (ret == false) {
    4780:	2e00      	cmp	r6, #0
    4782:	d135      	bne.n	47f0 <TCP_Snd+0x14c>
		// make sure we keep the remaining timeouts and skip this send  that failed
		// try at least once
		tcbPtr->timeoutsCount = tcbPtr->timeoutsCount + 1;
    4784:	224c      	movs	r2, #76	; 0x4c
    4786:	5ca3      	ldrb	r3, [r4, r2]
    4788:	3301      	adds	r3, #1
    478a:	54a3      	strb	r3, [r4, r2]

		if (tcbPtr->timeout == 0) {
    478c:	2348      	movs	r3, #72	; 0x48
    478e:	5ae3      	ldrh	r3, [r4, r3]
    4790:	2b00      	cmp	r3, #0
    4792:	d102      	bne.n	479a <TCP_Snd+0xf6>
			tcbPtr->timeout = TCP_START_TIMEOUT_VAL;
    4794:	3a4a      	subs	r2, #74	; 0x4a
    4796:	3348      	adds	r3, #72	; 0x48
    4798:	52e2      	strh	r2, [r4, r3]
		tcbPtr->localSeqno = tcbPtr->localSeqno + tcpDataLength;
		TCP_SyslogWrite("tcp_packet sent");
	}

	return ret;
}
    479a:	0030      	movs	r0, r6
    479c:	b006      	add	sp, #24
    479e:	bc04      	pop	{r2}
    47a0:	4690      	mov	r8, r2
    47a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47a4:	0017      	movs	r7, r2
    47a6:	e7d9      	b.n	475c <TCP_Snd+0xb8>
		ETH_WriteBlock((uint8_t *)&txHeader, sizeof(tcpHeader_t));
    47a8:	2114      	movs	r1, #20
    47aa:	a801      	add	r0, sp, #4
    47ac:	4b15      	ldr	r3, [pc, #84]	; (4804 <TCP_Snd+0x160>)
    47ae:	4798      	blx	r3
		if (tcpDataLength > 0) {
    47b0:	2f00      	cmp	r7, #0
    47b2:	d118      	bne.n	47e6 <TCP_Snd+0x142>
		cksm = payloadLength + TCP;
    47b4:	003a      	movs	r2, r7
    47b6:	321a      	adds	r2, #26
    47b8:	b292      	uxth	r2, r2
    47ba:	466b      	mov	r3, sp
    47bc:	1c9d      	adds	r5, r3, #2
    47be:	805a      	strh	r2, [r3, #2]
		cksm = ETH_TxComputeChecksum(sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) - 8, payloadLength + 8, cksm);
    47c0:	0039      	movs	r1, r7
    47c2:	311c      	adds	r1, #28
    47c4:	b289      	uxth	r1, r1
    47c6:	201a      	movs	r0, #26
    47c8:	4b0f      	ldr	r3, [pc, #60]	; (4808 <TCP_Snd+0x164>)
    47ca:	4798      	blx	r3
    47cc:	8028      	strh	r0, [r5, #0]
		ETH_Insert((char *)&cksm, 2, sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) + offsetof(tcpHeader_t, checksum));
    47ce:	2232      	movs	r2, #50	; 0x32
    47d0:	2102      	movs	r1, #2
    47d2:	0028      	movs	r0, r5
    47d4:	4b0d      	ldr	r3, [pc, #52]	; (480c <TCP_Snd+0x168>)
    47d6:	4798      	blx	r3
		ret = IPV4_Send(payloadLength);
    47d8:	4640      	mov	r0, r8
    47da:	4b0d      	ldr	r3, [pc, #52]	; (4810 <TCP_Snd+0x16c>)
    47dc:	4798      	blx	r3
    47de:	1e46      	subs	r6, r0, #1
    47e0:	41b0      	sbcs	r0, r6
    47e2:	b2c6      	uxtb	r6, r0
    47e4:	e7cc      	b.n	4780 <TCP_Snd+0xdc>
			ETH_WriteBlock(data, tcpDataLength);
    47e6:	0039      	movs	r1, r7
    47e8:	0028      	movs	r0, r5
    47ea:	4b06      	ldr	r3, [pc, #24]	; (4804 <TCP_Snd+0x160>)
    47ec:	4798      	blx	r3
    47ee:	e7e1      	b.n	47b4 <TCP_Snd+0x110>
		tcbPtr->localSeqno = tcbPtr->localSeqno + tcpDataLength;
    47f0:	6963      	ldr	r3, [r4, #20]
    47f2:	469c      	mov	ip, r3
    47f4:	4467      	add	r7, ip
    47f6:	6167      	str	r7, [r4, #20]
		TCP_SyslogWrite("tcp_packet sent");
    47f8:	4806      	ldr	r0, [pc, #24]	; (4814 <TCP_Snd+0x170>)
    47fa:	4b07      	ldr	r3, [pc, #28]	; (4818 <TCP_Snd+0x174>)
    47fc:	4798      	blx	r3
    47fe:	e7cc      	b.n	479a <TCP_Snd+0xf6>
    4800:	00004331 	.word	0x00004331
    4804:	00003555 	.word	0x00003555
    4808:	000038d5 	.word	0x000038d5
    480c:	00003779 	.word	0x00003779
    4810:	00004411 	.word	0x00004411
    4814:	00007070 	.word	0x00007070
    4818:	000045cb 	.word	0x000045cb

0000481c <TCP_ParseTCPOptions>:
 *      true - parsing the options filed was successfully
 * @return
 *      false - parsing the options filed was failed.
 */
static bool TCP_ParseTCPOptions(void)
{
    481c:	b570      	push	{r4, r5, r6, lr}
	uint16_t tcpOptionsSize;
	bool     ret;

	ret = false;
	// Check for the option fields in TCP header
	tcpOptionsSize = (uint16_t)((tcpHeader.dataOffset << 2) - sizeof(tcpHeader_t));
    481e:	4b37      	ldr	r3, [pc, #220]	; (48fc <TCP_ParseTCPOptions+0xe0>)
    4820:	7b1c      	ldrb	r4, [r3, #12]
    4822:	0924      	lsrs	r4, r4, #4
    4824:	00a4      	lsls	r4, r4, #2
    4826:	3c14      	subs	r4, #20
    4828:	b2a4      	uxth	r4, r4

	if (tcpOptionsSize > 0) {
    482a:	2c00      	cmp	r4, #0
    482c:	d062      	beq.n	48f4 <TCP_ParseTCPOptions+0xd8>
		// RFC 1122, page 85, Section 4.2.2.6  Maximum Segment Size Option: RFC-793 Section 3.1
		// more explanations in RFC-6691
		tcpMss = 536;
    482e:	2286      	movs	r2, #134	; 0x86
    4830:	0092      	lsls	r2, r2, #2
    4832:	829a      	strh	r2, [r3, #20]
		// parse the option only for SYN segments
		if (tcpHeader.syn) {
    4834:	7b5b      	ldrb	r3, [r3, #13]
    4836:	079b      	lsls	r3, r3, #30
    4838:	d557      	bpl.n	48ea <TCP_ParseTCPOptions+0xce>
    483a:	2600      	movs	r6, #0
    483c:	e033      	b.n	48a6 <TCP_ParseTCPOptions+0x8a>
			while (tcpOptionsSize--) {
				opt = ETH_Read8();
				switch (opt) {
				case TCP_EOP:
					// End of options.
					if (tcpOptionsSize) {
    483e:	2d00      	cmp	r5, #0
    4840:	d102      	bne.n	4848 <TCP_ParseTCPOptions+0x2c>
			while (tcpOptionsSize--) {
    4842:	002c      	movs	r4, r5
						// dump remaining unused bytes
						ETH_Dump(tcpOptionsSize);
						tcpOptionsSize = 0;
					}
					ret = true;
    4844:	2601      	movs	r6, #1
    4846:	e02e      	b.n	48a6 <TCP_ParseTCPOptions+0x8a>
						ETH_Dump(tcpOptionsSize);
    4848:	0028      	movs	r0, r5
    484a:	4b2d      	ldr	r3, [pc, #180]	; (4900 <TCP_ParseTCPOptions+0xe4>)
    484c:	4798      	blx	r3
					ret = true;
    484e:	2601      	movs	r6, #1
						tcpOptionsSize = 0;
    4850:	2400      	movs	r4, #0
    4852:	e028      	b.n	48a6 <TCP_ParseTCPOptions+0x8a>
					break;
				case TCP_NOP:
					// NOP option.
					break;
				case TCP_MSS:
					if (tcpOptionsSize >= 3) // at least 3 more bytes
    4854:	2d02      	cmp	r5, #2
    4856:	d802      	bhi.n	485e <TCP_ParseTCPOptions+0x42>
							tcpOptionsSize = 0;
						}
					} else {
						// unexpected error
						tcpOptionsSize = 0;
						ret            = false;
    4858:	2600      	movs	r6, #0
						tcpOptionsSize = 0;
    485a:	2400      	movs	r4, #0
    485c:	e023      	b.n	48a6 <TCP_ParseTCPOptions+0x8a>
						opt = ETH_Read8();
    485e:	4b29      	ldr	r3, [pc, #164]	; (4904 <TCP_ParseTCPOptions+0xe8>)
    4860:	4798      	blx	r3
						if (opt == 0x04) {
    4862:	2804      	cmp	r0, #4
    4864:	d004      	beq.n	4870 <TCP_ParseTCPOptions+0x54>
							TCP_SyslogWrite("tcp_parseopt: bad option size length");
    4866:	4828      	ldr	r0, [pc, #160]	; (4908 <TCP_ParseTCPOptions+0xec>)
    4868:	4b28      	ldr	r3, [pc, #160]	; (490c <TCP_ParseTCPOptions+0xf0>)
    486a:	4798      	blx	r3
							tcpOptionsSize = 0;
    486c:	2400      	movs	r4, #0
    486e:	e01a      	b.n	48a6 <TCP_ParseTCPOptions+0x8a>
							tcpMss = ETH_Read16(); // value returned in host endianess
    4870:	4b27      	ldr	r3, [pc, #156]	; (4910 <TCP_ParseTCPOptions+0xf4>)
    4872:	4798      	blx	r3
    4874:	4b21      	ldr	r3, [pc, #132]	; (48fc <TCP_ParseTCPOptions+0xe0>)
    4876:	8298      	strh	r0, [r3, #20]
							tcpOptionsSize = tcpOptionsSize - 3;
    4878:	3c04      	subs	r4, #4
    487a:	b2a4      	uxth	r4, r4
							if (tcpMss > TCP_MAX_SEG_SIZE) {
    487c:	4b25      	ldr	r3, [pc, #148]	; (4914 <TCP_ParseTCPOptions+0xf8>)
    487e:	4298      	cmp	r0, r3
    4880:	d931      	bls.n	48e6 <TCP_ParseTCPOptions+0xca>
								tcpMss = TCP_MAX_SEG_SIZE;
    4882:	001a      	movs	r2, r3
    4884:	4b1d      	ldr	r3, [pc, #116]	; (48fc <TCP_ParseTCPOptions+0xe0>)
    4886:	829a      	strh	r2, [r3, #20]
							ret = true;
    4888:	2601      	movs	r6, #1
    488a:	e00c      	b.n	48a6 <TCP_ParseTCPOptions+0x8a>
							// All other options have a length field, so that we easily can skip them.
							ETH_Dump(opt);
							tcpOptionsSize = tcpOptionsSize - opt;
							ret            = true;
						} else {
							TCP_SyslogWrite("tcp_parseopt: bad option length");
    488c:	4822      	ldr	r0, [pc, #136]	; (4918 <TCP_ParseTCPOptions+0xfc>)
    488e:	4b1f      	ldr	r3, [pc, #124]	; (490c <TCP_ParseTCPOptions+0xf0>)
    4890:	4798      	blx	r3
							// the options are malformed and we don't process them further.
							tcpOptionsSize = 0;
							ret            = false;
    4892:	2600      	movs	r6, #0
							tcpOptionsSize = 0;
    4894:	2400      	movs	r4, #0
    4896:	e006      	b.n	48a6 <TCP_ParseTCPOptions+0x8a>
						}
					} else {
						TCP_SyslogWrite("tcp_parseopt: bad length");
    4898:	4820      	ldr	r0, [pc, #128]	; (491c <TCP_ParseTCPOptions+0x100>)
    489a:	4b1c      	ldr	r3, [pc, #112]	; (490c <TCP_ParseTCPOptions+0xf0>)
    489c:	4798      	blx	r3
						// If the length field is zero, the options are malformed
						// and we don't process them further.
						tcpOptionsSize = 0;
						ret            = false;
    489e:	2600      	movs	r6, #0
						tcpOptionsSize = 0;
    48a0:	2400      	movs	r4, #0
    48a2:	e000      	b.n	48a6 <TCP_ParseTCPOptions+0x8a>
			while (tcpOptionsSize--) {
    48a4:	002c      	movs	r4, r5
    48a6:	1e65      	subs	r5, r4, #1
    48a8:	b2ad      	uxth	r5, r5
    48aa:	2c00      	cmp	r4, #0
    48ac:	d023      	beq.n	48f6 <TCP_ParseTCPOptions+0xda>
				opt = ETH_Read8();
    48ae:	4b15      	ldr	r3, [pc, #84]	; (4904 <TCP_ParseTCPOptions+0xe8>)
    48b0:	4798      	blx	r3
				switch (opt) {
    48b2:	2801      	cmp	r0, #1
    48b4:	d0f6      	beq.n	48a4 <TCP_ParseTCPOptions+0x88>
    48b6:	2800      	cmp	r0, #0
    48b8:	d0c1      	beq.n	483e <TCP_ParseTCPOptions+0x22>
    48ba:	2802      	cmp	r0, #2
    48bc:	d0ca      	beq.n	4854 <TCP_ParseTCPOptions+0x38>
					TCP_SyslogWrite("tcp_parseopt: other");
    48be:	4818      	ldr	r0, [pc, #96]	; (4920 <TCP_ParseTCPOptions+0x104>)
    48c0:	4b12      	ldr	r3, [pc, #72]	; (490c <TCP_ParseTCPOptions+0xf0>)
    48c2:	4798      	blx	r3
					opt = ETH_Read8();
    48c4:	4b0f      	ldr	r3, [pc, #60]	; (4904 <TCP_ParseTCPOptions+0xe8>)
    48c6:	4798      	blx	r3
					tcpOptionsSize--;
    48c8:	3c02      	subs	r4, #2
    48ca:	b2a4      	uxth	r4, r4
					if (opt > 1) // this should be at least 2 to be valid
    48cc:	2801      	cmp	r0, #1
    48ce:	d9e3      	bls.n	4898 <TCP_ParseTCPOptions+0x7c>
						opt = opt - 2;
    48d0:	3802      	subs	r0, #2
						if (opt <= tcpOptionsSize) {
    48d2:	b2c5      	uxtb	r5, r0
    48d4:	42ac      	cmp	r4, r5
    48d6:	d3d9      	bcc.n	488c <TCP_ParseTCPOptions+0x70>
							ETH_Dump(opt);
    48d8:	0028      	movs	r0, r5
    48da:	4b09      	ldr	r3, [pc, #36]	; (4900 <TCP_ParseTCPOptions+0xe4>)
    48dc:	4798      	blx	r3
							tcpOptionsSize = tcpOptionsSize - opt;
    48de:	1b64      	subs	r4, r4, r5
    48e0:	b2a4      	uxth	r4, r4
							ret            = true;
    48e2:	2601      	movs	r6, #1
    48e4:	e7df      	b.n	48a6 <TCP_ParseTCPOptions+0x8a>
							ret = true;
    48e6:	2601      	movs	r6, #1
    48e8:	e7dd      	b.n	48a6 <TCP_ParseTCPOptions+0x8a>
					break;
				}
			}
		} else // jump over the Options from TCP header
		{
			ETH_Dump(tcpOptionsSize);
    48ea:	0020      	movs	r0, r4
    48ec:	4b04      	ldr	r3, [pc, #16]	; (4900 <TCP_ParseTCPOptions+0xe4>)
    48ee:	4798      	blx	r3
			ret = true;
    48f0:	2601      	movs	r6, #1
    48f2:	e000      	b.n	48f6 <TCP_ParseTCPOptions+0xda>
		}
	} else {
		ret = true;
    48f4:	2601      	movs	r6, #1
	}

	return ret;
}
    48f6:	0030      	movs	r0, r6
    48f8:	bd70      	pop	{r4, r5, r6, pc}
    48fa:	46c0      	nop			; (mov r8, r8)
    48fc:	20000878 	.word	0x20000878
    4900:	000036ed 	.word	0x000036ed
    4904:	00003359 	.word	0x00003359
    4908:	00007080 	.word	0x00007080
    490c:	000045cb 	.word	0x000045cb
    4910:	000033d9 	.word	0x000033d9
    4914:	000005b4 	.word	0x000005b4
    4918:	000070bc 	.word	0x000070bc
    491c:	000070dc 	.word	0x000070dc
    4920:	000070a8 	.word	0x000070a8

00004924 <TCP_PayloadSave>:
{
    4924:	b510      	push	{r4, lr}
	if (currentTCB->rxBufState == RX_BUFF_IN_USE) {
    4926:	4b11      	ldr	r3, [pc, #68]	; (496c <TCP_PayloadSave+0x48>)
    4928:	681b      	ldr	r3, [r3, #0]
    492a:	222c      	movs	r2, #44	; 0x2c
    492c:	5c9a      	ldrb	r2, [r3, r2]
    492e:	2a01      	cmp	r2, #1
    4930:	d001      	beq.n	4936 <TCP_PayloadSave+0x12>
	bool     ret = false;
    4932:	2000      	movs	r0, #0
}
    4934:	bd10      	pop	{r4, pc}
		if (currentTCB->localWnd >= len) {
    4936:	8bdc      	ldrh	r4, [r3, #30]
    4938:	4284      	cmp	r4, r0
    493a:	d300      	bcc.n	493e <TCP_PayloadSave+0x1a>
			buffer_size = len;
    493c:	0004      	movs	r4, r0
		ETH_ReadBlock(currentTCB->rxBufferPtr, buffer_size);
    493e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    4940:	0021      	movs	r1, r4
    4942:	4b0b      	ldr	r3, [pc, #44]	; (4970 <TCP_PayloadSave+0x4c>)
    4944:	4798      	blx	r3
		currentTCB->rxBufferPtr = currentTCB->rxBufferPtr + buffer_size;
    4946:	4b09      	ldr	r3, [pc, #36]	; (496c <TCP_PayloadSave+0x48>)
    4948:	6818      	ldr	r0, [r3, #0]
    494a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    494c:	191b      	adds	r3, r3, r4
    494e:	6283      	str	r3, [r0, #40]	; 0x28
		currentTCB->localWnd  = currentTCB->localWnd - buffer_size;
    4950:	8bc3      	ldrh	r3, [r0, #30]
    4952:	1b1b      	subs	r3, r3, r4
    4954:	83c3      	strh	r3, [r0, #30]
		currentTCB->remoteAck = currentTCB->remoteSeqno + buffer_size;
    4956:	68c3      	ldr	r3, [r0, #12]
    4958:	469c      	mov	ip, r3
    495a:	4464      	add	r4, ip
    495c:	6104      	str	r4, [r0, #16]
		currentTCB->flags = TCP_ACK_FLAG;
    495e:	2210      	movs	r2, #16
    4960:	234d      	movs	r3, #77	; 0x4d
    4962:	54c2      	strb	r2, [r0, r3]
		TCP_Snd(currentTCB);
    4964:	4b03      	ldr	r3, [pc, #12]	; (4974 <TCP_PayloadSave+0x50>)
    4966:	4798      	blx	r3
		ret = true;
    4968:	2001      	movs	r0, #1
    496a:	e7e3      	b.n	4934 <TCP_PayloadSave+0x10>
    496c:	20003f3c 	.word	0x20003f3c
    4970:	00003451 	.word	0x00003451
    4974:	000046a5 	.word	0x000046a5

00004978 <TCP_FiniteStateMachine>:
 *
 * @return
 *      None
 */
static bool TCP_FiniteStateMachine(void)
{
    4978:	b570      	push	{r4, r5, r6, lr}
	uint16_t notAckBytes;
	bool     ret = false;

	tcp_fsm_states_t nextState = currentTCB->fsmState; // default don't change states
    497a:	4bd5      	ldr	r3, [pc, #852]	; (4cd0 <TCP_FiniteStateMachine+0x358>)
    497c:	6818      	ldr	r0, [r3, #0]
    497e:	233b      	movs	r3, #59	; 0x3b
    4980:	5cc4      	ldrb	r4, [r0, r3]
	tcpEvent_t       event     = currentTCB->connectionEvent;
    4982:	3301      	adds	r3, #1
    4984:	5cc2      	ldrb	r2, [r0, r3]

	switch (currentTCB->fsmState) {
    4986:	2c0a      	cmp	r4, #10
    4988:	d900      	bls.n	498c <TCP_FiniteStateMachine+0x14>
    498a:	e3b3      	b.n	50f4 <TCP_FiniteStateMachine+0x77c>
    498c:	00a3      	lsls	r3, r4, #2
    498e:	49d1      	ldr	r1, [pc, #836]	; (4cd4 <TCP_FiniteStateMachine+0x35c>)
    4990:	58cb      	ldr	r3, [r1, r3]
    4992:	469f      	mov	pc, r3
	case LISTEN:
		switch (event) {
    4994:	2a00      	cmp	r2, #0
    4996:	d029      	beq.n	49ec <TCP_FiniteStateMachine+0x74>
    4998:	2a03      	cmp	r2, #3
    499a:	d000      	beq.n	499e <TCP_FiniteStateMachine+0x26>
    499c:	e3b3      	b.n	5106 <TCP_FiniteStateMachine+0x78e>
		case RCV_SYN:
			TCP_SyslogWrite("LISTEN: rx_syn");
    499e:	48ce      	ldr	r0, [pc, #824]	; (4cd8 <TCP_FiniteStateMachine+0x360>)
    49a0:	4bce      	ldr	r3, [pc, #824]	; (4cdc <TCP_FiniteStateMachine+0x364>)
    49a2:	4798      	blx	r3
			// Start the connection on the TCB

			currentTCB->destIP   = receivedRemoteAddress;
    49a4:	4bca      	ldr	r3, [pc, #808]	; (4cd0 <TCP_FiniteStateMachine+0x358>)
    49a6:	6818      	ldr	r0, [r3, #0]
    49a8:	4bcd      	ldr	r3, [pc, #820]	; (4ce0 <TCP_FiniteStateMachine+0x368>)
    49aa:	699a      	ldr	r2, [r3, #24]
    49ac:	6042      	str	r2, [r0, #4]
			currentTCB->destPort = tcpHeader.sourcePort;
    49ae:	881a      	ldrh	r2, [r3, #0]
    49b0:	8102      	strh	r2, [r0, #8]

			// TO DO modify the start seq no to be "random"
			currentTCB->localLastAck = 0;
    49b2:	2200      	movs	r2, #0
    49b4:	6182      	str	r2, [r0, #24]

			currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
    49b6:	685a      	ldr	r2, [r3, #4]
    49b8:	60c2      	str	r2, [r0, #12]
			currentTCB->remoteAck   = currentTCB->remoteSeqno + 1; // ask for next packet
    49ba:	3201      	adds	r2, #1
    49bc:	6102      	str	r2, [r0, #16]

			// save data from TCP header
			currentTCB->remoteWnd = ntohs(tcpHeader.windowSize);
    49be:	89da      	ldrh	r2, [r3, #14]
    49c0:	0a11      	lsrs	r1, r2, #8
    49c2:	0212      	lsls	r2, r2, #8
    49c4:	430a      	orrs	r2, r1
    49c6:	8382      	strh	r2, [r0, #28]
			currentTCB->mss       = tcpMss;
    49c8:	8a9b      	ldrh	r3, [r3, #20]
    49ca:	8403      	strh	r3, [r0, #32]

			// create and send a SYN+ACK packet
			currentTCB->flags              = TCP_SYN_FLAG | TCP_ACK_FLAG;
    49cc:	2212      	movs	r2, #18
    49ce:	234d      	movs	r3, #77	; 0x4d
    49d0:	54c2      	strb	r2, [r0, r3]
			currentTCB->timeout            = TCP_START_TIMEOUT_VAL;
    49d2:	3b4b      	subs	r3, #75	; 0x4b
    49d4:	3236      	adds	r2, #54	; 0x36
    49d6:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutReloadValue = TCP_START_TIMEOUT_VAL;
    49d8:	3202      	adds	r2, #2
    49da:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutsCount      = TCP_MAX_SYN_RETRIES;
    49dc:	3a47      	subs	r2, #71	; 0x47
    49de:	334a      	adds	r3, #74	; 0x4a
    49e0:	54c2      	strb	r2, [r0, r3]

			TCP_Snd(currentTCB);
    49e2:	4bc0      	ldr	r3, [pc, #768]	; (4ce4 <TCP_FiniteStateMachine+0x36c>)
    49e4:	4798      	blx	r3
			nextState = SYN_RECEIVED;
    49e6:	2403      	movs	r4, #3
	bool     ret = false;
    49e8:	2000      	movs	r0, #0
			break;
    49ea:	e384      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
		case CLOSE:
			TCP_SyslogWrite("LISTEN: close");
    49ec:	48be      	ldr	r0, [pc, #760]	; (4ce8 <TCP_FiniteStateMachine+0x370>)
    49ee:	4bbb      	ldr	r3, [pc, #748]	; (4cdc <TCP_FiniteStateMachine+0x364>)
    49f0:	4798      	blx	r3
			nextState = CLOSE;
			TCB_Reset(currentTCB);
    49f2:	4bb7      	ldr	r3, [pc, #732]	; (4cd0 <TCP_FiniteStateMachine+0x358>)
    49f4:	6818      	ldr	r0, [r3, #0]
    49f6:	4bbd      	ldr	r3, [pc, #756]	; (4cec <TCP_FiniteStateMachine+0x374>)
    49f8:	4798      	blx	r3
			nextState = CLOSE;
    49fa:	2400      	movs	r4, #0
	bool     ret = false;
    49fc:	2000      	movs	r0, #0
			break;
    49fe:	e37a      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
			// for all other cases the packet is invalid and will be discarded
			break;
		}
		break;
	case SYN_SENT:
		switch (event) {
    4a00:	2a0c      	cmp	r2, #12
    4a02:	d900      	bls.n	4a06 <TCP_FiniteStateMachine+0x8e>
    4a04:	e381      	b.n	510a <TCP_FiniteStateMachine+0x792>
    4a06:	0092      	lsls	r2, r2, #2
    4a08:	4bb9      	ldr	r3, [pc, #740]	; (4cf0 <TCP_FiniteStateMachine+0x378>)
    4a0a:	589b      	ldr	r3, [r3, r2]
    4a0c:	469f      	mov	pc, r3
		case RCV_SYN:
			TCP_SyslogWrite("SYN_SENT: rx_syn");
    4a0e:	48b9      	ldr	r0, [pc, #740]	; (4cf4 <TCP_FiniteStateMachine+0x37c>)
    4a10:	4bb2      	ldr	r3, [pc, #712]	; (4cdc <TCP_FiniteStateMachine+0x364>)
    4a12:	4798      	blx	r3
			// Simultaneous open
			currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
    4a14:	4bae      	ldr	r3, [pc, #696]	; (4cd0 <TCP_FiniteStateMachine+0x358>)
    4a16:	6818      	ldr	r0, [r3, #0]
    4a18:	4ab1      	ldr	r2, [pc, #708]	; (4ce0 <TCP_FiniteStateMachine+0x368>)
    4a1a:	6853      	ldr	r3, [r2, #4]
    4a1c:	60c3      	str	r3, [r0, #12]
			currentTCB->remoteAck   = tcpHeader.sequenceNumber + 1; // ask for next packet
    4a1e:	3301      	adds	r3, #1
    4a20:	6103      	str	r3, [r0, #16]

			// save data from TCP header
			currentTCB->remoteWnd = ntohs(tcpHeader.windowSize);
    4a22:	89d3      	ldrh	r3, [r2, #14]
    4a24:	0a19      	lsrs	r1, r3, #8
    4a26:	021b      	lsls	r3, r3, #8
    4a28:	430b      	orrs	r3, r1
    4a2a:	8383      	strh	r3, [r0, #28]
			currentTCB->mss       = tcpMss;
    4a2c:	8a93      	ldrh	r3, [r2, #20]
    4a2e:	8403      	strh	r3, [r0, #32]

			// create and send a ACK packet
			currentTCB->timeout            = TCP_START_TIMEOUT_VAL;
    4a30:	2302      	movs	r3, #2
    4a32:	2248      	movs	r2, #72	; 0x48
    4a34:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutReloadValue = TCP_START_TIMEOUT_VAL;
    4a36:	3202      	adds	r2, #2
    4a38:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutsCount      = TCP_MAX_SYN_RETRIES;
    4a3a:	3a47      	subs	r2, #71	; 0x47
    4a3c:	334a      	adds	r3, #74	; 0x4a
    4a3e:	54c2      	strb	r2, [r0, r3]
			currentTCB->flags              = TCP_SYN_FLAG | TCP_ACK_FLAG;
    4a40:	320f      	adds	r2, #15
    4a42:	3301      	adds	r3, #1
    4a44:	54c2      	strb	r2, [r0, r3]

			TCP_Snd(currentTCB);
    4a46:	4ba7      	ldr	r3, [pc, #668]	; (4ce4 <TCP_FiniteStateMachine+0x36c>)
    4a48:	4798      	blx	r3

			// Go to SYN_RECEIVED and waiting for the ack
			nextState = SYN_RECEIVED;
    4a4a:	2403      	movs	r4, #3
	bool     ret = false;
    4a4c:	2000      	movs	r0, #0
			break;
    4a4e:	e352      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
		case RCV_SYNACK:
			TCP_SyslogWrite("SYN_SENT: rx_synack");
    4a50:	48a9      	ldr	r0, [pc, #676]	; (4cf8 <TCP_FiniteStateMachine+0x380>)
    4a52:	4ba2      	ldr	r3, [pc, #648]	; (4cdc <TCP_FiniteStateMachine+0x364>)
    4a54:	4798      	blx	r3

			currentTCB->timeout = 0;
    4a56:	4b9e      	ldr	r3, [pc, #632]	; (4cd0 <TCP_FiniteStateMachine+0x358>)
    4a58:	6818      	ldr	r0, [r3, #0]
    4a5a:	2200      	movs	r2, #0
    4a5c:	2348      	movs	r3, #72	; 0x48
    4a5e:	52c2      	strh	r2, [r0, r3]

			if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber) {
    4a60:	6943      	ldr	r3, [r0, #20]
    4a62:	3301      	adds	r3, #1
    4a64:	4a9e      	ldr	r2, [pc, #632]	; (4ce0 <TCP_FiniteStateMachine+0x368>)
    4a66:	6892      	ldr	r2, [r2, #8]
    4a68:	4293      	cmp	r3, r2
    4a6a:	d00f      	beq.n	4a8c <TCP_FiniteStateMachine+0x114>
					nextState               = ESTABLISHED;
					currentTCB->socketState = SOCKET_CONNECTED;
				}
			} else {
				// send reset
				currentTCB->localSeqno = tcpHeader.ackNumber;
    4a6c:	6142      	str	r2, [r0, #20]
				currentTCB->flags      = TCP_RST_FLAG | TCP_ACK_FLAG;
    4a6e:	2214      	movs	r2, #20
    4a70:	234d      	movs	r3, #77	; 0x4d
    4a72:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    4a74:	4b9b      	ldr	r3, [pc, #620]	; (4ce4 <TCP_FiniteStateMachine+0x36c>)
    4a76:	4798      	blx	r3
    4a78:	2800      	cmp	r0, #0
    4a7a:	d100      	bne.n	4a7e <TCP_FiniteStateMachine+0x106>
    4a7c:	e33b      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
					nextState = CLOSE;
					TCB_Reset(currentTCB);
    4a7e:	4b94      	ldr	r3, [pc, #592]	; (4cd0 <TCP_FiniteStateMachine+0x358>)
    4a80:	6818      	ldr	r0, [r3, #0]
    4a82:	4b9a      	ldr	r3, [pc, #616]	; (4cec <TCP_FiniteStateMachine+0x374>)
    4a84:	4798      	blx	r3
					nextState = CLOSE;
    4a86:	2400      	movs	r4, #0
	bool     ret = false;
    4a88:	2000      	movs	r0, #0
    4a8a:	e334      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
				currentTCB->localSeqno = currentTCB->localSeqno + 1;
    4a8c:	6143      	str	r3, [r0, #20]
				currentTCB->flags      = TCP_ACK_FLAG;
    4a8e:	2210      	movs	r2, #16
    4a90:	234d      	movs	r3, #77	; 0x4d
    4a92:	54c2      	strb	r2, [r0, r3]
				currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
    4a94:	4a92      	ldr	r2, [pc, #584]	; (4ce0 <TCP_FiniteStateMachine+0x368>)
    4a96:	6853      	ldr	r3, [r2, #4]
    4a98:	60c3      	str	r3, [r0, #12]
				currentTCB->remoteAck = tcpHeader.sequenceNumber + 1;
    4a9a:	3301      	adds	r3, #1
    4a9c:	6103      	str	r3, [r0, #16]
				currentTCB->remoteWnd = ntohs(tcpHeader.windowSize);
    4a9e:	89d3      	ldrh	r3, [r2, #14]
    4aa0:	0a19      	lsrs	r1, r3, #8
    4aa2:	021b      	lsls	r3, r3, #8
    4aa4:	430b      	orrs	r3, r1
    4aa6:	8383      	strh	r3, [r0, #28]
				currentTCB->mss       = tcpMss;
    4aa8:	8a93      	ldrh	r3, [r2, #20]
    4aaa:	8403      	strh	r3, [r0, #32]
				if (TCP_Snd(currentTCB)) {
    4aac:	4b8d      	ldr	r3, [pc, #564]	; (4ce4 <TCP_FiniteStateMachine+0x36c>)
    4aae:	4798      	blx	r3
    4ab0:	2800      	cmp	r0, #0
    4ab2:	d100      	bne.n	4ab6 <TCP_FiniteStateMachine+0x13e>
    4ab4:	e31f      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
					currentTCB->socketState = SOCKET_CONNECTED;
    4ab6:	4b86      	ldr	r3, [pc, #536]	; (4cd0 <TCP_FiniteStateMachine+0x358>)
    4ab8:	681a      	ldr	r2, [r3, #0]
    4aba:	2103      	movs	r1, #3
    4abc:	234e      	movs	r3, #78	; 0x4e
    4abe:	54d1      	strb	r1, [r2, r3]
					nextState               = ESTABLISHED;
    4ac0:	2404      	movs	r4, #4
	bool     ret = false;
    4ac2:	2000      	movs	r0, #0
    4ac4:	e317      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
				}
			}
			break;
		case RCV_ACK:
			TCP_SyslogWrite("SYN_SENT: rx_ack");
    4ac6:	488d      	ldr	r0, [pc, #564]	; (4cfc <TCP_FiniteStateMachine+0x384>)
    4ac8:	4b84      	ldr	r3, [pc, #528]	; (4cdc <TCP_FiniteStateMachine+0x364>)
    4aca:	4798      	blx	r3

			currentTCB->timeout = 0;
    4acc:	4b80      	ldr	r3, [pc, #512]	; (4cd0 <TCP_FiniteStateMachine+0x358>)
    4ace:	6818      	ldr	r0, [r3, #0]
    4ad0:	2200      	movs	r2, #0
    4ad2:	2348      	movs	r3, #72	; 0x48
    4ad4:	52c2      	strh	r2, [r0, r3]

			if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber) {
    4ad6:	6943      	ldr	r3, [r0, #20]
    4ad8:	3301      	adds	r3, #1
    4ada:	4a81      	ldr	r2, [pc, #516]	; (4ce0 <TCP_FiniteStateMachine+0x368>)
    4adc:	6892      	ldr	r2, [r2, #8]
    4ade:	4293      	cmp	r3, r2
    4ae0:	d00f      	beq.n	4b02 <TCP_FiniteStateMachine+0x18a>

				nextState               = ESTABLISHED;
				currentTCB->socketState = SOCKET_CONNECTED;
			} else {
				// send reset
				currentTCB->localSeqno = tcpHeader.ackNumber;
    4ae2:	6142      	str	r2, [r0, #20]
				currentTCB->flags      = TCP_RST_FLAG;
    4ae4:	2204      	movs	r2, #4
    4ae6:	234d      	movs	r3, #77	; 0x4d
    4ae8:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    4aea:	4b7e      	ldr	r3, [pc, #504]	; (4ce4 <TCP_FiniteStateMachine+0x36c>)
    4aec:	4798      	blx	r3
    4aee:	2800      	cmp	r0, #0
    4af0:	d100      	bne.n	4af4 <TCP_FiniteStateMachine+0x17c>
    4af2:	e300      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
					nextState = CLOSE;
					TCB_Reset(currentTCB);
    4af4:	4b76      	ldr	r3, [pc, #472]	; (4cd0 <TCP_FiniteStateMachine+0x358>)
    4af6:	6818      	ldr	r0, [r3, #0]
    4af8:	4b7c      	ldr	r3, [pc, #496]	; (4cec <TCP_FiniteStateMachine+0x374>)
    4afa:	4798      	blx	r3
					nextState = CLOSE;
    4afc:	2400      	movs	r4, #0
	bool     ret = false;
    4afe:	2000      	movs	r0, #0
    4b00:	e2f9      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
				currentTCB->localSeqno = currentTCB->localSeqno + 1;
    4b02:	6143      	str	r3, [r0, #20]
				currentTCB->flags      = TCP_ACK_FLAG;
    4b04:	2210      	movs	r2, #16
    4b06:	234d      	movs	r3, #77	; 0x4d
    4b08:	54c2      	strb	r2, [r0, r3]
				currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
    4b0a:	4a75      	ldr	r2, [pc, #468]	; (4ce0 <TCP_FiniteStateMachine+0x368>)
    4b0c:	6853      	ldr	r3, [r2, #4]
    4b0e:	60c3      	str	r3, [r0, #12]
				currentTCB->remoteAck   = tcpHeader.sequenceNumber + 1; // ask for next packet
    4b10:	3301      	adds	r3, #1
    4b12:	6103      	str	r3, [r0, #16]
				currentTCB->remoteWnd = ntohs(tcpHeader.windowSize);
    4b14:	89d3      	ldrh	r3, [r2, #14]
    4b16:	0a19      	lsrs	r1, r3, #8
    4b18:	021b      	lsls	r3, r3, #8
    4b1a:	430b      	orrs	r3, r1
    4b1c:	8383      	strh	r3, [r0, #28]
				currentTCB->mss       = tcpMss;
    4b1e:	8a93      	ldrh	r3, [r2, #20]
    4b20:	8403      	strh	r3, [r0, #32]
				currentTCB->socketState = SOCKET_CONNECTED;
    4b22:	2203      	movs	r2, #3
    4b24:	234e      	movs	r3, #78	; 0x4e
    4b26:	54c2      	strb	r2, [r0, r3]
				nextState               = ESTABLISHED;
    4b28:	2404      	movs	r4, #4
	bool     ret = false;
    4b2a:	2000      	movs	r0, #0
    4b2c:	e2e3      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
				}
			}
			break;
		case CLOSE:
			TCP_SyslogWrite("SYN_SENT: close");
    4b2e:	4874      	ldr	r0, [pc, #464]	; (4d00 <TCP_FiniteStateMachine+0x388>)
    4b30:	4b6a      	ldr	r3, [pc, #424]	; (4cdc <TCP_FiniteStateMachine+0x364>)
    4b32:	4798      	blx	r3
			// go to CLOSED state
			nextState = CLOSED;
			TCB_Reset(currentTCB);
    4b34:	4b66      	ldr	r3, [pc, #408]	; (4cd0 <TCP_FiniteStateMachine+0x358>)
    4b36:	6818      	ldr	r0, [r3, #0]
    4b38:	4b6c      	ldr	r3, [pc, #432]	; (4cec <TCP_FiniteStateMachine+0x374>)
    4b3a:	4798      	blx	r3
			nextState = CLOSED;
    4b3c:	2400      	movs	r4, #0
	bool     ret = false;
    4b3e:	2000      	movs	r0, #0
			break;
    4b40:	e2d9      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
		case TIMEOUT:
			TCP_SyslogWrite("SYN_SENT: timeout");
    4b42:	4870      	ldr	r0, [pc, #448]	; (4d04 <TCP_FiniteStateMachine+0x38c>)
    4b44:	4b65      	ldr	r3, [pc, #404]	; (4cdc <TCP_FiniteStateMachine+0x364>)
    4b46:	4798      	blx	r3
			// looks like the the packet was lost
			// check inside the packet to see where to jump next
			if (currentTCB->timeoutsCount) {
    4b48:	4b61      	ldr	r3, [pc, #388]	; (4cd0 <TCP_FiniteStateMachine+0x358>)
    4b4a:	6818      	ldr	r0, [r3, #0]
    4b4c:	234c      	movs	r3, #76	; 0x4c
    4b4e:	5cc3      	ldrb	r3, [r0, r3]
    4b50:	2b00      	cmp	r3, #0
    4b52:	d018      	beq.n	4b86 <TCP_FiniteStateMachine+0x20e>
				if (TCP_Snd(currentTCB)) {
    4b54:	4b63      	ldr	r3, [pc, #396]	; (4ce4 <TCP_FiniteStateMachine+0x36c>)
    4b56:	4798      	blx	r3
    4b58:	2800      	cmp	r0, #0
    4b5a:	d100      	bne.n	4b5e <TCP_FiniteStateMachine+0x1e6>
    4b5c:	e2cb      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
					if (currentTCB->flags & TCP_RST_FLAG) {
    4b5e:	4b5c      	ldr	r3, [pc, #368]	; (4cd0 <TCP_FiniteStateMachine+0x358>)
    4b60:	6818      	ldr	r0, [r3, #0]
    4b62:	234d      	movs	r3, #77	; 0x4d
    4b64:	5cc3      	ldrb	r3, [r0, r3]
    4b66:	075a      	lsls	r2, r3, #29
    4b68:	d408      	bmi.n	4b7c <TCP_FiniteStateMachine+0x204>
						nextState = CLOSE;
						TCB_Reset(currentTCB);
					} else if (currentTCB->flags & TCP_ACK_FLAG) {
    4b6a:	06db      	lsls	r3, r3, #27
    4b6c:	d400      	bmi.n	4b70 <TCP_FiniteStateMachine+0x1f8>
    4b6e:	e2ce      	b.n	510e <TCP_FiniteStateMachine+0x796>
						nextState               = ESTABLISHED;
						currentTCB->socketState = SOCKET_CONNECTED;
    4b70:	2203      	movs	r2, #3
    4b72:	234e      	movs	r3, #78	; 0x4e
    4b74:	54c2      	strb	r2, [r0, r3]
						nextState               = ESTABLISHED;
    4b76:	2404      	movs	r4, #4
	bool     ret = false;
    4b78:	2000      	movs	r0, #0
    4b7a:	e2bc      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
						TCB_Reset(currentTCB);
    4b7c:	4b5b      	ldr	r3, [pc, #364]	; (4cec <TCP_FiniteStateMachine+0x374>)
    4b7e:	4798      	blx	r3
						nextState = CLOSE;
    4b80:	2400      	movs	r4, #0
	bool     ret = false;
    4b82:	0020      	movs	r0, r4
    4b84:	e2b7      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
					}
				}
			} else {
				// just reset the connection if there is no reply
				currentTCB->flags = TCP_RST_FLAG;
    4b86:	2204      	movs	r2, #4
    4b88:	234d      	movs	r3, #77	; 0x4d
    4b8a:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    4b8c:	4b55      	ldr	r3, [pc, #340]	; (4ce4 <TCP_FiniteStateMachine+0x36c>)
    4b8e:	4798      	blx	r3
    4b90:	2800      	cmp	r0, #0
    4b92:	d100      	bne.n	4b96 <TCP_FiniteStateMachine+0x21e>
    4b94:	e2af      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
					nextState = CLOSE;
					TCB_Reset(currentTCB);
    4b96:	4b4e      	ldr	r3, [pc, #312]	; (4cd0 <TCP_FiniteStateMachine+0x358>)
    4b98:	6818      	ldr	r0, [r3, #0]
    4b9a:	4b54      	ldr	r3, [pc, #336]	; (4cec <TCP_FiniteStateMachine+0x374>)
    4b9c:	4798      	blx	r3
					nextState = CLOSE;
    4b9e:	2400      	movs	r4, #0
	bool     ret = false;
    4ba0:	2000      	movs	r0, #0
    4ba2:	e2a8      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
			break;
		case RCV_RST:
		case RCV_RSTACK:
			// port seems not to be opened
			nextState = CLOSED;
			TCB_Reset(currentTCB);
    4ba4:	4b51      	ldr	r3, [pc, #324]	; (4cec <TCP_FiniteStateMachine+0x374>)
    4ba6:	4798      	blx	r3
			nextState = CLOSED;
    4ba8:	2400      	movs	r4, #0
	bool     ret = false;
    4baa:	2000      	movs	r0, #0
			break;
    4bac:	e2a3      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
			// for all other cases the packet is invalid and will be discarded
			break;
		}
		break;
	case SYN_RECEIVED:
		switch (event) {
    4bae:	2a0c      	cmp	r2, #12
    4bb0:	d900      	bls.n	4bb4 <TCP_FiniteStateMachine+0x23c>
    4bb2:	e2ae      	b.n	5112 <TCP_FiniteStateMachine+0x79a>
    4bb4:	0092      	lsls	r2, r2, #2
    4bb6:	4b54      	ldr	r3, [pc, #336]	; (4d08 <TCP_FiniteStateMachine+0x390>)
    4bb8:	589b      	ldr	r3, [r3, r2]
    4bba:	469f      	mov	pc, r3
		case RCV_SYNACK:
			TCP_SyslogWrite("SYN_RECEIVED: rx_synack");
    4bbc:	4853      	ldr	r0, [pc, #332]	; (4d0c <TCP_FiniteStateMachine+0x394>)
    4bbe:	4b47      	ldr	r3, [pc, #284]	; (4cdc <TCP_FiniteStateMachine+0x364>)
    4bc0:	4798      	blx	r3
			if (currentTCB->localPort == tcpHeader.destPort) {
    4bc2:	4b43      	ldr	r3, [pc, #268]	; (4cd0 <TCP_FiniteStateMachine+0x358>)
    4bc4:	681b      	ldr	r3, [r3, #0]
    4bc6:	8819      	ldrh	r1, [r3, #0]
    4bc8:	4a45      	ldr	r2, [pc, #276]	; (4ce0 <TCP_FiniteStateMachine+0x368>)
    4bca:	8852      	ldrh	r2, [r2, #2]
    4bcc:	4291      	cmp	r1, r2
    4bce:	d001      	beq.n	4bd4 <TCP_FiniteStateMachine+0x25c>
	bool     ret = false;
    4bd0:	2000      	movs	r0, #0
    4bd2:	e290      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
				// stop the current timeout
				currentTCB->timeout = 0;
    4bd4:	2100      	movs	r1, #0
    4bd6:	2248      	movs	r2, #72	; 0x48
    4bd8:	5299      	strh	r1, [r3, r2]

				// This is part of simultaneous open
				// TO DO: Check if the received packet is the one that we expect
				if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPort == tcpHeader.sourcePort))
    4bda:	4a41      	ldr	r2, [pc, #260]	; (4ce0 <TCP_FiniteStateMachine+0x368>)
    4bdc:	6992      	ldr	r2, [r2, #24]
    4bde:	6859      	ldr	r1, [r3, #4]
    4be0:	4291      	cmp	r1, r2
    4be2:	d004      	beq.n	4bee <TCP_FiniteStateMachine+0x276>
					if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber)

						nextState = ESTABLISHED;
				currentTCB->socketState = SOCKET_CONNECTED;
    4be4:	2103      	movs	r1, #3
    4be6:	224e      	movs	r2, #78	; 0x4e
    4be8:	5499      	strb	r1, [r3, r2]
	bool     ret = false;
    4bea:	2000      	movs	r0, #0
    4bec:	e283      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
				if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPort == tcpHeader.sourcePort))
    4bee:	8919      	ldrh	r1, [r3, #8]
    4bf0:	4a3b      	ldr	r2, [pc, #236]	; (4ce0 <TCP_FiniteStateMachine+0x368>)
    4bf2:	8812      	ldrh	r2, [r2, #0]
    4bf4:	4291      	cmp	r1, r2
    4bf6:	d1f5      	bne.n	4be4 <TCP_FiniteStateMachine+0x26c>
					if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber)
    4bf8:	695a      	ldr	r2, [r3, #20]
    4bfa:	3201      	adds	r2, #1
    4bfc:	4938      	ldr	r1, [pc, #224]	; (4ce0 <TCP_FiniteStateMachine+0x368>)
    4bfe:	6889      	ldr	r1, [r1, #8]
    4c00:	428a      	cmp	r2, r1
    4c02:	d1ef      	bne.n	4be4 <TCP_FiniteStateMachine+0x26c>
						nextState = ESTABLISHED;
    4c04:	2404      	movs	r4, #4
    4c06:	e7ed      	b.n	4be4 <TCP_FiniteStateMachine+0x26c>
			}
			break;
		case RCV_ACK:
			TCP_SyslogWrite("SYN_RECEIVED: rx_ack");
    4c08:	4841      	ldr	r0, [pc, #260]	; (4d10 <TCP_FiniteStateMachine+0x398>)
    4c0a:	4b34      	ldr	r3, [pc, #208]	; (4cdc <TCP_FiniteStateMachine+0x364>)
    4c0c:	4798      	blx	r3

			// check if the packet is for the curent TCB
			// we need to check the remote IP adress and remote port
			if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPort == tcpHeader.sourcePort)) {
    4c0e:	4b30      	ldr	r3, [pc, #192]	; (4cd0 <TCP_FiniteStateMachine+0x358>)
    4c10:	681b      	ldr	r3, [r3, #0]
    4c12:	4a33      	ldr	r2, [pc, #204]	; (4ce0 <TCP_FiniteStateMachine+0x368>)
    4c14:	6992      	ldr	r2, [r2, #24]
    4c16:	6859      	ldr	r1, [r3, #4]
    4c18:	4291      	cmp	r1, r2
    4c1a:	d001      	beq.n	4c20 <TCP_FiniteStateMachine+0x2a8>
	bool     ret = false;
    4c1c:	2000      	movs	r0, #0
    4c1e:	e26a      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
			if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPort == tcpHeader.sourcePort)) {
    4c20:	8919      	ldrh	r1, [r3, #8]
    4c22:	4a2f      	ldr	r2, [pc, #188]	; (4ce0 <TCP_FiniteStateMachine+0x368>)
    4c24:	8812      	ldrh	r2, [r2, #0]
    4c26:	4291      	cmp	r1, r2
    4c28:	d001      	beq.n	4c2e <TCP_FiniteStateMachine+0x2b6>
	bool     ret = false;
    4c2a:	2000      	movs	r0, #0
    4c2c:	e263      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
				// check the sequence numbers
				// is it the packet that I've ask for?
				if (currentTCB->remoteAck == tcpHeader.sequenceNumber) {
    4c2e:	4a2c      	ldr	r2, [pc, #176]	; (4ce0 <TCP_FiniteStateMachine+0x368>)
    4c30:	6852      	ldr	r2, [r2, #4]
    4c32:	6919      	ldr	r1, [r3, #16]
    4c34:	4291      	cmp	r1, r2
    4c36:	d001      	beq.n	4c3c <TCP_FiniteStateMachine+0x2c4>
	bool     ret = false;
    4c38:	2000      	movs	r0, #0
    4c3a:	e25c      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
					// is ACK OK?
					if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber) {
    4c3c:	695a      	ldr	r2, [r3, #20]
    4c3e:	3201      	adds	r2, #1
    4c40:	4927      	ldr	r1, [pc, #156]	; (4ce0 <TCP_FiniteStateMachine+0x368>)
    4c42:	6889      	ldr	r1, [r1, #8]
    4c44:	428a      	cmp	r2, r1
    4c46:	d001      	beq.n	4c4c <TCP_FiniteStateMachine+0x2d4>
	bool     ret = false;
    4c48:	2000      	movs	r0, #0
    4c4a:	e254      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
						currentTCB->localSeqno = currentTCB->localSeqno + 1;
    4c4c:	615a      	str	r2, [r3, #20]
						// stop the current timeout
						currentTCB->timeout = 0;
    4c4e:	2000      	movs	r0, #0
    4c50:	2248      	movs	r2, #72	; 0x48
    4c52:	5298      	strh	r0, [r3, r2]

						nextState               = ESTABLISHED;
						currentTCB->socketState = SOCKET_CONNECTED;
    4c54:	2103      	movs	r1, #3
    4c56:	3206      	adds	r2, #6
    4c58:	5499      	strb	r1, [r3, r2]
						nextState               = ESTABLISHED;
    4c5a:	2404      	movs	r4, #4
    4c5c:	e24b      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
					}
				}
			}
			break;
		case CLOSE:
			TCP_SyslogWrite("SYN_RECEIVED: close");
    4c5e:	482d      	ldr	r0, [pc, #180]	; (4d14 <TCP_FiniteStateMachine+0x39c>)
    4c60:	4b1e      	ldr	r3, [pc, #120]	; (4cdc <TCP_FiniteStateMachine+0x364>)
    4c62:	4798      	blx	r3
			// stop the current timeout
			currentTCB->timeout = 0;
    4c64:	4b1a      	ldr	r3, [pc, #104]	; (4cd0 <TCP_FiniteStateMachine+0x358>)
    4c66:	6818      	ldr	r0, [r3, #0]
			// Need to send FIN and go to the FIN_WAIT_1
			currentTCB->flags              = TCP_FIN_FLAG;
    4c68:	2201      	movs	r2, #1
    4c6a:	234d      	movs	r3, #77	; 0x4d
    4c6c:	54c2      	strb	r2, [r0, r3]
			currentTCB->timeout            = TCP_START_TIMEOUT_VAL;
    4c6e:	3b4b      	subs	r3, #75	; 0x4b
    4c70:	3247      	adds	r2, #71	; 0x47
    4c72:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutReloadValue = TCP_START_TIMEOUT_VAL;
    4c74:	3202      	adds	r2, #2
    4c76:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutsCount      = TCP_MAX_RETRIES;
    4c78:	3a45      	subs	r2, #69	; 0x45
    4c7a:	334a      	adds	r3, #74	; 0x4a
    4c7c:	54c2      	strb	r2, [r0, r3]

			nextState = FIN_WAIT_1;
			TCP_Snd(currentTCB);
    4c7e:	4b19      	ldr	r3, [pc, #100]	; (4ce4 <TCP_FiniteStateMachine+0x36c>)
    4c80:	4798      	blx	r3
			nextState = FIN_WAIT_1;
    4c82:	2405      	movs	r4, #5
	bool     ret = false;
    4c84:	2000      	movs	r0, #0
			break;
    4c86:	e236      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
		case RCV_RSTACK:
		case RCV_RST:
			// Reset the connection
			TCP_SyslogWrite("SYN_RECEIVED:  rx_rst");
    4c88:	4823      	ldr	r0, [pc, #140]	; (4d18 <TCP_FiniteStateMachine+0x3a0>)
    4c8a:	4b14      	ldr	r3, [pc, #80]	; (4cdc <TCP_FiniteStateMachine+0x364>)
    4c8c:	4798      	blx	r3
			// check if the local port match; else drop the pachet
			if (currentTCB->localPort == tcpHeader.destPort) {
    4c8e:	4b10      	ldr	r3, [pc, #64]	; (4cd0 <TCP_FiniteStateMachine+0x358>)
    4c90:	681b      	ldr	r3, [r3, #0]
    4c92:	8819      	ldrh	r1, [r3, #0]
    4c94:	4a12      	ldr	r2, [pc, #72]	; (4ce0 <TCP_FiniteStateMachine+0x368>)
    4c96:	8852      	ldrh	r2, [r2, #2]
    4c98:	4291      	cmp	r1, r2
    4c9a:	d001      	beq.n	4ca0 <TCP_FiniteStateMachine+0x328>
	bool     ret = false;
    4c9c:	2000      	movs	r0, #0
    4c9e:	e22a      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
				if (currentTCB->remoteAck == tcpHeader.sequenceNumber) {
    4ca0:	691a      	ldr	r2, [r3, #16]
    4ca2:	4b0f      	ldr	r3, [pc, #60]	; (4ce0 <TCP_FiniteStateMachine+0x368>)
    4ca4:	685b      	ldr	r3, [r3, #4]
    4ca6:	429a      	cmp	r2, r3
    4ca8:	d001      	beq.n	4cae <TCP_FiniteStateMachine+0x336>
	bool     ret = false;
    4caa:	2000      	movs	r0, #0
    4cac:	e223      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
					TCP_SyslogWrite("rst seq OK");
    4cae:	481b      	ldr	r0, [pc, #108]	; (4d1c <TCP_FiniteStateMachine+0x3a4>)
    4cb0:	4b0a      	ldr	r3, [pc, #40]	; (4cdc <TCP_FiniteStateMachine+0x364>)
    4cb2:	4798      	blx	r3
					currentTCB->destIP       = 0;
    4cb4:	4b06      	ldr	r3, [pc, #24]	; (4cd0 <TCP_FiniteStateMachine+0x358>)
    4cb6:	681b      	ldr	r3, [r3, #0]
    4cb8:	2000      	movs	r0, #0
    4cba:	6058      	str	r0, [r3, #4]
					currentTCB->destPort     = 0;
    4cbc:	8118      	strh	r0, [r3, #8]
					currentTCB->localSeqno   = 0;
    4cbe:	6158      	str	r0, [r3, #20]
					currentTCB->localLastAck = 0;
    4cc0:	6198      	str	r0, [r3, #24]
					currentTCB->remoteSeqno  = 0;
    4cc2:	60d8      	str	r0, [r3, #12]
					currentTCB->remoteAck    = 0;
    4cc4:	6118      	str	r0, [r3, #16]
					currentTCB->remoteWnd    = 0;
    4cc6:	8398      	strh	r0, [r3, #28]
					currentTCB->mss          = 0;
    4cc8:	8418      	strh	r0, [r3, #32]

					nextState = LISTEN;
    4cca:	2401      	movs	r4, #1
    4ccc:	e213      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
    4cce:	46c0      	nop			; (mov r8, r8)
    4cd0:	20003f3c 	.word	0x20003f3c
    4cd4:	00006fa8 	.word	0x00006fa8
    4cd8:	000070f8 	.word	0x000070f8
    4cdc:	000045cb 	.word	0x000045cb
    4ce0:	20000878 	.word	0x20000878
    4ce4:	000046a5 	.word	0x000046a5
    4ce8:	00007108 	.word	0x00007108
    4cec:	00004639 	.word	0x00004639
    4cf0:	00006fd4 	.word	0x00006fd4
    4cf4:	00007118 	.word	0x00007118
    4cf8:	0000712c 	.word	0x0000712c
    4cfc:	00007140 	.word	0x00007140
    4d00:	00007154 	.word	0x00007154
    4d04:	00007164 	.word	0x00007164
    4d08:	00007008 	.word	0x00007008
    4d0c:	00007178 	.word	0x00007178
    4d10:	00007190 	.word	0x00007190
    4d14:	000071a8 	.word	0x000071a8
    4d18:	000071bc 	.word	0x000071bc
    4d1c:	000071d4 	.word	0x000071d4
				}
			}
			break;
		case TIMEOUT:
			TCP_SyslogWrite("SYN_RECEIVED:  timeout");
    4d20:	48cb      	ldr	r0, [pc, #812]	; (5050 <TCP_FiniteStateMachine+0x6d8>)
    4d22:	4bcc      	ldr	r3, [pc, #816]	; (5054 <TCP_FiniteStateMachine+0x6dc>)
    4d24:	4798      	blx	r3
			if (currentTCB->timeoutsCount) {
    4d26:	4bcc      	ldr	r3, [pc, #816]	; (5058 <TCP_FiniteStateMachine+0x6e0>)
    4d28:	6818      	ldr	r0, [r3, #0]
    4d2a:	234c      	movs	r3, #76	; 0x4c
    4d2c:	5cc3      	ldrb	r3, [r0, r3]
    4d2e:	2b00      	cmp	r3, #0
    4d30:	d115      	bne.n	4d5e <TCP_FiniteStateMachine+0x3e6>
				TCP_Snd(currentTCB);
			} else {
				// reseting the connection if there is no reply
				currentTCB->flags = TCP_RST_FLAG;
    4d32:	2204      	movs	r2, #4
    4d34:	234d      	movs	r3, #77	; 0x4d
    4d36:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    4d38:	4bc8      	ldr	r3, [pc, #800]	; (505c <TCP_FiniteStateMachine+0x6e4>)
    4d3a:	4798      	blx	r3
    4d3c:	2800      	cmp	r0, #0
    4d3e:	d100      	bne.n	4d42 <TCP_FiniteStateMachine+0x3ca>
    4d40:	e1d9      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
					currentTCB->destIP       = 0;
    4d42:	4bc5      	ldr	r3, [pc, #788]	; (5058 <TCP_FiniteStateMachine+0x6e0>)
    4d44:	681b      	ldr	r3, [r3, #0]
    4d46:	2200      	movs	r2, #0
    4d48:	605a      	str	r2, [r3, #4]
					currentTCB->destPort     = 0;
    4d4a:	811a      	strh	r2, [r3, #8]
					currentTCB->localSeqno   = 0;
    4d4c:	615a      	str	r2, [r3, #20]
					currentTCB->localLastAck = 0;
    4d4e:	619a      	str	r2, [r3, #24]
					currentTCB->remoteSeqno  = 0;
    4d50:	60da      	str	r2, [r3, #12]
					currentTCB->remoteAck    = 0;
    4d52:	611a      	str	r2, [r3, #16]
					currentTCB->remoteWnd    = 0;
    4d54:	839a      	strh	r2, [r3, #28]
					currentTCB->mss          = 0;
    4d56:	841a      	strh	r2, [r3, #32]
					nextState                = LISTEN;
    4d58:	2401      	movs	r4, #1
	bool     ret = false;
    4d5a:	2000      	movs	r0, #0
    4d5c:	e1cb      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
				TCP_Snd(currentTCB);
    4d5e:	4bbf      	ldr	r3, [pc, #764]	; (505c <TCP_FiniteStateMachine+0x6e4>)
    4d60:	4798      	blx	r3
	bool     ret = false;
    4d62:	2000      	movs	r0, #0
    4d64:	e1c7      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
			// invalid packet so drop it
			break;
		}
		break;
	case ESTABLISHED:
		switch (event) {
    4d66:	2a0c      	cmp	r2, #12
    4d68:	d900      	bls.n	4d6c <TCP_FiniteStateMachine+0x3f4>
    4d6a:	e1d4      	b.n	5116 <TCP_FiniteStateMachine+0x79e>
    4d6c:	0092      	lsls	r2, r2, #2
    4d6e:	4bbc      	ldr	r3, [pc, #752]	; (5060 <TCP_FiniteStateMachine+0x6e8>)
    4d70:	589b      	ldr	r3, [r3, r2]
    4d72:	469f      	mov	pc, r3
		case RCV_ACK:
			TCP_SyslogWrite("ESTABLISHED: rx_ack");
    4d74:	48bb      	ldr	r0, [pc, #748]	; (5064 <TCP_FiniteStateMachine+0x6ec>)
    4d76:	4bb7      	ldr	r3, [pc, #732]	; (5054 <TCP_FiniteStateMachine+0x6dc>)
    4d78:	4798      	blx	r3
			if (currentTCB->destIP == receivedRemoteAddress) {
    4d7a:	4bb7      	ldr	r3, [pc, #732]	; (5058 <TCP_FiniteStateMachine+0x6e0>)
    4d7c:	681b      	ldr	r3, [r3, #0]
    4d7e:	4aba      	ldr	r2, [pc, #744]	; (5068 <TCP_FiniteStateMachine+0x6f0>)
    4d80:	6992      	ldr	r2, [r2, #24]
    4d82:	6859      	ldr	r1, [r3, #4]
    4d84:	4291      	cmp	r1, r2
    4d86:	d001      	beq.n	4d8c <TCP_FiniteStateMachine+0x414>
	bool     ret = false;
    4d88:	2000      	movs	r0, #0
    4d8a:	e1b4      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
				// is sequence number OK?
				// remote ACK should be equal to header sequence number
				// we don't accept out of order packet (not enough memory)
				if (currentTCB->remoteAck == tcpHeader.sequenceNumber) {
    4d8c:	4ab6      	ldr	r2, [pc, #728]	; (5068 <TCP_FiniteStateMachine+0x6f0>)
    4d8e:	6851      	ldr	r1, [r2, #4]
    4d90:	691a      	ldr	r2, [r3, #16]
    4d92:	428a      	cmp	r2, r1
    4d94:	d001      	beq.n	4d9a <TCP_FiniteStateMachine+0x422>
	bool     ret = false;
    4d96:	2000      	movs	r0, #0
    4d98:	e1ad      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
					// This is a ACK packet only
					// check the ACK sequence
					// check if this is on already received Ack
					if (currentTCB->localLastAck < tcpHeader.ackNumber) {
    4d9a:	4ab3      	ldr	r2, [pc, #716]	; (5068 <TCP_FiniteStateMachine+0x6f0>)
    4d9c:	6890      	ldr	r0, [r2, #8]
    4d9e:	699a      	ldr	r2, [r3, #24]
    4da0:	4282      	cmp	r2, r0
    4da2:	d300      	bcc.n	4da6 <TCP_FiniteStateMachine+0x42e>
    4da4:	e1b9      	b.n	511a <TCP_FiniteStateMachine+0x7a2>
						// check how many bytes sent was acknowledged
						if ((currentTCB->localSeqno + 1) >= tcpHeader.ackNumber) {
    4da6:	695a      	ldr	r2, [r3, #20]
    4da8:	1c55      	adds	r5, r2, #1
    4daa:	42a8      	cmp	r0, r5
    4dac:	d822      	bhi.n	4df4 <TCP_FiniteStateMachine+0x47c>
							notAckBytes = currentTCB->localSeqno - tcpHeader.ackNumber;
    4dae:	b292      	uxth	r2, r2
    4db0:	b285      	uxth	r5, r0
    4db2:	1b52      	subs	r2, r2, r5
    4db4:	b292      	uxth	r2, r2

							// update the pointer for next TX
							currentTCB->txBufferPtr = currentTCB->txBufferPtr - notAckBytes;
    4db6:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    4db8:	1aad      	subs	r5, r5, r2
    4dba:	635d      	str	r5, [r3, #52]	; 0x34
							currentTCB->bytesToSend = currentTCB->bytesToSend + notAckBytes;
    4dbc:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
    4dbe:	1952      	adds	r2, r2, r5
    4dc0:	b292      	uxth	r2, r2
    4dc2:	871a      	strh	r2, [r3, #56]	; 0x38

							// Check if all TX buffer/data was acknowledged
							if (currentTCB->bytesToSend == 0) {
    4dc4:	2a00      	cmp	r2, #0
    4dc6:	d103      	bne.n	4dd0 <TCP_FiniteStateMachine+0x458>
								if (currentTCB->txBufState == TX_BUFF_IN_USE) {
    4dc8:	323a      	adds	r2, #58	; 0x3a
    4dca:	5c9a      	ldrb	r2, [r3, r2]
    4dcc:	2a02      	cmp	r2, #2
    4dce:	d008      	beq.n	4de2 <TCP_FiniteStateMachine+0x46a>
									currentTCB->txBufState = NO_BUFF;
								}
							}

							currentTCB->localLastAck = tcpHeader.ackNumber - 1;
    4dd0:	1e42      	subs	r2, r0, #1
    4dd2:	619a      	str	r2, [r3, #24]
							currentTCB->localSeqno   = tcpHeader.ackNumber;
    4dd4:	6158      	str	r0, [r3, #20]

							// check if the packet has payload
							if (rcvPayloadLen > 0) {
    4dd6:	4aa4      	ldr	r2, [pc, #656]	; (5068 <TCP_FiniteStateMachine+0x6f0>)
    4dd8:	8b90      	ldrh	r0, [r2, #28]
    4dda:	2800      	cmp	r0, #0
    4ddc:	d105      	bne.n	4dea <TCP_FiniteStateMachine+0x472>
	bool     ret = false;
    4dde:	2000      	movs	r0, #0
    4de0:	e189      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
									currentTCB->txBufState = NO_BUFF;
    4de2:	2500      	movs	r5, #0
    4de4:	3238      	adds	r2, #56	; 0x38
    4de6:	549d      	strb	r5, [r3, r2]
    4de8:	e7f2      	b.n	4dd0 <TCP_FiniteStateMachine+0x458>
								currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
    4dea:	60d9      	str	r1, [r3, #12]

								// copy the payload to the local buffer
								TCP_PayloadSave(rcvPayloadLen);
    4dec:	4b9f      	ldr	r3, [pc, #636]	; (506c <TCP_FiniteStateMachine+0x6f4>)
    4dee:	4798      	blx	r3
	bool     ret = false;
    4df0:	2000      	movs	r0, #0
    4df2:	e180      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
							}
						} else {
							// this is a wrong Ack
							// ACK a packet that wasn't transmitted
							// send a reset
							currentTCB->flags = TCP_RST_FLAG | TCP_ACK_FLAG;
    4df4:	2114      	movs	r1, #20
    4df6:	224d      	movs	r2, #77	; 0x4d
    4df8:	5499      	strb	r1, [r3, r2]
							if (TCP_Snd(currentTCB)) {
    4dfa:	0018      	movs	r0, r3
    4dfc:	4b97      	ldr	r3, [pc, #604]	; (505c <TCP_FiniteStateMachine+0x6e4>)
    4dfe:	4798      	blx	r3
    4e00:	2800      	cmp	r0, #0
    4e02:	d100      	bne.n	4e06 <TCP_FiniteStateMachine+0x48e>
    4e04:	e177      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
								nextState = CLOSED;
								TCB_Reset(currentTCB);
    4e06:	4b94      	ldr	r3, [pc, #592]	; (5058 <TCP_FiniteStateMachine+0x6e0>)
    4e08:	6818      	ldr	r0, [r3, #0]
    4e0a:	4b99      	ldr	r3, [pc, #612]	; (5070 <TCP_FiniteStateMachine+0x6f8>)
    4e0c:	4798      	blx	r3
								nextState = CLOSED;
    4e0e:	2400      	movs	r4, #0
	bool     ret = false;
    4e10:	0020      	movs	r0, r4
    4e12:	e170      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
					}
				}
			}
			break;
		case CLOSE:
			TCP_SyslogWrite("ESTABLISHED: close");
    4e14:	4897      	ldr	r0, [pc, #604]	; (5074 <TCP_FiniteStateMachine+0x6fc>)
    4e16:	4b8f      	ldr	r3, [pc, #572]	; (5054 <TCP_FiniteStateMachine+0x6dc>)
    4e18:	4798      	blx	r3
			currentTCB->flags = TCP_FIN_FLAG;
    4e1a:	4b8f      	ldr	r3, [pc, #572]	; (5058 <TCP_FiniteStateMachine+0x6e0>)
    4e1c:	6818      	ldr	r0, [r3, #0]
    4e1e:	2201      	movs	r2, #1
    4e20:	234d      	movs	r3, #77	; 0x4d
    4e22:	54c2      	strb	r2, [r0, r3]
			nextState         = FIN_WAIT_1;
			TCP_Snd(currentTCB);
    4e24:	4b8d      	ldr	r3, [pc, #564]	; (505c <TCP_FiniteStateMachine+0x6e4>)
    4e26:	4798      	blx	r3
			nextState         = FIN_WAIT_1;
    4e28:	2405      	movs	r4, #5
	bool     ret = false;
    4e2a:	2000      	movs	r0, #0
			break;
    4e2c:	e163      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
		case RCV_FINACK:
			TCP_SyslogWrite("ESTABLISHED: rx_finack");
    4e2e:	4892      	ldr	r0, [pc, #584]	; (5078 <TCP_FiniteStateMachine+0x700>)
    4e30:	4b88      	ldr	r3, [pc, #544]	; (5054 <TCP_FiniteStateMachine+0x6dc>)
    4e32:	4798      	blx	r3
		case RCV_FIN:
			TCP_SyslogWrite("ESTABLISHED: rx_fin");
    4e34:	4891      	ldr	r0, [pc, #580]	; (507c <TCP_FiniteStateMachine+0x704>)
    4e36:	4b87      	ldr	r3, [pc, #540]	; (5054 <TCP_FiniteStateMachine+0x6dc>)
    4e38:	4798      	blx	r3
			// ACK the current packet
			// TO DO  check if it's a valid packet
			currentTCB->localSeqno = tcpHeader.ackNumber;
    4e3a:	4b87      	ldr	r3, [pc, #540]	; (5058 <TCP_FiniteStateMachine+0x6e0>)
    4e3c:	6818      	ldr	r0, [r3, #0]
    4e3e:	4b8a      	ldr	r3, [pc, #552]	; (5068 <TCP_FiniteStateMachine+0x6f0>)
    4e40:	689b      	ldr	r3, [r3, #8]
    4e42:	6143      	str	r3, [r0, #20]
			currentTCB->remoteAck  = currentTCB->remoteAck + 1;
    4e44:	6903      	ldr	r3, [r0, #16]
    4e46:	3301      	adds	r3, #1
    4e48:	6103      	str	r3, [r0, #16]

			currentTCB->socketState        = SOCKET_CLOSING;
    4e4a:	2204      	movs	r2, #4
    4e4c:	234e      	movs	r3, #78	; 0x4e
    4e4e:	54c2      	strb	r2, [r0, r3]
			currentTCB->timeout            = TCP_START_TIMEOUT_VAL;
    4e50:	3b4c      	subs	r3, #76	; 0x4c
    4e52:	3244      	adds	r2, #68	; 0x44
    4e54:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutReloadValue = TCP_START_TIMEOUT_VAL;
    4e56:	3202      	adds	r2, #2
    4e58:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutsCount      = TCP_MAX_RETRIES;
    4e5a:	3a45      	subs	r2, #69	; 0x45
    4e5c:	334a      	adds	r3, #74	; 0x4a
    4e5e:	54c2      	strb	r2, [r0, r3]
			// JUMP over CLOSE_WAIT state and send one packet with FIN + ACK
			currentTCB->flags = TCP_FIN_FLAG | TCP_ACK_FLAG;
    4e60:	320c      	adds	r2, #12
    4e62:	3301      	adds	r3, #1
    4e64:	54c2      	strb	r2, [r0, r3]

			nextState = LAST_ACK;
			TCP_Snd(currentTCB);
    4e66:	4b7d      	ldr	r3, [pc, #500]	; (505c <TCP_FiniteStateMachine+0x6e4>)
    4e68:	4798      	blx	r3
			nextState = LAST_ACK;
    4e6a:	2409      	movs	r4, #9
	bool     ret = false;
    4e6c:	2000      	movs	r0, #0
			break;
    4e6e:	e142      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
		case RCV_RST:
		case RCV_RSTACK:
			nextState = CLOSED;
			TCB_Reset(currentTCB);
    4e70:	4b7f      	ldr	r3, [pc, #508]	; (5070 <TCP_FiniteStateMachine+0x6f8>)
    4e72:	4798      	blx	r3
			nextState = CLOSED;
    4e74:	2400      	movs	r4, #0
	bool     ret = false;
    4e76:	2000      	movs	r0, #0
			break;
    4e78:	e13d      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
		case TIMEOUT:
			TCP_SyslogWrite("ESTABLISHED:  timeout");
    4e7a:	4881      	ldr	r0, [pc, #516]	; (5080 <TCP_FiniteStateMachine+0x708>)
    4e7c:	4b75      	ldr	r3, [pc, #468]	; (5054 <TCP_FiniteStateMachine+0x6dc>)
    4e7e:	4798      	blx	r3
			if (currentTCB->timeoutsCount) {
    4e80:	4b75      	ldr	r3, [pc, #468]	; (5058 <TCP_FiniteStateMachine+0x6e0>)
    4e82:	6818      	ldr	r0, [r3, #0]
    4e84:	234c      	movs	r3, #76	; 0x4c
    4e86:	5cc3      	ldrb	r3, [r0, r3]
    4e88:	2b00      	cmp	r3, #0
    4e8a:	d10e      	bne.n	4eaa <TCP_FiniteStateMachine+0x532>
				TCP_Snd(currentTCB);
			} else {
				// reset the connection if there is no reply
				currentTCB->flags = TCP_RST_FLAG;
    4e8c:	2204      	movs	r2, #4
    4e8e:	234d      	movs	r3, #77	; 0x4d
    4e90:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    4e92:	4b72      	ldr	r3, [pc, #456]	; (505c <TCP_FiniteStateMachine+0x6e4>)
    4e94:	4798      	blx	r3
    4e96:	2800      	cmp	r0, #0
    4e98:	d100      	bne.n	4e9c <TCP_FiniteStateMachine+0x524>
    4e9a:	e12c      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
					nextState = CLOSE;
					TCB_Reset(currentTCB);
    4e9c:	4b6e      	ldr	r3, [pc, #440]	; (5058 <TCP_FiniteStateMachine+0x6e0>)
    4e9e:	6818      	ldr	r0, [r3, #0]
    4ea0:	4b73      	ldr	r3, [pc, #460]	; (5070 <TCP_FiniteStateMachine+0x6f8>)
    4ea2:	4798      	blx	r3
					nextState = CLOSE;
    4ea4:	2400      	movs	r4, #0
	bool     ret = false;
    4ea6:	2000      	movs	r0, #0
    4ea8:	e125      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
				TCP_Snd(currentTCB);
    4eaa:	4b6c      	ldr	r3, [pc, #432]	; (505c <TCP_FiniteStateMachine+0x6e4>)
    4eac:	4798      	blx	r3
	bool     ret = false;
    4eae:	2000      	movs	r0, #0
    4eb0:	e121      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
		default:
			break;
		}
		break;
	case FIN_WAIT_1:
		switch (event) {
    4eb2:	2a06      	cmp	r2, #6
    4eb4:	d02e      	beq.n	4f14 <TCP_FiniteStateMachine+0x59c>
    4eb6:	d91c      	bls.n	4ef2 <TCP_FiniteStateMachine+0x57a>
    4eb8:	2a07      	cmp	r2, #7
    4eba:	d03b      	beq.n	4f34 <TCP_FiniteStateMachine+0x5bc>
    4ebc:	2a0c      	cmp	r2, #12
    4ebe:	d000      	beq.n	4ec2 <TCP_FiniteStateMachine+0x54a>
    4ec0:	e12d      	b.n	511e <TCP_FiniteStateMachine+0x7a6>
			if (TCP_Snd(currentTCB)) {
				nextState = TIME_WAIT;
			}
			break;
		case TIMEOUT:
			TCP_SyslogWrite("FIN_WAIT_1:  timeout");
    4ec2:	4870      	ldr	r0, [pc, #448]	; (5084 <TCP_FiniteStateMachine+0x70c>)
    4ec4:	4b63      	ldr	r3, [pc, #396]	; (5054 <TCP_FiniteStateMachine+0x6dc>)
    4ec6:	4798      	blx	r3
			if (currentTCB->timeoutsCount) {
    4ec8:	4b63      	ldr	r3, [pc, #396]	; (5058 <TCP_FiniteStateMachine+0x6e0>)
    4eca:	6818      	ldr	r0, [r3, #0]
    4ecc:	234c      	movs	r3, #76	; 0x4c
    4ece:	5cc3      	ldrb	r3, [r0, r3]
    4ed0:	2b00      	cmp	r3, #0
    4ed2:	d13f      	bne.n	4f54 <TCP_FiniteStateMachine+0x5dc>
				TCP_Snd(currentTCB);
			} else {
				// just reset the connection if there is no reply
				currentTCB->flags = TCP_RST_FLAG;
    4ed4:	2204      	movs	r2, #4
    4ed6:	234d      	movs	r3, #77	; 0x4d
    4ed8:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    4eda:	4b60      	ldr	r3, [pc, #384]	; (505c <TCP_FiniteStateMachine+0x6e4>)
    4edc:	4798      	blx	r3
    4ede:	2800      	cmp	r0, #0
    4ee0:	d100      	bne.n	4ee4 <TCP_FiniteStateMachine+0x56c>
    4ee2:	e108      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
					nextState = CLOSE;
					TCB_Reset(currentTCB);
    4ee4:	4b5c      	ldr	r3, [pc, #368]	; (5058 <TCP_FiniteStateMachine+0x6e0>)
    4ee6:	6818      	ldr	r0, [r3, #0]
    4ee8:	4b61      	ldr	r3, [pc, #388]	; (5070 <TCP_FiniteStateMachine+0x6f8>)
    4eea:	4798      	blx	r3
					nextState = CLOSE;
    4eec:	2400      	movs	r4, #0
	bool     ret = false;
    4eee:	2000      	movs	r0, #0
    4ef0:	e101      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
		switch (event) {
    4ef2:	2a04      	cmp	r2, #4
    4ef4:	d000      	beq.n	4ef8 <TCP_FiniteStateMachine+0x580>
    4ef6:	e112      	b.n	511e <TCP_FiniteStateMachine+0x7a6>
			TCP_SyslogWrite("FIN_WAIT_1: rx_ack");
    4ef8:	4863      	ldr	r0, [pc, #396]	; (5088 <TCP_FiniteStateMachine+0x710>)
    4efa:	4b56      	ldr	r3, [pc, #344]	; (5054 <TCP_FiniteStateMachine+0x6dc>)
    4efc:	4798      	blx	r3
			currentTCB->timeout       = TCP_START_TIMEOUT_VAL;
    4efe:	4b56      	ldr	r3, [pc, #344]	; (5058 <TCP_FiniteStateMachine+0x6e0>)
    4f00:	681b      	ldr	r3, [r3, #0]
    4f02:	2102      	movs	r1, #2
    4f04:	2248      	movs	r2, #72	; 0x48
    4f06:	5299      	strh	r1, [r3, r2]
			currentTCB->timeoutsCount = 1;
    4f08:	3901      	subs	r1, #1
    4f0a:	3204      	adds	r2, #4
    4f0c:	5499      	strb	r1, [r3, r2]
			nextState                 = FIN_WAIT_2;
    4f0e:	2406      	movs	r4, #6
	bool     ret = false;
    4f10:	2000      	movs	r0, #0
			break;
    4f12:	e0f0      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
			TCP_SyslogWrite("FIN_WAIT_1: rx_fin");
    4f14:	485d      	ldr	r0, [pc, #372]	; (508c <TCP_FiniteStateMachine+0x714>)
    4f16:	4b4f      	ldr	r3, [pc, #316]	; (5054 <TCP_FiniteStateMachine+0x6dc>)
    4f18:	4798      	blx	r3
			currentTCB->flags = TCP_ACK_FLAG;
    4f1a:	4b4f      	ldr	r3, [pc, #316]	; (5058 <TCP_FiniteStateMachine+0x6e0>)
    4f1c:	6818      	ldr	r0, [r3, #0]
    4f1e:	2210      	movs	r2, #16
    4f20:	234d      	movs	r3, #77	; 0x4d
    4f22:	54c2      	strb	r2, [r0, r3]
			if (TCP_Snd(currentTCB)) {
    4f24:	4b4d      	ldr	r3, [pc, #308]	; (505c <TCP_FiniteStateMachine+0x6e4>)
    4f26:	4798      	blx	r3
    4f28:	2800      	cmp	r0, #0
    4f2a:	d100      	bne.n	4f2e <TCP_FiniteStateMachine+0x5b6>
    4f2c:	e0e3      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
				nextState = CLOSING;
    4f2e:	2408      	movs	r4, #8
	bool     ret = false;
    4f30:	2000      	movs	r0, #0
    4f32:	e0e0      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
			TCP_SyslogWrite("FIN_WAIT_1: rx_finack");
    4f34:	4856      	ldr	r0, [pc, #344]	; (5090 <TCP_FiniteStateMachine+0x718>)
    4f36:	4b47      	ldr	r3, [pc, #284]	; (5054 <TCP_FiniteStateMachine+0x6dc>)
    4f38:	4798      	blx	r3
			currentTCB->flags = TCP_ACK_FLAG;
    4f3a:	4b47      	ldr	r3, [pc, #284]	; (5058 <TCP_FiniteStateMachine+0x6e0>)
    4f3c:	6818      	ldr	r0, [r3, #0]
    4f3e:	2210      	movs	r2, #16
    4f40:	234d      	movs	r3, #77	; 0x4d
    4f42:	54c2      	strb	r2, [r0, r3]
			if (TCP_Snd(currentTCB)) {
    4f44:	4b45      	ldr	r3, [pc, #276]	; (505c <TCP_FiniteStateMachine+0x6e4>)
    4f46:	4798      	blx	r3
    4f48:	2800      	cmp	r0, #0
    4f4a:	d100      	bne.n	4f4e <TCP_FiniteStateMachine+0x5d6>
    4f4c:	e0d3      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
				nextState = TIME_WAIT;
    4f4e:	240a      	movs	r4, #10
	bool     ret = false;
    4f50:	2000      	movs	r0, #0
    4f52:	e0d0      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
				TCP_Snd(currentTCB);
    4f54:	4b41      	ldr	r3, [pc, #260]	; (505c <TCP_FiniteStateMachine+0x6e4>)
    4f56:	4798      	blx	r3
	bool     ret = false;
    4f58:	2000      	movs	r0, #0
    4f5a:	e0cc      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
		default:
			break;
		}
		break;
	case FIN_WAIT_2:
		switch (event) {
    4f5c:	2a06      	cmp	r2, #6
    4f5e:	d003      	beq.n	4f68 <TCP_FiniteStateMachine+0x5f0>
    4f60:	2a0c      	cmp	r2, #12
    4f62:	d00e      	beq.n	4f82 <TCP_FiniteStateMachine+0x60a>
	bool     ret = false;
    4f64:	2000      	movs	r0, #0
    4f66:	e0c6      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
		case RCV_FIN:
			TCP_SyslogWrite("FIN_WAIT_2: rx_fin");
    4f68:	484a      	ldr	r0, [pc, #296]	; (5094 <TCP_FiniteStateMachine+0x71c>)
    4f6a:	4b3a      	ldr	r3, [pc, #232]	; (5054 <TCP_FiniteStateMachine+0x6dc>)
    4f6c:	4798      	blx	r3
			if (TCP_Snd(currentTCB)) {
    4f6e:	4b3a      	ldr	r3, [pc, #232]	; (5058 <TCP_FiniteStateMachine+0x6e0>)
    4f70:	6818      	ldr	r0, [r3, #0]
    4f72:	4b3a      	ldr	r3, [pc, #232]	; (505c <TCP_FiniteStateMachine+0x6e4>)
    4f74:	4798      	blx	r3
    4f76:	2800      	cmp	r0, #0
    4f78:	d100      	bne.n	4f7c <TCP_FiniteStateMachine+0x604>
    4f7a:	e0bc      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
				nextState = TIME_WAIT;
    4f7c:	240a      	movs	r4, #10
	bool     ret = false;
    4f7e:	2000      	movs	r0, #0
    4f80:	e0b9      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
			}
			break;
		case TIMEOUT:
			TCP_SyslogWrite("FIN_WAIT_2:  timeout");
    4f82:	4845      	ldr	r0, [pc, #276]	; (5098 <TCP_FiniteStateMachine+0x720>)
    4f84:	4b33      	ldr	r3, [pc, #204]	; (5054 <TCP_FiniteStateMachine+0x6dc>)
    4f86:	4798      	blx	r3
			if (currentTCB->timeoutsCount) {
    4f88:	4b33      	ldr	r3, [pc, #204]	; (5058 <TCP_FiniteStateMachine+0x6e0>)
    4f8a:	6818      	ldr	r0, [r3, #0]
    4f8c:	234c      	movs	r3, #76	; 0x4c
    4f8e:	5cc3      	ldrb	r3, [r0, r3]
    4f90:	2b00      	cmp	r3, #0
    4f92:	d10e      	bne.n	4fb2 <TCP_FiniteStateMachine+0x63a>
				TCP_Snd(currentTCB);
			} else {
				// just reset the connection if there is no reply
				currentTCB->flags = TCP_RST_FLAG;
    4f94:	2204      	movs	r2, #4
    4f96:	234d      	movs	r3, #77	; 0x4d
    4f98:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    4f9a:	4b30      	ldr	r3, [pc, #192]	; (505c <TCP_FiniteStateMachine+0x6e4>)
    4f9c:	4798      	blx	r3
    4f9e:	2800      	cmp	r0, #0
    4fa0:	d100      	bne.n	4fa4 <TCP_FiniteStateMachine+0x62c>
    4fa2:	e0a8      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
					nextState = CLOSE;
					TCB_Reset(currentTCB);
    4fa4:	4b2c      	ldr	r3, [pc, #176]	; (5058 <TCP_FiniteStateMachine+0x6e0>)
    4fa6:	6818      	ldr	r0, [r3, #0]
    4fa8:	4b31      	ldr	r3, [pc, #196]	; (5070 <TCP_FiniteStateMachine+0x6f8>)
    4faa:	4798      	blx	r3
					nextState = CLOSE;
    4fac:	2400      	movs	r4, #0
	bool     ret = false;
    4fae:	2000      	movs	r0, #0
    4fb0:	e0a1      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
				TCP_Snd(currentTCB);
    4fb2:	4b2a      	ldr	r3, [pc, #168]	; (505c <TCP_FiniteStateMachine+0x6e4>)
    4fb4:	4798      	blx	r3
	bool     ret = false;
    4fb6:	2000      	movs	r0, #0
    4fb8:	e09d      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
		break;
	case CLOSE_WAIT:
		// This state is defined in RFC, but is not used in the application
		break;
	case CLOSING:
		switch (event) {
    4fba:	2a04      	cmp	r2, #4
    4fbc:	d001      	beq.n	4fc2 <TCP_FiniteStateMachine+0x64a>
	bool     ret = false;
    4fbe:	2000      	movs	r0, #0
    4fc0:	e099      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
		case RCV_ACK:
			TCP_SyslogWrite("CLOSING: rx_ack");
    4fc2:	4836      	ldr	r0, [pc, #216]	; (509c <TCP_FiniteStateMachine+0x724>)
    4fc4:	4b23      	ldr	r3, [pc, #140]	; (5054 <TCP_FiniteStateMachine+0x6dc>)
    4fc6:	4798      	blx	r3
			nextState = TIME_WAIT;
    4fc8:	240a      	movs	r4, #10
	bool     ret = false;
    4fca:	2000      	movs	r0, #0
			break;
    4fcc:	e093      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
			break;
		}
		break;
	case LAST_ACK:
		// check if the packet belongs to the curent TCB
		switch (event) {
    4fce:	2a07      	cmp	r2, #7
    4fd0:	d005      	beq.n	4fde <TCP_FiniteStateMachine+0x666>
    4fd2:	2a0c      	cmp	r2, #12
    4fd4:	d01b      	beq.n	500e <TCP_FiniteStateMachine+0x696>
    4fd6:	2a04      	cmp	r2, #4
    4fd8:	d001      	beq.n	4fde <TCP_FiniteStateMachine+0x666>
	bool     ret = false;
    4fda:	2000      	movs	r0, #0
    4fdc:	e08b      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
		case RCV_FINACK:
		case RCV_ACK:
			if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPort == tcpHeader.sourcePort)) {
    4fde:	4b22      	ldr	r3, [pc, #136]	; (5068 <TCP_FiniteStateMachine+0x6f0>)
    4fe0:	699b      	ldr	r3, [r3, #24]
    4fe2:	6842      	ldr	r2, [r0, #4]
    4fe4:	429a      	cmp	r2, r3
    4fe6:	d001      	beq.n	4fec <TCP_FiniteStateMachine+0x674>
	bool     ret = false;
    4fe8:	2000      	movs	r0, #0
    4fea:	e084      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
			if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPort == tcpHeader.sourcePort)) {
    4fec:	8902      	ldrh	r2, [r0, #8]
    4fee:	4b1e      	ldr	r3, [pc, #120]	; (5068 <TCP_FiniteStateMachine+0x6f0>)
    4ff0:	881b      	ldrh	r3, [r3, #0]
    4ff2:	429a      	cmp	r2, r3
    4ff4:	d001      	beq.n	4ffa <TCP_FiniteStateMachine+0x682>
	bool     ret = false;
    4ff6:	2000      	movs	r0, #0
    4ff8:	e07d      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
				TCP_SyslogWrite("LAST_ACK: rx_ack");
    4ffa:	4829      	ldr	r0, [pc, #164]	; (50a0 <TCP_FiniteStateMachine+0x728>)
    4ffc:	4b15      	ldr	r3, [pc, #84]	; (5054 <TCP_FiniteStateMachine+0x6dc>)
    4ffe:	4798      	blx	r3
				nextState = CLOSED;
				TCB_Reset(currentTCB);
    5000:	4b15      	ldr	r3, [pc, #84]	; (5058 <TCP_FiniteStateMachine+0x6e0>)
    5002:	6818      	ldr	r0, [r3, #0]
    5004:	4b1a      	ldr	r3, [pc, #104]	; (5070 <TCP_FiniteStateMachine+0x6f8>)
    5006:	4798      	blx	r3
				nextState = CLOSED;
    5008:	2400      	movs	r4, #0
	bool     ret = false;
    500a:	2000      	movs	r0, #0
    500c:	e073      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
			}
			break;
		case TIMEOUT:
			if (currentTCB->timeoutsCount) {
    500e:	234c      	movs	r3, #76	; 0x4c
    5010:	5cc3      	ldrb	r3, [r0, r3]
    5012:	2b00      	cmp	r3, #0
    5014:	d10d      	bne.n	5032 <TCP_FiniteStateMachine+0x6ba>
				TCP_Snd(currentTCB);
			} else {
				// just reset the connection if there is no reply
				currentTCB->flags = TCP_RST_FLAG;
    5016:	2204      	movs	r2, #4
    5018:	234d      	movs	r3, #77	; 0x4d
    501a:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    501c:	4b0f      	ldr	r3, [pc, #60]	; (505c <TCP_FiniteStateMachine+0x6e4>)
    501e:	4798      	blx	r3
    5020:	2800      	cmp	r0, #0
    5022:	d068      	beq.n	50f6 <TCP_FiniteStateMachine+0x77e>
					nextState = CLOSE;
					TCB_Reset(currentTCB);
    5024:	4b0c      	ldr	r3, [pc, #48]	; (5058 <TCP_FiniteStateMachine+0x6e0>)
    5026:	6818      	ldr	r0, [r3, #0]
    5028:	4b11      	ldr	r3, [pc, #68]	; (5070 <TCP_FiniteStateMachine+0x6f8>)
    502a:	4798      	blx	r3
					nextState = CLOSE;
    502c:	2400      	movs	r4, #0
	bool     ret = false;
    502e:	2000      	movs	r0, #0
    5030:	e061      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
				TCP_Snd(currentTCB);
    5032:	4b0a      	ldr	r3, [pc, #40]	; (505c <TCP_FiniteStateMachine+0x6e4>)
    5034:	4798      	blx	r3
	bool     ret = false;
    5036:	2000      	movs	r0, #0
    5038:	e05d      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
		default:
			break;
		}
		break;
	case TIME_WAIT:
		TCP_SyslogWrite("Time Wait");
    503a:	481a      	ldr	r0, [pc, #104]	; (50a4 <TCP_FiniteStateMachine+0x72c>)
    503c:	4b05      	ldr	r3, [pc, #20]	; (5054 <TCP_FiniteStateMachine+0x6dc>)
    503e:	4798      	blx	r3
		nextState = CLOSED;
		TCB_Reset(currentTCB);
    5040:	4b05      	ldr	r3, [pc, #20]	; (5058 <TCP_FiniteStateMachine+0x6e0>)
    5042:	6818      	ldr	r0, [r3, #0]
    5044:	4b0a      	ldr	r3, [pc, #40]	; (5070 <TCP_FiniteStateMachine+0x6f8>)
    5046:	4798      	blx	r3
		nextState = CLOSED;
    5048:	2400      	movs	r4, #0
	bool     ret = false;
    504a:	2000      	movs	r0, #0
		break;
    504c:	e053      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
    504e:	46c0      	nop			; (mov r8, r8)
    5050:	000071e0 	.word	0x000071e0
    5054:	000045cb 	.word	0x000045cb
    5058:	20003f3c 	.word	0x20003f3c
    505c:	000046a5 	.word	0x000046a5
    5060:	0000703c 	.word	0x0000703c
    5064:	000071f8 	.word	0x000071f8
    5068:	20000878 	.word	0x20000878
    506c:	00004925 	.word	0x00004925
    5070:	00004639 	.word	0x00004639
    5074:	0000720c 	.word	0x0000720c
    5078:	00007220 	.word	0x00007220
    507c:	00007238 	.word	0x00007238
    5080:	0000724c 	.word	0x0000724c
    5084:	000072a4 	.word	0x000072a4
    5088:	00007278 	.word	0x00007278
    508c:	00007264 	.word	0x00007264
    5090:	0000728c 	.word	0x0000728c
    5094:	000072bc 	.word	0x000072bc
    5098:	000072d0 	.word	0x000072d0
    509c:	000072e8 	.word	0x000072e8
    50a0:	000072f8 	.word	0x000072f8
    50a4:	0000730c 	.word	0x0000730c
	case CLOSED:
		switch (event) {
    50a8:	2a01      	cmp	r2, #1
    50aa:	d003      	beq.n	50b4 <TCP_FiniteStateMachine+0x73c>
    50ac:	2a02      	cmp	r2, #2
    50ae:	d016      	beq.n	50de <TCP_FiniteStateMachine+0x766>
	bool     ret = false;
    50b0:	2000      	movs	r0, #0
    50b2:	e020      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
		case ACTIVE_OPEN:
			TCP_SyslogWrite("CLOSED: active_open");
    50b4:	481b      	ldr	r0, [pc, #108]	; (5124 <TCP_FiniteStateMachine+0x7ac>)
    50b6:	4b1c      	ldr	r3, [pc, #112]	; (5128 <TCP_FiniteStateMachine+0x7b0>)
    50b8:	4798      	blx	r3
			// create and send a SYN packet
			currentTCB->timeout            = TCP_START_TIMEOUT_VAL;
    50ba:	4b1c      	ldr	r3, [pc, #112]	; (512c <TCP_FiniteStateMachine+0x7b4>)
    50bc:	6818      	ldr	r0, [r3, #0]
    50be:	2302      	movs	r3, #2
    50c0:	2248      	movs	r2, #72	; 0x48
    50c2:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutReloadValue = TCP_START_TIMEOUT_VAL;
    50c4:	3202      	adds	r2, #2
    50c6:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutsCount      = TCP_MAX_SYN_RETRIES;
    50c8:	3a47      	subs	r2, #71	; 0x47
    50ca:	334a      	adds	r3, #74	; 0x4a
    50cc:	54c2      	strb	r2, [r0, r3]
			currentTCB->flags              = TCP_SYN_FLAG;
    50ce:	3301      	adds	r3, #1
    50d0:	2202      	movs	r2, #2
    50d2:	54c2      	strb	r2, [r0, r3]
			TCP_Snd(currentTCB);
    50d4:	4b16      	ldr	r3, [pc, #88]	; (5130 <TCP_FiniteStateMachine+0x7b8>)
    50d6:	4798      	blx	r3
			nextState = SYN_SENT;
    50d8:	2402      	movs	r4, #2
			ret       = true;
    50da:	2001      	movs	r0, #1
			break;
    50dc:	e00b      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
		case PASIVE_OPEN:
			TCP_SyslogWrite("CLOSED: passive_open");
    50de:	4815      	ldr	r0, [pc, #84]	; (5134 <TCP_FiniteStateMachine+0x7bc>)
    50e0:	4b11      	ldr	r3, [pc, #68]	; (5128 <TCP_FiniteStateMachine+0x7b0>)
    50e2:	4798      	blx	r3
			currentTCB->destIP   = 0;
    50e4:	4b11      	ldr	r3, [pc, #68]	; (512c <TCP_FiniteStateMachine+0x7b4>)
    50e6:	681b      	ldr	r3, [r3, #0]
    50e8:	2200      	movs	r2, #0
    50ea:	605a      	str	r2, [r3, #4]
			currentTCB->destPort = 0;
    50ec:	811a      	strh	r2, [r3, #8]
			nextState            = LISTEN;
    50ee:	2401      	movs	r4, #1
			ret                  = true;
    50f0:	2001      	movs	r0, #1
			break;
    50f2:	e000      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
	bool     ret = false;
    50f4:	2000      	movs	r0, #0
		}
		break;
	default:
		break;
	}
	currentTCB->connectionEvent = DUMMY_NOP; // we are handling the event...
    50f6:	4b0d      	ldr	r3, [pc, #52]	; (512c <TCP_FiniteStateMachine+0x7b4>)
    50f8:	681b      	ldr	r3, [r3, #0]
    50fa:	210d      	movs	r1, #13
    50fc:	223c      	movs	r2, #60	; 0x3c
    50fe:	5499      	strb	r1, [r3, r2]
	currentTCB->fsmState        = nextState;
    5100:	3a01      	subs	r2, #1
    5102:	549c      	strb	r4, [r3, r2]
	return ret;
}
    5104:	bd70      	pop	{r4, r5, r6, pc}
	bool     ret = false;
    5106:	2000      	movs	r0, #0
    5108:	e7f5      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
    510a:	2000      	movs	r0, #0
    510c:	e7f3      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
    510e:	2000      	movs	r0, #0
    5110:	e7f1      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
    5112:	2000      	movs	r0, #0
    5114:	e7ef      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
    5116:	2000      	movs	r0, #0
    5118:	e7ed      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
    511a:	2000      	movs	r0, #0
    511c:	e7eb      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
    511e:	2000      	movs	r0, #0
    5120:	e7e9      	b.n	50f6 <TCP_FiniteStateMachine+0x77e>
    5122:	46c0      	nop			; (mov r8, r8)
    5124:	00007318 	.word	0x00007318
    5128:	000045cb 	.word	0x000045cb
    512c:	20003f3c 	.word	0x20003f3c
    5130:	000046a5 	.word	0x000046a5
    5134:	0000732c 	.word	0x0000732c

00005138 <TCP_Recv>:
{
    5138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    513a:	0005      	movs	r5, r0
    513c:	000c      	movs	r4, r1
	receivedRemoteAddress = 0;
    513e:	4e5c      	ldr	r6, [pc, #368]	; (52b0 <TCP_Recv+0x178>)
    5140:	2700      	movs	r7, #0
    5142:	61b7      	str	r7, [r6, #24]
	rcvPayloadLen         = 0;
    5144:	83b7      	strh	r7, [r6, #28]
	ETH_ReadBlock((char *)&tcpHeader, sizeof(tcpHeader_t));
    5146:	2114      	movs	r1, #20
    5148:	0030      	movs	r0, r6
    514a:	4b5a      	ldr	r3, [pc, #360]	; (52b4 <TCP_Recv+0x17c>)
    514c:	4798      	blx	r3
	currentTCB = NULL;
    514e:	4b5a      	ldr	r3, [pc, #360]	; (52b8 <TCP_Recv+0x180>)
    5150:	601f      	str	r7, [r3, #0]
	if ((tcpHeader.destPort != 0) && (tcpHeader.sourcePort != 0)) {
    5152:	8873      	ldrh	r3, [r6, #2]
    5154:	2b00      	cmp	r3, #0
    5156:	d062      	beq.n	521e <TCP_Recv+0xe6>
    5158:	4a55      	ldr	r2, [pc, #340]	; (52b0 <TCP_Recv+0x178>)
    515a:	8812      	ldrh	r2, [r2, #0]
    515c:	2a00      	cmp	r2, #0
    515e:	d05e      	beq.n	521e <TCP_Recv+0xe6>
		tcpHeader.sourcePort = ntohs(tcpHeader.sourcePort);
    5160:	0a16      	lsrs	r6, r2, #8
    5162:	0212      	lsls	r2, r2, #8
    5164:	4316      	orrs	r6, r2
    5166:	b2b6      	uxth	r6, r6
    5168:	4a51      	ldr	r2, [pc, #324]	; (52b0 <TCP_Recv+0x178>)
    516a:	8016      	strh	r6, [r2, #0]
		tcpHeader.destPort   = ntohs(tcpHeader.destPort);
    516c:	0a18      	lsrs	r0, r3, #8
    516e:	021b      	lsls	r3, r3, #8
    5170:	4318      	orrs	r0, r3
    5172:	b280      	uxth	r0, r0
    5174:	8050      	strh	r0, [r2, #2]
		tcbPtr = tcbList;
    5176:	4b51      	ldr	r3, [pc, #324]	; (52bc <TCP_Recv+0x184>)
    5178:	681a      	ldr	r2, [r3, #0]
	socklistsize_t count = 0;
    517a:	2300      	movs	r3, #0
		while ((tcbPtr != NULL) && (count < tcbListSize)) {
    517c:	2a00      	cmp	r2, #0
    517e:	d00d      	beq.n	519c <TCP_Recv+0x64>
    5180:	494f      	ldr	r1, [pc, #316]	; (52c0 <TCP_Recv+0x188>)
    5182:	7809      	ldrb	r1, [r1, #0]
    5184:	b249      	sxtb	r1, r1
    5186:	428b      	cmp	r3, r1
    5188:	da08      	bge.n	519c <TCP_Recv+0x64>
			if (tcpHeader.destPort == tcbPtr->localPort) {
    518a:	8811      	ldrh	r1, [r2, #0]
    518c:	4288      	cmp	r0, r1
    518e:	d003      	beq.n	5198 <TCP_Recv+0x60>
				tcbPtr = tcbPtr->nextTCB;
    5190:	6c12      	ldr	r2, [r2, #64]	; 0x40
				count++;
    5192:	3301      	adds	r3, #1
    5194:	b25b      	sxtb	r3, r3
    5196:	e7f1      	b.n	517c <TCP_Recv+0x44>
				currentTCB = tcbPtr;
    5198:	4b47      	ldr	r3, [pc, #284]	; (52b8 <TCP_Recv+0x180>)
    519a:	601a      	str	r2, [r3, #0]
		if (currentTCB != NULL) {
    519c:	4b46      	ldr	r3, [pc, #280]	; (52b8 <TCP_Recv+0x180>)
    519e:	681b      	ldr	r3, [r3, #0]
    51a0:	2b00      	cmp	r3, #0
    51a2:	d03c      	beq.n	521e <TCP_Recv+0xe6>
			if ((tcpHeader.sourcePort == currentTCB->destPort) || (currentTCB->destIP == 0)) {
    51a4:	891a      	ldrh	r2, [r3, #8]
    51a6:	4296      	cmp	r6, r2
    51a8:	d002      	beq.n	51b0 <TCP_Recv+0x78>
    51aa:	685b      	ldr	r3, [r3, #4]
    51ac:	2b00      	cmp	r3, #0
    51ae:	d136      	bne.n	521e <TCP_Recv+0xe6>
				receivedRemoteAddress = remoteAddress;
    51b0:	4a3f      	ldr	r2, [pc, #252]	; (52b0 <TCP_Recv+0x178>)
    51b2:	6195      	str	r5, [r2, #24]
				rcvPayloadLen         = length - (uint16_t)(tcpHeader.dataOffset << 2);
    51b4:	7b13      	ldrb	r3, [r2, #12]
    51b6:	091b      	lsrs	r3, r3, #4
    51b8:	009b      	lsls	r3, r3, #2
    51ba:	1ae4      	subs	r4, r4, r3
    51bc:	8394      	strh	r4, [r2, #28]
				if (TCP_ParseTCPOptions() == true) {
    51be:	4b41      	ldr	r3, [pc, #260]	; (52c4 <TCP_Recv+0x18c>)
    51c0:	4798      	blx	r3
    51c2:	2800      	cmp	r0, #0
    51c4:	d100      	bne.n	51c8 <TCP_Recv+0x90>
    51c6:	e06f      	b.n	52a8 <TCP_Recv+0x170>
					if (tcpHeader.syn) {
    51c8:	4b39      	ldr	r3, [pc, #228]	; (52b0 <TCP_Recv+0x178>)
    51ca:	7b5b      	ldrb	r3, [r3, #13]
    51cc:	079a      	lsls	r2, r3, #30
    51ce:	d530      	bpl.n	5232 <TCP_Recv+0xfa>
						if (tcpHeader.ack) {
    51d0:	06db      	lsls	r3, r3, #27
    51d2:	d525      	bpl.n	5220 <TCP_Recv+0xe8>
							TCP_SyslogWrite("found syn&ack");
    51d4:	483c      	ldr	r0, [pc, #240]	; (52c8 <TCP_Recv+0x190>)
    51d6:	4b3d      	ldr	r3, [pc, #244]	; (52cc <TCP_Recv+0x194>)
    51d8:	4798      	blx	r3
							currentTCB->connectionEvent = RCV_SYNACK;
    51da:	4b37      	ldr	r3, [pc, #220]	; (52b8 <TCP_Recv+0x180>)
    51dc:	681a      	ldr	r2, [r3, #0]
    51de:	2105      	movs	r1, #5
    51e0:	233c      	movs	r3, #60	; 0x3c
    51e2:	54d1      	strb	r1, [r2, r3]
					tcpHeader.ackNumber      = ntohl(tcpHeader.ackNumber);
    51e4:	4832      	ldr	r0, [pc, #200]	; (52b0 <TCP_Recv+0x178>)
    51e6:	6881      	ldr	r1, [r0, #8]
    51e8:	0e0a      	lsrs	r2, r1, #24
    51ea:	0a0b      	lsrs	r3, r1, #8
    51ec:	27ff      	movs	r7, #255	; 0xff
    51ee:	023f      	lsls	r7, r7, #8
    51f0:	403b      	ands	r3, r7
    51f2:	431a      	orrs	r2, r3
    51f4:	020e      	lsls	r6, r1, #8
    51f6:	25ff      	movs	r5, #255	; 0xff
    51f8:	042d      	lsls	r5, r5, #16
    51fa:	402e      	ands	r6, r5
    51fc:	4332      	orrs	r2, r6
    51fe:	0609      	lsls	r1, r1, #24
    5200:	430a      	orrs	r2, r1
    5202:	6082      	str	r2, [r0, #8]
					tcpHeader.sequenceNumber = ntohl(tcpHeader.sequenceNumber);
    5204:	6842      	ldr	r2, [r0, #4]
    5206:	0e13      	lsrs	r3, r2, #24
    5208:	0a14      	lsrs	r4, r2, #8
    520a:	403c      	ands	r4, r7
    520c:	4323      	orrs	r3, r4
    520e:	0211      	lsls	r1, r2, #8
    5210:	4029      	ands	r1, r5
    5212:	430b      	orrs	r3, r1
    5214:	0612      	lsls	r2, r2, #24
    5216:	4313      	orrs	r3, r2
    5218:	6043      	str	r3, [r0, #4]
					TCP_FiniteStateMachine();
    521a:	4b2d      	ldr	r3, [pc, #180]	; (52d0 <TCP_Recv+0x198>)
    521c:	4798      	blx	r3
}
    521e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
							TCP_SyslogWrite("found syn");
    5220:	482c      	ldr	r0, [pc, #176]	; (52d4 <TCP_Recv+0x19c>)
    5222:	4b2a      	ldr	r3, [pc, #168]	; (52cc <TCP_Recv+0x194>)
    5224:	4798      	blx	r3
							currentTCB->connectionEvent = RCV_SYN;
    5226:	4b24      	ldr	r3, [pc, #144]	; (52b8 <TCP_Recv+0x180>)
    5228:	681a      	ldr	r2, [r3, #0]
    522a:	2103      	movs	r1, #3
    522c:	233c      	movs	r3, #60	; 0x3c
    522e:	54d1      	strb	r1, [r2, r3]
    5230:	e7d8      	b.n	51e4 <TCP_Recv+0xac>
					} else if (tcpHeader.fin) {
    5232:	07da      	lsls	r2, r3, #31
    5234:	d513      	bpl.n	525e <TCP_Recv+0x126>
						if (tcpHeader.ack) {
    5236:	06db      	lsls	r3, r3, #27
    5238:	d508      	bpl.n	524c <TCP_Recv+0x114>
							TCP_SyslogWrite("found fin&ack");
    523a:	4827      	ldr	r0, [pc, #156]	; (52d8 <TCP_Recv+0x1a0>)
    523c:	4b23      	ldr	r3, [pc, #140]	; (52cc <TCP_Recv+0x194>)
    523e:	4798      	blx	r3
							currentTCB->connectionEvent = RCV_FINACK;
    5240:	4b1d      	ldr	r3, [pc, #116]	; (52b8 <TCP_Recv+0x180>)
    5242:	681a      	ldr	r2, [r3, #0]
    5244:	2107      	movs	r1, #7
    5246:	233c      	movs	r3, #60	; 0x3c
    5248:	54d1      	strb	r1, [r2, r3]
    524a:	e7cb      	b.n	51e4 <TCP_Recv+0xac>
							TCP_SyslogWrite("found fin");
    524c:	4823      	ldr	r0, [pc, #140]	; (52dc <TCP_Recv+0x1a4>)
    524e:	4b1f      	ldr	r3, [pc, #124]	; (52cc <TCP_Recv+0x194>)
    5250:	4798      	blx	r3
							currentTCB->connectionEvent = RCV_FIN;
    5252:	4b19      	ldr	r3, [pc, #100]	; (52b8 <TCP_Recv+0x180>)
    5254:	681a      	ldr	r2, [r3, #0]
    5256:	2106      	movs	r1, #6
    5258:	233c      	movs	r3, #60	; 0x3c
    525a:	54d1      	strb	r1, [r2, r3]
    525c:	e7c2      	b.n	51e4 <TCP_Recv+0xac>
					} else if (tcpHeader.rst) {
    525e:	075a      	lsls	r2, r3, #29
    5260:	d513      	bpl.n	528a <TCP_Recv+0x152>
						if (tcpHeader.ack) {
    5262:	06db      	lsls	r3, r3, #27
    5264:	d508      	bpl.n	5278 <TCP_Recv+0x140>
							TCP_SyslogWrite("found rst&ack");
    5266:	481e      	ldr	r0, [pc, #120]	; (52e0 <TCP_Recv+0x1a8>)
    5268:	4b18      	ldr	r3, [pc, #96]	; (52cc <TCP_Recv+0x194>)
    526a:	4798      	blx	r3
							currentTCB->connectionEvent = RCV_RSTACK;
    526c:	4b12      	ldr	r3, [pc, #72]	; (52b8 <TCP_Recv+0x180>)
    526e:	681a      	ldr	r2, [r3, #0]
    5270:	210a      	movs	r1, #10
    5272:	233c      	movs	r3, #60	; 0x3c
    5274:	54d1      	strb	r1, [r2, r3]
    5276:	e7b5      	b.n	51e4 <TCP_Recv+0xac>
							TCP_SyslogWrite("found rst");
    5278:	481a      	ldr	r0, [pc, #104]	; (52e4 <TCP_Recv+0x1ac>)
    527a:	4b14      	ldr	r3, [pc, #80]	; (52cc <TCP_Recv+0x194>)
    527c:	4798      	blx	r3
							currentTCB->connectionEvent = RCV_RST;
    527e:	4b0e      	ldr	r3, [pc, #56]	; (52b8 <TCP_Recv+0x180>)
    5280:	681a      	ldr	r2, [r3, #0]
    5282:	2109      	movs	r1, #9
    5284:	233c      	movs	r3, #60	; 0x3c
    5286:	54d1      	strb	r1, [r2, r3]
    5288:	e7ac      	b.n	51e4 <TCP_Recv+0xac>
					} else if (tcpHeader.ack) {
    528a:	06db      	lsls	r3, r3, #27
    528c:	d508      	bpl.n	52a0 <TCP_Recv+0x168>
						TCP_SyslogWrite("found ack");
    528e:	4816      	ldr	r0, [pc, #88]	; (52e8 <TCP_Recv+0x1b0>)
    5290:	4b0e      	ldr	r3, [pc, #56]	; (52cc <TCP_Recv+0x194>)
    5292:	4798      	blx	r3
						currentTCB->connectionEvent = RCV_ACK;
    5294:	4b08      	ldr	r3, [pc, #32]	; (52b8 <TCP_Recv+0x180>)
    5296:	681a      	ldr	r2, [r3, #0]
    5298:	2104      	movs	r1, #4
    529a:	233c      	movs	r3, #60	; 0x3c
    529c:	54d1      	strb	r1, [r2, r3]
    529e:	e7a1      	b.n	51e4 <TCP_Recv+0xac>
						TCP_SyslogWrite("confused");
    52a0:	4812      	ldr	r0, [pc, #72]	; (52ec <TCP_Recv+0x1b4>)
    52a2:	4b0a      	ldr	r3, [pc, #40]	; (52cc <TCP_Recv+0x194>)
    52a4:	4798      	blx	r3
    52a6:	e79d      	b.n	51e4 <TCP_Recv+0xac>
					TCP_SyslogWrite("pkt dropped: bad options");
    52a8:	4811      	ldr	r0, [pc, #68]	; (52f0 <TCP_Recv+0x1b8>)
    52aa:	4b08      	ldr	r3, [pc, #32]	; (52cc <TCP_Recv+0x194>)
    52ac:	4798      	blx	r3
}
    52ae:	e7b6      	b.n	521e <TCP_Recv+0xe6>
    52b0:	20000878 	.word	0x20000878
    52b4:	00003451 	.word	0x00003451
    52b8:	20003f3c 	.word	0x20003f3c
    52bc:	20003f40 	.word	0x20003f40
    52c0:	20003f44 	.word	0x20003f44
    52c4:	0000481d 	.word	0x0000481d
    52c8:	00007344 	.word	0x00007344
    52cc:	000045cb 	.word	0x000045cb
    52d0:	00004979 	.word	0x00004979
    52d4:	00007354 	.word	0x00007354
    52d8:	00007360 	.word	0x00007360
    52dc:	00007370 	.word	0x00007370
    52e0:	0000737c 	.word	0x0000737c
    52e4:	0000738c 	.word	0x0000738c
    52e8:	00007398 	.word	0x00007398
    52ec:	000073a4 	.word	0x000073a4
    52f0:	000073b0 	.word	0x000073b0

000052f4 <TCP_Init>:

void TCP_Init(void)
{
	tcbList            = NULL;
    52f4:	2300      	movs	r3, #0
    52f6:	4a05      	ldr	r2, [pc, #20]	; (530c <TCP_Init+0x18>)
    52f8:	6013      	str	r3, [r2, #0]
	tcbListSize        = 0;
    52fa:	4a05      	ldr	r2, [pc, #20]	; (5310 <TCP_Init+0x1c>)
    52fc:	7013      	strb	r3, [r2, #0]
	nextAvailablePort  = LOCAL_TCP_PORT_START_NUMBER;
    52fe:	4a05      	ldr	r2, [pc, #20]	; (5314 <TCP_Init+0x20>)
    5300:	2180      	movs	r1, #128	; 0x80
    5302:	00c9      	lsls	r1, r1, #3
    5304:	83d1      	strh	r1, [r2, #30]
	nextSequenceNumber = 0;
    5306:	6213      	str	r3, [r2, #32]
}
    5308:	4770      	bx	lr
    530a:	46c0      	nop			; (mov r8, r8)
    530c:	20003f40 	.word	0x20003f40
    5310:	20003f44 	.word	0x20003f44
    5314:	20000878 	.word	0x20000878

00005318 <TCP_SocketInit>:

tcbError_t TCP_SocketInit(tcpTCB_t *tcbPtr)
{
    5318:	b510      	push	{r4, lr}
    531a:	0004      	movs	r4, r0
	tcbError_t ret = TCB_ERROR;

	// verify that this socket is not in the list
	if (TCB_Check(tcbPtr) == false) {
    531c:	4b10      	ldr	r3, [pc, #64]	; (5360 <TCP_SocketInit+0x48>)
    531e:	4798      	blx	r3
    5320:	2800      	cmp	r0, #0
    5322:	d11a      	bne.n	535a <TCP_SocketInit+0x42>
		TCB_Reset(tcbPtr);
    5324:	0020      	movs	r0, r4
    5326:	4b0f      	ldr	r3, [pc, #60]	; (5364 <TCP_SocketInit+0x4c>)
    5328:	4798      	blx	r3

		tcbPtr->localWnd        = 0; // here we should put the RX buffer size
    532a:	2300      	movs	r3, #0
    532c:	2200      	movs	r2, #0
    532e:	83e3      	strh	r3, [r4, #30]
		tcbPtr->mss             = TCP_MAX_SEG_SIZE;
    5330:	490d      	ldr	r1, [pc, #52]	; (5368 <TCP_SocketInit+0x50>)
    5332:	8421      	strh	r1, [r4, #32]
		tcbPtr->fsmState        = CLOSED;
    5334:	213b      	movs	r1, #59	; 0x3b
    5336:	5462      	strb	r2, [r4, r1]
		tcbPtr->connectionEvent = DUMMY_NOP;
    5338:	200d      	movs	r0, #13
    533a:	3101      	adds	r1, #1
    533c:	5460      	strb	r0, [r4, r1]
		tcbPtr->rxBufferStart   = NULL;
    533e:	6263      	str	r3, [r4, #36]	; 0x24
		tcbPtr->rxBufState      = NO_BUFF;
    5340:	3910      	subs	r1, #16
    5342:	2000      	movs	r0, #0
    5344:	5460      	strb	r0, [r4, r1]
		tcbPtr->txBufferStart   = NULL;
    5346:	6323      	str	r3, [r4, #48]	; 0x30
		tcbPtr->txBufferPtr     = NULL;
    5348:	6363      	str	r3, [r4, #52]	; 0x34
		tcbPtr->bytesToSend     = 0;
    534a:	8723      	strh	r3, [r4, #56]	; 0x38
		tcbPtr->txBufState      = NO_BUFF;
    534c:	333a      	adds	r3, #58	; 0x3a
    534e:	54e2      	strb	r2, [r4, r3]

		TCB_Insert(tcbPtr);
    5350:	0020      	movs	r0, r4
    5352:	4b06      	ldr	r3, [pc, #24]	; (536c <TCP_SocketInit+0x54>)
    5354:	4798      	blx	r3
		ret = TCB_NO_ERROR;
    5356:	2000      	movs	r0, #0
	}
	return ret;
}
    5358:	bd10      	pop	{r4, pc}
	tcbError_t ret = TCB_ERROR;
    535a:	2001      	movs	r0, #1
    535c:	4240      	negs	r0, r0
    535e:	e7fb      	b.n	5358 <TCP_SocketInit+0x40>
    5360:	00004665 	.word	0x00004665
    5364:	00004639 	.word	0x00004639
    5368:	000005b4 	.word	0x000005b4
    536c:	000045cd 	.word	0x000045cd

00005370 <TCP_SocketPoll>:
	}
	return ret;
}

socketState_t TCP_SocketPoll(tcpTCB_t *socket_ptr)
{
    5370:	b510      	push	{r4, lr}
    5372:	0004      	movs	r4, r0
	socketState_t tmpSocketState;

	tmpSocketState = NOT_A_SOCKET;

	if (TCB_Check(socket_ptr)) {
    5374:	4b04      	ldr	r3, [pc, #16]	; (5388 <TCP_SocketPoll+0x18>)
    5376:	4798      	blx	r3
    5378:	2800      	cmp	r0, #0
    537a:	d002      	beq.n	5382 <TCP_SocketPoll+0x12>
		tmpSocketState = socket_ptr->socketState;
    537c:	234e      	movs	r3, #78	; 0x4e
    537e:	5ce0      	ldrb	r0, [r4, r3]
	}

	return tmpSocketState;
}
    5380:	bd10      	pop	{r4, pc}
	tmpSocketState = NOT_A_SOCKET;
    5382:	2000      	movs	r0, #0
    5384:	e7fc      	b.n	5380 <TCP_SocketPoll+0x10>
    5386:	46c0      	nop			; (mov r8, r8)
    5388:	00004665 	.word	0x00004665

0000538c <TCP_SocketRemove>:
{
    538c:	b510      	push	{r4, lr}
    538e:	0004      	movs	r4, r0
	if (TCP_SocketPoll(tcbPtr) == SOCKET_CLOSED) {
    5390:	4b05      	ldr	r3, [pc, #20]	; (53a8 <TCP_SocketRemove+0x1c>)
    5392:	4798      	blx	r3
    5394:	2801      	cmp	r0, #1
    5396:	d104      	bne.n	53a2 <TCP_SocketRemove+0x16>
		TCB_Remove(tcbPtr);
    5398:	0020      	movs	r0, r4
    539a:	4b04      	ldr	r3, [pc, #16]	; (53ac <TCP_SocketRemove+0x20>)
    539c:	4798      	blx	r3
		ret = TCB_NO_ERROR;
    539e:	2000      	movs	r0, #0
}
    53a0:	bd10      	pop	{r4, pc}
	tcbError_t ret = TCB_ERROR;
    53a2:	2001      	movs	r0, #1
    53a4:	4240      	negs	r0, r0
    53a6:	e7fb      	b.n	53a0 <TCP_SocketRemove+0x14>
    53a8:	00005371 	.word	0x00005371
    53ac:	000045f5 	.word	0x000045f5

000053b0 <TCP_Connect>:
	}
	return ret;
}

bool TCP_Connect(tcpTCB_t *tcbPtr, sockaddr_in_t *srvaddr)
{
    53b0:	b570      	push	{r4, r5, r6, lr}
    53b2:	0004      	movs	r4, r0
    53b4:	000d      	movs	r5, r1
	bool ret = false;

	if (TCP_SocketPoll(tcbPtr) == SOCKET_CLOSED) {
    53b6:	4b10      	ldr	r3, [pc, #64]	; (53f8 <TCP_Connect+0x48>)
    53b8:	4798      	blx	r3
    53ba:	2801      	cmp	r0, #1
    53bc:	d001      	beq.n	53c2 <TCP_Connect+0x12>
	bool ret = false;
    53be:	2000      	movs	r0, #0
		currentTCB = tcbPtr;
		ret        = TCP_FiniteStateMachine();
	}

	return ret;
}
    53c0:	bd70      	pop	{r4, r5, r6, pc}
		tcbPtr->destIP   = srvaddr->addr.s_addr;
    53c2:	686b      	ldr	r3, [r5, #4]
    53c4:	6063      	str	r3, [r4, #4]
		tcbPtr->destPort = srvaddr->port;
    53c6:	882b      	ldrh	r3, [r5, #0]
    53c8:	8123      	strh	r3, [r4, #8]
		if (tcbPtr->localPort == 0) {
    53ca:	8823      	ldrh	r3, [r4, #0]
    53cc:	2b00      	cmp	r3, #0
    53ce:	d104      	bne.n	53da <TCP_Connect+0x2a>
			tcbPtr->localPort = nextAvailablePort++;
    53d0:	4a0a      	ldr	r2, [pc, #40]	; (53fc <TCP_Connect+0x4c>)
    53d2:	8bd3      	ldrh	r3, [r2, #30]
    53d4:	1c59      	adds	r1, r3, #1
    53d6:	83d1      	strh	r1, [r2, #30]
    53d8:	8023      	strh	r3, [r4, #0]
		tcbPtr->socketState     = SOCKET_IN_PROGRESS;
    53da:	2202      	movs	r2, #2
    53dc:	234e      	movs	r3, #78	; 0x4e
    53de:	54e2      	strb	r2, [r4, r3]
		tcbPtr->localSeqno      = nextSequenceNumber;
    53e0:	4b06      	ldr	r3, [pc, #24]	; (53fc <TCP_Connect+0x4c>)
    53e2:	6a1b      	ldr	r3, [r3, #32]
    53e4:	6163      	str	r3, [r4, #20]
		tcbPtr->connectionEvent = ACTIVE_OPEN;
    53e6:	3a01      	subs	r2, #1
    53e8:	233c      	movs	r3, #60	; 0x3c
    53ea:	54e2      	strb	r2, [r4, r3]
		currentTCB = tcbPtr;
    53ec:	4b04      	ldr	r3, [pc, #16]	; (5400 <TCP_Connect+0x50>)
    53ee:	601c      	str	r4, [r3, #0]
		ret        = TCP_FiniteStateMachine();
    53f0:	4b04      	ldr	r3, [pc, #16]	; (5404 <TCP_Connect+0x54>)
    53f2:	4798      	blx	r3
    53f4:	e7e4      	b.n	53c0 <TCP_Connect+0x10>
    53f6:	46c0      	nop			; (mov r8, r8)
    53f8:	00005371 	.word	0x00005371
    53fc:	20000878 	.word	0x20000878
    5400:	20003f3c 	.word	0x20003f3c
    5404:	00004979 	.word	0x00004979

00005408 <TCP_Close>:

bool TCP_Close(tcpTCB_t *tcbPtr)
{
    5408:	b510      	push	{r4, lr}
    540a:	0004      	movs	r4, r0
	bool ret = false;

	TCP_SyslogWrite("tcp_close");
    540c:	4809      	ldr	r0, [pc, #36]	; (5434 <TCP_Close+0x2c>)
    540e:	4b0a      	ldr	r3, [pc, #40]	; (5438 <TCP_Close+0x30>)
    5410:	4798      	blx	r3

	if (TCB_Check(tcbPtr)) {
    5412:	0020      	movs	r0, r4
    5414:	4b09      	ldr	r3, [pc, #36]	; (543c <TCP_Close+0x34>)
    5416:	4798      	blx	r3
    5418:	2800      	cmp	r0, #0
    541a:	d100      	bne.n	541e <TCP_Close+0x16>
		// likely to change this to a needs TX time queue
		currentTCB = tcbPtr;
		ret        = TCP_FiniteStateMachine();
	}
	return ret;
}
    541c:	bd10      	pop	{r4, pc}
		tcbPtr->connectionEvent = CLOSE;
    541e:	2200      	movs	r2, #0
    5420:	233c      	movs	r3, #60	; 0x3c
    5422:	54e2      	strb	r2, [r4, r3]
		tcbPtr->socketState = SOCKET_CLOSING;
    5424:	3204      	adds	r2, #4
    5426:	3312      	adds	r3, #18
    5428:	54e2      	strb	r2, [r4, r3]
		currentTCB = tcbPtr;
    542a:	4b05      	ldr	r3, [pc, #20]	; (5440 <TCP_Close+0x38>)
    542c:	601c      	str	r4, [r3, #0]
		ret        = TCP_FiniteStateMachine();
    542e:	4b05      	ldr	r3, [pc, #20]	; (5444 <TCP_Close+0x3c>)
    5430:	4798      	blx	r3
    5432:	e7f3      	b.n	541c <TCP_Close+0x14>
    5434:	000073e4 	.word	0x000073e4
    5438:	000045cb 	.word	0x000045cb
    543c:	00004665 	.word	0x00004665
    5440:	20003f3c 	.word	0x20003f3c
    5444:	00004979 	.word	0x00004979

00005448 <TCP_Send>:

bool TCP_Send(tcpTCB_t *tcbPtr, uint8_t *data, uint16_t dataLen)
{
    5448:	b570      	push	{r4, r5, r6, lr}
    544a:	0004      	movs	r4, r0
    544c:	000d      	movs	r5, r1
    544e:	0016      	movs	r6, r2
	bool ret = false;

	if (TCP_SocketPoll(tcbPtr) == SOCKET_CONNECTED) {
    5450:	4b11      	ldr	r3, [pc, #68]	; (5498 <TCP_Send+0x50>)
    5452:	4798      	blx	r3
    5454:	2803      	cmp	r0, #3
    5456:	d001      	beq.n	545c <TCP_Send+0x14>
	bool ret = false;
    5458:	2000      	movs	r0, #0
				ret = true;
			}
		}
	}
	return ret;
}
    545a:	bd70      	pop	{r4, r5, r6, pc}
		if (tcbPtr->txBufState == NO_BUFF) {
    545c:	233a      	movs	r3, #58	; 0x3a
    545e:	5ce3      	ldrb	r3, [r4, r3]
    5460:	2b00      	cmp	r3, #0
    5462:	d114      	bne.n	548e <TCP_Send+0x46>
			if (data != NULL) {
    5464:	2d00      	cmp	r5, #0
    5466:	d014      	beq.n	5492 <TCP_Send+0x4a>
				tcbPtr->txBufferStart = data;
    5468:	6325      	str	r5, [r4, #48]	; 0x30
				tcbPtr->txBufferPtr   = tcbPtr->txBufferStart;
    546a:	6365      	str	r5, [r4, #52]	; 0x34
				tcbPtr->bytesToSend   = dataLen;
    546c:	8726      	strh	r6, [r4, #56]	; 0x38
				tcbPtr->txBufState    = TX_BUFF_IN_USE;
    546e:	3302      	adds	r3, #2
    5470:	223a      	movs	r2, #58	; 0x3a
    5472:	54a3      	strb	r3, [r4, r2]
				tcbPtr->timeoutReloadValue = TCP_START_TIMEOUT_VAL;
    5474:	3210      	adds	r2, #16
    5476:	52a3      	strh	r3, [r4, r2]
				tcbPtr->timeoutsCount      = TCP_MAX_RETRIES;
    5478:	3a45      	subs	r2, #69	; 0x45
    547a:	334a      	adds	r3, #74	; 0x4a
    547c:	54e2      	strb	r2, [r4, r3]
				tcbPtr->flags = TCP_ACK_FLAG;
    547e:	320b      	adds	r2, #11
    5480:	3301      	adds	r3, #1
    5482:	54e2      	strb	r2, [r4, r3]
				TCP_Snd(tcbPtr);
    5484:	0020      	movs	r0, r4
    5486:	4b05      	ldr	r3, [pc, #20]	; (549c <TCP_Send+0x54>)
    5488:	4798      	blx	r3
				ret = true;
    548a:	2001      	movs	r0, #1
    548c:	e7e5      	b.n	545a <TCP_Send+0x12>
	bool ret = false;
    548e:	2000      	movs	r0, #0
    5490:	e7e3      	b.n	545a <TCP_Send+0x12>
    5492:	2000      	movs	r0, #0
    5494:	e7e1      	b.n	545a <TCP_Send+0x12>
    5496:	46c0      	nop			; (mov r8, r8)
    5498:	00005371 	.word	0x00005371
    549c:	000046a5 	.word	0x000046a5

000054a0 <TCP_SendDone>:

bool TCP_SendDone(tcpTCB_t *tcbPtr)
{
    54a0:	b510      	push	{r4, lr}
    54a2:	0004      	movs	r4, r0
	bool ret = false;

	if (TCB_Check(tcbPtr)) {
    54a4:	4b05      	ldr	r3, [pc, #20]	; (54bc <TCP_SendDone+0x1c>)
    54a6:	4798      	blx	r3
    54a8:	2800      	cmp	r0, #0
    54aa:	d003      	beq.n	54b4 <TCP_SendDone+0x14>
		if (tcbPtr->txBufState == NO_BUFF) {
    54ac:	233a      	movs	r3, #58	; 0x3a
    54ae:	5ce3      	ldrb	r3, [r4, r3]
    54b0:	2b00      	cmp	r3, #0
    54b2:	d100      	bne.n	54b6 <TCP_SendDone+0x16>
			ret = true;
		}
	}
	return ret;
}
    54b4:	bd10      	pop	{r4, pc}
	bool ret = false;
    54b6:	2000      	movs	r0, #0
    54b8:	e7fc      	b.n	54b4 <TCP_SendDone+0x14>
    54ba:	46c0      	nop			; (mov r8, r8)
    54bc:	00004665 	.word	0x00004665

000054c0 <TCP_InsertRxBuffer>:

bool TCP_InsertRxBuffer(tcpTCB_t *tcbPtr, uint8_t *data, uint16_t data_len)
{
    54c0:	b570      	push	{r4, r5, r6, lr}
    54c2:	0004      	movs	r4, r0
    54c4:	000e      	movs	r6, r1
    54c6:	0015      	movs	r5, r2
	bool ret = false;

	if (TCB_Check(tcbPtr)) {
    54c8:	4b0a      	ldr	r3, [pc, #40]	; (54f4 <TCP_InsertRxBuffer+0x34>)
    54ca:	4798      	blx	r3
    54cc:	2800      	cmp	r0, #0
    54ce:	d00b      	beq.n	54e8 <TCP_InsertRxBuffer+0x28>
		if (tcbPtr->rxBufState == NO_BUFF) {
    54d0:	232c      	movs	r3, #44	; 0x2c
    54d2:	5ce3      	ldrb	r3, [r4, r3]
    54d4:	2b00      	cmp	r3, #0
    54d6:	d108      	bne.n	54ea <TCP_InsertRxBuffer+0x2a>
			if (data != NULL) {
    54d8:	2e00      	cmp	r6, #0
    54da:	d008      	beq.n	54ee <TCP_InsertRxBuffer+0x2e>
				tcbPtr->rxBufferStart = data;
    54dc:	6266      	str	r6, [r4, #36]	; 0x24
				tcbPtr->rxBufferPtr   = tcbPtr->rxBufferStart;
    54de:	62a6      	str	r6, [r4, #40]	; 0x28
				tcbPtr->localWnd      = data_len; // update the available receive windows
    54e0:	83e5      	strh	r5, [r4, #30]
				tcbPtr->rxBufState    = RX_BUFF_IN_USE;
    54e2:	2201      	movs	r2, #1
    54e4:	332c      	adds	r3, #44	; 0x2c
    54e6:	54e2      	strb	r2, [r4, r3]
				ret                   = true;
			}
		}
	}
	return ret;
}
    54e8:	bd70      	pop	{r4, r5, r6, pc}
	bool ret = false;
    54ea:	2000      	movs	r0, #0
    54ec:	e7fc      	b.n	54e8 <TCP_InsertRxBuffer+0x28>
    54ee:	2000      	movs	r0, #0
    54f0:	e7fa      	b.n	54e8 <TCP_InsertRxBuffer+0x28>
    54f2:	46c0      	nop			; (mov r8, r8)
    54f4:	00004665 	.word	0x00004665

000054f8 <TCP_GetReceivedData>:

int16_t TCP_GetReceivedData(tcpTCB_t *tcbPtr)
{
    54f8:	b510      	push	{r4, lr}
    54fa:	0004      	movs	r4, r0
	int16_t ret = 0;

	if (TCB_Check(tcbPtr)) {
    54fc:	4b0b      	ldr	r3, [pc, #44]	; (552c <TCP_GetReceivedData+0x34>)
    54fe:	4798      	blx	r3
    5500:	2800      	cmp	r0, #0
    5502:	d011      	beq.n	5528 <TCP_GetReceivedData+0x30>
		if (tcbPtr->rxBufState == RX_BUFF_IN_USE) {
    5504:	232c      	movs	r3, #44	; 0x2c
    5506:	5ce3      	ldrb	r3, [r4, r3]
    5508:	2b01      	cmp	r3, #1
    550a:	d001      	beq.n	5510 <TCP_GetReceivedData+0x18>
	int16_t ret = 0;
    550c:	2000      	movs	r0, #0
    550e:	e00c      	b.n	552a <TCP_GetReceivedData+0x32>
			ret = tcbPtr->rxBufferPtr - tcbPtr->rxBufferStart;
    5510:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5512:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5514:	1a98      	subs	r0, r3, r2
    5516:	b200      	sxth	r0, r0

			if (ret != 0) {
    5518:	2800      	cmp	r0, #0
    551a:	d006      	beq.n	552a <TCP_GetReceivedData+0x32>
				tcbPtr->localWnd   = 0;
    551c:	2300      	movs	r3, #0
    551e:	83e3      	strh	r3, [r4, #30]
				tcbPtr->rxBufState = NO_BUFF;
    5520:	332c      	adds	r3, #44	; 0x2c
    5522:	2200      	movs	r2, #0
    5524:	54e2      	strb	r2, [r4, r3]
    5526:	e000      	b.n	552a <TCP_GetReceivedData+0x32>
	int16_t ret = 0;
    5528:	2000      	movs	r0, #0
			}
		}
	}
	return ret;
}
    552a:	bd10      	pop	{r4, pc}
    552c:	00004665 	.word	0x00004665

00005530 <TCP_GetRxLength>:

int16_t TCP_GetRxLength(tcpTCB_t *tcbPtr)
{
    5530:	b510      	push	{r4, lr}
    5532:	0004      	movs	r4, r0
	int16_t ret = 0;

	if (TCB_Check(tcbPtr)) {
    5534:	4b08      	ldr	r3, [pc, #32]	; (5558 <TCP_GetRxLength+0x28>)
    5536:	4798      	blx	r3
    5538:	2800      	cmp	r0, #0
    553a:	d00a      	beq.n	5552 <TCP_GetRxLength+0x22>
		if (tcbPtr->rxBufState == RX_BUFF_IN_USE) {
    553c:	232c      	movs	r3, #44	; 0x2c
    553e:	5ce3      	ldrb	r3, [r4, r3]
    5540:	2b01      	cmp	r3, #1
    5542:	d001      	beq.n	5548 <TCP_GetRxLength+0x18>
	int16_t ret = 0;
    5544:	2000      	movs	r0, #0
    5546:	e005      	b.n	5554 <TCP_GetRxLength+0x24>
			ret = tcbPtr->rxBufferPtr - tcbPtr->rxBufferStart;
    5548:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    554a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    554c:	1ac0      	subs	r0, r0, r3
    554e:	b200      	sxth	r0, r0
    5550:	e000      	b.n	5554 <TCP_GetRxLength+0x24>
	int16_t ret = 0;
    5552:	2000      	movs	r0, #0
		}
	}
	return ret;
}
    5554:	bd10      	pop	{r4, pc}
    5556:	46c0      	nop			; (mov r8, r8)
    5558:	00004665 	.word	0x00004665

0000555c <TCP_Update>:

void TCP_Update(void)
{
    555c:	b570      	push	{r4, r5, r6, lr}
	tcbPtr    = NULL;
	int count = 0;

	// update sequence number and local port number in order to be different
	// for each new connection
	nextSequenceNumber++;
    555e:	4a20      	ldr	r2, [pc, #128]	; (55e0 <TCP_Update+0x84>)
    5560:	6a13      	ldr	r3, [r2, #32]
    5562:	3301      	adds	r3, #1
    5564:	6213      	str	r3, [r2, #32]

	// keep local port number in the general port range
	nextAvailablePort = nextAvailablePort + 1;
    5566:	8bd3      	ldrh	r3, [r2, #30]
    5568:	3301      	adds	r3, #1
    556a:	b29b      	uxth	r3, r3
    556c:	83d3      	strh	r3, [r2, #30]
	if (nextAvailablePort < LOCAL_TCP_PORT_START_NUMBER) {
    556e:	4a1d      	ldr	r2, [pc, #116]	; (55e4 <TCP_Update+0x88>)
    5570:	4293      	cmp	r3, r2
    5572:	d802      	bhi.n	557a <TCP_Update+0x1e>
		nextAvailablePort = LOCAL_TCP_PORT_START_NUMBER;
    5574:	3201      	adds	r2, #1
    5576:	4b1a      	ldr	r3, [pc, #104]	; (55e0 <TCP_Update+0x84>)
    5578:	83da      	strh	r2, [r3, #30]
	}
	// TO DO also local seq number should be "random"

	tcbPtr = tcbList;
    557a:	4b1b      	ldr	r3, [pc, #108]	; (55e8 <TCP_Update+0x8c>)
    557c:	681c      	ldr	r4, [r3, #0]
	int count = 0;
    557e:	2500      	movs	r5, #0
	while ((tcbPtr != NULL) && (count < tcbListSize)) {
    5580:	e001      	b.n	5586 <TCP_Update+0x2a>
						TCP_FiniteStateMachine();
					}
				}
			}
		}
		tcbPtr = tcbPtr->nextTCB;
    5582:	6c24      	ldr	r4, [r4, #64]	; 0x40
		count++;
    5584:	3501      	adds	r5, #1
	while ((tcbPtr != NULL) && (count < tcbListSize)) {
    5586:	2c00      	cmp	r4, #0
    5588:	d029      	beq.n	55de <TCP_Update+0x82>
    558a:	4b18      	ldr	r3, [pc, #96]	; (55ec <TCP_Update+0x90>)
    558c:	781b      	ldrb	r3, [r3, #0]
    558e:	b25b      	sxtb	r3, r3
    5590:	429d      	cmp	r5, r3
    5592:	da24      	bge.n	55de <TCP_Update+0x82>
		if (tcbPtr->timeout > 0) {
    5594:	2348      	movs	r3, #72	; 0x48
    5596:	5ae3      	ldrh	r3, [r4, r3]
    5598:	2b00      	cmp	r3, #0
    559a:	d0f2      	beq.n	5582 <TCP_Update+0x26>
			TCP_SyslogWrite("tcp timeout");
    559c:	4814      	ldr	r0, [pc, #80]	; (55f0 <TCP_Update+0x94>)
    559e:	4b15      	ldr	r3, [pc, #84]	; (55f4 <TCP_Update+0x98>)
    55a0:	4798      	blx	r3
			tcbPtr->timeout = tcbPtr->timeout - 1;
    55a2:	2248      	movs	r2, #72	; 0x48
    55a4:	5aa3      	ldrh	r3, [r4, r2]
    55a6:	3b01      	subs	r3, #1
    55a8:	b29b      	uxth	r3, r3
    55aa:	52a3      	strh	r3, [r4, r2]
			if (tcbPtr->timeout == 0) {
    55ac:	2b00      	cmp	r3, #0
    55ae:	d1e8      	bne.n	5582 <TCP_Update+0x26>
				if (tcbPtr->timeoutsCount > 0) {
    55b0:	334c      	adds	r3, #76	; 0x4c
    55b2:	5ce3      	ldrb	r3, [r4, r3]
    55b4:	2b00      	cmp	r3, #0
    55b6:	d0e4      	beq.n	5582 <TCP_Update+0x26>
					if (tcbPtr->connectionEvent == DUMMY_NOP) {
    55b8:	3a0c      	subs	r2, #12
    55ba:	5ca2      	ldrb	r2, [r4, r2]
    55bc:	2a0d      	cmp	r2, #13
    55be:	d1e0      	bne.n	5582 <TCP_Update+0x26>
						tcbPtr->timeout         = tcbPtr->timeoutReloadValue;
    55c0:	323d      	adds	r2, #61	; 0x3d
    55c2:	5aa1      	ldrh	r1, [r4, r2]
    55c4:	3a02      	subs	r2, #2
    55c6:	52a1      	strh	r1, [r4, r2]
						tcbPtr->timeoutsCount   = tcbPtr->timeoutsCount - 1;
    55c8:	3b01      	subs	r3, #1
    55ca:	3204      	adds	r2, #4
    55cc:	54a3      	strb	r3, [r4, r2]
						tcbPtr->connectionEvent = TIMEOUT;
    55ce:	3a40      	subs	r2, #64	; 0x40
    55d0:	233c      	movs	r3, #60	; 0x3c
    55d2:	54e2      	strb	r2, [r4, r3]
						currentTCB              = tcbPtr;
    55d4:	4b08      	ldr	r3, [pc, #32]	; (55f8 <TCP_Update+0x9c>)
    55d6:	601c      	str	r4, [r3, #0]
						TCP_FiniteStateMachine();
    55d8:	4b08      	ldr	r3, [pc, #32]	; (55fc <TCP_Update+0xa0>)
    55da:	4798      	blx	r3
    55dc:	e7d1      	b.n	5582 <TCP_Update+0x26>
	}
}
    55de:	bd70      	pop	{r4, r5, r6, pc}
    55e0:	20000878 	.word	0x20000878
    55e4:	000003ff 	.word	0x000003ff
    55e8:	20003f40 	.word	0x20003f40
    55ec:	20003f44 	.word	0x20003f44
    55f0:	000073f0 	.word	0x000073f0
    55f4:	000045cb 	.word	0x000045cb
    55f8:	20003f3c 	.word	0x20003f3c
    55fc:	00004979 	.word	0x00004979

00005600 <UDP_Start>:

/**
  Section: UDP Library APIs
*/
error_msg UDP_Start(uint32_t destIP, uint16_t srcPort, uint16_t dstPort)
{
    5600:	b570      	push	{r4, r5, r6, lr}
    5602:	000e      	movs	r6, r1
    5604:	0015      	movs	r5, r2
	// Start a UDP Packet to Write UDP Header
	error_msg ret = ERROR;

	// Start IPv4 Packet to Write IPv4 Header
	ret = IPv4_Start(destIP, UDP);
    5606:	2111      	movs	r1, #17
    5608:	4b09      	ldr	r3, [pc, #36]	; (5630 <UDP_Start+0x30>)
    560a:	4798      	blx	r3
    560c:	0004      	movs	r4, r0
	
	if (ret == SUCCESS) {
    560e:	2801      	cmp	r0, #1
    5610:	d001      	beq.n	5616 <UDP_Start+0x16>

		// Write UDP Checksum; Initially set to '0'
		ETH_Write16(0);
	}
	return ret;
}
    5612:	0020      	movs	r0, r4
    5614:	bd70      	pop	{r4, r5, r6, pc}
		ETH_ResetByteCount();
    5616:	4b07      	ldr	r3, [pc, #28]	; (5634 <UDP_Start+0x34>)
    5618:	4798      	blx	r3
		ETH_Write16(srcPort);
    561a:	0030      	movs	r0, r6
    561c:	4e06      	ldr	r6, [pc, #24]	; (5638 <UDP_Start+0x38>)
    561e:	47b0      	blx	r6
		ETH_Write16(dstPort);
    5620:	0028      	movs	r0, r5
    5622:	47b0      	blx	r6
		ETH_Write16(0);
    5624:	2000      	movs	r0, #0
    5626:	47b0      	blx	r6
		ETH_Write16(0);
    5628:	2000      	movs	r0, #0
    562a:	47b0      	blx	r6
    562c:	e7f1      	b.n	5612 <UDP_Start+0x12>
    562e:	46c0      	nop			; (mov r8, r8)
    5630:	00004331 	.word	0x00004331
    5634:	000039e5 	.word	0x000039e5
    5638:	000034d5 	.word	0x000034d5

0000563c <UDP_Send>:

error_msg UDP_Send()
{
    563c:	b510      	push	{r4, lr}
    563e:	b082      	sub	sp, #8
	uint16_t  udpLength;
	uint16_t  cksm;
	error_msg ret = ERROR;

	udpLength = ETH_GetByteCount();
    5640:	4b17      	ldr	r3, [pc, #92]	; (56a0 <UDP_Send+0x64>)
    5642:	4798      	blx	r3
	udpLength = ntohs(udpLength);
    5644:	0a03      	lsrs	r3, r0, #8
    5646:	b21b      	sxth	r3, r3
    5648:	0200      	lsls	r0, r0, #8
    564a:	4318      	orrs	r0, r3
    564c:	466b      	mov	r3, sp
    564e:	1d9c      	adds	r4, r3, #6
    5650:	80d8      	strh	r0, [r3, #6]
	ETH_Insert((char *)&udpLength, 2, sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) + offsetof(udpHeader_t, length));
    5652:	2226      	movs	r2, #38	; 0x26
    5654:	2102      	movs	r1, #2
    5656:	0020      	movs	r0, r4
    5658:	4b12      	ldr	r3, [pc, #72]	; (56a4 <UDP_Send+0x68>)
    565a:	4798      	blx	r3
	udpLength = htons(udpLength);
    565c:	8823      	ldrh	r3, [r4, #0]
    565e:	0a19      	lsrs	r1, r3, #8
    5660:	021b      	lsls	r3, r3, #8
    5662:	4319      	orrs	r1, r3
    5664:	b289      	uxth	r1, r1
    5666:	8021      	strh	r1, [r4, #0]

	// add the UDP header checksum
	cksm = udpLength + UDP;
    5668:	000a      	movs	r2, r1
    566a:	3211      	adds	r2, #17
    566c:	b292      	uxth	r2, r2
    566e:	ac01      	add	r4, sp, #4
    5670:	8022      	strh	r2, [r4, #0]
	cksm = ETH_TxComputeChecksum(sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) - 8, udpLength + 8, cksm);
    5672:	3108      	adds	r1, #8
    5674:	b289      	uxth	r1, r1
    5676:	201a      	movs	r0, #26
    5678:	4b0b      	ldr	r3, [pc, #44]	; (56a8 <UDP_Send+0x6c>)
    567a:	4798      	blx	r3
    567c:	8020      	strh	r0, [r4, #0]

	// if the computed checksum is "0" set it to 0xFFFF
	if (cksm == 0) {
    567e:	2800      	cmp	r0, #0
    5680:	d103      	bne.n	568a <UDP_Send+0x4e>
		cksm = 0xffff;
    5682:	2201      	movs	r2, #1
    5684:	4252      	negs	r2, r2
    5686:	ab01      	add	r3, sp, #4
    5688:	801a      	strh	r2, [r3, #0]
	}

	ETH_Insert((char *)&cksm, 2, sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) + offsetof(udpHeader_t, checksum));
    568a:	2228      	movs	r2, #40	; 0x28
    568c:	2102      	movs	r1, #2
    568e:	a801      	add	r0, sp, #4
    5690:	4b04      	ldr	r3, [pc, #16]	; (56a4 <UDP_Send+0x68>)
    5692:	4798      	blx	r3

	ret = IPV4_Send(udpLength);
    5694:	466b      	mov	r3, sp
    5696:	88d8      	ldrh	r0, [r3, #6]
    5698:	4b04      	ldr	r3, [pc, #16]	; (56ac <UDP_Send+0x70>)
    569a:	4798      	blx	r3

	return ret;
}
    569c:	b002      	add	sp, #8
    569e:	bd10      	pop	{r4, pc}
    56a0:	000039fd 	.word	0x000039fd
    56a4:	00003779 	.word	0x00003779
    56a8:	000038d5 	.word	0x000038d5
    56ac:	00004411 	.word	0x00004411

000056b0 <UDP_Receive>:

error_msg UDP_Receive(uint16_t udpcksm) // catch all UDP packets and dispatch them to the appropriate callback
{
    56b0:	b570      	push	{r4, r5, r6, lr}
    56b2:	0005      	movs	r5, r0
	error_msg            ret = ERROR;
	const udp_handler_t *hptr;
	uint16_t             x;

	hptr = UDP_CallBackTable;
	ETH_ReadBlock((char *)&udpHeader, sizeof(udpHeader));
    56b4:	4c17      	ldr	r4, [pc, #92]	; (5714 <UDP_Receive+0x64>)
    56b6:	2108      	movs	r1, #8
    56b8:	0020      	movs	r0, r4
    56ba:	4b17      	ldr	r3, [pc, #92]	; (5718 <UDP_Receive+0x68>)
    56bc:	4798      	blx	r3

	if ((udpHeader.checksum == 0) || (udpcksm == 0)) {
    56be:	88e3      	ldrh	r3, [r4, #6]
    56c0:	2b00      	cmp	r3, #0
    56c2:	d003      	beq.n	56cc <UDP_Receive+0x1c>
    56c4:	2d00      	cmp	r5, #0
    56c6:	d001      	beq.n	56cc <UDP_Receive+0x1c>
				break;
			}
			hptr++;
		}
	} else {
		ret = UDP_CHECKSUM_FAILS;
    56c8:	200a      	movs	r0, #10
    56ca:	e022      	b.n	5712 <UDP_Receive+0x62>
		udpHeader.dstPort = ntohs(udpHeader.dstPort); // reverse the port number
    56cc:	4b11      	ldr	r3, [pc, #68]	; (5714 <UDP_Receive+0x64>)
    56ce:	8859      	ldrh	r1, [r3, #2]
    56d0:	0a0a      	lsrs	r2, r1, #8
    56d2:	0209      	lsls	r1, r1, #8
    56d4:	430a      	orrs	r2, r1
    56d6:	b292      	uxth	r2, r2
    56d8:	805a      	strh	r2, [r3, #2]
		destPort          = ntohs(udpHeader.srcPort);
    56da:	8819      	ldrh	r1, [r3, #0]
    56dc:	0a08      	lsrs	r0, r1, #8
    56de:	0209      	lsls	r1, r1, #8
    56e0:	4301      	orrs	r1, r0
    56e2:	8119      	strh	r1, [r3, #8]
		for (x = 0; x < ARRAYSIZE(UDP_CallBackTable); x++) {
    56e4:	2300      	movs	r3, #0
	hptr = UDP_CallBackTable;
    56e6:	490d      	ldr	r1, [pc, #52]	; (571c <UDP_Receive+0x6c>)
		for (x = 0; x < ARRAYSIZE(UDP_CallBackTable); x++) {
    56e8:	2b01      	cmp	r3, #1
    56ea:	d811      	bhi.n	5710 <UDP_Receive+0x60>
			if (hptr->portNumber == udpHeader.dstPort) {
    56ec:	8808      	ldrh	r0, [r1, #0]
    56ee:	4282      	cmp	r2, r0
    56f0:	d003      	beq.n	56fa <UDP_Receive+0x4a>
			hptr++;
    56f2:	3108      	adds	r1, #8
		for (x = 0; x < ARRAYSIZE(UDP_CallBackTable); x++) {
    56f4:	3301      	adds	r3, #1
    56f6:	b29b      	uxth	r3, r3
    56f8:	e7f6      	b.n	56e8 <UDP_Receive+0x38>
				hptr->callBack(ntohs(udpHeader.length) - sizeof(udpHeader));
    56fa:	684a      	ldr	r2, [r1, #4]
    56fc:	4b05      	ldr	r3, [pc, #20]	; (5714 <UDP_Receive+0x64>)
    56fe:	889b      	ldrh	r3, [r3, #4]
    5700:	0a18      	lsrs	r0, r3, #8
    5702:	061b      	lsls	r3, r3, #24
    5704:	0c1b      	lsrs	r3, r3, #16
    5706:	4318      	orrs	r0, r3
    5708:	3808      	subs	r0, #8
    570a:	4790      	blx	r2
				ret = SUCCESS;
    570c:	2001      	movs	r0, #1
				break;
    570e:	e000      	b.n	5712 <UDP_Receive+0x62>
		ret               = PORT_NOT_AVAILABLE;
    5710:	200d      	movs	r0, #13
	}
	return ret;
}
    5712:	bd70      	pop	{r4, r5, r6, pc}
    5714:	2000089c 	.word	0x2000089c
    5718:	00003451 	.word	0x00003451
    571c:	000073fc 	.word	0x000073fc

00005720 <tcpip_lite_timer_task_cb>:
struct timer_task ms_tick_task;

static void tcpip_lite_timer_task_cb(const struct timer_task *const t)
{
	(void)t;
	ms_tick++;
    5720:	4a02      	ldr	r2, [pc, #8]	; (572c <tcpip_lite_timer_task_cb+0xc>)
    5722:	6813      	ldr	r3, [r2, #0]
    5724:	3301      	adds	r3, #1
    5726:	6013      	str	r3, [r2, #0]
}
    5728:	4770      	bx	lr
    572a:	46c0      	nop			; (mov r8, r8)
    572c:	200008a8 	.word	0x200008a8

00005730 <_gettimeofday>:

int _gettimeofday(struct timeval *tv, void *tzvp)
{
    5730:	b570      	push	{r4, r5, r6, lr}
    5732:	1e04      	subs	r4, r0, #0
	if (!tv)
    5734:	d00d      	beq.n	5752 <_gettimeofday+0x22>
		return -1;

	tv->tv_sec  = ms_tick / 1000;
    5736:	4b08      	ldr	r3, [pc, #32]	; (5758 <_gettimeofday+0x28>)
    5738:	681d      	ldr	r5, [r3, #0]
    573a:	21fa      	movs	r1, #250	; 0xfa
    573c:	0089      	lsls	r1, r1, #2
    573e:	0028      	movs	r0, r5
    5740:	4b06      	ldr	r3, [pc, #24]	; (575c <_gettimeofday+0x2c>)
    5742:	4798      	blx	r3
    5744:	6020      	str	r0, [r4, #0]
	tv->tv_usec = ms_tick * 1000;
    5746:	20fa      	movs	r0, #250	; 0xfa
    5748:	0080      	lsls	r0, r0, #2
    574a:	4368      	muls	r0, r5
    574c:	6060      	str	r0, [r4, #4]

	return 0;
    574e:	2000      	movs	r0, #0
}
    5750:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    5752:	2001      	movs	r0, #1
    5754:	4240      	negs	r0, r0
    5756:	e7fb      	b.n	5750 <_gettimeofday+0x20>
    5758:	200008a8 	.word	0x200008a8
    575c:	000057f5 	.word	0x000057f5

00005760 <SPI_ExchangeByte>:

char SPI_ExchangeByte(uint8_t dir, char v)
{
    5760:	b500      	push	{lr}
    5762:	b085      	sub	sp, #20

	struct spi_xfer xfer;
	uint8_t         buf = v;
    5764:	466b      	mov	r3, sp
    5766:	70d9      	strb	r1, [r3, #3]

	if (dir == 0) {
    5768:	2800      	cmp	r0, #0
    576a:	d00e      	beq.n	578a <SPI_ExchangeByte+0x2a>
		xfer.rxbuf = &buf;
		xfer.txbuf = 0;
		xfer.size  = 1;
	} else {
		xfer.rxbuf = 0;
    576c:	2300      	movs	r3, #0
    576e:	9302      	str	r3, [sp, #8]
		xfer.txbuf = &buf;
    5770:	466b      	mov	r3, sp
    5772:	3303      	adds	r3, #3
    5774:	9301      	str	r3, [sp, #4]
		xfer.size  = 1;
    5776:	2301      	movs	r3, #1
    5778:	9303      	str	r3, [sp, #12]
	}

	spi_m_sync_transfer(&ETHERNET_SPI, &xfer);
    577a:	a901      	add	r1, sp, #4
    577c:	4807      	ldr	r0, [pc, #28]	; (579c <SPI_ExchangeByte+0x3c>)
    577e:	4b08      	ldr	r3, [pc, #32]	; (57a0 <SPI_ExchangeByte+0x40>)
    5780:	4798      	blx	r3
	return (char)buf;
    5782:	466b      	mov	r3, sp
    5784:	78d8      	ldrb	r0, [r3, #3]
}
    5786:	b005      	add	sp, #20
    5788:	bd00      	pop	{pc}
		xfer.rxbuf = &buf;
    578a:	466b      	mov	r3, sp
    578c:	3303      	adds	r3, #3
    578e:	9302      	str	r3, [sp, #8]
		xfer.txbuf = 0;
    5790:	2300      	movs	r3, #0
    5792:	9301      	str	r3, [sp, #4]
		xfer.size  = 1;
    5794:	3301      	adds	r3, #1
    5796:	9303      	str	r3, [sp, #12]
    5798:	e7ef      	b.n	577a <SPI_ExchangeByte+0x1a>
    579a:	46c0      	nop			; (mov r8, r8)
    579c:	20003e0c 	.word	0x20003e0c
    57a0:	00001fa5 	.word	0x00001fa5

000057a4 <tcpip_lite_stack_init>:

void tcpip_lite_stack_init(void)
{
    57a4:	b510      	push	{r4, lr}

	spi_m_sync_enable(&ETHERNET_SPI);
    57a6:	480a      	ldr	r0, [pc, #40]	; (57d0 <tcpip_lite_stack_init+0x2c>)
    57a8:	4b0a      	ldr	r3, [pc, #40]	; (57d4 <tcpip_lite_stack_init+0x30>)
    57aa:	4798      	blx	r3

	Network_Init();
    57ac:	4b0a      	ldr	r3, [pc, #40]	; (57d8 <tcpip_lite_stack_init+0x34>)
    57ae:	4798      	blx	r3
	SYSLOG_Init();
    57b0:	4b0a      	ldr	r3, [pc, #40]	; (57dc <tcpip_lite_stack_init+0x38>)
    57b2:	4798      	blx	r3

	/* Start Timer Task */

	ms_tick_task.interval = 1;
    57b4:	490a      	ldr	r1, [pc, #40]	; (57e0 <tcpip_lite_stack_init+0x3c>)
    57b6:	2301      	movs	r3, #1
    57b8:	608b      	str	r3, [r1, #8]
	ms_tick_task.cb       = tcpip_lite_timer_task_cb;
    57ba:	4a0a      	ldr	r2, [pc, #40]	; (57e4 <tcpip_lite_stack_init+0x40>)
    57bc:	60ca      	str	r2, [r1, #12]
	ms_tick_task.mode     = TIMER_TASK_REPEAT;
    57be:	740b      	strb	r3, [r1, #16]
	timer_add_task(&TICK_TIMER, &ms_tick_task);
    57c0:	4c09      	ldr	r4, [pc, #36]	; (57e8 <tcpip_lite_stack_init+0x44>)
    57c2:	0020      	movs	r0, r4
    57c4:	4b09      	ldr	r3, [pc, #36]	; (57ec <tcpip_lite_stack_init+0x48>)
    57c6:	4798      	blx	r3
	timer_start(&TICK_TIMER);
    57c8:	0020      	movs	r0, r4
    57ca:	4b09      	ldr	r3, [pc, #36]	; (57f0 <tcpip_lite_stack_init+0x4c>)
    57cc:	4798      	blx	r3
}
    57ce:	bd10      	pop	{r4, pc}
    57d0:	20003e0c 	.word	0x20003e0c
    57d4:	00001f55 	.word	0x00001f55
    57d8:	00004465 	.word	0x00004465
    57dc:	000045c9 	.word	0x000045c9
    57e0:	20003f48 	.word	0x20003f48
    57e4:	00005721 	.word	0x00005721
    57e8:	20003e44 	.word	0x20003e44
    57ec:	000021d1 	.word	0x000021d1
    57f0:	00002195 	.word	0x00002195

000057f4 <__udivsi3>:
    57f4:	2200      	movs	r2, #0
    57f6:	0843      	lsrs	r3, r0, #1
    57f8:	428b      	cmp	r3, r1
    57fa:	d374      	bcc.n	58e6 <__udivsi3+0xf2>
    57fc:	0903      	lsrs	r3, r0, #4
    57fe:	428b      	cmp	r3, r1
    5800:	d35f      	bcc.n	58c2 <__udivsi3+0xce>
    5802:	0a03      	lsrs	r3, r0, #8
    5804:	428b      	cmp	r3, r1
    5806:	d344      	bcc.n	5892 <__udivsi3+0x9e>
    5808:	0b03      	lsrs	r3, r0, #12
    580a:	428b      	cmp	r3, r1
    580c:	d328      	bcc.n	5860 <__udivsi3+0x6c>
    580e:	0c03      	lsrs	r3, r0, #16
    5810:	428b      	cmp	r3, r1
    5812:	d30d      	bcc.n	5830 <__udivsi3+0x3c>
    5814:	22ff      	movs	r2, #255	; 0xff
    5816:	0209      	lsls	r1, r1, #8
    5818:	ba12      	rev	r2, r2
    581a:	0c03      	lsrs	r3, r0, #16
    581c:	428b      	cmp	r3, r1
    581e:	d302      	bcc.n	5826 <__udivsi3+0x32>
    5820:	1212      	asrs	r2, r2, #8
    5822:	0209      	lsls	r1, r1, #8
    5824:	d065      	beq.n	58f2 <__udivsi3+0xfe>
    5826:	0b03      	lsrs	r3, r0, #12
    5828:	428b      	cmp	r3, r1
    582a:	d319      	bcc.n	5860 <__udivsi3+0x6c>
    582c:	e000      	b.n	5830 <__udivsi3+0x3c>
    582e:	0a09      	lsrs	r1, r1, #8
    5830:	0bc3      	lsrs	r3, r0, #15
    5832:	428b      	cmp	r3, r1
    5834:	d301      	bcc.n	583a <__udivsi3+0x46>
    5836:	03cb      	lsls	r3, r1, #15
    5838:	1ac0      	subs	r0, r0, r3
    583a:	4152      	adcs	r2, r2
    583c:	0b83      	lsrs	r3, r0, #14
    583e:	428b      	cmp	r3, r1
    5840:	d301      	bcc.n	5846 <__udivsi3+0x52>
    5842:	038b      	lsls	r3, r1, #14
    5844:	1ac0      	subs	r0, r0, r3
    5846:	4152      	adcs	r2, r2
    5848:	0b43      	lsrs	r3, r0, #13
    584a:	428b      	cmp	r3, r1
    584c:	d301      	bcc.n	5852 <__udivsi3+0x5e>
    584e:	034b      	lsls	r3, r1, #13
    5850:	1ac0      	subs	r0, r0, r3
    5852:	4152      	adcs	r2, r2
    5854:	0b03      	lsrs	r3, r0, #12
    5856:	428b      	cmp	r3, r1
    5858:	d301      	bcc.n	585e <__udivsi3+0x6a>
    585a:	030b      	lsls	r3, r1, #12
    585c:	1ac0      	subs	r0, r0, r3
    585e:	4152      	adcs	r2, r2
    5860:	0ac3      	lsrs	r3, r0, #11
    5862:	428b      	cmp	r3, r1
    5864:	d301      	bcc.n	586a <__udivsi3+0x76>
    5866:	02cb      	lsls	r3, r1, #11
    5868:	1ac0      	subs	r0, r0, r3
    586a:	4152      	adcs	r2, r2
    586c:	0a83      	lsrs	r3, r0, #10
    586e:	428b      	cmp	r3, r1
    5870:	d301      	bcc.n	5876 <__udivsi3+0x82>
    5872:	028b      	lsls	r3, r1, #10
    5874:	1ac0      	subs	r0, r0, r3
    5876:	4152      	adcs	r2, r2
    5878:	0a43      	lsrs	r3, r0, #9
    587a:	428b      	cmp	r3, r1
    587c:	d301      	bcc.n	5882 <__udivsi3+0x8e>
    587e:	024b      	lsls	r3, r1, #9
    5880:	1ac0      	subs	r0, r0, r3
    5882:	4152      	adcs	r2, r2
    5884:	0a03      	lsrs	r3, r0, #8
    5886:	428b      	cmp	r3, r1
    5888:	d301      	bcc.n	588e <__udivsi3+0x9a>
    588a:	020b      	lsls	r3, r1, #8
    588c:	1ac0      	subs	r0, r0, r3
    588e:	4152      	adcs	r2, r2
    5890:	d2cd      	bcs.n	582e <__udivsi3+0x3a>
    5892:	09c3      	lsrs	r3, r0, #7
    5894:	428b      	cmp	r3, r1
    5896:	d301      	bcc.n	589c <__udivsi3+0xa8>
    5898:	01cb      	lsls	r3, r1, #7
    589a:	1ac0      	subs	r0, r0, r3
    589c:	4152      	adcs	r2, r2
    589e:	0983      	lsrs	r3, r0, #6
    58a0:	428b      	cmp	r3, r1
    58a2:	d301      	bcc.n	58a8 <__udivsi3+0xb4>
    58a4:	018b      	lsls	r3, r1, #6
    58a6:	1ac0      	subs	r0, r0, r3
    58a8:	4152      	adcs	r2, r2
    58aa:	0943      	lsrs	r3, r0, #5
    58ac:	428b      	cmp	r3, r1
    58ae:	d301      	bcc.n	58b4 <__udivsi3+0xc0>
    58b0:	014b      	lsls	r3, r1, #5
    58b2:	1ac0      	subs	r0, r0, r3
    58b4:	4152      	adcs	r2, r2
    58b6:	0903      	lsrs	r3, r0, #4
    58b8:	428b      	cmp	r3, r1
    58ba:	d301      	bcc.n	58c0 <__udivsi3+0xcc>
    58bc:	010b      	lsls	r3, r1, #4
    58be:	1ac0      	subs	r0, r0, r3
    58c0:	4152      	adcs	r2, r2
    58c2:	08c3      	lsrs	r3, r0, #3
    58c4:	428b      	cmp	r3, r1
    58c6:	d301      	bcc.n	58cc <__udivsi3+0xd8>
    58c8:	00cb      	lsls	r3, r1, #3
    58ca:	1ac0      	subs	r0, r0, r3
    58cc:	4152      	adcs	r2, r2
    58ce:	0883      	lsrs	r3, r0, #2
    58d0:	428b      	cmp	r3, r1
    58d2:	d301      	bcc.n	58d8 <__udivsi3+0xe4>
    58d4:	008b      	lsls	r3, r1, #2
    58d6:	1ac0      	subs	r0, r0, r3
    58d8:	4152      	adcs	r2, r2
    58da:	0843      	lsrs	r3, r0, #1
    58dc:	428b      	cmp	r3, r1
    58de:	d301      	bcc.n	58e4 <__udivsi3+0xf0>
    58e0:	004b      	lsls	r3, r1, #1
    58e2:	1ac0      	subs	r0, r0, r3
    58e4:	4152      	adcs	r2, r2
    58e6:	1a41      	subs	r1, r0, r1
    58e8:	d200      	bcs.n	58ec <__udivsi3+0xf8>
    58ea:	4601      	mov	r1, r0
    58ec:	4152      	adcs	r2, r2
    58ee:	4610      	mov	r0, r2
    58f0:	4770      	bx	lr
    58f2:	e7ff      	b.n	58f4 <__udivsi3+0x100>
    58f4:	b501      	push	{r0, lr}
    58f6:	2000      	movs	r0, #0
    58f8:	f000 f806 	bl	5908 <__aeabi_idiv0>
    58fc:	bd02      	pop	{r1, pc}
    58fe:	46c0      	nop			; (mov r8, r8)

00005900 <__aeabi_uidivmod>:
    5900:	2900      	cmp	r1, #0
    5902:	d0f7      	beq.n	58f4 <__udivsi3+0x100>
    5904:	e776      	b.n	57f4 <__udivsi3>
    5906:	4770      	bx	lr

00005908 <__aeabi_idiv0>:
    5908:	4770      	bx	lr
    590a:	46c0      	nop			; (mov r8, r8)

0000590c <__aeabi_lmul>:
    590c:	b5f0      	push	{r4, r5, r6, r7, lr}
    590e:	46ce      	mov	lr, r9
    5910:	4647      	mov	r7, r8
    5912:	0415      	lsls	r5, r2, #16
    5914:	0c2d      	lsrs	r5, r5, #16
    5916:	002e      	movs	r6, r5
    5918:	b580      	push	{r7, lr}
    591a:	0407      	lsls	r7, r0, #16
    591c:	0c14      	lsrs	r4, r2, #16
    591e:	0c3f      	lsrs	r7, r7, #16
    5920:	4699      	mov	r9, r3
    5922:	0c03      	lsrs	r3, r0, #16
    5924:	437e      	muls	r6, r7
    5926:	435d      	muls	r5, r3
    5928:	4367      	muls	r7, r4
    592a:	4363      	muls	r3, r4
    592c:	197f      	adds	r7, r7, r5
    592e:	0c34      	lsrs	r4, r6, #16
    5930:	19e4      	adds	r4, r4, r7
    5932:	469c      	mov	ip, r3
    5934:	42a5      	cmp	r5, r4
    5936:	d903      	bls.n	5940 <__aeabi_lmul+0x34>
    5938:	2380      	movs	r3, #128	; 0x80
    593a:	025b      	lsls	r3, r3, #9
    593c:	4698      	mov	r8, r3
    593e:	44c4      	add	ip, r8
    5940:	464b      	mov	r3, r9
    5942:	4351      	muls	r1, r2
    5944:	4343      	muls	r3, r0
    5946:	0436      	lsls	r6, r6, #16
    5948:	0c36      	lsrs	r6, r6, #16
    594a:	0c25      	lsrs	r5, r4, #16
    594c:	0424      	lsls	r4, r4, #16
    594e:	4465      	add	r5, ip
    5950:	19a4      	adds	r4, r4, r6
    5952:	1859      	adds	r1, r3, r1
    5954:	1949      	adds	r1, r1, r5
    5956:	0020      	movs	r0, r4
    5958:	bc0c      	pop	{r2, r3}
    595a:	4690      	mov	r8, r2
    595c:	4699      	mov	r9, r3
    595e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005960 <__ffssi2>:
    5960:	b510      	push	{r4, lr}
    5962:	2300      	movs	r3, #0
    5964:	2800      	cmp	r0, #0
    5966:	d002      	beq.n	596e <__ffssi2+0xe>
    5968:	f000 f804 	bl	5974 <__ctzsi2>
    596c:	1c43      	adds	r3, r0, #1
    596e:	0018      	movs	r0, r3
    5970:	bd10      	pop	{r4, pc}
    5972:	46c0      	nop			; (mov r8, r8)

00005974 <__ctzsi2>:
    5974:	4241      	negs	r1, r0
    5976:	4008      	ands	r0, r1
    5978:	211c      	movs	r1, #28
    597a:	2301      	movs	r3, #1
    597c:	041b      	lsls	r3, r3, #16
    597e:	4298      	cmp	r0, r3
    5980:	d301      	bcc.n	5986 <__ctzsi2+0x12>
    5982:	0c00      	lsrs	r0, r0, #16
    5984:	3910      	subs	r1, #16
    5986:	0a1b      	lsrs	r3, r3, #8
    5988:	4298      	cmp	r0, r3
    598a:	d301      	bcc.n	5990 <__ctzsi2+0x1c>
    598c:	0a00      	lsrs	r0, r0, #8
    598e:	3908      	subs	r1, #8
    5990:	091b      	lsrs	r3, r3, #4
    5992:	4298      	cmp	r0, r3
    5994:	d301      	bcc.n	599a <__ctzsi2+0x26>
    5996:	0900      	lsrs	r0, r0, #4
    5998:	3904      	subs	r1, #4
    599a:	a202      	add	r2, pc, #8	; (adr r2, 59a4 <__ctzsi2+0x30>)
    599c:	5c10      	ldrb	r0, [r2, r0]
    599e:	1a40      	subs	r0, r0, r1
    59a0:	4770      	bx	lr
    59a2:	46c0      	nop			; (mov r8, r8)
    59a4:	1d1d1c1b 	.word	0x1d1d1c1b
    59a8:	1e1e1e1e 	.word	0x1e1e1e1e
    59ac:	1f1f1f1f 	.word	0x1f1f1f1f
    59b0:	1f1f1f1f 	.word	0x1f1f1f1f

000059b4 <atoi>:
    59b4:	b510      	push	{r4, lr}
    59b6:	220a      	movs	r2, #10
    59b8:	2100      	movs	r1, #0
    59ba:	f000 f9c7 	bl	5d4c <strtol>
    59be:	bd10      	pop	{r4, pc}

000059c0 <__libc_init_array>:
    59c0:	b570      	push	{r4, r5, r6, lr}
    59c2:	2600      	movs	r6, #0
    59c4:	4d0c      	ldr	r5, [pc, #48]	; (59f8 <__libc_init_array+0x38>)
    59c6:	4c0d      	ldr	r4, [pc, #52]	; (59fc <__libc_init_array+0x3c>)
    59c8:	1b64      	subs	r4, r4, r5
    59ca:	10a4      	asrs	r4, r4, #2
    59cc:	42a6      	cmp	r6, r4
    59ce:	d109      	bne.n	59e4 <__libc_init_array+0x24>
    59d0:	2600      	movs	r6, #0
    59d2:	f001 fdeb 	bl	75ac <_init>
    59d6:	4d0a      	ldr	r5, [pc, #40]	; (5a00 <__libc_init_array+0x40>)
    59d8:	4c0a      	ldr	r4, [pc, #40]	; (5a04 <__libc_init_array+0x44>)
    59da:	1b64      	subs	r4, r4, r5
    59dc:	10a4      	asrs	r4, r4, #2
    59de:	42a6      	cmp	r6, r4
    59e0:	d105      	bne.n	59ee <__libc_init_array+0x2e>
    59e2:	bd70      	pop	{r4, r5, r6, pc}
    59e4:	00b3      	lsls	r3, r6, #2
    59e6:	58eb      	ldr	r3, [r5, r3]
    59e8:	4798      	blx	r3
    59ea:	3601      	adds	r6, #1
    59ec:	e7ee      	b.n	59cc <__libc_init_array+0xc>
    59ee:	00b3      	lsls	r3, r6, #2
    59f0:	58eb      	ldr	r3, [r5, r3]
    59f2:	4798      	blx	r3
    59f4:	3601      	adds	r6, #1
    59f6:	e7f2      	b.n	59de <__libc_init_array+0x1e>
    59f8:	000075b8 	.word	0x000075b8
    59fc:	000075b8 	.word	0x000075b8
    5a00:	000075b8 	.word	0x000075b8
    5a04:	000075bc 	.word	0x000075bc

00005a08 <memcmp>:
    5a08:	b530      	push	{r4, r5, lr}
    5a0a:	2400      	movs	r4, #0
    5a0c:	42a2      	cmp	r2, r4
    5a0e:	d101      	bne.n	5a14 <memcmp+0xc>
    5a10:	2000      	movs	r0, #0
    5a12:	e005      	b.n	5a20 <memcmp+0x18>
    5a14:	5d03      	ldrb	r3, [r0, r4]
    5a16:	1c65      	adds	r5, r4, #1
    5a18:	5d0c      	ldrb	r4, [r1, r4]
    5a1a:	42a3      	cmp	r3, r4
    5a1c:	d001      	beq.n	5a22 <memcmp+0x1a>
    5a1e:	1b18      	subs	r0, r3, r4
    5a20:	bd30      	pop	{r4, r5, pc}
    5a22:	002c      	movs	r4, r5
    5a24:	e7f2      	b.n	5a0c <memcmp+0x4>

00005a26 <memcpy>:
    5a26:	2300      	movs	r3, #0
    5a28:	b510      	push	{r4, lr}
    5a2a:	429a      	cmp	r2, r3
    5a2c:	d100      	bne.n	5a30 <memcpy+0xa>
    5a2e:	bd10      	pop	{r4, pc}
    5a30:	5ccc      	ldrb	r4, [r1, r3]
    5a32:	54c4      	strb	r4, [r0, r3]
    5a34:	3301      	adds	r3, #1
    5a36:	e7f8      	b.n	5a2a <memcpy+0x4>

00005a38 <memset>:
    5a38:	0003      	movs	r3, r0
    5a3a:	1882      	adds	r2, r0, r2
    5a3c:	4293      	cmp	r3, r2
    5a3e:	d100      	bne.n	5a42 <memset+0xa>
    5a40:	4770      	bx	lr
    5a42:	7019      	strb	r1, [r3, #0]
    5a44:	3301      	adds	r3, #1
    5a46:	e7f9      	b.n	5a3c <memset+0x4>

00005a48 <_free_r>:
    5a48:	b570      	push	{r4, r5, r6, lr}
    5a4a:	0005      	movs	r5, r0
    5a4c:	2900      	cmp	r1, #0
    5a4e:	d010      	beq.n	5a72 <_free_r+0x2a>
    5a50:	1f0c      	subs	r4, r1, #4
    5a52:	6823      	ldr	r3, [r4, #0]
    5a54:	2b00      	cmp	r3, #0
    5a56:	da00      	bge.n	5a5a <_free_r+0x12>
    5a58:	18e4      	adds	r4, r4, r3
    5a5a:	0028      	movs	r0, r5
    5a5c:	f000 f9e9 	bl	5e32 <__malloc_lock>
    5a60:	4a1d      	ldr	r2, [pc, #116]	; (5ad8 <_free_r+0x90>)
    5a62:	6813      	ldr	r3, [r2, #0]
    5a64:	2b00      	cmp	r3, #0
    5a66:	d105      	bne.n	5a74 <_free_r+0x2c>
    5a68:	6063      	str	r3, [r4, #4]
    5a6a:	6014      	str	r4, [r2, #0]
    5a6c:	0028      	movs	r0, r5
    5a6e:	f000 f9e1 	bl	5e34 <__malloc_unlock>
    5a72:	bd70      	pop	{r4, r5, r6, pc}
    5a74:	42a3      	cmp	r3, r4
    5a76:	d909      	bls.n	5a8c <_free_r+0x44>
    5a78:	6821      	ldr	r1, [r4, #0]
    5a7a:	1860      	adds	r0, r4, r1
    5a7c:	4283      	cmp	r3, r0
    5a7e:	d1f3      	bne.n	5a68 <_free_r+0x20>
    5a80:	6818      	ldr	r0, [r3, #0]
    5a82:	685b      	ldr	r3, [r3, #4]
    5a84:	1841      	adds	r1, r0, r1
    5a86:	6021      	str	r1, [r4, #0]
    5a88:	e7ee      	b.n	5a68 <_free_r+0x20>
    5a8a:	0013      	movs	r3, r2
    5a8c:	685a      	ldr	r2, [r3, #4]
    5a8e:	2a00      	cmp	r2, #0
    5a90:	d001      	beq.n	5a96 <_free_r+0x4e>
    5a92:	42a2      	cmp	r2, r4
    5a94:	d9f9      	bls.n	5a8a <_free_r+0x42>
    5a96:	6819      	ldr	r1, [r3, #0]
    5a98:	1858      	adds	r0, r3, r1
    5a9a:	42a0      	cmp	r0, r4
    5a9c:	d10b      	bne.n	5ab6 <_free_r+0x6e>
    5a9e:	6820      	ldr	r0, [r4, #0]
    5aa0:	1809      	adds	r1, r1, r0
    5aa2:	1858      	adds	r0, r3, r1
    5aa4:	6019      	str	r1, [r3, #0]
    5aa6:	4282      	cmp	r2, r0
    5aa8:	d1e0      	bne.n	5a6c <_free_r+0x24>
    5aaa:	6810      	ldr	r0, [r2, #0]
    5aac:	6852      	ldr	r2, [r2, #4]
    5aae:	1841      	adds	r1, r0, r1
    5ab0:	6019      	str	r1, [r3, #0]
    5ab2:	605a      	str	r2, [r3, #4]
    5ab4:	e7da      	b.n	5a6c <_free_r+0x24>
    5ab6:	42a0      	cmp	r0, r4
    5ab8:	d902      	bls.n	5ac0 <_free_r+0x78>
    5aba:	230c      	movs	r3, #12
    5abc:	602b      	str	r3, [r5, #0]
    5abe:	e7d5      	b.n	5a6c <_free_r+0x24>
    5ac0:	6821      	ldr	r1, [r4, #0]
    5ac2:	1860      	adds	r0, r4, r1
    5ac4:	4282      	cmp	r2, r0
    5ac6:	d103      	bne.n	5ad0 <_free_r+0x88>
    5ac8:	6810      	ldr	r0, [r2, #0]
    5aca:	6852      	ldr	r2, [r2, #4]
    5acc:	1841      	adds	r1, r0, r1
    5ace:	6021      	str	r1, [r4, #0]
    5ad0:	6062      	str	r2, [r4, #4]
    5ad2:	605c      	str	r4, [r3, #4]
    5ad4:	e7ca      	b.n	5a6c <_free_r+0x24>
    5ad6:	46c0      	nop			; (mov r8, r8)
    5ad8:	200008ac 	.word	0x200008ac

00005adc <_malloc_r>:
    5adc:	2303      	movs	r3, #3
    5ade:	b570      	push	{r4, r5, r6, lr}
    5ae0:	1ccd      	adds	r5, r1, #3
    5ae2:	439d      	bics	r5, r3
    5ae4:	3508      	adds	r5, #8
    5ae6:	0006      	movs	r6, r0
    5ae8:	2d0c      	cmp	r5, #12
    5aea:	d21e      	bcs.n	5b2a <_malloc_r+0x4e>
    5aec:	250c      	movs	r5, #12
    5aee:	42a9      	cmp	r1, r5
    5af0:	d81d      	bhi.n	5b2e <_malloc_r+0x52>
    5af2:	0030      	movs	r0, r6
    5af4:	f000 f99d 	bl	5e32 <__malloc_lock>
    5af8:	4a25      	ldr	r2, [pc, #148]	; (5b90 <_malloc_r+0xb4>)
    5afa:	6814      	ldr	r4, [r2, #0]
    5afc:	0021      	movs	r1, r4
    5afe:	2900      	cmp	r1, #0
    5b00:	d119      	bne.n	5b36 <_malloc_r+0x5a>
    5b02:	4c24      	ldr	r4, [pc, #144]	; (5b94 <_malloc_r+0xb8>)
    5b04:	6823      	ldr	r3, [r4, #0]
    5b06:	2b00      	cmp	r3, #0
    5b08:	d103      	bne.n	5b12 <_malloc_r+0x36>
    5b0a:	0030      	movs	r0, r6
    5b0c:	f000 f844 	bl	5b98 <_sbrk_r>
    5b10:	6020      	str	r0, [r4, #0]
    5b12:	0029      	movs	r1, r5
    5b14:	0030      	movs	r0, r6
    5b16:	f000 f83f 	bl	5b98 <_sbrk_r>
    5b1a:	1c43      	adds	r3, r0, #1
    5b1c:	d12c      	bne.n	5b78 <_malloc_r+0x9c>
    5b1e:	230c      	movs	r3, #12
    5b20:	0030      	movs	r0, r6
    5b22:	6033      	str	r3, [r6, #0]
    5b24:	f000 f986 	bl	5e34 <__malloc_unlock>
    5b28:	e003      	b.n	5b32 <_malloc_r+0x56>
    5b2a:	2d00      	cmp	r5, #0
    5b2c:	dadf      	bge.n	5aee <_malloc_r+0x12>
    5b2e:	230c      	movs	r3, #12
    5b30:	6033      	str	r3, [r6, #0]
    5b32:	2000      	movs	r0, #0
    5b34:	bd70      	pop	{r4, r5, r6, pc}
    5b36:	680b      	ldr	r3, [r1, #0]
    5b38:	1b5b      	subs	r3, r3, r5
    5b3a:	d41a      	bmi.n	5b72 <_malloc_r+0x96>
    5b3c:	2b0b      	cmp	r3, #11
    5b3e:	d903      	bls.n	5b48 <_malloc_r+0x6c>
    5b40:	600b      	str	r3, [r1, #0]
    5b42:	18cc      	adds	r4, r1, r3
    5b44:	6025      	str	r5, [r4, #0]
    5b46:	e003      	b.n	5b50 <_malloc_r+0x74>
    5b48:	428c      	cmp	r4, r1
    5b4a:	d10e      	bne.n	5b6a <_malloc_r+0x8e>
    5b4c:	6863      	ldr	r3, [r4, #4]
    5b4e:	6013      	str	r3, [r2, #0]
    5b50:	0030      	movs	r0, r6
    5b52:	f000 f96f 	bl	5e34 <__malloc_unlock>
    5b56:	0020      	movs	r0, r4
    5b58:	2207      	movs	r2, #7
    5b5a:	300b      	adds	r0, #11
    5b5c:	1d23      	adds	r3, r4, #4
    5b5e:	4390      	bics	r0, r2
    5b60:	1ac3      	subs	r3, r0, r3
    5b62:	d0e7      	beq.n	5b34 <_malloc_r+0x58>
    5b64:	425a      	negs	r2, r3
    5b66:	50e2      	str	r2, [r4, r3]
    5b68:	e7e4      	b.n	5b34 <_malloc_r+0x58>
    5b6a:	684b      	ldr	r3, [r1, #4]
    5b6c:	6063      	str	r3, [r4, #4]
    5b6e:	000c      	movs	r4, r1
    5b70:	e7ee      	b.n	5b50 <_malloc_r+0x74>
    5b72:	000c      	movs	r4, r1
    5b74:	6849      	ldr	r1, [r1, #4]
    5b76:	e7c2      	b.n	5afe <_malloc_r+0x22>
    5b78:	2303      	movs	r3, #3
    5b7a:	1cc4      	adds	r4, r0, #3
    5b7c:	439c      	bics	r4, r3
    5b7e:	42a0      	cmp	r0, r4
    5b80:	d0e0      	beq.n	5b44 <_malloc_r+0x68>
    5b82:	1a21      	subs	r1, r4, r0
    5b84:	0030      	movs	r0, r6
    5b86:	f000 f807 	bl	5b98 <_sbrk_r>
    5b8a:	1c43      	adds	r3, r0, #1
    5b8c:	d1da      	bne.n	5b44 <_malloc_r+0x68>
    5b8e:	e7c6      	b.n	5b1e <_malloc_r+0x42>
    5b90:	200008ac 	.word	0x200008ac
    5b94:	200008b0 	.word	0x200008b0

00005b98 <_sbrk_r>:
    5b98:	2300      	movs	r3, #0
    5b9a:	b570      	push	{r4, r5, r6, lr}
    5b9c:	4c06      	ldr	r4, [pc, #24]	; (5bb8 <_sbrk_r+0x20>)
    5b9e:	0005      	movs	r5, r0
    5ba0:	0008      	movs	r0, r1
    5ba2:	6023      	str	r3, [r4, #0]
    5ba4:	f7fc fba0 	bl	22e8 <_sbrk>
    5ba8:	1c43      	adds	r3, r0, #1
    5baa:	d103      	bne.n	5bb4 <_sbrk_r+0x1c>
    5bac:	6823      	ldr	r3, [r4, #0]
    5bae:	2b00      	cmp	r3, #0
    5bb0:	d000      	beq.n	5bb4 <_sbrk_r+0x1c>
    5bb2:	602b      	str	r3, [r5, #0]
    5bb4:	bd70      	pop	{r4, r5, r6, pc}
    5bb6:	46c0      	nop			; (mov r8, r8)
    5bb8:	20003f5c 	.word	0x20003f5c

00005bbc <siprintf>:
    5bbc:	b40e      	push	{r1, r2, r3}
    5bbe:	b510      	push	{r4, lr}
    5bc0:	b09d      	sub	sp, #116	; 0x74
    5bc2:	a902      	add	r1, sp, #8
    5bc4:	9002      	str	r0, [sp, #8]
    5bc6:	6108      	str	r0, [r1, #16]
    5bc8:	480b      	ldr	r0, [pc, #44]	; (5bf8 <siprintf+0x3c>)
    5bca:	2482      	movs	r4, #130	; 0x82
    5bcc:	6088      	str	r0, [r1, #8]
    5bce:	6148      	str	r0, [r1, #20]
    5bd0:	2001      	movs	r0, #1
    5bd2:	4240      	negs	r0, r0
    5bd4:	ab1f      	add	r3, sp, #124	; 0x7c
    5bd6:	81c8      	strh	r0, [r1, #14]
    5bd8:	4808      	ldr	r0, [pc, #32]	; (5bfc <siprintf+0x40>)
    5bda:	cb04      	ldmia	r3!, {r2}
    5bdc:	00a4      	lsls	r4, r4, #2
    5bde:	6800      	ldr	r0, [r0, #0]
    5be0:	9301      	str	r3, [sp, #4]
    5be2:	818c      	strh	r4, [r1, #12]
    5be4:	f000 f98a 	bl	5efc <_svfiprintf_r>
    5be8:	2300      	movs	r3, #0
    5bea:	9a02      	ldr	r2, [sp, #8]
    5bec:	7013      	strb	r3, [r2, #0]
    5bee:	b01d      	add	sp, #116	; 0x74
    5bf0:	bc10      	pop	{r4}
    5bf2:	bc08      	pop	{r3}
    5bf4:	b003      	add	sp, #12
    5bf6:	4718      	bx	r3
    5bf8:	7fffffff 	.word	0x7fffffff
    5bfc:	20000004 	.word	0x20000004

00005c00 <strlen>:
    5c00:	2300      	movs	r3, #0
    5c02:	5cc2      	ldrb	r2, [r0, r3]
    5c04:	3301      	adds	r3, #1
    5c06:	2a00      	cmp	r2, #0
    5c08:	d1fb      	bne.n	5c02 <strlen+0x2>
    5c0a:	1e58      	subs	r0, r3, #1
    5c0c:	4770      	bx	lr

00005c0e <strstr>:
    5c0e:	b510      	push	{r4, lr}
    5c10:	0002      	movs	r2, r0
    5c12:	7800      	ldrb	r0, [r0, #0]
    5c14:	2800      	cmp	r0, #0
    5c16:	d104      	bne.n	5c22 <strstr+0x14>
    5c18:	7809      	ldrb	r1, [r1, #0]
    5c1a:	2900      	cmp	r1, #0
    5c1c:	d00d      	beq.n	5c3a <strstr+0x2c>
    5c1e:	bd10      	pop	{r4, pc}
    5c20:	3201      	adds	r2, #1
    5c22:	7810      	ldrb	r0, [r2, #0]
    5c24:	2800      	cmp	r0, #0
    5c26:	d0fa      	beq.n	5c1e <strstr+0x10>
    5c28:	2300      	movs	r3, #0
    5c2a:	5cc8      	ldrb	r0, [r1, r3]
    5c2c:	2800      	cmp	r0, #0
    5c2e:	d004      	beq.n	5c3a <strstr+0x2c>
    5c30:	5cd4      	ldrb	r4, [r2, r3]
    5c32:	4284      	cmp	r4, r0
    5c34:	d1f4      	bne.n	5c20 <strstr+0x12>
    5c36:	3301      	adds	r3, #1
    5c38:	e7f7      	b.n	5c2a <strstr+0x1c>
    5c3a:	0010      	movs	r0, r2
    5c3c:	e7ef      	b.n	5c1e <strstr+0x10>
	...

00005c40 <_strtol_l.isra.0>:
    5c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c42:	001f      	movs	r7, r3
    5c44:	000e      	movs	r6, r1
    5c46:	b087      	sub	sp, #28
    5c48:	9005      	str	r0, [sp, #20]
    5c4a:	9103      	str	r1, [sp, #12]
    5c4c:	9202      	str	r2, [sp, #8]
    5c4e:	980c      	ldr	r0, [sp, #48]	; 0x30
    5c50:	7834      	ldrb	r4, [r6, #0]
    5c52:	f000 f8d9 	bl	5e08 <__locale_ctype_ptr_l>
    5c56:	2208      	movs	r2, #8
    5c58:	1900      	adds	r0, r0, r4
    5c5a:	7843      	ldrb	r3, [r0, #1]
    5c5c:	1c75      	adds	r5, r6, #1
    5c5e:	4013      	ands	r3, r2
    5c60:	d10c      	bne.n	5c7c <_strtol_l.isra.0+0x3c>
    5c62:	2c2d      	cmp	r4, #45	; 0x2d
    5c64:	d10c      	bne.n	5c80 <_strtol_l.isra.0+0x40>
    5c66:	3301      	adds	r3, #1
    5c68:	782c      	ldrb	r4, [r5, #0]
    5c6a:	9301      	str	r3, [sp, #4]
    5c6c:	1cb5      	adds	r5, r6, #2
    5c6e:	2f00      	cmp	r7, #0
    5c70:	d00c      	beq.n	5c8c <_strtol_l.isra.0+0x4c>
    5c72:	2f10      	cmp	r7, #16
    5c74:	d114      	bne.n	5ca0 <_strtol_l.isra.0+0x60>
    5c76:	2c30      	cmp	r4, #48	; 0x30
    5c78:	d00a      	beq.n	5c90 <_strtol_l.isra.0+0x50>
    5c7a:	e011      	b.n	5ca0 <_strtol_l.isra.0+0x60>
    5c7c:	002e      	movs	r6, r5
    5c7e:	e7e6      	b.n	5c4e <_strtol_l.isra.0+0xe>
    5c80:	9301      	str	r3, [sp, #4]
    5c82:	2c2b      	cmp	r4, #43	; 0x2b
    5c84:	d1f3      	bne.n	5c6e <_strtol_l.isra.0+0x2e>
    5c86:	782c      	ldrb	r4, [r5, #0]
    5c88:	1cb5      	adds	r5, r6, #2
    5c8a:	e7f0      	b.n	5c6e <_strtol_l.isra.0+0x2e>
    5c8c:	2c30      	cmp	r4, #48	; 0x30
    5c8e:	d12f      	bne.n	5cf0 <_strtol_l.isra.0+0xb0>
    5c90:	2220      	movs	r2, #32
    5c92:	782b      	ldrb	r3, [r5, #0]
    5c94:	4393      	bics	r3, r2
    5c96:	2b58      	cmp	r3, #88	; 0x58
    5c98:	d151      	bne.n	5d3e <_strtol_l.isra.0+0xfe>
    5c9a:	2710      	movs	r7, #16
    5c9c:	786c      	ldrb	r4, [r5, #1]
    5c9e:	3502      	adds	r5, #2
    5ca0:	9b01      	ldr	r3, [sp, #4]
    5ca2:	4a29      	ldr	r2, [pc, #164]	; (5d48 <_strtol_l.isra.0+0x108>)
    5ca4:	0039      	movs	r1, r7
    5ca6:	189e      	adds	r6, r3, r2
    5ca8:	0030      	movs	r0, r6
    5caa:	f7ff fe29 	bl	5900 <__aeabi_uidivmod>
    5cae:	0030      	movs	r0, r6
    5cb0:	9104      	str	r1, [sp, #16]
    5cb2:	0039      	movs	r1, r7
    5cb4:	f7ff fd9e 	bl	57f4 <__udivsi3>
    5cb8:	2101      	movs	r1, #1
    5cba:	2300      	movs	r3, #0
    5cbc:	4249      	negs	r1, r1
    5cbe:	0002      	movs	r2, r0
    5cc0:	468c      	mov	ip, r1
    5cc2:	0018      	movs	r0, r3
    5cc4:	0021      	movs	r1, r4
    5cc6:	3930      	subs	r1, #48	; 0x30
    5cc8:	2909      	cmp	r1, #9
    5cca:	d813      	bhi.n	5cf4 <_strtol_l.isra.0+0xb4>
    5ccc:	000c      	movs	r4, r1
    5cce:	42a7      	cmp	r7, r4
    5cd0:	dd1c      	ble.n	5d0c <_strtol_l.isra.0+0xcc>
    5cd2:	1c59      	adds	r1, r3, #1
    5cd4:	d009      	beq.n	5cea <_strtol_l.isra.0+0xaa>
    5cd6:	4663      	mov	r3, ip
    5cd8:	4282      	cmp	r2, r0
    5cda:	d306      	bcc.n	5cea <_strtol_l.isra.0+0xaa>
    5cdc:	d102      	bne.n	5ce4 <_strtol_l.isra.0+0xa4>
    5cde:	9904      	ldr	r1, [sp, #16]
    5ce0:	42a1      	cmp	r1, r4
    5ce2:	db02      	blt.n	5cea <_strtol_l.isra.0+0xaa>
    5ce4:	2301      	movs	r3, #1
    5ce6:	4378      	muls	r0, r7
    5ce8:	1820      	adds	r0, r4, r0
    5cea:	782c      	ldrb	r4, [r5, #0]
    5cec:	3501      	adds	r5, #1
    5cee:	e7e9      	b.n	5cc4 <_strtol_l.isra.0+0x84>
    5cf0:	270a      	movs	r7, #10
    5cf2:	e7d5      	b.n	5ca0 <_strtol_l.isra.0+0x60>
    5cf4:	0021      	movs	r1, r4
    5cf6:	3941      	subs	r1, #65	; 0x41
    5cf8:	2919      	cmp	r1, #25
    5cfa:	d801      	bhi.n	5d00 <_strtol_l.isra.0+0xc0>
    5cfc:	3c37      	subs	r4, #55	; 0x37
    5cfe:	e7e6      	b.n	5cce <_strtol_l.isra.0+0x8e>
    5d00:	0021      	movs	r1, r4
    5d02:	3961      	subs	r1, #97	; 0x61
    5d04:	2919      	cmp	r1, #25
    5d06:	d801      	bhi.n	5d0c <_strtol_l.isra.0+0xcc>
    5d08:	3c57      	subs	r4, #87	; 0x57
    5d0a:	e7e0      	b.n	5cce <_strtol_l.isra.0+0x8e>
    5d0c:	1c5a      	adds	r2, r3, #1
    5d0e:	d108      	bne.n	5d22 <_strtol_l.isra.0+0xe2>
    5d10:	9a05      	ldr	r2, [sp, #20]
    5d12:	3323      	adds	r3, #35	; 0x23
    5d14:	6013      	str	r3, [r2, #0]
    5d16:	9b02      	ldr	r3, [sp, #8]
    5d18:	0030      	movs	r0, r6
    5d1a:	2b00      	cmp	r3, #0
    5d1c:	d10b      	bne.n	5d36 <_strtol_l.isra.0+0xf6>
    5d1e:	b007      	add	sp, #28
    5d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d22:	9a01      	ldr	r2, [sp, #4]
    5d24:	2a00      	cmp	r2, #0
    5d26:	d000      	beq.n	5d2a <_strtol_l.isra.0+0xea>
    5d28:	4240      	negs	r0, r0
    5d2a:	9a02      	ldr	r2, [sp, #8]
    5d2c:	2a00      	cmp	r2, #0
    5d2e:	d0f6      	beq.n	5d1e <_strtol_l.isra.0+0xde>
    5d30:	9a03      	ldr	r2, [sp, #12]
    5d32:	2b00      	cmp	r3, #0
    5d34:	d000      	beq.n	5d38 <_strtol_l.isra.0+0xf8>
    5d36:	1e6a      	subs	r2, r5, #1
    5d38:	9b02      	ldr	r3, [sp, #8]
    5d3a:	601a      	str	r2, [r3, #0]
    5d3c:	e7ef      	b.n	5d1e <_strtol_l.isra.0+0xde>
    5d3e:	2430      	movs	r4, #48	; 0x30
    5d40:	2f00      	cmp	r7, #0
    5d42:	d1ad      	bne.n	5ca0 <_strtol_l.isra.0+0x60>
    5d44:	3708      	adds	r7, #8
    5d46:	e7ab      	b.n	5ca0 <_strtol_l.isra.0+0x60>
    5d48:	7fffffff 	.word	0x7fffffff

00005d4c <strtol>:
    5d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5d4e:	0013      	movs	r3, r2
    5d50:	4a06      	ldr	r2, [pc, #24]	; (5d6c <strtol+0x20>)
    5d52:	0005      	movs	r5, r0
    5d54:	6810      	ldr	r0, [r2, #0]
    5d56:	6a04      	ldr	r4, [r0, #32]
    5d58:	2c00      	cmp	r4, #0
    5d5a:	d100      	bne.n	5d5e <strtol+0x12>
    5d5c:	4c04      	ldr	r4, [pc, #16]	; (5d70 <strtol+0x24>)
    5d5e:	000a      	movs	r2, r1
    5d60:	9400      	str	r4, [sp, #0]
    5d62:	0029      	movs	r1, r5
    5d64:	f7ff ff6c 	bl	5c40 <_strtol_l.isra.0>
    5d68:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    5d6a:	46c0      	nop			; (mov r8, r8)
    5d6c:	20000004 	.word	0x20000004
    5d70:	20000068 	.word	0x20000068

00005d74 <time>:
    5d74:	b513      	push	{r0, r1, r4, lr}
    5d76:	4b08      	ldr	r3, [pc, #32]	; (5d98 <time+0x24>)
    5d78:	0004      	movs	r4, r0
    5d7a:	2200      	movs	r2, #0
    5d7c:	4669      	mov	r1, sp
    5d7e:	6818      	ldr	r0, [r3, #0]
    5d80:	f000 f830 	bl	5de4 <_gettimeofday_r>
    5d84:	2800      	cmp	r0, #0
    5d86:	da02      	bge.n	5d8e <time+0x1a>
    5d88:	2301      	movs	r3, #1
    5d8a:	425b      	negs	r3, r3
    5d8c:	9300      	str	r3, [sp, #0]
    5d8e:	9800      	ldr	r0, [sp, #0]
    5d90:	2c00      	cmp	r4, #0
    5d92:	d000      	beq.n	5d96 <time+0x22>
    5d94:	6020      	str	r0, [r4, #0]
    5d96:	bd16      	pop	{r1, r2, r4, pc}
    5d98:	20000004 	.word	0x20000004

00005d9c <_vsiprintf_r>:
    5d9c:	b530      	push	{r4, r5, lr}
    5d9e:	b09b      	sub	sp, #108	; 0x6c
    5da0:	9100      	str	r1, [sp, #0]
    5da2:	9104      	str	r1, [sp, #16]
    5da4:	4908      	ldr	r1, [pc, #32]	; (5dc8 <_vsiprintf_r+0x2c>)
    5da6:	466d      	mov	r5, sp
    5da8:	9102      	str	r1, [sp, #8]
    5daa:	9105      	str	r1, [sp, #20]
    5dac:	2101      	movs	r1, #1
    5dae:	2482      	movs	r4, #130	; 0x82
    5db0:	4249      	negs	r1, r1
    5db2:	81e9      	strh	r1, [r5, #14]
    5db4:	00a4      	lsls	r4, r4, #2
    5db6:	4669      	mov	r1, sp
    5db8:	81ac      	strh	r4, [r5, #12]
    5dba:	f000 f89f 	bl	5efc <_svfiprintf_r>
    5dbe:	2300      	movs	r3, #0
    5dc0:	9a00      	ldr	r2, [sp, #0]
    5dc2:	7013      	strb	r3, [r2, #0]
    5dc4:	b01b      	add	sp, #108	; 0x6c
    5dc6:	bd30      	pop	{r4, r5, pc}
    5dc8:	7fffffff 	.word	0x7fffffff

00005dcc <vsiprintf>:
    5dcc:	b510      	push	{r4, lr}
    5dce:	0013      	movs	r3, r2
    5dd0:	000a      	movs	r2, r1
    5dd2:	0001      	movs	r1, r0
    5dd4:	4802      	ldr	r0, [pc, #8]	; (5de0 <vsiprintf+0x14>)
    5dd6:	6800      	ldr	r0, [r0, #0]
    5dd8:	f7ff ffe0 	bl	5d9c <_vsiprintf_r>
    5ddc:	bd10      	pop	{r4, pc}
    5dde:	46c0      	nop			; (mov r8, r8)
    5de0:	20000004 	.word	0x20000004

00005de4 <_gettimeofday_r>:
    5de4:	2300      	movs	r3, #0
    5de6:	b570      	push	{r4, r5, r6, lr}
    5de8:	4c06      	ldr	r4, [pc, #24]	; (5e04 <_gettimeofday_r+0x20>)
    5dea:	0005      	movs	r5, r0
    5dec:	0008      	movs	r0, r1
    5dee:	0011      	movs	r1, r2
    5df0:	6023      	str	r3, [r4, #0]
    5df2:	f7ff fc9d 	bl	5730 <_gettimeofday>
    5df6:	1c43      	adds	r3, r0, #1
    5df8:	d103      	bne.n	5e02 <_gettimeofday_r+0x1e>
    5dfa:	6823      	ldr	r3, [r4, #0]
    5dfc:	2b00      	cmp	r3, #0
    5dfe:	d000      	beq.n	5e02 <_gettimeofday_r+0x1e>
    5e00:	602b      	str	r3, [r5, #0]
    5e02:	bd70      	pop	{r4, r5, r6, pc}
    5e04:	20003f5c 	.word	0x20003f5c

00005e08 <__locale_ctype_ptr_l>:
    5e08:	30ec      	adds	r0, #236	; 0xec
    5e0a:	6800      	ldr	r0, [r0, #0]
    5e0c:	4770      	bx	lr

00005e0e <__ascii_mbtowc>:
    5e0e:	b082      	sub	sp, #8
    5e10:	2900      	cmp	r1, #0
    5e12:	d100      	bne.n	5e16 <__ascii_mbtowc+0x8>
    5e14:	a901      	add	r1, sp, #4
    5e16:	1e10      	subs	r0, r2, #0
    5e18:	d006      	beq.n	5e28 <__ascii_mbtowc+0x1a>
    5e1a:	2b00      	cmp	r3, #0
    5e1c:	d006      	beq.n	5e2c <__ascii_mbtowc+0x1e>
    5e1e:	7813      	ldrb	r3, [r2, #0]
    5e20:	600b      	str	r3, [r1, #0]
    5e22:	7810      	ldrb	r0, [r2, #0]
    5e24:	1e43      	subs	r3, r0, #1
    5e26:	4198      	sbcs	r0, r3
    5e28:	b002      	add	sp, #8
    5e2a:	4770      	bx	lr
    5e2c:	2002      	movs	r0, #2
    5e2e:	4240      	negs	r0, r0
    5e30:	e7fa      	b.n	5e28 <__ascii_mbtowc+0x1a>

00005e32 <__malloc_lock>:
    5e32:	4770      	bx	lr

00005e34 <__malloc_unlock>:
    5e34:	4770      	bx	lr
	...

00005e38 <__ssputs_r>:
    5e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e3a:	688e      	ldr	r6, [r1, #8]
    5e3c:	b085      	sub	sp, #20
    5e3e:	0007      	movs	r7, r0
    5e40:	000c      	movs	r4, r1
    5e42:	9203      	str	r2, [sp, #12]
    5e44:	9301      	str	r3, [sp, #4]
    5e46:	429e      	cmp	r6, r3
    5e48:	d839      	bhi.n	5ebe <__ssputs_r+0x86>
    5e4a:	2390      	movs	r3, #144	; 0x90
    5e4c:	898a      	ldrh	r2, [r1, #12]
    5e4e:	00db      	lsls	r3, r3, #3
    5e50:	421a      	tst	r2, r3
    5e52:	d034      	beq.n	5ebe <__ssputs_r+0x86>
    5e54:	2503      	movs	r5, #3
    5e56:	6909      	ldr	r1, [r1, #16]
    5e58:	6823      	ldr	r3, [r4, #0]
    5e5a:	1a5b      	subs	r3, r3, r1
    5e5c:	9302      	str	r3, [sp, #8]
    5e5e:	6963      	ldr	r3, [r4, #20]
    5e60:	9802      	ldr	r0, [sp, #8]
    5e62:	435d      	muls	r5, r3
    5e64:	0feb      	lsrs	r3, r5, #31
    5e66:	195d      	adds	r5, r3, r5
    5e68:	9b01      	ldr	r3, [sp, #4]
    5e6a:	106d      	asrs	r5, r5, #1
    5e6c:	3301      	adds	r3, #1
    5e6e:	181b      	adds	r3, r3, r0
    5e70:	42ab      	cmp	r3, r5
    5e72:	d900      	bls.n	5e76 <__ssputs_r+0x3e>
    5e74:	001d      	movs	r5, r3
    5e76:	0553      	lsls	r3, r2, #21
    5e78:	d532      	bpl.n	5ee0 <__ssputs_r+0xa8>
    5e7a:	0029      	movs	r1, r5
    5e7c:	0038      	movs	r0, r7
    5e7e:	f7ff fe2d 	bl	5adc <_malloc_r>
    5e82:	1e06      	subs	r6, r0, #0
    5e84:	d109      	bne.n	5e9a <__ssputs_r+0x62>
    5e86:	230c      	movs	r3, #12
    5e88:	603b      	str	r3, [r7, #0]
    5e8a:	2340      	movs	r3, #64	; 0x40
    5e8c:	2001      	movs	r0, #1
    5e8e:	89a2      	ldrh	r2, [r4, #12]
    5e90:	4240      	negs	r0, r0
    5e92:	4313      	orrs	r3, r2
    5e94:	81a3      	strh	r3, [r4, #12]
    5e96:	b005      	add	sp, #20
    5e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e9a:	9a02      	ldr	r2, [sp, #8]
    5e9c:	6921      	ldr	r1, [r4, #16]
    5e9e:	f7ff fdc2 	bl	5a26 <memcpy>
    5ea2:	89a3      	ldrh	r3, [r4, #12]
    5ea4:	4a14      	ldr	r2, [pc, #80]	; (5ef8 <__ssputs_r+0xc0>)
    5ea6:	401a      	ands	r2, r3
    5ea8:	2380      	movs	r3, #128	; 0x80
    5eaa:	4313      	orrs	r3, r2
    5eac:	81a3      	strh	r3, [r4, #12]
    5eae:	9b02      	ldr	r3, [sp, #8]
    5eb0:	6126      	str	r6, [r4, #16]
    5eb2:	18f6      	adds	r6, r6, r3
    5eb4:	6026      	str	r6, [r4, #0]
    5eb6:	6165      	str	r5, [r4, #20]
    5eb8:	9e01      	ldr	r6, [sp, #4]
    5eba:	1aed      	subs	r5, r5, r3
    5ebc:	60a5      	str	r5, [r4, #8]
    5ebe:	9b01      	ldr	r3, [sp, #4]
    5ec0:	42b3      	cmp	r3, r6
    5ec2:	d200      	bcs.n	5ec6 <__ssputs_r+0x8e>
    5ec4:	001e      	movs	r6, r3
    5ec6:	0032      	movs	r2, r6
    5ec8:	9903      	ldr	r1, [sp, #12]
    5eca:	6820      	ldr	r0, [r4, #0]
    5ecc:	f000 fab9 	bl	6442 <memmove>
    5ed0:	68a3      	ldr	r3, [r4, #8]
    5ed2:	2000      	movs	r0, #0
    5ed4:	1b9b      	subs	r3, r3, r6
    5ed6:	60a3      	str	r3, [r4, #8]
    5ed8:	6823      	ldr	r3, [r4, #0]
    5eda:	199e      	adds	r6, r3, r6
    5edc:	6026      	str	r6, [r4, #0]
    5ede:	e7da      	b.n	5e96 <__ssputs_r+0x5e>
    5ee0:	002a      	movs	r2, r5
    5ee2:	0038      	movs	r0, r7
    5ee4:	f000 fabf 	bl	6466 <_realloc_r>
    5ee8:	1e06      	subs	r6, r0, #0
    5eea:	d1e0      	bne.n	5eae <__ssputs_r+0x76>
    5eec:	6921      	ldr	r1, [r4, #16]
    5eee:	0038      	movs	r0, r7
    5ef0:	f7ff fdaa 	bl	5a48 <_free_r>
    5ef4:	e7c7      	b.n	5e86 <__ssputs_r+0x4e>
    5ef6:	46c0      	nop			; (mov r8, r8)
    5ef8:	fffffb7f 	.word	0xfffffb7f

00005efc <_svfiprintf_r>:
    5efc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5efe:	b09f      	sub	sp, #124	; 0x7c
    5f00:	9002      	str	r0, [sp, #8]
    5f02:	9305      	str	r3, [sp, #20]
    5f04:	898b      	ldrh	r3, [r1, #12]
    5f06:	000f      	movs	r7, r1
    5f08:	0016      	movs	r6, r2
    5f0a:	061b      	lsls	r3, r3, #24
    5f0c:	d511      	bpl.n	5f32 <_svfiprintf_r+0x36>
    5f0e:	690b      	ldr	r3, [r1, #16]
    5f10:	2b00      	cmp	r3, #0
    5f12:	d10e      	bne.n	5f32 <_svfiprintf_r+0x36>
    5f14:	2140      	movs	r1, #64	; 0x40
    5f16:	f7ff fde1 	bl	5adc <_malloc_r>
    5f1a:	6038      	str	r0, [r7, #0]
    5f1c:	6138      	str	r0, [r7, #16]
    5f1e:	2800      	cmp	r0, #0
    5f20:	d105      	bne.n	5f2e <_svfiprintf_r+0x32>
    5f22:	230c      	movs	r3, #12
    5f24:	9a02      	ldr	r2, [sp, #8]
    5f26:	3801      	subs	r0, #1
    5f28:	6013      	str	r3, [r2, #0]
    5f2a:	b01f      	add	sp, #124	; 0x7c
    5f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f2e:	2340      	movs	r3, #64	; 0x40
    5f30:	617b      	str	r3, [r7, #20]
    5f32:	2300      	movs	r3, #0
    5f34:	ad06      	add	r5, sp, #24
    5f36:	616b      	str	r3, [r5, #20]
    5f38:	3320      	adds	r3, #32
    5f3a:	766b      	strb	r3, [r5, #25]
    5f3c:	3310      	adds	r3, #16
    5f3e:	76ab      	strb	r3, [r5, #26]
    5f40:	0034      	movs	r4, r6
    5f42:	7823      	ldrb	r3, [r4, #0]
    5f44:	2b00      	cmp	r3, #0
    5f46:	d147      	bne.n	5fd8 <_svfiprintf_r+0xdc>
    5f48:	1ba3      	subs	r3, r4, r6
    5f4a:	9304      	str	r3, [sp, #16]
    5f4c:	d00d      	beq.n	5f6a <_svfiprintf_r+0x6e>
    5f4e:	1ba3      	subs	r3, r4, r6
    5f50:	0032      	movs	r2, r6
    5f52:	0039      	movs	r1, r7
    5f54:	9802      	ldr	r0, [sp, #8]
    5f56:	f7ff ff6f 	bl	5e38 <__ssputs_r>
    5f5a:	1c43      	adds	r3, r0, #1
    5f5c:	d100      	bne.n	5f60 <_svfiprintf_r+0x64>
    5f5e:	e0b5      	b.n	60cc <_svfiprintf_r+0x1d0>
    5f60:	696a      	ldr	r2, [r5, #20]
    5f62:	9b04      	ldr	r3, [sp, #16]
    5f64:	4694      	mov	ip, r2
    5f66:	4463      	add	r3, ip
    5f68:	616b      	str	r3, [r5, #20]
    5f6a:	7823      	ldrb	r3, [r4, #0]
    5f6c:	2b00      	cmp	r3, #0
    5f6e:	d100      	bne.n	5f72 <_svfiprintf_r+0x76>
    5f70:	e0ac      	b.n	60cc <_svfiprintf_r+0x1d0>
    5f72:	2201      	movs	r2, #1
    5f74:	2300      	movs	r3, #0
    5f76:	4252      	negs	r2, r2
    5f78:	606a      	str	r2, [r5, #4]
    5f7a:	a902      	add	r1, sp, #8
    5f7c:	3254      	adds	r2, #84	; 0x54
    5f7e:	1852      	adds	r2, r2, r1
    5f80:	3401      	adds	r4, #1
    5f82:	602b      	str	r3, [r5, #0]
    5f84:	60eb      	str	r3, [r5, #12]
    5f86:	60ab      	str	r3, [r5, #8]
    5f88:	7013      	strb	r3, [r2, #0]
    5f8a:	65ab      	str	r3, [r5, #88]	; 0x58
    5f8c:	4e58      	ldr	r6, [pc, #352]	; (60f0 <_svfiprintf_r+0x1f4>)
    5f8e:	2205      	movs	r2, #5
    5f90:	7821      	ldrb	r1, [r4, #0]
    5f92:	0030      	movs	r0, r6
    5f94:	f000 fa4a 	bl	642c <memchr>
    5f98:	1c62      	adds	r2, r4, #1
    5f9a:	2800      	cmp	r0, #0
    5f9c:	d120      	bne.n	5fe0 <_svfiprintf_r+0xe4>
    5f9e:	6829      	ldr	r1, [r5, #0]
    5fa0:	06cb      	lsls	r3, r1, #27
    5fa2:	d504      	bpl.n	5fae <_svfiprintf_r+0xb2>
    5fa4:	2353      	movs	r3, #83	; 0x53
    5fa6:	ae02      	add	r6, sp, #8
    5fa8:	3020      	adds	r0, #32
    5faa:	199b      	adds	r3, r3, r6
    5fac:	7018      	strb	r0, [r3, #0]
    5fae:	070b      	lsls	r3, r1, #28
    5fb0:	d504      	bpl.n	5fbc <_svfiprintf_r+0xc0>
    5fb2:	2353      	movs	r3, #83	; 0x53
    5fb4:	202b      	movs	r0, #43	; 0x2b
    5fb6:	ae02      	add	r6, sp, #8
    5fb8:	199b      	adds	r3, r3, r6
    5fba:	7018      	strb	r0, [r3, #0]
    5fbc:	7823      	ldrb	r3, [r4, #0]
    5fbe:	2b2a      	cmp	r3, #42	; 0x2a
    5fc0:	d016      	beq.n	5ff0 <_svfiprintf_r+0xf4>
    5fc2:	2000      	movs	r0, #0
    5fc4:	210a      	movs	r1, #10
    5fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5fc8:	7822      	ldrb	r2, [r4, #0]
    5fca:	3a30      	subs	r2, #48	; 0x30
    5fcc:	2a09      	cmp	r2, #9
    5fce:	d955      	bls.n	607c <_svfiprintf_r+0x180>
    5fd0:	2800      	cmp	r0, #0
    5fd2:	d015      	beq.n	6000 <_svfiprintf_r+0x104>
    5fd4:	9309      	str	r3, [sp, #36]	; 0x24
    5fd6:	e013      	b.n	6000 <_svfiprintf_r+0x104>
    5fd8:	2b25      	cmp	r3, #37	; 0x25
    5fda:	d0b5      	beq.n	5f48 <_svfiprintf_r+0x4c>
    5fdc:	3401      	adds	r4, #1
    5fde:	e7b0      	b.n	5f42 <_svfiprintf_r+0x46>
    5fe0:	2301      	movs	r3, #1
    5fe2:	1b80      	subs	r0, r0, r6
    5fe4:	4083      	lsls	r3, r0
    5fe6:	6829      	ldr	r1, [r5, #0]
    5fe8:	0014      	movs	r4, r2
    5fea:	430b      	orrs	r3, r1
    5fec:	602b      	str	r3, [r5, #0]
    5fee:	e7cd      	b.n	5f8c <_svfiprintf_r+0x90>
    5ff0:	9b05      	ldr	r3, [sp, #20]
    5ff2:	1d18      	adds	r0, r3, #4
    5ff4:	681b      	ldr	r3, [r3, #0]
    5ff6:	9005      	str	r0, [sp, #20]
    5ff8:	2b00      	cmp	r3, #0
    5ffa:	db39      	blt.n	6070 <_svfiprintf_r+0x174>
    5ffc:	9309      	str	r3, [sp, #36]	; 0x24
    5ffe:	0014      	movs	r4, r2
    6000:	7823      	ldrb	r3, [r4, #0]
    6002:	2b2e      	cmp	r3, #46	; 0x2e
    6004:	d10b      	bne.n	601e <_svfiprintf_r+0x122>
    6006:	7863      	ldrb	r3, [r4, #1]
    6008:	1c62      	adds	r2, r4, #1
    600a:	2b2a      	cmp	r3, #42	; 0x2a
    600c:	d13e      	bne.n	608c <_svfiprintf_r+0x190>
    600e:	9b05      	ldr	r3, [sp, #20]
    6010:	3402      	adds	r4, #2
    6012:	1d1a      	adds	r2, r3, #4
    6014:	681b      	ldr	r3, [r3, #0]
    6016:	9205      	str	r2, [sp, #20]
    6018:	2b00      	cmp	r3, #0
    601a:	db34      	blt.n	6086 <_svfiprintf_r+0x18a>
    601c:	9307      	str	r3, [sp, #28]
    601e:	4e35      	ldr	r6, [pc, #212]	; (60f4 <_svfiprintf_r+0x1f8>)
    6020:	7821      	ldrb	r1, [r4, #0]
    6022:	2203      	movs	r2, #3
    6024:	0030      	movs	r0, r6
    6026:	f000 fa01 	bl	642c <memchr>
    602a:	2800      	cmp	r0, #0
    602c:	d006      	beq.n	603c <_svfiprintf_r+0x140>
    602e:	2340      	movs	r3, #64	; 0x40
    6030:	1b80      	subs	r0, r0, r6
    6032:	4083      	lsls	r3, r0
    6034:	682a      	ldr	r2, [r5, #0]
    6036:	3401      	adds	r4, #1
    6038:	4313      	orrs	r3, r2
    603a:	602b      	str	r3, [r5, #0]
    603c:	7821      	ldrb	r1, [r4, #0]
    603e:	2206      	movs	r2, #6
    6040:	482d      	ldr	r0, [pc, #180]	; (60f8 <_svfiprintf_r+0x1fc>)
    6042:	1c66      	adds	r6, r4, #1
    6044:	7629      	strb	r1, [r5, #24]
    6046:	f000 f9f1 	bl	642c <memchr>
    604a:	2800      	cmp	r0, #0
    604c:	d046      	beq.n	60dc <_svfiprintf_r+0x1e0>
    604e:	4b2b      	ldr	r3, [pc, #172]	; (60fc <_svfiprintf_r+0x200>)
    6050:	2b00      	cmp	r3, #0
    6052:	d12f      	bne.n	60b4 <_svfiprintf_r+0x1b8>
    6054:	6829      	ldr	r1, [r5, #0]
    6056:	9b05      	ldr	r3, [sp, #20]
    6058:	2207      	movs	r2, #7
    605a:	05c9      	lsls	r1, r1, #23
    605c:	d528      	bpl.n	60b0 <_svfiprintf_r+0x1b4>
    605e:	189b      	adds	r3, r3, r2
    6060:	4393      	bics	r3, r2
    6062:	3308      	adds	r3, #8
    6064:	9305      	str	r3, [sp, #20]
    6066:	696b      	ldr	r3, [r5, #20]
    6068:	9a03      	ldr	r2, [sp, #12]
    606a:	189b      	adds	r3, r3, r2
    606c:	616b      	str	r3, [r5, #20]
    606e:	e767      	b.n	5f40 <_svfiprintf_r+0x44>
    6070:	425b      	negs	r3, r3
    6072:	60eb      	str	r3, [r5, #12]
    6074:	2302      	movs	r3, #2
    6076:	430b      	orrs	r3, r1
    6078:	602b      	str	r3, [r5, #0]
    607a:	e7c0      	b.n	5ffe <_svfiprintf_r+0x102>
    607c:	434b      	muls	r3, r1
    607e:	3401      	adds	r4, #1
    6080:	189b      	adds	r3, r3, r2
    6082:	2001      	movs	r0, #1
    6084:	e7a0      	b.n	5fc8 <_svfiprintf_r+0xcc>
    6086:	2301      	movs	r3, #1
    6088:	425b      	negs	r3, r3
    608a:	e7c7      	b.n	601c <_svfiprintf_r+0x120>
    608c:	2300      	movs	r3, #0
    608e:	0014      	movs	r4, r2
    6090:	200a      	movs	r0, #10
    6092:	001a      	movs	r2, r3
    6094:	606b      	str	r3, [r5, #4]
    6096:	7821      	ldrb	r1, [r4, #0]
    6098:	3930      	subs	r1, #48	; 0x30
    609a:	2909      	cmp	r1, #9
    609c:	d903      	bls.n	60a6 <_svfiprintf_r+0x1aa>
    609e:	2b00      	cmp	r3, #0
    60a0:	d0bd      	beq.n	601e <_svfiprintf_r+0x122>
    60a2:	9207      	str	r2, [sp, #28]
    60a4:	e7bb      	b.n	601e <_svfiprintf_r+0x122>
    60a6:	4342      	muls	r2, r0
    60a8:	3401      	adds	r4, #1
    60aa:	1852      	adds	r2, r2, r1
    60ac:	2301      	movs	r3, #1
    60ae:	e7f2      	b.n	6096 <_svfiprintf_r+0x19a>
    60b0:	3307      	adds	r3, #7
    60b2:	e7d5      	b.n	6060 <_svfiprintf_r+0x164>
    60b4:	ab05      	add	r3, sp, #20
    60b6:	9300      	str	r3, [sp, #0]
    60b8:	003a      	movs	r2, r7
    60ba:	4b11      	ldr	r3, [pc, #68]	; (6100 <_svfiprintf_r+0x204>)
    60bc:	0029      	movs	r1, r5
    60be:	9802      	ldr	r0, [sp, #8]
    60c0:	e000      	b.n	60c4 <_svfiprintf_r+0x1c8>
    60c2:	bf00      	nop
    60c4:	9003      	str	r0, [sp, #12]
    60c6:	9b03      	ldr	r3, [sp, #12]
    60c8:	3301      	adds	r3, #1
    60ca:	d1cc      	bne.n	6066 <_svfiprintf_r+0x16a>
    60cc:	89bb      	ldrh	r3, [r7, #12]
    60ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
    60d0:	065b      	lsls	r3, r3, #25
    60d2:	d400      	bmi.n	60d6 <_svfiprintf_r+0x1da>
    60d4:	e729      	b.n	5f2a <_svfiprintf_r+0x2e>
    60d6:	2001      	movs	r0, #1
    60d8:	4240      	negs	r0, r0
    60da:	e726      	b.n	5f2a <_svfiprintf_r+0x2e>
    60dc:	ab05      	add	r3, sp, #20
    60de:	9300      	str	r3, [sp, #0]
    60e0:	003a      	movs	r2, r7
    60e2:	4b07      	ldr	r3, [pc, #28]	; (6100 <_svfiprintf_r+0x204>)
    60e4:	0029      	movs	r1, r5
    60e6:	9802      	ldr	r0, [sp, #8]
    60e8:	f000 f87a 	bl	61e0 <_printf_i>
    60ec:	e7ea      	b.n	60c4 <_svfiprintf_r+0x1c8>
    60ee:	46c0      	nop			; (mov r8, r8)
    60f0:	00007476 	.word	0x00007476
    60f4:	0000747c 	.word	0x0000747c
    60f8:	00007480 	.word	0x00007480
    60fc:	00000000 	.word	0x00000000
    6100:	00005e39 	.word	0x00005e39

00006104 <_printf_common>:
    6104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6106:	0015      	movs	r5, r2
    6108:	9301      	str	r3, [sp, #4]
    610a:	688a      	ldr	r2, [r1, #8]
    610c:	690b      	ldr	r3, [r1, #16]
    610e:	9000      	str	r0, [sp, #0]
    6110:	000c      	movs	r4, r1
    6112:	4293      	cmp	r3, r2
    6114:	da00      	bge.n	6118 <_printf_common+0x14>
    6116:	0013      	movs	r3, r2
    6118:	0022      	movs	r2, r4
    611a:	602b      	str	r3, [r5, #0]
    611c:	3243      	adds	r2, #67	; 0x43
    611e:	7812      	ldrb	r2, [r2, #0]
    6120:	2a00      	cmp	r2, #0
    6122:	d001      	beq.n	6128 <_printf_common+0x24>
    6124:	3301      	adds	r3, #1
    6126:	602b      	str	r3, [r5, #0]
    6128:	6823      	ldr	r3, [r4, #0]
    612a:	069b      	lsls	r3, r3, #26
    612c:	d502      	bpl.n	6134 <_printf_common+0x30>
    612e:	682b      	ldr	r3, [r5, #0]
    6130:	3302      	adds	r3, #2
    6132:	602b      	str	r3, [r5, #0]
    6134:	2706      	movs	r7, #6
    6136:	6823      	ldr	r3, [r4, #0]
    6138:	401f      	ands	r7, r3
    613a:	d027      	beq.n	618c <_printf_common+0x88>
    613c:	0023      	movs	r3, r4
    613e:	3343      	adds	r3, #67	; 0x43
    6140:	781b      	ldrb	r3, [r3, #0]
    6142:	1e5a      	subs	r2, r3, #1
    6144:	4193      	sbcs	r3, r2
    6146:	6822      	ldr	r2, [r4, #0]
    6148:	0692      	lsls	r2, r2, #26
    614a:	d430      	bmi.n	61ae <_printf_common+0xaa>
    614c:	0022      	movs	r2, r4
    614e:	9901      	ldr	r1, [sp, #4]
    6150:	3243      	adds	r2, #67	; 0x43
    6152:	9800      	ldr	r0, [sp, #0]
    6154:	9e08      	ldr	r6, [sp, #32]
    6156:	47b0      	blx	r6
    6158:	1c43      	adds	r3, r0, #1
    615a:	d025      	beq.n	61a8 <_printf_common+0xa4>
    615c:	2306      	movs	r3, #6
    615e:	6820      	ldr	r0, [r4, #0]
    6160:	682a      	ldr	r2, [r5, #0]
    6162:	68e1      	ldr	r1, [r4, #12]
    6164:	4003      	ands	r3, r0
    6166:	2500      	movs	r5, #0
    6168:	2b04      	cmp	r3, #4
    616a:	d103      	bne.n	6174 <_printf_common+0x70>
    616c:	1a8d      	subs	r5, r1, r2
    616e:	43eb      	mvns	r3, r5
    6170:	17db      	asrs	r3, r3, #31
    6172:	401d      	ands	r5, r3
    6174:	68a3      	ldr	r3, [r4, #8]
    6176:	6922      	ldr	r2, [r4, #16]
    6178:	4293      	cmp	r3, r2
    617a:	dd01      	ble.n	6180 <_printf_common+0x7c>
    617c:	1a9b      	subs	r3, r3, r2
    617e:	18ed      	adds	r5, r5, r3
    6180:	2700      	movs	r7, #0
    6182:	42bd      	cmp	r5, r7
    6184:	d120      	bne.n	61c8 <_printf_common+0xc4>
    6186:	2000      	movs	r0, #0
    6188:	e010      	b.n	61ac <_printf_common+0xa8>
    618a:	3701      	adds	r7, #1
    618c:	68e3      	ldr	r3, [r4, #12]
    618e:	682a      	ldr	r2, [r5, #0]
    6190:	1a9b      	subs	r3, r3, r2
    6192:	429f      	cmp	r7, r3
    6194:	dad2      	bge.n	613c <_printf_common+0x38>
    6196:	0022      	movs	r2, r4
    6198:	2301      	movs	r3, #1
    619a:	3219      	adds	r2, #25
    619c:	9901      	ldr	r1, [sp, #4]
    619e:	9800      	ldr	r0, [sp, #0]
    61a0:	9e08      	ldr	r6, [sp, #32]
    61a2:	47b0      	blx	r6
    61a4:	1c43      	adds	r3, r0, #1
    61a6:	d1f0      	bne.n	618a <_printf_common+0x86>
    61a8:	2001      	movs	r0, #1
    61aa:	4240      	negs	r0, r0
    61ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    61ae:	2030      	movs	r0, #48	; 0x30
    61b0:	18e1      	adds	r1, r4, r3
    61b2:	3143      	adds	r1, #67	; 0x43
    61b4:	7008      	strb	r0, [r1, #0]
    61b6:	0021      	movs	r1, r4
    61b8:	1c5a      	adds	r2, r3, #1
    61ba:	3145      	adds	r1, #69	; 0x45
    61bc:	7809      	ldrb	r1, [r1, #0]
    61be:	18a2      	adds	r2, r4, r2
    61c0:	3243      	adds	r2, #67	; 0x43
    61c2:	3302      	adds	r3, #2
    61c4:	7011      	strb	r1, [r2, #0]
    61c6:	e7c1      	b.n	614c <_printf_common+0x48>
    61c8:	0022      	movs	r2, r4
    61ca:	2301      	movs	r3, #1
    61cc:	321a      	adds	r2, #26
    61ce:	9901      	ldr	r1, [sp, #4]
    61d0:	9800      	ldr	r0, [sp, #0]
    61d2:	9e08      	ldr	r6, [sp, #32]
    61d4:	47b0      	blx	r6
    61d6:	1c43      	adds	r3, r0, #1
    61d8:	d0e6      	beq.n	61a8 <_printf_common+0xa4>
    61da:	3701      	adds	r7, #1
    61dc:	e7d1      	b.n	6182 <_printf_common+0x7e>
	...

000061e0 <_printf_i>:
    61e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    61e2:	b08b      	sub	sp, #44	; 0x2c
    61e4:	9206      	str	r2, [sp, #24]
    61e6:	000a      	movs	r2, r1
    61e8:	3243      	adds	r2, #67	; 0x43
    61ea:	9307      	str	r3, [sp, #28]
    61ec:	9005      	str	r0, [sp, #20]
    61ee:	9204      	str	r2, [sp, #16]
    61f0:	7e0a      	ldrb	r2, [r1, #24]
    61f2:	000c      	movs	r4, r1
    61f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    61f6:	2a6e      	cmp	r2, #110	; 0x6e
    61f8:	d100      	bne.n	61fc <_printf_i+0x1c>
    61fa:	e08f      	b.n	631c <_printf_i+0x13c>
    61fc:	d817      	bhi.n	622e <_printf_i+0x4e>
    61fe:	2a63      	cmp	r2, #99	; 0x63
    6200:	d02c      	beq.n	625c <_printf_i+0x7c>
    6202:	d808      	bhi.n	6216 <_printf_i+0x36>
    6204:	2a00      	cmp	r2, #0
    6206:	d100      	bne.n	620a <_printf_i+0x2a>
    6208:	e099      	b.n	633e <_printf_i+0x15e>
    620a:	2a58      	cmp	r2, #88	; 0x58
    620c:	d054      	beq.n	62b8 <_printf_i+0xd8>
    620e:	0026      	movs	r6, r4
    6210:	3642      	adds	r6, #66	; 0x42
    6212:	7032      	strb	r2, [r6, #0]
    6214:	e029      	b.n	626a <_printf_i+0x8a>
    6216:	2a64      	cmp	r2, #100	; 0x64
    6218:	d001      	beq.n	621e <_printf_i+0x3e>
    621a:	2a69      	cmp	r2, #105	; 0x69
    621c:	d1f7      	bne.n	620e <_printf_i+0x2e>
    621e:	6821      	ldr	r1, [r4, #0]
    6220:	681a      	ldr	r2, [r3, #0]
    6222:	0608      	lsls	r0, r1, #24
    6224:	d523      	bpl.n	626e <_printf_i+0x8e>
    6226:	1d11      	adds	r1, r2, #4
    6228:	6019      	str	r1, [r3, #0]
    622a:	6815      	ldr	r5, [r2, #0]
    622c:	e025      	b.n	627a <_printf_i+0x9a>
    622e:	2a73      	cmp	r2, #115	; 0x73
    6230:	d100      	bne.n	6234 <_printf_i+0x54>
    6232:	e088      	b.n	6346 <_printf_i+0x166>
    6234:	d808      	bhi.n	6248 <_printf_i+0x68>
    6236:	2a6f      	cmp	r2, #111	; 0x6f
    6238:	d029      	beq.n	628e <_printf_i+0xae>
    623a:	2a70      	cmp	r2, #112	; 0x70
    623c:	d1e7      	bne.n	620e <_printf_i+0x2e>
    623e:	2220      	movs	r2, #32
    6240:	6809      	ldr	r1, [r1, #0]
    6242:	430a      	orrs	r2, r1
    6244:	6022      	str	r2, [r4, #0]
    6246:	e003      	b.n	6250 <_printf_i+0x70>
    6248:	2a75      	cmp	r2, #117	; 0x75
    624a:	d020      	beq.n	628e <_printf_i+0xae>
    624c:	2a78      	cmp	r2, #120	; 0x78
    624e:	d1de      	bne.n	620e <_printf_i+0x2e>
    6250:	0022      	movs	r2, r4
    6252:	2178      	movs	r1, #120	; 0x78
    6254:	3245      	adds	r2, #69	; 0x45
    6256:	7011      	strb	r1, [r2, #0]
    6258:	4a6c      	ldr	r2, [pc, #432]	; (640c <_printf_i+0x22c>)
    625a:	e030      	b.n	62be <_printf_i+0xde>
    625c:	000e      	movs	r6, r1
    625e:	681a      	ldr	r2, [r3, #0]
    6260:	3642      	adds	r6, #66	; 0x42
    6262:	1d11      	adds	r1, r2, #4
    6264:	6019      	str	r1, [r3, #0]
    6266:	6813      	ldr	r3, [r2, #0]
    6268:	7033      	strb	r3, [r6, #0]
    626a:	2301      	movs	r3, #1
    626c:	e079      	b.n	6362 <_printf_i+0x182>
    626e:	0649      	lsls	r1, r1, #25
    6270:	d5d9      	bpl.n	6226 <_printf_i+0x46>
    6272:	1d11      	adds	r1, r2, #4
    6274:	6019      	str	r1, [r3, #0]
    6276:	2300      	movs	r3, #0
    6278:	5ed5      	ldrsh	r5, [r2, r3]
    627a:	2d00      	cmp	r5, #0
    627c:	da03      	bge.n	6286 <_printf_i+0xa6>
    627e:	232d      	movs	r3, #45	; 0x2d
    6280:	9a04      	ldr	r2, [sp, #16]
    6282:	426d      	negs	r5, r5
    6284:	7013      	strb	r3, [r2, #0]
    6286:	4b62      	ldr	r3, [pc, #392]	; (6410 <_printf_i+0x230>)
    6288:	270a      	movs	r7, #10
    628a:	9303      	str	r3, [sp, #12]
    628c:	e02f      	b.n	62ee <_printf_i+0x10e>
    628e:	6820      	ldr	r0, [r4, #0]
    6290:	6819      	ldr	r1, [r3, #0]
    6292:	0605      	lsls	r5, r0, #24
    6294:	d503      	bpl.n	629e <_printf_i+0xbe>
    6296:	1d08      	adds	r0, r1, #4
    6298:	6018      	str	r0, [r3, #0]
    629a:	680d      	ldr	r5, [r1, #0]
    629c:	e005      	b.n	62aa <_printf_i+0xca>
    629e:	0640      	lsls	r0, r0, #25
    62a0:	d5f9      	bpl.n	6296 <_printf_i+0xb6>
    62a2:	680d      	ldr	r5, [r1, #0]
    62a4:	1d08      	adds	r0, r1, #4
    62a6:	6018      	str	r0, [r3, #0]
    62a8:	b2ad      	uxth	r5, r5
    62aa:	4b59      	ldr	r3, [pc, #356]	; (6410 <_printf_i+0x230>)
    62ac:	2708      	movs	r7, #8
    62ae:	9303      	str	r3, [sp, #12]
    62b0:	2a6f      	cmp	r2, #111	; 0x6f
    62b2:	d018      	beq.n	62e6 <_printf_i+0x106>
    62b4:	270a      	movs	r7, #10
    62b6:	e016      	b.n	62e6 <_printf_i+0x106>
    62b8:	3145      	adds	r1, #69	; 0x45
    62ba:	700a      	strb	r2, [r1, #0]
    62bc:	4a54      	ldr	r2, [pc, #336]	; (6410 <_printf_i+0x230>)
    62be:	9203      	str	r2, [sp, #12]
    62c0:	681a      	ldr	r2, [r3, #0]
    62c2:	6821      	ldr	r1, [r4, #0]
    62c4:	1d10      	adds	r0, r2, #4
    62c6:	6018      	str	r0, [r3, #0]
    62c8:	6815      	ldr	r5, [r2, #0]
    62ca:	0608      	lsls	r0, r1, #24
    62cc:	d522      	bpl.n	6314 <_printf_i+0x134>
    62ce:	07cb      	lsls	r3, r1, #31
    62d0:	d502      	bpl.n	62d8 <_printf_i+0xf8>
    62d2:	2320      	movs	r3, #32
    62d4:	4319      	orrs	r1, r3
    62d6:	6021      	str	r1, [r4, #0]
    62d8:	2710      	movs	r7, #16
    62da:	2d00      	cmp	r5, #0
    62dc:	d103      	bne.n	62e6 <_printf_i+0x106>
    62de:	2320      	movs	r3, #32
    62e0:	6822      	ldr	r2, [r4, #0]
    62e2:	439a      	bics	r2, r3
    62e4:	6022      	str	r2, [r4, #0]
    62e6:	0023      	movs	r3, r4
    62e8:	2200      	movs	r2, #0
    62ea:	3343      	adds	r3, #67	; 0x43
    62ec:	701a      	strb	r2, [r3, #0]
    62ee:	6863      	ldr	r3, [r4, #4]
    62f0:	60a3      	str	r3, [r4, #8]
    62f2:	2b00      	cmp	r3, #0
    62f4:	db5c      	blt.n	63b0 <_printf_i+0x1d0>
    62f6:	2204      	movs	r2, #4
    62f8:	6821      	ldr	r1, [r4, #0]
    62fa:	4391      	bics	r1, r2
    62fc:	6021      	str	r1, [r4, #0]
    62fe:	2d00      	cmp	r5, #0
    6300:	d158      	bne.n	63b4 <_printf_i+0x1d4>
    6302:	9e04      	ldr	r6, [sp, #16]
    6304:	2b00      	cmp	r3, #0
    6306:	d064      	beq.n	63d2 <_printf_i+0x1f2>
    6308:	0026      	movs	r6, r4
    630a:	9b03      	ldr	r3, [sp, #12]
    630c:	3642      	adds	r6, #66	; 0x42
    630e:	781b      	ldrb	r3, [r3, #0]
    6310:	7033      	strb	r3, [r6, #0]
    6312:	e05e      	b.n	63d2 <_printf_i+0x1f2>
    6314:	0648      	lsls	r0, r1, #25
    6316:	d5da      	bpl.n	62ce <_printf_i+0xee>
    6318:	b2ad      	uxth	r5, r5
    631a:	e7d8      	b.n	62ce <_printf_i+0xee>
    631c:	6809      	ldr	r1, [r1, #0]
    631e:	681a      	ldr	r2, [r3, #0]
    6320:	0608      	lsls	r0, r1, #24
    6322:	d505      	bpl.n	6330 <_printf_i+0x150>
    6324:	1d11      	adds	r1, r2, #4
    6326:	6019      	str	r1, [r3, #0]
    6328:	6813      	ldr	r3, [r2, #0]
    632a:	6962      	ldr	r2, [r4, #20]
    632c:	601a      	str	r2, [r3, #0]
    632e:	e006      	b.n	633e <_printf_i+0x15e>
    6330:	0649      	lsls	r1, r1, #25
    6332:	d5f7      	bpl.n	6324 <_printf_i+0x144>
    6334:	1d11      	adds	r1, r2, #4
    6336:	6019      	str	r1, [r3, #0]
    6338:	6813      	ldr	r3, [r2, #0]
    633a:	8aa2      	ldrh	r2, [r4, #20]
    633c:	801a      	strh	r2, [r3, #0]
    633e:	2300      	movs	r3, #0
    6340:	9e04      	ldr	r6, [sp, #16]
    6342:	6123      	str	r3, [r4, #16]
    6344:	e054      	b.n	63f0 <_printf_i+0x210>
    6346:	681a      	ldr	r2, [r3, #0]
    6348:	1d11      	adds	r1, r2, #4
    634a:	6019      	str	r1, [r3, #0]
    634c:	6816      	ldr	r6, [r2, #0]
    634e:	2100      	movs	r1, #0
    6350:	6862      	ldr	r2, [r4, #4]
    6352:	0030      	movs	r0, r6
    6354:	f000 f86a 	bl	642c <memchr>
    6358:	2800      	cmp	r0, #0
    635a:	d001      	beq.n	6360 <_printf_i+0x180>
    635c:	1b80      	subs	r0, r0, r6
    635e:	6060      	str	r0, [r4, #4]
    6360:	6863      	ldr	r3, [r4, #4]
    6362:	6123      	str	r3, [r4, #16]
    6364:	2300      	movs	r3, #0
    6366:	9a04      	ldr	r2, [sp, #16]
    6368:	7013      	strb	r3, [r2, #0]
    636a:	e041      	b.n	63f0 <_printf_i+0x210>
    636c:	6923      	ldr	r3, [r4, #16]
    636e:	0032      	movs	r2, r6
    6370:	9906      	ldr	r1, [sp, #24]
    6372:	9805      	ldr	r0, [sp, #20]
    6374:	9d07      	ldr	r5, [sp, #28]
    6376:	47a8      	blx	r5
    6378:	1c43      	adds	r3, r0, #1
    637a:	d043      	beq.n	6404 <_printf_i+0x224>
    637c:	6823      	ldr	r3, [r4, #0]
    637e:	2500      	movs	r5, #0
    6380:	079b      	lsls	r3, r3, #30
    6382:	d40f      	bmi.n	63a4 <_printf_i+0x1c4>
    6384:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6386:	68e0      	ldr	r0, [r4, #12]
    6388:	4298      	cmp	r0, r3
    638a:	da3d      	bge.n	6408 <_printf_i+0x228>
    638c:	0018      	movs	r0, r3
    638e:	e03b      	b.n	6408 <_printf_i+0x228>
    6390:	0022      	movs	r2, r4
    6392:	2301      	movs	r3, #1
    6394:	3219      	adds	r2, #25
    6396:	9906      	ldr	r1, [sp, #24]
    6398:	9805      	ldr	r0, [sp, #20]
    639a:	9e07      	ldr	r6, [sp, #28]
    639c:	47b0      	blx	r6
    639e:	1c43      	adds	r3, r0, #1
    63a0:	d030      	beq.n	6404 <_printf_i+0x224>
    63a2:	3501      	adds	r5, #1
    63a4:	68e3      	ldr	r3, [r4, #12]
    63a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    63a8:	1a9b      	subs	r3, r3, r2
    63aa:	429d      	cmp	r5, r3
    63ac:	dbf0      	blt.n	6390 <_printf_i+0x1b0>
    63ae:	e7e9      	b.n	6384 <_printf_i+0x1a4>
    63b0:	2d00      	cmp	r5, #0
    63b2:	d0a9      	beq.n	6308 <_printf_i+0x128>
    63b4:	9e04      	ldr	r6, [sp, #16]
    63b6:	0028      	movs	r0, r5
    63b8:	0039      	movs	r1, r7
    63ba:	f7ff faa1 	bl	5900 <__aeabi_uidivmod>
    63be:	9b03      	ldr	r3, [sp, #12]
    63c0:	3e01      	subs	r6, #1
    63c2:	5c5b      	ldrb	r3, [r3, r1]
    63c4:	0028      	movs	r0, r5
    63c6:	7033      	strb	r3, [r6, #0]
    63c8:	0039      	movs	r1, r7
    63ca:	f7ff fa13 	bl	57f4 <__udivsi3>
    63ce:	1e05      	subs	r5, r0, #0
    63d0:	d1f1      	bne.n	63b6 <_printf_i+0x1d6>
    63d2:	2f08      	cmp	r7, #8
    63d4:	d109      	bne.n	63ea <_printf_i+0x20a>
    63d6:	6823      	ldr	r3, [r4, #0]
    63d8:	07db      	lsls	r3, r3, #31
    63da:	d506      	bpl.n	63ea <_printf_i+0x20a>
    63dc:	6863      	ldr	r3, [r4, #4]
    63de:	6922      	ldr	r2, [r4, #16]
    63e0:	4293      	cmp	r3, r2
    63e2:	dc02      	bgt.n	63ea <_printf_i+0x20a>
    63e4:	2330      	movs	r3, #48	; 0x30
    63e6:	3e01      	subs	r6, #1
    63e8:	7033      	strb	r3, [r6, #0]
    63ea:	9b04      	ldr	r3, [sp, #16]
    63ec:	1b9b      	subs	r3, r3, r6
    63ee:	6123      	str	r3, [r4, #16]
    63f0:	9b07      	ldr	r3, [sp, #28]
    63f2:	aa09      	add	r2, sp, #36	; 0x24
    63f4:	9300      	str	r3, [sp, #0]
    63f6:	0021      	movs	r1, r4
    63f8:	9b06      	ldr	r3, [sp, #24]
    63fa:	9805      	ldr	r0, [sp, #20]
    63fc:	f7ff fe82 	bl	6104 <_printf_common>
    6400:	1c43      	adds	r3, r0, #1
    6402:	d1b3      	bne.n	636c <_printf_i+0x18c>
    6404:	2001      	movs	r0, #1
    6406:	4240      	negs	r0, r0
    6408:	b00b      	add	sp, #44	; 0x2c
    640a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    640c:	00007498 	.word	0x00007498
    6410:	00007487 	.word	0x00007487

00006414 <__ascii_wctomb>:
    6414:	1e0b      	subs	r3, r1, #0
    6416:	d004      	beq.n	6422 <__ascii_wctomb+0xe>
    6418:	2aff      	cmp	r2, #255	; 0xff
    641a:	d904      	bls.n	6426 <__ascii_wctomb+0x12>
    641c:	238a      	movs	r3, #138	; 0x8a
    641e:	6003      	str	r3, [r0, #0]
    6420:	3b8b      	subs	r3, #139	; 0x8b
    6422:	0018      	movs	r0, r3
    6424:	4770      	bx	lr
    6426:	700a      	strb	r2, [r1, #0]
    6428:	2301      	movs	r3, #1
    642a:	e7fa      	b.n	6422 <__ascii_wctomb+0xe>

0000642c <memchr>:
    642c:	b2c9      	uxtb	r1, r1
    642e:	1882      	adds	r2, r0, r2
    6430:	4290      	cmp	r0, r2
    6432:	d101      	bne.n	6438 <memchr+0xc>
    6434:	2000      	movs	r0, #0
    6436:	4770      	bx	lr
    6438:	7803      	ldrb	r3, [r0, #0]
    643a:	428b      	cmp	r3, r1
    643c:	d0fb      	beq.n	6436 <memchr+0xa>
    643e:	3001      	adds	r0, #1
    6440:	e7f6      	b.n	6430 <memchr+0x4>

00006442 <memmove>:
    6442:	b510      	push	{r4, lr}
    6444:	4288      	cmp	r0, r1
    6446:	d902      	bls.n	644e <memmove+0xc>
    6448:	188b      	adds	r3, r1, r2
    644a:	4298      	cmp	r0, r3
    644c:	d308      	bcc.n	6460 <memmove+0x1e>
    644e:	2300      	movs	r3, #0
    6450:	429a      	cmp	r2, r3
    6452:	d007      	beq.n	6464 <memmove+0x22>
    6454:	5ccc      	ldrb	r4, [r1, r3]
    6456:	54c4      	strb	r4, [r0, r3]
    6458:	3301      	adds	r3, #1
    645a:	e7f9      	b.n	6450 <memmove+0xe>
    645c:	5c8b      	ldrb	r3, [r1, r2]
    645e:	5483      	strb	r3, [r0, r2]
    6460:	3a01      	subs	r2, #1
    6462:	d2fb      	bcs.n	645c <memmove+0x1a>
    6464:	bd10      	pop	{r4, pc}

00006466 <_realloc_r>:
    6466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6468:	0007      	movs	r7, r0
    646a:	000d      	movs	r5, r1
    646c:	0016      	movs	r6, r2
    646e:	2900      	cmp	r1, #0
    6470:	d105      	bne.n	647e <_realloc_r+0x18>
    6472:	0011      	movs	r1, r2
    6474:	f7ff fb32 	bl	5adc <_malloc_r>
    6478:	0004      	movs	r4, r0
    647a:	0020      	movs	r0, r4
    647c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    647e:	2a00      	cmp	r2, #0
    6480:	d103      	bne.n	648a <_realloc_r+0x24>
    6482:	f7ff fae1 	bl	5a48 <_free_r>
    6486:	0034      	movs	r4, r6
    6488:	e7f7      	b.n	647a <_realloc_r+0x14>
    648a:	f000 f812 	bl	64b2 <_malloc_usable_size_r>
    648e:	002c      	movs	r4, r5
    6490:	4286      	cmp	r6, r0
    6492:	d9f2      	bls.n	647a <_realloc_r+0x14>
    6494:	0031      	movs	r1, r6
    6496:	0038      	movs	r0, r7
    6498:	f7ff fb20 	bl	5adc <_malloc_r>
    649c:	1e04      	subs	r4, r0, #0
    649e:	d0ec      	beq.n	647a <_realloc_r+0x14>
    64a0:	0029      	movs	r1, r5
    64a2:	0032      	movs	r2, r6
    64a4:	f7ff fabf 	bl	5a26 <memcpy>
    64a8:	0029      	movs	r1, r5
    64aa:	0038      	movs	r0, r7
    64ac:	f7ff facc 	bl	5a48 <_free_r>
    64b0:	e7e3      	b.n	647a <_realloc_r+0x14>

000064b2 <_malloc_usable_size_r>:
    64b2:	1f0b      	subs	r3, r1, #4
    64b4:	681b      	ldr	r3, [r3, #0]
    64b6:	1f18      	subs	r0, r3, #4
    64b8:	2b00      	cmp	r3, #0
    64ba:	da01      	bge.n	64c0 <_malloc_usable_size_r+0xe>
    64bc:	580b      	ldr	r3, [r1, r0]
    64be:	18c0      	adds	r0, r0, r3
    64c0:	4770      	bx	lr
	...

000064c4 <STATUS_LED>:
    64c4:	0202 0202 0101 0000 0102 0102 6544 7562     ............Debu
    64d4:	2067 6f6c 2067 6e69 7469 6169 696c 657a     g log initialize
    64e4:	2e64 0020 6157 6374 6468 676f 6920 696e     d. .Watchdog ini
    64f4:	6974 6c61 7a69 6465 202e 0000 6954 656d     tialized. ..Time
    6504:	7372 6920 696e 6974 6c61 7a69 6465 202e     rs initialized. 
    6514:	0000 0000 4946 4f46 6920 696e 6974 6c61     ....FIFO initial
    6524:	7a69 6465 202e 0000 6c46 7361 2068 6e69     ized. ..Flash in
    6534:	7469 6169 696c 657a 2e64 0020 7445 6568     itialized. .Ethe
    6544:	6e72 7465 6920 696e 6974 6c61 7a69 6465     rnet initialized
    6554:	202e 0000 6957 6946 6920 696e 6974 6c61     . ..WiFi initial
    6564:	7a69 6465 202e 0000 7041 6c70 6369 7461     ized. ..Applicat
    6574:	6f69 206e 6e69 7469 6320 6d6f 6c70 7465     ion init complet
    6584:	2e65 0020 6e45 6574 6972 676e 6d20 6961     e. .Entering mai
    6594:	206e 7473 7461 2065 616d 6863 6e69 2e65     n state machine.
    65a4:	2e2e 0020 6f50 6577 2072 7075 4520 6874     .. .Power up Eth
    65b4:	7265 656e 2e74 0020 7445 6568 6e72 7465     ernet. .Ethernet
    65c4:	6c20 6e69 206b 7075 202e 0000 6f50 6577      link up. ..Powe
    65d4:	2072 6f64 6e77 5720 6669 2e69 0020 0000     r down Wifi. ...
    65e4:	7445 6568 6e72 7465 6c20 6e69 206b 6f64     Ethernet link do
    65f4:	6e77 202e 0000 0000 6f50 6577 2072 6f64     wn. ....Power do
    6604:	6e77 4520 6874 7265 656e 2e74 0020 0000     wn Ethernet. ...
    6614:	6f50 6577 2072 7075 5720 4669 2e69 0020     Power up WiFi. .
    6624:	0930 0000 08a8 0000 08ce 0000 08e8 0000     0...............
    6634:	094e 0000 0984 0000 09ba 0000 0b34 0000     N...........4...
    6644:	0b48 0000 0c12 0000 0c2a 0000 0efc 0000     H.......*.......
    6654:	4344 2d41 3030 3030 0031 0000 4e44 2053     DCA-00001...DNS 
    6664:	5453 5441 2045 5328 4154 5452 0029 0000     STATE (START)...
    6674:	4e44 2053 5453 5441 2045 4f28 4550 294e     DNS STATE (OPEN)
    6684:	0000 0000 4e44 2053 5453 5441 2045 5128     ....DNS STATE (Q
    6694:	4555 5952 0029 0000 4e44 2053 5453 5441     UERY)...DNS STAT
    66a4:	2045 4728 5445 462d 4941 294c 0000 0000     E (GET-FAIL)....
    66b4:	4e44 2053 5453 5441 2045 4728 5445 442d     DNS STATE (GET-D
    66c4:	4e4f 2945 0000 0000 4e44 2053 5453 5441     ONE)....DNS STAT
    66d4:	2045 4628 4941 294c 0000 0000 4e44 2053     E (FAIL)....DNS 
    66e4:	5453 5441 2045 4428 4e4f 2945 0000 0000     STATE (DONE)....
    66f4:	7525 002d 4e44 2053 6552 6f6d 6576 4820     %u-.DNS Remove H
    6704:	736f 2074 4243 0000 7325 7220 7365 6c6f     ost CB..%s resol
    6714:	6576 2064 6f74 4920 2050 6441 7264 7365     ved to IP Addres
    6724:	2073 7830 5825 202e 0000 0000 6146 6c69     s 0x%X. ....Fail
    6734:	6465 7220 7365 6c6f 6976 676e 2520 2e73     ed resolving %s.
    6744:	0020 0000 7768 642e 7261 6f6d 6772 6d61      ...hw.darmorgam
    6754:	2e7a 6163 0000 0000 6e55 6261 656c 7420     z.ca....Unable t
    6764:	206f 6572 6f73 766c 2e65 0020 6f53 6b63     o resolve. .Sock
    6774:	7465 2820 4f4e 2054 2041 4f53 4b43 5445     et (NOT A SOCKET
    6784:	0029 0000 7542 6c69 2064 6f63 6d6d 6e6f     )...Build common
    6794:	6820 6165 6564 2e72 0020 0000 704f 6e65      header. ...Open
    67a4:	7220 6d65 746f 2065 6f73 6b63 7465 202e      remote socket. 
    67b4:	0000 0000 7525 0000 6425 0000 0a0d 0a0d     ....%u..%d......
    67c4:	0000 0000 6d45 7470 2079 6170 6c79 616f     ....Empty payloa
    67d4:	2e64 0020 6f53 6b63 7465 6320 6f6c 6573     d. .Socket close
    67e4:	0064 0000 6553 646e 6e69 2067 6425 6220     d...Sending %d b
    67f4:	7479 7365 6f20 2066 6164 6174 7420 206f     ytes of data to 
    6804:	6573 7672 7265 202e 0000 0000 7325 0000     server. ....%s..
    6814:	6146 6c69 6465 7320 6e65 6964 676e 7320     Failed sending s
    6824:	6765 656d 746e 202e 0000 0000 6146 6c69     egment. ....Fail
    6834:	6465 7320 6e65 6964 676e 202e 0000 0000     ed sending. ....
    6844:	6552 6563 7669 6465 2520 2064 7962 6574     Received %d byte
    6854:	2073 666f 6420 7461 2061 7266 6d6f 7320     s of data from s
    6864:	7265 6576 2e72 0020 6552 7073 6e6f 6573     erver. .Response
    6874:	7320 6375 6563 7373 7566 6c6c 2079 6170      successfully pa
    6884:	7372 6465 202e 0000 5245 4f52 2052 202d     rsed. ..ERROR - 
    6894:	6e69 6176 696c 2064 6572 7073 6e6f 6573     invalid response
    68a4:	2021 0000 6f53 6b63 7465 2820 4f53 4b43     ! ..Socket (SOCK
    68b4:	5445 4320 4f4c 4953 474e 0029 6e49 6176     ET CLOSING).Inva
    68c4:	696c 2064 6572 6f6d 6574 7320 636f 656b     lid remote socke
    68d4:	2074 7473 7461 2165 0020 0000 6f48 7473     t state! ...Host
    68e4:	614e 656d 252d 0073 5445 4548 4e52 5445     Name-%s.ETHERNET
    68f4:	5320 4154 4554 4320 4e4f 4946 2047 4928      STATE CONFIG (I
    6904:	2050 4843 4e41 4547 2944 0000 5049 4120     P CHANGED)..IP A
    6914:	7373 6769 656e 2e64 0020 0000 252c 2d75     ssigned. ...,%u-
    6924:	0000 0000 5445 4548 4e52 5445 5320 4154     ....ETHERNET STA
    6934:	4554 4920 4c44 2045 4928 2050 4843 4e41     TE IDLE (IP CHAN
    6944:	4547 2944 0000 0000 5049 6120 6464 6572     GED)....IP addre
    6954:	7373 6320 6168 676e 6465 202e 0000 0000     ss changed. ....
    6964:	5445 4548 4e52 5445 5320 4154 4554 4520     ETHERNET STATE E
    6974:	5252 524f 0000 0000 6553 7672 7265 6e20     RROR....Server n
    6984:	746f 7220 7365 6f70 646e 6e69 2e67 0020     ot responding. .
    6994:	7250 636f 7365 2073 4e44 2053 7571 7265     Process DNS quer
    69a4:	2079 6572 7073 6e6f 6573 202e 0000 0000     y response. ....
    69b4:	6e55 7865 6570 7463 6465 7420 6172 736e     Unexpected trans
    69c4:	6361 6974 6e6f 4920 2e44 0020 5448 5054     action ID. .HTTP
    69d4:	312f 312e 3320 3230 4620 756f 646e 0a0d     /1.1 302 Found..
    69e4:	0000 0000 5448 5054 312f 312e 3320 3130     ....HTTP/1.1 301
    69f4:	4d20 766f 6465 5020 7265 616d 656e 746e      Moved Permanent
    6a04:	796c 0a0d 0000 0000 6f4c 6163 6974 6e6f     ly......Location
    6a14:	203a 0000 6f43 746e 6e65 2d74 654c 676e     : ..Content-Leng
    6a24:	6874 203a 0d30 000a 6f43 6e6e 6365 6974     th: 0...Connecti
    6a34:	6e6f 203a 6c63 736f 0d65 000a 5448 5054     on: close...HTTP
    6a44:	312f 312e 3420 3430 4e20 746f 4620 756f     /1.1 404 Not Fou
    6a54:	646e 0a0d 0000 0000 5448 5054 312f 312e     nd......HTTP/1.1
    6a64:	3220 3030 4f20 0d4b 000a 0000 6341 6563      200 OK.....Acce
    6a74:	7373 432d 6e6f 7274 6c6f 412d 6c6c 776f     ss-Control-Allow
    6a84:	4f2d 6972 6967 3a6e 2a20 0a0d 0000 0000     -Origin: *......
    6a94:	6f43 746e 6e65 2d74 7954 6570 203a 6574     Content-Type: te
    6aa4:	7478 702f 616c 6e69 0a0d 0000 6f43 746e     xt/plain....Cont
    6ab4:	6e65 2d74 654c 676e 6874 203a 2020 2020     ent-Length:     
    6ac4:	0a0d 0000 257b 7d73 0000 0000 6341 6563     ....{%s}....Acce
    6ad4:	7373 432d 6e6f 7274 6c6f 412d 6c6c 776f     ss-Control-Allow
    6ae4:	4f2d 6972 6967 3a6e 2a20 0a0d 6341 6563     -Origin: *..Acce
    6af4:	7373 432d 6e6f 7274 6c6f 412d 6c6c 776f     ss-Control-Allow
    6b04:	4d2d 7465 6f68 7364 203a 4f50 5453 202c     -Methods: POST, 
    6b14:	4547 0d54 410a 6363 7365 2d73 6f43 746e     GET..Access-Cont
    6b24:	6f72 2d6c 6c41 6f6c 2d77 6548 6461 7265     rol-Allow-Header
    6b34:	3a73 6320 6e6f 6574 746e 542d 7079 2c65     s: content-Type,
    6b44:	6f20 6972 6967 2c6e 7820 722d 7165 6575      origin, x-reque
    6b54:	7473 6465 772d 7469 0d68 000a 6e69 6564     sted-with...inde
    6b64:	2e78 6870 0070 0000 4f50 5453 2f20 7325     x.php...POST /%s
    6b74:	4820 5454 2f50 2e31 0d31 000a 6f48 7473      HTTP/1.1...Host
    6b84:	203a 7325 0a0d 0000 6f43 746e 6e65 2d74     : %s....Content-
    6b94:	7954 6570 203a 6574 7478 702f 616c 6e69     Type: text/plain
    6ba4:	203b 6863 7261 6573 3d74 7475 2d66 0d38     ; charset=utf-8.
    6bb4:	000a 0000 3032 2030 4b4f 0000 6f43 746e     ....200 OK..Cont
    6bc4:	6e65 2d74 654c 676e 6874 203a 0000 0000     ent-Length: ....
    6bd4:	6e55 6261 656c 7420 206f 6966 646e 3220     Unable to find 2
    6be4:	3030 4f20 2e4b 0020 6e55 6261 656c 7420     00 OK. .Unable t
    6bf4:	206f 6966 646e 7320 6174 7472 6f20 2066     o find start of 
    6c04:	6f63 746e 6e65 2e74 0020 0000 6f43 746e     content. ...Cont
    6c14:	6e65 2074 696d 7373 6e69 2067 726f 6920     ent missing or i
    6c24:	636e 6d6f 6c70 7465 2e65 0020 2e2e 682f     ncomplete. .../h
    6c34:	6c61 692f 636e 756c 6564 682f 6c61 775f     al/include/hal_w
    6c44:	7464 682e 0000 0000 2e2e 682f 6c61 732f     dt.h....../hal/s
    6c54:	6372 682f 6c61 665f 616c 6873 632e 0000     rc/hal_flash.c..
    6c64:	2e2e 682f 6c61 732f 6372 682f 6c61 695f     ../hal/src/hal_i
    6c74:	2e6f 0063 2e2e 682f 6c61 732f 6372 682f     o.c.../hal/src/h
    6c84:	6c61 735f 6970 6d5f 735f 6e79 2e63 0063     al_spi_m_sync.c.
    6c94:	2e2e 682f 6c61 732f 6372 682f 6c61 745f     ../hal/src/hal_t
    6ca4:	6d69 7265 632e 0000 2e2e 682f 6c61 752f     imer.c..../hal/u
    6cb4:	6974 736c 732f 6372 752f 6974 736c 6c5f     tils/src/utils_l
    6cc4:	7369 2e74 0063 0000                         ist.c...

00006ccc <_map>:
    6ccc:	000e 0000 000e 0000 000f 0000 000f 0000     ................
    6cdc:	2e2e 682f 6c70 652f 6369 682f 6c70 655f     ../hpl/eic/hpl_e
    6cec:	6369 632e 0000 0000 2e2e 682f 6c70 6e2f     ic.c....../hpl/n
    6cfc:	6d76 7463 6c72 682f 6c70 6e5f 6d76 7463     vmctrl/hpl_nvmct
    6d0c:	6c72 632e 0000 0000                         rl.c....

00006d14 <_usarts>:
	...

00006d24 <_i2cms>:
	...

00006d3c <_i2css>:
	...

00006d4c <sercomspi_regs>:
    6d4c:	000c 0013 0000 0002 0000 0000 0000 0000     ................
    6d5c:	000c 0013 0000 0002 0000 0000 0000 0100     ................
    6d6c:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
    6d7c:	5f6c 6573 6372 6d6f 632e 0000               l_sercom.c..

00006d88 <_tcs>:
    6d88:	0000 0768 0000 0000 0000 0000 0000 0000     ..h.............
    6d98:	0000 0000 0004 0368 0000 0000 0000 0000     ......h.........
    6da8:	03e8 0000 0000 0000 2e2e 682f 6c70 742f     ........../hpl/t
    6db8:	2f63 7068 5f6c 6374 632e 0000 2e2e 682f     c/hpl_tc.c..../h
    6dc8:	6c70 772f 7464 682f 6c70 775f 7464 632e     pl/wdt/hpl_wdt.c
    6dd8:	0000 0000 3fde 0000 3f44 0000 3fde 0000     .....?..D?...?..
    6de8:	3f6a 0000 3fde 0000 3fde 0000 3f74 0000     j?...?...?..t?..
    6df8:	3fde 0000 3fde 0000 3fde 0000 3fde 0000     .?...?...?...?..
    6e08:	3fde 0000 3fde 0000 3fde 0000 3fde 0000     .?...?...?...?..
    6e18:	3fde 0000 3fde 0000 3fde 0000 3fde 0000     .?...?...?...?..
    6e28:	3fde 0000 3fde 0000 3fde 0000 3fde 0000     .?...?...?...?..
    6e38:	3fde 0000 3fde 0000 3fde 0000 3fde 0000     .?...?...?...?..
    6e48:	3fde 0000 3fde 0000 3fde 0000 3fde 0000     .?...?...?...?..
    6e58:	3fde 0000 3fde 0000 3fde 0000 3fde 0000     .?...?...?...?..
    6e68:	3fde 0000 3fde 0000 3fde 0000 3fde 0000     .?...?...?...?..
    6e78:	3fde 0000 3fde 0000 3fde 0000 3fde 0000     .?...?...?...?..
    6e88:	3fde 0000 3fde 0000 3fde 0000 3fde 0000     .?...?...?...?..
    6e98:	3fde 0000 3fde 0000 3fde 0000 3fde 0000     .?...?...?...?..
    6ea8:	3f92 0000 3fde 0000 3faa 0000 3fa0 0000     .?...?...?...?..

00006eb8 <xidValue>:
    6eb8:	4850 4d43                                   PHCM

00006ebc <dhcpName>:
    6ebc:	434d 5048 4520 4854 5245 454e 0054 0000     MCHP ETHERNET...
    6ecc:	5049 4820 6165 6564 2072 7277 6e6f 2067     IP Header wrong 
    6edc:	6b63 6d73 0000 0000 7872 6920 6d63 0070     cksm....rx icmp.
    6eec:	6369 706d 7720 6f72 676e 6320 736b 206d     icmp wrong cksm 
    6efc:	203a 7825 0000 0000 7872 7520 7064 0000     : %x....rx udp..
    6f0c:	7872 7420 7063 0000 7872 6220 6461 7420     rx tcp..rx bad t
    6f1c:	7063 6320 736b 006d 7069 6120 6464 6572     cp cksm.ip addre
    6f2c:	7373 3a20 2520 0058 4544 5453 4920 2050     ss : %X.DEST IP 
    6f3c:	4f4e 2054 414d 4354 4548 0044               NOT MATCHED.

00006f48 <macAddress>:
    6f48:	de00 00ad efbe 0000                         ........

00006f50 <broadcastMAC>:
    6f50:	ffff ffff ffff 0000 4c56 4e41 5020 6361     ........VLAN Pac
    6f60:	656b 2074 7244 706f 6570 0064 5852 4120     ket Dropped.RX A
    6f70:	5052 3456 5020 6361 656b 0074 5852 4920     RPV4 Packet.RX I
    6f80:	5650 2034 6150 6b63 7465 0000 5049 3656     PV4 Packet..IPV6
    6f90:	5020 6361 656b 2074 7244 706f 6570 0064      Packet Dropped.
    6fa0:	7825 3a20 2520 0064 50a8 0000 4994 0000     %x : %d..P...I..
    6fb0:	4a00 0000 4bae 0000 4d66 0000 4eb2 0000     .J...K..fM...N..
    6fc0:	4f5c 0000 50f4 0000 4fba 0000 4fce 0000     \O...P...O...O..
    6fd0:	503a 0000 4b2e 0000 510a 0000 510a 0000     :P...K...Q...Q..
    6fe0:	4a0e 0000 4ac6 0000 4a50 0000 510a 0000     .J...J..PJ...Q..
    6ff0:	510a 0000 510a 0000 4ba4 0000 4ba4 0000     .Q...Q...K...K..
    7000:	510a 0000 4b42 0000 4c5e 0000 5112 0000     .Q..BK..^L...Q..
    7010:	5112 0000 5112 0000 4c08 0000 4bbc 0000     .Q...Q...L...K..
    7020:	5112 0000 5112 0000 5112 0000 4c88 0000     .Q...Q...Q...L..
    7030:	4c88 0000 5112 0000 4d20 0000 4e14 0000     .L...Q.. M...N..
    7040:	5116 0000 5116 0000 5116 0000 4d74 0000     .Q...Q...Q..tM..
    7050:	5116 0000 4e34 0000 4e2e 0000 5116 0000     .Q..4N...N...Q..
    7060:	4e70 0000 4e70 0000 5116 0000 4e7a 0000     pN..pN...Q..zN..
    7070:	6374 5f70 6170 6b63 7465 7320 6e65 0074     tcp_packet sent.
    7080:	6374 5f70 6170 7372 6f65 7470 203a 6162     tcp_parseopt: ba
    7090:	2064 706f 6974 6e6f 7320 7a69 2065 656c     d option size le
    70a0:	676e 6874 0000 0000 6374 5f70 6170 7372     ngth....tcp_pars
    70b0:	6f65 7470 203a 746f 6568 0072 6374 5f70     eopt: other.tcp_
    70c0:	6170 7372 6f65 7470 203a 6162 2064 706f     parseopt: bad op
    70d0:	6974 6e6f 6c20 6e65 7467 0068 6374 5f70     tion length.tcp_
    70e0:	6170 7372 6f65 7470 203a 6162 2064 656c     parseopt: bad le
    70f0:	676e 6874 0000 0000 494c 5453 4e45 203a     ngth....LISTEN: 
    7100:	7872 735f 6e79 0000 494c 5453 4e45 203a     rx_syn..LISTEN: 
    7110:	6c63 736f 0065 0000 5953 5f4e 4553 544e     close...SYN_SENT
    7120:	203a 7872 735f 6e79 0000 0000 5953 5f4e     : rx_syn....SYN_
    7130:	4553 544e 203a 7872 735f 6e79 6361 006b     SENT: rx_synack.
    7140:	5953 5f4e 4553 544e 203a 7872 615f 6b63     SYN_SENT: rx_ack
    7150:	0000 0000 5953 5f4e 4553 544e 203a 6c63     ....SYN_SENT: cl
    7160:	736f 0065 5953 5f4e 4553 544e 203a 6974     ose.SYN_SENT: ti
    7170:	656d 756f 0074 0000 5953 5f4e 4552 4543     meout...SYN_RECE
    7180:	5649 4445 203a 7872 735f 6e79 6361 006b     IVED: rx_synack.
    7190:	5953 5f4e 4552 4543 5649 4445 203a 7872     SYN_RECEIVED: rx
    71a0:	615f 6b63 0000 0000 5953 5f4e 4552 4543     _ack....SYN_RECE
    71b0:	5649 4445 203a 6c63 736f 0065 5953 5f4e     IVED: close.SYN_
    71c0:	4552 4543 5649 4445 203a 7220 5f78 7372     RECEIVED:  rx_rs
    71d0:	0074 0000 7372 2074 6573 2071 4b4f 0000     t...rst seq OK..
    71e0:	5953 5f4e 4552 4543 5649 4445 203a 7420     SYN_RECEIVED:  t
    71f0:	6d69 6f65 7475 0000 5345 4154 4c42 5349     imeout..ESTABLIS
    7200:	4548 3a44 7220 5f78 6361 006b 5345 4154     HED: rx_ack.ESTA
    7210:	4c42 5349 4548 3a44 6320 6f6c 6573 0000     BLISHED: close..
    7220:	5345 4154 4c42 5349 4548 3a44 7220 5f78     ESTABLISHED: rx_
    7230:	6966 616e 6b63 0000 5345 4154 4c42 5349     finack..ESTABLIS
    7240:	4548 3a44 7220 5f78 6966 006e 5345 4154     HED: rx_fin.ESTA
    7250:	4c42 5349 4548 3a44 2020 6974 656d 756f     BLISHED:  timeou
    7260:	0074 0000 4946 5f4e 4157 5449 315f 203a     t...FIN_WAIT_1: 
    7270:	7872 665f 6e69 0000 4946 5f4e 4157 5449     rx_fin..FIN_WAIT
    7280:	315f 203a 7872 615f 6b63 0000 4946 5f4e     _1: rx_ack..FIN_
    7290:	4157 5449 315f 203a 7872 665f 6e69 6361     WAIT_1: rx_finac
    72a0:	006b 0000 4946 5f4e 4157 5449 315f 203a     k...FIN_WAIT_1: 
    72b0:	7420 6d69 6f65 7475 0000 0000 4946 5f4e      timeout....FIN_
    72c0:	4157 5449 325f 203a 7872 665f 6e69 0000     WAIT_2: rx_fin..
    72d0:	4946 5f4e 4157 5449 325f 203a 7420 6d69     FIN_WAIT_2:  tim
    72e0:	6f65 7475 0000 0000 4c43 534f 4e49 3a47     eout....CLOSING:
    72f0:	7220 5f78 6361 006b 414c 5453 415f 4b43      rx_ack.LAST_ACK
    7300:	203a 7872 615f 6b63 0000 0000 6954 656d     : rx_ack....Time
    7310:	5720 6961 0074 0000 4c43 534f 4445 203a      Wait...CLOSED: 
    7320:	6361 6974 6576 6f5f 6570 006e 4c43 534f     active_open.CLOS
    7330:	4445 203a 6170 7373 7669 5f65 706f 6e65     ED: passive_open
    7340:	0000 0000 6f66 6e75 2064 7973 266e 6361     ....found syn&ac
    7350:	006b 0000 6f66 6e75 2064 7973 006e 0000     k...found syn...
    7360:	6f66 6e75 2064 6966 266e 6361 006b 0000     found fin&ack...
    7370:	6f66 6e75 2064 6966 006e 0000 6f66 6e75     found fin...foun
    7380:	2064 7372 2674 6361 006b 0000 6f66 6e75     d rst&ack...foun
    7390:	2064 7372 0074 0000 6f66 6e75 2064 6361     d rst...found ac
    73a0:	006b 0000 6f63 666e 7375 6465 0000 0000     k...confused....
    73b0:	6b70 2074 7264 706f 6570 3a64 6220 6461     pkt dropped: bad
    73c0:	6f20 7470 6f69 736e 0000 0000 6374 5f70      options....tcp_
    73d0:	6962 646e 0000 0000 6374 5f70 696c 7473     bind....tcp_list
    73e0:	6e65 0000 6374 5f70 6c63 736f 0065 0000     en..tcp_close...
    73f0:	6374 2070 6974 656d 756f 0074               tcp timeout.

000073fc <UDP_CallBackTable>:
    73fc:	1000 0000 132d 0000 0044 0000 3edd 0000     ....-...D....>..

0000740c <__sf_fake_stderr>:
	...

0000742c <__sf_fake_stdin>:
	...

0000744c <__sf_fake_stdout>:
	...
    746c:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
    747c:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
    748c:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
    749c:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

000074a9 <_ctype_>:
    74a9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    74b9:	2020 2020 2020 2020 2020 2020 2020 2020                     
    74c9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    74d9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    74e9:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    74f9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    7509:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    7519:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    7529:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000075ac <_init>:
    75ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    75ae:	46c0      	nop			; (mov r8, r8)
    75b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    75b2:	bc08      	pop	{r3}
    75b4:	469e      	mov	lr, r3
    75b6:	4770      	bx	lr

000075b8 <__init_array_start>:
    75b8:	000000cd 	.word	0x000000cd

000075bc <_fini>:
    75bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    75be:	46c0      	nop			; (mov r8, r8)
    75c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    75c2:	bc08      	pop	{r3}
    75c4:	469e      	mov	lr, r3
    75c6:	4770      	bx	lr

000075c8 <__fini_array_start>:
    75c8:	000000a5 	.word	0x000000a5
