
DCA_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008314  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001d4  20000000  00008314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000049ac  200001d4  000084e8  000201d4  2**2
                  ALLOC
  3 .stack        00002000  20004b80  0000ce94  000201d4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004d5d4  00000000  00000000  00020255  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007e05  00000000  00000000  0006d829  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00015810  00000000  00000000  0007562e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001440  00000000  00000000  0008ae3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001370  00000000  00000000  0008c27e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d0c8  00000000  00000000  0008d5ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000247ac  00000000  00000000  000aa6b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005b9a7  00000000  00000000  000cee62  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000039bc  00000000  00000000  0012a80c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
const mac48Address_t broadcastMAC = {{0xff, 0xff, 0xff, 0xff, 0xff, 0xff}};

const mac48Address_t *MAC_getAddress(void)
{
	return &macAddress;
}
       0:	80 6b 00 20 b1 1d 00 00 ad 1d 00 00 ad 1d 00 00     .k. ............
	...
      2c:	ad 1d 00 00 00 00 00 00 00 00 00 00 ad 1d 00 00     ................
      3c:	ad 1d 00 00 ad 1d 00 00 ad 1d 00 00 ad 1d 00 00     ................
      4c:	ad 1d 00 00 4d 2d 00 00 39 31 00 00 ad 1d 00 00     ....M-..91......
      5c:	ad 1d 00 00 ad 1d 00 00 ad 1d 00 00 ad 1d 00 00     ................
	...
      74:	a5 37 00 00 ad 1d 00 00 ad 1d 00 00 ad 1d 00 00     .7..............
      84:	b9 37 00 00 ad 1d 00 00 00 00 00 00 00 00 00 00     .7..............
      94:	ad 1d 00 00 ad 1d 00 00 ad 1d 00 00 ad 1d 00 00     ................

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	200001d4 	.word	0x200001d4
      c4:	00000000 	.word	0x00000000
      c8:	00008314 	.word	0x00008314

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	200001d8 	.word	0x200001d8
      f8:	00008314 	.word	0x00008314
      fc:	00008314 	.word	0x00008314
     100:	00000000 	.word	0x00000000

00000104 <_LedColorControl>:



void _LedColorControl(eLED_COLOR color) {
    // Set the LEDs according to input colour enumeration
    switch(color) {
     104:	2801      	cmp	r0, #1
     106:	d00d      	beq.n	124 <_LedColorControl+0x20>
     108:	2800      	cmp	r0, #0
     10a:	d004      	beq.n	116 <_LedColorControl+0x12>
     10c:	2802      	cmp	r0, #2
     10e:	d010      	beq.n	132 <_LedColorControl+0x2e>
     110:	2803      	cmp	r0, #3
     112:	d015      	beq.n	140 <_LedColorControl+0x3c>
            gpio_set_pin_level(LED_GREEN, true);
            break;
        default:
            break;
    }
}
     114:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     116:	23c0      	movs	r3, #192	; 0xc0
     118:	05db      	lsls	r3, r3, #23
     11a:	2208      	movs	r2, #8
     11c:	615a      	str	r2, [r3, #20]
     11e:	3a04      	subs	r2, #4
     120:	615a      	str	r2, [r3, #20]
     122:	e7f7      	b.n	114 <_LedColorControl+0x10>
     124:	23c0      	movs	r3, #192	; 0xc0
     126:	05db      	lsls	r3, r3, #23
     128:	2208      	movs	r2, #8
     12a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     12c:	3a04      	subs	r2, #4
     12e:	619a      	str	r2, [r3, #24]
     130:	e7f0      	b.n	114 <_LedColorControl+0x10>
     132:	23c0      	movs	r3, #192	; 0xc0
     134:	05db      	lsls	r3, r3, #23
     136:	2208      	movs	r2, #8
     138:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     13a:	3a04      	subs	r2, #4
     13c:	615a      	str	r2, [r3, #20]
     13e:	e7e9      	b.n	114 <_LedColorControl+0x10>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     140:	23c0      	movs	r3, #192	; 0xc0
     142:	05db      	lsls	r3, r3, #23
     144:	2208      	movs	r2, #8
     146:	619a      	str	r2, [r3, #24]
     148:	3a04      	subs	r2, #4
     14a:	619a      	str	r2, [r3, #24]
     14c:	e7e2      	b.n	114 <_LedColorControl+0x10>
	...

00000150 <App_SetStatus>:
    Timer_SetTimer(TIMER_APP_LED_HOLD, TIMEOUT_LED_HOLD);
}


void App_SetStatus(eStatusCode code) {
    s_u8StatusCode = code;
     150:	4b01      	ldr	r3, [pc, #4]	; (158 <App_SetStatus+0x8>)
     152:	7098      	strb	r0, [r3, #2]
}
     154:	4770      	bx	lr
     156:	46c0      	nop			; (mov r8, r8)
     158:	200001f0 	.word	0x200001f0

0000015c <App_GetStatus>:

eStatusCode App_GetStatus(void) {
    return s_u8StatusCode;
     15c:	4b01      	ldr	r3, [pc, #4]	; (164 <App_GetStatus+0x8>)
     15e:	7898      	ldrb	r0, [r3, #2]
}
     160:	4770      	bx	lr
     162:	46c0      	nop			; (mov r8, r8)
     164:	200001f0 	.word	0x200001f0

00000168 <_LedControl>:
void _LedControl(void) {
     168:	b510      	push	{r4, lr}
    eStatusCode code = App_GetStatus();
     16a:	4b07      	ldr	r3, [pc, #28]	; (188 <_LedControl+0x20>)
     16c:	4798      	blx	r3
    eLED_COLOR color =	STATUS_LED[code][(index++)%LED_SEQUENCE_MAXCNT];
     16e:	4b07      	ldr	r3, [pc, #28]	; (18c <_LedControl+0x24>)
     170:	78da      	ldrb	r2, [r3, #3]
     172:	1c51      	adds	r1, r2, #1
     174:	70d9      	strb	r1, [r3, #3]
     176:	2303      	movs	r3, #3
     178:	4013      	ands	r3, r2
     17a:	0082      	lsls	r2, r0, #2
     17c:	4804      	ldr	r0, [pc, #16]	; (190 <_LedControl+0x28>)
     17e:	1880      	adds	r0, r0, r2
     180:	5cc0      	ldrb	r0, [r0, r3]
    _LedColorControl(color);
     182:	4b04      	ldr	r3, [pc, #16]	; (194 <_LedControl+0x2c>)
     184:	4798      	blx	r3
}
     186:	bd10      	pop	{r4, pc}
     188:	0000015d 	.word	0x0000015d
     18c:	200001f0 	.word	0x200001f0
     190:	00007090 	.word	0x00007090
     194:	00000105 	.word	0x00000105

00000198 <_One_Second_Timer_Callback>:
static void _One_Second_Timer_Callback(void) {
     198:	b510      	push	{r4, lr}
    if (fSkipPump==false) Timer_Pump();
     19a:	4b06      	ldr	r3, [pc, #24]	; (1b4 <_One_Second_Timer_Callback+0x1c>)
     19c:	4798      	blx	r3
    if (Timer_GetTimer(TIMER_APP_LED_HOLD)==0) _LedControl();
     19e:	4b06      	ldr	r3, [pc, #24]	; (1b8 <_One_Second_Timer_Callback+0x20>)
     1a0:	8818      	ldrh	r0, [r3, #0]
     1a2:	4b06      	ldr	r3, [pc, #24]	; (1bc <_One_Second_Timer_Callback+0x24>)
     1a4:	4798      	blx	r3
     1a6:	2800      	cmp	r0, #0
     1a8:	d000      	beq.n	1ac <_One_Second_Timer_Callback+0x14>
}
     1aa:	bd10      	pop	{r4, pc}
    if (Timer_GetTimer(TIMER_APP_LED_HOLD)==0) _LedControl();
     1ac:	4b04      	ldr	r3, [pc, #16]	; (1c0 <_One_Second_Timer_Callback+0x28>)
     1ae:	4798      	blx	r3
}
     1b0:	e7fb      	b.n	1aa <_One_Second_Timer_Callback+0x12>
     1b2:	46c0      	nop			; (mov r8, r8)
     1b4:	00001c15 	.word	0x00001c15
     1b8:	200001f0 	.word	0x200001f0
     1bc:	00001bd9 	.word	0x00001bd9
     1c0:	00000169 	.word	0x00000169

000001c4 <_AddToFifo_EventStartup>:

bool _AddToFifo_EventStartup(void) {
     1c4:	b510      	push	{r4, lr}
     1c6:	b082      	sub	sp, #8
	uint32_t u32Timestamp;
    Timestamp_GetTimestamp(&u32Timestamp);
     1c8:	a801      	add	r0, sp, #4
     1ca:	4b09      	ldr	r3, [pc, #36]	; (1f0 <_AddToFifo_EventStartup+0x2c>)
     1cc:	4798      	blx	r3

	// String to add to buffer
	sprintf(g_acBuffer64, "Event:System:Startup:%d", u32Timestamp);
     1ce:	4c09      	ldr	r4, [pc, #36]	; (1f4 <_AddToFifo_EventStartup+0x30>)
     1d0:	9a01      	ldr	r2, [sp, #4]
     1d2:	4909      	ldr	r1, [pc, #36]	; (1f8 <_AddToFifo_EventStartup+0x34>)
     1d4:	0020      	movs	r0, r4
     1d6:	4b09      	ldr	r3, [pc, #36]	; (1fc <_AddToFifo_EventStartup+0x38>)
     1d8:	4798      	blx	r3

	uint8_t u8TotalLength;
	u8TotalLength = strlen(g_acBuffer64);
     1da:	0020      	movs	r0, r4
     1dc:	4b08      	ldr	r3, [pc, #32]	; (200 <_AddToFifo_EventStartup+0x3c>)
     1de:	4798      	blx	r3
	
    // Push to the command FIFO
    CmdFifo_Push(&g_acBuffer64[0], u8TotalLength);
     1e0:	21ff      	movs	r1, #255	; 0xff
     1e2:	4001      	ands	r1, r0
     1e4:	0020      	movs	r0, r4
     1e6:	4b07      	ldr	r3, [pc, #28]	; (204 <_AddToFifo_EventStartup+0x40>)
     1e8:	4798      	blx	r3
	

    return true;
}
     1ea:	2001      	movs	r0, #1
     1ec:	b002      	add	sp, #8
     1ee:	bd10      	pop	{r4, pc}
     1f0:	00001cfd 	.word	0x00001cfd
     1f4:	200008e0 	.word	0x200008e0
     1f8:	0000709c 	.word	0x0000709c
     1fc:	00006789 	.word	0x00006789
     200:	000067cd 	.word	0x000067cd
     204:	00000819 	.word	0x00000819

00000208 <_AddToFifo_Heartbeat>:

bool _AddToFifo_Heartbeat(void) {
     208:	b510      	push	{r4, lr}
     20a:	b082      	sub	sp, #8
	uint32_t u32Timestamp;
    Timestamp_GetTimestamp(&u32Timestamp);
     20c:	a801      	add	r0, sp, #4
     20e:	4b09      	ldr	r3, [pc, #36]	; (234 <_AddToFifo_Heartbeat+0x2c>)
     210:	4798      	blx	r3

	// String to add to buffer
	sprintf(g_acBuffer64, "Event:System:Heartbeat:%d", u32Timestamp);
     212:	4c09      	ldr	r4, [pc, #36]	; (238 <_AddToFifo_Heartbeat+0x30>)
     214:	9a01      	ldr	r2, [sp, #4]
     216:	4909      	ldr	r1, [pc, #36]	; (23c <_AddToFifo_Heartbeat+0x34>)
     218:	0020      	movs	r0, r4
     21a:	4b09      	ldr	r3, [pc, #36]	; (240 <_AddToFifo_Heartbeat+0x38>)
     21c:	4798      	blx	r3

	uint8_t u8TotalLength;
	u8TotalLength = strlen(g_acBuffer64);
     21e:	0020      	movs	r0, r4
     220:	4b08      	ldr	r3, [pc, #32]	; (244 <_AddToFifo_Heartbeat+0x3c>)
     222:	4798      	blx	r3
	
    // Push to the command FIFO
    CmdFifo_Push(&g_acBuffer64[0], u8TotalLength);
     224:	21ff      	movs	r1, #255	; 0xff
     226:	4001      	ands	r1, r0
     228:	0020      	movs	r0, r4
     22a:	4b07      	ldr	r3, [pc, #28]	; (248 <_AddToFifo_Heartbeat+0x40>)
     22c:	4798      	blx	r3
	

    return true;
}
     22e:	2001      	movs	r0, #1
     230:	b002      	add	sp, #8
     232:	bd10      	pop	{r4, pc}
     234:	00001cfd 	.word	0x00001cfd
     238:	200008e0 	.word	0x200008e0
     23c:	000070b4 	.word	0x000070b4
     240:	00006789 	.word	0x00006789
     244:	000067cd 	.word	0x000067cd
     248:	00000819 	.word	0x00000819

0000024c <DcaApp_Entry>:
void DcaApp_Entry(void) {
     24c:	b570      	push	{r4, r5, r6, lr}
	DEBUG_INFO("Entering main state machine... ");
     24e:	4836      	ldr	r0, [pc, #216]	; (328 <DcaApp_Entry+0xdc>)
     250:	4b36      	ldr	r3, [pc, #216]	; (32c <DcaApp_Entry+0xe0>)
     252:	4798      	blx	r3
	App_SetStatus(STATUS_OK);
     254:	2001      	movs	r0, #1
     256:	4b36      	ldr	r3, [pc, #216]	; (330 <DcaApp_Entry+0xe4>)
     258:	4798      	blx	r3
     25a:	e022      	b.n	2a2 <DcaApp_Entry+0x56>
            if (fLinked==true) {
     25c:	2d00      	cmp	r5, #0
     25e:	d041      	beq.n	2e4 <DcaApp_Entry+0x98>
                DEBUG_INFO("Ethernet link up. ");
     260:	4834      	ldr	r0, [pc, #208]	; (334 <DcaApp_Entry+0xe8>)
     262:	4c32      	ldr	r4, [pc, #200]	; (32c <DcaApp_Entry+0xe0>)
     264:	47a0      	blx	r4
                DEBUG_INFO("Power down Wifi. ");
     266:	4834      	ldr	r0, [pc, #208]	; (338 <DcaApp_Entry+0xec>)
     268:	47a0      	blx	r4
                s_fUseWifi = false;
     26a:	2300      	movs	r3, #0
     26c:	4a33      	ldr	r2, [pc, #204]	; (33c <DcaApp_Entry+0xf0>)
     26e:	7113      	strb	r3, [r2, #4]
			s_fCheckLink = false;
     270:	4a33      	ldr	r2, [pc, #204]	; (340 <DcaApp_Entry+0xf4>)
     272:	7013      	strb	r3, [r2, #0]
		if (s_fUseWifi==true) {} // Wifi_PumpEvents();
     274:	4b31      	ldr	r3, [pc, #196]	; (33c <DcaApp_Entry+0xf0>)
     276:	791b      	ldrb	r3, [r3, #4]
		if (s_fUseWifi==false) Ethernet_PumpEvents();
     278:	2b00      	cmp	r3, #0
     27a:	d03d      	beq.n	2f8 <DcaApp_Entry+0xac>
        if (CmdFifo_GetByteCount()>0) {
     27c:	4b31      	ldr	r3, [pc, #196]	; (344 <DcaApp_Entry+0xf8>)
     27e:	4798      	blx	r3
     280:	2800      	cmp	r0, #0
     282:	dd3c      	ble.n	2fe <DcaApp_Entry+0xb2>
            fTimeToSend = true;
     284:	2401      	movs	r4, #1
		if (Timer_GetTimer(TIMER_APP_HEARTBEAT)==0) {
     286:	4b2d      	ldr	r3, [pc, #180]	; (33c <DcaApp_Entry+0xf0>)
     288:	88d8      	ldrh	r0, [r3, #6]
     28a:	4b2f      	ldr	r3, [pc, #188]	; (348 <DcaApp_Entry+0xfc>)
     28c:	4798      	blx	r3
     28e:	2800      	cmp	r0, #0
     290:	d037      	beq.n	302 <DcaApp_Entry+0xb6>
        Timer_SetTimer(TIMER_APP_ENWI_LINK_CHECK, 300);
     292:	4b2a      	ldr	r3, [pc, #168]	; (33c <DcaApp_Entry+0xf0>)
     294:	8918      	ldrh	r0, [r3, #8]
     296:	2196      	movs	r1, #150	; 0x96
     298:	0049      	lsls	r1, r1, #1
     29a:	4b2c      	ldr	r3, [pc, #176]	; (34c <DcaApp_Entry+0x100>)
     29c:	4798      	blx	r3
        if (fTimeToSend==true) {
     29e:	2c00      	cmp	r4, #0
     2a0:	d139      	bne.n	316 <DcaApp_Entry+0xca>
		Watchdog_Feed();
     2a2:	4b2b      	ldr	r3, [pc, #172]	; (350 <DcaApp_Entry+0x104>)
     2a4:	4798      	blx	r3
		if (s_fCheckLink==true) {
     2a6:	4b26      	ldr	r3, [pc, #152]	; (340 <DcaApp_Entry+0xf4>)
     2a8:	781c      	ldrb	r4, [r3, #0]
     2aa:	2c00      	cmp	r4, #0
     2ac:	d0e2      	beq.n	274 <DcaApp_Entry+0x28>
            DEBUG_INFO("Power up Ethernet. ");
     2ae:	4829      	ldr	r0, [pc, #164]	; (354 <DcaApp_Entry+0x108>)
     2b0:	4b1e      	ldr	r3, [pc, #120]	; (32c <DcaApp_Entry+0xe0>)
     2b2:	4798      	blx	r3
            Ethernet_PowerUp();
     2b4:	4b28      	ldr	r3, [pc, #160]	; (358 <DcaApp_Entry+0x10c>)
     2b6:	4798      	blx	r3
            Timer_SetTimer(TIMER_APP_ETHERNET_LINK_TIMEOUT, TIMEOUT_ETHERNET_LINK);
     2b8:	2103      	movs	r1, #3
     2ba:	2000      	movs	r0, #0
     2bc:	4b23      	ldr	r3, [pc, #140]	; (34c <DcaApp_Entry+0x100>)
     2be:	4798      	blx	r3
            bool fLinked = false;
     2c0:	2500      	movs	r5, #0
            while(Timer_GetTimer(TIMER_APP_ETHERNET_LINK_TIMEOUT)>0) {
     2c2:	2000      	movs	r0, #0
     2c4:	4b20      	ldr	r3, [pc, #128]	; (348 <DcaApp_Entry+0xfc>)
     2c6:	4798      	blx	r3
     2c8:	2800      	cmp	r0, #0
     2ca:	d0c7      	beq.n	25c <DcaApp_Entry+0x10>
                Watchdog_Feed();
     2cc:	4b20      	ldr	r3, [pc, #128]	; (350 <DcaApp_Entry+0x104>)
     2ce:	4798      	blx	r3
                if (Ethernet_HasLink()==true) {
     2d0:	4b22      	ldr	r3, [pc, #136]	; (35c <DcaApp_Entry+0x110>)
     2d2:	4798      	blx	r3
     2d4:	2801      	cmp	r0, #1
     2d6:	d1f4      	bne.n	2c2 <DcaApp_Entry+0x76>
                    Timer_SetTimer(TIMER_APP_ETHERNET_LINK_TIMEOUT, 0);
     2d8:	2100      	movs	r1, #0
     2da:	2000      	movs	r0, #0
     2dc:	4b1b      	ldr	r3, [pc, #108]	; (34c <DcaApp_Entry+0x100>)
     2de:	4798      	blx	r3
                    fLinked = true;
     2e0:	0025      	movs	r5, r4
     2e2:	e7ee      	b.n	2c2 <DcaApp_Entry+0x76>
                DEBUG_INFO("Ethernet link down. ");
     2e4:	481e      	ldr	r0, [pc, #120]	; (360 <DcaApp_Entry+0x114>)
     2e6:	4c11      	ldr	r4, [pc, #68]	; (32c <DcaApp_Entry+0xe0>)
     2e8:	47a0      	blx	r4
                DEBUG_INFO("Power down Ethernet. ");
     2ea:	481e      	ldr	r0, [pc, #120]	; (364 <DcaApp_Entry+0x118>)
     2ec:	47a0      	blx	r4
                Ethernet_PowerDown();
     2ee:	4b1e      	ldr	r3, [pc, #120]	; (368 <DcaApp_Entry+0x11c>)
     2f0:	4798      	blx	r3
                DEBUG_INFO("Power up WiFi. ");
     2f2:	481e      	ldr	r0, [pc, #120]	; (36c <DcaApp_Entry+0x120>)
     2f4:	47a0      	blx	r4
     2f6:	e7fe      	b.n	2f6 <DcaApp_Entry+0xaa>
		if (s_fUseWifi==false) Ethernet_PumpEvents();
     2f8:	4b1d      	ldr	r3, [pc, #116]	; (370 <DcaApp_Entry+0x124>)
     2fa:	4798      	blx	r3
     2fc:	e7be      	b.n	27c <DcaApp_Entry+0x30>
        bool fTimeToSend = false;
     2fe:	2400      	movs	r4, #0
     300:	e7c1      	b.n	286 <DcaApp_Entry+0x3a>
			if (CmdFifo_GetByteCount()==0) _AddToFifo_Heartbeat();
     302:	4b10      	ldr	r3, [pc, #64]	; (344 <DcaApp_Entry+0xf8>)
     304:	4798      	blx	r3
     306:	2800      	cmp	r0, #0
     308:	d103      	bne.n	312 <DcaApp_Entry+0xc6>
     30a:	4b1a      	ldr	r3, [pc, #104]	; (374 <DcaApp_Entry+0x128>)
     30c:	4798      	blx	r3
            fTimeToSend = true;
     30e:	2401      	movs	r4, #1
     310:	e7bf      	b.n	292 <DcaApp_Entry+0x46>
     312:	2401      	movs	r4, #1
     314:	e7bd      	b.n	292 <DcaApp_Entry+0x46>
            Ethernet_QueueServerSend();
     316:	4b18      	ldr	r3, [pc, #96]	; (378 <DcaApp_Entry+0x12c>)
     318:	4798      	blx	r3
            Timer_SetTimer(TIMER_APP_HEARTBEAT, s_u16HeartbeatRate);
     31a:	4b08      	ldr	r3, [pc, #32]	; (33c <DcaApp_Entry+0xf0>)
     31c:	8959      	ldrh	r1, [r3, #10]
     31e:	88d8      	ldrh	r0, [r3, #6]
     320:	4b0a      	ldr	r3, [pc, #40]	; (34c <DcaApp_Entry+0x100>)
     322:	4798      	blx	r3
     324:	e7bd      	b.n	2a2 <DcaApp_Entry+0x56>
     326:	46c0      	nop			; (mov r8, r8)
     328:	000070d0 	.word	0x000070d0
     32c:	000008d1 	.word	0x000008d1
     330:	00000151 	.word	0x00000151
     334:	00007104 	.word	0x00007104
     338:	00007118 	.word	0x00007118
     33c:	200001f0 	.word	0x200001f0
     340:	20000000 	.word	0x20000000
     344:	0000080d 	.word	0x0000080d
     348:	00001bd9 	.word	0x00001bd9
     34c:	00001bcd 	.word	0x00001bcd
     350:	00001d79 	.word	0x00001d79
     354:	000070f0 	.word	0x000070f0
     358:	00000a0d 	.word	0x00000a0d
     35c:	00000c75 	.word	0x00000c75
     360:	0000712c 	.word	0x0000712c
     364:	00007144 	.word	0x00007144
     368:	00000995 	.word	0x00000995
     36c:	0000715c 	.word	0x0000715c
     370:	000016a1 	.word	0x000016a1
     374:	00000209 	.word	0x00000209
     378:	0000191d 	.word	0x0000191d

0000037c <_AddToFifo_EventResetCause>:

bool _AddToFifo_EventResetCause(int u8ResetCause) {
     37c:	b510      	push	{r4, lr}
     37e:	b082      	sub	sp, #8
     380:	0004      	movs	r4, r0
	uint32_t u32Timestamp;
    Timestamp_GetTimestamp(&u32Timestamp);
     382:	a801      	add	r0, sp, #4
     384:	4b1c      	ldr	r3, [pc, #112]	; (3f8 <_AddToFifo_EventResetCause+0x7c>)
     386:	4798      	blx	r3
	
	uint8_t u8TotalLength;

	switch(u8ResetCause) {
     388:	2c02      	cmp	r4, #2
     38a:	d01e      	beq.n	3ca <_AddToFifo_EventResetCause+0x4e>
     38c:	2c03      	cmp	r4, #3
     38e:	d027      	beq.n	3e0 <_AddToFifo_EventResetCause+0x64>
     390:	2c01      	cmp	r4, #1
     392:	d00a      	beq.n	3aa <_AddToFifo_EventResetCause+0x2e>
		case 3:
			sprintf(g_acBuffer64, "Event:ResetCause:1.2V Brownout:%d", u32Timestamp);
			u8TotalLength = strlen(g_acBuffer64);
			break;
		default:
			sprintf(g_acBuffer64, "Event:ResetCause:Unknown:%d", u32Timestamp);
     394:	4c19      	ldr	r4, [pc, #100]	; (3fc <_AddToFifo_EventResetCause+0x80>)
     396:	9a01      	ldr	r2, [sp, #4]
     398:	4919      	ldr	r1, [pc, #100]	; (400 <_AddToFifo_EventResetCause+0x84>)
     39a:	0020      	movs	r0, r4
     39c:	4b19      	ldr	r3, [pc, #100]	; (404 <_AddToFifo_EventResetCause+0x88>)
     39e:	4798      	blx	r3
			u8TotalLength = strlen(g_acBuffer64);
     3a0:	0020      	movs	r0, r4
     3a2:	4b19      	ldr	r3, [pc, #100]	; (408 <_AddToFifo_EventResetCause+0x8c>)
     3a4:	4798      	blx	r3
     3a6:	b2c1      	uxtb	r1, r0
			break;
     3a8:	e009      	b.n	3be <_AddToFifo_EventResetCause+0x42>
			sprintf(g_acBuffer64, "Event:ResetCause:WDT:%d", u32Timestamp);
     3aa:	4c14      	ldr	r4, [pc, #80]	; (3fc <_AddToFifo_EventResetCause+0x80>)
     3ac:	9a01      	ldr	r2, [sp, #4]
     3ae:	4917      	ldr	r1, [pc, #92]	; (40c <_AddToFifo_EventResetCause+0x90>)
     3b0:	0020      	movs	r0, r4
     3b2:	4b14      	ldr	r3, [pc, #80]	; (404 <_AddToFifo_EventResetCause+0x88>)
     3b4:	4798      	blx	r3
			u8TotalLength = strlen(g_acBuffer64);
     3b6:	0020      	movs	r0, r4
     3b8:	4b13      	ldr	r3, [pc, #76]	; (408 <_AddToFifo_EventResetCause+0x8c>)
     3ba:	4798      	blx	r3
     3bc:	b2c1      	uxtb	r1, r0
	}
	
    // Push to the command FIFO
    CmdFifo_Push(&g_acBuffer64[0], u8TotalLength);
     3be:	480f      	ldr	r0, [pc, #60]	; (3fc <_AddToFifo_EventResetCause+0x80>)
     3c0:	4b13      	ldr	r3, [pc, #76]	; (410 <_AddToFifo_EventResetCause+0x94>)
     3c2:	4798      	blx	r3


    return true;
}
     3c4:	2001      	movs	r0, #1
     3c6:	b002      	add	sp, #8
     3c8:	bd10      	pop	{r4, pc}
			sprintf(g_acBuffer64, "Event:ResetCause:3.3V Brownout:%d", u32Timestamp);
     3ca:	4c0c      	ldr	r4, [pc, #48]	; (3fc <_AddToFifo_EventResetCause+0x80>)
     3cc:	9a01      	ldr	r2, [sp, #4]
     3ce:	4911      	ldr	r1, [pc, #68]	; (414 <_AddToFifo_EventResetCause+0x98>)
     3d0:	0020      	movs	r0, r4
     3d2:	4b0c      	ldr	r3, [pc, #48]	; (404 <_AddToFifo_EventResetCause+0x88>)
     3d4:	4798      	blx	r3
			u8TotalLength = strlen(g_acBuffer64);
     3d6:	0020      	movs	r0, r4
     3d8:	4b0b      	ldr	r3, [pc, #44]	; (408 <_AddToFifo_EventResetCause+0x8c>)
     3da:	4798      	blx	r3
     3dc:	b2c1      	uxtb	r1, r0
			break;
     3de:	e7ee      	b.n	3be <_AddToFifo_EventResetCause+0x42>
			sprintf(g_acBuffer64, "Event:ResetCause:1.2V Brownout:%d", u32Timestamp);
     3e0:	4c06      	ldr	r4, [pc, #24]	; (3fc <_AddToFifo_EventResetCause+0x80>)
     3e2:	9a01      	ldr	r2, [sp, #4]
     3e4:	490c      	ldr	r1, [pc, #48]	; (418 <_AddToFifo_EventResetCause+0x9c>)
     3e6:	0020      	movs	r0, r4
     3e8:	4b06      	ldr	r3, [pc, #24]	; (404 <_AddToFifo_EventResetCause+0x88>)
     3ea:	4798      	blx	r3
			u8TotalLength = strlen(g_acBuffer64);
     3ec:	0020      	movs	r0, r4
     3ee:	4b06      	ldr	r3, [pc, #24]	; (408 <_AddToFifo_EventResetCause+0x8c>)
     3f0:	4798      	blx	r3
     3f2:	b2c1      	uxtb	r1, r0
			break;
     3f4:	e7e3      	b.n	3be <_AddToFifo_EventResetCause+0x42>
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	00001cfd 	.word	0x00001cfd
     3fc:	200008e0 	.word	0x200008e0
     400:	000071cc 	.word	0x000071cc
     404:	00006789 	.word	0x00006789
     408:	000067cd 	.word	0x000067cd
     40c:	0000716c 	.word	0x0000716c
     410:	00000819 	.word	0x00000819
     414:	00007184 	.word	0x00007184
     418:	000071a8 	.word	0x000071a8

0000041c <_AddToFifo_EventData>:
	}
	
	return true;
}

bool _AddToFifo_EventData(int iSensor) {
     41c:	b510      	push	{r4, lr}
     41e:	b082      	sub	sp, #8
     420:	0004      	movs	r4, r0
	uint32_t u32Timestamp;
    Timestamp_GetTimestamp(&u32Timestamp);
     422:	a801      	add	r0, sp, #4
     424:	4b0c      	ldr	r3, [pc, #48]	; (458 <_AddToFifo_EventData+0x3c>)
     426:	4798      	blx	r3
	
	if(iSensor==0) {
     428:	2c00      	cmp	r4, #0
     42a:	d00f      	beq.n	44c <_AddToFifo_EventData+0x30>
		sprintf(g_acBuffer256, "Event:Data:T1:%d", u32Timestamp);
	} else {
		sprintf(g_acBuffer256, "Event:Data:T2:%d", u32Timestamp);
     42c:	9a01      	ldr	r2, [sp, #4]
     42e:	490b      	ldr	r1, [pc, #44]	; (45c <_AddToFifo_EventData+0x40>)
     430:	480b      	ldr	r0, [pc, #44]	; (460 <_AddToFifo_EventData+0x44>)
     432:	4b0c      	ldr	r3, [pc, #48]	; (464 <_AddToFifo_EventData+0x48>)
     434:	4798      	blx	r3
	}

	uint8_t u8TotalLength;
	u8TotalLength = strlen(g_acBuffer256);
     436:	4c0a      	ldr	r4, [pc, #40]	; (460 <_AddToFifo_EventData+0x44>)
     438:	0020      	movs	r0, r4
     43a:	4b0b      	ldr	r3, [pc, #44]	; (468 <_AddToFifo_EventData+0x4c>)
     43c:	4798      	blx	r3
	
    // Push to the command FIFO
    CmdFifo_Push(&g_acBuffer256[0], u8TotalLength);	
     43e:	21ff      	movs	r1, #255	; 0xff
     440:	4001      	ands	r1, r0
     442:	0020      	movs	r0, r4
     444:	4b09      	ldr	r3, [pc, #36]	; (46c <_AddToFifo_EventData+0x50>)
     446:	4798      	blx	r3
}
     448:	b002      	add	sp, #8
     44a:	bd10      	pop	{r4, pc}
		sprintf(g_acBuffer256, "Event:Data:T1:%d", u32Timestamp);
     44c:	9a01      	ldr	r2, [sp, #4]
     44e:	4908      	ldr	r1, [pc, #32]	; (470 <_AddToFifo_EventData+0x54>)
     450:	4803      	ldr	r0, [pc, #12]	; (460 <_AddToFifo_EventData+0x44>)
     452:	4b04      	ldr	r3, [pc, #16]	; (464 <_AddToFifo_EventData+0x48>)
     454:	4798      	blx	r3
     456:	e7ee      	b.n	436 <_AddToFifo_EventData+0x1a>
     458:	00001cfd 	.word	0x00001cfd
     45c:	000071fc 	.word	0x000071fc
     460:	20000928 	.word	0x20000928
     464:	00006789 	.word	0x00006789
     468:	000067cd 	.word	0x000067cd
     46c:	00000819 	.word	0x00000819
     470:	000071e8 	.word	0x000071e8

00000474 <_FlashWriteAppUserConfig>:
        _InitUserConfig();
    }
	DEBUG_INFO("UserRead");
}

void _FlashWriteAppUserConfig(void) {
     474:	b530      	push	{r4, r5, lr}
     476:	b083      	sub	sp, #12
	// Set timestamp
    uint32_t timestamp;
    Timestamp_GetTimestamp(&timestamp);
     478:	a801      	add	r0, sp, #4
     47a:	4b14      	ldr	r3, [pc, #80]	; (4cc <_FlashWriteAppUserConfig+0x58>)
     47c:	4798      	blx	r3
	memcpy(&g_st_UserConfig.au8Timestamp[0], &timestamp, 4);
     47e:	2204      	movs	r2, #4
     480:	a901      	add	r1, sp, #4
     482:	4813      	ldr	r0, [pc, #76]	; (4d0 <_FlashWriteAppUserConfig+0x5c>)
     484:	4b13      	ldr	r3, [pc, #76]	; (4d4 <_FlashWriteAppUserConfig+0x60>)
     486:	4798      	blx	r3
	
	// Before the flash can be written, it must be erased - note this will erase whole 256 byte rows!
    Flash_EraseFlash(USER_CONFIG_SPACE_ORIGIN, USER_CONFIG_SPACE_SIZE_PAGES);
     488:	2108      	movs	r1, #8
     48a:	4813      	ldr	r0, [pc, #76]	; (4d8 <_FlashWriteAppUserConfig+0x64>)
     48c:	4b13      	ldr	r3, [pc, #76]	; (4dc <_FlashWriteAppUserConfig+0x68>)
     48e:	4798      	blx	r3
	
	// Wait for the Flash memory controller to finish erasing
	while (RTC->MODE0.STATUS.bit.SYNCBUSY || NVMCTRL->INTFLAG.bit.READY == 0);
     490:	4b13      	ldr	r3, [pc, #76]	; (4e0 <_FlashWriteAppUserConfig+0x6c>)
     492:	7a9b      	ldrb	r3, [r3, #10]
     494:	09db      	lsrs	r3, r3, #7
     496:	d1fb      	bne.n	490 <_FlashWriteAppUserConfig+0x1c>
     498:	4b12      	ldr	r3, [pc, #72]	; (4e4 <_FlashWriteAppUserConfig+0x70>)
     49a:	7d1b      	ldrb	r3, [r3, #20]
     49c:	07db      	lsls	r3, r3, #31
     49e:	d5f7      	bpl.n	490 <_FlashWriteAppUserConfig+0x1c>

    // Store the user configuration in the appropriate region of NVM
    Flash_WriteFlash(USER_CONFIG_SPACE_ORIGIN, (char*)&g_st_UserConfig, sizeof(tsUserConfig));
     4a0:	4c11      	ldr	r4, [pc, #68]	; (4e8 <_FlashWriteAppUserConfig+0x74>)
     4a2:	4d0d      	ldr	r5, [pc, #52]	; (4d8 <_FlashWriteAppUserConfig+0x64>)
     4a4:	2206      	movs	r2, #6
     4a6:	0021      	movs	r1, r4
     4a8:	0028      	movs	r0, r5
     4aa:	4b10      	ldr	r3, [pc, #64]	; (4ec <_FlashWriteAppUserConfig+0x78>)
     4ac:	4798      	blx	r3
	memset(&g_st_UserConfig, 0, sizeof(tsUserConfig));
     4ae:	2206      	movs	r2, #6
     4b0:	2100      	movs	r1, #0
     4b2:	0020      	movs	r0, r4
     4b4:	4b0e      	ldr	r3, [pc, #56]	; (4f0 <_FlashWriteAppUserConfig+0x7c>)
     4b6:	4798      	blx	r3
	Flash_ReadFlash(USER_CONFIG_SPACE_ORIGIN, (char*)&g_st_UserConfig, sizeof(tsUserConfig));
     4b8:	2206      	movs	r2, #6
     4ba:	0021      	movs	r1, r4
     4bc:	0028      	movs	r0, r5
     4be:	4b0d      	ldr	r3, [pc, #52]	; (4f4 <_FlashWriteAppUserConfig+0x80>)
     4c0:	4798      	blx	r3
	DEBUG_INFO("UserWrite");
     4c2:	480d      	ldr	r0, [pc, #52]	; (4f8 <_FlashWriteAppUserConfig+0x84>)
     4c4:	4b0d      	ldr	r3, [pc, #52]	; (4fc <_FlashWriteAppUserConfig+0x88>)
     4c6:	4798      	blx	r3
}
     4c8:	b003      	add	sp, #12
     4ca:	bd30      	pop	{r4, r5, pc}
     4cc:	00001cfd 	.word	0x00001cfd
     4d0:	200008da 	.word	0x200008da
     4d4:	000065f3 	.word	0x000065f3
     4d8:	0000cccc 	.word	0x0000cccc
     4dc:	0000196d 	.word	0x0000196d
     4e0:	40001400 	.word	0x40001400
     4e4:	41004000 	.word	0x41004000
     4e8:	200008d8 	.word	0x200008d8
     4ec:	00001985 	.word	0x00001985
     4f0:	00006605 	.word	0x00006605
     4f4:	00001955 	.word	0x00001955
     4f8:	00007210 	.word	0x00007210
     4fc:	000008d1 	.word	0x000008d1

00000500 <_AddToFifo_EventSync>:
bool _AddToFifo_EventSync(int16_t s16Diff) {
     500:	b530      	push	{r4, r5, lr}
     502:	b083      	sub	sp, #12
     504:	0004      	movs	r4, r0
    Timestamp_GetTimestamp(&u32Timestamp);
     506:	a801      	add	r0, sp, #4
     508:	4b0e      	ldr	r3, [pc, #56]	; (544 <_AddToFifo_EventSync+0x44>)
     50a:	4798      	blx	r3
	memcpy(&g_st_UserConfig.au8Timestamp[0], &u32Timestamp, 4);
     50c:	2204      	movs	r2, #4
     50e:	a901      	add	r1, sp, #4
     510:	480d      	ldr	r0, [pc, #52]	; (548 <_AddToFifo_EventSync+0x48>)
     512:	4b0e      	ldr	r3, [pc, #56]	; (54c <_AddToFifo_EventSync+0x4c>)
     514:	4798      	blx	r3
	_FlashWriteAppUserConfig();
     516:	4b0e      	ldr	r3, [pc, #56]	; (550 <_AddToFifo_EventSync+0x50>)
     518:	4798      	blx	r3
	if(s16Diff > 120) {
     51a:	2c78      	cmp	r4, #120	; 0x78
     51c:	dc02      	bgt.n	524 <_AddToFifo_EventSync+0x24>
}
     51e:	2001      	movs	r0, #1
     520:	b003      	add	sp, #12
     522:	bd30      	pop	{r4, r5, pc}
	sprintf(g_acBuffer64, "Event:Sync:%d:%d", s16Diff, u32Timestamp);
     524:	4d0b      	ldr	r5, [pc, #44]	; (554 <_AddToFifo_EventSync+0x54>)
     526:	9b01      	ldr	r3, [sp, #4]
     528:	0022      	movs	r2, r4
     52a:	490b      	ldr	r1, [pc, #44]	; (558 <_AddToFifo_EventSync+0x58>)
     52c:	0028      	movs	r0, r5
     52e:	4c0b      	ldr	r4, [pc, #44]	; (55c <_AddToFifo_EventSync+0x5c>)
     530:	47a0      	blx	r4
	u8TotalLength = strlen(g_acBuffer64);
     532:	0028      	movs	r0, r5
     534:	4b0a      	ldr	r3, [pc, #40]	; (560 <_AddToFifo_EventSync+0x60>)
     536:	4798      	blx	r3
    CmdFifo_Push(&g_acBuffer64[0], u8TotalLength);
     538:	21ff      	movs	r1, #255	; 0xff
     53a:	4001      	ands	r1, r0
     53c:	0028      	movs	r0, r5
     53e:	4b09      	ldr	r3, [pc, #36]	; (564 <_AddToFifo_EventSync+0x64>)
     540:	4798      	blx	r3
     542:	e7ec      	b.n	51e <_AddToFifo_EventSync+0x1e>
     544:	00001cfd 	.word	0x00001cfd
     548:	200008da 	.word	0x200008da
     54c:	000065f3 	.word	0x000065f3
     550:	00000475 	.word	0x00000475
     554:	200008e0 	.word	0x200008e0
     558:	0000721c 	.word	0x0000721c
     55c:	00006789 	.word	0x00006789
     560:	000067cd 	.word	0x000067cd
     564:	00000819 	.word	0x00000819

00000568 <App_ProcessBinaryPayload>:
void App_ProcessBinaryPayload(char *pSrc, int nSrcBytes) {
     568:	b530      	push	{r4, r5, lr}
     56a:	b083      	sub	sp, #12
	uint32_t u32NewTime = atoi(pSrc);
     56c:	4b0a      	ldr	r3, [pc, #40]	; (598 <App_ProcessBinaryPayload+0x30>)
     56e:	4798      	blx	r3
     570:	0005      	movs	r5, r0
    Timestamp_GetTimestamp(&u32CheckTime);
     572:	a801      	add	r0, sp, #4
     574:	4b09      	ldr	r3, [pc, #36]	; (59c <App_ProcessBinaryPayload+0x34>)
     576:	4798      	blx	r3
    s16Diff = (int16_t)(u32CheckTime - u32NewTime);
     578:	9b01      	ldr	r3, [sp, #4]
     57a:	1b5c      	subs	r4, r3, r5
     57c:	b224      	sxth	r4, r4
	if(abs(s16Diff)>1) {
     57e:	17e3      	asrs	r3, r4, #31
     580:	18e4      	adds	r4, r4, r3
     582:	405c      	eors	r4, r3
     584:	2c01      	cmp	r4, #1
     586:	dd05      	ble.n	594 <App_ProcessBinaryPayload+0x2c>
		Timestamp_SetTimestamp(u32NewTime);
     588:	0028      	movs	r0, r5
     58a:	4b05      	ldr	r3, [pc, #20]	; (5a0 <App_ProcessBinaryPayload+0x38>)
     58c:	4798      	blx	r3
		_AddToFifo_EventSync(abs(s16Diff));
     58e:	b220      	sxth	r0, r4
     590:	4b04      	ldr	r3, [pc, #16]	; (5a4 <App_ProcessBinaryPayload+0x3c>)
     592:	4798      	blx	r3
}
     594:	b003      	add	sp, #12
     596:	bd30      	pop	{r4, r5, pc}
     598:	00006581 	.word	0x00006581
     59c:	00001cfd 	.word	0x00001cfd
     5a0:	00001cc9 	.word	0x00001cc9
     5a4:	00000501 	.word	0x00000501

000005a8 <_InitUserConfig>:

void _InitUserConfig(void) {
     5a8:	b510      	push	{r4, lr}
	memset(&g_st_UserConfig, 0, sizeof(tsUserConfig));
     5aa:	4c07      	ldr	r4, [pc, #28]	; (5c8 <_InitUserConfig+0x20>)
     5ac:	2206      	movs	r2, #6
     5ae:	2100      	movs	r1, #0
     5b0:	0020      	movs	r0, r4
     5b2:	4b06      	ldr	r3, [pc, #24]	; (5cc <_InitUserConfig+0x24>)
     5b4:	4798      	blx	r3
	 g_st_UserConfig.u16InitCode = USER_CONFIG_INIT_CODE;
     5b6:	4b06      	ldr	r3, [pc, #24]	; (5d0 <_InitUserConfig+0x28>)
     5b8:	8023      	strh	r3, [r4, #0]
	 
	_FlashWriteAppUserConfig();
     5ba:	4b06      	ldr	r3, [pc, #24]	; (5d4 <_InitUserConfig+0x2c>)
     5bc:	4798      	blx	r3
	DEBUG_INFO("UserInit");
     5be:	4806      	ldr	r0, [pc, #24]	; (5d8 <_InitUserConfig+0x30>)
     5c0:	4b06      	ldr	r3, [pc, #24]	; (5dc <_InitUserConfig+0x34>)
     5c2:	4798      	blx	r3
     5c4:	bd10      	pop	{r4, pc}
     5c6:	46c0      	nop			; (mov r8, r8)
     5c8:	200008d8 	.word	0x200008d8
     5cc:	00006605 	.word	0x00006605
     5d0:	00005a5a 	.word	0x00005a5a
     5d4:	00000475 	.word	0x00000475
     5d8:	00007230 	.word	0x00007230
     5dc:	000008d1 	.word	0x000008d1

000005e0 <_FlashReadAppUserConfig>:
void _FlashReadAppUserConfig(void) {
     5e0:	b510      	push	{r4, lr}
    Flash_ReadFlash(USER_CONFIG_SPACE_ORIGIN, (char*)&g_st_UserConfig, sizeof(tsUserConfig));
     5e2:	4c09      	ldr	r4, [pc, #36]	; (608 <_FlashReadAppUserConfig+0x28>)
     5e4:	2206      	movs	r2, #6
     5e6:	0021      	movs	r1, r4
     5e8:	4808      	ldr	r0, [pc, #32]	; (60c <_FlashReadAppUserConfig+0x2c>)
     5ea:	4b09      	ldr	r3, [pc, #36]	; (610 <_FlashReadAppUserConfig+0x30>)
     5ec:	4798      	blx	r3
    if (g_st_UserConfig.u16InitCode!=USER_CONFIG_INIT_CODE) {
     5ee:	8822      	ldrh	r2, [r4, #0]
     5f0:	4b08      	ldr	r3, [pc, #32]	; (614 <_FlashReadAppUserConfig+0x34>)
     5f2:	429a      	cmp	r2, r3
     5f4:	d004      	beq.n	600 <_FlashReadAppUserConfig+0x20>
        DEBUG_INFO("Initializing the user configuration. ");
     5f6:	4808      	ldr	r0, [pc, #32]	; (618 <_FlashReadAppUserConfig+0x38>)
     5f8:	4b08      	ldr	r3, [pc, #32]	; (61c <_FlashReadAppUserConfig+0x3c>)
     5fa:	4798      	blx	r3
        _InitUserConfig();
     5fc:	4b08      	ldr	r3, [pc, #32]	; (620 <_FlashReadAppUserConfig+0x40>)
     5fe:	4798      	blx	r3
	DEBUG_INFO("UserRead");
     600:	4808      	ldr	r0, [pc, #32]	; (624 <_FlashReadAppUserConfig+0x44>)
     602:	4b06      	ldr	r3, [pc, #24]	; (61c <_FlashReadAppUserConfig+0x3c>)
     604:	4798      	blx	r3
}
     606:	bd10      	pop	{r4, pc}
     608:	200008d8 	.word	0x200008d8
     60c:	0000cccc 	.word	0x0000cccc
     610:	00001955 	.word	0x00001955
     614:	00005a5a 	.word	0x00005a5a
     618:	0000723c 	.word	0x0000723c
     61c:	000008d1 	.word	0x000008d1
     620:	000005a9 	.word	0x000005a9
     624:	00007264 	.word	0x00007264

00000628 <DcaApp_Init>:
void DcaApp_Init(void) {
     628:	b5f0      	push	{r4, r5, r6, r7, lr}
     62a:	b083      	sub	sp, #12
    uint8_t u8ResetCause = PM->RCAUSE.reg;
     62c:	2338      	movs	r3, #56	; 0x38
     62e:	4a43      	ldr	r2, [pc, #268]	; (73c <DcaApp_Init+0x114>)
     630:	5cd6      	ldrb	r6, [r2, r3]
     632:	b2f6      	uxtb	r6, r6
    SYSCTRL->BOD33.bit.ENABLE = 0; // Disable
     634:	4b42      	ldr	r3, [pc, #264]	; (740 <DcaApp_Init+0x118>)
     636:	6b58      	ldr	r0, [r3, #52]	; 0x34
     638:	2202      	movs	r2, #2
     63a:	0001      	movs	r1, r0
     63c:	4391      	bics	r1, r2
     63e:	6359      	str	r1, [r3, #52]	; 0x34
    SYSCTRL->BOD33.bit.LEVEL = 39; // 2.84V (from datasheet)
     640:	6b58      	ldr	r0, [r3, #52]	; 0x34
     642:	4940      	ldr	r1, [pc, #256]	; (744 <DcaApp_Init+0x11c>)
     644:	4008      	ands	r0, r1
     646:	219c      	movs	r1, #156	; 0x9c
     648:	0389      	lsls	r1, r1, #14
     64a:	4301      	orrs	r1, r0
     64c:	6359      	str	r1, [r3, #52]	; 0x34
    SYSCTRL->BOD33.bit.ENABLE = 1; // Re-enable
     64e:	6b59      	ldr	r1, [r3, #52]	; 0x34
     650:	430a      	orrs	r2, r1
     652:	635a      	str	r2, [r3, #52]	; 0x34
    Debug_InitLog();
     654:	4b3c      	ldr	r3, [pc, #240]	; (748 <DcaApp_Init+0x120>)
     656:	4798      	blx	r3
    DEBUG_INFO("Debug log initialized. ");
     658:	483c      	ldr	r0, [pc, #240]	; (74c <DcaApp_Init+0x124>)
     65a:	4c3d      	ldr	r4, [pc, #244]	; (750 <DcaApp_Init+0x128>)
     65c:	47a0      	blx	r4
    Watchdog_Init();
     65e:	4b3d      	ldr	r3, [pc, #244]	; (754 <DcaApp_Init+0x12c>)
     660:	4798      	blx	r3
    DEBUG_INFO("Watchdog initialized. ");
     662:	483d      	ldr	r0, [pc, #244]	; (758 <DcaApp_Init+0x130>)
     664:	47a0      	blx	r4
    Timer_Init();
     666:	4b3d      	ldr	r3, [pc, #244]	; (75c <DcaApp_Init+0x134>)
     668:	4798      	blx	r3
    DEBUG_INFO("Timers initialized. ");
     66a:	483d      	ldr	r0, [pc, #244]	; (760 <DcaApp_Init+0x138>)
     66c:	47a0      	blx	r4
    Timer_AddTimer(&TIMER_APP_LED_HOLD);
     66e:	4d3d      	ldr	r5, [pc, #244]	; (764 <DcaApp_Init+0x13c>)
     670:	0028      	movs	r0, r5
     672:	4f3d      	ldr	r7, [pc, #244]	; (768 <DcaApp_Init+0x140>)
     674:	47b8      	blx	r7
	Timer_AddTimer(&TIMER_APP_HEARTBEAT);
     676:	1da8      	adds	r0, r5, #6
     678:	47b8      	blx	r7
    Timer_AddTimer(&TIMER_APP_UPDATE_CLOCK);
     67a:	0028      	movs	r0, r5
     67c:	300c      	adds	r0, #12
     67e:	47b8      	blx	r7
	Timer_AddTimer(&TIMER_APP_ENWI_LINK_CHECK);
     680:	0028      	movs	r0, r5
     682:	3008      	adds	r0, #8
     684:	47b8      	blx	r7
	Timestamp_Init();
     686:	4b39      	ldr	r3, [pc, #228]	; (76c <DcaApp_Init+0x144>)
     688:	4798      	blx	r3
	DEBUG_INFO("RTC initialized. ");
     68a:	4839      	ldr	r0, [pc, #228]	; (770 <DcaApp_Init+0x148>)
     68c:	47a0      	blx	r4
	CmdFifo_Init();
     68e:	4b39      	ldr	r3, [pc, #228]	; (774 <DcaApp_Init+0x14c>)
     690:	4798      	blx	r3
	DEBUG_INFO("CmdFIFO initialized. ");
     692:	4839      	ldr	r0, [pc, #228]	; (778 <DcaApp_Init+0x150>)
     694:	47a0      	blx	r4
	DataFifo_Init();
     696:	4b39      	ldr	r3, [pc, #228]	; (77c <DcaApp_Init+0x154>)
     698:	4798      	blx	r3
	DEBUG_INFO("DataFIFO initialized. ");
     69a:	4839      	ldr	r0, [pc, #228]	; (780 <DcaApp_Init+0x158>)
     69c:	47a0      	blx	r4
    Flash_Init();
     69e:	4b39      	ldr	r3, [pc, #228]	; (784 <DcaApp_Init+0x15c>)
     6a0:	4798      	blx	r3
    DEBUG_INFO("Flash initialized. ");
     6a2:	4839      	ldr	r0, [pc, #228]	; (788 <DcaApp_Init+0x160>)
     6a4:	47a0      	blx	r4
	_FlashReadAppUserConfig();
     6a6:	4b39      	ldr	r3, [pc, #228]	; (78c <DcaApp_Init+0x164>)
     6a8:	4798      	blx	r3
	DEBUG_INFO("User configuration retrieved. ");
     6aa:	4839      	ldr	r0, [pc, #228]	; (790 <DcaApp_Init+0x168>)
     6ac:	47a0      	blx	r4
    memcpy(&timestamp, &g_st_UserConfig.au8Timestamp[0], 4);
     6ae:	2204      	movs	r2, #4
     6b0:	4938      	ldr	r1, [pc, #224]	; (794 <DcaApp_Init+0x16c>)
     6b2:	a801      	add	r0, sp, #4
     6b4:	4b38      	ldr	r3, [pc, #224]	; (798 <DcaApp_Init+0x170>)
     6b6:	4798      	blx	r3
    if (timestamp>0) {
     6b8:	9801      	ldr	r0, [sp, #4]
     6ba:	2800      	cmp	r0, #0
     6bc:	d001      	beq.n	6c2 <DcaApp_Init+0x9a>
        Timestamp_SetTimestamp(timestamp);
     6be:	4b37      	ldr	r3, [pc, #220]	; (79c <DcaApp_Init+0x174>)
     6c0:	4798      	blx	r3
    DEBUG_INFO("Timestamp initialized. ");
     6c2:	4837      	ldr	r0, [pc, #220]	; (7a0 <DcaApp_Init+0x178>)
     6c4:	4b22      	ldr	r3, [pc, #136]	; (750 <DcaApp_Init+0x128>)
     6c6:	4798      	blx	r3
    s8Status = Ethernet_Init();
     6c8:	4b36      	ldr	r3, [pc, #216]	; (7a4 <DcaApp_Init+0x17c>)
     6ca:	4798      	blx	r3
    if (s8Status!=0) {
     6cc:	2800      	cmp	r0, #0
     6ce:	d003      	beq.n	6d8 <DcaApp_Init+0xb0>
        _LedColorControl(LED_COLOR_RED);
     6d0:	2002      	movs	r0, #2
     6d2:	4b35      	ldr	r3, [pc, #212]	; (7a8 <DcaApp_Init+0x180>)
     6d4:	4798      	blx	r3
     6d6:	e7fe      	b.n	6d6 <DcaApp_Init+0xae>
    DEBUG_INFO("Ethernet initialized. ");
     6d8:	4834      	ldr	r0, [pc, #208]	; (7ac <DcaApp_Init+0x184>)
     6da:	4b1d      	ldr	r3, [pc, #116]	; (750 <DcaApp_Init+0x128>)
     6dc:	4798      	blx	r3
    s8Status = Wifi_Init();
     6de:	4b34      	ldr	r3, [pc, #208]	; (7b0 <DcaApp_Init+0x188>)
     6e0:	4798      	blx	r3
    if (s8Status!=0) {
     6e2:	2800      	cmp	r0, #0
     6e4:	d003      	beq.n	6ee <DcaApp_Init+0xc6>
        _LedColorControl(LED_COLOR_RED);
     6e6:	2002      	movs	r0, #2
     6e8:	4b2f      	ldr	r3, [pc, #188]	; (7a8 <DcaApp_Init+0x180>)
     6ea:	4798      	blx	r3
     6ec:	e7fe      	b.n	6ec <DcaApp_Init+0xc4>
    DEBUG_INFO("WiFi initialized. ");
     6ee:	4831      	ldr	r0, [pc, #196]	; (7b4 <DcaApp_Init+0x18c>)
     6f0:	4c17      	ldr	r4, [pc, #92]	; (750 <DcaApp_Init+0x128>)
     6f2:	47a0      	blx	r4
    Ethernet_PowerDown();
     6f4:	4b30      	ldr	r3, [pc, #192]	; (7b8 <DcaApp_Init+0x190>)
     6f6:	4798      	blx	r3
	Sensor_Init();
     6f8:	4b30      	ldr	r3, [pc, #192]	; (7bc <DcaApp_Init+0x194>)
     6fa:	4798      	blx	r3
	DEBUG_INFO("Sensors Init. ");
     6fc:	4830      	ldr	r0, [pc, #192]	; (7c0 <DcaApp_Init+0x198>)
     6fe:	47a0      	blx	r4
    DEBUG_INFO("Application init complete. ");
     700:	4830      	ldr	r0, [pc, #192]	; (7c4 <DcaApp_Init+0x19c>)
     702:	47a0      	blx	r4
    _AddToFifo_EventStartup();
     704:	4b30      	ldr	r3, [pc, #192]	; (7c8 <DcaApp_Init+0x1a0>)
     706:	4798      	blx	r3
    if ((u8ResetCause & PM_RCAUSE_WDT) == PM_RCAUSE_WDT) {
     708:	06b3      	lsls	r3, r6, #26
     70a:	d50a      	bpl.n	722 <DcaApp_Init+0xfa>
		_AddToFifo_EventResetCause(1);
     70c:	2001      	movs	r0, #1
     70e:	4b2f      	ldr	r3, [pc, #188]	; (7cc <DcaApp_Init+0x1a4>)
     710:	4798      	blx	r3
	s_u16HeartbeatRate = TIMEOUT_STARTUP_HEARTBEAT_HOLD;
     712:	223c      	movs	r2, #60	; 0x3c
     714:	4b13      	ldr	r3, [pc, #76]	; (764 <DcaApp_Init+0x13c>)
     716:	815a      	strh	r2, [r3, #10]
    Timer_Register_Callback(_One_Second_Timer_Callback);
     718:	482d      	ldr	r0, [pc, #180]	; (7d0 <DcaApp_Init+0x1a8>)
     71a:	4b2e      	ldr	r3, [pc, #184]	; (7d4 <DcaApp_Init+0x1ac>)
     71c:	4798      	blx	r3
}
     71e:	b003      	add	sp, #12
     720:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if ((u8ResetCause & PM_RCAUSE_BOD33) == PM_RCAUSE_BOD33) {
     722:	0773      	lsls	r3, r6, #29
     724:	d503      	bpl.n	72e <DcaApp_Init+0x106>
        _AddToFifo_EventResetCause(2);
     726:	2002      	movs	r0, #2
     728:	4b28      	ldr	r3, [pc, #160]	; (7cc <DcaApp_Init+0x1a4>)
     72a:	4798      	blx	r3
     72c:	e7f1      	b.n	712 <DcaApp_Init+0xea>
    } else if ((u8ResetCause & PM_RCAUSE_BOD12) == PM_RCAUSE_BOD12) {
     72e:	07b3      	lsls	r3, r6, #30
     730:	d5ef      	bpl.n	712 <DcaApp_Init+0xea>
        _AddToFifo_EventResetCause(3);
     732:	2003      	movs	r0, #3
     734:	4b25      	ldr	r3, [pc, #148]	; (7cc <DcaApp_Init+0x1a4>)
     736:	4798      	blx	r3
     738:	e7eb      	b.n	712 <DcaApp_Init+0xea>
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	40000400 	.word	0x40000400
     740:	40000800 	.word	0x40000800
     744:	ffc0ffff 	.word	0xffc0ffff
     748:	000008ad 	.word	0x000008ad
     74c:	00007270 	.word	0x00007270
     750:	000008d1 	.word	0x000008d1
     754:	00001d21 	.word	0x00001d21
     758:	00007288 	.word	0x00007288
     75c:	00001b89 	.word	0x00001b89
     760:	000072a0 	.word	0x000072a0
     764:	200001f0 	.word	0x200001f0
     768:	00001bad 	.word	0x00001bad
     76c:	00001c4d 	.word	0x00001c4d
     770:	000072b8 	.word	0x000072b8
     774:	000007e5 	.word	0x000007e5
     778:	000072cc 	.word	0x000072cc
     77c:	00000889 	.word	0x00000889
     780:	000072e4 	.word	0x000072e4
     784:	00001951 	.word	0x00001951
     788:	000072fc 	.word	0x000072fc
     78c:	000005e1 	.word	0x000005e1
     790:	00007310 	.word	0x00007310
     794:	200008da 	.word	0x200008da
     798:	000065f3 	.word	0x000065f3
     79c:	00001cc9 	.word	0x00001cc9
     7a0:	00007330 	.word	0x00007330
     7a4:	00000b89 	.word	0x00000b89
     7a8:	00000105 	.word	0x00000105
     7ac:	00007348 	.word	0x00007348
     7b0:	00001da9 	.word	0x00001da9
     7b4:	00007360 	.word	0x00007360
     7b8:	00000995 	.word	0x00000995
     7bc:	00001a5d 	.word	0x00001a5d
     7c0:	00007374 	.word	0x00007374
     7c4:	00007384 	.word	0x00007384
     7c8:	000001c5 	.word	0x000001c5
     7cc:	0000037d 	.word	0x0000037d
     7d0:	00000199 	.word	0x00000199
     7d4:	00001be5 	.word	0x00001be5

000007d8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     7d8:	b510      	push	{r4, lr}
	system_init();
     7da:	4b01      	ldr	r3, [pc, #4]	; (7e0 <atmel_start_init+0x8>)
     7dc:	4798      	blx	r3
	//tcpip_lite_stack_init();
}
     7de:	bd10      	pop	{r4, pc}
     7e0:	0000220d 	.word	0x0000220d

000007e4 <CmdFifo_Init>:
/** VARIABLES *****************************************************************/
static uint16_t   s_u16FifoWriteIndex;
static uint16_t   s_u16FifoReadIndex;
static uint16_t   s_u16FifoByteCount;

void CmdFifo_Init(void) {
     7e4:	b510      	push	{r4, lr}
	// Clear the contents of the command FIFO
	memset(&g_acCmdFifo[0], 0, COMMAND_FIFO_NUM_BYTES);
     7e6:	2280      	movs	r2, #128	; 0x80
     7e8:	0152      	lsls	r2, r2, #5
     7ea:	2100      	movs	r1, #0
     7ec:	4804      	ldr	r0, [pc, #16]	; (800 <CmdFifo_Init+0x1c>)
     7ee:	4b05      	ldr	r3, [pc, #20]	; (804 <CmdFifo_Init+0x20>)
     7f0:	4798      	blx	r3
	// Reset the buffer read/write indexes and byte count
	s_u16FifoWriteIndex = 0;
     7f2:	4b05      	ldr	r3, [pc, #20]	; (808 <CmdFifo_Init+0x24>)
     7f4:	2200      	movs	r2, #0
     7f6:	801a      	strh	r2, [r3, #0]
	s_u16FifoReadIndex = 0;
     7f8:	805a      	strh	r2, [r3, #2]
	s_u16FifoByteCount = 0;
     7fa:	809a      	strh	r2, [r3, #4]
}
     7fc:	bd10      	pop	{r4, pc}
     7fe:	46c0      	nop			; (mov r8, r8)
     800:	20000a28 	.word	0x20000a28
     804:	00006605 	.word	0x00006605
     808:	200001fe 	.word	0x200001fe

0000080c <CmdFifo_GetByteCount>:

uint16_t CmdFifo_GetByteCount(void) {
	return s_u16FifoByteCount;
     80c:	4b01      	ldr	r3, [pc, #4]	; (814 <CmdFifo_GetByteCount+0x8>)
     80e:	8898      	ldrh	r0, [r3, #4]
}
     810:	4770      	bx	lr
     812:	46c0      	nop			; (mov r8, r8)
     814:	200001fe 	.word	0x200001fe

00000818 <CmdFifo_Push>:
uint16_t CmdFifo_GetByteRemaining(void) {
    int remainig = COMMAND_FIFO_NUM_BYTES - s_u16FifoByteCount;
    return remainig;
}

bool CmdFifo_Push(char *pCmd, uint16_t length) {
     818:	b570      	push	{r4, r5, r6, lr}
     81a:	0003      	movs	r3, r0
     81c:	000c      	movs	r4, r1
    uint16_t bytesToWrite, trimmed;

    // Write the bytes to the command FIFO
    bytesToWrite = length;
    char *pDst = &g_acCmdFifo[0] + s_u16FifoByteCount;
     81e:	4d07      	ldr	r5, [pc, #28]	; (83c <CmdFifo_Push+0x24>)
     820:	88ae      	ldrh	r6, [r5, #4]
     822:	4807      	ldr	r0, [pc, #28]	; (840 <CmdFifo_Push+0x28>)
     824:	1830      	adds	r0, r6, r0
    memcpy(pDst, pCmd, bytesToWrite);
     826:	000a      	movs	r2, r1
     828:	0019      	movs	r1, r3
     82a:	4b06      	ldr	r3, [pc, #24]	; (844 <CmdFifo_Push+0x2c>)
     82c:	4798      	blx	r3
    s_u16FifoByteCount += bytesToWrite;
     82e:	19a6      	adds	r6, r4, r6
     830:	80ae      	strh	r6, [r5, #4]
    s_u16FifoWriteIndex += bytesToWrite;
     832:	882b      	ldrh	r3, [r5, #0]
     834:	18e4      	adds	r4, r4, r3
     836:	802c      	strh	r4, [r5, #0]
    bytesToWrite = 0;

    return true;
}
     838:	2001      	movs	r0, #1
     83a:	bd70      	pop	{r4, r5, r6, pc}
     83c:	200001fe 	.word	0x200001fe
     840:	20000a28 	.word	0x20000a28
     844:	000065f3 	.word	0x000065f3

00000848 <CmdFifo_Send>:

uint16_t CmdFifo_Send(char *pDst, uint16_t maxBytes) {
     848:	b570      	push	{r4, r5, r6, lr}
     84a:	0006      	movs	r6, r0
    uint16_t bytesToSend;
    uint16_t bytesSent = 0;

    bytesToSend = (uint16_t)s_u16FifoByteCount;
     84c:	4b0b      	ldr	r3, [pc, #44]	; (87c <CmdFifo_Send+0x34>)
     84e:	889c      	ldrh	r4, [r3, #4]
    uint16_t bytesSent = 0;
     850:	2500      	movs	r5, #0

    while (bytesToSend>0) {
     852:	e00f      	b.n	874 <CmdFifo_Send+0x2c>
        // Compute source pointer within the command FIFO
        char *pSrc = &g_acCmdFifo[0];

        memcpy(pDst, pSrc, bytesToSend);
     854:	0022      	movs	r2, r4
     856:	490a      	ldr	r1, [pc, #40]	; (880 <CmdFifo_Send+0x38>)
     858:	0030      	movs	r0, r6
     85a:	4b0a      	ldr	r3, [pc, #40]	; (884 <CmdFifo_Send+0x3c>)
     85c:	4798      	blx	r3
        // Increment bytes sent and decrement bytes in FIFO
        bytesSent += bytesToSend;
     85e:	1965      	adds	r5, r4, r5
     860:	b2ad      	uxth	r5, r5
        s_u16FifoByteCount -= bytesToSend;
     862:	4b06      	ldr	r3, [pc, #24]	; (87c <CmdFifo_Send+0x34>)
     864:	889a      	ldrh	r2, [r3, #4]
     866:	1b12      	subs	r2, r2, r4
     868:	809a      	strh	r2, [r3, #4]
        // Adjust read index for next time
        s_u16FifoReadIndex += bytesToSend;
     86a:	885a      	ldrh	r2, [r3, #2]
     86c:	18a2      	adds	r2, r4, r2
     86e:	805a      	strh	r2, [r3, #2]
        // Increment destination pointer by number of bytes sent
        pDst += bytesToSend;
     870:	1936      	adds	r6, r6, r4
        bytesToSend = 0;
     872:	2400      	movs	r4, #0
    while (bytesToSend>0) {
     874:	2c00      	cmp	r4, #0
     876:	d1ed      	bne.n	854 <CmdFifo_Send+0xc>
    };

    return bytesSent;
     878:	0028      	movs	r0, r5
     87a:	bd70      	pop	{r4, r5, r6, pc}
     87c:	200001fe 	.word	0x200001fe
     880:	20000a28 	.word	0x20000a28
     884:	000065f3 	.word	0x000065f3

00000888 <DataFifo_Init>:
#include "App/DcaApp.h"

/** VARIABLES *****************************************************************/
static uint16_t   s_u16ElementRamSizeBytes;

void DataFifo_Init(void) {
     888:	b510      	push	{r4, lr}
	// Clear the contents of the Data FIFO
	memset(&g_acReadingBuffer[0], 0, READING_BUFF_NUM_BYTES);
     88a:	22c0      	movs	r2, #192	; 0xc0
     88c:	0112      	lsls	r2, r2, #4
     88e:	2100      	movs	r1, #0
     890:	4803      	ldr	r0, [pc, #12]	; (8a0 <DataFifo_Init+0x18>)
     892:	4b04      	ldr	r3, [pc, #16]	; (8a4 <DataFifo_Init+0x1c>)
     894:	4798      	blx	r3
	// Reset the buffer read/write indexes and byte count
	s_u16ElementRamSizeBytes = 0;
     896:	2200      	movs	r2, #0
     898:	4b03      	ldr	r3, [pc, #12]	; (8a8 <DataFifo_Init+0x20>)
     89a:	801a      	strh	r2, [r3, #0]
}
     89c:	bd10      	pop	{r4, pc}
     89e:	46c0      	nop			; (mov r8, r8)
     8a0:	20001a28 	.word	0x20001a28
     8a4:	00006605 	.word	0x00006605
     8a8:	20000204 	.word	0x20000204

000008ac <Debug_InitLog>:
 *  @param[in]  None
 *  @param[out] None
 *  @return     Nothing
 ******************************************************************************/
void Debug_InitLog()
{
     8ac:	b510      	push	{r4, lr}
    // Clear the contents of the log
    memset(&s_acLogBuffer[0], 0, sizeof(s_acLogBuffer));
     8ae:	2280      	movs	r2, #128	; 0x80
     8b0:	00d2      	lsls	r2, r2, #3
     8b2:	2100      	movs	r1, #0
     8b4:	4803      	ldr	r0, [pc, #12]	; (8c4 <Debug_InitLog+0x18>)
     8b6:	4b04      	ldr	r3, [pc, #16]	; (8c8 <Debug_InitLog+0x1c>)
     8b8:	4798      	blx	r3
    // Reset the buffer index
    s_u16LogBufferIndex = 0;
     8ba:	2200      	movs	r2, #0
     8bc:	4b03      	ldr	r3, [pc, #12]	; (8cc <Debug_InitLog+0x20>)
     8be:	801a      	strh	r2, [r3, #0]
}
     8c0:	bd10      	pop	{r4, pc}
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	20000208 	.word	0x20000208
     8c8:	00006605 	.word	0x00006605
     8cc:	20000608 	.word	0x20000608

000008d0 <Debug_StoreLog>:
 *  Initialize the debug log (buffer in RAM)
 *  @param[in]  const char* format  sprintf formatter
 *  @param[in]  sprintf argument array
 *  @return     Nothing
 ******************************************************************************/
void Debug_StoreLog(const char *format, ...) {
     8d0:	b40f      	push	{r0, r1, r2, r3}
     8d2:	b5f0      	push	{r4, r5, r6, r7, lr}
     8d4:	46ce      	mov	lr, r9
     8d6:	4647      	mov	r7, r8
     8d8:	b580      	push	{r7, lr}
     8da:	b083      	sub	sp, #12
     8dc:	af00      	add	r7, sp, #0
     8de:	2328      	movs	r3, #40	; 0x28
     8e0:	18fd      	adds	r5, r7, r3
     8e2:	cd10      	ldmia	r5!, {r4}
    uint16_t bytesToWrite, offset, length;
    va_list args;
    char buffer[strlen(format)];
     8e4:	0020      	movs	r0, r4
     8e6:	4e25      	ldr	r6, [pc, #148]	; (97c <Debug_StoreLog+0xac>)
     8e8:	47b0      	blx	r6
     8ea:	3007      	adds	r0, #7
     8ec:	08c0      	lsrs	r0, r0, #3
     8ee:	00c0      	lsls	r0, r0, #3
     8f0:	466b      	mov	r3, sp
     8f2:	1a1b      	subs	r3, r3, r0
     8f4:	469d      	mov	sp, r3
     8f6:	46e8      	mov	r8, sp

    va_start(args, format);
     8f8:	607d      	str	r5, [r7, #4]
    vsprintf(buffer, format, args);
     8fa:	002a      	movs	r2, r5
     8fc:	0021      	movs	r1, r4
     8fe:	4668      	mov	r0, sp
     900:	4b1f      	ldr	r3, [pc, #124]	; (980 <Debug_StoreLog+0xb0>)
     902:	4798      	blx	r3
#if DEBUG_STDIO_REDIRECT
    printf(buffer);
    printf("\r\n");
#endif

    bytesToWrite = strlen(buffer);
     904:	4668      	mov	r0, sp
     906:	47b0      	blx	r6
     908:	b284      	uxth	r4, r0
    offset = 0;
     90a:	2300      	movs	r3, #0
     90c:	4699      	mov	r9, r3

    // Write the bytes to the debug log
    while (bytesToWrite>0) {
     90e:	e010      	b.n	932 <Debug_StoreLog+0x62>
            s_u16LogBufferIndex += bytesToWrite;
            bytesToWrite = 0;

        // Not enough room... fill in remainder of buffer and roll over. Next time through while loop will complete
        } else {
            length = DEBUG_LOG_NUM_BYTES - s_u16LogBufferIndex;
     910:	2380      	movs	r3, #128	; 0x80
     912:	00db      	lsls	r3, r3, #3
     914:	1b9b      	subs	r3, r3, r6
     916:	b29d      	uxth	r5, r3
            memcpy(pDst, &buffer[offset], length);
     918:	4641      	mov	r1, r8
     91a:	4449      	add	r1, r9
     91c:	002a      	movs	r2, r5
     91e:	4b19      	ldr	r3, [pc, #100]	; (984 <Debug_StoreLog+0xb4>)
     920:	4798      	blx	r3
            s_u16LogBufferIndex = 0;
     922:	2200      	movs	r2, #0
     924:	4b18      	ldr	r3, [pc, #96]	; (988 <Debug_StoreLog+0xb8>)
     926:	801a      	strh	r2, [r3, #0]
            bytesToWrite -= length;
     928:	1b64      	subs	r4, r4, r5
     92a:	b2a4      	uxth	r4, r4
            offset += length;
     92c:	444d      	add	r5, r9
     92e:	b2ab      	uxth	r3, r5
     930:	4699      	mov	r9, r3
    while (bytesToWrite>0) {
     932:	2c00      	cmp	r4, #0
     934:	d011      	beq.n	95a <Debug_StoreLog+0x8a>
        char *pDst = &s_acLogBuffer[0] + s_u16LogBufferIndex;
     936:	4b14      	ldr	r3, [pc, #80]	; (988 <Debug_StoreLog+0xb8>)
     938:	881e      	ldrh	r6, [r3, #0]
     93a:	4814      	ldr	r0, [pc, #80]	; (98c <Debug_StoreLog+0xbc>)
     93c:	1980      	adds	r0, r0, r6
        if (DEBUG_LOG_NUM_BYTES > (s_u16LogBufferIndex + bytesToWrite)) {
     93e:	1932      	adds	r2, r6, r4
     940:	4b13      	ldr	r3, [pc, #76]	; (990 <Debug_StoreLog+0xc0>)
     942:	429a      	cmp	r2, r3
     944:	dce4      	bgt.n	910 <Debug_StoreLog+0x40>
            memcpy(pDst, &buffer[offset], bytesToWrite);
     946:	4641      	mov	r1, r8
     948:	4449      	add	r1, r9
     94a:	0022      	movs	r2, r4
     94c:	4b0d      	ldr	r3, [pc, #52]	; (984 <Debug_StoreLog+0xb4>)
     94e:	4798      	blx	r3
            s_u16LogBufferIndex += bytesToWrite;
     950:	19a4      	adds	r4, r4, r6
     952:	4a0d      	ldr	r2, [pc, #52]	; (988 <Debug_StoreLog+0xb8>)
     954:	8014      	strh	r4, [r2, #0]
            bytesToWrite = 0;
     956:	2400      	movs	r4, #0
     958:	e7eb      	b.n	932 <Debug_StoreLog+0x62>
        }
    }

    // This should never happen (because of logic above)... just a sanity check
    if (s_u16LogBufferIndex >= DEBUG_LOG_NUM_BYTES) {
     95a:	4b0b      	ldr	r3, [pc, #44]	; (988 <Debug_StoreLog+0xb8>)
     95c:	881a      	ldrh	r2, [r3, #0]
     95e:	4b0c      	ldr	r3, [pc, #48]	; (990 <Debug_StoreLog+0xc0>)
     960:	429a      	cmp	r2, r3
     962:	d902      	bls.n	96a <Debug_StoreLog+0x9a>
        s_u16LogBufferIndex = 0;
     964:	2200      	movs	r2, #0
     966:	4b08      	ldr	r3, [pc, #32]	; (988 <Debug_StoreLog+0xb8>)
     968:	801a      	strh	r2, [r3, #0]
    }
}
     96a:	46bd      	mov	sp, r7
     96c:	b003      	add	sp, #12
     96e:	bc0c      	pop	{r2, r3}
     970:	4690      	mov	r8, r2
     972:	4699      	mov	r9, r3
     974:	bcf0      	pop	{r4, r5, r6, r7}
     976:	bc08      	pop	{r3}
     978:	b004      	add	sp, #16
     97a:	4718      	bx	r3
     97c:	000067cd 	.word	0x000067cd
     980:	00006999 	.word	0x00006999
     984:	000065f3 	.word	0x000065f3
     988:	20000608 	.word	0x20000608
     98c:	20000208 	.word	0x20000208
     990:	000003ff 	.word	0x000003ff

00000994 <Ethernet_PowerDown>:
    tcpip_lite_stack_init();
	
	return 0;
}

void Ethernet_PowerDown(void) {
     994:	b5f0      	push	{r4, r5, r6, r7, lr}
     996:	b083      	sub	sp, #12
	struct io_descriptor *s_ioSPI;
	uint8_t tx_buffer[2];

	// Get the IO descriptor for the SPI peripheral
	if (spi_m_sync_get_io_descriptor(&ETHERNET_SPI, &s_ioSPI)!=0 ) {
     998:	a901      	add	r1, sp, #4
     99a:	4818      	ldr	r0, [pc, #96]	; (9fc <Ethernet_PowerDown+0x68>)
     99c:	4b18      	ldr	r3, [pc, #96]	; (a00 <Ethernet_PowerDown+0x6c>)
     99e:	4798      	blx	r3
     9a0:	2800      	cmp	r0, #0
     9a2:	d001      	beq.n	9a8 <Ethernet_PowerDown+0x14>
	// Disable the SPI slave (deactivates CSn)
	gpio_set_pin_level(ETHERNET_CS, 1);

	// Disable the SPI peripheral
	spi_m_sync_disable(&ETHERNET_SPI);
}
     9a4:	b003      	add	sp, #12
     9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tx_buffer[0] = 0xA0|0x1F;   // Bit field clear | ECON1 register address
     9a8:	23bf      	movs	r3, #191	; 0xbf
     9aa:	466a      	mov	r2, sp
     9ac:	7013      	strb	r3, [r2, #0]
	tx_buffer[1] = 0x03;        // Bank 3
     9ae:	2703      	movs	r7, #3
     9b0:	7057      	strb	r7, [r2, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9b2:	24c0      	movs	r4, #192	; 0xc0
     9b4:	05e4      	lsls	r4, r4, #23
     9b6:	2580      	movs	r5, #128	; 0x80
     9b8:	042d      	lsls	r5, r5, #16
     9ba:	6165      	str	r5, [r4, #20]
	io_write(s_ioSPI, tx_buffer, 2);
     9bc:	2202      	movs	r2, #2
     9be:	4669      	mov	r1, sp
     9c0:	9801      	ldr	r0, [sp, #4]
     9c2:	4e10      	ldr	r6, [pc, #64]	; (a04 <Ethernet_PowerDown+0x70>)
     9c4:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9c6:	61a5      	str	r5, [r4, #24]
	tx_buffer[0] = 0x80|0x1F;   // Bit field set | ECON1 register address
     9c8:	239f      	movs	r3, #159	; 0x9f
     9ca:	466a      	mov	r2, sp
     9cc:	7013      	strb	r3, [r2, #0]
	tx_buffer[1] = 0x03;        // Bank 3
     9ce:	7057      	strb	r7, [r2, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9d0:	6165      	str	r5, [r4, #20]
	io_write(s_ioSPI, tx_buffer, 2);
     9d2:	2202      	movs	r2, #2
     9d4:	4669      	mov	r1, sp
     9d6:	9801      	ldr	r0, [sp, #4]
     9d8:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9da:	61a5      	str	r5, [r4, #24]
	tx_buffer[0] = 0x80|0x1E;   // Bit field set | ECON2 register address
     9dc:	239e      	movs	r3, #158	; 0x9e
     9de:	466a      	mov	r2, sp
     9e0:	7013      	strb	r3, [r2, #0]
	tx_buffer[1] = 0x20;        // PWRSV bit set
     9e2:	3b7e      	subs	r3, #126	; 0x7e
     9e4:	7053      	strb	r3, [r2, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9e6:	6165      	str	r5, [r4, #20]
	io_write(s_ioSPI, tx_buffer, 2);
     9e8:	2202      	movs	r2, #2
     9ea:	4669      	mov	r1, sp
     9ec:	9801      	ldr	r0, [sp, #4]
     9ee:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9f0:	61a5      	str	r5, [r4, #24]
	spi_m_sync_disable(&ETHERNET_SPI);
     9f2:	4802      	ldr	r0, [pc, #8]	; (9fc <Ethernet_PowerDown+0x68>)
     9f4:	4b04      	ldr	r3, [pc, #16]	; (a08 <Ethernet_PowerDown+0x74>)
     9f6:	4798      	blx	r3
     9f8:	e7d4      	b.n	9a4 <Ethernet_PowerDown+0x10>
     9fa:	46c0      	nop			; (mov r8, r8)
     9fc:	20004a2c 	.word	0x20004a2c
     a00:	00002949 	.word	0x00002949
     a04:	00002771 	.word	0x00002771
     a08:	00002861 	.word	0x00002861

00000a0c <Ethernet_PowerUp>:

void Ethernet_PowerUp(void) {
     a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a0e:	b083      	sub	sp, #12
	struct io_descriptor *s_ioSPI;
    uint8_t tx_buffer[2];

    // Enable the SPI peripheral
    spi_m_sync_enable(&ETHERNET_SPI);
     a10:	4c18      	ldr	r4, [pc, #96]	; (a74 <Ethernet_PowerUp+0x68>)
     a12:	0020      	movs	r0, r4
     a14:	4b18      	ldr	r3, [pc, #96]	; (a78 <Ethernet_PowerUp+0x6c>)
     a16:	4798      	blx	r3

    // Get the IO descriptor for the SPI peripheral
    if (spi_m_sync_get_io_descriptor(&ETHERNET_SPI, &s_ioSPI)!=0 ) {
     a18:	a901      	add	r1, sp, #4
     a1a:	0020      	movs	r0, r4
     a1c:	4b17      	ldr	r3, [pc, #92]	; (a7c <Ethernet_PowerUp+0x70>)
     a1e:	4798      	blx	r3
     a20:	2800      	cmp	r0, #0
     a22:	d001      	beq.n	a28 <Ethernet_PowerUp+0x1c>
    gpio_set_pin_level(ETHERNET_CS, 0);
    // Write payload
    io_write(s_ioSPI, tx_buffer, 2);
    // Disable the SPI slave (deactivates CSn)
    gpio_set_pin_level(ETHERNET_CS, 1);
}
     a24:	b003      	add	sp, #12
     a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tx_buffer[0] = 0xA0|0x1F;   // Bit field clear | ECON1 register address
     a28:	23bf      	movs	r3, #191	; 0xbf
     a2a:	466a      	mov	r2, sp
     a2c:	7013      	strb	r3, [r2, #0]
    tx_buffer[1] = 0x03;        // Bank 3
     a2e:	2703      	movs	r7, #3
     a30:	7057      	strb	r7, [r2, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a32:	24c0      	movs	r4, #192	; 0xc0
     a34:	05e4      	lsls	r4, r4, #23
     a36:	2580      	movs	r5, #128	; 0x80
     a38:	042d      	lsls	r5, r5, #16
     a3a:	6165      	str	r5, [r4, #20]
    io_write(s_ioSPI, tx_buffer, 2);
     a3c:	2202      	movs	r2, #2
     a3e:	4669      	mov	r1, sp
     a40:	9801      	ldr	r0, [sp, #4]
     a42:	4e0f      	ldr	r6, [pc, #60]	; (a80 <Ethernet_PowerUp+0x74>)
     a44:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a46:	61a5      	str	r5, [r4, #24]
    tx_buffer[0] = 0x80|0x1F;   // Bit field set | ECON1 register address
     a48:	239f      	movs	r3, #159	; 0x9f
     a4a:	466a      	mov	r2, sp
     a4c:	7013      	strb	r3, [r2, #0]
    tx_buffer[1] = 0x03;        // Bank 3
     a4e:	7057      	strb	r7, [r2, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a50:	6165      	str	r5, [r4, #20]
    io_write(s_ioSPI, tx_buffer, 2);
     a52:	2202      	movs	r2, #2
     a54:	4669      	mov	r1, sp
     a56:	9801      	ldr	r0, [sp, #4]
     a58:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a5a:	61a5      	str	r5, [r4, #24]
    tx_buffer[0] = 0xA0|0x1E;   // Bit field clear | ECON2 register address
     a5c:	23be      	movs	r3, #190	; 0xbe
     a5e:	466a      	mov	r2, sp
     a60:	7013      	strb	r3, [r2, #0]
    tx_buffer[1] = 0x20;        // PWRSV bit set
     a62:	3b9e      	subs	r3, #158	; 0x9e
     a64:	7053      	strb	r3, [r2, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a66:	6165      	str	r5, [r4, #20]
    io_write(s_ioSPI, tx_buffer, 2);
     a68:	2202      	movs	r2, #2
     a6a:	4669      	mov	r1, sp
     a6c:	9801      	ldr	r0, [sp, #4]
     a6e:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a70:	61a5      	str	r5, [r4, #24]
     a72:	e7d7      	b.n	a24 <Ethernet_PowerUp+0x18>
     a74:	20004a2c 	.word	0x20004a2c
     a78:	00002839 	.word	0x00002839
     a7c:	00002949 	.word	0x00002949
     a80:	00002771 	.word	0x00002771

00000a84 <_DetectEthernet>:

bool _DetectEthernet() {
     a84:	b510      	push	{r4, lr}
     a86:	b084      	sub	sp, #16
    int8_t result = 0;
    uint8_t tx_buffer[2];
    uint8_t rx_buffer[1];

    // Get the IO descriptor for the SPI peripheral
    if (spi_m_sync_get_io_descriptor(&ETHERNET_SPI, &s_ioSPI)!=0 ) {
     a88:	a903      	add	r1, sp, #12
     a8a:	4831      	ldr	r0, [pc, #196]	; (b50 <_DetectEthernet+0xcc>)
     a8c:	4b31      	ldr	r3, [pc, #196]	; (b54 <_DetectEthernet+0xd0>)
     a8e:	4798      	blx	r3
     a90:	2800      	cmp	r0, #0
     a92:	d002      	beq.n	a9a <_DetectEthernet+0x16>
        return false;
     a94:	2000      	movs	r0, #0
    if (result==-1) return false;
    // 0x00 or 0xFF in the REV ID register indicates that the device is not present
    else if (rx_buffer[0]==0x00 || rx_buffer[0]==0xFF) return false;
    // If we make it here, the device is present
    else return true;
}
     a96:	b004      	add	sp, #16
     a98:	bd10      	pop	{r4, pc}
    spi_m_sync_enable(&ETHERNET_SPI);
     a9a:	482d      	ldr	r0, [pc, #180]	; (b50 <_DetectEthernet+0xcc>)
     a9c:	4b2e      	ldr	r3, [pc, #184]	; (b58 <_DetectEthernet+0xd4>)
     a9e:	4798      	blx	r3
    tx_buffer[0] = 0xA0|0x1F;   // Bit field clear | ECON1 register address
     aa0:	a902      	add	r1, sp, #8
     aa2:	23bf      	movs	r3, #191	; 0xbf
     aa4:	700b      	strb	r3, [r1, #0]
    tx_buffer[1] = 0x03;        // Bank 3
     aa6:	3bbc      	subs	r3, #188	; 0xbc
     aa8:	704b      	strb	r3, [r1, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     aaa:	2280      	movs	r2, #128	; 0x80
     aac:	0412      	lsls	r2, r2, #16
     aae:	23c0      	movs	r3, #192	; 0xc0
     ab0:	05db      	lsls	r3, r3, #23
     ab2:	615a      	str	r2, [r3, #20]
    if (io_write(s_ioSPI, tx_buffer, 2) != 2) result = -1;
     ab4:	2202      	movs	r2, #2
     ab6:	9803      	ldr	r0, [sp, #12]
     ab8:	4b28      	ldr	r3, [pc, #160]	; (b5c <_DetectEthernet+0xd8>)
     aba:	4798      	blx	r3
     abc:	2802      	cmp	r0, #2
     abe:	d040      	beq.n	b42 <_DetectEthernet+0xbe>
     ac0:	2401      	movs	r4, #1
     ac2:	4264      	negs	r4, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ac4:	23c0      	movs	r3, #192	; 0xc0
     ac6:	05db      	lsls	r3, r3, #23
     ac8:	2280      	movs	r2, #128	; 0x80
     aca:	0412      	lsls	r2, r2, #16
     acc:	619a      	str	r2, [r3, #24]
    tx_buffer[0] = 0x80|0x1F;   // Bit field set | ECON1 register address
     ace:	a902      	add	r1, sp, #8
     ad0:	209f      	movs	r0, #159	; 0x9f
     ad2:	7008      	strb	r0, [r1, #0]
    tx_buffer[1] = 0x03;        // Bank 3
     ad4:	389c      	subs	r0, #156	; 0x9c
     ad6:	7048      	strb	r0, [r1, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ad8:	615a      	str	r2, [r3, #20]
    if (io_write(s_ioSPI, tx_buffer, 2) != 2) result = -1;
     ada:	2202      	movs	r2, #2
     adc:	9803      	ldr	r0, [sp, #12]
     ade:	4b1f      	ldr	r3, [pc, #124]	; (b5c <_DetectEthernet+0xd8>)
     ae0:	4798      	blx	r3
     ae2:	2802      	cmp	r0, #2
     ae4:	d001      	beq.n	aea <_DetectEthernet+0x66>
     ae6:	2401      	movs	r4, #1
     ae8:	4264      	negs	r4, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     aea:	23c0      	movs	r3, #192	; 0xc0
     aec:	05db      	lsls	r3, r3, #23
     aee:	2280      	movs	r2, #128	; 0x80
     af0:	0412      	lsls	r2, r2, #16
     af2:	619a      	str	r2, [r3, #24]
    tx_buffer[0] = 0x00|0x12;   // Read control register | EREVID register address
     af4:	a902      	add	r1, sp, #8
     af6:	2012      	movs	r0, #18
     af8:	7008      	strb	r0, [r1, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     afa:	615a      	str	r2, [r3, #20]
    if (io_write(s_ioSPI, tx_buffer, 1) != 1) result = -1;
     afc:	2201      	movs	r2, #1
     afe:	9803      	ldr	r0, [sp, #12]
     b00:	4b16      	ldr	r3, [pc, #88]	; (b5c <_DetectEthernet+0xd8>)
     b02:	4798      	blx	r3
     b04:	2801      	cmp	r0, #1
     b06:	d001      	beq.n	b0c <_DetectEthernet+0x88>
     b08:	2401      	movs	r4, #1
     b0a:	4264      	negs	r4, r4
    if (io_read(s_ioSPI, rx_buffer, 1) != 1)  result = -1;
     b0c:	2201      	movs	r2, #1
     b0e:	a901      	add	r1, sp, #4
     b10:	9803      	ldr	r0, [sp, #12]
     b12:	4b13      	ldr	r3, [pc, #76]	; (b60 <_DetectEthernet+0xdc>)
     b14:	4798      	blx	r3
     b16:	2801      	cmp	r0, #1
     b18:	d001      	beq.n	b1e <_DetectEthernet+0x9a>
     b1a:	2401      	movs	r4, #1
     b1c:	4264      	negs	r4, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b1e:	2280      	movs	r2, #128	; 0x80
     b20:	0412      	lsls	r2, r2, #16
     b22:	23c0      	movs	r3, #192	; 0xc0
     b24:	05db      	lsls	r3, r3, #23
     b26:	619a      	str	r2, [r3, #24]
    spi_m_sync_disable(&ETHERNET_SPI);
     b28:	4809      	ldr	r0, [pc, #36]	; (b50 <_DetectEthernet+0xcc>)
     b2a:	4b0e      	ldr	r3, [pc, #56]	; (b64 <_DetectEthernet+0xe0>)
     b2c:	4798      	blx	r3
    if (result==-1) return false;
     b2e:	1c63      	adds	r3, r4, #1
     b30:	d00b      	beq.n	b4a <_DetectEthernet+0xc6>
    else if (rx_buffer[0]==0x00 || rx_buffer[0]==0xFF) return false;
     b32:	ab01      	add	r3, sp, #4
     b34:	781b      	ldrb	r3, [r3, #0]
     b36:	3b01      	subs	r3, #1
     b38:	b2db      	uxtb	r3, r3
     b3a:	2bfd      	cmp	r3, #253	; 0xfd
     b3c:	d803      	bhi.n	b46 <_DetectEthernet+0xc2>
    else return true;
     b3e:	2001      	movs	r0, #1
     b40:	e7a9      	b.n	a96 <_DetectEthernet+0x12>
    int8_t result = 0;
     b42:	2400      	movs	r4, #0
     b44:	e7be      	b.n	ac4 <_DetectEthernet+0x40>
    else if (rx_buffer[0]==0x00 || rx_buffer[0]==0xFF) return false;
     b46:	2000      	movs	r0, #0
     b48:	e7a5      	b.n	a96 <_DetectEthernet+0x12>
    if (result==-1) return false;
     b4a:	2000      	movs	r0, #0
     b4c:	e7a3      	b.n	a96 <_DetectEthernet+0x12>
     b4e:	46c0      	nop			; (mov r8, r8)
     b50:	20004a2c 	.word	0x20004a2c
     b54:	00002949 	.word	0x00002949
     b58:	00002839 	.word	0x00002839
     b5c:	00002771 	.word	0x00002771
     b60:	000027a9 	.word	0x000027a9
     b64:	00002861 	.word	0x00002861

00000b68 <Ethernet_Detect>:
bool Ethernet_Detect(void) {
     b68:	b510      	push	{r4, lr}
     b6a:	2280      	movs	r2, #128	; 0x80
     b6c:	0512      	lsls	r2, r2, #20
     b6e:	23c0      	movs	r3, #192	; 0xc0
     b70:	05db      	lsls	r3, r3, #23
     b72:	619a      	str	r2, [r3, #24]
    delay_ms(1);
     b74:	2001      	movs	r0, #1
     b76:	4b02      	ldr	r3, [pc, #8]	; (b80 <Ethernet_Detect+0x18>)
     b78:	4798      	blx	r3
    return _DetectEthernet();
     b7a:	4b02      	ldr	r3, [pc, #8]	; (b84 <Ethernet_Detect+0x1c>)
     b7c:	4798      	blx	r3
}
     b7e:	bd10      	pop	{r4, pc}
     b80:	000023a1 	.word	0x000023a1
     b84:	00000a85 	.word	0x00000a85

00000b88 <Ethernet_Init>:
int8_t Ethernet_Init(void) {
     b88:	b530      	push	{r4, r5, lr}
     b8a:	b087      	sub	sp, #28
    bool fHasEthernet = Ethernet_Detect();
     b8c:	4b2f      	ldr	r3, [pc, #188]	; (c4c <Ethernet_Init+0xc4>)
     b8e:	4798      	blx	r3
    if (fHasEthernet==false) return -1;
     b90:	2800      	cmp	r0, #0
     b92:	d058      	beq.n	c46 <Ethernet_Init+0xbe>
    if (s_fEthernetFirstTime==true) {
     b94:	4b2e      	ldr	r3, [pc, #184]	; (c50 <Ethernet_Init+0xc8>)
     b96:	781b      	ldrb	r3, [r3, #0]
     b98:	2b00      	cmp	r3, #0
     b9a:	d039      	beq.n	c10 <Ethernet_Init+0x88>
        s_fEthernetFirstTime = false;
     b9c:	2200      	movs	r2, #0
     b9e:	4b2c      	ldr	r3, [pc, #176]	; (c50 <Ethernet_Init+0xc8>)
     ba0:	701a      	strb	r2, [r3, #0]
        Timer_AddTimer(&TIMER_ETH_CONNECION_TIMEOUT);
     ba2:	4c2c      	ldr	r4, [pc, #176]	; (c54 <Ethernet_Init+0xcc>)
     ba4:	0020      	movs	r0, r4
     ba6:	4d2c      	ldr	r5, [pc, #176]	; (c58 <Ethernet_Init+0xd0>)
     ba8:	47a8      	blx	r5
        Timer_AddTimer(&TIMER_ETH_DNS_TIMEOUT);
     baa:	1ca0      	adds	r0, r4, #2
     bac:	47a8      	blx	r5
        Timer_AddTimer(&TIMER_ETH_SERVER_LOST_COMM);
     bae:	1d20      	adds	r0, r4, #4
     bb0:	47a8      	blx	r5
        Timer_AddTimer(&TIMER_ETH_SERVER_ESTABLISH_COMM);
     bb2:	1da0      	adds	r0, r4, #6
     bb4:	47a8      	blx	r5
        Timer_AddTimer(&TIMER_ETH_DNS_REMOTE_RESOLUTION_TIMEOUT);
     bb6:	0020      	movs	r0, r4
     bb8:	3008      	adds	r0, #8
     bba:	47a8      	blx	r5
        Timer_AddTimer(&TIMER_ETH_SOCKET_REMOTE_INIT_TIMEOUT);
     bbc:	0020      	movs	r0, r4
     bbe:	300a      	adds	r0, #10
     bc0:	47a8      	blx	r5
        Timer_AddTimer(&TIMER_ETH_SOCKET_REMOTE_RESPONSE_TIMEOUT);
     bc2:	0020      	movs	r0, r4
     bc4:	300c      	adds	r0, #12
     bc6:	47a8      	blx	r5
        Timer_AddTimer(&TIMER_ETH_SOCKET_REMOTE_CLEANUP_TIMEOUT);
     bc8:	0020      	movs	r0, r4
     bca:	300e      	adds	r0, #14
     bcc:	47a8      	blx	r5
    memset((uint8_t *)&s_stEthernetInfo, 0, sizeof(sEthernetInfo));
     bce:	2218      	movs	r2, #24
     bd0:	2100      	movs	r1, #0
     bd2:	4820      	ldr	r0, [pc, #128]	; (c54 <Ethernet_Init+0xcc>)
     bd4:	3010      	adds	r0, #16
     bd6:	4b21      	ldr	r3, [pc, #132]	; (c5c <Ethernet_Init+0xd4>)
     bd8:	4798      	blx	r3
    sprintf(acHostname, "DCA-00001");
     bda:	466b      	mov	r3, sp
     bdc:	4a20      	ldr	r2, [pc, #128]	; (c60 <Ethernet_Init+0xd8>)
     bde:	ca03      	ldmia	r2!, {r0, r1}
     be0:	c303      	stmia	r3!, {r0, r1}
     be2:	0019      	movs	r1, r3
     be4:	8813      	ldrh	r3, [r2, #0]
     be6:	800b      	strh	r3, [r1, #0]
    g_au8MacAddress[0] = OUI_BYTE_1; // 0x60
     be8:	481e      	ldr	r0, [pc, #120]	; (c64 <Ethernet_Init+0xdc>)
     bea:	2360      	movs	r3, #96	; 0x60
     bec:	7003      	strb	r3, [r0, #0]
    g_au8MacAddress[1] = OUI_BYTE_2; // 0x54
     bee:	3b0c      	subs	r3, #12
     bf0:	7043      	strb	r3, [r0, #1]
    g_au8MacAddress[2] = OUI_BYTE_3; // 0x64
     bf2:	3310      	adds	r3, #16
     bf4:	7083      	strb	r3, [r0, #2]
    g_au8MacAddress[3] = 0x00;
     bf6:	2300      	movs	r3, #0
     bf8:	70c3      	strb	r3, [r0, #3]
    g_au8MacAddress[4] =  0x10;
     bfa:	3310      	adds	r3, #16
     bfc:	7103      	strb	r3, [r0, #4]
    g_au8MacAddress[5] = 0x01;
     bfe:	3b0f      	subs	r3, #15
     c00:	7143      	strb	r3, [r0, #5]
    ETH_InitMAC((uint8_t*)&g_au8MacAddress[0]);
     c02:	4b19      	ldr	r3, [pc, #100]	; (c68 <Ethernet_Init+0xe0>)
     c04:	4798      	blx	r3
    tcpip_lite_stack_init();
     c06:	4b19      	ldr	r3, [pc, #100]	; (c6c <Ethernet_Init+0xe4>)
     c08:	4798      	blx	r3
	return 0;
     c0a:	2000      	movs	r0, #0
}
     c0c:	b007      	add	sp, #28
     c0e:	bd30      	pop	{r4, r5, pc}
        Timer_SetTimer(TIMER_ETH_CONNECION_TIMEOUT, 0);
     c10:	4d10      	ldr	r5, [pc, #64]	; (c54 <Ethernet_Init+0xcc>)
     c12:	8828      	ldrh	r0, [r5, #0]
     c14:	2100      	movs	r1, #0
     c16:	4c16      	ldr	r4, [pc, #88]	; (c70 <Ethernet_Init+0xe8>)
     c18:	47a0      	blx	r4
        Timer_SetTimer(TIMER_ETH_DNS_TIMEOUT, 0);
     c1a:	8868      	ldrh	r0, [r5, #2]
     c1c:	2100      	movs	r1, #0
     c1e:	47a0      	blx	r4
        Timer_SetTimer(TIMER_ETH_SERVER_LOST_COMM, 0);
     c20:	88a8      	ldrh	r0, [r5, #4]
     c22:	2100      	movs	r1, #0
     c24:	47a0      	blx	r4
        Timer_SetTimer(TIMER_ETH_SERVER_ESTABLISH_COMM, 0);
     c26:	88e8      	ldrh	r0, [r5, #6]
     c28:	2100      	movs	r1, #0
     c2a:	47a0      	blx	r4
        Timer_SetTimer(TIMER_ETH_DNS_REMOTE_RESOLUTION_TIMEOUT, 0);
     c2c:	8928      	ldrh	r0, [r5, #8]
     c2e:	2100      	movs	r1, #0
     c30:	47a0      	blx	r4
        Timer_SetTimer(TIMER_ETH_SOCKET_REMOTE_INIT_TIMEOUT, 0);
     c32:	8968      	ldrh	r0, [r5, #10]
     c34:	2100      	movs	r1, #0
     c36:	47a0      	blx	r4
        Timer_SetTimer(TIMER_ETH_SOCKET_REMOTE_RESPONSE_TIMEOUT, 0);
     c38:	89a8      	ldrh	r0, [r5, #12]
     c3a:	2100      	movs	r1, #0
     c3c:	47a0      	blx	r4
        Timer_SetTimer(TIMER_ETH_SOCKET_REMOTE_CLEANUP_TIMEOUT, 0);
     c3e:	89e8      	ldrh	r0, [r5, #14]
     c40:	2100      	movs	r1, #0
     c42:	47a0      	blx	r4
     c44:	e7c3      	b.n	bce <Ethernet_Init+0x46>
    if (fHasEthernet==false) return -1;
     c46:	2001      	movs	r0, #1
     c48:	4240      	negs	r0, r0
     c4a:	e7df      	b.n	c0c <Ethernet_Init+0x84>
     c4c:	00000b69 	.word	0x00000b69
     c50:	20000001 	.word	0x20000001
     c54:	2000060c 	.word	0x2000060c
     c58:	00001bad 	.word	0x00001bad
     c5c:	00006605 	.word	0x00006605
     c60:	000073d0 	.word	0x000073d0
     c64:	20000920 	.word	0x20000920
     c68:	000045e1 	.word	0x000045e1
     c6c:	00006371 	.word	0x00006371
     c70:	00001bcd 	.word	0x00001bcd

00000c74 <Ethernet_HasLink>:

bool Ethernet_HasLink(void) {
     c74:	b510      	push	{r4, lr}
	return ETH_CheckLinkUp();
     c76:	4b01      	ldr	r3, [pc, #4]	; (c7c <Ethernet_HasLink+0x8>)
     c78:	4798      	blx	r3
}
     c7a:	bd10      	pop	{r4, pc}
     c7c:	00003cf5 	.word	0x00003cf5

00000c80 <_DnsWriteHostname>:
        default:
            break;
    }
}

void _DnsWriteHostname(void) {
     c80:	b5f0      	push	{r4, r5, r6, r7, lr}
     c82:	46c6      	mov	lr, r8
     c84:	b500      	push	{lr}
	char* pcLookAhead;
	char cByte;
	uint8_t u8Len;

	// Initialize pointers
	pcHostname = s_pcLookupHostname;
     c86:	4b1a      	ldr	r3, [pc, #104]	; (cf0 <_DnsWriteHostname+0x70>)
     c88:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	pcLookAhead = s_pcLookupHostname;
     c8a:	0037      	movs	r7, r6
     c8c:	e026      	b.n	cdc <_DnsWriteHostname+0x5c>
	// Loop through the host name string formatting correctly for DNS query
	while (1) {
		u8Len = 0;
		do {
			cByte = *pcLookAhead++;
			u8Len++;
     c8e:	001c      	movs	r4, r3
			cByte = *pcLookAhead++;
     c90:	1c57      	adds	r7, r2, #1
     c92:	7815      	ldrb	r5, [r2, #0]
			u8Len++;
     c94:	1c63      	adds	r3, r4, #1
     c96:	b2db      	uxtb	r3, r3
		} while((cByte!='\0') && (cByte!='.') && (cByte!='/') && (cByte!=',') && (cByte!='>'));
     c98:	2d00      	cmp	r5, #0
     c9a:	d008      	beq.n	cae <_DnsWriteHostname+0x2e>
     c9c:	2d2e      	cmp	r5, #46	; 0x2e
     c9e:	d006      	beq.n	cae <_DnsWriteHostname+0x2e>
     ca0:	2d2f      	cmp	r5, #47	; 0x2f
     ca2:	d004      	beq.n	cae <_DnsWriteHostname+0x2e>
     ca4:	2d2c      	cmp	r5, #44	; 0x2c
     ca6:	d002      	beq.n	cae <_DnsWriteHostname+0x2e>
			cByte = *pcLookAhead++;
     ca8:	003a      	movs	r2, r7
		} while((cByte!='\0') && (cByte!='.') && (cByte!='/') && (cByte!=',') && (cByte!='>'));
     caa:	2d3e      	cmp	r5, #62	; 0x3e
     cac:	d1ef      	bne.n	c8e <_DnsWriteHostname+0xe>
		// Decrement the length, to exclude the '.', and write it to the UDP
		u8Len--;
		UDP_Write8(u8Len);
     cae:	0020      	movs	r0, r4
     cb0:	4b10      	ldr	r3, [pc, #64]	; (cf4 <_DnsWriteHostname+0x74>)
     cb2:	4798      	blx	r3
     cb4:	e000      	b.n	cb8 <_DnsWriteHostname+0x38>
		// Put the data up to (but excluding) the '.' in the host name string
		do {
			UDP_Write8(*pcHostname++);
     cb6:	4646      	mov	r6, r8
     cb8:	1c73      	adds	r3, r6, #1
     cba:	4698      	mov	r8, r3
     cbc:	7830      	ldrb	r0, [r6, #0]
     cbe:	4b0d      	ldr	r3, [pc, #52]	; (cf4 <_DnsWriteHostname+0x74>)
     cc0:	4798      	blx	r3
			u8Len--;
     cc2:	3c01      	subs	r4, #1
     cc4:	b2e4      	uxtb	r4, r4
		} while(u8Len>0);
     cc6:	2c00      	cmp	r4, #0
     cc8:	d1f5      	bne.n	cb6 <_DnsWriteHostname+0x36>
		pcHostname++;
     cca:	3602      	adds	r6, #2
		// Break out of the while loop if the last byte read indicates the end of the host name
		if ((cByte=='\0') || (cByte=='/') || (cByte==',') || (cByte=='>'))
     ccc:	2d00      	cmp	r5, #0
     cce:	d008      	beq.n	ce2 <_DnsWriteHostname+0x62>
     cd0:	2d2f      	cmp	r5, #47	; 0x2f
     cd2:	d006      	beq.n	ce2 <_DnsWriteHostname+0x62>
     cd4:	2d2c      	cmp	r5, #44	; 0x2c
     cd6:	d004      	beq.n	ce2 <_DnsWriteHostname+0x62>
     cd8:	2d3e      	cmp	r5, #62	; 0x3e
     cda:	d002      	beq.n	ce2 <_DnsWriteHostname+0x62>
	pcLookAhead = s_pcLookupHostname;
     cdc:	003a      	movs	r2, r7
		u8Len = 0;
     cde:	2400      	movs	r4, #0
     ce0:	e7d6      	b.n	c90 <_DnsWriteHostname+0x10>
		break;
	}
	UDP_Write8(0x00); // Write the null terminator for the host name string
     ce2:	2000      	movs	r0, #0
     ce4:	4b03      	ldr	r3, [pc, #12]	; (cf4 <_DnsWriteHostname+0x74>)
     ce6:	4798      	blx	r3
}
     ce8:	bc04      	pop	{r2}
     cea:	4690      	mov	r8, r2
     cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cee:	46c0      	nop			; (mov r8, r8)
     cf0:	2000060c 	.word	0x2000060c
     cf4:	0000406d 	.word	0x0000406d

00000cf8 <_ManageEthernetDnsState>:
void _ManageEthernetDnsState(void) {
     cf8:	b570      	push	{r4, r5, r6, lr}
    if (s_stEthernetInfo.fConnected==false) return;
     cfa:	4b50      	ldr	r3, [pc, #320]	; (e3c <_ManageEthernetDnsState+0x144>)
     cfc:	7c1b      	ldrb	r3, [r3, #16]
     cfe:	2b00      	cmp	r3, #0
     d00:	d04c      	beq.n	d9c <_ManageEthernetDnsState+0xa4>
    switch(s_eEthernetDnsState) {
     d02:	4a4e      	ldr	r2, [pc, #312]	; (e3c <_ManageEthernetDnsState+0x144>)
     d04:	232c      	movs	r3, #44	; 0x2c
     d06:	5cd1      	ldrb	r1, [r2, r3]
     d08:	2906      	cmp	r1, #6
     d0a:	d847      	bhi.n	d9c <_ManageEthernetDnsState+0xa4>
     d0c:	008b      	lsls	r3, r1, #2
     d0e:	4a4c      	ldr	r2, [pc, #304]	; (e40 <_ManageEthernetDnsState+0x148>)
     d10:	58d3      	ldr	r3, [r2, r3]
     d12:	469f      	mov	pc, r3
			DEBUG_INFO("DNS STATE (START)");
     d14:	484b      	ldr	r0, [pc, #300]	; (e44 <_ManageEthernetDnsState+0x14c>)
     d16:	4b4c      	ldr	r3, [pc, #304]	; (e48 <_ManageEthernetDnsState+0x150>)
     d18:	4798      	blx	r3
            su8Attempts = 0;
     d1a:	4b48      	ldr	r3, [pc, #288]	; (e3c <_ManageEthernetDnsState+0x144>)
     d1c:	2200      	movs	r2, #0
     d1e:	212d      	movs	r1, #45	; 0x2d
     d20:	545a      	strb	r2, [r3, r1]
            su32DnsServer = ipv4DNS[0];
     d22:	494a      	ldr	r1, [pc, #296]	; (e4c <_ManageEthernetDnsState+0x154>)
     d24:	6809      	ldr	r1, [r1, #0]
     d26:	6319      	str	r1, [r3, #48]	; 0x30
            *s_pu32LookupHostIp = 0;
     d28:	6b59      	ldr	r1, [r3, #52]	; 0x34
     d2a:	600a      	str	r2, [r1, #0]
            s_eEthernetDnsState = DNS_STATE_OPEN_SOCKET;
     d2c:	2102      	movs	r1, #2
     d2e:	322c      	adds	r2, #44	; 0x2c
     d30:	5499      	strb	r1, [r3, r2]
            Timer_SetTimer(TIMER_ETH_DNS_TIMEOUT, TIMEOUT_DNS_RESOLUTION);
     d32:	8858      	ldrh	r0, [r3, #2]
     d34:	3101      	adds	r1, #1
     d36:	4b46      	ldr	r3, [pc, #280]	; (e50 <_ManageEthernetDnsState+0x158>)
     d38:	4798      	blx	r3
			DEBUG_INFO("DNS STATE (OPEN)");
     d3a:	4846      	ldr	r0, [pc, #280]	; (e54 <_ManageEthernetDnsState+0x15c>)
     d3c:	4b42      	ldr	r3, [pc, #264]	; (e48 <_ManageEthernetDnsState+0x150>)
     d3e:	4798      	blx	r3
            if (Timer_GetTimer(TIMER_ETH_DNS_TIMEOUT)==0) {
     d40:	4b3e      	ldr	r3, [pc, #248]	; (e3c <_ManageEthernetDnsState+0x144>)
     d42:	8858      	ldrh	r0, [r3, #2]
     d44:	4b44      	ldr	r3, [pc, #272]	; (e58 <_ManageEthernetDnsState+0x160>)
     d46:	4798      	blx	r3
     d48:	2800      	cmp	r0, #0
     d4a:	d128      	bne.n	d9e <_ManageEthernetDnsState+0xa6>
                s_eEthernetDnsState = DNS_STATE_FAIL;
     d4c:	2105      	movs	r1, #5
     d4e:	232c      	movs	r3, #44	; 0x2c
     d50:	4a3a      	ldr	r2, [pc, #232]	; (e3c <_ManageEthernetDnsState+0x144>)
     d52:	54d1      	strb	r1, [r2, r3]
			DEBUG_INFO("DNS STATE (QUERY)");
     d54:	4841      	ldr	r0, [pc, #260]	; (e5c <_ManageEthernetDnsState+0x164>)
     d56:	4b3c      	ldr	r3, [pc, #240]	; (e48 <_ManageEthernetDnsState+0x150>)
     d58:	4798      	blx	r3
            s_u16TransactionID++;
     d5a:	4d38      	ldr	r5, [pc, #224]	; (e3c <_ManageEthernetDnsState+0x144>)
     d5c:	8f28      	ldrh	r0, [r5, #56]	; 0x38
     d5e:	3001      	adds	r0, #1
     d60:	b280      	uxth	r0, r0
     d62:	8728      	strh	r0, [r5, #56]	; 0x38
            UDP_Write16(s_u16TransactionID);
     d64:	4c3e      	ldr	r4, [pc, #248]	; (e60 <_ManageEthernetDnsState+0x168>)
     d66:	47a0      	blx	r4
            UDP_Write16(0x0100); // Standard query with recursion
     d68:	2080      	movs	r0, #128	; 0x80
     d6a:	0040      	lsls	r0, r0, #1
     d6c:	47a0      	blx	r4
            UDP_Write16(0x0001); // 0x0001 questions
     d6e:	2001      	movs	r0, #1
     d70:	47a0      	blx	r4
            UDP_Write16(0x0000); // 0x0000 answers
     d72:	2000      	movs	r0, #0
     d74:	47a0      	blx	r4
            UDP_Write16(0x0000); // 0x0000 name server resource records
     d76:	2000      	movs	r0, #0
     d78:	47a0      	blx	r4
            UDP_Write16(0x0000); // 0x0000 additional records
     d7a:	2000      	movs	r0, #0
     d7c:	47a0      	blx	r4
            _DnsWriteHostname();
     d7e:	4b39      	ldr	r3, [pc, #228]	; (e64 <_ManageEthernetDnsState+0x16c>)
     d80:	4798      	blx	r3
            UDP_Write16(0x0001); // Type A (host address)
     d82:	2001      	movs	r0, #1
     d84:	47a0      	blx	r4
            UDP_Write16(0x0001); // Class: IN (Internet)
     d86:	2001      	movs	r0, #1
     d88:	47a0      	blx	r4
            UDP_Send();
     d8a:	4b37      	ldr	r3, [pc, #220]	; (e68 <_ManageEthernetDnsState+0x170>)
     d8c:	4798      	blx	r3
            Timer_SetTimer(TIMER_ETH_DNS_TIMEOUT, TIMEOUT_DNS_RESOLUTION);
     d8e:	8868      	ldrh	r0, [r5, #2]
     d90:	2103      	movs	r1, #3
     d92:	4b2f      	ldr	r3, [pc, #188]	; (e50 <_ManageEthernetDnsState+0x158>)
     d94:	4798      	blx	r3
            s_eEthernetDnsState = DNS_STATE_GET_RESULT;
     d96:	2204      	movs	r2, #4
     d98:	232c      	movs	r3, #44	; 0x2c
     d9a:	54ea      	strb	r2, [r5, r3]
}
     d9c:	bd70      	pop	{r4, r5, r6, pc}
                if (UDP_Start(su32DnsServer, DNS_APP_PORT, DNS_PORT) != SUCCESS) {
     d9e:	4b27      	ldr	r3, [pc, #156]	; (e3c <_ManageEthernetDnsState+0x144>)
     da0:	6b18      	ldr	r0, [r3, #48]	; 0x30
     da2:	2235      	movs	r2, #53	; 0x35
     da4:	2180      	movs	r1, #128	; 0x80
     da6:	0149      	lsls	r1, r1, #5
     da8:	4b30      	ldr	r3, [pc, #192]	; (e6c <_ManageEthernetDnsState+0x174>)
     daa:	4798      	blx	r3
     dac:	2801      	cmp	r0, #1
     dae:	d1f5      	bne.n	d9c <_ManageEthernetDnsState+0xa4>
                    s_eEthernetDnsState = DNS_STATE_QUERY;
     db0:	2103      	movs	r1, #3
     db2:	232c      	movs	r3, #44	; 0x2c
     db4:	4a21      	ldr	r2, [pc, #132]	; (e3c <_ManageEthernetDnsState+0x144>)
     db6:	54d1      	strb	r1, [r2, r3]
     db8:	e7cc      	b.n	d54 <_ManageEthernetDnsState+0x5c>
            if (*s_pu32LookupHostIp==0) {
     dba:	4b20      	ldr	r3, [pc, #128]	; (e3c <_ManageEthernetDnsState+0x144>)
     dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     dbe:	681b      	ldr	r3, [r3, #0]
     dc0:	2b00      	cmp	r3, #0
     dc2:	d10d      	bne.n	de0 <_ManageEthernetDnsState+0xe8>
                if (Timer_GetTimer(TIMER_ETH_DNS_TIMEOUT)==0) {
     dc4:	4b1d      	ldr	r3, [pc, #116]	; (e3c <_ManageEthernetDnsState+0x144>)
     dc6:	8858      	ldrh	r0, [r3, #2]
     dc8:	4b23      	ldr	r3, [pc, #140]	; (e58 <_ManageEthernetDnsState+0x160>)
     dca:	4798      	blx	r3
     dcc:	2800      	cmp	r0, #0
     dce:	d1e5      	bne.n	d9c <_ManageEthernetDnsState+0xa4>
					DEBUG_INFO("DNS STATE (GET-FAIL)");
     dd0:	4827      	ldr	r0, [pc, #156]	; (e70 <_ManageEthernetDnsState+0x178>)
     dd2:	4b1d      	ldr	r3, [pc, #116]	; (e48 <_ManageEthernetDnsState+0x150>)
     dd4:	4798      	blx	r3
                    s_eEthernetDnsState = DNS_STATE_FAIL;
     dd6:	2105      	movs	r1, #5
     dd8:	232c      	movs	r3, #44	; 0x2c
     dda:	4a18      	ldr	r2, [pc, #96]	; (e3c <_ManageEthernetDnsState+0x144>)
     ddc:	54d1      	strb	r1, [r2, r3]
     dde:	e7dd      	b.n	d9c <_ManageEthernetDnsState+0xa4>
				DEBUG_INFO("DNS STATE (GET-DONE)");
     de0:	4824      	ldr	r0, [pc, #144]	; (e74 <_ManageEthernetDnsState+0x17c>)
     de2:	4b19      	ldr	r3, [pc, #100]	; (e48 <_ManageEthernetDnsState+0x150>)
     de4:	4798      	blx	r3
                s_eEthernetDnsState = DNS_STATE_DONE;
     de6:	2106      	movs	r1, #6
     de8:	232c      	movs	r3, #44	; 0x2c
     dea:	4a14      	ldr	r2, [pc, #80]	; (e3c <_ManageEthernetDnsState+0x144>)
     dec:	54d1      	strb	r1, [r2, r3]
     dee:	e7d5      	b.n	d9c <_ManageEthernetDnsState+0xa4>
			DEBUG_INFO("DNS STATE (FAIL)");
     df0:	4821      	ldr	r0, [pc, #132]	; (e78 <_ManageEthernetDnsState+0x180>)
     df2:	4b15      	ldr	r3, [pc, #84]	; (e48 <_ManageEthernetDnsState+0x150>)
     df4:	4798      	blx	r3
            su8Attempts++;
     df6:	4911      	ldr	r1, [pc, #68]	; (e3c <_ManageEthernetDnsState+0x144>)
     df8:	222d      	movs	r2, #45	; 0x2d
     dfa:	5c8b      	ldrb	r3, [r1, r2]
     dfc:	3301      	adds	r3, #1
     dfe:	b2db      	uxtb	r3, r3
     e00:	548b      	strb	r3, [r1, r2]
            if (su8Attempts<2) {
     e02:	2b01      	cmp	r3, #1
     e04:	d906      	bls.n	e14 <_ManageEthernetDnsState+0x11c>
                s_eEthernetDnsState = DNS_STATE_IDLE;
     e06:	4b0d      	ldr	r3, [pc, #52]	; (e3c <_ManageEthernetDnsState+0x144>)
     e08:	2100      	movs	r1, #0
     e0a:	222c      	movs	r2, #44	; 0x2c
     e0c:	5499      	strb	r1, [r3, r2]
                s_pfDnsResponseCb();
     e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     e10:	4798      	blx	r3
     e12:	e7c3      	b.n	d9c <_ManageEthernetDnsState+0xa4>
                s_eEthernetDnsState = DNS_STATE_OPEN_SOCKET;
     e14:	000b      	movs	r3, r1
     e16:	2102      	movs	r1, #2
     e18:	3a01      	subs	r2, #1
     e1a:	5499      	strb	r1, [r3, r2]
                Timer_SetTimer(TIMER_ETH_DNS_TIMEOUT, TIMEOUT_DNS_RESOLUTION);
     e1c:	8858      	ldrh	r0, [r3, #2]
     e1e:	3101      	adds	r1, #1
     e20:	4b0b      	ldr	r3, [pc, #44]	; (e50 <_ManageEthernetDnsState+0x158>)
     e22:	4798      	blx	r3
     e24:	e7ba      	b.n	d9c <_ManageEthernetDnsState+0xa4>
			DEBUG_INFO("DNS STATE (DONE)");
     e26:	4815      	ldr	r0, [pc, #84]	; (e7c <_ManageEthernetDnsState+0x184>)
     e28:	4b07      	ldr	r3, [pc, #28]	; (e48 <_ManageEthernetDnsState+0x150>)
     e2a:	4798      	blx	r3
            s_eEthernetDnsState = DNS_STATE_IDLE;
     e2c:	4b03      	ldr	r3, [pc, #12]	; (e3c <_ManageEthernetDnsState+0x144>)
     e2e:	2100      	movs	r1, #0
     e30:	222c      	movs	r2, #44	; 0x2c
     e32:	5499      	strb	r1, [r3, r2]
            s_pfDnsResponseCb();
     e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     e36:	4798      	blx	r3
     e38:	e7b0      	b.n	d9c <_ManageEthernetDnsState+0xa4>
     e3a:	46c0      	nop			; (mov r8, r8)
     e3c:	2000060c 	.word	0x2000060c
     e40:	000073a0 	.word	0x000073a0
     e44:	000073dc 	.word	0x000073dc
     e48:	000008d1 	.word	0x000008d1
     e4c:	20004b50 	.word	0x20004b50
     e50:	00001bcd 	.word	0x00001bcd
     e54:	000073f0 	.word	0x000073f0
     e58:	00001bd9 	.word	0x00001bd9
     e5c:	00007404 	.word	0x00007404
     e60:	0000409d 	.word	0x0000409d
     e64:	00000c81 	.word	0x00000c81
     e68:	00006209 	.word	0x00006209
     e6c:	000061cd 	.word	0x000061cd
     e70:	00007418 	.word	0x00007418
     e74:	00007430 	.word	0x00007430
     e78:	00007448 	.word	0x00007448
     e7c:	0000745c 	.word	0x0000745c

00000e80 <_InitEthernetSockets>:

void _InitEthernetSockets(void) {
    s_fEthernetSocketsInitialized = true;
     e80:	2101      	movs	r1, #1
     e82:	2340      	movs	r3, #64	; 0x40
     e84:	4a01      	ldr	r2, [pc, #4]	; (e8c <_InitEthernetSockets+0xc>)
     e86:	54d1      	strb	r1, [r2, r3]
}
     e88:	4770      	bx	lr
     e8a:	46c0      	nop			; (mov r8, r8)
     e8c:	2000060c 	.word	0x2000060c

00000e90 <_DnsLookup>:

void _DnsLookup(char* pcHostname, uint32_t* pu32HostIp, dns_function_ptr pfResponseHandler) {
     e90:	b510      	push	{r4, lr}
	// Bail out if the DNS is already in use
	if (s_eEthernetDnsState!=DNS_STATE_IDLE) return;
     e92:	232c      	movs	r3, #44	; 0x2c
     e94:	4c05      	ldr	r4, [pc, #20]	; (eac <_DnsLookup+0x1c>)
     e96:	5ce3      	ldrb	r3, [r4, r3]
     e98:	2b00      	cmp	r3, #0
     e9a:	d105      	bne.n	ea8 <_DnsLookup+0x18>

	// Store the result pointers
	s_pcLookupHostname = pcHostname;
     e9c:	62a0      	str	r0, [r4, #40]	; 0x28
	s_pu32LookupHostIp = pu32HostIp;
     e9e:	6361      	str	r1, [r4, #52]	; 0x34
	s_pfDnsResponseCb = pfResponseHandler;
     ea0:	63e2      	str	r2, [r4, #60]	; 0x3c

	// Initiate the DNS
	s_eEthernetDnsState = DNS_STATE_START;
     ea2:	2101      	movs	r1, #1
     ea4:	222c      	movs	r2, #44	; 0x2c
     ea6:	54a1      	strb	r1, [r4, r2]
}
     ea8:	bd10      	pop	{r4, pc}
     eaa:	46c0      	nop			; (mov r8, r8)
     eac:	2000060c 	.word	0x2000060c

00000eb0 <_DnsRemoteHostCb>:
void _DnsRemoteHostCb(void) {
     eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     eb2:	b083      	sub	sp, #12
    memcpy(&au8Tmp[0], (uint8_t*)&s_u32EthernetRemoteHostIp, 4);
     eb4:	ae01      	add	r6, sp, #4
     eb6:	4f1c      	ldr	r7, [pc, #112]	; (f28 <_DnsRemoteHostCb+0x78>)
     eb8:	6c79      	ldr	r1, [r7, #68]	; 0x44
     eba:	9101      	str	r1, [sp, #4]
	DEBUG_INFO("%u-", au8Tmp[3]);
     ebc:	0e09      	lsrs	r1, r1, #24
     ebe:	4d1b      	ldr	r5, [pc, #108]	; (f2c <_DnsRemoteHostCb+0x7c>)
     ec0:	0028      	movs	r0, r5
     ec2:	4c1b      	ldr	r4, [pc, #108]	; (f30 <_DnsRemoteHostCb+0x80>)
     ec4:	47a0      	blx	r4
	DEBUG_INFO("%u-", au8Tmp[2]);
     ec6:	78b1      	ldrb	r1, [r6, #2]
     ec8:	0028      	movs	r0, r5
     eca:	47a0      	blx	r4
	DEBUG_INFO("%u-", au8Tmp[1]);
     ecc:	7871      	ldrb	r1, [r6, #1]
     ece:	0028      	movs	r0, r5
     ed0:	47a0      	blx	r4
	DEBUG_INFO("%u-", au8Tmp[0]);
     ed2:	7831      	ldrb	r1, [r6, #0]
     ed4:	0028      	movs	r0, r5
     ed6:	47a0      	blx	r4
	DEBUG_INFO("DNS Remove Host CB");
     ed8:	4816      	ldr	r0, [pc, #88]	; (f34 <_DnsRemoteHostCb+0x84>)
     eda:	47a0      	blx	r4
	if (s_u32EthernetRemoteHostIp!=0) {
     edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     ede:	2b00      	cmp	r3, #0
     ee0:	d10c      	bne.n	efc <_DnsRemoteHostCb+0x4c>
		DEBUG_INFO("Failed resolving %s. ", s_pcLookupHostname);
     ee2:	4c11      	ldr	r4, [pc, #68]	; (f28 <_DnsRemoteHostCb+0x78>)
     ee4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     ee6:	4814      	ldr	r0, [pc, #80]	; (f38 <_DnsRemoteHostCb+0x88>)
     ee8:	4b11      	ldr	r3, [pc, #68]	; (f30 <_DnsRemoteHostCb+0x80>)
     eea:	4798      	blx	r3
		if (s_u8EthernetRemoteDnsAttempts<3) {
     eec:	2348      	movs	r3, #72	; 0x48
     eee:	5ce3      	ldrb	r3, [r4, r3]
     ef0:	2b02      	cmp	r3, #2
     ef2:	d90c      	bls.n	f0e <_DnsRemoteHostCb+0x5e>
			DEBUG_INFO("Unable to resolve. ");
     ef4:	4811      	ldr	r0, [pc, #68]	; (f3c <_DnsRemoteHostCb+0x8c>)
     ef6:	4b0e      	ldr	r3, [pc, #56]	; (f30 <_DnsRemoteHostCb+0x80>)
     ef8:	4798      	blx	r3
}
     efa:	e006      	b.n	f0a <_DnsRemoteHostCb+0x5a>
		DEBUG_INFO("%s resolved to IP Address 0x%X. ", s_pcLookupHostname, *s_pu32LookupHostIp);
     efc:	4b0a      	ldr	r3, [pc, #40]	; (f28 <_DnsRemoteHostCb+0x78>)
     efe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
     f00:	6812      	ldr	r2, [r2, #0]
     f02:	6a99      	ldr	r1, [r3, #40]	; 0x28
     f04:	480e      	ldr	r0, [pc, #56]	; (f40 <_DnsRemoteHostCb+0x90>)
     f06:	4b0a      	ldr	r3, [pc, #40]	; (f30 <_DnsRemoteHostCb+0x80>)
     f08:	4798      	blx	r3
}
     f0a:	b003      	add	sp, #12
     f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					_DnsLookup(hostname, &s_u32EthernetRemoteHostIp, &_DnsRemoteHostCb);
     f0e:	4c06      	ldr	r4, [pc, #24]	; (f28 <_DnsRemoteHostCb+0x78>)
     f10:	0021      	movs	r1, r4
     f12:	3144      	adds	r1, #68	; 0x44
     f14:	4a0b      	ldr	r2, [pc, #44]	; (f44 <_DnsRemoteHostCb+0x94>)
     f16:	480c      	ldr	r0, [pc, #48]	; (f48 <_DnsRemoteHostCb+0x98>)
     f18:	4b0c      	ldr	r3, [pc, #48]	; (f4c <_DnsRemoteHostCb+0x9c>)
     f1a:	4798      	blx	r3
			s_fEthernetServerCommEstablished = false;
     f1c:	2200      	movs	r2, #0
     f1e:	2349      	movs	r3, #73	; 0x49
     f20:	54e2      	strb	r2, [r4, r3]
			s_stEthernetInfo.eState = ETHERNET_STATE_ERROR;
     f22:	3b46      	subs	r3, #70	; 0x46
     f24:	7463      	strb	r3, [r4, #17]
     f26:	e7f0      	b.n	f0a <_DnsRemoteHostCb+0x5a>
     f28:	2000060c 	.word	0x2000060c
     f2c:	00007470 	.word	0x00007470
     f30:	000008d1 	.word	0x000008d1
     f34:	00007474 	.word	0x00007474
     f38:	000074ac 	.word	0x000074ac
     f3c:	000074d8 	.word	0x000074d8
     f40:	00007488 	.word	0x00007488
     f44:	00000eb1 	.word	0x00000eb1
     f48:	000074c4 	.word	0x000074c4
     f4c:	00000e91 	.word	0x00000e91

00000f50 <Ethernet_IsConnected>:

bool Ethernet_IsConnected(void) {
	if (s_stEthernetInfo.fConnected==true && s_stEthernetInfo.eState==ETHERNET_STATE_IDLE) return true;
     f50:	4b04      	ldr	r3, [pc, #16]	; (f64 <Ethernet_IsConnected+0x14>)
     f52:	8a1a      	ldrh	r2, [r3, #16]
     f54:	4b04      	ldr	r3, [pc, #16]	; (f68 <Ethernet_IsConnected+0x18>)
     f56:	429a      	cmp	r2, r3
     f58:	d001      	beq.n	f5e <Ethernet_IsConnected+0xe>
	else return false;
     f5a:	2000      	movs	r0, #0
}
     f5c:	4770      	bx	lr
	if (s_stEthernetInfo.fConnected==true && s_stEthernetInfo.eState==ETHERNET_STATE_IDLE) return true;
     f5e:	2001      	movs	r0, #1
     f60:	e7fc      	b.n	f5c <Ethernet_IsConnected+0xc>
     f62:	46c0      	nop			; (mov r8, r8)
     f64:	2000060c 	.word	0x2000060c
     f68:	00000201 	.word	0x00000201

00000f6c <_ManageEthernetRemoteSocketState>:
void _ManageEthernetRemoteSocketState(void) {
     f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f6e:	46d6      	mov	lr, sl
     f70:	464f      	mov	r7, r9
     f72:	b580      	push	{r7, lr}
     f74:	b083      	sub	sp, #12
    if (s_fEthernetSocketsInitialized==false) return;
     f76:	2340      	movs	r3, #64	; 0x40
     f78:	4ac7      	ldr	r2, [pc, #796]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
     f7a:	5cd3      	ldrb	r3, [r2, r3]
     f7c:	2b00      	cmp	r3, #0
     f7e:	d104      	bne.n	f8a <_ManageEthernetRemoteSocketState+0x1e>
}
     f80:	b003      	add	sp, #12
     f82:	bc0c      	pop	{r2, r3}
     f84:	4691      	mov	r9, r2
     f86:	469a      	mov	sl, r3
     f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eSocketState = TCP_SocketPoll(&s_stEthernetSocketRemote);
     f8a:	0010      	movs	r0, r2
     f8c:	304c      	adds	r0, #76	; 0x4c
     f8e:	4bc3      	ldr	r3, [pc, #780]	; (129c <_ManageEthernetRemoteSocketState+0x330>)
     f90:	4798      	blx	r3
    switch (eSocketState) {
     f92:	2804      	cmp	r0, #4
     f94:	d900      	bls.n	f98 <_ManageEthernetRemoteSocketState+0x2c>
     f96:	e1f7      	b.n	1388 <_ManageEthernetRemoteSocketState+0x41c>
     f98:	0080      	lsls	r0, r0, #2
     f9a:	4bc1      	ldr	r3, [pc, #772]	; (12a0 <_ManageEthernetRemoteSocketState+0x334>)
     f9c:	581b      	ldr	r3, [r3, r0]
     f9e:	469f      	mov	pc, r3
            if (TCP_SocketInit(&s_stEthernetSocketRemote) != SUCCESS) return;
     fa0:	48bd      	ldr	r0, [pc, #756]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
     fa2:	304c      	adds	r0, #76	; 0x4c
     fa4:	4bbf      	ldr	r3, [pc, #764]	; (12a4 <_ManageEthernetRemoteSocketState+0x338>)
     fa6:	4798      	blx	r3
     fa8:	2801      	cmp	r0, #1
     faa:	d1e9      	bne.n	f80 <_ManageEthernetRemoteSocketState+0x14>
     fac:	e1f4      	b.n	1398 <_ManageEthernetRemoteSocketState+0x42c>
            if (s_fPendingClose==true) {
     fae:	4bbe      	ldr	r3, [pc, #760]	; (12a8 <_ManageEthernetRemoteSocketState+0x33c>)
     fb0:	7f1b      	ldrb	r3, [r3, #28]
     fb2:	2b00      	cmp	r3, #0
     fb4:	d12c      	bne.n	1010 <_ManageEthernetRemoteSocketState+0xa4>
			if (s_fEthernetQueueServerSend==true && s_u32EthernetRemoteHostIp!=0) {
     fb6:	4bbc      	ldr	r3, [pc, #752]	; (12a8 <_ManageEthernetRemoteSocketState+0x33c>)
     fb8:	7f9b      	ldrb	r3, [r3, #30]
     fba:	2b00      	cmp	r3, #0
     fbc:	d100      	bne.n	fc0 <_ManageEthernetRemoteSocketState+0x54>
     fbe:	e1eb      	b.n	1398 <_ManageEthernetRemoteSocketState+0x42c>
     fc0:	4bb5      	ldr	r3, [pc, #724]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
     fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     fc4:	2b00      	cmp	r3, #0
     fc6:	d100      	bne.n	fca <_ManageEthernetRemoteSocketState+0x5e>
     fc8:	e1e6      	b.n	1398 <_ManageEthernetRemoteSocketState+0x42c>
                if (s_u16EthernetPostLengthOffset==0) {
     fca:	4bb7      	ldr	r3, [pc, #732]	; (12a8 <_ManageEthernetRemoteSocketState+0x33c>)
     fcc:	8c1b      	ldrh	r3, [r3, #32]
     fce:	2b00      	cmp	r3, #0
     fd0:	d027      	beq.n	1022 <_ManageEthernetRemoteSocketState+0xb6>
                DEBUG_INFO("Open remote socket. ");
     fd2:	48b6      	ldr	r0, [pc, #728]	; (12ac <_ManageEthernetRemoteSocketState+0x340>)
     fd4:	4bb6      	ldr	r3, [pc, #728]	; (12b0 <_ManageEthernetRemoteSocketState+0x344>)
     fd6:	4798      	blx	r3
                s_stEthernetSocketAddressRemote.addr.s_addr = s_u32EthernetRemoteHostIp;
     fd8:	4bb6      	ldr	r3, [pc, #728]	; (12b4 <_ManageEthernetRemoteSocketState+0x348>)
     fda:	48af      	ldr	r0, [pc, #700]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
     fdc:	6c42      	ldr	r2, [r0, #68]	; 0x44
     fde:	62da      	str	r2, [r3, #44]	; 0x2c
                s_stEthernetSocketAddressRemote.port = ETHERNET_SOCKET_PORT_HTTP;
     fe0:	2250      	movs	r2, #80	; 0x50
     fe2:	851a      	strh	r2, [r3, #40]	; 0x28
                if (TCP_InsertRxBuffer(&s_stEthernetSocketRemote, (uint8_t*)g_acRxBuffer, RX_BUFFER_NUM_BYTES) != true) {
     fe4:	304c      	adds	r0, #76	; 0x4c
     fe6:	2280      	movs	r2, #128	; 0x80
     fe8:	0112      	lsls	r2, r2, #4
     fea:	49b3      	ldr	r1, [pc, #716]	; (12b8 <_ManageEthernetRemoteSocketState+0x34c>)
     fec:	4bb3      	ldr	r3, [pc, #716]	; (12bc <_ManageEthernetRemoteSocketState+0x350>)
     fee:	4798      	blx	r3
     ff0:	2800      	cmp	r0, #0
     ff2:	d125      	bne.n	1040 <_ManageEthernetRemoteSocketState+0xd4>
                    if (s_u8TxAttemptCount>5) {} //App_SetLastError(ERROR_ETH_RX_BUFFER_FAILURE);
     ff4:	2330      	movs	r3, #48	; 0x30
     ff6:	4aaf      	ldr	r2, [pc, #700]	; (12b4 <_ManageEthernetRemoteSocketState+0x348>)
     ff8:	5cd3      	ldrb	r3, [r2, r3]
     ffa:	2b05      	cmp	r3, #5
     ffc:	d803      	bhi.n	1006 <_ManageEthernetRemoteSocketState+0x9a>
                    else s_u8TxAttemptCount++;
     ffe:	3301      	adds	r3, #1
    1000:	2230      	movs	r2, #48	; 0x30
    1002:	49ac      	ldr	r1, [pc, #688]	; (12b4 <_ManageEthernetRemoteSocketState+0x348>)
    1004:	548b      	strb	r3, [r1, r2]
                    TCP_SocketRemove(&s_stEthernetSocketRemote);
    1006:	48a4      	ldr	r0, [pc, #656]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
    1008:	304c      	adds	r0, #76	; 0x4c
    100a:	4bad      	ldr	r3, [pc, #692]	; (12c0 <_ManageEthernetRemoteSocketState+0x354>)
    100c:	4798      	blx	r3
                    return;
    100e:	e7b7      	b.n	f80 <_ManageEthernetRemoteSocketState+0x14>
                TCP_SocketRemove(&s_stEthernetSocketRemote);
    1010:	48a1      	ldr	r0, [pc, #644]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
    1012:	304c      	adds	r0, #76	; 0x4c
    1014:	4baa      	ldr	r3, [pc, #680]	; (12c0 <_ManageEthernetRemoteSocketState+0x354>)
    1016:	4798      	blx	r3
                s_fPendingRepsonse = false;
    1018:	4ba3      	ldr	r3, [pc, #652]	; (12a8 <_ManageEthernetRemoteSocketState+0x33c>)
    101a:	2200      	movs	r2, #0
    101c:	775a      	strb	r2, [r3, #29]
                s_fPendingClose = false;
    101e:	771a      	strb	r2, [r3, #28]
                return;
    1020:	e7ae      	b.n	f80 <_ManageEthernetRemoteSocketState+0x14>
                    DEBUG_INFO("Build common header. ");
    1022:	48a8      	ldr	r0, [pc, #672]	; (12c4 <_ManageEthernetRemoteSocketState+0x358>)
    1024:	4ba2      	ldr	r3, [pc, #648]	; (12b0 <_ManageEthernetRemoteSocketState+0x344>)
    1026:	4798      	blx	r3
                    s_u16EthernetPostPayloadOffset = Http_BuildPostHeaderCommon(&s_acEthernetStrPostHeader[0], pcHostname, false);
    1028:	4c9f      	ldr	r4, [pc, #636]	; (12a8 <_ManageEthernetRemoteSocketState+0x33c>)
    102a:	0020      	movs	r0, r4
    102c:	3024      	adds	r0, #36	; 0x24
    102e:	2200      	movs	r2, #0
    1030:	49a5      	ldr	r1, [pc, #660]	; (12c8 <_ManageEthernetRemoteSocketState+0x35c>)
    1032:	4ba6      	ldr	r3, [pc, #664]	; (12cc <_ManageEthernetRemoteSocketState+0x360>)
    1034:	4798      	blx	r3
    1036:	4b9f      	ldr	r3, [pc, #636]	; (12b4 <_ManageEthernetRemoteSocketState+0x348>)
    1038:	8498      	strh	r0, [r3, #36]	; 0x24
                    s_u16EthernetPostLengthOffset = s_u16EthernetPostPayloadOffset - 8; // shift back double CRLF and 4 digits...
    103a:	3808      	subs	r0, #8
    103c:	8420      	strh	r0, [r4, #32]
    103e:	e7c8      	b.n	fd2 <_ManageEthernetRemoteSocketState+0x66>
                if (TCP_Connect(&s_stEthernetSocketRemote, &s_stEthernetSocketAddressRemote) == false) {
    1040:	499c      	ldr	r1, [pc, #624]	; (12b4 <_ManageEthernetRemoteSocketState+0x348>)
    1042:	3128      	adds	r1, #40	; 0x28
    1044:	4894      	ldr	r0, [pc, #592]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
    1046:	304c      	adds	r0, #76	; 0x4c
    1048:	4ba1      	ldr	r3, [pc, #644]	; (12d0 <_ManageEthernetRemoteSocketState+0x364>)
    104a:	4798      	blx	r3
    104c:	2800      	cmp	r0, #0
    104e:	d10d      	bne.n	106c <_ManageEthernetRemoteSocketState+0x100>
                    if (s_u8TxAttemptCount>5) {} //App_SetLastError(ERROR_ETH_REMOTE_SOCKET_OPEN);
    1050:	2330      	movs	r3, #48	; 0x30
    1052:	4a98      	ldr	r2, [pc, #608]	; (12b4 <_ManageEthernetRemoteSocketState+0x348>)
    1054:	5cd3      	ldrb	r3, [r2, r3]
    1056:	2b05      	cmp	r3, #5
    1058:	d803      	bhi.n	1062 <_ManageEthernetRemoteSocketState+0xf6>
                    else s_u8TxAttemptCount++;
    105a:	3301      	adds	r3, #1
    105c:	2230      	movs	r2, #48	; 0x30
    105e:	4995      	ldr	r1, [pc, #596]	; (12b4 <_ManageEthernetRemoteSocketState+0x348>)
    1060:	548b      	strb	r3, [r1, r2]
                    TCP_SocketRemove(&s_stEthernetSocketRemote);
    1062:	488d      	ldr	r0, [pc, #564]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
    1064:	304c      	adds	r0, #76	; 0x4c
    1066:	4b96      	ldr	r3, [pc, #600]	; (12c0 <_ManageEthernetRemoteSocketState+0x354>)
    1068:	4798      	blx	r3
                    return;
    106a:	e789      	b.n	f80 <_ManageEthernetRemoteSocketState+0x14>
                Timer_SetTimer(TIMER_ETH_SOCKET_REMOTE_INIT_TIMEOUT, TIMEOUT_SOCKET_REMOTE_INIT);
    106c:	4b8a      	ldr	r3, [pc, #552]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
    106e:	8958      	ldrh	r0, [r3, #10]
    1070:	210a      	movs	r1, #10
    1072:	4b98      	ldr	r3, [pc, #608]	; (12d4 <_ManageEthernetRemoteSocketState+0x368>)
    1074:	4798      	blx	r3
    1076:	e18f      	b.n	1398 <_ManageEthernetRemoteSocketState+0x42c>
        if (Timer_GetTimer(TIMER_ETH_SOCKET_REMOTE_INIT_TIMEOUT) == 0) {
    1078:	4b87      	ldr	r3, [pc, #540]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
    107a:	8958      	ldrh	r0, [r3, #10]
    107c:	4b96      	ldr	r3, [pc, #600]	; (12d8 <_ManageEthernetRemoteSocketState+0x36c>)
    107e:	4798      	blx	r3
    1080:	2800      	cmp	r0, #0
    1082:	d000      	beq.n	1086 <_ManageEthernetRemoteSocketState+0x11a>
    1084:	e188      	b.n	1398 <_ManageEthernetRemoteSocketState+0x42c>
            TCP_Close(&s_stEthernetSocketRemote);
    1086:	4884      	ldr	r0, [pc, #528]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
    1088:	304c      	adds	r0, #76	; 0x4c
    108a:	4b94      	ldr	r3, [pc, #592]	; (12dc <_ManageEthernetRemoteSocketState+0x370>)
    108c:	4798      	blx	r3
    108e:	e183      	b.n	1398 <_ManageEthernetRemoteSocketState+0x42c>
            if (s_fEthernetQueueServerSend==true && s_fPendingRepsonse==false) {
    1090:	4b85      	ldr	r3, [pc, #532]	; (12a8 <_ManageEthernetRemoteSocketState+0x33c>)
    1092:	7f9b      	ldrb	r3, [r3, #30]
    1094:	2b00      	cmp	r3, #0
    1096:	d003      	beq.n	10a0 <_ManageEthernetRemoteSocketState+0x134>
    1098:	4b83      	ldr	r3, [pc, #524]	; (12a8 <_ManageEthernetRemoteSocketState+0x33c>)
    109a:	7f5b      	ldrb	r3, [r3, #29]
    109c:	2b00      	cmp	r3, #0
    109e:	d02e      	beq.n	10fe <_ManageEthernetRemoteSocketState+0x192>
            if (s_u16EthernetRemainingRemoteBytes!=0) {
    10a0:	4b84      	ldr	r3, [pc, #528]	; (12b4 <_ManageEthernetRemoteSocketState+0x348>)
    10a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    10a4:	2b00      	cmp	r3, #0
    10a6:	d100      	bne.n	10aa <_ManageEthernetRemoteSocketState+0x13e>
    10a8:	e0c5      	b.n	1236 <_ManageEthernetRemoteSocketState+0x2ca>
                s_stEthernetSocketRemote.localWnd = LOCAL_RX_BUFFER_NUM_BYTES; // set the window to the RX buffer size (to avoid TCP ZeroWindow warnings in Wireshark)
    10aa:	487b      	ldr	r0, [pc, #492]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
    10ac:	304c      	adds	r0, #76	; 0x4c
    10ae:	2380      	movs	r3, #128	; 0x80
    10b0:	00db      	lsls	r3, r3, #3
    10b2:	83c3      	strh	r3, [r0, #30]
                if (TCP_SendDone(&s_stEthernetSocketRemote)) {
    10b4:	4b8a      	ldr	r3, [pc, #552]	; (12e0 <_ManageEthernetRemoteSocketState+0x374>)
    10b6:	4798      	blx	r3
    10b8:	2800      	cmp	r0, #0
    10ba:	d100      	bne.n	10be <_ManageEthernetRemoteSocketState+0x152>
    10bc:	e0ac      	b.n	1218 <_ManageEthernetRemoteSocketState+0x2ac>
                    if (s_u16EthernetRemainingRemoteBytes>MAX_TCP_CHUNK_SIZE) {
    10be:	4b7d      	ldr	r3, [pc, #500]	; (12b4 <_ManageEthernetRemoteSocketState+0x348>)
    10c0:	8e59      	ldrh	r1, [r3, #50]	; 0x32
    10c2:	4b88      	ldr	r3, [pc, #544]	; (12e4 <_ManageEthernetRemoteSocketState+0x378>)
    10c4:	4299      	cmp	r1, r3
    10c6:	d800      	bhi.n	10ca <_ManageEthernetRemoteSocketState+0x15e>
    10c8:	e08a      	b.n	11e0 <_ManageEthernetRemoteSocketState+0x274>
                        DEBUG_INFO("Sending %d bytes of data to server. ", MAX_TCP_CHUNK_SIZE);
    10ca:	001c      	movs	r4, r3
    10cc:	0019      	movs	r1, r3
    10ce:	4886      	ldr	r0, [pc, #536]	; (12e8 <_ManageEthernetRemoteSocketState+0x37c>)
    10d0:	4b77      	ldr	r3, [pc, #476]	; (12b0 <_ManageEthernetRemoteSocketState+0x344>)
    10d2:	4798      	blx	r3
                        if (TCP_Send(&s_stEthernetSocketRemote, (uint8_t*)s_pvEthernetRemainingRemoteBuffer, MAX_TCP_CHUNK_SIZE) != true) {
    10d4:	4b77      	ldr	r3, [pc, #476]	; (12b4 <_ManageEthernetRemoteSocketState+0x348>)
    10d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
    10d8:	0022      	movs	r2, r4
    10da:	486f      	ldr	r0, [pc, #444]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
    10dc:	304c      	adds	r0, #76	; 0x4c
    10de:	4b83      	ldr	r3, [pc, #524]	; (12ec <_ManageEthernetRemoteSocketState+0x380>)
    10e0:	4798      	blx	r3
    10e2:	2800      	cmp	r0, #0
    10e4:	d074      	beq.n	11d0 <_ManageEthernetRemoteSocketState+0x264>
                        s_pvEthernetRemainingRemoteBuffer = (void*)(s_pvEthernetRemainingRemoteBuffer + MAX_TCP_CHUNK_SIZE);
    10e6:	4b73      	ldr	r3, [pc, #460]	; (12b4 <_ManageEthernetRemoteSocketState+0x348>)
    10e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    10ea:	497e      	ldr	r1, [pc, #504]	; (12e4 <_ManageEthernetRemoteSocketState+0x378>)
    10ec:	468c      	mov	ip, r1
    10ee:	4462      	add	r2, ip
    10f0:	635a      	str	r2, [r3, #52]	; 0x34
                        s_u16EthernetRemainingRemoteBytes = s_u16EthernetRemainingRemoteBytes - MAX_TCP_CHUNK_SIZE;
    10f2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    10f4:	497e      	ldr	r1, [pc, #504]	; (12f0 <_ManageEthernetRemoteSocketState+0x384>)
    10f6:	468c      	mov	ip, r1
    10f8:	4462      	add	r2, ip
    10fa:	865a      	strh	r2, [r3, #50]	; 0x32
    10fc:	e14c      	b.n	1398 <_ManageEthernetRemoteSocketState+0x42c>
                memcpy(pTxDst, s_acEthernetStrPostHeader, s_u16EthernetPostPayloadOffset);
    10fe:	4b6d      	ldr	r3, [pc, #436]	; (12b4 <_ManageEthernetRemoteSocketState+0x348>)
    1100:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
    1102:	4d7c      	ldr	r5, [pc, #496]	; (12f4 <_ManageEthernetRemoteSocketState+0x388>)
    1104:	0022      	movs	r2, r4
    1106:	4968      	ldr	r1, [pc, #416]	; (12a8 <_ManageEthernetRemoteSocketState+0x33c>)
    1108:	3124      	adds	r1, #36	; 0x24
    110a:	0028      	movs	r0, r5
    110c:	4b7a      	ldr	r3, [pc, #488]	; (12f8 <_ManageEthernetRemoteSocketState+0x38c>)
    110e:	4798      	blx	r3
                pTxDst += s_u16EthernetPostPayloadOffset;
    1110:	1964      	adds	r4, r4, r5
                u16FifoBytes = CmdFifo_Send(pTxDst, COMMAND_FIFO_NUM_BYTES);
    1112:	2180      	movs	r1, #128	; 0x80
    1114:	0149      	lsls	r1, r1, #5
    1116:	0020      	movs	r0, r4
    1118:	4b78      	ldr	r3, [pc, #480]	; (12fc <_ManageEthernetRemoteSocketState+0x390>)
    111a:	4798      	blx	r3
    111c:	b283      	uxth	r3, r0
    111e:	4699      	mov	r9, r3
    1120:	0400      	lsls	r0, r0, #16
    1122:	0c07      	lsrs	r7, r0, #16
				DEBUG_INFO("%u", u16FifoBytes);
    1124:	0039      	movs	r1, r7
    1126:	4876      	ldr	r0, [pc, #472]	; (1300 <_ManageEthernetRemoteSocketState+0x394>)
    1128:	4b61      	ldr	r3, [pc, #388]	; (12b0 <_ManageEthernetRemoteSocketState+0x344>)
    112a:	4798      	blx	r3
                pTxDst += u16FifoBytes;
    112c:	19e4      	adds	r4, r4, r7
                if (u16PayloadBytes>999)     {digits = 4;}
    112e:	4b75      	ldr	r3, [pc, #468]	; (1304 <_ManageEthernetRemoteSocketState+0x398>)
    1130:	4599      	cmp	r9, r3
    1132:	d806      	bhi.n	1142 <_ManageEthernetRemoteSocketState+0x1d6>
                else if (u16PayloadBytes>99) {digits = 3;}
    1134:	464b      	mov	r3, r9
    1136:	2b63      	cmp	r3, #99	; 0x63
    1138:	d832      	bhi.n	11a0 <_ManageEthernetRemoteSocketState+0x234>
                else if (u16PayloadBytes>9)  {digits = 2;}
    113a:	2b09      	cmp	r3, #9
    113c:	d932      	bls.n	11a4 <_ManageEthernetRemoteSocketState+0x238>
    113e:	2602      	movs	r6, #2
    1140:	e000      	b.n	1144 <_ManageEthernetRemoteSocketState+0x1d8>
                if (u16PayloadBytes>999)     {digits = 4;}
    1142:	2604      	movs	r6, #4
                sprintf(acLength, "%d", u16PayloadBytes);
    1144:	003a      	movs	r2, r7
    1146:	4970      	ldr	r1, [pc, #448]	; (1308 <_ManageEthernetRemoteSocketState+0x39c>)
    1148:	4668      	mov	r0, sp
    114a:	4b70      	ldr	r3, [pc, #448]	; (130c <_ManageEthernetRemoteSocketState+0x3a0>)
    114c:	4798      	blx	r3
                char* pDst = &g_acTxBuffer[s_u16EthernetPostLengthOffset];
    114e:	4b56      	ldr	r3, [pc, #344]	; (12a8 <_ManageEthernetRemoteSocketState+0x33c>)
    1150:	8c1d      	ldrh	r5, [r3, #32]
    1152:	4868      	ldr	r0, [pc, #416]	; (12f4 <_ManageEthernetRemoteSocketState+0x388>)
    1154:	182d      	adds	r5, r5, r0
                memcpy(pDst, acLength, digits);
    1156:	0032      	movs	r2, r6
    1158:	4669      	mov	r1, sp
    115a:	0028      	movs	r0, r5
    115c:	4b66      	ldr	r3, [pc, #408]	; (12f8 <_ManageEthernetRemoteSocketState+0x38c>)
    115e:	469a      	mov	sl, r3
    1160:	4798      	blx	r3
                pDst += digits;
    1162:	19ad      	adds	r5, r5, r6
                memcpy(pDst, "\r\n\r\n", 4);
    1164:	2204      	movs	r2, #4
    1166:	496a      	ldr	r1, [pc, #424]	; (1310 <_ManageEthernetRemoteSocketState+0x3a4>)
    1168:	0028      	movs	r0, r5
    116a:	47d0      	blx	sl
                pDst += 4;
    116c:	1d28      	adds	r0, r5, #4
                if (digits < 4) {
    116e:	2e03      	cmp	r6, #3
    1170:	d91a      	bls.n	11a8 <_ManageEthernetRemoteSocketState+0x23c>
                u16BytesToSend = pTxDst - &g_acTxBuffer[0];
    1172:	4b60      	ldr	r3, [pc, #384]	; (12f4 <_ManageEthernetRemoteSocketState+0x388>)
    1174:	1ae4      	subs	r4, r4, r3
    1176:	b2a4      	uxth	r4, r4
                if (u16PayloadBytes>0) {
    1178:	464b      	mov	r3, r9
    117a:	2b00      	cmp	r3, #0
    117c:	d01e      	beq.n	11bc <_ManageEthernetRemoteSocketState+0x250>
                    s_u16EthernetRemainingRemoteBytes = u16BytesToSend;
    117e:	4b4d      	ldr	r3, [pc, #308]	; (12b4 <_ManageEthernetRemoteSocketState+0x348>)
    1180:	865c      	strh	r4, [r3, #50]	; 0x32
                    s_pvEthernetRemainingRemoteBuffer = (void*)&g_acTxBuffer[0];
    1182:	4a5c      	ldr	r2, [pc, #368]	; (12f4 <_ManageEthernetRemoteSocketState+0x388>)
    1184:	635a      	str	r2, [r3, #52]	; 0x34
                    Timer_SetTimer(TIMER_ETH_SOCKET_REMOTE_RESPONSE_TIMEOUT, TIMEOUT_SOCKET_REMOTE_RESPONSE);
    1186:	4b44      	ldr	r3, [pc, #272]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
    1188:	8998      	ldrh	r0, [r3, #12]
    118a:	210a      	movs	r1, #10
    118c:	4b51      	ldr	r3, [pc, #324]	; (12d4 <_ManageEthernetRemoteSocketState+0x368>)
    118e:	4798      	blx	r3
                s_fEthernetQueueServerSend = false;
    1190:	2300      	movs	r3, #0
    1192:	4a45      	ldr	r2, [pc, #276]	; (12a8 <_ManageEthernetRemoteSocketState+0x33c>)
    1194:	7793      	strb	r3, [r2, #30]
                s_u8TxAttemptCount = 0;
    1196:	4a47      	ldr	r2, [pc, #284]	; (12b4 <_ManageEthernetRemoteSocketState+0x348>)
    1198:	2130      	movs	r1, #48	; 0x30
    119a:	5453      	strb	r3, [r2, r1]
                s_u16ResponseSize = 0;
    119c:	8713      	strh	r3, [r2, #56]	; 0x38
    119e:	e77f      	b.n	10a0 <_ManageEthernetRemoteSocketState+0x134>
                else if (u16PayloadBytes>99) {digits = 3;}
    11a0:	2603      	movs	r6, #3
    11a2:	e7cf      	b.n	1144 <_ManageEthernetRemoteSocketState+0x1d8>
                else                         {digits = 1;}
    11a4:	2601      	movs	r6, #1
    11a6:	e7cd      	b.n	1144 <_ManageEthernetRemoteSocketState+0x1d8>
                    memcpy(pDst, (char*)&g_acTxBuffer[s_u16EthernetPostPayloadOffset], u16PayloadBytes);
    11a8:	4b42      	ldr	r3, [pc, #264]	; (12b4 <_ManageEthernetRemoteSocketState+0x348>)
    11aa:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    11ac:	4b51      	ldr	r3, [pc, #324]	; (12f4 <_ManageEthernetRemoteSocketState+0x388>)
    11ae:	18c9      	adds	r1, r1, r3
    11b0:	003a      	movs	r2, r7
    11b2:	4b51      	ldr	r3, [pc, #324]	; (12f8 <_ManageEthernetRemoteSocketState+0x38c>)
    11b4:	4798      	blx	r3
                    pTxDst += digits;
    11b6:	3e04      	subs	r6, #4
    11b8:	19a4      	adds	r4, r4, r6
    11ba:	e7da      	b.n	1172 <_ManageEthernetRemoteSocketState+0x206>
                    DEBUG_INFO("Empty payload. ");
    11bc:	4855      	ldr	r0, [pc, #340]	; (1314 <_ManageEthernetRemoteSocketState+0x3a8>)
    11be:	4c3c      	ldr	r4, [pc, #240]	; (12b0 <_ManageEthernetRemoteSocketState+0x344>)
    11c0:	47a0      	blx	r4
                    TCP_Close(&s_stEthernetSocketRemote);
    11c2:	4835      	ldr	r0, [pc, #212]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
    11c4:	304c      	adds	r0, #76	; 0x4c
    11c6:	4b45      	ldr	r3, [pc, #276]	; (12dc <_ManageEthernetRemoteSocketState+0x370>)
    11c8:	4798      	blx	r3
					 DEBUG_INFO("Socket closed");
    11ca:	4853      	ldr	r0, [pc, #332]	; (1318 <_ManageEthernetRemoteSocketState+0x3ac>)
    11cc:	47a0      	blx	r4
    11ce:	e7df      	b.n	1190 <_ManageEthernetRemoteSocketState+0x224>
                            DEBUG_INFO("Failed sending segment. ");
    11d0:	4852      	ldr	r0, [pc, #328]	; (131c <_ManageEthernetRemoteSocketState+0x3b0>)
    11d2:	4b37      	ldr	r3, [pc, #220]	; (12b0 <_ManageEthernetRemoteSocketState+0x344>)
    11d4:	4798      	blx	r3
                            TCP_Close(&s_stEthernetSocketRemote);
    11d6:	4830      	ldr	r0, [pc, #192]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
    11d8:	304c      	adds	r0, #76	; 0x4c
    11da:	4b40      	ldr	r3, [pc, #256]	; (12dc <_ManageEthernetRemoteSocketState+0x370>)
    11dc:	4798      	blx	r3
                            return;
    11de:	e6cf      	b.n	f80 <_ManageEthernetRemoteSocketState+0x14>
                        DEBUG_INFO("Sending %d bytes of data to server. ", s_u16EthernetRemainingRemoteBytes);
    11e0:	4841      	ldr	r0, [pc, #260]	; (12e8 <_ManageEthernetRemoteSocketState+0x37c>)
    11e2:	4b33      	ldr	r3, [pc, #204]	; (12b0 <_ManageEthernetRemoteSocketState+0x344>)
    11e4:	4798      	blx	r3
                        if (TCP_Send(&s_stEthernetSocketRemote, (uint8_t*)s_pvEthernetRemainingRemoteBuffer, s_u16EthernetRemainingRemoteBytes) != true) {
    11e6:	4b33      	ldr	r3, [pc, #204]	; (12b4 <_ManageEthernetRemoteSocketState+0x348>)
    11e8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    11ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
    11ec:	482a      	ldr	r0, [pc, #168]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
    11ee:	304c      	adds	r0, #76	; 0x4c
    11f0:	4b3e      	ldr	r3, [pc, #248]	; (12ec <_ManageEthernetRemoteSocketState+0x380>)
    11f2:	4798      	blx	r3
    11f4:	2800      	cmp	r0, #0
    11f6:	d007      	beq.n	1208 <_ManageEthernetRemoteSocketState+0x29c>
                        s_pvEthernetRemainingRemoteBuffer = NULL;
    11f8:	4b2e      	ldr	r3, [pc, #184]	; (12b4 <_ManageEthernetRemoteSocketState+0x348>)
    11fa:	2200      	movs	r2, #0
    11fc:	635a      	str	r2, [r3, #52]	; 0x34
                        s_u16EthernetRemainingRemoteBytes = 0;
    11fe:	865a      	strh	r2, [r3, #50]	; 0x32
                        s_fPendingRepsonse = true;
    1200:	3201      	adds	r2, #1
    1202:	4b29      	ldr	r3, [pc, #164]	; (12a8 <_ManageEthernetRemoteSocketState+0x33c>)
    1204:	775a      	strb	r2, [r3, #29]
    1206:	e0c7      	b.n	1398 <_ManageEthernetRemoteSocketState+0x42c>
                            DEBUG_INFO("Failed sending. ");
    1208:	4845      	ldr	r0, [pc, #276]	; (1320 <_ManageEthernetRemoteSocketState+0x3b4>)
    120a:	4b29      	ldr	r3, [pc, #164]	; (12b0 <_ManageEthernetRemoteSocketState+0x344>)
    120c:	4798      	blx	r3
                            TCP_Close(&s_stEthernetSocketRemote);
    120e:	4822      	ldr	r0, [pc, #136]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
    1210:	304c      	adds	r0, #76	; 0x4c
    1212:	4b32      	ldr	r3, [pc, #200]	; (12dc <_ManageEthernetRemoteSocketState+0x370>)
    1214:	4798      	blx	r3
                            return;
    1216:	e6b3      	b.n	f80 <_ManageEthernetRemoteSocketState+0x14>
                } else if (Timer_GetTimer(TIMER_ETH_SOCKET_REMOTE_RESPONSE_TIMEOUT)==0) {
    1218:	4b1f      	ldr	r3, [pc, #124]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
    121a:	8998      	ldrh	r0, [r3, #12]
    121c:	4b2e      	ldr	r3, [pc, #184]	; (12d8 <_ManageEthernetRemoteSocketState+0x36c>)
    121e:	4798      	blx	r3
    1220:	2800      	cmp	r0, #0
    1222:	d000      	beq.n	1226 <_ManageEthernetRemoteSocketState+0x2ba>
    1224:	e0b8      	b.n	1398 <_ManageEthernetRemoteSocketState+0x42c>
                    DEBUG_INFO("Failed sending. ");
    1226:	483e      	ldr	r0, [pc, #248]	; (1320 <_ManageEthernetRemoteSocketState+0x3b4>)
    1228:	4b21      	ldr	r3, [pc, #132]	; (12b0 <_ManageEthernetRemoteSocketState+0x344>)
    122a:	4798      	blx	r3
                    TCP_Close(&s_stEthernetSocketRemote);
    122c:	481a      	ldr	r0, [pc, #104]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
    122e:	304c      	adds	r0, #76	; 0x4c
    1230:	4b2a      	ldr	r3, [pc, #168]	; (12dc <_ManageEthernetRemoteSocketState+0x370>)
    1232:	4798      	blx	r3
                    return;
    1234:	e6a4      	b.n	f80 <_ManageEthernetRemoteSocketState+0x14>
                if (Timer_GetTimer(TIMER_ETH_SOCKET_REMOTE_RESPONSE_TIMEOUT)==0) {
    1236:	4b18      	ldr	r3, [pc, #96]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
    1238:	8998      	ldrh	r0, [r3, #12]
    123a:	4b27      	ldr	r3, [pc, #156]	; (12d8 <_ManageEthernetRemoteSocketState+0x36c>)
    123c:	4798      	blx	r3
    123e:	2800      	cmp	r0, #0
    1240:	d024      	beq.n	128c <_ManageEthernetRemoteSocketState+0x320>
                if (TCP_SendDone(&s_stEthernetSocketRemote)) {
    1242:	4815      	ldr	r0, [pc, #84]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
    1244:	304c      	adds	r0, #76	; 0x4c
    1246:	4b26      	ldr	r3, [pc, #152]	; (12e0 <_ManageEthernetRemoteSocketState+0x374>)
    1248:	4798      	blx	r3
    124a:	2800      	cmp	r0, #0
    124c:	d100      	bne.n	1250 <_ManageEthernetRemoteSocketState+0x2e4>
    124e:	e0a3      	b.n	1398 <_ManageEthernetRemoteSocketState+0x42c>
                    u16RxSize = TCP_GetRxLength(&s_stEthernetSocketRemote);
    1250:	4811      	ldr	r0, [pc, #68]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
    1252:	304c      	adds	r0, #76	; 0x4c
    1254:	4b33      	ldr	r3, [pc, #204]	; (1324 <_ManageEthernetRemoteSocketState+0x3b8>)
    1256:	4798      	blx	r3
                    if (u16RxSize > 0) {
    1258:	2800      	cmp	r0, #0
    125a:	d100      	bne.n	125e <_ManageEthernetRemoteSocketState+0x2f2>
    125c:	e09c      	b.n	1398 <_ManageEthernetRemoteSocketState+0x42c>
                        u16RxSize = TCP_GetReceivedData(&s_stEthernetSocketRemote);
    125e:	480e      	ldr	r0, [pc, #56]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
    1260:	304c      	adds	r0, #76	; 0x4c
    1262:	4b31      	ldr	r3, [pc, #196]	; (1328 <_ManageEthernetRemoteSocketState+0x3bc>)
    1264:	4798      	blx	r3
    1266:	b284      	uxth	r4, r0
                        DEBUG_INFO("Received %d bytes of data from server. ", u16RxSize);
    1268:	0021      	movs	r1, r4
    126a:	4830      	ldr	r0, [pc, #192]	; (132c <_ManageEthernetRemoteSocketState+0x3c0>)
    126c:	4b10      	ldr	r3, [pc, #64]	; (12b0 <_ManageEthernetRemoteSocketState+0x344>)
    126e:	4798      	blx	r3
                        s_u16ResponseSize += u16RxSize;
    1270:	4b10      	ldr	r3, [pc, #64]	; (12b4 <_ManageEthernetRemoteSocketState+0x348>)
    1272:	8f19      	ldrh	r1, [r3, #56]	; 0x38
    1274:	1861      	adds	r1, r4, r1
    1276:	b289      	uxth	r1, r1
    1278:	8719      	strh	r1, [r3, #56]	; 0x38
                        if (TcpParser_ParseServerResponse((char*)g_acRxBuffer, s_u16ResponseSize)==true) {
    127a:	480f      	ldr	r0, [pc, #60]	; (12b8 <_ManageEthernetRemoteSocketState+0x34c>)
    127c:	4b2c      	ldr	r3, [pc, #176]	; (1330 <_ManageEthernetRemoteSocketState+0x3c4>)
    127e:	4798      	blx	r3
    1280:	2801      	cmp	r0, #1
    1282:	d059      	beq.n	1338 <_ManageEthernetRemoteSocketState+0x3cc>
							DEBUG_INFO("ERROR - invalid response! ");
    1284:	482b      	ldr	r0, [pc, #172]	; (1334 <_ManageEthernetRemoteSocketState+0x3c8>)
    1286:	4b0a      	ldr	r3, [pc, #40]	; (12b0 <_ManageEthernetRemoteSocketState+0x344>)
    1288:	4798      	blx	r3
    128a:	e085      	b.n	1398 <_ManageEthernetRemoteSocketState+0x42c>
                    TCP_Close(&s_stEthernetSocketRemote);
    128c:	4802      	ldr	r0, [pc, #8]	; (1298 <_ManageEthernetRemoteSocketState+0x32c>)
    128e:	304c      	adds	r0, #76	; 0x4c
    1290:	4b12      	ldr	r3, [pc, #72]	; (12dc <_ManageEthernetRemoteSocketState+0x370>)
    1292:	4798      	blx	r3
                    return;
    1294:	e674      	b.n	f80 <_ManageEthernetRemoteSocketState+0x14>
    1296:	46c0      	nop			; (mov r8, r8)
    1298:	2000060c 	.word	0x2000060c
    129c:	00005f3d 	.word	0x00005f3d
    12a0:	000073bc 	.word	0x000073bc
    12a4:	00005ee5 	.word	0x00005ee5
    12a8:	2000068c 	.word	0x2000068c
    12ac:	00007504 	.word	0x00007504
    12b0:	000008d1 	.word	0x000008d1
    12b4:	2000070c 	.word	0x2000070c
    12b8:	2000422c 	.word	0x2000422c
    12bc:	0000608d 	.word	0x0000608d
    12c0:	00005f59 	.word	0x00005f59
    12c4:	000074ec 	.word	0x000074ec
    12c8:	000074c4 	.word	0x000074c4
    12cc:	0000199d 	.word	0x0000199d
    12d0:	00005f7d 	.word	0x00005f7d
    12d4:	00001bcd 	.word	0x00001bcd
    12d8:	00001bd9 	.word	0x00001bd9
    12dc:	00005fd5 	.word	0x00005fd5
    12e0:	0000606d 	.word	0x0000606d
    12e4:	00000574 	.word	0x00000574
    12e8:	0000754c 	.word	0x0000754c
    12ec:	00006015 	.word	0x00006015
    12f0:	fffffa8c 	.word	0xfffffa8c
    12f4:	20002a2c 	.word	0x20002a2c
    12f8:	000065f3 	.word	0x000065f3
    12fc:	00000849 	.word	0x00000849
    1300:	0000751c 	.word	0x0000751c
    1304:	000003e7 	.word	0x000003e7
    1308:	00007520 	.word	0x00007520
    130c:	00006789 	.word	0x00006789
    1310:	00007524 	.word	0x00007524
    1314:	0000752c 	.word	0x0000752c
    1318:	0000753c 	.word	0x0000753c
    131c:	00007574 	.word	0x00007574
    1320:	00007590 	.word	0x00007590
    1324:	000060fd 	.word	0x000060fd
    1328:	000060c5 	.word	0x000060c5
    132c:	000075a4 	.word	0x000075a4
    1330:	00001b31 	.word	0x00001b31
    1334:	000075cc 	.word	0x000075cc
                            s_fEthernetServerCommEstablished = true;
    1338:	4c2e      	ldr	r4, [pc, #184]	; (13f4 <_ManageEthernetRemoteSocketState+0x488>)
    133a:	2201      	movs	r2, #1
    133c:	2349      	movs	r3, #73	; 0x49
    133e:	54e2      	strb	r2, [r4, r3]
                            Timer_SetTimer(TIMER_ETH_SERVER_LOST_COMM, 120);
    1340:	88a0      	ldrh	r0, [r4, #4]
    1342:	2178      	movs	r1, #120	; 0x78
    1344:	4b2c      	ldr	r3, [pc, #176]	; (13f8 <_ManageEthernetRemoteSocketState+0x48c>)
    1346:	4798      	blx	r3
                            TCP_Close(&s_stEthernetSocketRemote);
    1348:	0020      	movs	r0, r4
    134a:	304c      	adds	r0, #76	; 0x4c
    134c:	4b2b      	ldr	r3, [pc, #172]	; (13fc <_ManageEthernetRemoteSocketState+0x490>)
    134e:	4798      	blx	r3
    1350:	e022      	b.n	1398 <_ManageEthernetRemoteSocketState+0x42c>
            if (s_fPendingClose==false) {
    1352:	4b2b      	ldr	r3, [pc, #172]	; (1400 <_ManageEthernetRemoteSocketState+0x494>)
    1354:	7f1b      	ldrb	r3, [r3, #28]
    1356:	2b00      	cmp	r3, #0
    1358:	d108      	bne.n	136c <_ManageEthernetRemoteSocketState+0x400>
                s_fPendingClose = true;
    135a:	2201      	movs	r2, #1
    135c:	4b28      	ldr	r3, [pc, #160]	; (1400 <_ManageEthernetRemoteSocketState+0x494>)
    135e:	771a      	strb	r2, [r3, #28]
                Timer_SetTimer(TIMER_ETH_SOCKET_REMOTE_CLEANUP_TIMEOUT, 3);
    1360:	4b24      	ldr	r3, [pc, #144]	; (13f4 <_ManageEthernetRemoteSocketState+0x488>)
    1362:	89d8      	ldrh	r0, [r3, #14]
    1364:	2103      	movs	r1, #3
    1366:	4b24      	ldr	r3, [pc, #144]	; (13f8 <_ManageEthernetRemoteSocketState+0x48c>)
    1368:	4798      	blx	r3
    136a:	e015      	b.n	1398 <_ManageEthernetRemoteSocketState+0x42c>
            } else if (Timer_GetTimer(TIMER_ETH_SOCKET_REMOTE_CLEANUP_TIMEOUT) == 0) {
    136c:	4b21      	ldr	r3, [pc, #132]	; (13f4 <_ManageEthernetRemoteSocketState+0x488>)
    136e:	89d8      	ldrh	r0, [r3, #14]
    1370:	4b24      	ldr	r3, [pc, #144]	; (1404 <_ManageEthernetRemoteSocketState+0x498>)
    1372:	4798      	blx	r3
    1374:	2800      	cmp	r0, #0
    1376:	d10f      	bne.n	1398 <_ManageEthernetRemoteSocketState+0x42c>
                DEBUG_INFO("ERROR - Failed remote socket cleanup! ");
    1378:	4823      	ldr	r0, [pc, #140]	; (1408 <_ManageEthernetRemoteSocketState+0x49c>)
    137a:	4b24      	ldr	r3, [pc, #144]	; (140c <_ManageEthernetRemoteSocketState+0x4a0>)
    137c:	4798      	blx	r3
                s_fPendingRepsonse = false;
    137e:	4b20      	ldr	r3, [pc, #128]	; (1400 <_ManageEthernetRemoteSocketState+0x494>)
    1380:	2200      	movs	r2, #0
    1382:	775a      	strb	r2, [r3, #29]
                s_fPendingClose = false;
    1384:	771a      	strb	r2, [r3, #28]
    1386:	e007      	b.n	1398 <_ManageEthernetRemoteSocketState+0x42c>
            DEBUG_INFO("Invalid remote socket state! ");
    1388:	4821      	ldr	r0, [pc, #132]	; (1410 <_ManageEthernetRemoteSocketState+0x4a4>)
    138a:	4b20      	ldr	r3, [pc, #128]	; (140c <_ManageEthernetRemoteSocketState+0x4a0>)
    138c:	4798      	blx	r3
            s_fEthernetQueueServerSend = false;
    138e:	4b1c      	ldr	r3, [pc, #112]	; (1400 <_ManageEthernetRemoteSocketState+0x494>)
    1390:	2200      	movs	r2, #0
    1392:	779a      	strb	r2, [r3, #30]
            s_fPendingRepsonse = false;
    1394:	775a      	strb	r2, [r3, #29]
            s_fPendingClose = false;
    1396:	771a      	strb	r2, [r3, #28]
    if (Timer_GetTimer(TIMER_ETH_DNS_REMOTE_RESOLUTION_TIMEOUT)==0) {
    1398:	4b16      	ldr	r3, [pc, #88]	; (13f4 <_ManageEthernetRemoteSocketState+0x488>)
    139a:	8918      	ldrh	r0, [r3, #8]
    139c:	4b19      	ldr	r3, [pc, #100]	; (1404 <_ManageEthernetRemoteSocketState+0x498>)
    139e:	4798      	blx	r3
    13a0:	2800      	cmp	r0, #0
    13a2:	d000      	beq.n	13a6 <_ManageEthernetRemoteSocketState+0x43a>
    13a4:	e5ec      	b.n	f80 <_ManageEthernetRemoteSocketState+0x14>
        s_u32EthernetRemoteHostIp = 0;
    13a6:	2300      	movs	r3, #0
    13a8:	4a12      	ldr	r2, [pc, #72]	; (13f4 <_ManageEthernetRemoteSocketState+0x488>)
    13aa:	6453      	str	r3, [r2, #68]	; 0x44
        s_u16EthernetPostPayloadOffset = 0;
    13ac:	4a19      	ldr	r2, [pc, #100]	; (1414 <_ManageEthernetRemoteSocketState+0x4a8>)
    13ae:	8493      	strh	r3, [r2, #36]	; 0x24
        s_u16EthernetPostLengthOffset = 0;
    13b0:	4a13      	ldr	r2, [pc, #76]	; (1400 <_ManageEthernetRemoteSocketState+0x494>)
    13b2:	8413      	strh	r3, [r2, #32]
        if (Ethernet_IsConnected()==true && s_eEthernetDnsState==DNS_STATE_IDLE) {
    13b4:	4b18      	ldr	r3, [pc, #96]	; (1418 <_ManageEthernetRemoteSocketState+0x4ac>)
    13b6:	4798      	blx	r3
    13b8:	2800      	cmp	r0, #0
    13ba:	d100      	bne.n	13be <_ManageEthernetRemoteSocketState+0x452>
    13bc:	e5e0      	b.n	f80 <_ManageEthernetRemoteSocketState+0x14>
    13be:	232c      	movs	r3, #44	; 0x2c
    13c0:	4a0c      	ldr	r2, [pc, #48]	; (13f4 <_ManageEthernetRemoteSocketState+0x488>)
    13c2:	5cd3      	ldrb	r3, [r2, r3]
    13c4:	2b00      	cmp	r3, #0
    13c6:	d000      	beq.n	13ca <_ManageEthernetRemoteSocketState+0x45e>
    13c8:	e5da      	b.n	f80 <_ManageEthernetRemoteSocketState+0x14>
            s_u8EthernetRemoteDnsAttempts = 0;
    13ca:	0014      	movs	r4, r2
    13cc:	2200      	movs	r2, #0
    13ce:	3348      	adds	r3, #72	; 0x48
    13d0:	54e2      	strb	r2, [r4, r3]
                    _DnsLookup(hostname, &s_u32EthernetRemoteHostIp, &_DnsRemoteHostCb);
    13d2:	0021      	movs	r1, r4
    13d4:	3144      	adds	r1, #68	; 0x44
    13d6:	4d11      	ldr	r5, [pc, #68]	; (141c <_ManageEthernetRemoteSocketState+0x4b0>)
    13d8:	4a11      	ldr	r2, [pc, #68]	; (1420 <_ManageEthernetRemoteSocketState+0x4b4>)
    13da:	0028      	movs	r0, r5
    13dc:	4b11      	ldr	r3, [pc, #68]	; (1424 <_ManageEthernetRemoteSocketState+0x4b8>)
    13de:	4798      	blx	r3
					DEBUG_INFO("HostName-%s", hostname);
    13e0:	0029      	movs	r1, r5
    13e2:	4811      	ldr	r0, [pc, #68]	; (1428 <_ManageEthernetRemoteSocketState+0x4bc>)
    13e4:	4b09      	ldr	r3, [pc, #36]	; (140c <_ManageEthernetRemoteSocketState+0x4a0>)
    13e6:	4798      	blx	r3
            Timer_SetTimer(TIMER_ETH_DNS_REMOTE_RESOLUTION_TIMEOUT, TIMEOUT_DNS_RERESOLVE);
    13e8:	8920      	ldrh	r0, [r4, #8]
    13ea:	21e1      	movs	r1, #225	; 0xe1
    13ec:	0109      	lsls	r1, r1, #4
    13ee:	4b02      	ldr	r3, [pc, #8]	; (13f8 <_ManageEthernetRemoteSocketState+0x48c>)
    13f0:	4798      	blx	r3
    13f2:	e5c5      	b.n	f80 <_ManageEthernetRemoteSocketState+0x14>
    13f4:	2000060c 	.word	0x2000060c
    13f8:	00001bcd 	.word	0x00001bcd
    13fc:	00005fd5 	.word	0x00005fd5
    1400:	2000068c 	.word	0x2000068c
    1404:	00001bd9 	.word	0x00001bd9
    1408:	000075e8 	.word	0x000075e8
    140c:	000008d1 	.word	0x000008d1
    1410:	00007610 	.word	0x00007610
    1414:	2000070c 	.word	0x2000070c
    1418:	00000f51 	.word	0x00000f51
    141c:	000074c4 	.word	0x000074c4
    1420:	00000eb1 	.word	0x00000eb1
    1424:	00000e91 	.word	0x00000e91
    1428:	00007630 	.word	0x00007630

0000142c <_DeinitEthernetSockets>:

void _DeinitEthernetSockets(void) {
    142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s_fEthernetSocketsInitialized = false;
    142e:	4d08      	ldr	r5, [pc, #32]	; (1450 <_DeinitEthernetSockets+0x24>)
    1430:	2400      	movs	r4, #0
    1432:	2340      	movs	r3, #64	; 0x40
    1434:	54ec      	strb	r4, [r5, r3]
    TCP_SocketRemove(&s_stEthernetSocketLocal);
    1436:	4e07      	ldr	r6, [pc, #28]	; (1454 <_DeinitEthernetSockets+0x28>)
    1438:	0030      	movs	r0, r6
    143a:	303c      	adds	r0, #60	; 0x3c
    143c:	4f06      	ldr	r7, [pc, #24]	; (1458 <_DeinitEthernetSockets+0x2c>)
    143e:	47b8      	blx	r7
    s_pvEthernetRemainingLocalBuffer = NULL;
    s_u16EthernetRemainingLocalBytes = 0;
    1440:	4b06      	ldr	r3, [pc, #24]	; (145c <_DeinitEthernetSockets+0x30>)
    1442:	819c      	strh	r4, [r3, #12]
    TCP_SocketRemove(&s_stEthernetSocketRemote);
    1444:	0028      	movs	r0, r5
    1446:	304c      	adds	r0, #76	; 0x4c
    1448:	47b8      	blx	r7
    s_pvEthernetRemainingRemoteBuffer = NULL;
    144a:	6374      	str	r4, [r6, #52]	; 0x34
    s_u16EthernetRemainingRemoteBytes = 0;
    144c:	8674      	strh	r4, [r6, #50]	; 0x32
}
    144e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1450:	2000060c 	.word	0x2000060c
    1454:	2000070c 	.word	0x2000070c
    1458:	00005f59 	.word	0x00005f59
    145c:	2000078c 	.word	0x2000078c

00001460 <_ManageEthernetState>:
void _ManageEthernetState(void){
    1460:	b5f0      	push	{r4, r5, r6, r7, lr}
    1462:	46de      	mov	lr, fp
    1464:	4657      	mov	r7, sl
    1466:	464e      	mov	r6, r9
    1468:	b5c0      	push	{r6, r7, lr}
    146a:	b082      	sub	sp, #8
	Network_Manage();
    146c:	4b77      	ldr	r3, [pc, #476]	; (164c <_ManageEthernetState+0x1ec>)
    146e:	4798      	blx	r3
    switch (s_stEthernetInfo.eState) {
    1470:	4b77      	ldr	r3, [pc, #476]	; (1650 <_ManageEthernetState+0x1f0>)
    1472:	7c5b      	ldrb	r3, [r3, #17]
    1474:	2b01      	cmp	r3, #1
    1476:	d01b      	beq.n	14b0 <_ManageEthernetState+0x50>
    1478:	2b00      	cmp	r3, #0
    147a:	d00b      	beq.n	1494 <_ManageEthernetState+0x34>
    147c:	2b02      	cmp	r3, #2
    147e:	d100      	bne.n	1482 <_ManageEthernetState+0x22>
    1480:	e09a      	b.n	15b8 <_ManageEthernetState+0x158>
    1482:	2b03      	cmp	r3, #3
    1484:	d100      	bne.n	1488 <_ManageEthernetState+0x28>
    1486:	e0d2      	b.n	162e <_ManageEthernetState+0x1ce>
}
    1488:	b002      	add	sp, #8
    148a:	bc1c      	pop	{r2, r3, r4}
    148c:	4691      	mov	r9, r2
    148e:	469a      	mov	sl, r3
    1490:	46a3      	mov	fp, r4
    1492:	bdf0      	pop	{r4, r5, r6, r7, pc}
            memset((uint8_t *)&s_stEthernetInfo, 0, sizeof(sEthernetInfo));
    1494:	4c6e      	ldr	r4, [pc, #440]	; (1650 <_ManageEthernetState+0x1f0>)
    1496:	0020      	movs	r0, r4
    1498:	3010      	adds	r0, #16
    149a:	2218      	movs	r2, #24
    149c:	2100      	movs	r1, #0
    149e:	4b6d      	ldr	r3, [pc, #436]	; (1654 <_ManageEthernetState+0x1f4>)
    14a0:	4798      	blx	r3
            s_stEthernetInfo.eState = ETHERNET_STATE_NETWORK_CONFIG;
    14a2:	2301      	movs	r3, #1
    14a4:	7463      	strb	r3, [r4, #17]
            Timer_SetTimer(TIMER_ETH_CONNECION_TIMEOUT, 3);
    14a6:	8820      	ldrh	r0, [r4, #0]
    14a8:	2103      	movs	r1, #3
    14aa:	4b6b      	ldr	r3, [pc, #428]	; (1658 <_ManageEthernetState+0x1f8>)
    14ac:	4798      	blx	r3
            break;
    14ae:	e7eb      	b.n	1488 <_ManageEthernetState+0x28>
            ip = IPV4_GetMyIP();	
    14b0:	4b6a      	ldr	r3, [pc, #424]	; (165c <_ManageEthernetState+0x1fc>)
    14b2:	4798      	blx	r3
            if (ip != s_stEthernetInfo.u32IpAddr) {
    14b4:	4b66      	ldr	r3, [pc, #408]	; (1650 <_ManageEthernetState+0x1f0>)
    14b6:	695b      	ldr	r3, [r3, #20]
    14b8:	4298      	cmp	r0, r3
    14ba:	d071      	beq.n	15a0 <_ManageEthernetState+0x140>
				DEBUG_INFO("ETHERNET STATE CONFIG (IP CHANGED)");
    14bc:	4868      	ldr	r0, [pc, #416]	; (1660 <_ManageEthernetState+0x200>)
    14be:	4f69      	ldr	r7, [pc, #420]	; (1664 <_ManageEthernetState+0x204>)
    14c0:	47b8      	blx	r7
                DEBUG_INFO("IP Assigned. ");
    14c2:	4869      	ldr	r0, [pc, #420]	; (1668 <_ManageEthernetState+0x208>)
    14c4:	47b8      	blx	r7
                s_stEthernetInfo.u32IpAddr = ipv4Address;
    14c6:	4c62      	ldr	r4, [pc, #392]	; (1650 <_ManageEthernetState+0x1f0>)
    14c8:	4b68      	ldr	r3, [pc, #416]	; (166c <_ManageEthernetState+0x20c>)
    14ca:	681b      	ldr	r3, [r3, #0]
    14cc:	6163      	str	r3, [r4, #20]
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4Address, 4);
    14ce:	0c18      	lsrs	r0, r3, #16
    14d0:	0a1a      	lsrs	r2, r3, #8
    14d2:	9301      	str	r3, [sp, #4]
                s_stEthernetInfo.au8IpAddr[0] = au8Tmp[3];
    14d4:	0e19      	lsrs	r1, r3, #24
    14d6:	7621      	strb	r1, [r4, #24]
                s_stEthernetInfo.au8IpAddr[1] = au8Tmp[2];
    14d8:	7660      	strb	r0, [r4, #25]
                s_stEthernetInfo.au8IpAddr[2] = au8Tmp[1];
    14da:	76a2      	strb	r2, [r4, #26]
                s_stEthernetInfo.au8IpAddr[3] = au8Tmp[0];
    14dc:	76e3      	strb	r3, [r4, #27]
				DEBUG_INFO("%u-", s_stEthernetInfo.au8IpAddr[0]);
    14de:	4d64      	ldr	r5, [pc, #400]	; (1670 <_ManageEthernetState+0x210>)
    14e0:	0028      	movs	r0, r5
    14e2:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8IpAddr[1]);
    14e4:	7e61      	ldrb	r1, [r4, #25]
    14e6:	0028      	movs	r0, r5
    14e8:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8IpAddr[2]);
    14ea:	7ea1      	ldrb	r1, [r4, #26]
    14ec:	0028      	movs	r0, r5
    14ee:	47b8      	blx	r7
				DEBUG_INFO("%u", s_stEthernetInfo.au8IpAddr[3]);
    14f0:	7ee1      	ldrb	r1, [r4, #27]
    14f2:	4860      	ldr	r0, [pc, #384]	; (1674 <_ManageEthernetState+0x214>)
    14f4:	47b8      	blx	r7
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4SubnetMask, 4);
    14f6:	4b60      	ldr	r3, [pc, #384]	; (1678 <_ManageEthernetState+0x218>)
    14f8:	681b      	ldr	r3, [r3, #0]
    14fa:	0c18      	lsrs	r0, r3, #16
    14fc:	0a1a      	lsrs	r2, r3, #8
    14fe:	9301      	str	r3, [sp, #4]
                s_stEthernetInfo.au8SubnetMask[0] = au8Tmp[3];
    1500:	0e19      	lsrs	r1, r3, #24
    1502:	7721      	strb	r1, [r4, #28]
                s_stEthernetInfo.au8SubnetMask[1] = au8Tmp[2];
    1504:	7760      	strb	r0, [r4, #29]
                s_stEthernetInfo.au8SubnetMask[2] = au8Tmp[1];
    1506:	77a2      	strb	r2, [r4, #30]
                s_stEthernetInfo.au8SubnetMask[3] = au8Tmp[0];
    1508:	77e3      	strb	r3, [r4, #31]
				DEBUG_INFO(",%u-", s_stEthernetInfo.au8SubnetMask[0]);
    150a:	485c      	ldr	r0, [pc, #368]	; (167c <_ManageEthernetState+0x21c>)
    150c:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8SubnetMask[1]);
    150e:	7f61      	ldrb	r1, [r4, #29]
    1510:	0028      	movs	r0, r5
    1512:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8SubnetMask[2]);
    1514:	7fa1      	ldrb	r1, [r4, #30]
    1516:	0028      	movs	r0, r5
    1518:	47b8      	blx	r7
				DEBUG_INFO("%u", s_stEthernetInfo.au8SubnetMask[3]);
    151a:	7fe1      	ldrb	r1, [r4, #31]
    151c:	4855      	ldr	r0, [pc, #340]	; (1674 <_ManageEthernetState+0x214>)
    151e:	47b8      	blx	r7
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4Router, 4);
    1520:	4b57      	ldr	r3, [pc, #348]	; (1680 <_ManageEthernetState+0x220>)
    1522:	681b      	ldr	r3, [r3, #0]
    1524:	0c18      	lsrs	r0, r3, #16
    1526:	0a1a      	lsrs	r2, r3, #8
    1528:	9301      	str	r3, [sp, #4]
                s_stEthernetInfo.au8Gateway[0] = au8Tmp[3];
    152a:	0e19      	lsrs	r1, r3, #24
    152c:	2620      	movs	r6, #32
    152e:	55a1      	strb	r1, [r4, r6]
                s_stEthernetInfo.au8Gateway[1] = au8Tmp[2];
    1530:	3601      	adds	r6, #1
    1532:	55a0      	strb	r0, [r4, r6]
                s_stEthernetInfo.au8Gateway[2] = au8Tmp[1];
    1534:	2022      	movs	r0, #34	; 0x22
    1536:	4682      	mov	sl, r0
    1538:	5422      	strb	r2, [r4, r0]
                s_stEthernetInfo.au8Gateway[3] = au8Tmp[0];
    153a:	2223      	movs	r2, #35	; 0x23
    153c:	4691      	mov	r9, r2
    153e:	54a3      	strb	r3, [r4, r2]
				DEBUG_INFO(",%u-", s_stEthernetInfo.au8Gateway[0]);
    1540:	484e      	ldr	r0, [pc, #312]	; (167c <_ManageEthernetState+0x21c>)
    1542:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8Gateway[1]);
    1544:	5da1      	ldrb	r1, [r4, r6]
    1546:	0028      	movs	r0, r5
    1548:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8Gateway[2]);
    154a:	4653      	mov	r3, sl
    154c:	5ce1      	ldrb	r1, [r4, r3]
    154e:	0028      	movs	r0, r5
    1550:	47b8      	blx	r7
				DEBUG_INFO("%u", s_stEthernetInfo.au8Gateway[3]);
    1552:	464b      	mov	r3, r9
    1554:	5ce1      	ldrb	r1, [r4, r3]
    1556:	4847      	ldr	r0, [pc, #284]	; (1674 <_ManageEthernetState+0x214>)
    1558:	47b8      	blx	r7
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4DNS, 4);
    155a:	4b4a      	ldr	r3, [pc, #296]	; (1684 <_ManageEthernetState+0x224>)
    155c:	681b      	ldr	r3, [r3, #0]
    155e:	0c18      	lsrs	r0, r3, #16
    1560:	0a1a      	lsrs	r2, r3, #8
    1562:	9301      	str	r3, [sp, #4]
                s_stEthernetInfo.au8Dns[0] = au8Tmp[3];
    1564:	0e19      	lsrs	r1, r3, #24
    1566:	3603      	adds	r6, #3
    1568:	55a1      	strb	r1, [r4, r6]
                s_stEthernetInfo.au8Dns[1] = au8Tmp[2];
    156a:	3601      	adds	r6, #1
    156c:	55a0      	strb	r0, [r4, r6]
                s_stEthernetInfo.au8Dns[2] = au8Tmp[1];
    156e:	2026      	movs	r0, #38	; 0x26
    1570:	4682      	mov	sl, r0
    1572:	5422      	strb	r2, [r4, r0]
                s_stEthernetInfo.au8Dns[3] = au8Tmp[0];
    1574:	2227      	movs	r2, #39	; 0x27
    1576:	4691      	mov	r9, r2
    1578:	54a3      	strb	r3, [r4, r2]
				DEBUG_INFO(",%u-", s_stEthernetInfo.au8Dns[0]);
    157a:	4840      	ldr	r0, [pc, #256]	; (167c <_ManageEthernetState+0x21c>)
    157c:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8Dns[1]);
    157e:	5da1      	ldrb	r1, [r4, r6]
    1580:	0028      	movs	r0, r5
    1582:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8Dns[2]);
    1584:	4653      	mov	r3, sl
    1586:	5ce1      	ldrb	r1, [r4, r3]
    1588:	0028      	movs	r0, r5
    158a:	47b8      	blx	r7
				DEBUG_INFO("%u", s_stEthernetInfo.au8Dns[3]);
    158c:	464b      	mov	r3, r9
    158e:	5ce1      	ldrb	r1, [r4, r3]
    1590:	4838      	ldr	r0, [pc, #224]	; (1674 <_ManageEthernetState+0x214>)
    1592:	47b8      	blx	r7
                _InitEthernetSockets();
    1594:	4b3c      	ldr	r3, [pc, #240]	; (1688 <_ManageEthernetState+0x228>)
    1596:	4798      	blx	r3
                s_stEthernetInfo.fConnected = true;
    1598:	2301      	movs	r3, #1
    159a:	7423      	strb	r3, [r4, #16]
                s_stEthernetInfo.eState = ETHERNET_STATE_IDLE;
    159c:	3301      	adds	r3, #1
    159e:	7463      	strb	r3, [r4, #17]
            if (Timer_GetTimer(TIMER_ETH_CONNECION_TIMEOUT)==0) {
    15a0:	4b2b      	ldr	r3, [pc, #172]	; (1650 <_ManageEthernetState+0x1f0>)
    15a2:	8818      	ldrh	r0, [r3, #0]
    15a4:	4b39      	ldr	r3, [pc, #228]	; (168c <_ManageEthernetState+0x22c>)
    15a6:	4798      	blx	r3
    15a8:	2800      	cmp	r0, #0
    15aa:	d000      	beq.n	15ae <_ManageEthernetState+0x14e>
    15ac:	e76c      	b.n	1488 <_ManageEthernetState+0x28>
                s_stEthernetInfo.fConnected = false;
    15ae:	4b28      	ldr	r3, [pc, #160]	; (1650 <_ManageEthernetState+0x1f0>)
    15b0:	2200      	movs	r2, #0
    15b2:	741a      	strb	r2, [r3, #16]
                s_stEthernetInfo.eState = ETHERNET_STATE_INITIALIZE;
    15b4:	745a      	strb	r2, [r3, #17]
    15b6:	e767      	b.n	1488 <_ManageEthernetState+0x28>
            ip = IPV4_GetMyIP();
    15b8:	4b28      	ldr	r3, [pc, #160]	; (165c <_ManageEthernetState+0x1fc>)
    15ba:	4798      	blx	r3
            if (ip != s_stEthernetInfo.u32IpAddr) {
    15bc:	4b24      	ldr	r3, [pc, #144]	; (1650 <_ManageEthernetState+0x1f0>)
    15be:	695b      	ldr	r3, [r3, #20]
    15c0:	4298      	cmp	r0, r3
    15c2:	d100      	bne.n	15c6 <_ManageEthernetState+0x166>
    15c4:	e760      	b.n	1488 <_ManageEthernetState+0x28>
				DEBUG_INFO("ETHERNET STATE IDLE (IP CHANGED)");
    15c6:	4832      	ldr	r0, [pc, #200]	; (1690 <_ManageEthernetState+0x230>)
    15c8:	4c26      	ldr	r4, [pc, #152]	; (1664 <_ManageEthernetState+0x204>)
    15ca:	47a0      	blx	r4
                DEBUG_INFO("IP address changed. ");
    15cc:	4831      	ldr	r0, [pc, #196]	; (1694 <_ManageEthernetState+0x234>)
    15ce:	47a0      	blx	r4
                s_stEthernetInfo.u32IpAddr = ipv4Address;
    15d0:	4b1f      	ldr	r3, [pc, #124]	; (1650 <_ManageEthernetState+0x1f0>)
    15d2:	4a26      	ldr	r2, [pc, #152]	; (166c <_ManageEthernetState+0x20c>)
    15d4:	6812      	ldr	r2, [r2, #0]
    15d6:	615a      	str	r2, [r3, #20]
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4Address, 4);
    15d8:	0c10      	lsrs	r0, r2, #16
    15da:	0a11      	lsrs	r1, r2, #8
                s_stEthernetInfo.au8IpAddr[0] = au8Tmp[3];
    15dc:	0e14      	lsrs	r4, r2, #24
    15de:	761c      	strb	r4, [r3, #24]
                s_stEthernetInfo.au8IpAddr[1] = au8Tmp[2];
    15e0:	7658      	strb	r0, [r3, #25]
                s_stEthernetInfo.au8IpAddr[2] = au8Tmp[1];
    15e2:	7699      	strb	r1, [r3, #26]
                s_stEthernetInfo.au8IpAddr[3] = au8Tmp[0];
    15e4:	76da      	strb	r2, [r3, #27]
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4SubnetMask, 4);
    15e6:	4a24      	ldr	r2, [pc, #144]	; (1678 <_ManageEthernetState+0x218>)
    15e8:	6812      	ldr	r2, [r2, #0]
    15ea:	0c10      	lsrs	r0, r2, #16
    15ec:	0a11      	lsrs	r1, r2, #8
                s_stEthernetInfo.au8SubnetMask[0] = au8Tmp[3];
    15ee:	0e14      	lsrs	r4, r2, #24
    15f0:	771c      	strb	r4, [r3, #28]
                s_stEthernetInfo.au8SubnetMask[1] = au8Tmp[2];
    15f2:	7758      	strb	r0, [r3, #29]
                s_stEthernetInfo.au8SubnetMask[2] = au8Tmp[1];
    15f4:	7799      	strb	r1, [r3, #30]
                s_stEthernetInfo.au8SubnetMask[3] = au8Tmp[0];
    15f6:	77da      	strb	r2, [r3, #31]
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4Router, 4);
    15f8:	4a21      	ldr	r2, [pc, #132]	; (1680 <_ManageEthernetState+0x220>)
    15fa:	6812      	ldr	r2, [r2, #0]
    15fc:	0c14      	lsrs	r4, r2, #16
    15fe:	0a10      	lsrs	r0, r2, #8
                s_stEthernetInfo.au8Gateway[0] = au8Tmp[3];
    1600:	0e15      	lsrs	r5, r2, #24
    1602:	2120      	movs	r1, #32
    1604:	545d      	strb	r5, [r3, r1]
                s_stEthernetInfo.au8Gateway[1] = au8Tmp[2];
    1606:	3101      	adds	r1, #1
    1608:	545c      	strb	r4, [r3, r1]
                s_stEthernetInfo.au8Gateway[2] = au8Tmp[1];
    160a:	3101      	adds	r1, #1
    160c:	5458      	strb	r0, [r3, r1]
                s_stEthernetInfo.au8Gateway[3] = au8Tmp[0];
    160e:	3101      	adds	r1, #1
    1610:	545a      	strb	r2, [r3, r1]
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4DNS, 4);
    1612:	4a1c      	ldr	r2, [pc, #112]	; (1684 <_ManageEthernetState+0x224>)
    1614:	6812      	ldr	r2, [r2, #0]
    1616:	0c14      	lsrs	r4, r2, #16
    1618:	0a10      	lsrs	r0, r2, #8
                s_stEthernetInfo.au8Dns[0] = au8Tmp[3];
    161a:	0e15      	lsrs	r5, r2, #24
    161c:	3101      	adds	r1, #1
    161e:	545d      	strb	r5, [r3, r1]
                s_stEthernetInfo.au8Dns[1] = au8Tmp[2];
    1620:	3101      	adds	r1, #1
    1622:	545c      	strb	r4, [r3, r1]
                s_stEthernetInfo.au8Dns[2] = au8Tmp[1];
    1624:	3101      	adds	r1, #1
    1626:	5458      	strb	r0, [r3, r1]
                s_stEthernetInfo.au8Dns[3] = au8Tmp[0];
    1628:	3101      	adds	r1, #1
    162a:	545a      	strb	r2, [r3, r1]
    162c:	e72c      	b.n	1488 <_ManageEthernetState+0x28>
			DEBUG_INFO("ETHERNET STATE ERROR");
    162e:	481a      	ldr	r0, [pc, #104]	; (1698 <_ManageEthernetState+0x238>)
    1630:	4b0c      	ldr	r3, [pc, #48]	; (1664 <_ManageEthernetState+0x204>)
    1632:	4798      	blx	r3
            s_stEthernetInfo.u32IpAddr = 0;
    1634:	4c06      	ldr	r4, [pc, #24]	; (1650 <_ManageEthernetState+0x1f0>)
    1636:	2500      	movs	r5, #0
    1638:	6165      	str	r5, [r4, #20]
            memset(&s_stEthernetInfo.au8IpAddr[0], 0, 4);
    163a:	61a5      	str	r5, [r4, #24]
            memset(&s_stEthernetInfo.au8SubnetMask[0], 0, 4);
    163c:	61e5      	str	r5, [r4, #28]
            memset(&s_stEthernetInfo.au8Gateway[0], 0, 4);
    163e:	6225      	str	r5, [r4, #32]
            memset(&s_stEthernetInfo.au8Dns[0], 0, 4);
    1640:	6265      	str	r5, [r4, #36]	; 0x24
			_DeinitEthernetSockets();
    1642:	4b16      	ldr	r3, [pc, #88]	; (169c <_ManageEthernetState+0x23c>)
    1644:	4798      	blx	r3
            s_stEthernetInfo.fConnected = false;
    1646:	7425      	strb	r5, [r4, #16]
            s_stEthernetInfo.eState = ETHERNET_STATE_INITIALIZE;
    1648:	7465      	strb	r5, [r4, #17]
}
    164a:	e71d      	b.n	1488 <_ManageEthernetState+0x28>
    164c:	0000512d 	.word	0x0000512d
    1650:	2000060c 	.word	0x2000060c
    1654:	00006605 	.word	0x00006605
    1658:	00001bcd 	.word	0x00001bcd
    165c:	00005025 	.word	0x00005025
    1660:	0000763c 	.word	0x0000763c
    1664:	000008d1 	.word	0x000008d1
    1668:	00007660 	.word	0x00007660
    166c:	20004b4c 	.word	0x20004b4c
    1670:	00007470 	.word	0x00007470
    1674:	0000751c 	.word	0x0000751c
    1678:	20004b34 	.word	0x20004b34
    167c:	00007670 	.word	0x00007670
    1680:	20004b2c 	.word	0x20004b2c
    1684:	20004b50 	.word	0x20004b50
    1688:	00000e81 	.word	0x00000e81
    168c:	00001bd9 	.word	0x00001bd9
    1690:	00007678 	.word	0x00007678
    1694:	0000769c 	.word	0x0000769c
    1698:	000076b4 	.word	0x000076b4
    169c:	0000142d 	.word	0x0000142d

000016a0 <Ethernet_PumpEvents>:
void Ethernet_PumpEvents(void) {
    16a0:	b510      	push	{r4, lr}
    if (s_fLinkUp==false) {
    16a2:	4b2a      	ldr	r3, [pc, #168]	; (174c <Ethernet_PumpEvents+0xac>)
    16a4:	7b9b      	ldrb	r3, [r3, #14]
    16a6:	2b00      	cmp	r3, #0
    16a8:	d106      	bne.n	16b8 <Ethernet_PumpEvents+0x18>
        if (Ethernet_HasLink()==false) {
    16aa:	4b29      	ldr	r3, [pc, #164]	; (1750 <Ethernet_PumpEvents+0xb0>)
    16ac:	4798      	blx	r3
    16ae:	2800      	cmp	r0, #0
    16b0:	d014      	beq.n	16dc <Ethernet_PumpEvents+0x3c>
            s_fLinkUp = true;
    16b2:	2201      	movs	r2, #1
    16b4:	4b25      	ldr	r3, [pc, #148]	; (174c <Ethernet_PumpEvents+0xac>)
    16b6:	739a      	strb	r2, [r3, #14]
    _ManageEthernetState();
    16b8:	4b26      	ldr	r3, [pc, #152]	; (1754 <Ethernet_PumpEvents+0xb4>)
    16ba:	4798      	blx	r3
    if (s_u16EthernetRemainingLocalBytes==0) {
    16bc:	4b23      	ldr	r3, [pc, #140]	; (174c <Ethernet_PumpEvents+0xac>)
    16be:	899b      	ldrh	r3, [r3, #12]
    16c0:	2b00      	cmp	r3, #0
    16c2:	d00f      	beq.n	16e4 <Ethernet_PumpEvents+0x44>
    _ManageEthernetDnsState();
    16c4:	4b24      	ldr	r3, [pc, #144]	; (1758 <Ethernet_PumpEvents+0xb8>)
    16c6:	4798      	blx	r3
    if (s_fEthernetServerCommEstablished==true) {
    16c8:	2349      	movs	r3, #73	; 0x49
    16ca:	4a24      	ldr	r2, [pc, #144]	; (175c <Ethernet_PumpEvents+0xbc>)
    16cc:	5cd3      	ldrb	r3, [r2, r3]
    16ce:	2b00      	cmp	r3, #0
    16d0:	d10b      	bne.n	16ea <Ethernet_PumpEvents+0x4a>
    if (s_fEthernetServerCommLost==true) {
    16d2:	4b1e      	ldr	r3, [pc, #120]	; (174c <Ethernet_PumpEvents+0xac>)
    16d4:	7bdb      	ldrb	r3, [r3, #15]
    16d6:	2b00      	cmp	r3, #0
    16d8:	d132      	bne.n	1740 <Ethernet_PumpEvents+0xa0>
}
    16da:	bd10      	pop	{r4, pc}
            App_SetStatus(STATUS_NO_SERVER_COMM);
    16dc:	3002      	adds	r0, #2
    16de:	4b20      	ldr	r3, [pc, #128]	; (1760 <Ethernet_PumpEvents+0xc0>)
    16e0:	4798      	blx	r3
            return;
    16e2:	e7fa      	b.n	16da <Ethernet_PumpEvents+0x3a>
        _ManageEthernetRemoteSocketState();
    16e4:	4b1f      	ldr	r3, [pc, #124]	; (1764 <Ethernet_PumpEvents+0xc4>)
    16e6:	4798      	blx	r3
    16e8:	e7ec      	b.n	16c4 <Ethernet_PumpEvents+0x24>
        if (Timer_GetTimer(TIMER_ETH_SERVER_LOST_COMM)==0) {
    16ea:	8890      	ldrh	r0, [r2, #4]
    16ec:	4b1e      	ldr	r3, [pc, #120]	; (1768 <Ethernet_PumpEvents+0xc8>)
    16ee:	4798      	blx	r3
    16f0:	2800      	cmp	r0, #0
    16f2:	d11e      	bne.n	1732 <Ethernet_PumpEvents+0x92>
            DEBUG_INFO("Server not responding. ");
    16f4:	481d      	ldr	r0, [pc, #116]	; (176c <Ethernet_PumpEvents+0xcc>)
    16f6:	4b1e      	ldr	r3, [pc, #120]	; (1770 <Ethernet_PumpEvents+0xd0>)
    16f8:	4798      	blx	r3
            App_SetStatus(STATUS_NO_SERVER_COMM);
    16fa:	2002      	movs	r0, #2
    16fc:	4b18      	ldr	r3, [pc, #96]	; (1760 <Ethernet_PumpEvents+0xc0>)
    16fe:	4798      	blx	r3
            s_fEthernetServerCommEstablished = false;
    1700:	2100      	movs	r1, #0
    1702:	2349      	movs	r3, #73	; 0x49
    1704:	4a15      	ldr	r2, [pc, #84]	; (175c <Ethernet_PumpEvents+0xbc>)
    1706:	54d1      	strb	r1, [r2, r3]
            s_fEthernetServerCommLost = true;
    1708:	4a10      	ldr	r2, [pc, #64]	; (174c <Ethernet_PumpEvents+0xac>)
    170a:	3b48      	subs	r3, #72	; 0x48
    170c:	73d3      	strb	r3, [r2, #15]
            s_u8EthernetHostIdx++; // alt1, alt2, primary, failsafe
    170e:	7c13      	ldrb	r3, [r2, #16]
    1710:	3301      	adds	r3, #1
    1712:	b2db      	uxtb	r3, r3
    1714:	7413      	strb	r3, [r2, #16]
            if (s_u8EthernetHostIdx>=4) s_u8EthernetHostIdx=0;
    1716:	2b03      	cmp	r3, #3
    1718:	d902      	bls.n	1720 <Ethernet_PumpEvents+0x80>
    171a:	2200      	movs	r2, #0
    171c:	4b0b      	ldr	r3, [pc, #44]	; (174c <Ethernet_PumpEvents+0xac>)
    171e:	741a      	strb	r2, [r3, #16]
            s_stEthernetInfo.eState = ETHERNET_STATE_ERROR;
    1720:	4b0e      	ldr	r3, [pc, #56]	; (175c <Ethernet_PumpEvents+0xbc>)
    1722:	2203      	movs	r2, #3
    1724:	745a      	strb	r2, [r3, #17]
            Timer_SetTimer(TIMER_ETH_SERVER_ESTABLISH_COMM, TIMEOUT_ESTABLISH_COMM); // 10 minutes before we try a soft reset
    1726:	88d8      	ldrh	r0, [r3, #6]
    1728:	2196      	movs	r1, #150	; 0x96
    172a:	0089      	lsls	r1, r1, #2
    172c:	4b11      	ldr	r3, [pc, #68]	; (1774 <Ethernet_PumpEvents+0xd4>)
    172e:	4798      	blx	r3
    1730:	e7cf      	b.n	16d2 <Ethernet_PumpEvents+0x32>
            App_SetStatus(STATUS_OK);
    1732:	2001      	movs	r0, #1
    1734:	4b0a      	ldr	r3, [pc, #40]	; (1760 <Ethernet_PumpEvents+0xc0>)
    1736:	4798      	blx	r3
            s_fEthernetServerCommLost = false;
    1738:	2200      	movs	r2, #0
    173a:	4b04      	ldr	r3, [pc, #16]	; (174c <Ethernet_PumpEvents+0xac>)
    173c:	73da      	strb	r2, [r3, #15]
    173e:	e7c8      	b.n	16d2 <Ethernet_PumpEvents+0x32>
        if (Timer_GetTimer(TIMER_ETH_SERVER_ESTABLISH_COMM)==0){
    1740:	4b06      	ldr	r3, [pc, #24]	; (175c <Ethernet_PumpEvents+0xbc>)
    1742:	88d8      	ldrh	r0, [r3, #6]
    1744:	4b08      	ldr	r3, [pc, #32]	; (1768 <Ethernet_PumpEvents+0xc8>)
    1746:	4798      	blx	r3
    1748:	e7c7      	b.n	16da <Ethernet_PumpEvents+0x3a>
    174a:	46c0      	nop			; (mov r8, r8)
    174c:	2000078c 	.word	0x2000078c
    1750:	00000c75 	.word	0x00000c75
    1754:	00001461 	.word	0x00001461
    1758:	00000cf9 	.word	0x00000cf9
    175c:	2000060c 	.word	0x2000060c
    1760:	00000151 	.word	0x00000151
    1764:	00000f6d 	.word	0x00000f6d
    1768:	00001bd9 	.word	0x00001bd9
    176c:	000076cc 	.word	0x000076cc
    1770:	000008d1 	.word	0x000008d1
    1774:	00001bcd 	.word	0x00001bcd

00001778 <_DnsDiscardName>:

DoneSearchingRecords:
    s_eEthernetDnsState = DNS_STATE_DONE;
}

void _DnsDiscardName(void) {
    1778:	b510      	push	{r4, lr}
    177a:	e009      	b.n	1790 <_DnsDiscardName+0x18>

    while (1) {
        // Get first byte which will tell us if this is a 16-bit pointer or the length of a label
        u8Byte = UDP_Read8();
        if ((u8Byte & 0xC0u) == 0xC0u) {
            u8Byte = UDP_Read8();
    177c:	4b0a      	ldr	r3, [pc, #40]	; (17a8 <_DnsDiscardName+0x30>)
    177e:	4798      	blx	r3
        // Discard complete label
        while (u8Byte--) {
            UDP_Read8();
        }
    }
}
    1780:	bd10      	pop	{r4, pc}
            UDP_Read8();
    1782:	4b09      	ldr	r3, [pc, #36]	; (17a8 <_DnsDiscardName+0x30>)
    1784:	4798      	blx	r3
        while (u8Byte--) {
    1786:	0022      	movs	r2, r4
    1788:	1e54      	subs	r4, r2, #1
    178a:	b2e4      	uxtb	r4, r4
    178c:	2a00      	cmp	r2, #0
    178e:	d1f8      	bne.n	1782 <_DnsDiscardName+0xa>
        u8Byte = UDP_Read8();
    1790:	4b05      	ldr	r3, [pc, #20]	; (17a8 <_DnsDiscardName+0x30>)
    1792:	4798      	blx	r3
    1794:	0002      	movs	r2, r0
        if ((u8Byte & 0xC0u) == 0xC0u) {
    1796:	233f      	movs	r3, #63	; 0x3f
    1798:	4398      	bics	r0, r3
    179a:	b2c0      	uxtb	r0, r0
    179c:	28c0      	cmp	r0, #192	; 0xc0
    179e:	d0ed      	beq.n	177c <_DnsDiscardName+0x4>
        if (u8Byte == 0u) return;
    17a0:	2a00      	cmp	r2, #0
    17a2:	d1f1      	bne.n	1788 <_DnsDiscardName+0x10>
    17a4:	e7ec      	b.n	1780 <_DnsDiscardName+0x8>
    17a6:	46c0      	nop			; (mov r8, r8)
    17a8:	00003f21 	.word	0x00003f21

000017ac <DNS_Handler>:
{
    17ac:	b530      	push	{r4, r5, lr}
    17ae:	b087      	sub	sp, #28
    DEBUG_INFO("Process DNS query response. ");
    17b0:	4851      	ldr	r0, [pc, #324]	; (18f8 <DNS_Handler+0x14c>)
    17b2:	4b52      	ldr	r3, [pc, #328]	; (18fc <DNS_Handler+0x150>)
    17b4:	4798      	blx	r3
    stDnsHeader.u16TransactionID = UDP_Read16();
    17b6:	4b52      	ldr	r3, [pc, #328]	; (1900 <DNS_Handler+0x154>)
    17b8:	4798      	blx	r3
    if (stDnsHeader.u16TransactionID!=s_u16TransactionID) {
    17ba:	4b52      	ldr	r3, [pc, #328]	; (1904 <DNS_Handler+0x158>)
    17bc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    17be:	4298      	cmp	r0, r3
    17c0:	d004      	beq.n	17cc <DNS_Handler+0x20>
        DEBUG_INFO("Unexpected transaction ID. ");
    17c2:	4851      	ldr	r0, [pc, #324]	; (1908 <DNS_Handler+0x15c>)
    17c4:	4b4d      	ldr	r3, [pc, #308]	; (18fc <DNS_Handler+0x150>)
    17c6:	4798      	blx	r3
}
    17c8:	b007      	add	sp, #28
    17ca:	bd30      	pop	{r4, r5, pc}
    stDnsHeader.u16Flags = UDP_Read16();
    17cc:	4c4c      	ldr	r4, [pc, #304]	; (1900 <DNS_Handler+0x154>)
    17ce:	47a0      	blx	r4
    stDnsHeader.u16Questions = UDP_Read16();
    17d0:	47a0      	blx	r4
    17d2:	ad03      	add	r5, sp, #12
    17d4:	80a8      	strh	r0, [r5, #4]
    stDnsHeader.u16Answers = UDP_Read16();
    17d6:	47a0      	blx	r4
    17d8:	80e8      	strh	r0, [r5, #6]
    stDnsHeader.u16AuthoritativeRecords = UDP_Read16();
    17da:	47a0      	blx	r4
    17dc:	8128      	strh	r0, [r5, #8]
    stDnsHeader.u16AdditionalRecords = UDP_Read16();
    17de:	47a0      	blx	r4
    17e0:	8168      	strh	r0, [r5, #10]
    while(stDnsHeader.u16Questions--) {
    17e2:	aa03      	add	r2, sp, #12
    17e4:	8893      	ldrh	r3, [r2, #4]
    17e6:	1e59      	subs	r1, r3, #1
    17e8:	8091      	strh	r1, [r2, #4]
    17ea:	2b00      	cmp	r3, #0
    17ec:	d00e      	beq.n	180c <DNS_Handler+0x60>
        _DnsDiscardName(); // Throw away response name
    17ee:	4b47      	ldr	r3, [pc, #284]	; (190c <DNS_Handler+0x160>)
    17f0:	4798      	blx	r3
        UDP_Read16(); // Question type
    17f2:	4c43      	ldr	r4, [pc, #268]	; (1900 <DNS_Handler+0x154>)
    17f4:	47a0      	blx	r4
        UDP_Read16(); // Question class
    17f6:	47a0      	blx	r4
    17f8:	e7f3      	b.n	17e2 <DNS_Handler+0x36>
                UDP_Read8();
    17fa:	4b45      	ldr	r3, [pc, #276]	; (1910 <DNS_Handler+0x164>)
    17fc:	4798      	blx	r3
            while(stDnsAnswerHeader.u16ResponseLen--) {
    17fe:	466b      	mov	r3, sp
    1800:	891b      	ldrh	r3, [r3, #8]
    1802:	1e5a      	subs	r2, r3, #1
    1804:	4669      	mov	r1, sp
    1806:	810a      	strh	r2, [r1, #8]
    1808:	2b00      	cmp	r3, #0
    180a:	d1f6      	bne.n	17fa <DNS_Handler+0x4e>
    while(stDnsHeader.u16Answers--) {
    180c:	aa03      	add	r2, sp, #12
    180e:	88d3      	ldrh	r3, [r2, #6]
    1810:	1e59      	subs	r1, r3, #1
    1812:	80d1      	strh	r1, [r2, #6]
    1814:	2b00      	cmp	r3, #0
    1816:	d026      	beq.n	1866 <DNS_Handler+0xba>
        _DnsDiscardName(); // Throw away response name
    1818:	4b3c      	ldr	r3, [pc, #240]	; (190c <DNS_Handler+0x160>)
    181a:	4798      	blx	r3
        stDnsAnswerHeader.u16ResponseType = UDP_Read16(); // Response type
    181c:	4c38      	ldr	r4, [pc, #224]	; (1900 <DNS_Handler+0x154>)
    181e:	47a0      	blx	r4
    1820:	466b      	mov	r3, sp
    1822:	8018      	strh	r0, [r3, #0]
        stDnsAnswerHeader.u16ResponseClass = UDP_Read16(); // Response class
    1824:	47a0      	blx	r4
    1826:	466b      	mov	r3, sp
    1828:	8058      	strh	r0, [r3, #2]
        stDnsAnswerHeader.u32ResponseTTL = UDP_Read32(); // Time to live
    182a:	4b3a      	ldr	r3, [pc, #232]	; (1914 <DNS_Handler+0x168>)
    182c:	4798      	blx	r3
        stDnsAnswerHeader.u16ResponseLen = UDP_Read16(); // Response length
    182e:	47a0      	blx	r4
    1830:	466b      	mov	r3, sp
    1832:	8118      	strh	r0, [r3, #8]
        if (stDnsAnswerHeader.u16ResponseType == 0x0001u && stDnsAnswerHeader.u16ResponseClass == 0x0001u && stDnsAnswerHeader.u16ResponseLen == 0x0004u) {
    1834:	4b38      	ldr	r3, [pc, #224]	; (1918 <DNS_Handler+0x16c>)
    1836:	9900      	ldr	r1, [sp, #0]
    1838:	4299      	cmp	r1, r3
    183a:	d1e0      	bne.n	17fe <DNS_Handler+0x52>
    183c:	2804      	cmp	r0, #4
    183e:	d1de      	bne.n	17fe <DNS_Handler+0x52>
            *s_pu32LookupHostIp = UDP_Read32();
    1840:	4b30      	ldr	r3, [pc, #192]	; (1904 <DNS_Handler+0x158>)
    1842:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    1844:	4b33      	ldr	r3, [pc, #204]	; (1914 <DNS_Handler+0x168>)
    1846:	4798      	blx	r3
    1848:	6020      	str	r0, [r4, #0]
    s_eEthernetDnsState = DNS_STATE_DONE;
    184a:	2106      	movs	r1, #6
    184c:	232c      	movs	r3, #44	; 0x2c
    184e:	4a2d      	ldr	r2, [pc, #180]	; (1904 <DNS_Handler+0x158>)
    1850:	54d1      	strb	r1, [r2, r3]
    1852:	e7b9      	b.n	17c8 <DNS_Handler+0x1c>
                UDP_Read8();
    1854:	4b2e      	ldr	r3, [pc, #184]	; (1910 <DNS_Handler+0x164>)
    1856:	4798      	blx	r3
            while(stDnsAnswerHeader.u16ResponseLen--) {
    1858:	466b      	mov	r3, sp
    185a:	891b      	ldrh	r3, [r3, #8]
    185c:	1e5a      	subs	r2, r3, #1
    185e:	4669      	mov	r1, sp
    1860:	810a      	strh	r2, [r1, #8]
    1862:	2b00      	cmp	r3, #0
    1864:	d1f6      	bne.n	1854 <DNS_Handler+0xa8>
    while(stDnsHeader.u16AuthoritativeRecords--) {
    1866:	aa03      	add	r2, sp, #12
    1868:	8913      	ldrh	r3, [r2, #8]
    186a:	1e59      	subs	r1, r3, #1
    186c:	8111      	strh	r1, [r2, #8]
    186e:	2b00      	cmp	r3, #0
    1870:	d022      	beq.n	18b8 <DNS_Handler+0x10c>
        _DnsDiscardName(); // Throw away response name
    1872:	4b26      	ldr	r3, [pc, #152]	; (190c <DNS_Handler+0x160>)
    1874:	4798      	blx	r3
        stDnsAnswerHeader.u16ResponseType = UDP_Read16(); // Response type
    1876:	4c22      	ldr	r4, [pc, #136]	; (1900 <DNS_Handler+0x154>)
    1878:	47a0      	blx	r4
    187a:	466b      	mov	r3, sp
    187c:	8018      	strh	r0, [r3, #0]
        stDnsAnswerHeader.u16ResponseClass = UDP_Read16(); // Response class
    187e:	47a0      	blx	r4
    1880:	466b      	mov	r3, sp
    1882:	8058      	strh	r0, [r3, #2]
        stDnsAnswerHeader.u32ResponseTTL = UDP_Read32(); // Time to live
    1884:	4b23      	ldr	r3, [pc, #140]	; (1914 <DNS_Handler+0x168>)
    1886:	4798      	blx	r3
        stDnsAnswerHeader.u16ResponseLen = UDP_Read16(); // Response length
    1888:	47a0      	blx	r4
    188a:	466b      	mov	r3, sp
    188c:	8118      	strh	r0, [r3, #8]
        if (stDnsAnswerHeader.u16ResponseType == 0x0001u && stDnsAnswerHeader.u16ResponseClass == 0x0001u && stDnsAnswerHeader.u16ResponseLen == 0x0004u) {
    188e:	4b22      	ldr	r3, [pc, #136]	; (1918 <DNS_Handler+0x16c>)
    1890:	9900      	ldr	r1, [sp, #0]
    1892:	4299      	cmp	r1, r3
    1894:	d1e0      	bne.n	1858 <DNS_Handler+0xac>
    1896:	2804      	cmp	r0, #4
    1898:	d1de      	bne.n	1858 <DNS_Handler+0xac>
            *s_pu32LookupHostIp = UDP_Read32();
    189a:	4b1a      	ldr	r3, [pc, #104]	; (1904 <DNS_Handler+0x158>)
    189c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    189e:	4b1d      	ldr	r3, [pc, #116]	; (1914 <DNS_Handler+0x168>)
    18a0:	4798      	blx	r3
    18a2:	6020      	str	r0, [r4, #0]
            goto DoneSearchingRecords;
    18a4:	e7d1      	b.n	184a <DNS_Handler+0x9e>
                UDP_Read8();
    18a6:	4b1a      	ldr	r3, [pc, #104]	; (1910 <DNS_Handler+0x164>)
    18a8:	4798      	blx	r3
            while(stDnsAnswerHeader.u16ResponseLen--) {
    18aa:	466b      	mov	r3, sp
    18ac:	891b      	ldrh	r3, [r3, #8]
    18ae:	1e5a      	subs	r2, r3, #1
    18b0:	4669      	mov	r1, sp
    18b2:	810a      	strh	r2, [r1, #8]
    18b4:	2b00      	cmp	r3, #0
    18b6:	d1f6      	bne.n	18a6 <DNS_Handler+0xfa>
    while(stDnsHeader.u16AdditionalRecords--) {
    18b8:	aa03      	add	r2, sp, #12
    18ba:	8953      	ldrh	r3, [r2, #10]
    18bc:	1e59      	subs	r1, r3, #1
    18be:	8151      	strh	r1, [r2, #10]
    18c0:	2b00      	cmp	r3, #0
    18c2:	d0c2      	beq.n	184a <DNS_Handler+0x9e>
        _DnsDiscardName(); // Throw away response name
    18c4:	4b11      	ldr	r3, [pc, #68]	; (190c <DNS_Handler+0x160>)
    18c6:	4798      	blx	r3
        stDnsAnswerHeader.u16ResponseType = UDP_Read16(); // Response type
    18c8:	4c0d      	ldr	r4, [pc, #52]	; (1900 <DNS_Handler+0x154>)
    18ca:	47a0      	blx	r4
    18cc:	466b      	mov	r3, sp
    18ce:	8018      	strh	r0, [r3, #0]
        stDnsAnswerHeader.u16ResponseClass = UDP_Read16(); // Response class
    18d0:	47a0      	blx	r4
    18d2:	466b      	mov	r3, sp
    18d4:	8058      	strh	r0, [r3, #2]
        stDnsAnswerHeader.u32ResponseTTL = UDP_Read32(); // Time to live
    18d6:	4b0f      	ldr	r3, [pc, #60]	; (1914 <DNS_Handler+0x168>)
    18d8:	4798      	blx	r3
        stDnsAnswerHeader.u16ResponseLen = UDP_Read16(); // Response length
    18da:	47a0      	blx	r4
    18dc:	466b      	mov	r3, sp
    18de:	8118      	strh	r0, [r3, #8]
        if (stDnsAnswerHeader.u16ResponseType == 0x0001u && stDnsAnswerHeader.u16ResponseClass == 0x0001u && stDnsAnswerHeader.u16ResponseLen == 0x0004u) {
    18e0:	4b0d      	ldr	r3, [pc, #52]	; (1918 <DNS_Handler+0x16c>)
    18e2:	9900      	ldr	r1, [sp, #0]
    18e4:	4299      	cmp	r1, r3
    18e6:	d1e0      	bne.n	18aa <DNS_Handler+0xfe>
    18e8:	2804      	cmp	r0, #4
    18ea:	d1de      	bne.n	18aa <DNS_Handler+0xfe>
            *s_pu32LookupHostIp = UDP_Read32();
    18ec:	4b05      	ldr	r3, [pc, #20]	; (1904 <DNS_Handler+0x158>)
    18ee:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    18f0:	4b08      	ldr	r3, [pc, #32]	; (1914 <DNS_Handler+0x168>)
    18f2:	4798      	blx	r3
    18f4:	6020      	str	r0, [r4, #0]
            goto DoneSearchingRecords;
    18f6:	e7a8      	b.n	184a <DNS_Handler+0x9e>
    18f8:	000076e4 	.word	0x000076e4
    18fc:	000008d1 	.word	0x000008d1
    1900:	00003fa1 	.word	0x00003fa1
    1904:	2000060c 	.word	0x2000060c
    1908:	00007704 	.word	0x00007704
    190c:	00001779 	.word	0x00001779
    1910:	00003f21 	.word	0x00003f21
    1914:	00003fd5 	.word	0x00003fd5
    1918:	00010001 	.word	0x00010001

0000191c <Ethernet_QueueServerSend>:

void Ethernet_QueueServerSend(void) {
    191c:	b510      	push	{r4, lr}
    // No point in setting the flag if it is already set
    if (s_fEthernetQueueServerSend==true) return;
    191e:	4b09      	ldr	r3, [pc, #36]	; (1944 <Ethernet_QueueServerSend+0x28>)
    1920:	7f9b      	ldrb	r3, [r3, #30]
    1922:	2b00      	cmp	r3, #0
    1924:	d10d      	bne.n	1942 <Ethernet_QueueServerSend+0x26>
    // No point in setting the flag is still waiting on a response
    if (s_stEthernetSocketRemote.socketState==SOCKET_CONNECTED || s_stEthernetSocketRemote.socketState==SOCKET_IN_PROGRESS) return;
    1926:	4b08      	ldr	r3, [pc, #32]	; (1948 <Ethernet_QueueServerSend+0x2c>)
    1928:	339a      	adds	r3, #154	; 0x9a
    192a:	781b      	ldrb	r3, [r3, #0]
    192c:	3b02      	subs	r3, #2
    192e:	b2db      	uxtb	r3, r3
    1930:	2b01      	cmp	r3, #1
    1932:	d906      	bls.n	1942 <Ethernet_QueueServerSend+0x26>
	
	if (CmdFifo_GetByteCount()>0) s_fEthernetQueueServerSend = true;
    1934:	4b05      	ldr	r3, [pc, #20]	; (194c <Ethernet_QueueServerSend+0x30>)
    1936:	4798      	blx	r3
    1938:	2800      	cmp	r0, #0
    193a:	dd02      	ble.n	1942 <Ethernet_QueueServerSend+0x26>
    193c:	2201      	movs	r2, #1
    193e:	4b01      	ldr	r3, [pc, #4]	; (1944 <Ethernet_QueueServerSend+0x28>)
    1940:	779a      	strb	r2, [r3, #30]
    1942:	bd10      	pop	{r4, pc}
    1944:	2000068c 	.word	0x2000068c
    1948:	2000060c 	.word	0x2000060c
    194c:	0000080d 	.word	0x0000080d

00001950 <Flash_Init>:
 *  @param[out] None
 *  @return     Nothing
 ******************************************************************************/
void Flash_Init(void) {
    // Initialization of FLASH_0 already done in driver_init.c
}
    1950:	4770      	bx	lr
	...

00001954 <Flash_ReadFlash>:
 *  @param[in]  uint32_t  byteAddress  Flash page to begin operation
 *  @param[out] char*   buffer      Pointer to destination buffer
 *  @param[in]  uint32_t  size        Number of bytes to read
 *  @return     Nothing
 ******************************************************************************/
void Flash_ReadFlash(uint32_t byteAddress, char *buffer, uint32_t size) {
    1954:	b510      	push	{r4, lr}
    1956:	0013      	movs	r3, r2
    flash_read(&FLASH_0, byteAddress, (uint8_t*)buffer, size);
    1958:	000a      	movs	r2, r1
    195a:	0001      	movs	r1, r0
    195c:	4801      	ldr	r0, [pc, #4]	; (1964 <Flash_ReadFlash+0x10>)
    195e:	4c02      	ldr	r4, [pc, #8]	; (1968 <Flash_ReadFlash+0x14>)
    1960:	47a0      	blx	r4
}
    1962:	bd10      	pop	{r4, pc}
    1964:	20004a44 	.word	0x20004a44
    1968:	000025cd 	.word	0x000025cd

0000196c <Flash_EraseFlash>:
 *  Erase contents of NVM in 256-byte rows
 *  @param[in]  uint32_t  pageOffset  Flash page to begin operation
 *  @param[in]  uint32_t  size        Number of bytes to erase. Will round up to pages!
 *  @return     Nothing
 ******************************************************************************/
void Flash_EraseFlash(uint32_t byteAddress, uint32_t numPages) {
    196c:	b510      	push	{r4, lr}
    196e:	000a      	movs	r2, r1
    flash_erase(&FLASH_0, byteAddress, numPages);
    1970:	0001      	movs	r1, r0
    1972:	4802      	ldr	r0, [pc, #8]	; (197c <Flash_EraseFlash+0x10>)
    1974:	4b02      	ldr	r3, [pc, #8]	; (1980 <Flash_EraseFlash+0x14>)
    1976:	4798      	blx	r3
}
    1978:	bd10      	pop	{r4, pc}
    197a:	46c0      	nop			; (mov r8, r8)
    197c:	20004a44 	.word	0x20004a44
    1980:	000026e5 	.word	0x000026e5

00001984 <Flash_WriteFlash>:
 *  @param[in]  uint32_t  pageOffset  Flash page to begin operation
 *  @param[in]  char*   buffer      Pointer to source buffer
 *  @param[in]  uint32_t  size        Number of bytes to write
 *  @return     Nothing
 ******************************************************************************/
void Flash_WriteFlash(uint32_t byteAddress, char *buffer, uint32_t size) {
    1984:	b510      	push	{r4, lr}
    1986:	0013      	movs	r3, r2
    flash_write(&FLASH_0, byteAddress, (uint8_t*)buffer, size);
    1988:	000a      	movs	r2, r1
    198a:	0001      	movs	r1, r0
    198c:	4801      	ldr	r0, [pc, #4]	; (1994 <Flash_WriteFlash+0x10>)
    198e:	4c02      	ldr	r4, [pc, #8]	; (1998 <Flash_WriteFlash+0x14>)
    1990:	47a0      	blx	r4
}
    1992:	bd10      	pop	{r4, pc}
    1994:	20004a44 	.word	0x20004a44
    1998:	0000264d 	.word	0x0000264d

0000199c <Http_BuildPostHeaderCommon>:
    totalBytes = (uint16_t)(pDst - buffer);
    return totalBytes;
}


uint16_t Http_BuildPostHeaderCommon(char* buffer, char* hostname, bool useFailsafe) {
    199c:	b5f0      	push	{r4, r5, r6, r7, lr}
    199e:	b083      	sub	sp, #12
    19a0:	0007      	movs	r7, r0
    19a2:	9101      	str	r1, [sp, #4]
    uint16_t  totalBytes = 0;
    char    *pDst = buffer;

    // POST {path} HTTP/1.1\r\n
    sprintf(g_acBuffer256, HTTP_HDR_POST, "index.php");
    19a4:	4a17      	ldr	r2, [pc, #92]	; (1a04 <Http_BuildPostHeaderCommon+0x68>)
    19a6:	4918      	ldr	r1, [pc, #96]	; (1a08 <Http_BuildPostHeaderCommon+0x6c>)
    19a8:	4818      	ldr	r0, [pc, #96]	; (1a0c <Http_BuildPostHeaderCommon+0x70>)
    19aa:	4d19      	ldr	r5, [pc, #100]	; (1a10 <Http_BuildPostHeaderCommon+0x74>)
    19ac:	47a8      	blx	r5
    sprintf(pDst, g_acBuffer256); pDst += strlen(g_acBuffer256);
    19ae:	4917      	ldr	r1, [pc, #92]	; (1a0c <Http_BuildPostHeaderCommon+0x70>)
    19b0:	0038      	movs	r0, r7
    19b2:	47a8      	blx	r5
    19b4:	4815      	ldr	r0, [pc, #84]	; (1a0c <Http_BuildPostHeaderCommon+0x70>)
    19b6:	4e17      	ldr	r6, [pc, #92]	; (1a14 <Http_BuildPostHeaderCommon+0x78>)
    19b8:	47b0      	blx	r6
    19ba:	183c      	adds	r4, r7, r0
    // Host: {domain}\r\n
    sprintf(g_acBuffer256, HTTP_HDR_HOST, hostname);
    19bc:	9a01      	ldr	r2, [sp, #4]
    19be:	4916      	ldr	r1, [pc, #88]	; (1a18 <Http_BuildPostHeaderCommon+0x7c>)
    19c0:	4812      	ldr	r0, [pc, #72]	; (1a0c <Http_BuildPostHeaderCommon+0x70>)
    19c2:	47a8      	blx	r5
    sprintf(pDst, g_acBuffer256); pDst += strlen(g_acBuffer256);
    19c4:	4911      	ldr	r1, [pc, #68]	; (1a0c <Http_BuildPostHeaderCommon+0x70>)
    19c6:	0020      	movs	r0, r4
    19c8:	47a8      	blx	r5
    19ca:	4810      	ldr	r0, [pc, #64]	; (1a0c <Http_BuildPostHeaderCommon+0x70>)
    19cc:	47b0      	blx	r6
    19ce:	1824      	adds	r4, r4, r0
    // Connection: close\r\n
    sprintf(pDst, HTTP_HDR_CONNECTION_CLOSE);
    19d0:	2214      	movs	r2, #20
    19d2:	4912      	ldr	r1, [pc, #72]	; (1a1c <Http_BuildPostHeaderCommon+0x80>)
    19d4:	0020      	movs	r0, r4
    19d6:	4d12      	ldr	r5, [pc, #72]	; (1a20 <Http_BuildPostHeaderCommon+0x84>)
    19d8:	47a8      	blx	r5
    pDst += strlen(HTTP_HDR_CONNECTION_CLOSE);
    19da:	0020      	movs	r0, r4
    19dc:	3013      	adds	r0, #19
	
	sprintf(pDst, HTTP_HDR_CONTENT_TYPE_PLAIN);
    19de:	222a      	movs	r2, #42	; 0x2a
    19e0:	4910      	ldr	r1, [pc, #64]	; (1a24 <Http_BuildPostHeaderCommon+0x88>)
    19e2:	47a8      	blx	r5
    pDst += strlen(HTTP_HDR_CONTENT_TYPE_PLAIN);
    19e4:	0020      	movs	r0, r4
    19e6:	303c      	adds	r0, #60	; 0x3c
	
    // Content-Length: xxxx\r\n\r\n
    // It is critical that this is always at the end and doesn't change size - it gets updated later
    sprintf(pDst, HTTP_HDR_CONTENT_LENGTH);
    19e8:	2217      	movs	r2, #23
    19ea:	490f      	ldr	r1, [pc, #60]	; (1a28 <Http_BuildPostHeaderCommon+0x8c>)
    19ec:	47a8      	blx	r5
    pDst += strlen(HTTP_HDR_CONTENT_LENGTH);
    19ee:	0020      	movs	r0, r4
    19f0:	3052      	adds	r0, #82	; 0x52
    sprintf(pDst, HTTP_HDR_CRLF);
    19f2:	2203      	movs	r2, #3
    19f4:	490d      	ldr	r1, [pc, #52]	; (1a2c <Http_BuildPostHeaderCommon+0x90>)
    19f6:	47a8      	blx	r5
    pDst += strlen(HTTP_HDR_CRLF);
    19f8:	0020      	movs	r0, r4
    19fa:	3054      	adds	r0, #84	; 0x54

    // Return the total byte count
    totalBytes = (uint16_t)(pDst - buffer);
    19fc:	1bc0      	subs	r0, r0, r7
    19fe:	b280      	uxth	r0, r0
    return totalBytes;
}
    1a00:	b003      	add	sp, #12
    1a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a04:	000078b0 	.word	0x000078b0
    1a08:	000078bc 	.word	0x000078bc
    1a0c:	20000928 	.word	0x20000928
    1a10:	00006789 	.word	0x00006789
    1a14:	000067cd 	.word	0x000067cd
    1a18:	000078d0 	.word	0x000078d0
    1a1c:	0000777c 	.word	0x0000777c
    1a20:	000065f3 	.word	0x000065f3
    1a24:	000078dc 	.word	0x000078dc
    1a28:	00007800 	.word	0x00007800
    1a2c:	00007814 	.word	0x00007814

00001a30 <_Sensor1_Callback>:
    ext_irq_enable(SENSOR1_IN);
			
	return 1;
}

void _Sensor1_Callback(void) {
    1a30:	b510      	push	{r4, lr}
	if(Sensor1_Tx) {
    1a32:	4b08      	ldr	r3, [pc, #32]	; (1a54 <_Sensor1_Callback+0x24>)
    1a34:	781b      	ldrb	r3, [r3, #0]
    1a36:	2b00      	cmp	r3, #0
    1a38:	d108      	bne.n	1a4c <_Sensor1_Callback+0x1c>
		_AddToFifo_EventData(0);
	} else {
		_AddToFifo_EventData(1);
    1a3a:	2001      	movs	r0, #1
    1a3c:	4b06      	ldr	r3, [pc, #24]	; (1a58 <_Sensor1_Callback+0x28>)
    1a3e:	4798      	blx	r3
	}
	
	// FLip sensor.
	Sensor1_Tx = !Sensor1_Tx;
    1a40:	4a04      	ldr	r2, [pc, #16]	; (1a54 <_Sensor1_Callback+0x24>)
    1a42:	7813      	ldrb	r3, [r2, #0]
    1a44:	2101      	movs	r1, #1
    1a46:	404b      	eors	r3, r1
    1a48:	7013      	strb	r3, [r2, #0]
}
    1a4a:	bd10      	pop	{r4, pc}
		_AddToFifo_EventData(0);
    1a4c:	2000      	movs	r0, #0
    1a4e:	4b02      	ldr	r3, [pc, #8]	; (1a58 <_Sensor1_Callback+0x28>)
    1a50:	4798      	blx	r3
    1a52:	e7f5      	b.n	1a40 <_Sensor1_Callback+0x10>
    1a54:	20000002 	.word	0x20000002
    1a58:	0000041d 	.word	0x0000041d

00001a5c <Sensor_Init>:
int8_t Sensor_Init(void) {
    1a5c:	b510      	push	{r4, lr}
	Sensor1_Tx = true;
    1a5e:	2201      	movs	r2, #1
    1a60:	4b08      	ldr	r3, [pc, #32]	; (1a84 <Sensor_Init+0x28>)
    1a62:	701a      	strb	r2, [r3, #0]
    uint32_t u32RegOrig = EIC->CONFIG[0].reg;
    1a64:	4a08      	ldr	r2, [pc, #32]	; (1a88 <Sensor_Init+0x2c>)
    1a66:	6991      	ldr	r1, [r2, #24]
    EIC->CONFIG[0].reg = u32RegOrig | u32Sense | u32Filter;
    1a68:	2380      	movs	r3, #128	; 0x80
    1a6a:	029b      	lsls	r3, r3, #10
    1a6c:	430b      	orrs	r3, r1
    1a6e:	6193      	str	r3, [r2, #24]
    ext_irq_register(SENSOR1_IN, _Sensor1_Callback);
    1a70:	4906      	ldr	r1, [pc, #24]	; (1a8c <Sensor_Init+0x30>)
    1a72:	2004      	movs	r0, #4
    1a74:	4b06      	ldr	r3, [pc, #24]	; (1a90 <Sensor_Init+0x34>)
    1a76:	4798      	blx	r3
    ext_irq_enable(SENSOR1_IN);
    1a78:	2004      	movs	r0, #4
    1a7a:	4b06      	ldr	r3, [pc, #24]	; (1a94 <Sensor_Init+0x38>)
    1a7c:	4798      	blx	r3
}
    1a7e:	2001      	movs	r0, #1
    1a80:	bd10      	pop	{r4, pc}
    1a82:	46c0      	nop			; (mov r8, r8)
    1a84:	20000002 	.word	0x20000002
    1a88:	40001800 	.word	0x40001800
    1a8c:	00001a31 	.word	0x00001a31
    1a90:	00002439 	.word	0x00002439
    1a94:	00002521 	.word	0x00002521

00001a98 <_FindContentPointer>:
 *  @param[in]  char*   buff    Pointer to buffer to search content length
 *  @param[out] None
 *  @return     Pointer to beginning of the content. Null if not found
 ******************************************************************************/
char* _FindContentPointer(char* buff)
{
    1a98:	b510      	push	{r4, lr}
    char* ptr = NULL;
    ptr = strstr(buff, "\r\n\r\n");
    1a9a:	4903      	ldr	r1, [pc, #12]	; (1aa8 <_FindContentPointer+0x10>)
    1a9c:	4b03      	ldr	r3, [pc, #12]	; (1aac <_FindContentPointer+0x14>)
    1a9e:	4798      	blx	r3
    if (ptr!=NULL) ptr += 4;
    1aa0:	2800      	cmp	r0, #0
    1aa2:	d000      	beq.n	1aa6 <_FindContentPointer+0xe>
    1aa4:	3004      	adds	r0, #4
    return ptr;
}
    1aa6:	bd10      	pop	{r4, pc}
    1aa8:	00007524 	.word	0x00007524
    1aac:	000067db 	.word	0x000067db

00001ab0 <_FindTokenValue>:
 *  @param[in]  char*   max_sz  Maximum length of response
 *  @param[out] char*   value   Destination buffer
 *  @return     Pointer to beginning of the content. 0 if token not found
 ******************************************************************************/
uint16_t _FindTokenValue(char *buff, const char *tok, char term, uint16_t max_sz, char *value)
{
    1ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ab2:	b083      	sub	sp, #12
    1ab4:	9101      	str	r1, [sp, #4]
    1ab6:	0017      	movs	r7, r2
    1ab8:	001e      	movs	r6, r3
    1aba:	9d08      	ldr	r5, [sp, #32]
    uint8_t i = 0;

    // Search for token in string, then advance pointer
    char *pch = strstr(buff, tok);
    1abc:	4b0f      	ldr	r3, [pc, #60]	; (1afc <_FindTokenValue+0x4c>)
    1abe:	4798      	blx	r3
    1ac0:	0004      	movs	r4, r0
    pch += strlen(tok);
    1ac2:	9801      	ldr	r0, [sp, #4]
    1ac4:	4b0e      	ldr	r3, [pc, #56]	; (1b00 <_FindTokenValue+0x50>)
    1ac6:	4798      	blx	r3
    1ac8:	1824      	adds	r4, r4, r0

    // Clear out buffer before parsing
    memset(value, 0, max_sz);
    1aca:	0032      	movs	r2, r6
    1acc:	2100      	movs	r1, #0
    1ace:	0028      	movs	r0, r5
    1ad0:	4b0c      	ldr	r3, [pc, #48]	; (1b04 <_FindTokenValue+0x54>)
    1ad2:	4798      	blx	r3
    uint8_t i = 0;
    1ad4:	2300      	movs	r3, #0

    // Copy value into buffer up to the 'term' character (or null)
    while (i < max_sz) {
    1ad6:	b298      	uxth	r0, r3
    1ad8:	4286      	cmp	r6, r0
    1ada:	d909      	bls.n	1af0 <_FindTokenValue+0x40>
        if ((*pch == term) || (*pch == 0)) {break;}
    1adc:	7822      	ldrb	r2, [r4, #0]
    1ade:	42ba      	cmp	r2, r7
    1ae0:	d006      	beq.n	1af0 <_FindTokenValue+0x40>
    1ae2:	2a00      	cmp	r2, #0
    1ae4:	d004      	beq.n	1af0 <_FindTokenValue+0x40>
        value[i++] = *pch++;
    1ae6:	1c59      	adds	r1, r3, #1
    1ae8:	3401      	adds	r4, #1
    1aea:	54ea      	strb	r2, [r5, r3]
    1aec:	b2cb      	uxtb	r3, r1
    1aee:	e7f2      	b.n	1ad6 <_FindTokenValue+0x26>
    }

    /* add terminating 'null' to string */
    value[i] = 0;
    1af0:	18eb      	adds	r3, r5, r3
    1af2:	2200      	movs	r2, #0
    1af4:	701a      	strb	r2, [r3, #0]

    return i;
}
    1af6:	b003      	add	sp, #12
    1af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1afa:	46c0      	nop			; (mov r8, r8)
    1afc:	000067db 	.word	0x000067db
    1b00:	000067cd 	.word	0x000067cd
    1b04:	00006605 	.word	0x00006605

00001b08 <_FindContentLength>:
{
    1b08:	b530      	push	{r4, r5, lr}
    1b0a:	b085      	sub	sp, #20
    _FindTokenValue(buff, "Content-Length: ", '\r', sizeof(value), value);
    1b0c:	ac02      	add	r4, sp, #8
    1b0e:	9400      	str	r4, [sp, #0]
    1b10:	2305      	movs	r3, #5
    1b12:	220d      	movs	r2, #13
    1b14:	4903      	ldr	r1, [pc, #12]	; (1b24 <_FindContentLength+0x1c>)
    1b16:	4d04      	ldr	r5, [pc, #16]	; (1b28 <_FindContentLength+0x20>)
    1b18:	47a8      	blx	r5
    length = atoi(value);
    1b1a:	0020      	movs	r0, r4
    1b1c:	4b03      	ldr	r3, [pc, #12]	; (1b2c <_FindContentLength+0x24>)
    1b1e:	4798      	blx	r3
}
    1b20:	b005      	add	sp, #20
    1b22:	bd30      	pop	{r4, r5, pc}
    1b24:	00007910 	.word	0x00007910
    1b28:	00001ab1 	.word	0x00001ab1
    1b2c:	00006581 	.word	0x00006581

00001b30 <TcpParser_ParseServerResponse>:
bool TcpParser_ParseServerResponse(char* pcResponseBuff, uint16_t u16ResponseSize) {
    1b30:	b570      	push	{r4, r5, r6, lr}
    1b32:	0004      	movs	r4, r0
    1b34:	000e      	movs	r6, r1
    contentLen = _FindContentLength(pcResponseBuff);
    1b36:	4b0e      	ldr	r3, [pc, #56]	; (1b70 <TcpParser_ParseServerResponse+0x40>)
    1b38:	4798      	blx	r3
    1b3a:	0005      	movs	r5, r0
    pContent = _FindContentPointer(pcResponseBuff);
    1b3c:	0020      	movs	r0, r4
    1b3e:	4b0d      	ldr	r3, [pc, #52]	; (1b74 <TcpParser_ParseServerResponse+0x44>)
    1b40:	4798      	blx	r3
    if (pContent==NULL) {
    1b42:	2800      	cmp	r0, #0
    1b44:	d009      	beq.n	1b5a <TcpParser_ParseServerResponse+0x2a>
    pBuffEnd = pcResponseBuff + u16ResponseSize;
    1b46:	19a4      	adds	r4, r4, r6
    payloadBytes = (int)(pBuffEnd - pContent);
    1b48:	1a24      	subs	r4, r4, r0
    1b4a:	0429      	lsls	r1, r5, #16
    1b4c:	0c09      	lsrs	r1, r1, #16
    if (payloadBytes<contentLen){
    1b4e:	428c      	cmp	r4, r1
    1b50:	db08      	blt.n	1b64 <TcpParser_ParseServerResponse+0x34>
    App_ProcessBinaryPayload(pSrc, contentLen);
    1b52:	4b09      	ldr	r3, [pc, #36]	; (1b78 <TcpParser_ParseServerResponse+0x48>)
    1b54:	4798      	blx	r3
    return true;
    1b56:	2001      	movs	r0, #1
}
    1b58:	bd70      	pop	{r4, r5, r6, pc}
        DEBUG_INFO("Unable to find start of content. ");
    1b5a:	4808      	ldr	r0, [pc, #32]	; (1b7c <TcpParser_ParseServerResponse+0x4c>)
    1b5c:	4b08      	ldr	r3, [pc, #32]	; (1b80 <TcpParser_ParseServerResponse+0x50>)
    1b5e:	4798      	blx	r3
        return false;
    1b60:	2000      	movs	r0, #0
    1b62:	e7f9      	b.n	1b58 <TcpParser_ParseServerResponse+0x28>
        DEBUG_INFO("Content missing or incomplete. ");
    1b64:	4807      	ldr	r0, [pc, #28]	; (1b84 <TcpParser_ParseServerResponse+0x54>)
    1b66:	4b06      	ldr	r3, [pc, #24]	; (1b80 <TcpParser_ParseServerResponse+0x50>)
    1b68:	4798      	blx	r3
        return false;
    1b6a:	2000      	movs	r0, #0
    1b6c:	e7f4      	b.n	1b58 <TcpParser_ParseServerResponse+0x28>
    1b6e:	46c0      	nop			; (mov r8, r8)
    1b70:	00001b09 	.word	0x00001b09
    1b74:	00001a99 	.word	0x00001a99
    1b78:	00000569 	.word	0x00000569
    1b7c:	00007924 	.word	0x00007924
    1b80:	000008d1 	.word	0x000008d1
    1b84:	00007948 	.word	0x00007948

00001b88 <Timer_Init>:
 *  callback on (one second) roll over.
 *  @param[in]  None
 *  @param[out] None
 *  @return     0 indicates success. Anything else is an error.
 ******************************************************************************/
int16_t Timer_Init(void) {
    1b88:	b510      	push	{r4, lr}
    // Initialization of TIMER_0 already done in driver_init.c

    // Clear the contents of the timer array
    memset(&s_au16Timers[0], 0, sizeof(s_au16Timers));
    1b8a:	2280      	movs	r2, #128	; 0x80
    1b8c:	2100      	movs	r1, #0
    1b8e:	4804      	ldr	r0, [pc, #16]	; (1ba0 <Timer_Init+0x18>)
    1b90:	4b04      	ldr	r3, [pc, #16]	; (1ba4 <Timer_Init+0x1c>)
    1b92:	4798      	blx	r3
    // Reset timer counter
    s_u16TimerCount = 0;
    1b94:	2200      	movs	r2, #0
    1b96:	4b04      	ldr	r3, [pc, #16]	; (1ba8 <Timer_Init+0x20>)
    1b98:	801a      	strh	r2, [r3, #0]
    return 0;
}
    1b9a:	2000      	movs	r0, #0
    1b9c:	bd10      	pop	{r4, pc}
    1b9e:	46c0      	nop			; (mov r8, r8)
    1ba0:	200007a0 	.word	0x200007a0
    1ba4:	00006605 	.word	0x00006605
    1ba8:	20000820 	.word	0x20000820

00001bac <Timer_AddTimer>:
 *  @param[out] uint16_t    Index of the new timer
 *  @return     0 indicates success. Anything else is an error.
 ******************************************************************************/
int16_t Timer_AddTimer(uint16_t *u16Timer) {
    // Bail out with error if there are no timers left
    if (s_u16TimerCount>=TIMER_MAX_COUNT) return -1;
    1bac:	4b06      	ldr	r3, [pc, #24]	; (1bc8 <Timer_AddTimer+0x1c>)
    1bae:	881b      	ldrh	r3, [r3, #0]
    1bb0:	2b3f      	cmp	r3, #63	; 0x3f
    1bb2:	d805      	bhi.n	1bc0 <Timer_AddTimer+0x14>

    // Assign current timer count as the new index;
    *u16Timer = s_u16TimerCount;
    1bb4:	8003      	strh	r3, [r0, #0]
    // Increment the timer count
    s_u16TimerCount++;
    1bb6:	3301      	adds	r3, #1
    1bb8:	4a03      	ldr	r2, [pc, #12]	; (1bc8 <Timer_AddTimer+0x1c>)
    1bba:	8013      	strh	r3, [r2, #0]

    // Return success
    return 0;
    1bbc:	2000      	movs	r0, #0
}
    1bbe:	4770      	bx	lr
    if (s_u16TimerCount>=TIMER_MAX_COUNT) return -1;
    1bc0:	2001      	movs	r0, #1
    1bc2:	4240      	negs	r0, r0
    1bc4:	e7fb      	b.n	1bbe <Timer_AddTimer+0x12>
    1bc6:	46c0      	nop			; (mov r8, r8)
    1bc8:	20000820 	.word	0x20000820

00001bcc <Timer_SetTimer>:
 *  @param[in]  uint16_t    Value (in seconds) to set
 *  @param[out] None
 *  @return     Nothing
 ******************************************************************************/
void Timer_SetTimer(uint16_t timer, uint16_t sec) {
    s_au16Timers[timer] = sec;
    1bcc:	0040      	lsls	r0, r0, #1
    1bce:	4b01      	ldr	r3, [pc, #4]	; (1bd4 <Timer_SetTimer+0x8>)
    1bd0:	52c1      	strh	r1, [r0, r3]
}
    1bd2:	4770      	bx	lr
    1bd4:	200007a0 	.word	0x200007a0

00001bd8 <Timer_GetTimer>:
 *  @param[in]  uint16_t    Index of timer to retrieve
 *  @param[out] None
 *  @return     uint16_t    Current timer value (in seconds)
 ******************************************************************************/
uint16_t Timer_GetTimer(uint16_t timer) {
    return s_au16Timers[timer];
    1bd8:	0040      	lsls	r0, r0, #1
    1bda:	4b01      	ldr	r3, [pc, #4]	; (1be0 <Timer_GetTimer+0x8>)
    1bdc:	5a18      	ldrh	r0, [r3, r0]
}
    1bde:	4770      	bx	lr
    1be0:	200007a0 	.word	0x200007a0

00001be4 <Timer_Register_Callback>:
 *  @param[in]  void*   Pointer to user callback function
 *  @param[out] None
 *  @return     Nothing
 ******************************************************************************/
static struct timer_task task;
void Timer_Register_Callback(void* fpTimerCb) {
    1be4:	b510      	push	{r4, lr}
    task.interval = 1; // Timer output configured for one second
    1be6:	4907      	ldr	r1, [pc, #28]	; (1c04 <Timer_Register_Callback+0x20>)
    1be8:	2301      	movs	r3, #1
    1bea:	60cb      	str	r3, [r1, #12]
    task.cb = fpTimerCb;
    1bec:	6108      	str	r0, [r1, #16]
    task.mode = TIMER_TASK_REPEAT;
    1bee:	750b      	strb	r3, [r1, #20]
    timer_add_task(&TIMER_0, &task);
    1bf0:	3104      	adds	r1, #4
    1bf2:	4c05      	ldr	r4, [pc, #20]	; (1c08 <Timer_Register_Callback+0x24>)
    1bf4:	0020      	movs	r0, r4
    1bf6:	4b05      	ldr	r3, [pc, #20]	; (1c0c <Timer_Register_Callback+0x28>)
    1bf8:	4798      	blx	r3
    timer_start(&TIMER_0);
    1bfa:	0020      	movs	r0, r4
    1bfc:	4b04      	ldr	r3, [pc, #16]	; (1c10 <Timer_Register_Callback+0x2c>)
    1bfe:	4798      	blx	r3
}
    1c00:	bd10      	pop	{r4, pc}
    1c02:	46c0      	nop			; (mov r8, r8)
    1c04:	20000820 	.word	0x20000820
    1c08:	20004a98 	.word	0x20004a98
    1c0c:	00002ab5 	.word	0x00002ab5
    1c10:	00002a79 	.word	0x00002a79

00001c14 <Timer_Pump>:
 *  Pumps all timers. Decrements all non-zero timers. MUST be called from user callback
 *  @param[in]  None
 *  @param[out] None
 *  @return     Nothing
 ******************************************************************************/
void Timer_Pump(void) {
    1c14:	b510      	push	{r4, lr}
    for (uint16_t index=0; index<s_u16TimerCount; index++) {
    1c16:	2400      	movs	r4, #0
    1c18:	e001      	b.n	1c1e <Timer_Pump+0xa>
    1c1a:	3401      	adds	r4, #1
    1c1c:	b2a4      	uxth	r4, r4
    1c1e:	4b08      	ldr	r3, [pc, #32]	; (1c40 <Timer_Pump+0x2c>)
    1c20:	881b      	ldrh	r3, [r3, #0]
    1c22:	429c      	cmp	r4, r3
    1c24:	d20a      	bcs.n	1c3c <Timer_Pump+0x28>
        uint16_t count = Timer_GetTimer(index);
    1c26:	0020      	movs	r0, r4
    1c28:	4b06      	ldr	r3, [pc, #24]	; (1c44 <Timer_Pump+0x30>)
    1c2a:	4798      	blx	r3
        if (count>0) Timer_SetTimer(index, count-1);
    1c2c:	2800      	cmp	r0, #0
    1c2e:	d0f4      	beq.n	1c1a <Timer_Pump+0x6>
    1c30:	3801      	subs	r0, #1
    1c32:	b281      	uxth	r1, r0
    1c34:	0020      	movs	r0, r4
    1c36:	4b04      	ldr	r3, [pc, #16]	; (1c48 <Timer_Pump+0x34>)
    1c38:	4798      	blx	r3
    1c3a:	e7ee      	b.n	1c1a <Timer_Pump+0x6>
    }
}
    1c3c:	bd10      	pop	{r4, pc}
    1c3e:	46c0      	nop			; (mov r8, r8)
    1c40:	20000820 	.word	0x20000820
    1c44:	00001bd9 	.word	0x00001bd9
    1c48:	00001bcd 	.word	0x00001bcd

00001c4c <Timestamp_Init>:
			peripheral = (uint32_t)_pm_get_ahb_index(module);
			PM->AHBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBA:
		PM->APBAMASK.reg |= 1 << peripheral;
    1c4c:	4a18      	ldr	r2, [pc, #96]	; (1cb0 <Timestamp_Init+0x64>)
    1c4e:	6993      	ldr	r3, [r2, #24]
    1c50:	2120      	movs	r1, #32
    1c52:	430b      	orrs	r3, r1
    1c54:	6193      	str	r3, [r2, #24]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
    1c56:	4a17      	ldr	r2, [pc, #92]	; (1cb4 <Timestamp_Init+0x68>)
    1c58:	4b17      	ldr	r3, [pc, #92]	; (1cb8 <Timestamp_Init+0x6c>)
    1c5a:	805a      	strh	r2, [r3, #2]
    _pm_enable_bus_clock(PM_BUS_APBA, RTC);
    // Coming from clock generator 1 output (1024Hz from OSC32K source)
    _gclk_enable_channel(RTC_GCLK_ID, GCLK_CLKCTRL_GEN_GCLK1_Val);

    // Disable the RTC peripheral
    RTC->MODE0.CTRL.bit.ENABLE = 0;
    1c5c:	4a17      	ldr	r2, [pc, #92]	; (1cbc <Timestamp_Init+0x70>)
    1c5e:	8813      	ldrh	r3, [r2, #0]
    1c60:	391e      	subs	r1, #30
    1c62:	438b      	bics	r3, r1
    1c64:	8013      	strh	r3, [r2, #0]
    while(RTC->MODE0.STATUS.bit.SYNCBUSY){/* Wait for sync */}
    1c66:	4b15      	ldr	r3, [pc, #84]	; (1cbc <Timestamp_Init+0x70>)
    1c68:	7a9b      	ldrb	r3, [r3, #10]
    1c6a:	09db      	lsrs	r3, r3, #7
    1c6c:	d1fb      	bne.n	1c66 <Timestamp_Init+0x1a>

    // Initiate software reset
    RTC->MODE0.CTRL.bit.SWRST = 1;
    1c6e:	4a13      	ldr	r2, [pc, #76]	; (1cbc <Timestamp_Init+0x70>)
    1c70:	8813      	ldrh	r3, [r2, #0]
    1c72:	2101      	movs	r1, #1
    1c74:	430b      	orrs	r3, r1
    1c76:	8013      	strh	r3, [r2, #0]
    while(RTC->MODE0.STATUS.bit.SYNCBUSY){/* Wait for sync */}
    1c78:	4b10      	ldr	r3, [pc, #64]	; (1cbc <Timestamp_Init+0x70>)
    1c7a:	7a9b      	ldrb	r3, [r3, #10]
    1c7c:	09db      	lsrs	r3, r3, #7
    1c7e:	d1fb      	bne.n	1c78 <Timestamp_Init+0x2c>

    // Set mode (32-bit) and prescaler (1024)
    //RTC->MODE0.CTRL.bit.MODE = RTC_MODE0_CTRL_MODE_COUNT32_Val;
    //RTC->MODE0.CTRL.bit.PRESCALER = RTC_MODE0_CTRL_PRESCALER_DIV1024_Val;
    RTC->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE_COUNT32 | RTC_MODE0_CTRL_PRESCALER_DIV1024;
    1c80:	22a0      	movs	r2, #160	; 0xa0
    1c82:	0112      	lsls	r2, r2, #4
    1c84:	4b0d      	ldr	r3, [pc, #52]	; (1cbc <Timestamp_Init+0x70>)
    1c86:	801a      	strh	r2, [r3, #0]

    // Set the initial value
    while(RTC->MODE0.STATUS.bit.SYNCBUSY){/* Wait for sync */}
    1c88:	4b0c      	ldr	r3, [pc, #48]	; (1cbc <Timestamp_Init+0x70>)
    1c8a:	7a9b      	ldrb	r3, [r3, #10]
    1c8c:	09db      	lsrs	r3, r3, #7
    1c8e:	d1fb      	bne.n	1c88 <Timestamp_Init+0x3c>
    RTC->MODE0.COUNT.reg = RTC_MINIMUM_TIMESTAMP;
    1c90:	4a0b      	ldr	r2, [pc, #44]	; (1cc0 <Timestamp_Init+0x74>)
    1c92:	4b0a      	ldr	r3, [pc, #40]	; (1cbc <Timestamp_Init+0x70>)
    1c94:	611a      	str	r2, [r3, #16]
    //// Set continuous update
    //RTC->MODE0.READREQ.reg = RTC_READREQ_RREQ | RTC_READREQ_RCONT;

    // Enable the peripheral
    while(RTC->MODE0.STATUS.bit.SYNCBUSY){/* Wait for sync */}
    1c96:	4b09      	ldr	r3, [pc, #36]	; (1cbc <Timestamp_Init+0x70>)
    1c98:	7a9b      	ldrb	r3, [r3, #10]
    1c9a:	09db      	lsrs	r3, r3, #7
    1c9c:	d1fb      	bne.n	1c96 <Timestamp_Init+0x4a>
    RTC->MODE0.CTRL.bit.ENABLE = 1;
    1c9e:	4a07      	ldr	r2, [pc, #28]	; (1cbc <Timestamp_Init+0x70>)
    1ca0:	8813      	ldrh	r3, [r2, #0]
    1ca2:	2102      	movs	r1, #2
    1ca4:	430b      	orrs	r3, r1
    1ca6:	8013      	strh	r3, [r2, #0]

    // Set status flag
    s_eRtcStatus = RTC_STATUS_INIT;
    1ca8:	2200      	movs	r2, #0
    1caa:	4b06      	ldr	r3, [pc, #24]	; (1cc4 <Timestamp_Init+0x78>)
    1cac:	701a      	strb	r2, [r3, #0]
}
    1cae:	4770      	bx	lr
    1cb0:	40000400 	.word	0x40000400
    1cb4:	00004102 	.word	0x00004102
    1cb8:	40000c00 	.word	0x40000c00
    1cbc:	40001400 	.word	0x40001400
    1cc0:	5e0be100 	.word	0x5e0be100
    1cc4:	20000838 	.word	0x20000838

00001cc8 <Timestamp_SetTimestamp>:
 *  @param[out] None
 *  @return     true=success, false=failure
 ******************************************************************************/
bool Timestamp_SetTimestamp(uint32_t timestamp) {
    // Determine if the timestamp passed in is valid
    if (timestamp<RTC_MINIMUM_TIMESTAMP) {
    1cc8:	4b09      	ldr	r3, [pc, #36]	; (1cf0 <Timestamp_SetTimestamp+0x28>)
    1cca:	4298      	cmp	r0, r3
    1ccc:	d90a      	bls.n	1ce4 <Timestamp_SetTimestamp+0x1c>
        s_eRtcStatus = RTC_STATUS_ERROR;
        return false;
    }

    while(RTC->MODE0.STATUS.bit.SYNCBUSY){/* Wait for sync */}
    1cce:	4b09      	ldr	r3, [pc, #36]	; (1cf4 <Timestamp_SetTimestamp+0x2c>)
    1cd0:	7a9b      	ldrb	r3, [r3, #10]
    1cd2:	09db      	lsrs	r3, r3, #7
    1cd4:	d1fb      	bne.n	1cce <Timestamp_SetTimestamp+0x6>
    RTC->MODE0.COUNT.reg = timestamp;
    1cd6:	4b07      	ldr	r3, [pc, #28]	; (1cf4 <Timestamp_SetTimestamp+0x2c>)
    1cd8:	6118      	str	r0, [r3, #16]

    s_eRtcStatus = RTC_STATUS_SYNC_SUCCESS;
    1cda:	2202      	movs	r2, #2
    1cdc:	4b06      	ldr	r3, [pc, #24]	; (1cf8 <Timestamp_SetTimestamp+0x30>)
    1cde:	701a      	strb	r2, [r3, #0]
    return true;
    1ce0:	2001      	movs	r0, #1
}
    1ce2:	4770      	bx	lr
        s_eRtcStatus = RTC_STATUS_ERROR;
    1ce4:	2201      	movs	r2, #1
    1ce6:	4b04      	ldr	r3, [pc, #16]	; (1cf8 <Timestamp_SetTimestamp+0x30>)
    1ce8:	701a      	strb	r2, [r3, #0]
        return false;
    1cea:	2000      	movs	r0, #0
    1cec:	e7f9      	b.n	1ce2 <Timestamp_SetTimestamp+0x1a>
    1cee:	46c0      	nop			; (mov r8, r8)
    1cf0:	5e0be0ff 	.word	0x5e0be0ff
    1cf4:	40001400 	.word	0x40001400
    1cf8:	20000838 	.word	0x20000838

00001cfc <Timestamp_GetTimestamp>:
 *  @param[out] uint32  Current system time in timestamp (seconds from Unix epoch)
 *  @return     Nothing
 ******************************************************************************/
void Timestamp_GetTimestamp(uint32_t *timestamp) {
    // Request read
    RTC->MODE0.READREQ.bit.RREQ = 1;
    1cfc:	4a06      	ldr	r2, [pc, #24]	; (1d18 <Timestamp_GetTimestamp+0x1c>)
    1cfe:	8851      	ldrh	r1, [r2, #2]
    1d00:	4b06      	ldr	r3, [pc, #24]	; (1d1c <Timestamp_GetTimestamp+0x20>)
    1d02:	430b      	orrs	r3, r1
    1d04:	8053      	strh	r3, [r2, #2]
    while(RTC->MODE0.STATUS.bit.SYNCBUSY){/* Wait for sync */}
    1d06:	4b04      	ldr	r3, [pc, #16]	; (1d18 <Timestamp_GetTimestamp+0x1c>)
    1d08:	7a9b      	ldrb	r3, [r3, #10]
    1d0a:	09db      	lsrs	r3, r3, #7
    1d0c:	d1fb      	bne.n	1d06 <Timestamp_GetTimestamp+0xa>

    // Pull the current count (in seconds) directly from the counter
    *timestamp = RTC->MODE0.COUNT.reg;
    1d0e:	4b02      	ldr	r3, [pc, #8]	; (1d18 <Timestamp_GetTimestamp+0x1c>)
    1d10:	691b      	ldr	r3, [r3, #16]
    1d12:	6003      	str	r3, [r0, #0]
}
    1d14:	4770      	bx	lr
    1d16:	46c0      	nop			; (mov r8, r8)
    1d18:	40001400 	.word	0x40001400
    1d1c:	ffff8000 	.word	0xffff8000

00001d20 <Watchdog_Init>:
/** INCLUDES ******************************************************************/
#include "driver_init.h"
#include "Watchdog.h"
#include <App/DcaApp.h>

void Watchdog_Init() {
    1d20:	b510      	push	{r4, lr}
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
    1d22:	4b10      	ldr	r3, [pc, #64]	; (1d64 <Watchdog_Init+0x44>)
    1d24:	681b      	ldr	r3, [r3, #0]
    1d26:	2b00      	cmp	r3, #0
    1d28:	d018      	beq.n	1d5c <Watchdog_Init+0x3c>
    1d2a:	2001      	movs	r0, #1
    1d2c:	226f      	movs	r2, #111	; 0x6f
    1d2e:	490e      	ldr	r1, [pc, #56]	; (1d68 <Watchdog_Init+0x48>)
    1d30:	4b0e      	ldr	r3, [pc, #56]	; (1d6c <Watchdog_Init+0x4c>)
    1d32:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    1d34:	4c0b      	ldr	r4, [pc, #44]	; (1d64 <Watchdog_Init+0x44>)
    1d36:	22fa      	movs	r2, #250	; 0xfa
    1d38:	0152      	lsls	r2, r2, #5
    1d3a:	2180      	movs	r1, #128	; 0x80
    1d3c:	00c9      	lsls	r1, r1, #3
    1d3e:	0020      	movs	r0, r4
    1d40:	4b0b      	ldr	r3, [pc, #44]	; (1d70 <Watchdog_Init+0x50>)
    1d42:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    1d44:	6823      	ldr	r3, [r4, #0]
    1d46:	2b00      	cmp	r3, #0
    1d48:	d00a      	beq.n	1d60 <Watchdog_Init+0x40>
    1d4a:	2001      	movs	r0, #1
    1d4c:	228c      	movs	r2, #140	; 0x8c
    1d4e:	4906      	ldr	r1, [pc, #24]	; (1d68 <Watchdog_Init+0x48>)
    1d50:	4b06      	ldr	r3, [pc, #24]	; (1d6c <Watchdog_Init+0x4c>)
    1d52:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
    1d54:	4803      	ldr	r0, [pc, #12]	; (1d64 <Watchdog_Init+0x44>)
    1d56:	4b07      	ldr	r3, [pc, #28]	; (1d74 <Watchdog_Init+0x54>)
    1d58:	4798      	blx	r3
	timeout_period = WATCHDOG_TIMEOUT_MS; // 8s
	wdt_set_timeout_period(&WDT_0, RT_CLOCK_FREQUENCY_HZ, timeout_period);

	// Enable the dog.
	wdt_enable(&WDT_0);
}
    1d5a:	bd10      	pop	{r4, pc}
	ASSERT(wdt && wdt->dev.hw);
    1d5c:	2000      	movs	r0, #0
    1d5e:	e7e5      	b.n	1d2c <Watchdog_Init+0xc>
	ASSERT(wdt && wdt->dev.hw);
    1d60:	2000      	movs	r0, #0
    1d62:	e7f3      	b.n	1d4c <Watchdog_Init+0x2c>
    1d64:	20004a60 	.word	0x20004a60
    1d68:	00007968 	.word	0x00007968
    1d6c:	00002b65 	.word	0x00002b65
    1d70:	00003841 	.word	0x00003841
    1d74:	0000395d 	.word	0x0000395d

00001d78 <Watchdog_Feed>:

void Watchdog_Feed(void) {
    1d78:	b510      	push	{r4, lr}
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    1d7a:	4b07      	ldr	r3, [pc, #28]	; (1d98 <Watchdog_Feed+0x20>)
    1d7c:	681b      	ldr	r3, [r3, #0]
    1d7e:	2b00      	cmp	r3, #0
    1d80:	d008      	beq.n	1d94 <Watchdog_Feed+0x1c>
    1d82:	2001      	movs	r0, #1
    1d84:	22a9      	movs	r2, #169	; 0xa9
    1d86:	4905      	ldr	r1, [pc, #20]	; (1d9c <Watchdog_Feed+0x24>)
    1d88:	4b05      	ldr	r3, [pc, #20]	; (1da0 <Watchdog_Feed+0x28>)
    1d8a:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
    1d8c:	4802      	ldr	r0, [pc, #8]	; (1d98 <Watchdog_Feed+0x20>)
    1d8e:	4b05      	ldr	r3, [pc, #20]	; (1da4 <Watchdog_Feed+0x2c>)
    1d90:	4798      	blx	r3
	wdt_feed(&WDT_0);
    1d92:	bd10      	pop	{r4, pc}
	ASSERT(wdt && wdt->dev.hw);
    1d94:	2000      	movs	r0, #0
    1d96:	e7f5      	b.n	1d84 <Watchdog_Feed+0xc>
    1d98:	20004a60 	.word	0x20004a60
    1d9c:	00007968 	.word	0x00007968
    1da0:	00002b65 	.word	0x00002b65
    1da4:	00003999 	.word	0x00003999

00001da8 <Wifi_Init>:


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
int8_t Wifi_Init(void) {
    return 0;
}
    1da8:	2000      	movs	r0, #0
    1daa:	4770      	bx	lr

00001dac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1dac:	e7fe      	b.n	1dac <Dummy_Handler>
	...

00001db0 <Reset_Handler>:
{
    1db0:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    1db2:	4a12      	ldr	r2, [pc, #72]	; (1dfc <Reset_Handler+0x4c>)
    1db4:	4b12      	ldr	r3, [pc, #72]	; (1e00 <Reset_Handler+0x50>)
    1db6:	429a      	cmp	r2, r3
    1db8:	d009      	beq.n	1dce <Reset_Handler+0x1e>
    1dba:	4b11      	ldr	r3, [pc, #68]	; (1e00 <Reset_Handler+0x50>)
    1dbc:	4a0f      	ldr	r2, [pc, #60]	; (1dfc <Reset_Handler+0x4c>)
    1dbe:	e003      	b.n	1dc8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    1dc0:	6811      	ldr	r1, [r2, #0]
    1dc2:	6019      	str	r1, [r3, #0]
    1dc4:	3304      	adds	r3, #4
    1dc6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1dc8:	490e      	ldr	r1, [pc, #56]	; (1e04 <Reset_Handler+0x54>)
    1dca:	428b      	cmp	r3, r1
    1dcc:	d3f8      	bcc.n	1dc0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    1dce:	4b0e      	ldr	r3, [pc, #56]	; (1e08 <Reset_Handler+0x58>)
    1dd0:	e002      	b.n	1dd8 <Reset_Handler+0x28>
                *pDest++ = 0;
    1dd2:	2200      	movs	r2, #0
    1dd4:	601a      	str	r2, [r3, #0]
    1dd6:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    1dd8:	4a0c      	ldr	r2, [pc, #48]	; (1e0c <Reset_Handler+0x5c>)
    1dda:	4293      	cmp	r3, r2
    1ddc:	d3f9      	bcc.n	1dd2 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1dde:	4a0c      	ldr	r2, [pc, #48]	; (1e10 <Reset_Handler+0x60>)
    1de0:	21ff      	movs	r1, #255	; 0xff
    1de2:	4b0c      	ldr	r3, [pc, #48]	; (1e14 <Reset_Handler+0x64>)
    1de4:	438b      	bics	r3, r1
    1de6:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1de8:	4a0b      	ldr	r2, [pc, #44]	; (1e18 <Reset_Handler+0x68>)
    1dea:	6851      	ldr	r1, [r2, #4]
    1dec:	2380      	movs	r3, #128	; 0x80
    1dee:	430b      	orrs	r3, r1
    1df0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1df2:	4b0a      	ldr	r3, [pc, #40]	; (1e1c <Reset_Handler+0x6c>)
    1df4:	4798      	blx	r3
        main();
    1df6:	4b0a      	ldr	r3, [pc, #40]	; (1e20 <Reset_Handler+0x70>)
    1df8:	4798      	blx	r3
    1dfa:	e7fe      	b.n	1dfa <Reset_Handler+0x4a>
    1dfc:	00008314 	.word	0x00008314
    1e00:	20000000 	.word	0x20000000
    1e04:	200001d4 	.word	0x200001d4
    1e08:	200001d4 	.word	0x200001d4
    1e0c:	20004b80 	.word	0x20004b80
    1e10:	e000ed00 	.word	0xe000ed00
    1e14:	00000000 	.word	0x00000000
    1e18:	41004000 	.word	0x41004000
    1e1c:	0000658d 	.word	0x0000658d
    1e20:	000039d1 	.word	0x000039d1

00001e24 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
    1e24:	b510      	push	{r4, lr}
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    1e26:	4a08      	ldr	r2, [pc, #32]	; (1e48 <TIMER_0_init+0x24>)
    1e28:	6a11      	ldr	r1, [r2, #32]
    1e2a:	2380      	movs	r3, #128	; 0x80
    1e2c:	005b      	lsls	r3, r3, #1
    1e2e:	430b      	orrs	r3, r1
    1e30:	6213      	str	r3, [r2, #32]
    1e32:	4a06      	ldr	r2, [pc, #24]	; (1e4c <TIMER_0_init+0x28>)
    1e34:	4b06      	ldr	r3, [pc, #24]	; (1e50 <TIMER_0_init+0x2c>)
    1e36:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC0);
	_gclk_enable_channel(TC0_GCLK_ID, CONF_GCLK_TC0_SRC);

	timer_init(&TIMER_0, TC0, _tc_get_timer());
    1e38:	4b06      	ldr	r3, [pc, #24]	; (1e54 <TIMER_0_init+0x30>)
    1e3a:	4798      	blx	r3
    1e3c:	0002      	movs	r2, r0
    1e3e:	4906      	ldr	r1, [pc, #24]	; (1e58 <TIMER_0_init+0x34>)
    1e40:	4806      	ldr	r0, [pc, #24]	; (1e5c <TIMER_0_init+0x38>)
    1e42:	4b07      	ldr	r3, [pc, #28]	; (1e60 <TIMER_0_init+0x3c>)
    1e44:	4798      	blx	r3
}
    1e46:	bd10      	pop	{r4, pc}
    1e48:	40000400 	.word	0x40000400
    1e4c:	00004113 	.word	0x00004113
    1e50:	40000c00 	.word	0x40000c00
    1e54:	00003783 	.word	0x00003783
    1e58:	42002000 	.word	0x42002000
    1e5c:	20004a98 	.word	0x20004a98
    1e60:	00002a35 	.word	0x00002a35

00001e64 <TICK_TIMER_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TICK_TIMER_init(void)
{
    1e64:	b510      	push	{r4, lr}
    1e66:	4a08      	ldr	r2, [pc, #32]	; (1e88 <TICK_TIMER_init+0x24>)
    1e68:	6a11      	ldr	r1, [r2, #32]
    1e6a:	2380      	movs	r3, #128	; 0x80
    1e6c:	015b      	lsls	r3, r3, #5
    1e6e:	430b      	orrs	r3, r1
    1e70:	6213      	str	r3, [r2, #32]
    1e72:	4a06      	ldr	r2, [pc, #24]	; (1e8c <TICK_TIMER_init+0x28>)
    1e74:	4b06      	ldr	r3, [pc, #24]	; (1e90 <TICK_TIMER_init+0x2c>)
    1e76:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC4);
	_gclk_enable_channel(TC4_GCLK_ID, CONF_GCLK_TC4_SRC);

	timer_init(&TICK_TIMER, TC4, _tc_get_timer());
    1e78:	4b06      	ldr	r3, [pc, #24]	; (1e94 <TICK_TIMER_init+0x30>)
    1e7a:	4798      	blx	r3
    1e7c:	0002      	movs	r2, r0
    1e7e:	4906      	ldr	r1, [pc, #24]	; (1e98 <TICK_TIMER_init+0x34>)
    1e80:	4806      	ldr	r0, [pc, #24]	; (1e9c <TICK_TIMER_init+0x38>)
    1e82:	4b07      	ldr	r3, [pc, #28]	; (1ea0 <TICK_TIMER_init+0x3c>)
    1e84:	4798      	blx	r3
}
    1e86:	bd10      	pop	{r4, pc}
    1e88:	40000400 	.word	0x40000400
    1e8c:	00004015 	.word	0x00004015
    1e90:	40000c00 	.word	0x40000c00
    1e94:	00003783 	.word	0x00003783
    1e98:	42003000 	.word	0x42003000
    1e9c:	20004a64 	.word	0x20004a64
    1ea0:	00002a35 	.word	0x00002a35

00001ea4 <EXTERNAL_IRQ_0_init>:
{
    1ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ea6:	46c6      	mov	lr, r8
    1ea8:	b500      	push	{lr}
    1eaa:	4a26      	ldr	r2, [pc, #152]	; (1f44 <EXTERNAL_IRQ_0_init+0xa0>)
    1eac:	4b26      	ldr	r3, [pc, #152]	; (1f48 <EXTERNAL_IRQ_0_init+0xa4>)
    1eae:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1eb0:	24c0      	movs	r4, #192	; 0xc0
    1eb2:	05e4      	lsls	r4, r4, #23
    1eb4:	2310      	movs	r3, #16
    1eb6:	6063      	str	r3, [r4, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1eb8:	4b24      	ldr	r3, [pc, #144]	; (1f4c <EXTERNAL_IRQ_0_init+0xa8>)
    1eba:	4a25      	ldr	r2, [pc, #148]	; (1f50 <EXTERNAL_IRQ_0_init+0xac>)
    1ebc:	629a      	str	r2, [r3, #40]	; 0x28
    1ebe:	4d25      	ldr	r5, [pc, #148]	; (1f54 <EXTERNAL_IRQ_0_init+0xb0>)
    1ec0:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1ec2:	2644      	movs	r6, #68	; 0x44
    1ec4:	5d9a      	ldrb	r2, [r3, r6]
    1ec6:	2004      	movs	r0, #4
    1ec8:	4382      	bics	r2, r0
    1eca:	559a      	strb	r2, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1ecc:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1ece:	2201      	movs	r2, #1
    1ed0:	4694      	mov	ip, r2
    1ed2:	4391      	bics	r1, r2
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1ed4:	2701      	movs	r7, #1
    1ed6:	4339      	orrs	r1, r7
    1ed8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1eda:	5599      	strb	r1, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1edc:	2132      	movs	r1, #50	; 0x32
    1ede:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1ee0:	3e35      	subs	r6, #53	; 0x35
    1ee2:	46b0      	mov	r8, r6
    1ee4:	43b2      	bics	r2, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1ee6:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1ee8:	2240      	movs	r2, #64	; 0x40
    1eea:	6062      	str	r2, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1eec:	4a1a      	ldr	r2, [pc, #104]	; (1f58 <EXTERNAL_IRQ_0_init+0xb4>)
    1eee:	629a      	str	r2, [r3, #40]	; 0x28
    1ef0:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1ef2:	3114      	adds	r1, #20
    1ef4:	5c5a      	ldrb	r2, [r3, r1]
    1ef6:	4382      	bics	r2, r0
    1ef8:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1efa:	2280      	movs	r2, #128	; 0x80
    1efc:	0552      	lsls	r2, r2, #21
    1efe:	6062      	str	r2, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f00:	4a16      	ldr	r2, [pc, #88]	; (1f5c <EXTERNAL_IRQ_0_init+0xb8>)
    1f02:	629a      	str	r2, [r3, #40]	; 0x28
    1f04:	4a16      	ldr	r2, [pc, #88]	; (1f60 <EXTERNAL_IRQ_0_init+0xbc>)
    1f06:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1f08:	3116      	adds	r1, #22
    1f0a:	5c5a      	ldrb	r2, [r3, r1]
    1f0c:	4382      	bics	r2, r0
    1f0e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f10:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f12:	4666      	mov	r6, ip
    1f14:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1f16:	433a      	orrs	r2, r7
    1f18:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f1a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1f1c:	391e      	subs	r1, #30
    1f1e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1f20:	4646      	mov	r6, r8
    1f22:	43b2      	bics	r2, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1f24:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1f26:	2280      	movs	r2, #128	; 0x80
    1f28:	0112      	lsls	r2, r2, #4
    1f2a:	6062      	str	r2, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f2c:	4a0d      	ldr	r2, [pc, #52]	; (1f64 <EXTERNAL_IRQ_0_init+0xc0>)
    1f2e:	629a      	str	r2, [r3, #40]	; 0x28
    1f30:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1f32:	310d      	adds	r1, #13
    1f34:	5c5a      	ldrb	r2, [r3, r1]
    1f36:	4382      	bics	r2, r0
    1f38:	545a      	strb	r2, [r3, r1]
	ext_irq_init();
    1f3a:	4b0b      	ldr	r3, [pc, #44]	; (1f68 <EXTERNAL_IRQ_0_init+0xc4>)
    1f3c:	4798      	blx	r3
}
    1f3e:	bc04      	pop	{r2}
    1f40:	4690      	mov	r8, r2
    1f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f44:	00004003 	.word	0x00004003
    1f48:	40000c00 	.word	0x40000c00
    1f4c:	41004400 	.word	0x41004400
    1f50:	40020010 	.word	0x40020010
    1f54:	c0020000 	.word	0xc0020000
    1f58:	40020040 	.word	0x40020040
    1f5c:	40020000 	.word	0x40020000
    1f60:	c0021000 	.word	0xc0021000
    1f64:	40020800 	.word	0x40020800
    1f68:	00002405 	.word	0x00002405

00001f6c <FLASH_0_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
    1f6c:	4a02      	ldr	r2, [pc, #8]	; (1f78 <FLASH_0_CLOCK_init+0xc>)
    1f6e:	69d3      	ldr	r3, [r2, #28]
    1f70:	2104      	movs	r1, #4
    1f72:	430b      	orrs	r3, r1
    1f74:	61d3      	str	r3, [r2, #28]
}
    1f76:	4770      	bx	lr
    1f78:	40000400 	.word	0x40000400

00001f7c <FLASH_0_init>:
{
    1f7c:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
    1f7e:	4b03      	ldr	r3, [pc, #12]	; (1f8c <FLASH_0_init+0x10>)
    1f80:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
    1f82:	4903      	ldr	r1, [pc, #12]	; (1f90 <FLASH_0_init+0x14>)
    1f84:	4803      	ldr	r0, [pc, #12]	; (1f94 <FLASH_0_init+0x18>)
    1f86:	4b04      	ldr	r3, [pc, #16]	; (1f98 <FLASH_0_init+0x1c>)
    1f88:	4798      	blx	r3
}
    1f8a:	bd10      	pop	{r4, pc}
    1f8c:	00001f6d 	.word	0x00001f6d
    1f90:	41004000 	.word	0x41004000
    1f94:	20004a44 	.word	0x20004a44
    1f98:	00002581 	.word	0x00002581

00001f9c <WIRELESS_SPI_PORT_init>:
{
    1f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f9e:	46c6      	mov	lr, r8
    1fa0:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1fa2:	20c0      	movs	r0, #192	; 0xc0
    1fa4:	05c0      	lsls	r0, r0, #23
    1fa6:	2380      	movs	r3, #128	; 0x80
    1fa8:	025b      	lsls	r3, r3, #9
    1faa:	6183      	str	r3, [r0, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1fac:	6083      	str	r3, [r0, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1fae:	4b26      	ldr	r3, [pc, #152]	; (2048 <STACK_SIZE+0x48>)
    1fb0:	2180      	movs	r1, #128	; 0x80
    1fb2:	05c9      	lsls	r1, r1, #23
    1fb4:	6299      	str	r1, [r3, #40]	; 0x28
    1fb6:	4a25      	ldr	r2, [pc, #148]	; (204c <STACK_SIZE+0x4c>)
    1fb8:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1fba:	2450      	movs	r4, #80	; 0x50
    1fbc:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1fbe:	2501      	movs	r5, #1
    1fc0:	46a8      	mov	r8, r5
    1fc2:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1fc4:	46ac      	mov	ip, r5
    1fc6:	4665      	mov	r5, ip
    1fc8:	432a      	orrs	r2, r5
    1fca:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1fcc:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1fce:	2738      	movs	r7, #56	; 0x38
    1fd0:	5dda      	ldrb	r2, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1fd2:	3c41      	subs	r4, #65	; 0x41
    1fd4:	43a2      	bics	r2, r4
	tmp |= PORT_PMUX_PMUXE(data);
    1fd6:	2402      	movs	r4, #2
    1fd8:	4322      	orrs	r2, r4
    1fda:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1fdc:	55da      	strb	r2, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1fde:	2580      	movs	r5, #128	; 0x80
    1fe0:	02ad      	lsls	r5, r5, #10
    1fe2:	6045      	str	r5, [r0, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1fe4:	4a1a      	ldr	r2, [pc, #104]	; (2050 <STACK_SIZE+0x50>)
    1fe6:	629a      	str	r2, [r3, #40]	; 0x28
    1fe8:	4a1a      	ldr	r2, [pc, #104]	; (2054 <STACK_SIZE+0x54>)
    1fea:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1fec:	6045      	str	r5, [r0, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1fee:	2451      	movs	r4, #81	; 0x51
    1ff0:	5d1a      	ldrb	r2, [r3, r4]
    1ff2:	2604      	movs	r6, #4
    1ff4:	4332      	orrs	r2, r6
    1ff6:	b2d2      	uxtb	r2, r2
    1ff8:	551a      	strb	r2, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1ffa:	6185      	str	r5, [r0, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1ffc:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1ffe:	4645      	mov	r5, r8
    2000:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2002:	4665      	mov	r5, ip
    2004:	432a      	orrs	r2, r5
    2006:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2008:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    200a:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    200c:	260f      	movs	r6, #15
    200e:	4034      	ands	r4, r6
	tmp |= PORT_PMUX_PMUXO(data);
    2010:	2520      	movs	r5, #32
    2012:	432c      	orrs	r4, r5
    2014:	b2e4      	uxtb	r4, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2016:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2018:	2280      	movs	r2, #128	; 0x80
    201a:	0312      	lsls	r2, r2, #12
    201c:	6182      	str	r2, [r0, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    201e:	6082      	str	r2, [r0, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2020:	6299      	str	r1, [r3, #40]	; 0x28
    2022:	4a0d      	ldr	r2, [pc, #52]	; (2058 <STACK_SIZE+0x58>)
    2024:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2026:	2253      	movs	r2, #83	; 0x53
    2028:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    202a:	4640      	mov	r0, r8
    202c:	4381      	bics	r1, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    202e:	4660      	mov	r0, ip
    2030:	4301      	orrs	r1, r0
    2032:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2034:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2036:	2139      	movs	r1, #57	; 0x39
    2038:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    203a:	4032      	ands	r2, r6
	tmp |= PORT_PMUX_PMUXO(data);
    203c:	432a      	orrs	r2, r5
    203e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2040:	545a      	strb	r2, [r3, r1]
}
    2042:	bc04      	pop	{r2}
    2044:	4690      	mov	r8, r2
    2046:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2048:	41004400 	.word	0x41004400
    204c:	c0000001 	.word	0xc0000001
    2050:	40020000 	.word	0x40020000
    2054:	c0020002 	.word	0xc0020002
    2058:	c0000008 	.word	0xc0000008

0000205c <WIRELESS_SPI_CLOCK_init>:
		PM->APBCMASK.reg |= 1 << peripheral;
    205c:	4a04      	ldr	r2, [pc, #16]	; (2070 <WIRELESS_SPI_CLOCK_init+0x14>)
    205e:	6a13      	ldr	r3, [r2, #32]
    2060:	2108      	movs	r1, #8
    2062:	430b      	orrs	r3, r1
    2064:	6213      	str	r3, [r2, #32]
    2066:	4a03      	ldr	r2, [pc, #12]	; (2074 <WIRELESS_SPI_CLOCK_init+0x18>)
    2068:	4b03      	ldr	r3, [pc, #12]	; (2078 <WIRELESS_SPI_CLOCK_init+0x1c>)
    206a:	805a      	strh	r2, [r3, #2]
}
    206c:	4770      	bx	lr
    206e:	46c0      	nop			; (mov r8, r8)
    2070:	40000400 	.word	0x40000400
    2074:	0000400e 	.word	0x0000400e
    2078:	40000c00 	.word	0x40000c00

0000207c <WIRELESS_SPI_init>:
{
    207c:	b510      	push	{r4, lr}
	WIRELESS_SPI_CLOCK_init();
    207e:	4b04      	ldr	r3, [pc, #16]	; (2090 <WIRELESS_SPI_init+0x14>)
    2080:	4798      	blx	r3
	spi_m_sync_init(&WIRELESS_SPI, SERCOM1);
    2082:	4904      	ldr	r1, [pc, #16]	; (2094 <WIRELESS_SPI_init+0x18>)
    2084:	4804      	ldr	r0, [pc, #16]	; (2098 <WIRELESS_SPI_init+0x1c>)
    2086:	4b05      	ldr	r3, [pc, #20]	; (209c <WIRELESS_SPI_init+0x20>)
    2088:	4798      	blx	r3
	WIRELESS_SPI_PORT_init();
    208a:	4b05      	ldr	r3, [pc, #20]	; (20a0 <WIRELESS_SPI_init+0x24>)
    208c:	4798      	blx	r3
}
    208e:	bd10      	pop	{r4, pc}
    2090:	0000205d 	.word	0x0000205d
    2094:	42000c00 	.word	0x42000c00
    2098:	20004a80 	.word	0x20004a80
    209c:	000027e1 	.word	0x000027e1
    20a0:	00001f9d 	.word	0x00001f9d

000020a4 <ETHERNET_SPI_PORT_init>:
{
    20a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    20a6:	46c6      	mov	lr, r8
    20a8:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    20aa:	24c0      	movs	r4, #192	; 0xc0
    20ac:	05e4      	lsls	r4, r4, #23
    20ae:	2380      	movs	r3, #128	; 0x80
    20b0:	03db      	lsls	r3, r3, #15
    20b2:	6063      	str	r3, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    20b4:	4b24      	ldr	r3, [pc, #144]	; (2148 <ETHERNET_SPI_PORT_init+0xa4>)
    20b6:	4a25      	ldr	r2, [pc, #148]	; (214c <ETHERNET_SPI_PORT_init+0xa8>)
    20b8:	629a      	str	r2, [r3, #40]	; 0x28
    20ba:	4a25      	ldr	r2, [pc, #148]	; (2150 <ETHERNET_SPI_PORT_init+0xac>)
    20bc:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    20be:	2156      	movs	r1, #86	; 0x56
    20c0:	5c5a      	ldrb	r2, [r3, r1]
    20c2:	2004      	movs	r0, #4
    20c4:	4382      	bics	r2, r0
    20c6:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    20c8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    20ca:	2601      	movs	r6, #1
    20cc:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    20ce:	2501      	movs	r5, #1
    20d0:	432a      	orrs	r2, r5
    20d2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    20d4:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    20d6:	391b      	subs	r1, #27
    20d8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    20da:	300b      	adds	r0, #11
    20dc:	4684      	mov	ip, r0
    20de:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
    20e0:	2702      	movs	r7, #2
    20e2:	433a      	orrs	r2, r7
    20e4:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    20e6:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    20e8:	2280      	movs	r2, #128	; 0x80
    20ea:	0452      	lsls	r2, r2, #17
    20ec:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    20ee:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    20f0:	2280      	movs	r2, #128	; 0x80
    20f2:	05d2      	lsls	r2, r2, #23
    20f4:	4690      	mov	r8, r2
    20f6:	629a      	str	r2, [r3, #40]	; 0x28
    20f8:	4916      	ldr	r1, [pc, #88]	; (2154 <ETHERNET_SPI_PORT_init+0xb0>)
    20fa:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    20fc:	2158      	movs	r1, #88	; 0x58
    20fe:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2100:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2102:	4328      	orrs	r0, r5
    2104:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2106:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2108:	203c      	movs	r0, #60	; 0x3c
    210a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    210c:	4662      	mov	r2, ip
    210e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    2110:	4339      	orrs	r1, r7
    2112:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2114:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2116:	2180      	movs	r1, #128	; 0x80
    2118:	0489      	lsls	r1, r1, #18
    211a:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    211c:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    211e:	4642      	mov	r2, r8
    2120:	629a      	str	r2, [r3, #40]	; 0x28
    2122:	4a0d      	ldr	r2, [pc, #52]	; (2158 <ETHERNET_SPI_PORT_init+0xb4>)
    2124:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2126:	2159      	movs	r1, #89	; 0x59
    2128:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    212a:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    212c:	432a      	orrs	r2, r5
    212e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2130:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2132:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2134:	394a      	subs	r1, #74	; 0x4a
    2136:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    2138:	2120      	movs	r1, #32
    213a:	430a      	orrs	r2, r1
    213c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    213e:	541a      	strb	r2, [r3, r0]
}
    2140:	bc04      	pop	{r2}
    2142:	4690      	mov	r8, r2
    2144:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2146:	46c0      	nop			; (mov r8, r8)
    2148:	41004400 	.word	0x41004400
    214c:	40020000 	.word	0x40020000
    2150:	c0020040 	.word	0xc0020040
    2154:	c0000100 	.word	0xc0000100
    2158:	c0000200 	.word	0xc0000200

0000215c <ETHERNET_SPI_CLOCK_init>:
    215c:	4a04      	ldr	r2, [pc, #16]	; (2170 <ETHERNET_SPI_CLOCK_init+0x14>)
    215e:	6a13      	ldr	r3, [r2, #32]
    2160:	2120      	movs	r1, #32
    2162:	430b      	orrs	r3, r1
    2164:	6213      	str	r3, [r2, #32]
    2166:	4a03      	ldr	r2, [pc, #12]	; (2174 <ETHERNET_SPI_CLOCK_init+0x18>)
    2168:	4b03      	ldr	r3, [pc, #12]	; (2178 <ETHERNET_SPI_CLOCK_init+0x1c>)
    216a:	805a      	strh	r2, [r3, #2]
}
    216c:	4770      	bx	lr
    216e:	46c0      	nop			; (mov r8, r8)
    2170:	40000400 	.word	0x40000400
    2174:	00004010 	.word	0x00004010
    2178:	40000c00 	.word	0x40000c00

0000217c <ETHERNET_SPI_init>:
{
    217c:	b510      	push	{r4, lr}
	ETHERNET_SPI_CLOCK_init();
    217e:	4b04      	ldr	r3, [pc, #16]	; (2190 <ETHERNET_SPI_init+0x14>)
    2180:	4798      	blx	r3
	spi_m_sync_init(&ETHERNET_SPI, SERCOM3);
    2182:	4904      	ldr	r1, [pc, #16]	; (2194 <ETHERNET_SPI_init+0x18>)
    2184:	4804      	ldr	r0, [pc, #16]	; (2198 <ETHERNET_SPI_init+0x1c>)
    2186:	4b05      	ldr	r3, [pc, #20]	; (219c <ETHERNET_SPI_init+0x20>)
    2188:	4798      	blx	r3
	ETHERNET_SPI_PORT_init();
    218a:	4b05      	ldr	r3, [pc, #20]	; (21a0 <ETHERNET_SPI_init+0x24>)
    218c:	4798      	blx	r3
}
    218e:	bd10      	pop	{r4, pc}
    2190:	0000215d 	.word	0x0000215d
    2194:	42001400 	.word	0x42001400
    2198:	20004a2c 	.word	0x20004a2c
    219c:	000027e1 	.word	0x000027e1
    21a0:	000020a5 	.word	0x000020a5

000021a4 <delay_driver_init>:
{
    21a4:	b510      	push	{r4, lr}
	delay_init(SysTick);
    21a6:	4802      	ldr	r0, [pc, #8]	; (21b0 <delay_driver_init+0xc>)
    21a8:	4b02      	ldr	r3, [pc, #8]	; (21b4 <delay_driver_init+0x10>)
    21aa:	4798      	blx	r3
}
    21ac:	bd10      	pop	{r4, pc}
    21ae:	46c0      	nop			; (mov r8, r8)
    21b0:	e000e010 	.word	0xe000e010
    21b4:	0000236d 	.word	0x0000236d

000021b8 <WDT_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
    21b8:	4a04      	ldr	r2, [pc, #16]	; (21cc <WDT_0_CLOCK_init+0x14>)
    21ba:	6993      	ldr	r3, [r2, #24]
    21bc:	2110      	movs	r1, #16
    21be:	430b      	orrs	r3, r1
    21c0:	6193      	str	r3, [r2, #24]
    21c2:	4a03      	ldr	r2, [pc, #12]	; (21d0 <WDT_0_CLOCK_init+0x18>)
    21c4:	4b03      	ldr	r3, [pc, #12]	; (21d4 <WDT_0_CLOCK_init+0x1c>)
    21c6:	805a      	strh	r2, [r3, #2]

void WDT_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, WDT);
	_gclk_enable_channel(WDT_GCLK_ID, CONF_GCLK_WDT_SRC);
}
    21c8:	4770      	bx	lr
    21ca:	46c0      	nop			; (mov r8, r8)
    21cc:	40000400 	.word	0x40000400
    21d0:	00004101 	.word	0x00004101
    21d4:	40000c00 	.word	0x40000c00

000021d8 <WDT_0_init>:

void WDT_0_init(void)
{
    21d8:	b510      	push	{r4, lr}
	WDT_0_CLOCK_init();
    21da:	4b06      	ldr	r3, [pc, #24]	; (21f4 <WDT_0_init+0x1c>)
    21dc:	4798      	blx	r3
	ASSERT(wdt && hw);
    21de:	2248      	movs	r2, #72	; 0x48
    21e0:	4905      	ldr	r1, [pc, #20]	; (21f8 <WDT_0_init+0x20>)
    21e2:	2001      	movs	r0, #1
    21e4:	4b05      	ldr	r3, [pc, #20]	; (21fc <WDT_0_init+0x24>)
    21e6:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
    21e8:	4805      	ldr	r0, [pc, #20]	; (2200 <WDT_0_init+0x28>)
    21ea:	4b06      	ldr	r3, [pc, #24]	; (2204 <WDT_0_init+0x2c>)
    21ec:	6003      	str	r3, [r0, #0]
	return _wdt_init(&wdt->dev);
    21ee:	4b06      	ldr	r3, [pc, #24]	; (2208 <WDT_0_init+0x30>)
    21f0:	4798      	blx	r3
	wdt_init(&WDT_0, WDT);
}
    21f2:	bd10      	pop	{r4, pc}
    21f4:	000021b9 	.word	0x000021b9
    21f8:	00007968 	.word	0x00007968
    21fc:	00002b65 	.word	0x00002b65
    2200:	20004a60 	.word	0x20004a60
    2204:	40001000 	.word	0x40001000
    2208:	000037cd 	.word	0x000037cd

0000220c <system_init>:

void system_init(void)
{
    220c:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    220e:	4b3d      	ldr	r3, [pc, #244]	; (2304 <system_init+0xf8>)
    2210:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2212:	22c0      	movs	r2, #192	; 0xc0
    2214:	05d2      	lsls	r2, r2, #23
    2216:	2304      	movs	r3, #4
    2218:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    221a:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    221c:	4b3a      	ldr	r3, [pc, #232]	; (2308 <system_init+0xfc>)
    221e:	493b      	ldr	r1, [pc, #236]	; (230c <system_init+0x100>)
    2220:	6299      	str	r1, [r3, #40]	; 0x28
    2222:	20c0      	movs	r0, #192	; 0xc0
    2224:	0600      	lsls	r0, r0, #24
    2226:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2228:	2542      	movs	r5, #66	; 0x42
    222a:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    222c:	2101      	movs	r1, #1
    222e:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2230:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2232:	2408      	movs	r4, #8
    2234:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2236:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2238:	4c35      	ldr	r4, [pc, #212]	; (2310 <system_init+0x104>)
    223a:	629c      	str	r4, [r3, #40]	; 0x28
    223c:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    223e:	3501      	adds	r5, #1
    2240:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2242:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2244:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2246:	2420      	movs	r4, #32
    2248:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    224a:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    224c:	4c31      	ldr	r4, [pc, #196]	; (2314 <system_init+0x108>)
    224e:	629c      	str	r4, [r3, #40]	; 0x28
    2250:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2252:	3502      	adds	r5, #2
    2254:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2256:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2258:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    225a:	2480      	movs	r4, #128	; 0x80
    225c:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    225e:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2260:	4c2d      	ldr	r4, [pc, #180]	; (2318 <system_init+0x10c>)
    2262:	629c      	str	r4, [r3, #40]	; 0x28
    2264:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2266:	3502      	adds	r5, #2
    2268:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    226a:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    226c:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    226e:	2480      	movs	r4, #128	; 0x80
    2270:	01e4      	lsls	r4, r4, #7
    2272:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2274:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2276:	4c29      	ldr	r4, [pc, #164]	; (231c <system_init+0x110>)
    2278:	629c      	str	r4, [r3, #40]	; 0x28
    227a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    227c:	3507      	adds	r5, #7
    227e:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2280:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2282:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2284:	2480      	movs	r4, #128	; 0x80
    2286:	0224      	lsls	r4, r4, #8
    2288:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    228a:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    228c:	4c24      	ldr	r4, [pc, #144]	; (2320 <system_init+0x114>)
    228e:	629c      	str	r4, [r3, #40]	; 0x28
    2290:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2292:	244f      	movs	r4, #79	; 0x4f
    2294:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2296:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2298:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    229a:	2080      	movs	r0, #128	; 0x80
    229c:	02c0      	lsls	r0, r0, #11
    229e:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    22a0:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    22a2:	2080      	movs	r0, #128	; 0x80
    22a4:	05c0      	lsls	r0, r0, #23
    22a6:	6298      	str	r0, [r3, #40]	; 0x28
    22a8:	4c1e      	ldr	r4, [pc, #120]	; (2324 <system_init+0x118>)
    22aa:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    22ac:	3504      	adds	r5, #4
    22ae:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    22b0:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    22b2:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    22b4:	2480      	movs	r4, #128	; 0x80
    22b6:	0424      	lsls	r4, r4, #16
    22b8:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    22ba:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    22bc:	6298      	str	r0, [r3, #40]	; 0x28
    22be:	4c1a      	ldr	r4, [pc, #104]	; (2328 <system_init+0x11c>)
    22c0:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    22c2:	3505      	adds	r5, #5
    22c4:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    22c6:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    22c8:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    22ca:	2480      	movs	r4, #128	; 0x80
    22cc:	0524      	lsls	r4, r4, #20
    22ce:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    22d0:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    22d2:	6298      	str	r0, [r3, #40]	; 0x28
    22d4:	4a15      	ldr	r2, [pc, #84]	; (232c <system_init+0x120>)
    22d6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    22d8:	205b      	movs	r0, #91	; 0x5b
    22da:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    22dc:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    22de:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(ETHERNET_RESET, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(ETHERNET_RESET, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
    22e0:	4b13      	ldr	r3, [pc, #76]	; (2330 <system_init+0x124>)
    22e2:	4798      	blx	r3

	FLASH_0_init();
    22e4:	4b13      	ldr	r3, [pc, #76]	; (2334 <system_init+0x128>)
    22e6:	4798      	blx	r3

	WIRELESS_SPI_init();
    22e8:	4b13      	ldr	r3, [pc, #76]	; (2338 <system_init+0x12c>)
    22ea:	4798      	blx	r3

	ETHERNET_SPI_init();
    22ec:	4b13      	ldr	r3, [pc, #76]	; (233c <system_init+0x130>)
    22ee:	4798      	blx	r3

	delay_driver_init();
    22f0:	4b13      	ldr	r3, [pc, #76]	; (2340 <system_init+0x134>)
    22f2:	4798      	blx	r3

	TIMER_0_init();
    22f4:	4b13      	ldr	r3, [pc, #76]	; (2344 <system_init+0x138>)
    22f6:	4798      	blx	r3
	TICK_TIMER_init();
    22f8:	4b13      	ldr	r3, [pc, #76]	; (2348 <system_init+0x13c>)
    22fa:	4798      	blx	r3

	WDT_0_init();
    22fc:	4b13      	ldr	r3, [pc, #76]	; (234c <system_init+0x140>)
    22fe:	4798      	blx	r3
}
    2300:	bd70      	pop	{r4, r5, r6, pc}
    2302:	46c0      	nop			; (mov r8, r8)
    2304:	00002c39 	.word	0x00002c39
    2308:	41004400 	.word	0x41004400
    230c:	40000004 	.word	0x40000004
    2310:	40000008 	.word	0x40000008
    2314:	40000020 	.word	0x40000020
    2318:	40000080 	.word	0x40000080
    231c:	40004000 	.word	0x40004000
    2320:	40008000 	.word	0x40008000
    2324:	c0000004 	.word	0xc0000004
    2328:	c0000080 	.word	0xc0000080
    232c:	c0000800 	.word	0xc0000800
    2330:	00001ea5 	.word	0x00001ea5
    2334:	00001f7d 	.word	0x00001f7d
    2338:	0000207d 	.word	0x0000207d
    233c:	0000217d 	.word	0x0000217d
    2340:	000021a5 	.word	0x000021a5
    2344:	00001e25 	.word	0x00001e25
    2348:	00001e65 	.word	0x00001e65
    234c:	000021d9 	.word	0x000021d9

00002350 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2350:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    2354:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2356:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2358:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    235c:	4770      	bx	lr

0000235e <atomic_leave_critical>:
    235e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    2362:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2364:	f383 8810 	msr	PRIMASK, r3
}
    2368:	4770      	bx	lr
	...

0000236c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    236c:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
    236e:	4b02      	ldr	r3, [pc, #8]	; (2378 <delay_init+0xc>)
    2370:	6018      	str	r0, [r3, #0]
    2372:	4b02      	ldr	r3, [pc, #8]	; (237c <delay_init+0x10>)
    2374:	4798      	blx	r3
}
    2376:	bd10      	pop	{r4, pc}
    2378:	2000083c 	.word	0x2000083c
    237c:	00003561 	.word	0x00003561

00002380 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    2380:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    2382:	4b04      	ldr	r3, [pc, #16]	; (2394 <delay_us+0x14>)
    2384:	681c      	ldr	r4, [r3, #0]
    2386:	4b04      	ldr	r3, [pc, #16]	; (2398 <delay_us+0x18>)
    2388:	4798      	blx	r3
    238a:	0001      	movs	r1, r0
    238c:	0020      	movs	r0, r4
    238e:	4b03      	ldr	r3, [pc, #12]	; (239c <delay_us+0x1c>)
    2390:	4798      	blx	r3
}
    2392:	bd10      	pop	{r4, pc}
    2394:	2000083c 	.word	0x2000083c
    2398:	00002c0d 	.word	0x00002c0d
    239c:	0000356d 	.word	0x0000356d

000023a0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    23a0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    23a2:	4b04      	ldr	r3, [pc, #16]	; (23b4 <delay_ms+0x14>)
    23a4:	681c      	ldr	r4, [r3, #0]
    23a6:	4b04      	ldr	r3, [pc, #16]	; (23b8 <delay_ms+0x18>)
    23a8:	4798      	blx	r3
    23aa:	0001      	movs	r1, r0
    23ac:	0020      	movs	r0, r4
    23ae:	4b03      	ldr	r3, [pc, #12]	; (23bc <delay_ms+0x1c>)
    23b0:	4798      	blx	r3
}
    23b2:	bd10      	pop	{r4, pc}
    23b4:	2000083c 	.word	0x2000083c
    23b8:	00002c29 	.word	0x00002c29
    23bc:	0000356d 	.word	0x0000356d

000023c0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    23c0:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    23c2:	2504      	movs	r5, #4
    23c4:	2400      	movs	r4, #0

	while (upper >= lower) {
    23c6:	e007      	b.n	23d8 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
    23c8:	4a0d      	ldr	r2, [pc, #52]	; (2400 <process_ext_irq+0x40>)
    23ca:	58b3      	ldr	r3, [r6, r2]
    23cc:	2b00      	cmp	r3, #0
    23ce:	d000      	beq.n	23d2 <process_ext_irq+0x12>
				ext_irqs[middle].cb();
    23d0:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
    23d2:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
    23d4:	3a01      	subs	r2, #1
    23d6:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
    23d8:	42ac      	cmp	r4, r5
    23da:	d8fa      	bhi.n	23d2 <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
    23dc:	192b      	adds	r3, r5, r4
    23de:	105b      	asrs	r3, r3, #1
    23e0:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
    23e2:	2a03      	cmp	r2, #3
    23e4:	d8f5      	bhi.n	23d2 <process_ext_irq+0x12>
    23e6:	21ff      	movs	r1, #255	; 0xff
    23e8:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
    23ea:	00de      	lsls	r6, r3, #3
    23ec:	4904      	ldr	r1, [pc, #16]	; (2400 <process_ext_irq+0x40>)
    23ee:	1989      	adds	r1, r1, r6
    23f0:	6849      	ldr	r1, [r1, #4]
    23f2:	4281      	cmp	r1, r0
    23f4:	d0e8      	beq.n	23c8 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
    23f6:	d2ed      	bcs.n	23d4 <process_ext_irq+0x14>
			lower = middle + 1;
    23f8:	3201      	adds	r2, #1
    23fa:	b2d4      	uxtb	r4, r2
    23fc:	e7ec      	b.n	23d8 <process_ext_irq+0x18>
    23fe:	46c0      	nop			; (mov r8, r8)
    2400:	20000840 	.word	0x20000840

00002404 <ext_irq_init>:
{
    2404:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2406:	2300      	movs	r3, #0
    2408:	e009      	b.n	241e <ext_irq_init+0x1a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    240a:	4a08      	ldr	r2, [pc, #32]	; (242c <ext_irq_init+0x28>)
    240c:	00d9      	lsls	r1, r3, #3
    240e:	1850      	adds	r0, r2, r1
    2410:	2401      	movs	r4, #1
    2412:	4264      	negs	r4, r4
    2414:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
    2416:	2000      	movs	r0, #0
    2418:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    241a:	3301      	adds	r3, #1
    241c:	b29b      	uxth	r3, r3
    241e:	2b03      	cmp	r3, #3
    2420:	d9f3      	bls.n	240a <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
    2422:	4803      	ldr	r0, [pc, #12]	; (2430 <ext_irq_init+0x2c>)
    2424:	4b03      	ldr	r3, [pc, #12]	; (2434 <ext_irq_init+0x30>)
    2426:	4798      	blx	r3
}
    2428:	bd10      	pop	{r4, pc}
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	20000840 	.word	0x20000840
    2430:	000023c1 	.word	0x000023c1
    2434:	00002c69 	.word	0x00002c69

00002438 <ext_irq_register>:
{
    2438:	b5f0      	push	{r4, r5, r6, r7, lr}
    243a:	46d6      	mov	lr, sl
    243c:	464f      	mov	r7, r9
    243e:	4646      	mov	r6, r8
    2440:	b5c0      	push	{r6, r7, lr}
    2442:	b084      	sub	sp, #16
	uint8_t i = 0, j = 0;
    2444:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2446:	2b03      	cmp	r3, #3
    2448:	d80c      	bhi.n	2464 <ext_irq_register+0x2c>
		if (ext_irqs[i].pin == pin) {
    244a:	00dc      	lsls	r4, r3, #3
    244c:	4a32      	ldr	r2, [pc, #200]	; (2518 <ext_irq_register+0xe0>)
    244e:	1912      	adds	r2, r2, r4
    2450:	6852      	ldr	r2, [r2, #4]
    2452:	4282      	cmp	r2, r0
    2454:	d002      	beq.n	245c <ext_irq_register+0x24>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2456:	3301      	adds	r3, #1
    2458:	b2db      	uxtb	r3, r3
    245a:	e7f4      	b.n	2446 <ext_irq_register+0xe>
			ext_irqs[i].cb = cb;
    245c:	4b2e      	ldr	r3, [pc, #184]	; (2518 <ext_irq_register+0xe0>)
    245e:	50e1      	str	r1, [r4, r3]
			found          = true;
    2460:	2601      	movs	r6, #1
			break;
    2462:	e000      	b.n	2466 <ext_irq_register+0x2e>
	bool    found = false;
    2464:	2600      	movs	r6, #0
	if (NULL == cb) {
    2466:	2900      	cmp	r1, #0
    2468:	d00c      	beq.n	2484 <ext_irq_register+0x4c>
	if (!found) {
    246a:	2e00      	cmp	r6, #0
    246c:	d142      	bne.n	24f4 <ext_irq_register+0xbc>
    246e:	2300      	movs	r3, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2470:	2b03      	cmp	r3, #3
    2472:	d811      	bhi.n	2498 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
    2474:	00da      	lsls	r2, r3, #3
    2476:	4d28      	ldr	r5, [pc, #160]	; (2518 <ext_irq_register+0xe0>)
    2478:	5952      	ldr	r2, [r2, r5]
    247a:	2a00      	cmp	r2, #0
    247c:	d007      	beq.n	248e <ext_irq_register+0x56>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    247e:	3301      	adds	r3, #1
    2480:	b2db      	uxtb	r3, r3
    2482:	e7f5      	b.n	2470 <ext_irq_register+0x38>
		if (!found) {
    2484:	2e00      	cmp	r6, #0
    2486:	d040      	beq.n	250a <ext_irq_register+0xd2>
		return _ext_irq_enable(pin, false);
    2488:	4b24      	ldr	r3, [pc, #144]	; (251c <ext_irq_register+0xe4>)
    248a:	4798      	blx	r3
    248c:	e037      	b.n	24fe <ext_irq_register+0xc6>
				ext_irqs[i].cb  = cb;
    248e:	00dc      	lsls	r4, r3, #3
    2490:	5161      	str	r1, [r4, r5]
				ext_irqs[i].pin = pin;
    2492:	192c      	adds	r4, r5, r4
    2494:	6060      	str	r0, [r4, #4]
				found           = true;
    2496:	2601      	movs	r6, #1
    2498:	2200      	movs	r2, #0
    249a:	e001      	b.n	24a0 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    249c:	3201      	adds	r2, #1
    249e:	b2d2      	uxtb	r2, r2
    24a0:	2a03      	cmp	r2, #3
    24a2:	d827      	bhi.n	24f4 <ext_irq_register+0xbc>
    24a4:	2b03      	cmp	r3, #3
    24a6:	d825      	bhi.n	24f4 <ext_irq_register+0xbc>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    24a8:	9301      	str	r3, [sp, #4]
    24aa:	491b      	ldr	r1, [pc, #108]	; (2518 <ext_irq_register+0xe0>)
    24ac:	00dc      	lsls	r4, r3, #3
    24ae:	190c      	adds	r4, r1, r4
    24b0:	6867      	ldr	r7, [r4, #4]
    24b2:	00d4      	lsls	r4, r2, #3
    24b4:	1909      	adds	r1, r1, r4
    24b6:	6849      	ldr	r1, [r1, #4]
    24b8:	428f      	cmp	r7, r1
    24ba:	d2ef      	bcs.n	249c <ext_irq_register+0x64>
    24bc:	1c4c      	adds	r4, r1, #1
    24be:	d0ed      	beq.n	249c <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
    24c0:	a902      	add	r1, sp, #8
    24c2:	468c      	mov	ip, r1
    24c4:	4c14      	ldr	r4, [pc, #80]	; (2518 <ext_irq_register+0xe0>)
    24c6:	46a0      	mov	r8, r4
    24c8:	00d4      	lsls	r4, r2, #3
    24ca:	46a1      	mov	r9, r4
    24cc:	4644      	mov	r4, r8
    24ce:	444c      	add	r4, r9
    24d0:	4665      	mov	r5, ip
    24d2:	cc82      	ldmia	r4!, {r1, r7}
    24d4:	c582      	stmia	r5!, {r1, r7}
				ext_irqs[j] = ext_irqs[i];
    24d6:	9901      	ldr	r1, [sp, #4]
    24d8:	00c9      	lsls	r1, r1, #3
    24da:	468a      	mov	sl, r1
    24dc:	4649      	mov	r1, r9
    24de:	4441      	add	r1, r8
    24e0:	4644      	mov	r4, r8
    24e2:	4454      	add	r4, sl
    24e4:	cca0      	ldmia	r4!, {r5, r7}
    24e6:	c1a0      	stmia	r1!, {r5, r7}
				ext_irqs[i] = tmp;
    24e8:	4645      	mov	r5, r8
    24ea:	4455      	add	r5, sl
    24ec:	4661      	mov	r1, ip
    24ee:	c990      	ldmia	r1!, {r4, r7}
    24f0:	c590      	stmia	r5!, {r4, r7}
    24f2:	e7d3      	b.n	249c <ext_irq_register+0x64>
	if (!found) {
    24f4:	2e00      	cmp	r6, #0
    24f6:	d00b      	beq.n	2510 <ext_irq_register+0xd8>
	return _ext_irq_enable(pin, true);
    24f8:	2101      	movs	r1, #1
    24fa:	4b08      	ldr	r3, [pc, #32]	; (251c <ext_irq_register+0xe4>)
    24fc:	4798      	blx	r3
}
    24fe:	b004      	add	sp, #16
    2500:	bc1c      	pop	{r2, r3, r4}
    2502:	4690      	mov	r8, r2
    2504:	4699      	mov	r9, r3
    2506:	46a2      	mov	sl, r4
    2508:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
    250a:	200d      	movs	r0, #13
    250c:	4240      	negs	r0, r0
    250e:	e7f6      	b.n	24fe <ext_irq_register+0xc6>
		return ERR_INVALID_ARG;
    2510:	200d      	movs	r0, #13
    2512:	4240      	negs	r0, r0
    2514:	e7f3      	b.n	24fe <ext_irq_register+0xc6>
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	20000840 	.word	0x20000840
    251c:	00002cf9 	.word	0x00002cf9

00002520 <ext_irq_enable>:
{
    2520:	b510      	push	{r4, lr}
	return _ext_irq_enable(pin, true);
    2522:	2101      	movs	r1, #1
    2524:	4b01      	ldr	r3, [pc, #4]	; (252c <ext_irq_enable+0xc>)
    2526:	4798      	blx	r3
}
    2528:	bd10      	pop	{r4, pc}
    252a:	46c0      	nop			; (mov r8, r8)
    252c:	00002cf9 	.word	0x00002cf9

00002530 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    2530:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    2532:	6943      	ldr	r3, [r0, #20]
    2534:	2b00      	cmp	r3, #0
    2536:	d000      	beq.n	253a <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
    2538:	4798      	blx	r3
	}
}
    253a:	bd10      	pop	{r4, pc}

0000253c <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    253c:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    253e:	6983      	ldr	r3, [r0, #24]
    2540:	2b00      	cmp	r3, #0
    2542:	d000      	beq.n	2546 <flash_error+0xa>
		descr->callbacks.cb_error(descr);
    2544:	4798      	blx	r3
	}
}
    2546:	bd10      	pop	{r4, pc}

00002548 <flash_is_address_aligned>:
{
    2548:	b570      	push	{r4, r5, r6, lr}
    254a:	0004      	movs	r4, r0
    254c:	000d      	movs	r5, r1
	ASSERT(flash);
    254e:	1e43      	subs	r3, r0, #1
    2550:	4198      	sbcs	r0, r3
    2552:	b2c0      	uxtb	r0, r0
    2554:	2218      	movs	r2, #24
    2556:	32ff      	adds	r2, #255	; 0xff
    2558:	4906      	ldr	r1, [pc, #24]	; (2574 <flash_is_address_aligned+0x2c>)
    255a:	4b07      	ldr	r3, [pc, #28]	; (2578 <flash_is_address_aligned+0x30>)
    255c:	4798      	blx	r3
	uint32_t page_size = _flash_get_page_size(&flash->dev);
    255e:	0020      	movs	r0, r4
    2560:	4b06      	ldr	r3, [pc, #24]	; (257c <flash_is_address_aligned+0x34>)
    2562:	4798      	blx	r3
	if (flash_addr & (page_size - 1)) {
    2564:	3801      	subs	r0, #1
    2566:	4205      	tst	r5, r0
    2568:	d101      	bne.n	256e <flash_is_address_aligned+0x26>
	return ERR_NONE;
    256a:	2000      	movs	r0, #0
}
    256c:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BAD_ADDRESS;
    256e:	200e      	movs	r0, #14
    2570:	4240      	negs	r0, r0
    2572:	e7fb      	b.n	256c <flash_is_address_aligned+0x24>
    2574:	00007984 	.word	0x00007984
    2578:	00002b65 	.word	0x00002b65
    257c:	00002f49 	.word	0x00002f49

00002580 <flash_init>:
{
    2580:	b570      	push	{r4, r5, r6, lr}
    2582:	0004      	movs	r4, r0
    2584:	000d      	movs	r5, r1
	ASSERT(flash && hw);
    2586:	2800      	cmp	r0, #0
    2588:	d013      	beq.n	25b2 <flash_init+0x32>
    258a:	2900      	cmp	r1, #0
    258c:	d00f      	beq.n	25ae <flash_init+0x2e>
    258e:	2001      	movs	r0, #1
    2590:	2238      	movs	r2, #56	; 0x38
    2592:	4909      	ldr	r1, [pc, #36]	; (25b8 <flash_init+0x38>)
    2594:	4b09      	ldr	r3, [pc, #36]	; (25bc <flash_init+0x3c>)
    2596:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    2598:	0029      	movs	r1, r5
    259a:	0020      	movs	r0, r4
    259c:	4b08      	ldr	r3, [pc, #32]	; (25c0 <flash_init+0x40>)
    259e:	4798      	blx	r3
	if (rc) {
    25a0:	2800      	cmp	r0, #0
    25a2:	d103      	bne.n	25ac <flash_init+0x2c>
	flash->dev.flash_cb.ready_cb = flash_ready;
    25a4:	4b07      	ldr	r3, [pc, #28]	; (25c4 <flash_init+0x44>)
    25a6:	6023      	str	r3, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    25a8:	4b07      	ldr	r3, [pc, #28]	; (25c8 <flash_init+0x48>)
    25aa:	6063      	str	r3, [r4, #4]
}
    25ac:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(flash && hw);
    25ae:	2000      	movs	r0, #0
    25b0:	e7ee      	b.n	2590 <flash_init+0x10>
    25b2:	2000      	movs	r0, #0
    25b4:	e7ec      	b.n	2590 <flash_init+0x10>
    25b6:	46c0      	nop			; (mov r8, r8)
    25b8:	00007984 	.word	0x00007984
    25bc:	00002b65 	.word	0x00002b65
    25c0:	00002ee9 	.word	0x00002ee9
    25c4:	00002531 	.word	0x00002531
    25c8:	0000253d 	.word	0x0000253d

000025cc <flash_read>:
{
    25cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    25ce:	46c6      	mov	lr, r8
    25d0:	b500      	push	{lr}
    25d2:	0004      	movs	r4, r0
    25d4:	000e      	movs	r6, r1
    25d6:	0015      	movs	r5, r2
    25d8:	001f      	movs	r7, r3
	ASSERT(flash && buffer && length);
    25da:	2800      	cmp	r0, #0
    25dc:	d020      	beq.n	2620 <flash_read+0x54>
    25de:	2a00      	cmp	r2, #0
    25e0:	d020      	beq.n	2624 <flash_read+0x58>
    25e2:	2b00      	cmp	r3, #0
    25e4:	d120      	bne.n	2628 <flash_read+0x5c>
    25e6:	2000      	movs	r0, #0
    25e8:	2256      	movs	r2, #86	; 0x56
    25ea:	4913      	ldr	r1, [pc, #76]	; (2638 <flash_read+0x6c>)
    25ec:	4b13      	ldr	r3, [pc, #76]	; (263c <flash_read+0x70>)
    25ee:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    25f0:	0020      	movs	r0, r4
    25f2:	4b13      	ldr	r3, [pc, #76]	; (2640 <flash_read+0x74>)
    25f4:	4798      	blx	r3
    25f6:	4680      	mov	r8, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    25f8:	0020      	movs	r0, r4
    25fa:	4b12      	ldr	r3, [pc, #72]	; (2644 <flash_read+0x78>)
    25fc:	4798      	blx	r3
	if ((src_addr > page_size * total_pages) || (src_addr + length > page_size * total_pages)) {
    25fe:	4643      	mov	r3, r8
    2600:	4358      	muls	r0, r3
    2602:	42b0      	cmp	r0, r6
    2604:	d312      	bcc.n	262c <flash_read+0x60>
    2606:	19bb      	adds	r3, r7, r6
    2608:	4298      	cmp	r0, r3
    260a:	d312      	bcc.n	2632 <flash_read+0x66>
	_flash_read(&flash->dev, src_addr, buffer, length);
    260c:	003b      	movs	r3, r7
    260e:	002a      	movs	r2, r5
    2610:	0031      	movs	r1, r6
    2612:	0020      	movs	r0, r4
    2614:	4c0c      	ldr	r4, [pc, #48]	; (2648 <flash_read+0x7c>)
    2616:	47a0      	blx	r4
	return ERR_NONE;
    2618:	2000      	movs	r0, #0
}
    261a:	bc04      	pop	{r2}
    261c:	4690      	mov	r8, r2
    261e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(flash && buffer && length);
    2620:	2000      	movs	r0, #0
    2622:	e7e1      	b.n	25e8 <flash_read+0x1c>
    2624:	2000      	movs	r0, #0
    2626:	e7df      	b.n	25e8 <flash_read+0x1c>
    2628:	2001      	movs	r0, #1
    262a:	e7dd      	b.n	25e8 <flash_read+0x1c>
		return ERR_BAD_ADDRESS;
    262c:	200e      	movs	r0, #14
    262e:	4240      	negs	r0, r0
    2630:	e7f3      	b.n	261a <flash_read+0x4e>
    2632:	200e      	movs	r0, #14
    2634:	4240      	negs	r0, r0
    2636:	e7f0      	b.n	261a <flash_read+0x4e>
    2638:	00007984 	.word	0x00007984
    263c:	00002b65 	.word	0x00002b65
    2640:	00002f49 	.word	0x00002f49
    2644:	00002f4d 	.word	0x00002f4d
    2648:	00002f53 	.word	0x00002f53

0000264c <flash_write>:
{
    264c:	b5f0      	push	{r4, r5, r6, r7, lr}
    264e:	46c6      	mov	lr, r8
    2650:	b500      	push	{lr}
    2652:	0004      	movs	r4, r0
    2654:	000d      	movs	r5, r1
    2656:	0016      	movs	r6, r2
    2658:	001f      	movs	r7, r3
	ASSERT(flash && buffer && length);
    265a:	2800      	cmp	r0, #0
    265c:	d026      	beq.n	26ac <flash_write+0x60>
    265e:	2a00      	cmp	r2, #0
    2660:	d026      	beq.n	26b0 <flash_write+0x64>
    2662:	2b00      	cmp	r3, #0
    2664:	d126      	bne.n	26b4 <flash_write+0x68>
    2666:	2000      	movs	r0, #0
    2668:	226a      	movs	r2, #106	; 0x6a
    266a:	4918      	ldr	r1, [pc, #96]	; (26cc <flash_write+0x80>)
    266c:	4b18      	ldr	r3, [pc, #96]	; (26d0 <flash_write+0x84>)
    266e:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    2670:	0020      	movs	r0, r4
    2672:	4b18      	ldr	r3, [pc, #96]	; (26d4 <flash_write+0x88>)
    2674:	4798      	blx	r3
    2676:	4680      	mov	r8, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    2678:	0020      	movs	r0, r4
    267a:	4b17      	ldr	r3, [pc, #92]	; (26d8 <flash_write+0x8c>)
    267c:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
    267e:	4643      	mov	r3, r8
    2680:	4358      	muls	r0, r3
    2682:	42a8      	cmp	r0, r5
    2684:	d318      	bcc.n	26b8 <flash_write+0x6c>
    2686:	197b      	adds	r3, r7, r5
    2688:	4298      	cmp	r0, r3
    268a:	d318      	bcc.n	26be <flash_write+0x72>
	if (_flash_is_locked(&flash->dev, dst_addr)) {
    268c:	0029      	movs	r1, r5
    268e:	0020      	movs	r0, r4
    2690:	4b12      	ldr	r3, [pc, #72]	; (26dc <flash_write+0x90>)
    2692:	4798      	blx	r3
    2694:	2800      	cmp	r0, #0
    2696:	d115      	bne.n	26c4 <flash_write+0x78>
	_flash_write(&flash->dev, dst_addr, buffer, length);
    2698:	003b      	movs	r3, r7
    269a:	0032      	movs	r2, r6
    269c:	0029      	movs	r1, r5
    269e:	0020      	movs	r0, r4
    26a0:	4c0f      	ldr	r4, [pc, #60]	; (26e0 <flash_write+0x94>)
    26a2:	47a0      	blx	r4
	return ERR_NONE;
    26a4:	2000      	movs	r0, #0
}
    26a6:	bc04      	pop	{r2}
    26a8:	4690      	mov	r8, r2
    26aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(flash && buffer && length);
    26ac:	2000      	movs	r0, #0
    26ae:	e7db      	b.n	2668 <flash_write+0x1c>
    26b0:	2000      	movs	r0, #0
    26b2:	e7d9      	b.n	2668 <flash_write+0x1c>
    26b4:	2001      	movs	r0, #1
    26b6:	e7d7      	b.n	2668 <flash_write+0x1c>
		return ERR_BAD_ADDRESS;
    26b8:	200e      	movs	r0, #14
    26ba:	4240      	negs	r0, r0
    26bc:	e7f3      	b.n	26a6 <flash_write+0x5a>
    26be:	200e      	movs	r0, #14
    26c0:	4240      	negs	r0, r0
    26c2:	e7f0      	b.n	26a6 <flash_write+0x5a>
		return ERR_DENIED;
    26c4:	2011      	movs	r0, #17
    26c6:	4240      	negs	r0, r0
    26c8:	e7ed      	b.n	26a6 <flash_write+0x5a>
    26ca:	46c0      	nop			; (mov r8, r8)
    26cc:	00007984 	.word	0x00007984
    26d0:	00002b65 	.word	0x00002b65
    26d4:	00002f49 	.word	0x00002f49
    26d8:	00002f4d 	.word	0x00002f4d
    26dc:	00003121 	.word	0x00003121
    26e0:	00002fa1 	.word	0x00002fa1

000026e4 <flash_erase>:
{
    26e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    26e6:	b083      	sub	sp, #12
    26e8:	0004      	movs	r4, r0
    26ea:	9100      	str	r1, [sp, #0]
    26ec:	0017      	movs	r7, r2
	ASSERT(flash && page_nums);
    26ee:	2800      	cmp	r0, #0
    26f0:	d025      	beq.n	273e <flash_erase+0x5a>
    26f2:	2a00      	cmp	r2, #0
    26f4:	d125      	bne.n	2742 <flash_erase+0x5e>
    26f6:	2000      	movs	r0, #0
    26f8:	229a      	movs	r2, #154	; 0x9a
    26fa:	4916      	ldr	r1, [pc, #88]	; (2754 <flash_erase+0x70>)
    26fc:	4b16      	ldr	r3, [pc, #88]	; (2758 <flash_erase+0x74>)
    26fe:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    2700:	0020      	movs	r0, r4
    2702:	4b16      	ldr	r3, [pc, #88]	; (275c <flash_erase+0x78>)
    2704:	4798      	blx	r3
    2706:	9001      	str	r0, [sp, #4]
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    2708:	0020      	movs	r0, r4
    270a:	4b15      	ldr	r3, [pc, #84]	; (2760 <flash_erase+0x7c>)
    270c:	4798      	blx	r3
    270e:	0005      	movs	r5, r0
	rc = flash_is_address_aligned(flash, dst_addr);
    2710:	9900      	ldr	r1, [sp, #0]
    2712:	0020      	movs	r0, r4
    2714:	4b13      	ldr	r3, [pc, #76]	; (2764 <flash_erase+0x80>)
    2716:	4798      	blx	r3
    2718:	1e06      	subs	r6, r0, #0
	if (rc) {
    271a:	d10d      	bne.n	2738 <flash_erase+0x54>
	if ((page_nums > total_pages) || (dst_addr / page_size + page_nums > total_pages)) {
    271c:	42af      	cmp	r7, r5
    271e:	d812      	bhi.n	2746 <flash_erase+0x62>
    2720:	9901      	ldr	r1, [sp, #4]
    2722:	9800      	ldr	r0, [sp, #0]
    2724:	4b10      	ldr	r3, [pc, #64]	; (2768 <flash_erase+0x84>)
    2726:	4798      	blx	r3
    2728:	1838      	adds	r0, r7, r0
    272a:	4285      	cmp	r5, r0
    272c:	d30e      	bcc.n	274c <flash_erase+0x68>
	_flash_erase(&flash->dev, dst_addr, page_nums);
    272e:	003a      	movs	r2, r7
    2730:	9900      	ldr	r1, [sp, #0]
    2732:	0020      	movs	r0, r4
    2734:	4b0d      	ldr	r3, [pc, #52]	; (276c <flash_erase+0x88>)
    2736:	4798      	blx	r3
}
    2738:	0030      	movs	r0, r6
    273a:	b003      	add	sp, #12
    273c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(flash && page_nums);
    273e:	2000      	movs	r0, #0
    2740:	e7da      	b.n	26f8 <flash_erase+0x14>
    2742:	2001      	movs	r0, #1
    2744:	e7d8      	b.n	26f8 <flash_erase+0x14>
		return ERR_INVALID_ARG;
    2746:	260d      	movs	r6, #13
    2748:	4276      	negs	r6, r6
    274a:	e7f5      	b.n	2738 <flash_erase+0x54>
    274c:	260d      	movs	r6, #13
    274e:	4276      	negs	r6, r6
    2750:	e7f2      	b.n	2738 <flash_erase+0x54>
    2752:	46c0      	nop			; (mov r8, r8)
    2754:	00007984 	.word	0x00007984
    2758:	00002b65 	.word	0x00002b65
    275c:	00002f49 	.word	0x00002f49
    2760:	00002f4d 	.word	0x00002f4d
    2764:	00002549 	.word	0x00002549
    2768:	000063c1 	.word	0x000063c1
    276c:	00003079 	.word	0x00003079

00002770 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    2770:	b570      	push	{r4, r5, r6, lr}
    2772:	0004      	movs	r4, r0
    2774:	000d      	movs	r5, r1
    2776:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    2778:	2800      	cmp	r0, #0
    277a:	d00e      	beq.n	279a <io_write+0x2a>
    277c:	2900      	cmp	r1, #0
    277e:	d00a      	beq.n	2796 <io_write+0x26>
    2780:	2001      	movs	r0, #1
    2782:	2234      	movs	r2, #52	; 0x34
    2784:	4906      	ldr	r1, [pc, #24]	; (27a0 <io_write+0x30>)
    2786:	4b07      	ldr	r3, [pc, #28]	; (27a4 <io_write+0x34>)
    2788:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    278a:	6823      	ldr	r3, [r4, #0]
    278c:	0032      	movs	r2, r6
    278e:	0029      	movs	r1, r5
    2790:	0020      	movs	r0, r4
    2792:	4798      	blx	r3
}
    2794:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    2796:	2000      	movs	r0, #0
    2798:	e7f3      	b.n	2782 <io_write+0x12>
    279a:	2000      	movs	r0, #0
    279c:	e7f1      	b.n	2782 <io_write+0x12>
    279e:	46c0      	nop			; (mov r8, r8)
    27a0:	0000799c 	.word	0x0000799c
    27a4:	00002b65 	.word	0x00002b65

000027a8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    27a8:	b570      	push	{r4, r5, r6, lr}
    27aa:	0004      	movs	r4, r0
    27ac:	000d      	movs	r5, r1
    27ae:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    27b0:	2800      	cmp	r0, #0
    27b2:	d00e      	beq.n	27d2 <io_read+0x2a>
    27b4:	2900      	cmp	r1, #0
    27b6:	d00a      	beq.n	27ce <io_read+0x26>
    27b8:	2001      	movs	r0, #1
    27ba:	223d      	movs	r2, #61	; 0x3d
    27bc:	4906      	ldr	r1, [pc, #24]	; (27d8 <io_read+0x30>)
    27be:	4b07      	ldr	r3, [pc, #28]	; (27dc <io_read+0x34>)
    27c0:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    27c2:	6863      	ldr	r3, [r4, #4]
    27c4:	0032      	movs	r2, r6
    27c6:	0029      	movs	r1, r5
    27c8:	0020      	movs	r0, r4
    27ca:	4798      	blx	r3
}
    27cc:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    27ce:	2000      	movs	r0, #0
    27d0:	e7f3      	b.n	27ba <io_read+0x12>
    27d2:	2000      	movs	r0, #0
    27d4:	e7f1      	b.n	27ba <io_read+0x12>
    27d6:	46c0      	nop			; (mov r8, r8)
    27d8:	0000799c 	.word	0x0000799c
    27dc:	00002b65 	.word	0x00002b65

000027e0 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    27e0:	b570      	push	{r4, r5, r6, lr}
    27e2:	0004      	movs	r4, r0
    27e4:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    27e6:	2800      	cmp	r0, #0
    27e8:	d017      	beq.n	281a <spi_m_sync_init+0x3a>
    27ea:	2900      	cmp	r1, #0
    27ec:	d013      	beq.n	2816 <spi_m_sync_init+0x36>
    27ee:	2001      	movs	r0, #1
    27f0:	2240      	movs	r2, #64	; 0x40
    27f2:	490b      	ldr	r1, [pc, #44]	; (2820 <spi_m_sync_init+0x40>)
    27f4:	4b0b      	ldr	r3, [pc, #44]	; (2824 <spi_m_sync_init+0x44>)
    27f6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    27f8:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    27fa:	1d20      	adds	r0, r4, #4
    27fc:	0029      	movs	r1, r5
    27fe:	4b0a      	ldr	r3, [pc, #40]	; (2828 <spi_m_sync_init+0x48>)
    2800:	4798      	blx	r3

	if (rc < 0) {
    2802:	2800      	cmp	r0, #0
    2804:	db06      	blt.n	2814 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    2806:	4b09      	ldr	r3, [pc, #36]	; (282c <spi_m_sync_init+0x4c>)
    2808:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    280a:	4b09      	ldr	r3, [pc, #36]	; (2830 <spi_m_sync_init+0x50>)
    280c:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    280e:	4b09      	ldr	r3, [pc, #36]	; (2834 <spi_m_sync_init+0x54>)
    2810:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    2812:	2000      	movs	r0, #0
}
    2814:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
    2816:	2000      	movs	r0, #0
    2818:	e7ea      	b.n	27f0 <spi_m_sync_init+0x10>
    281a:	2000      	movs	r0, #0
    281c:	e7e8      	b.n	27f0 <spi_m_sync_init+0x10>
    281e:	46c0      	nop			; (mov r8, r8)
    2820:	000079b0 	.word	0x000079b0
    2824:	00002b65 	.word	0x00002b65
    2828:	000031d5 	.word	0x000031d5
    282c:	ffff8000 	.word	0xffff8000
    2830:	0000290d 	.word	0x0000290d
    2834:	000028d1 	.word	0x000028d1

00002838 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    2838:	b510      	push	{r4, lr}
    283a:	0004      	movs	r4, r0
	ASSERT(spi);
    283c:	1e43      	subs	r3, r0, #1
    283e:	4198      	sbcs	r0, r3
    2840:	b2c0      	uxtb	r0, r0
    2842:	2257      	movs	r2, #87	; 0x57
    2844:	4903      	ldr	r1, [pc, #12]	; (2854 <spi_m_sync_enable+0x1c>)
    2846:	4b04      	ldr	r3, [pc, #16]	; (2858 <spi_m_sync_enable+0x20>)
    2848:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    284a:	1d20      	adds	r0, r4, #4
    284c:	4b03      	ldr	r3, [pc, #12]	; (285c <spi_m_sync_enable+0x24>)
    284e:	4798      	blx	r3
}
    2850:	bd10      	pop	{r4, pc}
    2852:	46c0      	nop			; (mov r8, r8)
    2854:	000079b0 	.word	0x000079b0
    2858:	00002b65 	.word	0x00002b65
    285c:	00003395 	.word	0x00003395

00002860 <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    2860:	b510      	push	{r4, lr}
    2862:	0004      	movs	r4, r0
	ASSERT(spi);
    2864:	1e43      	subs	r3, r0, #1
    2866:	4198      	sbcs	r0, r3
    2868:	b2c0      	uxtb	r0, r0
    286a:	225d      	movs	r2, #93	; 0x5d
    286c:	4903      	ldr	r1, [pc, #12]	; (287c <spi_m_sync_disable+0x1c>)
    286e:	4b04      	ldr	r3, [pc, #16]	; (2880 <spi_m_sync_disable+0x20>)
    2870:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    2872:	1d20      	adds	r0, r4, #4
    2874:	4b03      	ldr	r3, [pc, #12]	; (2884 <spi_m_sync_disable+0x24>)
    2876:	4798      	blx	r3
}
    2878:	bd10      	pop	{r4, pc}
    287a:	46c0      	nop			; (mov r8, r8)
    287c:	000079b0 	.word	0x000079b0
    2880:	00002b65 	.word	0x00002b65
    2884:	000033cd 	.word	0x000033cd

00002888 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2888:	b530      	push	{r4, r5, lr}
    288a:	b087      	sub	sp, #28
    288c:	0004      	movs	r4, r0
    288e:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2890:	2800      	cmp	r0, #0
    2892:	d015      	beq.n	28c0 <spi_m_sync_transfer+0x38>
    2894:	2900      	cmp	r1, #0
    2896:	d011      	beq.n	28bc <spi_m_sync_transfer+0x34>
    2898:	2001      	movs	r0, #1
    289a:	22b3      	movs	r2, #179	; 0xb3
    289c:	4909      	ldr	r1, [pc, #36]	; (28c4 <spi_m_sync_transfer+0x3c>)
    289e:	4b0a      	ldr	r3, [pc, #40]	; (28c8 <spi_m_sync_transfer+0x40>)
    28a0:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    28a2:	682b      	ldr	r3, [r5, #0]
    28a4:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    28a6:	686b      	ldr	r3, [r5, #4]
    28a8:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    28aa:	68ab      	ldr	r3, [r5, #8]
    28ac:	9301      	str	r3, [sp, #4]
    28ae:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    28b0:	1d20      	adds	r0, r4, #4
    28b2:	a903      	add	r1, sp, #12
    28b4:	4b05      	ldr	r3, [pc, #20]	; (28cc <spi_m_sync_transfer+0x44>)
    28b6:	4798      	blx	r3
}
    28b8:	b007      	add	sp, #28
    28ba:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
    28bc:	2000      	movs	r0, #0
    28be:	e7ec      	b.n	289a <spi_m_sync_transfer+0x12>
    28c0:	2000      	movs	r0, #0
    28c2:	e7ea      	b.n	289a <spi_m_sync_transfer+0x12>
    28c4:	000079b0 	.word	0x000079b0
    28c8:	00002b65 	.word	0x00002b65
    28cc:	00003405 	.word	0x00003405

000028d0 <_spi_m_sync_io_write>:
{
    28d0:	b570      	push	{r4, r5, r6, lr}
    28d2:	b084      	sub	sp, #16
    28d4:	0004      	movs	r4, r0
    28d6:	000e      	movs	r6, r1
    28d8:	0015      	movs	r5, r2
	ASSERT(io);
    28da:	1e43      	subs	r3, r0, #1
    28dc:	4198      	sbcs	r0, r3
    28de:	b2c0      	uxtb	r0, r0
    28e0:	22a3      	movs	r2, #163	; 0xa3
    28e2:	4907      	ldr	r1, [pc, #28]	; (2900 <_spi_m_sync_io_write+0x30>)
    28e4:	4b07      	ldr	r3, [pc, #28]	; (2904 <_spi_m_sync_io_write+0x34>)
    28e6:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    28e8:	0020      	movs	r0, r4
    28ea:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
    28ec:	2300      	movs	r3, #0
    28ee:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    28f0:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    28f2:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    28f4:	a901      	add	r1, sp, #4
    28f6:	4b04      	ldr	r3, [pc, #16]	; (2908 <_spi_m_sync_io_write+0x38>)
    28f8:	4798      	blx	r3
}
    28fa:	b004      	add	sp, #16
    28fc:	bd70      	pop	{r4, r5, r6, pc}
    28fe:	46c0      	nop			; (mov r8, r8)
    2900:	000079b0 	.word	0x000079b0
    2904:	00002b65 	.word	0x00002b65
    2908:	00002889 	.word	0x00002889

0000290c <_spi_m_sync_io_read>:
{
    290c:	b570      	push	{r4, r5, r6, lr}
    290e:	b084      	sub	sp, #16
    2910:	0004      	movs	r4, r0
    2912:	000e      	movs	r6, r1
    2914:	0015      	movs	r5, r2
	ASSERT(io);
    2916:	1e43      	subs	r3, r0, #1
    2918:	4198      	sbcs	r0, r3
    291a:	b2c0      	uxtb	r0, r0
    291c:	2287      	movs	r2, #135	; 0x87
    291e:	4907      	ldr	r1, [pc, #28]	; (293c <_spi_m_sync_io_read+0x30>)
    2920:	4b07      	ldr	r3, [pc, #28]	; (2940 <_spi_m_sync_io_read+0x34>)
    2922:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2924:	0020      	movs	r0, r4
    2926:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
    2928:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    292a:	2300      	movs	r3, #0
    292c:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    292e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    2930:	a901      	add	r1, sp, #4
    2932:	4b04      	ldr	r3, [pc, #16]	; (2944 <_spi_m_sync_io_read+0x38>)
    2934:	4798      	blx	r3
}
    2936:	b004      	add	sp, #16
    2938:	bd70      	pop	{r4, r5, r6, pc}
    293a:	46c0      	nop			; (mov r8, r8)
    293c:	000079b0 	.word	0x000079b0
    2940:	00002b65 	.word	0x00002b65
    2944:	00002889 	.word	0x00002889

00002948 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    2948:	b570      	push	{r4, r5, r6, lr}
    294a:	0004      	movs	r4, r0
    294c:	000d      	movs	r5, r1
	ASSERT(spi && io);
    294e:	2800      	cmp	r0, #0
    2950:	d00c      	beq.n	296c <spi_m_sync_get_io_descriptor+0x24>
    2952:	2900      	cmp	r1, #0
    2954:	d008      	beq.n	2968 <spi_m_sync_get_io_descriptor+0x20>
    2956:	2001      	movs	r0, #1
    2958:	22bd      	movs	r2, #189	; 0xbd
    295a:	4905      	ldr	r1, [pc, #20]	; (2970 <spi_m_sync_get_io_descriptor+0x28>)
    295c:	4b05      	ldr	r3, [pc, #20]	; (2974 <spi_m_sync_get_io_descriptor+0x2c>)
    295e:	4798      	blx	r3
	*io = &spi->io;
    2960:	340c      	adds	r4, #12
    2962:	602c      	str	r4, [r5, #0]
	return 0;
}
    2964:	2000      	movs	r0, #0
    2966:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && io);
    2968:	2000      	movs	r0, #0
    296a:	e7f5      	b.n	2958 <spi_m_sync_get_io_descriptor+0x10>
    296c:	2000      	movs	r0, #0
    296e:	e7f3      	b.n	2958 <spi_m_sync_get_io_descriptor+0x10>
    2970:	000079b0 	.word	0x000079b0
    2974:	00002b65 	.word	0x00002b65

00002978 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    297a:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    297c:	2e00      	cmp	r6, #0
    297e:	d002      	beq.n	2986 <timer_add_timer_task+0xe>
    2980:	0033      	movs	r3, r6
    2982:	2500      	movs	r5, #0
    2984:	e00c      	b.n	29a0 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    2986:	4b10      	ldr	r3, [pc, #64]	; (29c8 <timer_add_timer_task+0x50>)
    2988:	4798      	blx	r3
		return;
    298a:	e018      	b.n	29be <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    298c:	689f      	ldr	r7, [r3, #8]
    298e:	46bc      	mov	ip, r7
    2990:	4464      	add	r4, ip
    2992:	1aa4      	subs	r4, r4, r2
    2994:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
    2996:	688f      	ldr	r7, [r1, #8]
    2998:	42bc      	cmp	r4, r7
    299a:	d20b      	bcs.n	29b4 <timer_add_timer_task+0x3c>
			break;
		prev = it;
    299c:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    299e:	681b      	ldr	r3, [r3, #0]
    29a0:	2b00      	cmp	r3, #0
    29a2:	d007      	beq.n	29b4 <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
    29a4:	685c      	ldr	r4, [r3, #4]
    29a6:	4294      	cmp	r4, r2
    29a8:	d8f0      	bhi.n	298c <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
    29aa:	1aa4      	subs	r4, r4, r2
    29ac:	689f      	ldr	r7, [r3, #8]
    29ae:	46bc      	mov	ip, r7
    29b0:	4464      	add	r4, ip
    29b2:	e7f0      	b.n	2996 <timer_add_timer_task+0x1e>
	}

	if (it == head) {
    29b4:	42b3      	cmp	r3, r6
    29b6:	d003      	beq.n	29c0 <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    29b8:	0028      	movs	r0, r5
    29ba:	4b04      	ldr	r3, [pc, #16]	; (29cc <timer_add_timer_task+0x54>)
    29bc:	4798      	blx	r3
	}
}
    29be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    29c0:	4b01      	ldr	r3, [pc, #4]	; (29c8 <timer_add_timer_task+0x50>)
    29c2:	4798      	blx	r3
    29c4:	e7fb      	b.n	29be <timer_add_timer_task+0x46>
    29c6:	46c0      	nop			; (mov r8, r8)
    29c8:	00002b85 	.word	0x00002b85
    29cc:	00002bb1 	.word	0x00002bb1

000029d0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    29d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29d2:	0005      	movs	r5, r0
    29d4:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    29d6:	6903      	ldr	r3, [r0, #16]
    29d8:	1c5e      	adds	r6, r3, #1
    29da:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    29dc:	7e03      	ldrb	r3, [r0, #24]
    29de:	07db      	lsls	r3, r3, #31
    29e0:	d402      	bmi.n	29e8 <timer_process_counted+0x18>
    29e2:	7e03      	ldrb	r3, [r0, #24]
    29e4:	079b      	lsls	r3, r3, #30
    29e6:	d50a      	bpl.n	29fe <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    29e8:	7e2b      	ldrb	r3, [r5, #24]
    29ea:	2202      	movs	r2, #2
    29ec:	4313      	orrs	r3, r2
    29ee:	b2db      	uxtb	r3, r3
    29f0:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
    29f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    29f4:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
    29f6:	68e3      	ldr	r3, [r4, #12]
    29f8:	0020      	movs	r0, r4
    29fa:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    29fc:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
    29fe:	2c00      	cmp	r4, #0
    2a00:	d0f7      	beq.n	29f2 <timer_process_counted+0x22>
    2a02:	6863      	ldr	r3, [r4, #4]
    2a04:	1af3      	subs	r3, r6, r3
    2a06:	68a2      	ldr	r2, [r4, #8]
    2a08:	4293      	cmp	r3, r2
    2a0a:	d3f2      	bcc.n	29f2 <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
    2a0c:	002f      	movs	r7, r5
    2a0e:	3714      	adds	r7, #20
    2a10:	0038      	movs	r0, r7
    2a12:	4b06      	ldr	r3, [pc, #24]	; (2a2c <timer_process_counted+0x5c>)
    2a14:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2a16:	7c23      	ldrb	r3, [r4, #16]
    2a18:	2b01      	cmp	r3, #1
    2a1a:	d1eb      	bne.n	29f4 <timer_process_counted+0x24>
			tmp->time_label = time;
    2a1c:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2a1e:	0032      	movs	r2, r6
    2a20:	0021      	movs	r1, r4
    2a22:	0038      	movs	r0, r7
    2a24:	4b02      	ldr	r3, [pc, #8]	; (2a30 <timer_process_counted+0x60>)
    2a26:	4798      	blx	r3
    2a28:	e7e4      	b.n	29f4 <timer_process_counted+0x24>
    2a2a:	46c0      	nop			; (mov r8, r8)
    2a2c:	00002bb9 	.word	0x00002bb9
    2a30:	00002979 	.word	0x00002979

00002a34 <timer_init>:
{
    2a34:	b570      	push	{r4, r5, r6, lr}
    2a36:	0004      	movs	r4, r0
    2a38:	000d      	movs	r5, r1
	ASSERT(descr && hw);
    2a3a:	2800      	cmp	r0, #0
    2a3c:	d012      	beq.n	2a64 <timer_init+0x30>
    2a3e:	2900      	cmp	r1, #0
    2a40:	d00e      	beq.n	2a60 <timer_init+0x2c>
    2a42:	2001      	movs	r0, #1
    2a44:	223b      	movs	r2, #59	; 0x3b
    2a46:	4908      	ldr	r1, [pc, #32]	; (2a68 <timer_init+0x34>)
    2a48:	4b08      	ldr	r3, [pc, #32]	; (2a6c <timer_init+0x38>)
    2a4a:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    2a4c:	0029      	movs	r1, r5
    2a4e:	0020      	movs	r0, r4
    2a50:	4b07      	ldr	r3, [pc, #28]	; (2a70 <timer_init+0x3c>)
    2a52:	4798      	blx	r3
	descr->time                           = 0;
    2a54:	2300      	movs	r3, #0
    2a56:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2a58:	4b06      	ldr	r3, [pc, #24]	; (2a74 <timer_init+0x40>)
    2a5a:	6023      	str	r3, [r4, #0]
}
    2a5c:	2000      	movs	r0, #0
    2a5e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
    2a60:	2000      	movs	r0, #0
    2a62:	e7ef      	b.n	2a44 <timer_init+0x10>
    2a64:	2000      	movs	r0, #0
    2a66:	e7ed      	b.n	2a44 <timer_init+0x10>
    2a68:	000079cc 	.word	0x000079cc
    2a6c:	00002b65 	.word	0x00002b65
    2a70:	00003645 	.word	0x00003645
    2a74:	000029d1 	.word	0x000029d1

00002a78 <timer_start>:
{
    2a78:	b510      	push	{r4, lr}
    2a7a:	0004      	movs	r4, r0
	ASSERT(descr);
    2a7c:	1e43      	subs	r3, r0, #1
    2a7e:	4198      	sbcs	r0, r3
    2a80:	b2c0      	uxtb	r0, r0
    2a82:	2253      	movs	r2, #83	; 0x53
    2a84:	4907      	ldr	r1, [pc, #28]	; (2aa4 <timer_start+0x2c>)
    2a86:	4b08      	ldr	r3, [pc, #32]	; (2aa8 <timer_start+0x30>)
    2a88:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    2a8a:	0020      	movs	r0, r4
    2a8c:	4b07      	ldr	r3, [pc, #28]	; (2aac <timer_start+0x34>)
    2a8e:	4798      	blx	r3
    2a90:	2800      	cmp	r0, #0
    2a92:	d104      	bne.n	2a9e <timer_start+0x26>
	_timer_start(&descr->device);
    2a94:	0020      	movs	r0, r4
    2a96:	4b06      	ldr	r3, [pc, #24]	; (2ab0 <timer_start+0x38>)
    2a98:	4798      	blx	r3
	return ERR_NONE;
    2a9a:	2000      	movs	r0, #0
}
    2a9c:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2a9e:	2011      	movs	r0, #17
    2aa0:	4240      	negs	r0, r0
    2aa2:	e7fb      	b.n	2a9c <timer_start+0x24>
    2aa4:	000079cc 	.word	0x000079cc
    2aa8:	00002b65 	.word	0x00002b65
    2aac:	00003777 	.word	0x00003777
    2ab0:	00003769 	.word	0x00003769

00002ab4 <timer_add_task>:
{
    2ab4:	b570      	push	{r4, r5, r6, lr}
    2ab6:	b082      	sub	sp, #8
    2ab8:	0004      	movs	r4, r0
    2aba:	000d      	movs	r5, r1
	ASSERT(descr && task);
    2abc:	2800      	cmp	r0, #0
    2abe:	d026      	beq.n	2b0e <timer_add_task+0x5a>
    2ac0:	2900      	cmp	r1, #0
    2ac2:	d022      	beq.n	2b0a <timer_add_task+0x56>
    2ac4:	2001      	movs	r0, #1
    2ac6:	227a      	movs	r2, #122	; 0x7a
    2ac8:	491f      	ldr	r1, [pc, #124]	; (2b48 <timer_add_task+0x94>)
    2aca:	4b20      	ldr	r3, [pc, #128]	; (2b4c <timer_add_task+0x98>)
    2acc:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2ace:	7e23      	ldrb	r3, [r4, #24]
    2ad0:	2201      	movs	r2, #1
    2ad2:	4313      	orrs	r3, r2
    2ad4:	b2db      	uxtb	r3, r3
    2ad6:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    2ad8:	0026      	movs	r6, r4
    2ada:	3614      	adds	r6, #20
    2adc:	0029      	movs	r1, r5
    2ade:	0030      	movs	r0, r6
    2ae0:	4b1b      	ldr	r3, [pc, #108]	; (2b50 <timer_add_task+0x9c>)
    2ae2:	4798      	blx	r3
    2ae4:	2800      	cmp	r0, #0
    2ae6:	d114      	bne.n	2b12 <timer_add_task+0x5e>
	task->time_label = descr->time;
    2ae8:	6923      	ldr	r3, [r4, #16]
    2aea:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2aec:	6922      	ldr	r2, [r4, #16]
    2aee:	0029      	movs	r1, r5
    2af0:	0030      	movs	r0, r6
    2af2:	4b18      	ldr	r3, [pc, #96]	; (2b54 <timer_add_task+0xa0>)
    2af4:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2af6:	7e23      	ldrb	r3, [r4, #24]
    2af8:	2201      	movs	r2, #1
    2afa:	4393      	bics	r3, r2
    2afc:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2afe:	7e23      	ldrb	r3, [r4, #24]
    2b00:	079b      	lsls	r3, r3, #30
    2b02:	d412      	bmi.n	2b2a <timer_add_task+0x76>
	return ERR_NONE;
    2b04:	2000      	movs	r0, #0
}
    2b06:	b002      	add	sp, #8
    2b08:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    2b0a:	2000      	movs	r0, #0
    2b0c:	e7db      	b.n	2ac6 <timer_add_task+0x12>
    2b0e:	2000      	movs	r0, #0
    2b10:	e7d9      	b.n	2ac6 <timer_add_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2b12:	7e23      	ldrb	r3, [r4, #24]
    2b14:	2201      	movs	r2, #1
    2b16:	4393      	bics	r3, r2
    2b18:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    2b1a:	327e      	adds	r2, #126	; 0x7e
    2b1c:	490a      	ldr	r1, [pc, #40]	; (2b48 <timer_add_task+0x94>)
    2b1e:	2000      	movs	r0, #0
    2b20:	4b0a      	ldr	r3, [pc, #40]	; (2b4c <timer_add_task+0x98>)
    2b22:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2b24:	2012      	movs	r0, #18
    2b26:	4240      	negs	r0, r0
    2b28:	e7ed      	b.n	2b06 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    2b2a:	a801      	add	r0, sp, #4
    2b2c:	4b0a      	ldr	r3, [pc, #40]	; (2b58 <timer_add_task+0xa4>)
    2b2e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2b30:	7e23      	ldrb	r3, [r4, #24]
    2b32:	2202      	movs	r2, #2
    2b34:	4393      	bics	r3, r2
    2b36:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    2b38:	0020      	movs	r0, r4
    2b3a:	4b08      	ldr	r3, [pc, #32]	; (2b5c <timer_add_task+0xa8>)
    2b3c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2b3e:	a801      	add	r0, sp, #4
    2b40:	4b07      	ldr	r3, [pc, #28]	; (2b60 <timer_add_task+0xac>)
    2b42:	4798      	blx	r3
	return ERR_NONE;
    2b44:	2000      	movs	r0, #0
    2b46:	e7de      	b.n	2b06 <timer_add_task+0x52>
    2b48:	000079cc 	.word	0x000079cc
    2b4c:	00002b65 	.word	0x00002b65
    2b50:	00002b6d 	.word	0x00002b6d
    2b54:	00002979 	.word	0x00002979
    2b58:	00002351 	.word	0x00002351
    2b5c:	00003789 	.word	0x00003789
    2b60:	0000235f 	.word	0x0000235f

00002b64 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    2b64:	2800      	cmp	r0, #0
    2b66:	d100      	bne.n	2b6a <assert+0x6>
		__asm("BKPT #0");
    2b68:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    2b6a:	4770      	bx	lr

00002b6c <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    2b6c:	6803      	ldr	r3, [r0, #0]
    2b6e:	2b00      	cmp	r3, #0
    2b70:	d003      	beq.n	2b7a <is_list_element+0xe>
		if (it == element) {
    2b72:	428b      	cmp	r3, r1
    2b74:	d003      	beq.n	2b7e <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
    2b76:	681b      	ldr	r3, [r3, #0]
    2b78:	e7f9      	b.n	2b6e <is_list_element+0x2>
			return true;
		}
	}

	return false;
    2b7a:	2000      	movs	r0, #0
}
    2b7c:	4770      	bx	lr
			return true;
    2b7e:	2001      	movs	r0, #1
    2b80:	e7fc      	b.n	2b7c <is_list_element+0x10>
	...

00002b84 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    2b84:	b570      	push	{r4, r5, r6, lr}
    2b86:	0004      	movs	r4, r0
    2b88:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    2b8a:	4b06      	ldr	r3, [pc, #24]	; (2ba4 <list_insert_as_head+0x20>)
    2b8c:	4798      	blx	r3
    2b8e:	2301      	movs	r3, #1
    2b90:	4058      	eors	r0, r3
    2b92:	b2c0      	uxtb	r0, r0
    2b94:	2239      	movs	r2, #57	; 0x39
    2b96:	4904      	ldr	r1, [pc, #16]	; (2ba8 <list_insert_as_head+0x24>)
    2b98:	4b04      	ldr	r3, [pc, #16]	; (2bac <list_insert_as_head+0x28>)
    2b9a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2b9c:	6823      	ldr	r3, [r4, #0]
    2b9e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    2ba0:	6025      	str	r5, [r4, #0]
}
    2ba2:	bd70      	pop	{r4, r5, r6, pc}
    2ba4:	00002b6d 	.word	0x00002b6d
    2ba8:	000079e4 	.word	0x000079e4
    2bac:	00002b65 	.word	0x00002b65

00002bb0 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2bb0:	6803      	ldr	r3, [r0, #0]
    2bb2:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2bb4:	6001      	str	r1, [r0, #0]
}
    2bb6:	4770      	bx	lr

00002bb8 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    2bb8:	6803      	ldr	r3, [r0, #0]
    2bba:	2b00      	cmp	r3, #0
    2bbc:	d003      	beq.n	2bc6 <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    2bbe:	681a      	ldr	r2, [r3, #0]
    2bc0:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    2bc2:	0018      	movs	r0, r3
	}

	return NULL;
}
    2bc4:	4770      	bx	lr
	return NULL;
    2bc6:	2000      	movs	r0, #0
    2bc8:	e7fc      	b.n	2bc4 <list_remove_head+0xc>
	...

00002bcc <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    2bcc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    2bce:	4a06      	ldr	r2, [pc, #24]	; (2be8 <_sbrk+0x1c>)
    2bd0:	6812      	ldr	r2, [r2, #0]
    2bd2:	2a00      	cmp	r2, #0
    2bd4:	d004      	beq.n	2be0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2bd6:	4a04      	ldr	r2, [pc, #16]	; (2be8 <_sbrk+0x1c>)
    2bd8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2bda:	18c3      	adds	r3, r0, r3
    2bdc:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    2bde:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2be0:	4902      	ldr	r1, [pc, #8]	; (2bec <_sbrk+0x20>)
    2be2:	4a01      	ldr	r2, [pc, #4]	; (2be8 <_sbrk+0x1c>)
    2be4:	6011      	str	r1, [r2, #0]
    2be6:	e7f6      	b.n	2bd6 <_sbrk+0xa>
    2be8:	20000860 	.word	0x20000860
    2bec:	20006b80 	.word	0x20006b80

00002bf0 <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
    2bf0:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2bf2:	2b00      	cmp	r3, #0
    2bf4:	db07      	blt.n	2c06 <_irq_set+0x16>
  {
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2bf6:	231f      	movs	r3, #31
    2bf8:	4018      	ands	r0, r3
    2bfa:	3b1e      	subs	r3, #30
    2bfc:	4083      	lsls	r3, r0
    2bfe:	2280      	movs	r2, #128	; 0x80
    2c00:	0052      	lsls	r2, r2, #1
    2c02:	4901      	ldr	r1, [pc, #4]	; (2c08 <_irq_set+0x18>)
    2c04:	508b      	str	r3, [r1, r2]
}
    2c06:	4770      	bx	lr
    2c08:	e000e100 	.word	0xe000e100

00002c0c <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    2c0c:	b510      	push	{r4, lr}
    2c0e:	0003      	movs	r3, r0
		return (us * (freq / 10000) - 1) / 100 + 1;
    2c10:	20c8      	movs	r0, #200	; 0xc8
    2c12:	0080      	lsls	r0, r0, #2
    2c14:	4358      	muls	r0, r3
    2c16:	3801      	subs	r0, #1
    2c18:	2164      	movs	r1, #100	; 0x64
    2c1a:	4b02      	ldr	r3, [pc, #8]	; (2c24 <_get_cycles_for_us+0x18>)
    2c1c:	4798      	blx	r3
    2c1e:	3001      	adds	r0, #1
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2c20:	bd10      	pop	{r4, pc}
    2c22:	46c0      	nop			; (mov r8, r8)
    2c24:	000063c1 	.word	0x000063c1

00002c28 <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
    2c28:	23c8      	movs	r3, #200	; 0xc8
    2c2a:	009b      	lsls	r3, r3, #2
    2c2c:	4358      	muls	r0, r3
    2c2e:	0083      	lsls	r3, r0, #2
    2c30:	181b      	adds	r3, r3, r0
    2c32:	0058      	lsls	r0, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2c34:	4770      	bx	lr
	...

00002c38 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2c38:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    2c3a:	4b06      	ldr	r3, [pc, #24]	; (2c54 <_init_chip+0x1c>)
    2c3c:	685a      	ldr	r2, [r3, #4]
    2c3e:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    2c40:	4b05      	ldr	r3, [pc, #20]	; (2c58 <_init_chip+0x20>)
    2c42:	4798      	blx	r3
	_sysctrl_init_sources();
    2c44:	4b05      	ldr	r3, [pc, #20]	; (2c5c <_init_chip+0x24>)
    2c46:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    2c48:	4b05      	ldr	r3, [pc, #20]	; (2c60 <_init_chip+0x28>)
    2c4a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2c4c:	20ff      	movs	r0, #255	; 0xff
    2c4e:	4b05      	ldr	r3, [pc, #20]	; (2c64 <_init_chip+0x2c>)
    2c50:	4798      	blx	r3
}
    2c52:	bd10      	pop	{r4, pc}
    2c54:	41004000 	.word	0x41004000
    2c58:	00003169 	.word	0x00003169
    2c5c:	000034ed 	.word	0x000034ed
    2c60:	00003549 	.word	0x00003549
    2c64:	00002e09 	.word	0x00002e09

00002c68 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    2c68:	4b20      	ldr	r3, [pc, #128]	; (2cec <_ext_irq_init+0x84>)
    2c6a:	785b      	ldrb	r3, [r3, #1]
    2c6c:	09db      	lsrs	r3, r3, #7
    2c6e:	d1fb      	bne.n	2c68 <_ext_irq_init>
    2c70:	4b1e      	ldr	r3, [pc, #120]	; (2cec <_ext_irq_init+0x84>)
    2c72:	785b      	ldrb	r3, [r3, #1]
    2c74:	09db      	lsrs	r3, r3, #7
    2c76:	d1fb      	bne.n	2c70 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    2c78:	4b1c      	ldr	r3, [pc, #112]	; (2cec <_ext_irq_init+0x84>)
    2c7a:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    2c7c:	079b      	lsls	r3, r3, #30
    2c7e:	d50a      	bpl.n	2c96 <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    2c80:	2200      	movs	r2, #0
    2c82:	4b1a      	ldr	r3, [pc, #104]	; (2cec <_ext_irq_init+0x84>)
    2c84:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    2c86:	4b19      	ldr	r3, [pc, #100]	; (2cec <_ext_irq_init+0x84>)
    2c88:	785b      	ldrb	r3, [r3, #1]
    2c8a:	09db      	lsrs	r3, r3, #7
    2c8c:	d1fb      	bne.n	2c86 <_ext_irq_init+0x1e>
    2c8e:	4b17      	ldr	r3, [pc, #92]	; (2cec <_ext_irq_init+0x84>)
    2c90:	785b      	ldrb	r3, [r3, #1]
    2c92:	09db      	lsrs	r3, r3, #7
    2c94:	d1fb      	bne.n	2c8e <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
    2c96:	2201      	movs	r2, #1
    2c98:	4b14      	ldr	r3, [pc, #80]	; (2cec <_ext_irq_init+0x84>)
    2c9a:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    2c9c:	4b13      	ldr	r3, [pc, #76]	; (2cec <_ext_irq_init+0x84>)
    2c9e:	785b      	ldrb	r3, [r3, #1]
    2ca0:	09db      	lsrs	r3, r3, #7
    2ca2:	d1fb      	bne.n	2c9c <_ext_irq_init+0x34>
    2ca4:	4b11      	ldr	r3, [pc, #68]	; (2cec <_ext_irq_init+0x84>)
    2ca6:	785b      	ldrb	r3, [r3, #1]
    2ca8:	09db      	lsrs	r3, r3, #7
    2caa:	d1fb      	bne.n	2ca4 <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    2cac:	4b0f      	ldr	r3, [pc, #60]	; (2cec <_ext_irq_init+0x84>)
    2cae:	2200      	movs	r2, #0
    2cb0:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    2cb2:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    2cb4:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    2cb6:	619a      	str	r2, [r3, #24]
    2cb8:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    2cba:	781a      	ldrb	r2, [r3, #0]
    2cbc:	2102      	movs	r1, #2
    2cbe:	430a      	orrs	r2, r1
    2cc0:	b2d2      	uxtb	r2, r2
    2cc2:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    2cc4:	4b09      	ldr	r3, [pc, #36]	; (2cec <_ext_irq_init+0x84>)
    2cc6:	785b      	ldrb	r3, [r3, #1]
    2cc8:	09db      	lsrs	r3, r3, #7
    2cca:	d1fb      	bne.n	2cc4 <_ext_irq_init+0x5c>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ccc:	4b08      	ldr	r3, [pc, #32]	; (2cf0 <_ext_irq_init+0x88>)
    2cce:	2210      	movs	r2, #16
    2cd0:	2180      	movs	r1, #128	; 0x80
    2cd2:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    2cd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2cd8:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2cdc:	3101      	adds	r1, #1
    2cde:	31ff      	adds	r1, #255	; 0xff
    2ce0:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ce2:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    2ce4:	4b03      	ldr	r3, [pc, #12]	; (2cf4 <_ext_irq_init+0x8c>)
    2ce6:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    2ce8:	2000      	movs	r0, #0
    2cea:	4770      	bx	lr
    2cec:	40001800 	.word	0x40001800
    2cf0:	e000e100 	.word	0xe000e100
    2cf4:	20000864 	.word	0x20000864

00002cf8 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    2cf8:	b530      	push	{r4, r5, lr}
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;
    2cfa:	2300      	movs	r3, #0

	for (; i < ARRAY_SIZE(_map); i++) {
    2cfc:	2b03      	cmp	r3, #3
    2cfe:	d80b      	bhi.n	2d18 <_ext_irq_enable+0x20>
		if (_map[i].pin == pin) {
    2d00:	00dc      	lsls	r4, r3, #3
    2d02:	4a10      	ldr	r2, [pc, #64]	; (2d44 <_ext_irq_enable+0x4c>)
    2d04:	1912      	adds	r2, r2, r4
    2d06:	6852      	ldr	r2, [r2, #4]
    2d08:	4282      	cmp	r2, r0
    2d0a:	d002      	beq.n	2d12 <_ext_irq_enable+0x1a>
	for (; i < ARRAY_SIZE(_map); i++) {
    2d0c:	3301      	adds	r3, #1
    2d0e:	b2db      	uxtb	r3, r3
    2d10:	e7f4      	b.n	2cfc <_ext_irq_enable+0x4>
			extint = _map[i].extint;
    2d12:	4b0c      	ldr	r3, [pc, #48]	; (2d44 <_ext_irq_enable+0x4c>)
    2d14:	5ce2      	ldrb	r2, [r4, r3]
			break;
    2d16:	e000      	b.n	2d1a <_ext_irq_enable+0x22>
	uint8_t extint = INVALID_EXTINT_NUMBER;
    2d18:	22ff      	movs	r2, #255	; 0xff
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    2d1a:	2aff      	cmp	r2, #255	; 0xff
    2d1c:	d00e      	beq.n	2d3c <_ext_irq_enable+0x44>
		return ERR_INVALID_ARG;
	}

	if (enable) {
    2d1e:	2900      	cmp	r1, #0
    2d20:	d106      	bne.n	2d30 <_ext_irq_enable+0x38>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    2d22:	2301      	movs	r3, #1
    2d24:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    2d26:	4a08      	ldr	r2, [pc, #32]	; (2d48 <_ext_irq_enable+0x50>)
    2d28:	6093      	str	r3, [r2, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
    2d2a:	6113      	str	r3, [r2, #16]
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
    2d2c:	2000      	movs	r0, #0
}
    2d2e:	bd30      	pop	{r4, r5, pc}
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    2d30:	2301      	movs	r3, #1
    2d32:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    2d34:	4a04      	ldr	r2, [pc, #16]	; (2d48 <_ext_irq_enable+0x50>)
    2d36:	60d3      	str	r3, [r2, #12]
	return ERR_NONE;
    2d38:	2000      	movs	r0, #0
    2d3a:	e7f8      	b.n	2d2e <_ext_irq_enable+0x36>
		return ERR_INVALID_ARG;
    2d3c:	200d      	movs	r0, #13
    2d3e:	4240      	negs	r0, r0
    2d40:	e7f5      	b.n	2d2e <_ext_irq_enable+0x36>
    2d42:	46c0      	nop			; (mov r8, r8)
    2d44:	00007a04 	.word	0x00007a04
    2d48:	40001800 	.word	0x40001800

00002d4c <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    2d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d4e:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
    2d50:	4b27      	ldr	r3, [pc, #156]	; (2df0 <EIC_Handler+0xa4>)
    2d52:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    2d54:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    2d56:	400a      	ands	r2, r1
    2d58:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    2d5a:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    2d5c:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    2d5e:	4b25      	ldr	r3, [pc, #148]	; (2df4 <EIC_Handler+0xa8>)
    2d60:	6818      	ldr	r0, [r3, #0]
    2d62:	1e43      	subs	r3, r0, #1
    2d64:	4198      	sbcs	r0, r3
    2d66:	b2c0      	uxtb	r0, r0
    2d68:	22d2      	movs	r2, #210	; 0xd2
    2d6a:	4923      	ldr	r1, [pc, #140]	; (2df8 <EIC_Handler+0xac>)
    2d6c:	4b23      	ldr	r3, [pc, #140]	; (2dfc <EIC_Handler+0xb0>)
    2d6e:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    2d70:	2501      	movs	r5, #1
    2d72:	426d      	negs	r5, r5

	while (flags) {
    2d74:	e031      	b.n	2dda <EIC_Handler+0x8e>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    2d76:	00db      	lsls	r3, r3, #3
    2d78:	4a21      	ldr	r2, [pc, #132]	; (2e00 <EIC_Handler+0xb4>)
    2d7a:	18d3      	adds	r3, r2, r3
    2d7c:	685d      	ldr	r5, [r3, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    2d7e:	1c6b      	adds	r3, r5, #1
    2d80:	d003      	beq.n	2d8a <EIC_Handler+0x3e>
				callback(pin);
    2d82:	4b1c      	ldr	r3, [pc, #112]	; (2df4 <EIC_Handler+0xa8>)
    2d84:	681b      	ldr	r3, [r3, #0]
    2d86:	0028      	movs	r0, r5
    2d88:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    2d8a:	2201      	movs	r2, #1
    2d8c:	40a2      	lsls	r2, r4
    2d8e:	9b01      	ldr	r3, [sp, #4]
    2d90:	4393      	bics	r3, r2
    2d92:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    2d94:	9801      	ldr	r0, [sp, #4]
    2d96:	4b1b      	ldr	r3, [pc, #108]	; (2e04 <EIC_Handler+0xb8>)
    2d98:	4798      	blx	r3
    2d9a:	3801      	subs	r0, #1
    2d9c:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    2d9e:	1c63      	adds	r3, r4, #1
    2da0:	d014      	beq.n	2dcc <EIC_Handler+0x80>
    2da2:	2604      	movs	r6, #4
    2da4:	2000      	movs	r0, #0
    2da6:	e001      	b.n	2dac <EIC_Handler+0x60>
					upper = middle - 1;
    2da8:	3901      	subs	r1, #1
    2daa:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
    2dac:	42b0      	cmp	r0, r6
    2dae:	d8e6      	bhi.n	2d7e <EIC_Handler+0x32>
				middle = (upper + lower) >> 1;
    2db0:	1833      	adds	r3, r6, r0
    2db2:	105b      	asrs	r3, r3, #1
    2db4:	b2d9      	uxtb	r1, r3
    2db6:	22ff      	movs	r2, #255	; 0xff
    2db8:	4013      	ands	r3, r2
				if (_map[middle].extint == pos) {
    2dba:	00df      	lsls	r7, r3, #3
    2dbc:	4a10      	ldr	r2, [pc, #64]	; (2e00 <EIC_Handler+0xb4>)
    2dbe:	5cba      	ldrb	r2, [r7, r2]
    2dc0:	42a2      	cmp	r2, r4
    2dc2:	d0d8      	beq.n	2d76 <EIC_Handler+0x2a>
				if (_map[middle].extint < pos) {
    2dc4:	daf0      	bge.n	2da8 <EIC_Handler+0x5c>
					lower = middle + 1;
    2dc6:	3101      	adds	r1, #1
    2dc8:	b2c8      	uxtb	r0, r1
    2dca:	e7ef      	b.n	2dac <EIC_Handler+0x60>
	return ((Eic *)hw)->INTFLAG.reg;
    2dcc:	4b08      	ldr	r3, [pc, #32]	; (2df0 <EIC_Handler+0xa4>)
    2dce:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    2dd0:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    2dd2:	400a      	ands	r2, r1
    2dd4:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    2dd6:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    2dd8:	611a      	str	r2, [r3, #16]
	while (flags) {
    2dda:	9b01      	ldr	r3, [sp, #4]
    2ddc:	2b00      	cmp	r3, #0
    2dde:	d005      	beq.n	2dec <EIC_Handler+0xa0>
		pos = ffs(flags) - 1;
    2de0:	9801      	ldr	r0, [sp, #4]
    2de2:	4b08      	ldr	r3, [pc, #32]	; (2e04 <EIC_Handler+0xb8>)
    2de4:	4798      	blx	r3
    2de6:	3801      	subs	r0, #1
    2de8:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    2dea:	e7d8      	b.n	2d9e <EIC_Handler+0x52>
	}
}
    2dec:	b003      	add	sp, #12
    2dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2df0:	40001800 	.word	0x40001800
    2df4:	20000864 	.word	0x20000864
    2df8:	00007a24 	.word	0x00007a24
    2dfc:	00002b65 	.word	0x00002b65
    2e00:	00007a04 	.word	0x00007a04
    2e04:	0000652d 	.word	0x0000652d

00002e08 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2e08:	07c3      	lsls	r3, r0, #31
    2e0a:	d50a      	bpl.n	2e22 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    2e0c:	4b0b      	ldr	r3, [pc, #44]	; (2e3c <_gclk_init_generators_by_fref+0x34>)
    2e0e:	2280      	movs	r2, #128	; 0x80
    2e10:	0052      	lsls	r2, r2, #1
    2e12:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    2e14:	2283      	movs	r2, #131	; 0x83
    2e16:	0252      	lsls	r2, r2, #9
    2e18:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2e1a:	4b08      	ldr	r3, [pc, #32]	; (2e3c <_gclk_init_generators_by_fref+0x34>)
    2e1c:	785b      	ldrb	r3, [r3, #1]
    2e1e:	09db      	lsrs	r3, r3, #7
    2e20:	d1fb      	bne.n	2e1a <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    2e22:	0783      	lsls	r3, r0, #30
    2e24:	d508      	bpl.n	2e38 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
    2e26:	4b05      	ldr	r3, [pc, #20]	; (2e3c <_gclk_init_generators_by_fref+0x34>)
    2e28:	4a05      	ldr	r2, [pc, #20]	; (2e40 <_gclk_init_generators_by_fref+0x38>)
    2e2a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    2e2c:	4a05      	ldr	r2, [pc, #20]	; (2e44 <_gclk_init_generators_by_fref+0x3c>)
    2e2e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    2e30:	4b02      	ldr	r3, [pc, #8]	; (2e3c <_gclk_init_generators_by_fref+0x34>)
    2e32:	785b      	ldrb	r3, [r3, #1]
    2e34:	09db      	lsrs	r3, r3, #7
    2e36:	d1fb      	bne.n	2e30 <_gclk_init_generators_by_fref+0x28>
		        | (CONF_GCLK_GEN_7_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_7_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_7_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_7_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SRC | GCLK_GENCTRL_ID(7));
	}
#endif
}
    2e38:	4770      	bx	lr
    2e3a:	46c0      	nop			; (mov r8, r8)
    2e3c:	40000c00 	.word	0x40000c00
    2e40:	00002001 	.word	0x00002001
    2e44:	00010401 	.word	0x00010401

00002e48 <_flash_erase_row>:
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    2e48:	7d03      	ldrb	r3, [r0, #20]
 * \param[in]  hw            The pointer to hardware instance
 * \param[in]  dst_addr      Destination page address to erase
 */
static void _flash_erase_row(void *const hw, const uint32_t dst_addr, uint32_t nvmctrl_cmd)
{
	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    2e4a:	07db      	lsls	r3, r3, #31
    2e4c:	d5fc      	bpl.n	2e48 <_flash_erase_row>
}

static inline void hri_nvmctrl_clear_STATUS_reg(const void *const hw, hri_nvmctrl_status_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->STATUS.reg = mask;
    2e4e:	2320      	movs	r3, #32
    2e50:	33ff      	adds	r3, #255	; 0xff
    2e52:	8303      	strh	r3, [r0, #24]

	/* Clear flags */
	hri_nvmctrl_clear_STATUS_reg(hw, NVMCTRL_STATUS_MASK);

	/* Set address and command */
	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
    2e54:	0849      	lsrs	r1, r1, #1
	((Nvmctrl *)hw)->ADDR.reg = data;
    2e56:	61c1      	str	r1, [r0, #28]
	hri_nvmctrl_write_CTRLA_reg(hw, nvmctrl_cmd | NVMCTRL_CTRLA_CMDEX_KEY);
    2e58:	4b02      	ldr	r3, [pc, #8]	; (2e64 <_flash_erase_row+0x1c>)
    2e5a:	431a      	orrs	r2, r3
    2e5c:	b292      	uxth	r2, r2
	((Nvmctrl *)hw)->CTRLA.reg = data;
    2e5e:	8002      	strh	r2, [r0, #0]
}
    2e60:	4770      	bx	lr
    2e62:	46c0      	nop			; (mov r8, r8)
    2e64:	ffffa500 	.word	0xffffa500

00002e68 <_flash_program>:
 *                           write is stored
 * \param[in] size           The size of data to write to a page
 */
static void _flash_program(void *const hw, const uint32_t dst_addr, const uint8_t *buffer, const uint16_t size,
                           uint32_t nvmctrl_cmd)
{
    2e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e6a:	0004      	movs	r4, r0
    2e6c:	000f      	movs	r7, r1
    2e6e:	0016      	movs	r6, r2
    2e70:	001d      	movs	r5, r3
	ASSERT(!(dst_addr % 2));
    2e72:	2001      	movs	r0, #1
    2e74:	4008      	ands	r0, r1
    2e76:	4243      	negs	r3, r0
    2e78:	4158      	adcs	r0, r3
    2e7a:	b2c0      	uxtb	r0, r0
    2e7c:	22c5      	movs	r2, #197	; 0xc5
    2e7e:	0052      	lsls	r2, r2, #1
    2e80:	4915      	ldr	r1, [pc, #84]	; (2ed8 <_flash_program+0x70>)
    2e82:	4b16      	ldr	r3, [pc, #88]	; (2edc <_flash_program+0x74>)
    2e84:	4798      	blx	r3

	uint32_t nvm_address = dst_addr / 2;
    2e86:	0879      	lsrs	r1, r7, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    2e88:	7d23      	ldrb	r3, [r4, #20]
	uint16_t i, data;

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    2e8a:	07db      	lsls	r3, r3, #31
    2e8c:	d5fc      	bpl.n	2e88 <_flash_program+0x20>
	((Nvmctrl *)hw)->CTRLA.reg = data;
    2e8e:	4b14      	ldr	r3, [pc, #80]	; (2ee0 <_flash_program+0x78>)
    2e90:	8023      	strh	r3, [r4, #0]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    2e92:	7d23      	ldrb	r3, [r4, #20]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_CTRLA_reg(hw, NVMCTRL_CTRLA_CMD_PBC | NVMCTRL_CTRLA_CMDEX_KEY);

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    2e94:	07db      	lsls	r3, r3, #31
    2e96:	d5fc      	bpl.n	2e92 <_flash_program+0x2a>
	((Nvmctrl *)hw)->STATUS.reg = mask;
    2e98:	2320      	movs	r3, #32
    2e9a:	33ff      	adds	r3, #255	; 0xff
    2e9c:	8323      	strh	r3, [r4, #24]
	uint32_t nvm_address = dst_addr / 2;
    2e9e:	000a      	movs	r2, r1
	}

	/* Clear flags */
	hri_nvmctrl_clear_STATUS_reg(hw, NVMCTRL_STATUS_MASK);

	for (i = 0; i < size; i += 2) {
    2ea0:	2300      	movs	r3, #0
    2ea2:	e004      	b.n	2eae <_flash_program+0x46>
		data = buffer[i];
		if (i < NVMCTRL_PAGE_SIZE - 1) {
			data |= (buffer[i + 1] << 8);
		}
		NVM_MEMORY[nvm_address++] = data;
    2ea4:	0057      	lsls	r7, r2, #1
    2ea6:	8038      	strh	r0, [r7, #0]
	for (i = 0; i < size; i += 2) {
    2ea8:	3302      	adds	r3, #2
    2eaa:	b29b      	uxth	r3, r3
		NVM_MEMORY[nvm_address++] = data;
    2eac:	3201      	adds	r2, #1
	for (i = 0; i < size; i += 2) {
    2eae:	42ab      	cmp	r3, r5
    2eb0:	d208      	bcs.n	2ec4 <_flash_program+0x5c>
		data = buffer[i];
    2eb2:	5cf7      	ldrb	r7, [r6, r3]
    2eb4:	b2b8      	uxth	r0, r7
		if (i < NVMCTRL_PAGE_SIZE - 1) {
    2eb6:	2b3e      	cmp	r3, #62	; 0x3e
    2eb8:	d8f4      	bhi.n	2ea4 <_flash_program+0x3c>
			data |= (buffer[i + 1] << 8);
    2eba:	18f0      	adds	r0, r6, r3
    2ebc:	7840      	ldrb	r0, [r0, #1]
    2ebe:	0200      	lsls	r0, r0, #8
    2ec0:	4338      	orrs	r0, r7
    2ec2:	e7ef      	b.n	2ea4 <_flash_program+0x3c>
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    2ec4:	7d23      	ldrb	r3, [r4, #20]
	}

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    2ec6:	07db      	lsls	r3, r3, #31
    2ec8:	d5fc      	bpl.n	2ec4 <_flash_program+0x5c>
	((Nvmctrl *)hw)->ADDR.reg = data;
    2eca:	61e1      	str	r1, [r4, #28]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
	hri_nvmctrl_write_CTRLA_reg(hw, nvmctrl_cmd | NVMCTRL_CTRLA_CMDEX_KEY);
    2ecc:	4b05      	ldr	r3, [pc, #20]	; (2ee4 <_flash_program+0x7c>)
    2ece:	9a06      	ldr	r2, [sp, #24]
    2ed0:	4313      	orrs	r3, r2
    2ed2:	b29b      	uxth	r3, r3
	((Nvmctrl *)hw)->CTRLA.reg = data;
    2ed4:	8023      	strh	r3, [r4, #0]
}
    2ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ed8:	00007a3c 	.word	0x00007a3c
    2edc:	00002b65 	.word	0x00002b65
    2ee0:	ffffa544 	.word	0xffffa544
    2ee4:	ffffa500 	.word	0xffffa500

00002ee8 <_flash_init>:
{
    2ee8:	b570      	push	{r4, r5, r6, lr}
    2eea:	0005      	movs	r5, r0
    2eec:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    2eee:	2800      	cmp	r0, #0
    2ef0:	d01c      	beq.n	2f2c <_flash_init+0x44>
    2ef2:	4b10      	ldr	r3, [pc, #64]	; (2f34 <_flash_init+0x4c>)
    2ef4:	4299      	cmp	r1, r3
    2ef6:	d01b      	beq.n	2f30 <_flash_init+0x48>
    2ef8:	2000      	movs	r0, #0
    2efa:	2246      	movs	r2, #70	; 0x46
    2efc:	490e      	ldr	r1, [pc, #56]	; (2f38 <_flash_init+0x50>)
    2efe:	4b0f      	ldr	r3, [pc, #60]	; (2f3c <_flash_init+0x54>)
    2f00:	4798      	blx	r3
	device->hw = hw;
    2f02:	612c      	str	r4, [r5, #16]
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
    2f04:	6862      	ldr	r2, [r4, #4]
	tmp &= mask;
    2f06:	239e      	movs	r3, #158	; 0x9e
    2f08:	4013      	ands	r3, r2
	((Nvmctrl *)hw)->CTRLB.reg = data;
    2f0a:	6063      	str	r3, [r4, #4]
	_nvm_dev = device;
    2f0c:	4b0c      	ldr	r3, [pc, #48]	; (2f40 <_flash_init+0x58>)
    2f0e:	601d      	str	r5, [r3, #0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f10:	4b0c      	ldr	r3, [pc, #48]	; (2f44 <_flash_init+0x5c>)
    2f12:	2220      	movs	r2, #32
    2f14:	2180      	movs	r1, #128	; 0x80
    2f16:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    2f18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2f1c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f20:	3101      	adds	r1, #1
    2f22:	31ff      	adds	r1, #255	; 0xff
    2f24:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f26:	601a      	str	r2, [r3, #0]
}
    2f28:	2000      	movs	r0, #0
    2f2a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(device && (hw == NVMCTRL));
    2f2c:	2000      	movs	r0, #0
    2f2e:	e7e4      	b.n	2efa <_flash_init+0x12>
    2f30:	2001      	movs	r0, #1
    2f32:	e7e2      	b.n	2efa <_flash_init+0x12>
    2f34:	41004000 	.word	0x41004000
    2f38:	00007a3c 	.word	0x00007a3c
    2f3c:	00002b65 	.word	0x00002b65
    2f40:	20000868 	.word	0x20000868
    2f44:	e000e100 	.word	0xe000e100

00002f48 <_flash_get_page_size>:
}
    2f48:	2040      	movs	r0, #64	; 0x40
    2f4a:	4770      	bx	lr

00002f4c <_flash_get_total_pages>:
}
    2f4c:	2080      	movs	r0, #128	; 0x80
    2f4e:	0140      	lsls	r0, r0, #5
    2f50:	4770      	bx	lr

00002f52 <_flash_read>:
{
    2f52:	b570      	push	{r4, r5, r6, lr}
	uint32_t nvm_address = src_addr / 2;
    2f54:	084c      	lsrs	r4, r1, #1
	while (!hri_nvmctrl_get_interrupt_READY_bit(device->hw)) {
    2f56:	6905      	ldr	r5, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    2f58:	7d2e      	ldrb	r6, [r5, #20]
    2f5a:	07f6      	lsls	r6, r6, #31
    2f5c:	d5fb      	bpl.n	2f56 <_flash_read+0x4>
	((Nvmctrl *)hw)->STATUS.reg = mask;
    2f5e:	2020      	movs	r0, #32
    2f60:	30ff      	adds	r0, #255	; 0xff
    2f62:	8328      	strh	r0, [r5, #24]
	if (src_addr % 2) {
    2f64:	07c8      	lsls	r0, r1, #31
    2f66:	d507      	bpl.n	2f78 <_flash_read+0x26>
		data      = NVM_MEMORY[nvm_address++];
    2f68:	3401      	adds	r4, #1
    2f6a:	2001      	movs	r0, #1
    2f6c:	4381      	bics	r1, r0
    2f6e:	8809      	ldrh	r1, [r1, #0]
		buffer[0] = data >> 8;
    2f70:	0a09      	lsrs	r1, r1, #8
    2f72:	7011      	strb	r1, [r2, #0]
		i         = 1;
    2f74:	2101      	movs	r1, #1
    2f76:	e003      	b.n	2f80 <_flash_read+0x2e>
		i = 0;
    2f78:	2100      	movs	r1, #0
    2f7a:	e001      	b.n	2f80 <_flash_read+0x2e>
		i += 2;
    2f7c:	3102      	adds	r1, #2
		data      = NVM_MEMORY[nvm_address++];
    2f7e:	002c      	movs	r4, r5
	while (i < length) {
    2f80:	4299      	cmp	r1, r3
    2f82:	d20b      	bcs.n	2f9c <_flash_read+0x4a>
		data      = NVM_MEMORY[nvm_address++];
    2f84:	1c65      	adds	r5, r4, #1
    2f86:	0064      	lsls	r4, r4, #1
    2f88:	8820      	ldrh	r0, [r4, #0]
    2f8a:	b280      	uxth	r0, r0
		buffer[i] = (data & 0xFF);
    2f8c:	5450      	strb	r0, [r2, r1]
		if (i < (length - 1)) {
    2f8e:	1e5c      	subs	r4, r3, #1
    2f90:	42a1      	cmp	r1, r4
    2f92:	d2f3      	bcs.n	2f7c <_flash_read+0x2a>
			buffer[i + 1] = (data >> 8);
    2f94:	1c4c      	adds	r4, r1, #1
    2f96:	0a00      	lsrs	r0, r0, #8
    2f98:	5510      	strb	r0, [r2, r4]
    2f9a:	e7ef      	b.n	2f7c <_flash_read+0x2a>
}
    2f9c:	bd70      	pop	{r4, r5, r6, pc}
	...

00002fa0 <_flash_write>:
{
    2fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fa2:	46de      	mov	lr, fp
    2fa4:	4657      	mov	r7, sl
    2fa6:	464e      	mov	r6, r9
    2fa8:	4645      	mov	r5, r8
    2faa:	b5e0      	push	{r5, r6, r7, lr}
    2fac:	b0c5      	sub	sp, #276	; 0x114
    2fae:	4681      	mov	r9, r0
    2fb0:	0016      	movs	r6, r2
    2fb2:	001d      	movs	r5, r3
	uint32_t wr_start_addr = dst_addr;
    2fb4:	000c      	movs	r4, r1
    2fb6:	e048      	b.n	304a <_flash_write+0xaa>
			_flash_read(device, row_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    2fb8:	4653      	mov	r3, sl
    2fba:	0199      	lsls	r1, r3, #6
    2fbc:	ab04      	add	r3, sp, #16
    2fbe:	185a      	adds	r2, r3, r1
    2fc0:	4441      	add	r1, r8
    2fc2:	2340      	movs	r3, #64	; 0x40
    2fc4:	4648      	mov	r0, r9
    2fc6:	4f29      	ldr	r7, [pc, #164]	; (306c <_flash_write+0xcc>)
    2fc8:	47b8      	blx	r7
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    2fca:	2301      	movs	r3, #1
    2fcc:	469c      	mov	ip, r3
    2fce:	44e2      	add	sl, ip
    2fd0:	4653      	mov	r3, sl
    2fd2:	2b03      	cmp	r3, #3
    2fd4:	d9f0      	bls.n	2fb8 <_flash_write+0x18>
		j = (wr_start_addr - row_start_addr) / NVMCTRL_PAGE_SIZE;
    2fd6:	4643      	mov	r3, r8
    2fd8:	1ae3      	subs	r3, r4, r3
    2fda:	0999      	lsrs	r1, r3, #6
		k = wr_start_addr - row_start_addr - j * NVMCTRL_PAGE_SIZE;
    2fdc:	223f      	movs	r2, #63	; 0x3f
    2fde:	4013      	ands	r3, r2
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
    2fe0:	e002      	b.n	2fe8 <_flash_write+0x48>
			wr_start_addr++;
    2fe2:	3401      	adds	r4, #1
			buffer++;
    2fe4:	3601      	adds	r6, #1
			length--;
    2fe6:	3d01      	subs	r5, #1
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
    2fe8:	9a03      	ldr	r2, [sp, #12]
    2fea:	4294      	cmp	r4, r2
    2fec:	d80d      	bhi.n	300a <_flash_write+0x6a>
    2fee:	2d00      	cmp	r5, #0
    2ff0:	d00b      	beq.n	300a <_flash_write+0x6a>
			tmp_buffer[j][k] = *buffer;
    2ff2:	7830      	ldrb	r0, [r6, #0]
    2ff4:	018a      	lsls	r2, r1, #6
    2ff6:	af04      	add	r7, sp, #16
    2ff8:	46bc      	mov	ip, r7
    2ffa:	4462      	add	r2, ip
    2ffc:	54d0      	strb	r0, [r2, r3]
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
    2ffe:	3301      	adds	r3, #1
    3000:	223f      	movs	r2, #63	; 0x3f
    3002:	4013      	ands	r3, r2
			if (0 == k) {
    3004:	d1ed      	bne.n	2fe2 <_flash_write+0x42>
				j++;
    3006:	3101      	adds	r1, #1
    3008:	e7eb      	b.n	2fe2 <_flash_write+0x42>
		_flash_erase_row(device->hw, row_start_addr, NVMCTRL_CTRLA_CMD_ER);
    300a:	2202      	movs	r2, #2
    300c:	4641      	mov	r1, r8
    300e:	464b      	mov	r3, r9
    3010:	6918      	ldr	r0, [r3, #16]
    3012:	4b17      	ldr	r3, [pc, #92]	; (3070 <_flash_write+0xd0>)
    3014:	4798      	blx	r3
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    3016:	2300      	movs	r3, #0
    3018:	469a      	mov	sl, r3
    301a:	e00e      	b.n	303a <_flash_write+0x9a>
			               row_start_addr + i * NVMCTRL_PAGE_SIZE,
    301c:	4653      	mov	r3, sl
    301e:	0199      	lsls	r1, r3, #6
			               tmp_buffer[i],
    3020:	ab04      	add	r3, sp, #16
    3022:	185a      	adds	r2, r3, r1
			_flash_program(device->hw,
    3024:	4441      	add	r1, r8
    3026:	2304      	movs	r3, #4
    3028:	9300      	str	r3, [sp, #0]
    302a:	333c      	adds	r3, #60	; 0x3c
    302c:	4648      	mov	r0, r9
    302e:	6900      	ldr	r0, [r0, #16]
    3030:	4f10      	ldr	r7, [pc, #64]	; (3074 <_flash_write+0xd4>)
    3032:	47b8      	blx	r7
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    3034:	2301      	movs	r3, #1
    3036:	469c      	mov	ip, r3
    3038:	44e2      	add	sl, ip
    303a:	4653      	mov	r3, sl
    303c:	2b03      	cmp	r3, #3
    303e:	d9ed      	bls.n	301c <_flash_write+0x7c>
	} while (row_end_addr < (wr_start_addr + length - 1));
    3040:	192b      	adds	r3, r5, r4
    3042:	3b01      	subs	r3, #1
    3044:	9a03      	ldr	r2, [sp, #12]
    3046:	429a      	cmp	r2, r3
    3048:	d209      	bcs.n	305e <_flash_write+0xbe>
		row_start_addr = wr_start_addr & ~((NVMCTRL_PAGE_SIZE * NVMCTRL_ROW_PAGES) - 1);
    304a:	23ff      	movs	r3, #255	; 0xff
    304c:	0022      	movs	r2, r4
    304e:	439a      	bics	r2, r3
    3050:	4690      	mov	r8, r2
		row_end_addr   = row_start_addr + NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE - 1;
    3052:	0017      	movs	r7, r2
    3054:	37ff      	adds	r7, #255	; 0xff
    3056:	9703      	str	r7, [sp, #12]
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    3058:	2300      	movs	r3, #0
    305a:	469a      	mov	sl, r3
    305c:	e7b8      	b.n	2fd0 <_flash_write+0x30>
}
    305e:	b045      	add	sp, #276	; 0x114
    3060:	bc3c      	pop	{r2, r3, r4, r5}
    3062:	4690      	mov	r8, r2
    3064:	4699      	mov	r9, r3
    3066:	46a2      	mov	sl, r4
    3068:	46ab      	mov	fp, r5
    306a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    306c:	00002f53 	.word	0x00002f53
    3070:	00002e49 	.word	0x00002e49
    3074:	00002e69 	.word	0x00002e69

00003078 <_flash_erase>:
{
    3078:	b5f0      	push	{r4, r5, r6, r7, lr}
    307a:	46d6      	mov	lr, sl
    307c:	464f      	mov	r7, r9
    307e:	4646      	mov	r6, r8
    3080:	b5c0      	push	{r6, r7, lr}
    3082:	b090      	sub	sp, #64	; 0x40
    3084:	0007      	movs	r7, r0
    3086:	468a      	mov	sl, r1
    3088:	0015      	movs	r5, r2
	row_start_addr = dst_addr & ~((NVMCTRL_PAGE_SIZE * NVMCTRL_ROW_PAGES) - 1);
    308a:	23ff      	movs	r3, #255	; 0xff
    308c:	000c      	movs	r4, r1
    308e:	439c      	bics	r4, r3
	memset(tmp_buffer, 0xFF, NVMCTRL_PAGE_SIZE);
    3090:	2240      	movs	r2, #64	; 0x40
    3092:	21ff      	movs	r1, #255	; 0xff
    3094:	4668      	mov	r0, sp
    3096:	4b1f      	ldr	r3, [pc, #124]	; (3114 <_flash_erase+0x9c>)
    3098:	4798      	blx	r3
	if (dst_addr != row_start_addr) {
    309a:	45a2      	cmp	sl, r4
    309c:	d020      	beq.n	30e0 <_flash_erase+0x68>
		row_start_addr += NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE;
    309e:	3401      	adds	r4, #1
    30a0:	34ff      	adds	r4, #255	; 0xff
		for (i = 0; i < NVMCTRL_ROW_PAGES - 1; i++) {
    30a2:	2300      	movs	r3, #0
    30a4:	4698      	mov	r8, r3
    30a6:	4643      	mov	r3, r8
    30a8:	2b02      	cmp	r3, #2
    30aa:	d819      	bhi.n	30e0 <_flash_erase+0x68>
			_flash_write(device, dst_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    30ac:	2340      	movs	r3, #64	; 0x40
    30ae:	466a      	mov	r2, sp
    30b0:	4651      	mov	r1, sl
    30b2:	0038      	movs	r0, r7
    30b4:	4e18      	ldr	r6, [pc, #96]	; (3118 <_flash_erase+0xa0>)
    30b6:	47b0      	blx	r6
			if (--page_nums == 0) {
    30b8:	3d01      	subs	r5, #1
    30ba:	2d00      	cmp	r5, #0
    30bc:	d023      	beq.n	3106 <_flash_erase+0x8e>
			dst_addr += NVMCTRL_PAGE_SIZE;
    30be:	2340      	movs	r3, #64	; 0x40
    30c0:	469c      	mov	ip, r3
    30c2:	44e2      	add	sl, ip
			if (dst_addr == row_start_addr) {
    30c4:	4554      	cmp	r4, sl
    30c6:	d00b      	beq.n	30e0 <_flash_erase+0x68>
		for (i = 0; i < NVMCTRL_ROW_PAGES - 1; i++) {
    30c8:	3b3f      	subs	r3, #63	; 0x3f
    30ca:	469c      	mov	ip, r3
    30cc:	44e0      	add	r8, ip
    30ce:	e7ea      	b.n	30a6 <_flash_erase+0x2e>
		_flash_erase_row(device->hw, row_start_addr, NVMCTRL_CTRLA_CMD_ER);
    30d0:	2202      	movs	r2, #2
    30d2:	0021      	movs	r1, r4
    30d4:	6938      	ldr	r0, [r7, #16]
    30d6:	4b11      	ldr	r3, [pc, #68]	; (311c <_flash_erase+0xa4>)
    30d8:	4798      	blx	r3
		row_start_addr += NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE;
    30da:	3401      	adds	r4, #1
    30dc:	34ff      	adds	r4, #255	; 0xff
		page_nums -= NVMCTRL_ROW_PAGES;
    30de:	3d04      	subs	r5, #4
	while (page_nums >= NVMCTRL_ROW_PAGES) {
    30e0:	2d03      	cmp	r5, #3
    30e2:	d8f5      	bhi.n	30d0 <_flash_erase+0x58>
	if (page_nums != 0) {
    30e4:	2d00      	cmp	r5, #0
    30e6:	d00e      	beq.n	3106 <_flash_erase+0x8e>
    30e8:	2300      	movs	r3, #0
    30ea:	4699      	mov	r9, r3
    30ec:	e009      	b.n	3102 <_flash_erase+0x8a>
			_flash_write(device, row_start_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    30ee:	2340      	movs	r3, #64	; 0x40
    30f0:	466a      	mov	r2, sp
    30f2:	0021      	movs	r1, r4
    30f4:	0038      	movs	r0, r7
    30f6:	4e08      	ldr	r6, [pc, #32]	; (3118 <_flash_erase+0xa0>)
    30f8:	47b0      	blx	r6
			row_start_addr += NVMCTRL_PAGE_SIZE;
    30fa:	3440      	adds	r4, #64	; 0x40
		for (i = 0; i < page_nums; i++) {
    30fc:	2301      	movs	r3, #1
    30fe:	469c      	mov	ip, r3
    3100:	44e1      	add	r9, ip
    3102:	454d      	cmp	r5, r9
    3104:	d8f3      	bhi.n	30ee <_flash_erase+0x76>
}
    3106:	b010      	add	sp, #64	; 0x40
    3108:	bc1c      	pop	{r2, r3, r4}
    310a:	4690      	mov	r8, r2
    310c:	4699      	mov	r9, r3
    310e:	46a2      	mov	sl, r4
    3110:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3112:	46c0      	nop			; (mov r8, r8)
    3114:	00006605 	.word	0x00006605
    3118:	00002fa1 	.word	0x00002fa1
    311c:	00002e49 	.word	0x00002e49

00003120 <_flash_is_locked>:
	region_id = dst_addr / (NVMCTRL_FLASH_SIZE / 16);
    3120:	0b89      	lsrs	r1, r1, #14
	return !(hri_nvmctrl_get_LOCK_reg(device->hw, 1 << region_id));
    3122:	6902      	ldr	r2, [r0, #16]
    3124:	0409      	lsls	r1, r1, #16
    3126:	0c09      	lsrs	r1, r1, #16
    3128:	2301      	movs	r3, #1
    312a:	408b      	lsls	r3, r1
	tmp = ((Nvmctrl *)hw)->LOCK.reg;
    312c:	8c10      	ldrh	r0, [r2, #32]
	tmp &= mask;
    312e:	4018      	ands	r0, r3
    3130:	4243      	negs	r3, r0
    3132:	4158      	adcs	r0, r3
    3134:	b2c0      	uxtb	r0, r0
}
    3136:	4770      	bx	lr

00003138 <NVMCTRL_Handler>:

/**
 * \internal NVM interrupt handler
 */
void NVMCTRL_Handler(void)
{
    3138:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
    313a:	4b0a      	ldr	r3, [pc, #40]	; (3164 <NVMCTRL_Handler+0x2c>)
    313c:	6818      	ldr	r0, [r3, #0]
    313e:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    3140:	7d1a      	ldrb	r2, [r3, #20]

	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    3142:	07d2      	lsls	r2, r2, #31
    3144:	d504      	bpl.n	3150 <NVMCTRL_Handler+0x18>
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
    3146:	6803      	ldr	r3, [r0, #0]
    3148:	2b00      	cmp	r3, #0
    314a:	d000      	beq.n	314e <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
    314c:	4798      	blx	r3
		hri_nvmctrl_clear_interrupt_ERROR_bit(hw);
		if (NULL != _nvm_dev->flash_cb.error_cb) {
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
		}
	}
}
    314e:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
    3150:	7d1a      	ldrb	r2, [r3, #20]
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
    3152:	0792      	lsls	r2, r2, #30
    3154:	d5fb      	bpl.n	314e <NVMCTRL_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
    3156:	2202      	movs	r2, #2
    3158:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
    315a:	6843      	ldr	r3, [r0, #4]
    315c:	2b00      	cmp	r3, #0
    315e:	d0f6      	beq.n	314e <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
    3160:	4798      	blx	r3
}
    3162:	e7f4      	b.n	314e <NVMCTRL_Handler+0x16>
    3164:	20000868 	.word	0x20000868

00003168 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    3168:	4b06      	ldr	r3, [pc, #24]	; (3184 <_pm_init+0x1c>)
    316a:	7a1a      	ldrb	r2, [r3, #8]
    316c:	b2d2      	uxtb	r2, r2
    316e:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    3170:	7a5a      	ldrb	r2, [r3, #9]
    3172:	b2d2      	uxtb	r2, r2
    3174:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    3176:	7a9a      	ldrb	r2, [r3, #10]
    3178:	b2d2      	uxtb	r2, r2
    317a:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    317c:	7ada      	ldrb	r2, [r3, #11]
    317e:	b2d2      	uxtb	r2, r2
    3180:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    3182:	4770      	bx	lr
    3184:	40000400 	.word	0x40000400

00003188 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    3188:	4b02      	ldr	r3, [pc, #8]	; (3194 <_sercom_get_hardware_index+0xc>)
    318a:	469c      	mov	ip, r3
    318c:	4460      	add	r0, ip
    318e:	0a80      	lsrs	r0, r0, #10
    3190:	b2c0      	uxtb	r0, r0
}
    3192:	4770      	bx	lr
    3194:	bdfff800 	.word	0xbdfff800

00003198 <_spi_sync_enable>:
		;
}

static inline bool hri_sercomspi_is_syncing(const void *const hw)
{
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
    3198:	8a03      	ldrh	r3, [r0, #16]
    319a:	0bdb      	lsrs	r3, r3, #15
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw)) {
    319c:	d108      	bne.n	31b0 <_spi_sync_enable+0x18>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    319e:	6803      	ldr	r3, [r0, #0]
    31a0:	2202      	movs	r2, #2
    31a2:	4313      	orrs	r3, r2
    31a4:	6003      	str	r3, [r0, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    31a6:	8a03      	ldrh	r3, [r0, #16]
    31a8:	0bdb      	lsrs	r3, r3, #15
    31aa:	d1fc      	bne.n	31a6 <_spi_sync_enable+0xe>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    31ac:	2000      	movs	r0, #0
}
    31ae:	4770      	bx	lr
		return ERR_BUSY;
    31b0:	2004      	movs	r0, #4
    31b2:	4240      	negs	r0, r0
    31b4:	e7fb      	b.n	31ae <_spi_sync_enable+0x16>

000031b6 <_spi_sync_disable>:
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
    31b6:	8a03      	ldrh	r3, [r0, #16]
    31b8:	0bdb      	lsrs	r3, r3, #15
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw)) {
    31ba:	d108      	bne.n	31ce <_spi_sync_disable+0x18>
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    31bc:	6803      	ldr	r3, [r0, #0]
    31be:	2202      	movs	r2, #2
    31c0:	4393      	bics	r3, r2
    31c2:	6003      	str	r3, [r0, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    31c4:	8a03      	ldrh	r3, [r0, #16]
    31c6:	0bdb      	lsrs	r3, r3, #15
    31c8:	d1fc      	bne.n	31c4 <_spi_sync_disable+0xe>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    31ca:	2000      	movs	r0, #0
}
    31cc:	4770      	bx	lr
		return ERR_BUSY;
    31ce:	2004      	movs	r0, #4
    31d0:	4240      	negs	r0, r0
    31d2:	e7fb      	b.n	31cc <_spi_sync_disable+0x16>

000031d4 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    31d4:	b570      	push	{r4, r5, r6, lr}
    31d6:	0006      	movs	r6, r0
    31d8:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    31da:	0008      	movs	r0, r1
    31dc:	4b63      	ldr	r3, [pc, #396]	; (336c <_spi_m_sync_init+0x198>)
    31de:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    31e0:	2300      	movs	r3, #0
    31e2:	2b01      	cmp	r3, #1
    31e4:	d80d      	bhi.n	3202 <_spi_m_sync_init+0x2e>
		if (sercomspi_regs[i].n == n) {
    31e6:	0119      	lsls	r1, r3, #4
    31e8:	4a61      	ldr	r2, [pc, #388]	; (3370 <_spi_m_sync_init+0x19c>)
    31ea:	3238      	adds	r2, #56	; 0x38
    31ec:	1852      	adds	r2, r2, r1
    31ee:	7bd2      	ldrb	r2, [r2, #15]
    31f0:	4290      	cmp	r0, r2
    31f2:	d002      	beq.n	31fa <_spi_m_sync_init+0x26>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    31f4:	3301      	adds	r3, #1
    31f6:	b2db      	uxtb	r3, r3
    31f8:	e7f3      	b.n	31e2 <_spi_m_sync_init+0xe>
			return &sercomspi_regs[i];
    31fa:	4b5d      	ldr	r3, [pc, #372]	; (3370 <_spi_m_sync_init+0x19c>)
    31fc:	3338      	adds	r3, #56	; 0x38
    31fe:	185d      	adds	r5, r3, r1
    3200:	e000      	b.n	3204 <_spi_m_sync_init+0x30>
	return NULL;
    3202:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    3204:	2e00      	cmp	r6, #0
    3206:	d100      	bne.n	320a <_spi_m_sync_init+0x36>
    3208:	e06a      	b.n	32e0 <_spi_m_sync_init+0x10c>
    320a:	2c00      	cmp	r4, #0
    320c:	d100      	bne.n	3210 <_spi_m_sync_init+0x3c>
    320e:	e065      	b.n	32dc <_spi_m_sync_init+0x108>
    3210:	2001      	movs	r0, #1
    3212:	4a58      	ldr	r2, [pc, #352]	; (3374 <_spi_m_sync_init+0x1a0>)
    3214:	4958      	ldr	r1, [pc, #352]	; (3378 <_spi_m_sync_init+0x1a4>)
    3216:	4b59      	ldr	r3, [pc, #356]	; (337c <_spi_m_sync_init+0x1a8>)
    3218:	4798      	blx	r3

	if (regs == NULL) {
    321a:	2d00      	cmp	r5, #0
    321c:	d100      	bne.n	3220 <_spi_m_sync_init+0x4c>
    321e:	e0a2      	b.n	3366 <_spi_m_sync_init+0x192>
    3220:	8a23      	ldrh	r3, [r4, #16]
    3222:	0bdb      	lsrs	r3, r3, #15
    3224:	d1fc      	bne.n	3220 <_spi_m_sync_init+0x4c>
    3226:	8a23      	ldrh	r3, [r4, #16]
    3228:	0bdb      	lsrs	r3, r3, #15
    322a:	d1fc      	bne.n	3226 <_spi_m_sync_init+0x52>
static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw);
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    322c:	6823      	ldr	r3, [r4, #0]
		return ERR_INVALID_ARG;
	}

	hri_sercomspi_wait_for_sync(hw);
	if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    322e:	079b      	lsls	r3, r3, #30
    3230:	d507      	bpl.n	3242 <_spi_m_sync_init+0x6e>
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3232:	2300      	movs	r3, #0
    3234:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    3236:	8a23      	ldrh	r3, [r4, #16]
    3238:	0bdb      	lsrs	r3, r3, #15
    323a:	d1fc      	bne.n	3236 <_spi_m_sync_init+0x62>
    323c:	8a23      	ldrh	r3, [r4, #16]
    323e:	0bdb      	lsrs	r3, r3, #15
    3240:	d1fc      	bne.n	323c <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3242:	2301      	movs	r3, #1
    3244:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    3246:	8a23      	ldrh	r3, [r4, #16]
    3248:	0bdb      	lsrs	r3, r3, #15
    324a:	d1fc      	bne.n	3246 <_spi_m_sync_init+0x72>
    324c:	8a23      	ldrh	r3, [r4, #16]
    324e:	0bdb      	lsrs	r3, r3, #15
    3250:	d1fc      	bne.n	324c <_spi_m_sync_init+0x78>
		hri_sercomspi_wait_for_sync(hw);
	}
	hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST);
	hri_sercomspi_wait_for_sync(hw);

	dev->prvt = hw;
    3252:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    3254:	782b      	ldrb	r3, [r5, #0]
    3256:	786a      	ldrb	r2, [r5, #1]
    3258:	0212      	lsls	r2, r2, #8
    325a:	431a      	orrs	r2, r3
    325c:	78ab      	ldrb	r3, [r5, #2]
    325e:	041b      	lsls	r3, r3, #16
    3260:	431a      	orrs	r2, r3
    3262:	78eb      	ldrb	r3, [r5, #3]
    3264:	061b      	lsls	r3, r3, #24
    3266:	4313      	orrs	r3, r2
    3268:	221c      	movs	r2, #28
    326a:	4013      	ands	r3, r2
    326c:	2b08      	cmp	r3, #8
    326e:	d039      	beq.n	32e4 <_spi_m_sync_init+0x110>
	ASSERT(hw && regs);
    3270:	2c00      	cmp	r4, #0
    3272:	d100      	bne.n	3276 <_spi_m_sync_init+0xa2>
    3274:	e073      	b.n	335e <_spi_m_sync_init+0x18a>
    3276:	2d00      	cmp	r5, #0
    3278:	d100      	bne.n	327c <_spi_m_sync_init+0xa8>
    327a:	e06e      	b.n	335a <_spi_m_sync_init+0x186>
    327c:	2001      	movs	r0, #1
    327e:	4a40      	ldr	r2, [pc, #256]	; (3380 <_spi_m_sync_init+0x1ac>)
    3280:	493d      	ldr	r1, [pc, #244]	; (3378 <_spi_m_sync_init+0x1a4>)
    3282:	4b3e      	ldr	r3, [pc, #248]	; (337c <_spi_m_sync_init+0x1a8>)
    3284:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    3286:	782b      	ldrb	r3, [r5, #0]
    3288:	786a      	ldrb	r2, [r5, #1]
    328a:	0212      	lsls	r2, r2, #8
    328c:	431a      	orrs	r2, r3
    328e:	78ab      	ldrb	r3, [r5, #2]
    3290:	041b      	lsls	r3, r3, #16
    3292:	431a      	orrs	r2, r3
    3294:	78eb      	ldrb	r3, [r5, #3]
    3296:	061b      	lsls	r3, r3, #24
    3298:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    329a:	4a3a      	ldr	r2, [pc, #232]	; (3384 <_spi_m_sync_init+0x1b0>)
    329c:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    329e:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    32a0:	8a23      	ldrh	r3, [r4, #16]
    32a2:	0bdb      	lsrs	r3, r3, #15
    32a4:	d1fc      	bne.n	32a0 <_spi_m_sync_init+0xcc>
	    hw, (regs->ctrlb & ~(SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_PLOADEN)) | (SERCOM_SPI_CTRLB_RXEN));
    32a6:	792b      	ldrb	r3, [r5, #4]
    32a8:	796a      	ldrb	r2, [r5, #5]
    32aa:	0212      	lsls	r2, r2, #8
    32ac:	431a      	orrs	r2, r3
    32ae:	79ab      	ldrb	r3, [r5, #6]
    32b0:	041b      	lsls	r3, r3, #16
    32b2:	431a      	orrs	r2, r3
    32b4:	79eb      	ldrb	r3, [r5, #7]
    32b6:	061b      	lsls	r3, r3, #24
    32b8:	4313      	orrs	r3, r2
    32ba:	4a33      	ldr	r2, [pc, #204]	; (3388 <_spi_m_sync_init+0x1b4>)
    32bc:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    32be:	2280      	movs	r2, #128	; 0x80
    32c0:	0292      	lsls	r2, r2, #10
    32c2:	4313      	orrs	r3, r2
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    32c4:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    32c6:	7b2b      	ldrb	r3, [r5, #12]
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    32c8:	72a3      	strb	r3, [r4, #10]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    32ca:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    32cc:	7223      	strb	r3, [r4, #8]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    32ce:	792b      	ldrb	r3, [r5, #4]
    32d0:	075b      	lsls	r3, r3, #29
    32d2:	d146      	bne.n	3362 <_spi_m_sync_init+0x18e>
    32d4:	2301      	movs	r3, #1
    32d6:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
    32d8:	2000      	movs	r0, #0
}
    32da:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    32dc:	2000      	movs	r0, #0
    32de:	e798      	b.n	3212 <_spi_m_sync_init+0x3e>
    32e0:	2000      	movs	r0, #0
    32e2:	e796      	b.n	3212 <_spi_m_sync_init+0x3e>
	ASSERT(hw && regs);
    32e4:	2c00      	cmp	r4, #0
    32e6:	d036      	beq.n	3356 <_spi_m_sync_init+0x182>
    32e8:	2d00      	cmp	r5, #0
    32ea:	d032      	beq.n	3352 <_spi_m_sync_init+0x17e>
    32ec:	2001      	movs	r0, #1
    32ee:	4a27      	ldr	r2, [pc, #156]	; (338c <_spi_m_sync_init+0x1b8>)
    32f0:	4921      	ldr	r1, [pc, #132]	; (3378 <_spi_m_sync_init+0x1a4>)
    32f2:	4b22      	ldr	r3, [pc, #136]	; (337c <_spi_m_sync_init+0x1a8>)
    32f4:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    32f6:	782b      	ldrb	r3, [r5, #0]
    32f8:	786a      	ldrb	r2, [r5, #1]
    32fa:	0212      	lsls	r2, r2, #8
    32fc:	431a      	orrs	r2, r3
    32fe:	78ab      	ldrb	r3, [r5, #2]
    3300:	041b      	lsls	r3, r3, #16
    3302:	431a      	orrs	r2, r3
    3304:	78eb      	ldrb	r3, [r5, #3]
    3306:	061b      	lsls	r3, r3, #24
    3308:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    330a:	4a1e      	ldr	r2, [pc, #120]	; (3384 <_spi_m_sync_init+0x1b0>)
    330c:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    330e:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    3310:	8a23      	ldrh	r3, [r4, #16]
    3312:	0bdb      	lsrs	r3, r3, #15
    3314:	d1fc      	bne.n	3310 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_CTRLB_reg(hw, regs->ctrlb | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_PLOADEN));
    3316:	792b      	ldrb	r3, [r5, #4]
    3318:	796a      	ldrb	r2, [r5, #5]
    331a:	0212      	lsls	r2, r2, #8
    331c:	431a      	orrs	r2, r3
    331e:	79ab      	ldrb	r3, [r5, #6]
    3320:	041b      	lsls	r3, r3, #16
    3322:	431a      	orrs	r2, r3
    3324:	79eb      	ldrb	r3, [r5, #7]
    3326:	061b      	lsls	r3, r3, #24
    3328:	4313      	orrs	r3, r2
    332a:	4a19      	ldr	r2, [pc, #100]	; (3390 <_spi_m_sync_init+0x1bc>)
    332c:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    332e:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    3330:	7a2b      	ldrb	r3, [r5, #8]
    3332:	7a6a      	ldrb	r2, [r5, #9]
    3334:	0212      	lsls	r2, r2, #8
    3336:	431a      	orrs	r2, r3
    3338:	7aab      	ldrb	r3, [r5, #10]
    333a:	041b      	lsls	r3, r3, #16
    333c:	431a      	orrs	r2, r3
    333e:	7aeb      	ldrb	r3, [r5, #11]
    3340:	061b      	lsls	r3, r3, #24
    3342:	4313      	orrs	r3, r2
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    3344:	6163      	str	r3, [r4, #20]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    3346:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3348:	7223      	strb	r3, [r4, #8]
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
    334a:	8a23      	ldrh	r3, [r4, #16]
    334c:	0bdb      	lsrs	r3, r3, #15
	while (hri_sercomspi_is_syncing(hw))
    334e:	d1fc      	bne.n	334a <_spi_m_sync_init+0x176>
    3350:	e7bd      	b.n	32ce <_spi_m_sync_init+0xfa>
	ASSERT(hw && regs);
    3352:	2000      	movs	r0, #0
    3354:	e7cb      	b.n	32ee <_spi_m_sync_init+0x11a>
    3356:	2000      	movs	r0, #0
    3358:	e7c9      	b.n	32ee <_spi_m_sync_init+0x11a>
	ASSERT(hw && regs);
    335a:	2000      	movs	r0, #0
    335c:	e78f      	b.n	327e <_spi_m_sync_init+0xaa>
    335e:	2000      	movs	r0, #0
    3360:	e78d      	b.n	327e <_spi_m_sync_init+0xaa>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    3362:	2302      	movs	r3, #2
    3364:	e7b7      	b.n	32d6 <_spi_m_sync_init+0x102>
		return ERR_INVALID_ARG;
    3366:	200d      	movs	r0, #13
    3368:	4240      	negs	r0, r0
    336a:	e7b6      	b.n	32da <_spi_m_sync_init+0x106>
    336c:	00003189 	.word	0x00003189
    3370:	00007a5c 	.word	0x00007a5c
    3374:	000008a3 	.word	0x000008a3
    3378:	00007ab4 	.word	0x00007ab4
    337c:	00002b65 	.word	0x00002b65
    3380:	00000872 	.word	0x00000872
    3384:	fffffefc 	.word	0xfffffefc
    3388:	fffd3fbf 	.word	0xfffd3fbf
    338c:	00000883 	.word	0x00000883
    3390:	00020040 	.word	0x00020040

00003394 <_spi_m_sync_enable>:

	return _spi_deinit(hw);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    3394:	b510      	push	{r4, lr}
    3396:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    3398:	d00d      	beq.n	33b6 <_spi_m_sync_enable+0x22>
    339a:	6803      	ldr	r3, [r0, #0]
    339c:	2b00      	cmp	r3, #0
    339e:	d008      	beq.n	33b2 <_spi_m_sync_enable+0x1e>
    33a0:	2001      	movs	r0, #1
    33a2:	4a06      	ldr	r2, [pc, #24]	; (33bc <_spi_m_sync_enable+0x28>)
    33a4:	4906      	ldr	r1, [pc, #24]	; (33c0 <_spi_m_sync_enable+0x2c>)
    33a6:	4b07      	ldr	r3, [pc, #28]	; (33c4 <_spi_m_sync_enable+0x30>)
    33a8:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    33aa:	6820      	ldr	r0, [r4, #0]
    33ac:	4b06      	ldr	r3, [pc, #24]	; (33c8 <_spi_m_sync_enable+0x34>)
    33ae:	4798      	blx	r3
}
    33b0:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    33b2:	2000      	movs	r0, #0
    33b4:	e7f5      	b.n	33a2 <_spi_m_sync_enable+0xe>
    33b6:	2000      	movs	r0, #0
    33b8:	e7f3      	b.n	33a2 <_spi_m_sync_enable+0xe>
    33ba:	46c0      	nop			; (mov r8, r8)
    33bc:	0000090a 	.word	0x0000090a
    33c0:	00007ab4 	.word	0x00007ab4
    33c4:	00002b65 	.word	0x00002b65
    33c8:	00003199 	.word	0x00003199

000033cc <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    33cc:	b510      	push	{r4, lr}
    33ce:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    33d0:	d00d      	beq.n	33ee <_spi_m_sync_disable+0x22>
    33d2:	6803      	ldr	r3, [r0, #0]
    33d4:	2b00      	cmp	r3, #0
    33d6:	d008      	beq.n	33ea <_spi_m_sync_disable+0x1e>
    33d8:	2001      	movs	r0, #1
    33da:	4a06      	ldr	r2, [pc, #24]	; (33f4 <_spi_m_sync_disable+0x28>)
    33dc:	4906      	ldr	r1, [pc, #24]	; (33f8 <_spi_m_sync_disable+0x2c>)
    33de:	4b07      	ldr	r3, [pc, #28]	; (33fc <_spi_m_sync_disable+0x30>)
    33e0:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    33e2:	6820      	ldr	r0, [r4, #0]
    33e4:	4b06      	ldr	r3, [pc, #24]	; (3400 <_spi_m_sync_disable+0x34>)
    33e6:	4798      	blx	r3
}
    33e8:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    33ea:	2000      	movs	r0, #0
    33ec:	e7f5      	b.n	33da <_spi_m_sync_disable+0xe>
    33ee:	2000      	movs	r0, #0
    33f0:	e7f3      	b.n	33da <_spi_m_sync_disable+0xe>
    33f2:	46c0      	nop			; (mov r8, r8)
    33f4:	00000926 	.word	0x00000926
    33f8:	00007ab4 	.word	0x00007ab4
    33fc:	00002b65 	.word	0x00002b65
    3400:	000031b7 	.word	0x000031b7

00003404 <_spi_m_sync_trans>:
	ctrl->txcnt++;
	hri_sercomspi_write_DATA_reg(hw, data);
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    3404:	b570      	push	{r4, r5, r6, lr}
    3406:	b088      	sub	sp, #32
    3408:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    340a:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    340c:	680b      	ldr	r3, [r1, #0]
    340e:	9303      	str	r3, [sp, #12]
    3410:	684b      	ldr	r3, [r1, #4]
    3412:	9304      	str	r3, [sp, #16]
    3414:	2300      	movs	r3, #0
    3416:	9305      	str	r3, [sp, #20]
    3418:	9306      	str	r3, [sp, #24]
    341a:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    341c:	2800      	cmp	r0, #0
    341e:	d014      	beq.n	344a <_spi_m_sync_trans+0x46>
    3420:	2c00      	cmp	r4, #0
    3422:	d010      	beq.n	3446 <_spi_m_sync_trans+0x42>
    3424:	2001      	movs	r0, #1
    3426:	4a2d      	ldr	r2, [pc, #180]	; (34dc <_spi_m_sync_trans+0xd8>)
    3428:	492d      	ldr	r1, [pc, #180]	; (34e0 <_spi_m_sync_trans+0xdc>)
    342a:	4b2e      	ldr	r3, [pc, #184]	; (34e4 <_spi_m_sync_trans+0xe0>)
    342c:	4798      	blx	r3
    342e:	8a23      	ldrh	r3, [r4, #16]
    3430:	0bdb      	lsrs	r3, r3, #15

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(hw)) {
    3432:	d14f      	bne.n	34d4 <_spi_m_sync_trans+0xd0>
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    3434:	8a23      	ldrh	r3, [r4, #16]
    3436:	0bdb      	lsrs	r3, r3, #15
    3438:	d1fc      	bne.n	3434 <_spi_m_sync_trans+0x30>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    343a:	6823      	ldr	r3, [r4, #0]
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    343c:	079b      	lsls	r3, r3, #30
    343e:	d418      	bmi.n	3472 <_spi_m_sync_trans+0x6e>
		return ERR_NOT_INITIALIZED;
    3440:	2014      	movs	r0, #20
    3442:	4240      	negs	r0, r0
    3444:	e044      	b.n	34d0 <_spi_m_sync_trans+0xcc>
	ASSERT(dev && hw);
    3446:	2000      	movs	r0, #0
    3448:	e7ed      	b.n	3426 <_spi_m_sync_trans+0x22>
    344a:	2000      	movs	r0, #0
    344c:	e7eb      	b.n	3426 <_spi_m_sync_trans+0x22>
		return false;
    344e:	2200      	movs	r2, #0
    3450:	e026      	b.n	34a0 <_spi_m_sync_trans+0x9c>
			data |= (*ctrl->txbuf) << 8;
    3452:	7858      	ldrb	r0, [r3, #1]
    3454:	0200      	lsls	r0, r0, #8
    3456:	4301      	orrs	r1, r0
			ctrl->txbuf++;
    3458:	3302      	adds	r3, #2
    345a:	9303      	str	r3, [sp, #12]
	ctrl->txcnt++;
    345c:	3201      	adds	r2, #1
    345e:	9205      	str	r2, [sp, #20]
	hri_sercomspi_write_DATA_reg(hw, data);
    3460:	b289      	uxth	r1, r1
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    3462:	8321      	strh	r1, [r4, #24]
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check(hw, iflag, &ctrl);
			}
		}

		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    3464:	9805      	ldr	r0, [sp, #20]
    3466:	68ab      	ldr	r3, [r5, #8]
    3468:	4298      	cmp	r0, r3
    346a:	d302      	bcc.n	3472 <_spi_m_sync_trans+0x6e>
    346c:	9a06      	ldr	r2, [sp, #24]
    346e:	4293      	cmp	r3, r2
    3470:	d929      	bls.n	34c6 <_spi_m_sync_trans+0xc2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    3472:	7ba3      	ldrb	r3, [r4, #14]
    3474:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    3476:	075a      	lsls	r2, r3, #29
    3478:	d5e9      	bpl.n	344e <_spi_m_sync_trans+0x4a>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.DATA.reg;
    347a:	8b22      	ldrh	r2, [r4, #24]
    347c:	b292      	uxth	r2, r2
	if (ctrl->rxbuf) {
    347e:	9904      	ldr	r1, [sp, #16]
    3480:	2900      	cmp	r1, #0
    3482:	d008      	beq.n	3496 <_spi_m_sync_trans+0x92>
		*ctrl->rxbuf++ = (uint8_t)data;
    3484:	1c48      	adds	r0, r1, #1
    3486:	9004      	str	r0, [sp, #16]
    3488:	700a      	strb	r2, [r1, #0]
		if (ctrl->char_size > 1) {
    348a:	2e01      	cmp	r6, #1
    348c:	d903      	bls.n	3496 <_spi_m_sync_trans+0x92>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    348e:	1c88      	adds	r0, r1, #2
    3490:	9004      	str	r0, [sp, #16]
    3492:	0a12      	lsrs	r2, r2, #8
    3494:	704a      	strb	r2, [r1, #1]
	ctrl->rxcnt++;
    3496:	9a06      	ldr	r2, [sp, #24]
    3498:	9201      	str	r2, [sp, #4]
    349a:	3201      	adds	r2, #1
    349c:	9206      	str	r2, [sp, #24]
	return true;
    349e:	2201      	movs	r2, #1
		if (!_spi_rx_check(hw, iflag, &ctrl)) {
    34a0:	2a00      	cmp	r2, #0
    34a2:	d1df      	bne.n	3464 <_spi_m_sync_trans+0x60>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    34a4:	9906      	ldr	r1, [sp, #24]
    34a6:	9a05      	ldr	r2, [sp, #20]
    34a8:	4291      	cmp	r1, r2
    34aa:	d3db      	bcc.n	3464 <_spi_m_sync_trans+0x60>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    34ac:	07db      	lsls	r3, r3, #31
    34ae:	d5d9      	bpl.n	3464 <_spi_m_sync_trans+0x60>
	if (ctrl->txbuf) {
    34b0:	9b03      	ldr	r3, [sp, #12]
    34b2:	2b00      	cmp	r3, #0
    34b4:	d005      	beq.n	34c2 <_spi_m_sync_trans+0xbe>
		data = *ctrl->txbuf++;
    34b6:	1c59      	adds	r1, r3, #1
    34b8:	9103      	str	r1, [sp, #12]
    34ba:	7819      	ldrb	r1, [r3, #0]
		if (ctrl->char_size > 1) {
    34bc:	2e01      	cmp	r6, #1
    34be:	d8c8      	bhi.n	3452 <_spi_m_sync_trans+0x4e>
    34c0:	e7cc      	b.n	345c <_spi_m_sync_trans+0x58>
		data = SPI_DUMMY_CHAR;
    34c2:	4909      	ldr	r1, [pc, #36]	; (34e8 <_spi_m_sync_trans+0xe4>)
    34c4:	e7ca      	b.n	345c <_spi_m_sync_trans+0x58>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    34c6:	7ba3      	ldrb	r3, [r4, #14]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    34c8:	079b      	lsls	r3, r3, #30
    34ca:	d0fc      	beq.n	34c6 <_spi_m_sync_trans+0xc2>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    34cc:	2303      	movs	r3, #3
    34ce:	73a3      	strb	r3, [r4, #14]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    34d0:	b008      	add	sp, #32
    34d2:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BUSY;
    34d4:	2004      	movs	r0, #4
    34d6:	4240      	negs	r0, r0
    34d8:	e7fa      	b.n	34d0 <_spi_m_sync_trans+0xcc>
    34da:	46c0      	nop			; (mov r8, r8)
    34dc:	00000a01 	.word	0x00000a01
    34e0:	00007ab4 	.word	0x00007ab4
    34e4:	00002b65 	.word	0x00002b65
    34e8:	000001ff 	.word	0x000001ff

000034ec <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    34ec:	4a13      	ldr	r2, [pc, #76]	; (353c <_sysctrl_init_sources+0x50>)
    34ee:	6a11      	ldr	r1, [r2, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    34f0:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    34f2:	6a13      	ldr	r3, [r2, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    34f4:	0f9b      	lsrs	r3, r3, #30
    34f6:	079b      	lsls	r3, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    34f8:	0409      	lsls	r1, r1, #16
    34fa:	4811      	ldr	r0, [pc, #68]	; (3540 <_sysctrl_init_sources+0x54>)
    34fc:	4001      	ands	r1, r0
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    34fe:	430b      	orrs	r3, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    3500:	2102      	movs	r1, #2
    3502:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    3504:	6213      	str	r3, [r2, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    3506:	6993      	ldr	r3, [r2, #24]
	tmp = (tmp & SYSCTRL_OSC32K_CALIB_Msk) >> SYSCTRL_OSC32K_CALIB_Pos;
    3508:	0c1b      	lsrs	r3, r3, #16
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
    350a:	041b      	lsls	r3, r3, #16
    350c:	21fe      	movs	r1, #254	; 0xfe
    350e:	03c9      	lsls	r1, r1, #15
    3510:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    3512:	490c      	ldr	r1, [pc, #48]	; (3544 <_sysctrl_init_sources+0x58>)
    3514:	430b      	orrs	r3, r1
	((Sysctrl *)hw)->OSC32K.reg = data;
    3516:	6193      	str	r3, [r2, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    3518:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    351a:	211f      	movs	r1, #31
    351c:	400b      	ands	r3, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    351e:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    3520:	4b06      	ldr	r3, [pc, #24]	; (353c <_sysctrl_init_sources+0x50>)
    3522:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    3524:	075b      	lsls	r3, r3, #29
    3526:	d5fb      	bpl.n	3520 <_sysctrl_init_sources+0x34>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    3528:	4b04      	ldr	r3, [pc, #16]	; (353c <_sysctrl_init_sources+0x50>)
    352a:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    352c:	071b      	lsls	r3, r3, #28
    352e:	d5fb      	bpl.n	3528 <_sysctrl_init_sources+0x3c>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    3530:	4a02      	ldr	r2, [pc, #8]	; (353c <_sysctrl_init_sources+0x50>)
    3532:	6a13      	ldr	r3, [r2, #32]
    3534:	2180      	movs	r1, #128	; 0x80
    3536:	430b      	orrs	r3, r1
    3538:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    353a:	4770      	bx	lr
    353c:	40000800 	.word	0x40000800
    3540:	0fff0000 	.word	0x0fff0000
    3544:	00000706 	.word	0x00000706

00003548 <_sysctrl_init_referenced_generators>:
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    3548:	4770      	bx	lr
	...

0000354c <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    354c:	4b02      	ldr	r3, [pc, #8]	; (3558 <_system_time_init+0xc>)
    354e:	4a03      	ldr	r2, [pc, #12]	; (355c <_system_time_init+0x10>)
    3550:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    3552:	2205      	movs	r2, #5
    3554:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    3556:	4770      	bx	lr
    3558:	e000e010 	.word	0xe000e010
    355c:	00ffffff 	.word	0x00ffffff

00003560 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    3560:	b510      	push	{r4, lr}
	_system_time_init(hw);
    3562:	4b01      	ldr	r3, [pc, #4]	; (3568 <_delay_init+0x8>)
    3564:	4798      	blx	r3
}
    3566:	bd10      	pop	{r4, pc}
    3568:	0000354d 	.word	0x0000354d

0000356c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    356c:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    356e:	e00b      	b.n	3588 <_delay_cycles+0x1c>
		SysTick->LOAD = 0xFFFFFF;
    3570:	4b0b      	ldr	r3, [pc, #44]	; (35a0 <_delay_cycles+0x34>)
    3572:	480c      	ldr	r0, [pc, #48]	; (35a4 <_delay_cycles+0x38>)
    3574:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    3576:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3578:	4b09      	ldr	r3, [pc, #36]	; (35a0 <_delay_cycles+0x34>)
    357a:	681b      	ldr	r3, [r3, #0]
    357c:	03db      	lsls	r3, r3, #15
    357e:	d5fb      	bpl.n	3578 <_delay_cycles+0xc>
			;
		buf -= 0xFFFFFF;
    3580:	4b09      	ldr	r3, [pc, #36]	; (35a8 <_delay_cycles+0x3c>)
    3582:	469c      	mov	ip, r3
    3584:	4461      	add	r1, ip
	while (n--) {
    3586:	0010      	movs	r0, r2
    3588:	1e42      	subs	r2, r0, #1
    358a:	b2d2      	uxtb	r2, r2
    358c:	2800      	cmp	r0, #0
    358e:	d1ef      	bne.n	3570 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    3590:	4b03      	ldr	r3, [pc, #12]	; (35a0 <_delay_cycles+0x34>)
    3592:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    3594:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3596:	4b02      	ldr	r3, [pc, #8]	; (35a0 <_delay_cycles+0x34>)
    3598:	681b      	ldr	r3, [r3, #0]
    359a:	03db      	lsls	r3, r3, #15
    359c:	d5fb      	bpl.n	3596 <_delay_cycles+0x2a>
		;
}
    359e:	4770      	bx	lr
    35a0:	e000e010 	.word	0xe000e010
    35a4:	00ffffff 	.word	0x00ffffff
    35a8:	ff000001 	.word	0xff000001

000035ac <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    35ac:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    35ae:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    35b0:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    35b2:	07d2      	lsls	r2, r2, #31
    35b4:	d400      	bmi.n	35b8 <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    35b6:	bd10      	pop	{r4, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    35b8:	2201      	movs	r2, #1
    35ba:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    35bc:	6803      	ldr	r3, [r0, #0]
    35be:	4798      	blx	r3
}
    35c0:	e7f9      	b.n	35b6 <tc_interrupt_handler+0xa>
	...

000035c4 <tc_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    35c4:	4b02      	ldr	r3, [pc, #8]	; (35d0 <tc_get_hardware_index+0xc>)
    35c6:	469c      	mov	ip, r3
    35c8:	4460      	add	r0, ip
    35ca:	0a80      	lsrs	r0, r0, #10
    35cc:	b2c0      	uxtb	r0, r0
#else
	return ((uint32_t)hw - TC_HW_BASE_ADDR) / sizeof(Tc);
#endif
}
    35ce:	4770      	bx	lr
    35d0:	bdffe000 	.word	0xbdffe000

000035d4 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    35d4:	4b06      	ldr	r3, [pc, #24]	; (35f0 <_tc_init_irq_param+0x1c>)
    35d6:	4298      	cmp	r0, r3
    35d8:	d003      	beq.n	35e2 <_tc_init_irq_param+0xe>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    35da:	4b06      	ldr	r3, [pc, #24]	; (35f4 <_tc_init_irq_param+0x20>)
    35dc:	4298      	cmp	r0, r3
    35de:	d003      	beq.n	35e8 <_tc_init_irq_param+0x14>
		_tc4_dev = (struct _timer_device *)dev;
	}
}
    35e0:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
    35e2:	4b05      	ldr	r3, [pc, #20]	; (35f8 <_tc_init_irq_param+0x24>)
    35e4:	6019      	str	r1, [r3, #0]
    35e6:	e7f8      	b.n	35da <_tc_init_irq_param+0x6>
		_tc4_dev = (struct _timer_device *)dev;
    35e8:	4b03      	ldr	r3, [pc, #12]	; (35f8 <_tc_init_irq_param+0x24>)
    35ea:	6059      	str	r1, [r3, #4]
}
    35ec:	e7f8      	b.n	35e0 <_tc_init_irq_param+0xc>
    35ee:	46c0      	nop			; (mov r8, r8)
    35f0:	42002000 	.word	0x42002000
    35f4:	42003000 	.word	0x42003000
    35f8:	2000086c 	.word	0x2000086c

000035fc <get_tc_index>:
{
    35fc:	b510      	push	{r4, lr}
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    35fe:	4b0d      	ldr	r3, [pc, #52]	; (3634 <get_tc_index+0x38>)
    3600:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3602:	2300      	movs	r3, #0
    3604:	2b01      	cmp	r3, #1
    3606:	d80b      	bhi.n	3620 <get_tc_index+0x24>
		if (_tcs[i].number == tc_offset) {
    3608:	009a      	lsls	r2, r3, #2
    360a:	18d2      	adds	r2, r2, r3
    360c:	0091      	lsls	r1, r2, #2
    360e:	4a0a      	ldr	r2, [pc, #40]	; (3638 <get_tc_index+0x3c>)
    3610:	5c8a      	ldrb	r2, [r1, r2]
    3612:	4290      	cmp	r0, r2
    3614:	d002      	beq.n	361c <get_tc_index+0x20>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3616:	3301      	adds	r3, #1
    3618:	b2db      	uxtb	r3, r3
    361a:	e7f3      	b.n	3604 <get_tc_index+0x8>
			return i;
    361c:	b258      	sxtb	r0, r3
    361e:	e007      	b.n	3630 <get_tc_index+0x34>
	ASSERT(false);
    3620:	22ad      	movs	r2, #173	; 0xad
    3622:	0052      	lsls	r2, r2, #1
    3624:	4905      	ldr	r1, [pc, #20]	; (363c <get_tc_index+0x40>)
    3626:	2000      	movs	r0, #0
    3628:	4b05      	ldr	r3, [pc, #20]	; (3640 <get_tc_index+0x44>)
    362a:	4798      	blx	r3
	return -1;
    362c:	2001      	movs	r0, #1
    362e:	4240      	negs	r0, r0
}
    3630:	bd10      	pop	{r4, pc}
    3632:	46c0      	nop			; (mov r8, r8)
    3634:	000035c5 	.word	0x000035c5
    3638:	00007ad0 	.word	0x00007ad0
    363c:	00007af8 	.word	0x00007af8
    3640:	00002b65 	.word	0x00002b65

00003644 <_timer_init>:
{
    3644:	b570      	push	{r4, r5, r6, lr}
    3646:	0006      	movs	r6, r0
    3648:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    364a:	0008      	movs	r0, r1
    364c:	4b3f      	ldr	r3, [pc, #252]	; (374c <_timer_init+0x108>)
    364e:	4798      	blx	r3
    3650:	0005      	movs	r5, r0
	device->hw = hw;
    3652:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    3654:	229f      	movs	r2, #159	; 0x9f
    3656:	493e      	ldr	r1, [pc, #248]	; (3750 <_timer_init+0x10c>)
    3658:	2001      	movs	r0, #1
    365a:	4b3e      	ldr	r3, [pc, #248]	; (3754 <_timer_init+0x110>)
    365c:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    365e:	7be3      	ldrb	r3, [r4, #15]
    3660:	09db      	lsrs	r3, r3, #7
    3662:	d1fc      	bne.n	365e <_timer_init+0x1a>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3664:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    3666:	079b      	lsls	r3, r3, #30
    3668:	d504      	bpl.n	3674 <_timer_init+0x30>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    366a:	2300      	movs	r3, #0
    366c:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    366e:	7be3      	ldrb	r3, [r4, #15]
    3670:	09db      	lsrs	r3, r3, #7
    3672:	d1fc      	bne.n	366e <_timer_init+0x2a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3674:	2301      	movs	r3, #1
    3676:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    3678:	7be3      	ldrb	r3, [r4, #15]
    367a:	09db      	lsrs	r3, r3, #7
    367c:	d1fc      	bne.n	3678 <_timer_init+0x34>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    367e:	00aa      	lsls	r2, r5, #2
    3680:	1952      	adds	r2, r2, r5
    3682:	0091      	lsls	r1, r2, #2
    3684:	4b34      	ldr	r3, [pc, #208]	; (3758 <_timer_init+0x114>)
    3686:	185b      	adds	r3, r3, r1
    3688:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    368a:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    368c:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    368e:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    3690:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    3692:	8163      	strh	r3, [r4, #10]
    3694:	230c      	movs	r3, #12
    3696:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3698:	2b08      	cmp	r3, #8
    369a:	d039      	beq.n	3710 <_timer_init+0xcc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    369c:	2b00      	cmp	r3, #0
    369e:	d143      	bne.n	3728 <_timer_init+0xe4>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    36a0:	4a2d      	ldr	r2, [pc, #180]	; (3758 <_timer_init+0x114>)
    36a2:	00ab      	lsls	r3, r5, #2
    36a4:	1958      	adds	r0, r3, r5
    36a6:	0081      	lsls	r1, r0, #2
    36a8:	0008      	movs	r0, r1
    36aa:	1851      	adds	r1, r2, r1
    36ac:	8989      	ldrh	r1, [r1, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    36ae:	8321      	strh	r1, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    36b0:	1812      	adds	r2, r2, r0
    36b2:	8a13      	ldrh	r3, [r2, #16]
    36b4:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    36b6:	2301      	movs	r3, #1
    36b8:	7363      	strb	r3, [r4, #13]
	_tc_init_irq_param(hw, (void *)device);
    36ba:	0031      	movs	r1, r6
    36bc:	0020      	movs	r0, r4
    36be:	4b27      	ldr	r3, [pc, #156]	; (375c <_timer_init+0x118>)
    36c0:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    36c2:	0020      	movs	r0, r4
    36c4:	4b26      	ldr	r3, [pc, #152]	; (3760 <_timer_init+0x11c>)
    36c6:	4798      	blx	r3
    36c8:	300d      	adds	r0, #13
    36ca:	b2c0      	uxtb	r0, r0
    36cc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    36ce:	2b00      	cmp	r3, #0
    36d0:	db0a      	blt.n	36e8 <_timer_init+0xa4>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    36d2:	211f      	movs	r1, #31
    36d4:	4001      	ands	r1, r0
    36d6:	2201      	movs	r2, #1
    36d8:	408a      	lsls	r2, r1
    36da:	2180      	movs	r1, #128	; 0x80
    36dc:	4c21      	ldr	r4, [pc, #132]	; (3764 <_timer_init+0x120>)
    36de:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    36e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    36e4:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    36e8:	2b00      	cmp	r3, #0
    36ea:	db07      	blt.n	36fc <_timer_init+0xb8>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    36ec:	211f      	movs	r1, #31
    36ee:	4001      	ands	r1, r0
    36f0:	2201      	movs	r2, #1
    36f2:	408a      	lsls	r2, r1
    36f4:	21c0      	movs	r1, #192	; 0xc0
    36f6:	0049      	lsls	r1, r1, #1
    36f8:	4c1a      	ldr	r4, [pc, #104]	; (3764 <_timer_init+0x120>)
    36fa:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    36fc:	2b00      	cmp	r3, #0
    36fe:	db05      	blt.n	370c <_timer_init+0xc8>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3700:	231f      	movs	r3, #31
    3702:	4018      	ands	r0, r3
    3704:	3b1e      	subs	r3, #30
    3706:	4083      	lsls	r3, r0
    3708:	4a16      	ldr	r2, [pc, #88]	; (3764 <_timer_init+0x120>)
    370a:	6013      	str	r3, [r2, #0]
}
    370c:	2000      	movs	r0, #0
    370e:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    3710:	4a11      	ldr	r2, [pc, #68]	; (3758 <_timer_init+0x114>)
    3712:	00ab      	lsls	r3, r5, #2
    3714:	1958      	adds	r0, r3, r5
    3716:	0081      	lsls	r1, r0, #2
    3718:	0008      	movs	r0, r1
    371a:	1851      	adds	r1, r2, r1
    371c:	68c9      	ldr	r1, [r1, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    371e:	61a1      	str	r1, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    3720:	1812      	adds	r2, r2, r0
    3722:	6913      	ldr	r3, [r2, #16]
    3724:	61e3      	str	r3, [r4, #28]
    3726:	e7c6      	b.n	36b6 <_timer_init+0x72>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    3728:	2b04      	cmp	r3, #4
    372a:	d1c4      	bne.n	36b6 <_timer_init+0x72>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    372c:	490a      	ldr	r1, [pc, #40]	; (3758 <_timer_init+0x114>)
    372e:	00ab      	lsls	r3, r5, #2
    3730:	1958      	adds	r0, r3, r5
    3732:	0082      	lsls	r2, r0, #2
    3734:	188a      	adds	r2, r1, r2
    3736:	7b10      	ldrb	r0, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    3738:	7620      	strb	r0, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    373a:	7c12      	ldrb	r2, [r2, #16]
    373c:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    373e:	195d      	adds	r5, r3, r5
    3740:	00ab      	lsls	r3, r5, #2
    3742:	18c9      	adds	r1, r1, r3
    3744:	7a0b      	ldrb	r3, [r1, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    3746:	7523      	strb	r3, [r4, #20]
    3748:	e7b5      	b.n	36b6 <_timer_init+0x72>
    374a:	46c0      	nop			; (mov r8, r8)
    374c:	000035fd 	.word	0x000035fd
    3750:	00007af8 	.word	0x00007af8
    3754:	00002b65 	.word	0x00002b65
    3758:	00007ad0 	.word	0x00007ad0
    375c:	000035d5 	.word	0x000035d5
    3760:	000035c5 	.word	0x000035c5
    3764:	e000e100 	.word	0xe000e100

00003768 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    3768:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    376a:	8813      	ldrh	r3, [r2, #0]
    376c:	2102      	movs	r1, #2
    376e:	430b      	orrs	r3, r1
    3770:	b29b      	uxth	r3, r3
    3772:	8013      	strh	r3, [r2, #0]
}
    3774:	4770      	bx	lr

00003776 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    3776:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3778:	881b      	ldrh	r3, [r3, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    377a:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
    377c:	2001      	movs	r0, #1
    377e:	4018      	ands	r0, r3
}
    3780:	4770      	bx	lr

00003782 <_tc_get_timer>:
}
    3782:	2000      	movs	r0, #0
    3784:	4770      	bx	lr
	...

00003788 <_timer_set_irq>:
{
    3788:	b510      	push	{r4, lr}
	_irq_set((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(device->hw)));
    378a:	68c0      	ldr	r0, [r0, #12]
    378c:	4b03      	ldr	r3, [pc, #12]	; (379c <_timer_set_irq+0x14>)
    378e:	4798      	blx	r3
    3790:	300d      	adds	r0, #13
    3792:	b2c0      	uxtb	r0, r0
    3794:	4b02      	ldr	r3, [pc, #8]	; (37a0 <_timer_set_irq+0x18>)
    3796:	4798      	blx	r3
}
    3798:	bd10      	pop	{r4, pc}
    379a:	46c0      	nop			; (mov r8, r8)
    379c:	000035c5 	.word	0x000035c5
    37a0:	00002bf1 	.word	0x00002bf1

000037a4 <TC0_Handler>:
{
    37a4:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc0_dev);
    37a6:	4b02      	ldr	r3, [pc, #8]	; (37b0 <TC0_Handler+0xc>)
    37a8:	6818      	ldr	r0, [r3, #0]
    37aa:	4b02      	ldr	r3, [pc, #8]	; (37b4 <TC0_Handler+0x10>)
    37ac:	4798      	blx	r3
}
    37ae:	bd10      	pop	{r4, pc}
    37b0:	2000086c 	.word	0x2000086c
    37b4:	000035ad 	.word	0x000035ad

000037b8 <TC4_Handler>:
{
    37b8:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc4_dev);
    37ba:	4b02      	ldr	r3, [pc, #8]	; (37c4 <TC4_Handler+0xc>)
    37bc:	6858      	ldr	r0, [r3, #4]
    37be:	4b02      	ldr	r3, [pc, #8]	; (37c8 <TC4_Handler+0x10>)
    37c0:	4798      	blx	r3
}
    37c2:	bd10      	pop	{r4, pc}
    37c4:	2000086c 	.word	0x2000086c
    37c8:	000035ad 	.word	0x000035ad

000037cc <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    37cc:	b510      	push	{r4, lr}
    37ce:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    37d0:	d02a      	beq.n	3828 <_wdt_init+0x5c>
    37d2:	6803      	ldr	r3, [r0, #0]
    37d4:	2b00      	cmp	r3, #0
    37d6:	d025      	beq.n	3824 <_wdt_init+0x58>
    37d8:	2001      	movs	r0, #1
    37da:	224f      	movs	r2, #79	; 0x4f
    37dc:	4916      	ldr	r1, [pc, #88]	; (3838 <_wdt_init+0x6c>)
    37de:	4b17      	ldr	r3, [pc, #92]	; (383c <_wdt_init+0x70>)
    37e0:	4798      	blx	r3

	if (hri_wdt_get_CTRL_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRL_ENABLE_bit(dev->hw)) {
    37e2:	6822      	ldr	r2, [r4, #0]
typedef uint8_t hri_wdt_intflag_reg_t;
typedef uint8_t hri_wdt_status_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw)
{
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    37e4:	79d3      	ldrb	r3, [r2, #7]
    37e6:	09db      	lsrs	r3, r3, #7
    37e8:	d1fc      	bne.n	37e4 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRL_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw);
	tmp = ((Wdt *)hw)->CTRL.reg;
    37ea:	7813      	ldrb	r3, [r2, #0]
	tmp = (tmp & WDT_CTRL_ALWAYSON) >> WDT_CTRL_ALWAYSON_Pos;
    37ec:	09db      	lsrs	r3, r3, #7
    37ee:	d11d      	bne.n	382c <_wdt_init+0x60>
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    37f0:	79d3      	ldrb	r3, [r2, #7]
    37f2:	09db      	lsrs	r3, r3, #7
    37f4:	d1fc      	bne.n	37f0 <_wdt_init+0x24>
	tmp = ((Wdt *)hw)->CTRL.reg;
    37f6:	7813      	ldrb	r3, [r2, #0]
    37f8:	079b      	lsls	r3, r3, #30
    37fa:	d41a      	bmi.n	3832 <_wdt_init+0x66>
	((Wdt *)hw)->CTRL.reg &= ~WDT_CTRL_WEN;
    37fc:	7813      	ldrb	r3, [r2, #0]
    37fe:	2104      	movs	r1, #4
    3800:	438b      	bics	r3, r1
    3802:	7013      	strb	r3, [r2, #0]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    3804:	79d3      	ldrb	r3, [r2, #7]
    3806:	09db      	lsrs	r3, r3, #7
    3808:	d1fc      	bne.n	3804 <_wdt_init+0x38>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRL_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    380a:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    380c:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    380e:	210f      	movs	r1, #15
    3810:	438b      	bics	r3, r1
	tmp |= WDT_CONFIG_PER(data);
    3812:	210b      	movs	r1, #11
    3814:	430b      	orrs	r3, r1
    3816:	b2db      	uxtb	r3, r3
	((Wdt *)hw)->CONFIG.reg = tmp;
    3818:	7053      	strb	r3, [r2, #1]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    381a:	79d3      	ldrb	r3, [r2, #7]
    381c:	09db      	lsrs	r3, r3, #7
    381e:	d1fc      	bne.n	381a <_wdt_init+0x4e>
	}

	return ERR_NONE;
    3820:	2000      	movs	r0, #0
}
    3822:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
    3824:	2000      	movs	r0, #0
    3826:	e7d8      	b.n	37da <_wdt_init+0xe>
    3828:	2000      	movs	r0, #0
    382a:	e7d6      	b.n	37da <_wdt_init+0xe>
		return ERR_DENIED;
    382c:	2011      	movs	r0, #17
    382e:	4240      	negs	r0, r0
    3830:	e7f7      	b.n	3822 <_wdt_init+0x56>
    3832:	2011      	movs	r0, #17
    3834:	4240      	negs	r0, r0
    3836:	e7f4      	b.n	3822 <_wdt_init+0x56>
    3838:	00007b0c 	.word	0x00007b0c
    383c:	00002b65 	.word	0x00002b65

00003840 <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    3840:	b570      	push	{r4, r5, r6, lr}
    3842:	0006      	movs	r6, r0
    3844:	000d      	movs	r5, r1
    3846:	0014      	movs	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    3848:	2800      	cmp	r0, #0
    384a:	d038      	beq.n	38be <_wdt_set_timeout_period+0x7e>
    384c:	6803      	ldr	r3, [r0, #0]
    384e:	2b00      	cmp	r3, #0
    3850:	d033      	beq.n	38ba <_wdt_set_timeout_period+0x7a>
    3852:	2001      	movs	r0, #1
    3854:	2279      	movs	r2, #121	; 0x79
    3856:	493e      	ldr	r1, [pc, #248]	; (3950 <_wdt_set_timeout_period+0x110>)
    3858:	4b3e      	ldr	r3, [pc, #248]	; (3954 <_wdt_set_timeout_period+0x114>)
    385a:	4798      	blx	r3

	if (hri_wdt_get_CTRL_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRL_ENABLE_bit(dev->hw)) {
    385c:	6836      	ldr	r6, [r6, #0]
    385e:	79f3      	ldrb	r3, [r6, #7]
    3860:	09db      	lsrs	r3, r3, #7
    3862:	d1fc      	bne.n	385e <_wdt_set_timeout_period+0x1e>
	tmp = ((Wdt *)hw)->CTRL.reg;
    3864:	7833      	ldrb	r3, [r6, #0]
	tmp = (tmp & WDT_CTRL_ALWAYSON) >> WDT_CTRL_ALWAYSON_Pos;
    3866:	09db      	lsrs	r3, r3, #7
    3868:	d000      	beq.n	386c <_wdt_set_timeout_period+0x2c>
    386a:	e068      	b.n	393e <_wdt_set_timeout_period+0xfe>
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    386c:	79f3      	ldrb	r3, [r6, #7]
    386e:	09db      	lsrs	r3, r3, #7
    3870:	d1fc      	bne.n	386c <_wdt_set_timeout_period+0x2c>
	tmp = ((Wdt *)hw)->CTRL.reg;
    3872:	7833      	ldrb	r3, [r6, #0]
    3874:	079b      	lsls	r3, r3, #30
    3876:	d465      	bmi.n	3944 <_wdt_set_timeout_period+0x104>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    3878:	002a      	movs	r2, r5
    387a:	2300      	movs	r3, #0
    387c:	0020      	movs	r0, r4
    387e:	2100      	movs	r1, #0
    3880:	4c35      	ldr	r4, [pc, #212]	; (3958 <_wdt_set_timeout_period+0x118>)
    3882:	47a0      	blx	r4

		/* check whether overflow*/
		if (tmp >> 32) {
    3884:	2900      	cmp	r1, #0
    3886:	d160      	bne.n	394a <_wdt_set_timeout_period+0x10a>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    3888:	23fa      	movs	r3, #250	; 0xfa
    388a:	029b      	lsls	r3, r3, #10
    388c:	4298      	cmp	r0, r3
    388e:	d04a      	beq.n	3926 <_wdt_set_timeout_period+0xe6>
    3890:	d917      	bls.n	38c2 <_wdt_set_timeout_period+0x82>
    3892:	23fa      	movs	r3, #250	; 0xfa
    3894:	035b      	lsls	r3, r3, #13
    3896:	4298      	cmp	r0, r3
    3898:	d049      	beq.n	392e <_wdt_set_timeout_period+0xee>
    389a:	d92b      	bls.n	38f4 <_wdt_set_timeout_period+0xb4>
    389c:	23fa      	movs	r3, #250	; 0xfa
    389e:	03db      	lsls	r3, r3, #15
    38a0:	4298      	cmp	r0, r3
    38a2:	d048      	beq.n	3936 <_wdt_set_timeout_period+0xf6>
    38a4:	23fa      	movs	r3, #250	; 0xfa
    38a6:	041b      	lsls	r3, r3, #16
    38a8:	4298      	cmp	r0, r3
    38aa:	d046      	beq.n	393a <_wdt_set_timeout_period+0xfa>
    38ac:	23fa      	movs	r3, #250	; 0xfa
    38ae:	039b      	lsls	r3, r3, #14
    38b0:	4298      	cmp	r0, r3
    38b2:	d03e      	beq.n	3932 <_wdt_set_timeout_period+0xf2>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    38b4:	200d      	movs	r0, #13
    38b6:	4240      	negs	r0, r0
    38b8:	e030      	b.n	391c <_wdt_set_timeout_period+0xdc>
	ASSERT(dev && dev->hw);
    38ba:	2000      	movs	r0, #0
    38bc:	e7ca      	b.n	3854 <_wdt_set_timeout_period+0x14>
    38be:	2000      	movs	r0, #0
    38c0:	e7c8      	b.n	3854 <_wdt_set_timeout_period+0x14>
		switch (period_cycles) {
    38c2:	23fa      	movs	r3, #250	; 0xfa
    38c4:	01db      	lsls	r3, r3, #7
    38c6:	4298      	cmp	r0, r3
    38c8:	d029      	beq.n	391e <_wdt_set_timeout_period+0xde>
    38ca:	d809      	bhi.n	38e0 <_wdt_set_timeout_period+0xa0>
    38cc:	23fa      	movs	r3, #250	; 0xfa
    38ce:	015b      	lsls	r3, r3, #5
    38d0:	4298      	cmp	r0, r3
    38d2:	d019      	beq.n	3908 <_wdt_set_timeout_period+0xc8>
    38d4:	23fa      	movs	r3, #250	; 0xfa
    38d6:	019b      	lsls	r3, r3, #6
    38d8:	4298      	cmp	r0, r3
    38da:	d1eb      	bne.n	38b4 <_wdt_set_timeout_period+0x74>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    38dc:	2101      	movs	r1, #1
    38de:	e014      	b.n	390a <_wdt_set_timeout_period+0xca>
		switch (period_cycles) {
    38e0:	23fa      	movs	r3, #250	; 0xfa
    38e2:	021b      	lsls	r3, r3, #8
    38e4:	4298      	cmp	r0, r3
    38e6:	d01c      	beq.n	3922 <_wdt_set_timeout_period+0xe2>
    38e8:	23fa      	movs	r3, #250	; 0xfa
    38ea:	025b      	lsls	r3, r3, #9
    38ec:	4298      	cmp	r0, r3
    38ee:	d1e1      	bne.n	38b4 <_wdt_set_timeout_period+0x74>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    38f0:	2104      	movs	r1, #4
			break;
    38f2:	e00a      	b.n	390a <_wdt_set_timeout_period+0xca>
		switch (period_cycles) {
    38f4:	23fa      	movs	r3, #250	; 0xfa
    38f6:	02db      	lsls	r3, r3, #11
    38f8:	4298      	cmp	r0, r3
    38fa:	d016      	beq.n	392a <_wdt_set_timeout_period+0xea>
    38fc:	23fa      	movs	r3, #250	; 0xfa
    38fe:	031b      	lsls	r3, r3, #12
    3900:	4298      	cmp	r0, r3
    3902:	d1d7      	bne.n	38b4 <_wdt_set_timeout_period+0x74>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    3904:	2107      	movs	r1, #7
			break;
    3906:	e000      	b.n	390a <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    3908:	2100      	movs	r1, #0
	tmp = ((Wdt *)hw)->CONFIG.reg;
    390a:	7873      	ldrb	r3, [r6, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    390c:	220f      	movs	r2, #15
    390e:	4393      	bics	r3, r2
	tmp |= WDT_CONFIG_PER(data);
    3910:	430b      	orrs	r3, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    3912:	7073      	strb	r3, [r6, #1]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    3914:	79f3      	ldrb	r3, [r6, #7]
    3916:	09db      	lsrs	r3, r3, #7
    3918:	d1fc      	bne.n	3914 <_wdt_set_timeout_period+0xd4>
		}
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
    391a:	2000      	movs	r0, #0
}
    391c:	bd70      	pop	{r4, r5, r6, pc}
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    391e:	2102      	movs	r1, #2
			break;
    3920:	e7f3      	b.n	390a <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    3922:	2103      	movs	r1, #3
			break;
    3924:	e7f1      	b.n	390a <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    3926:	2105      	movs	r1, #5
			break;
    3928:	e7ef      	b.n	390a <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    392a:	2106      	movs	r1, #6
			break;
    392c:	e7ed      	b.n	390a <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    392e:	2108      	movs	r1, #8
			break;
    3930:	e7eb      	b.n	390a <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    3932:	2109      	movs	r1, #9
			break;
    3934:	e7e9      	b.n	390a <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    3936:	210a      	movs	r1, #10
			break;
    3938:	e7e7      	b.n	390a <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    393a:	210b      	movs	r1, #11
			break;
    393c:	e7e5      	b.n	390a <_wdt_set_timeout_period+0xca>
		return ERR_DENIED;
    393e:	2011      	movs	r0, #17
    3940:	4240      	negs	r0, r0
    3942:	e7eb      	b.n	391c <_wdt_set_timeout_period+0xdc>
    3944:	2011      	movs	r0, #17
    3946:	4240      	negs	r0, r0
    3948:	e7e8      	b.n	391c <_wdt_set_timeout_period+0xdc>
			return ERR_INVALID_ARG;
    394a:	200d      	movs	r0, #13
    394c:	4240      	negs	r0, r0
    394e:	e7e5      	b.n	391c <_wdt_set_timeout_period+0xdc>
    3950:	00007b0c 	.word	0x00007b0c
    3954:	00002b65 	.word	0x00002b65
    3958:	000064d9 	.word	0x000064d9

0000395c <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    395c:	b510      	push	{r4, lr}
    395e:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    3960:	d014      	beq.n	398c <_wdt_enable+0x30>
    3962:	6803      	ldr	r3, [r0, #0]
    3964:	2b00      	cmp	r3, #0
    3966:	d00f      	beq.n	3988 <_wdt_enable+0x2c>
    3968:	2001      	movs	r0, #1
    396a:	22fa      	movs	r2, #250	; 0xfa
    396c:	4908      	ldr	r1, [pc, #32]	; (3990 <_wdt_enable+0x34>)
    396e:	4b09      	ldr	r3, [pc, #36]	; (3994 <_wdt_enable+0x38>)
    3970:	4798      	blx	r3

	hri_wdt_set_CTRL_ENABLE_bit(dev->hw);
    3972:	6822      	ldr	r2, [r4, #0]
	((Wdt *)hw)->CTRL.reg |= WDT_CTRL_ENABLE;
    3974:	7813      	ldrb	r3, [r2, #0]
    3976:	2102      	movs	r1, #2
    3978:	430b      	orrs	r3, r1
    397a:	b2db      	uxtb	r3, r3
    397c:	7013      	strb	r3, [r2, #0]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    397e:	79d3      	ldrb	r3, [r2, #7]
    3980:	09db      	lsrs	r3, r3, #7
    3982:	d1fc      	bne.n	397e <_wdt_enable+0x22>

	return ERR_NONE;
}
    3984:	2000      	movs	r0, #0
    3986:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
    3988:	2000      	movs	r0, #0
    398a:	e7ee      	b.n	396a <_wdt_enable+0xe>
    398c:	2000      	movs	r0, #0
    398e:	e7ec      	b.n	396a <_wdt_enable+0xe>
    3990:	00007b0c 	.word	0x00007b0c
    3994:	00002b65 	.word	0x00002b65

00003998 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    3998:	b510      	push	{r4, lr}
    399a:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    399c:	d012      	beq.n	39c4 <_wdt_feed+0x2c>
    399e:	6803      	ldr	r3, [r0, #0]
    39a0:	2b00      	cmp	r3, #0
    39a2:	d00d      	beq.n	39c0 <_wdt_feed+0x28>
    39a4:	2001      	movs	r0, #1
    39a6:	228c      	movs	r2, #140	; 0x8c
    39a8:	0052      	lsls	r2, r2, #1
    39aa:	4907      	ldr	r1, [pc, #28]	; (39c8 <_wdt_feed+0x30>)
    39ac:	4b07      	ldr	r3, [pc, #28]	; (39cc <_wdt_feed+0x34>)
    39ae:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    39b0:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_wdt_write_CLEAR_reg(const void *const hw, hri_wdt_clear_reg_t data)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CLEAR.reg = data;
    39b2:	23a5      	movs	r3, #165	; 0xa5
    39b4:	7213      	strb	r3, [r2, #8]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    39b6:	79d3      	ldrb	r3, [r2, #7]
    39b8:	09db      	lsrs	r3, r3, #7
    39ba:	d1fc      	bne.n	39b6 <_wdt_feed+0x1e>

	return ERR_NONE;
}
    39bc:	2000      	movs	r0, #0
    39be:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
    39c0:	2000      	movs	r0, #0
    39c2:	e7f0      	b.n	39a6 <_wdt_feed+0xe>
    39c4:	2000      	movs	r0, #0
    39c6:	e7ee      	b.n	39a6 <_wdt_feed+0xe>
    39c8:	00007b0c 	.word	0x00007b0c
    39cc:	00002b65 	.word	0x00002b65

000039d0 <main>:
#include <atmel_start.h>
#include <sys/time.h>
#include <App/DcaApp.h>


int main(void) {
    39d0:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    39d2:	4b04      	ldr	r3, [pc, #16]	; (39e4 <main+0x14>)
    39d4:	4798      	blx	r3

	// Initialize specific functionality
	DcaApp_Init();
    39d6:	4b04      	ldr	r3, [pc, #16]	; (39e8 <main+0x18>)
    39d8:	4798      	blx	r3

	// Main processing loop
	DcaApp_Entry();
    39da:	4b04      	ldr	r3, [pc, #16]	; (39ec <main+0x1c>)
    39dc:	4798      	blx	r3
	
	// Return Success.
	return true;
}
    39de:	2001      	movs	r0, #1
    39e0:	bd10      	pop	{r4, pc}
    39e2:	46c0      	nop			; (mov r8, r8)
    39e4:	000007d9 	.word	0x000007d9
    39e8:	00000629 	.word	0x00000629
    39ec:	0000024d 	.word	0x0000024d

000039f0 <ENC28_BankSel>:
/**
 * Bank Select
 * @param r
 */
static void ENC28_BankSel(enc28j60_registers_t r)
{
    39f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t a = r & BANK_MASK;
    39f2:	231f      	movs	r3, #31
    39f4:	4398      	bics	r0, r3
    39f6:	0004      	movs	r4, r0

	if (a != sfr_common && a != lastBank) {
    39f8:	28e0      	cmp	r0, #224	; 0xe0
    39fa:	d01c      	beq.n	3a36 <ENC28_BankSel+0x46>
    39fc:	4b0e      	ldr	r3, [pc, #56]	; (3a38 <ENC28_BankSel+0x48>)
    39fe:	781b      	ldrb	r3, [r3, #0]
    3a00:	4298      	cmp	r0, r3
    3a02:	d018      	beq.n	3a36 <ENC28_BankSel+0x46>
		lastBank = a;
    3a04:	4b0c      	ldr	r3, [pc, #48]	; (3a38 <ENC28_BankSel+0x48>)
    3a06:	7018      	strb	r0, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3a08:	25c0      	movs	r5, #192	; 0xc0
    3a0a:	05ed      	lsls	r5, r5, #23
    3a0c:	2680      	movs	r6, #128	; 0x80
    3a0e:	0436      	lsls	r6, r6, #16
    3a10:	616e      	str	r6, [r5, #20]
		// clear the bank bits
		ETH_NCS_LOW();
		ETH_SPI_WRITE8(bfc_inst | 0x1F);
    3a12:	21bf      	movs	r1, #191	; 0xbf
    3a14:	2001      	movs	r0, #1
    3a16:	4f09      	ldr	r7, [pc, #36]	; (3a3c <ENC28_BankSel+0x4c>)
    3a18:	47b8      	blx	r7
		ETH_SPI_WRITE8(0x03);
    3a1a:	2103      	movs	r1, #3
    3a1c:	2001      	movs	r0, #1
    3a1e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3a20:	61ae      	str	r6, [r5, #24]
		ETH_NCS_HIGH();
		NOP();
    3a22:	46c0      	nop			; (mov r8, r8)
		NOP();
    3a24:	46c0      	nop			; (mov r8, r8)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3a26:	616e      	str	r6, [r5, #20]
		// set the needed bits
		ETH_NCS_LOW();
		ETH_SPI_WRITE8(bfs_inst | 0x1F);
    3a28:	219f      	movs	r1, #159	; 0x9f
    3a2a:	2001      	movs	r0, #1
    3a2c:	47b8      	blx	r7
		ETH_SPI_WRITE8(a >> 6);
    3a2e:	09a1      	lsrs	r1, r4, #6
    3a30:	2001      	movs	r0, #1
    3a32:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3a34:	61ae      	str	r6, [r5, #24]
		ETH_NCS_HIGH();
	}
}
    3a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a38:	20004ac0 	.word	0x20004ac0
    3a3c:	0000632d 	.word	0x0000632d

00003a40 <ENC28_Rcr8>:
 * Read 1 byte from SFRs
 * @param a
 * @return
 */
static uint8_t ENC28_Rcr8(enc28j60_registers_t a)
{
    3a40:	b570      	push	{r4, r5, r6, lr}
    3a42:	0006      	movs	r6, r0
	uint8_t v;

	ENC28_BankSel(a);
    3a44:	4b08      	ldr	r3, [pc, #32]	; (3a68 <ENC28_Rcr8+0x28>)
    3a46:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3a48:	24c0      	movs	r4, #192	; 0xc0
    3a4a:	05e4      	lsls	r4, r4, #23
    3a4c:	2580      	movs	r5, #128	; 0x80
    3a4e:	042d      	lsls	r5, r5, #16
    3a50:	6165      	str	r5, [r4, #20]
	ETH_NCS_LOW();
	ETH_SPI_WRITE8(rcr_inst | (a & SFR_MASK));
    3a52:	211f      	movs	r1, #31
    3a54:	4031      	ands	r1, r6
    3a56:	2001      	movs	r0, #1
    3a58:	4e04      	ldr	r6, [pc, #16]	; (3a6c <ENC28_Rcr8+0x2c>)
    3a5a:	47b0      	blx	r6
	v = ETH_SPI_READ8();
    3a5c:	2100      	movs	r1, #0
    3a5e:	2000      	movs	r0, #0
    3a60:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3a62:	61a5      	str	r5, [r4, #24]
	ETH_NCS_HIGH();

	return v;
}
    3a64:	bd70      	pop	{r4, r5, r6, pc}
    3a66:	46c0      	nop			; (mov r8, r8)
    3a68:	000039f1 	.word	0x000039f1
    3a6c:	0000632d 	.word	0x0000632d

00003a70 <ENC28_Bfs>:
 * SFR Bit Field Set
 * @param a
 * @param bits
 */
static void ENC28_Bfs(enc28j60_registers_t a, char bits) // can only be used for ETH Control Registers
{
    3a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a72:	0007      	movs	r7, r0
    3a74:	000c      	movs	r4, r1
	ENC28_BankSel(a);
    3a76:	4b0a      	ldr	r3, [pc, #40]	; (3aa0 <ENC28_Bfs+0x30>)
    3a78:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3a7a:	25c0      	movs	r5, #192	; 0xc0
    3a7c:	05ed      	lsls	r5, r5, #23
    3a7e:	2680      	movs	r6, #128	; 0x80
    3a80:	0436      	lsls	r6, r6, #16
    3a82:	616e      	str	r6, [r5, #20]
	ETH_NCS_LOW();
	ETH_SPI_WRITE8(bfs_inst | (a & SFR_MASK));
    3a84:	211f      	movs	r1, #31
    3a86:	400f      	ands	r7, r1
    3a88:	399f      	subs	r1, #159	; 0x9f
    3a8a:	4339      	orrs	r1, r7
    3a8c:	b249      	sxtb	r1, r1
    3a8e:	b2c9      	uxtb	r1, r1
    3a90:	2001      	movs	r0, #1
    3a92:	4f04      	ldr	r7, [pc, #16]	; (3aa4 <ENC28_Bfs+0x34>)
    3a94:	47b8      	blx	r7
	ETH_SPI_WRITE8(bits);
    3a96:	0021      	movs	r1, r4
    3a98:	2001      	movs	r0, #1
    3a9a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3a9c:	61ae      	str	r6, [r5, #24]
	ETH_NCS_HIGH();
}
    3a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3aa0:	000039f1 	.word	0x000039f1
    3aa4:	0000632d 	.word	0x0000632d

00003aa8 <ENC28_Wcr8>:
{
    3aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3aaa:	0007      	movs	r7, r0
    3aac:	000c      	movs	r4, r1
	ENC28_BankSel(a);
    3aae:	4b0a      	ldr	r3, [pc, #40]	; (3ad8 <ENC28_Wcr8+0x30>)
    3ab0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3ab2:	25c0      	movs	r5, #192	; 0xc0
    3ab4:	05ed      	lsls	r5, r5, #23
    3ab6:	2680      	movs	r6, #128	; 0x80
    3ab8:	0436      	lsls	r6, r6, #16
    3aba:	616e      	str	r6, [r5, #20]
	ETH_SPI_WRITE8(wcr_inst | (a & SFR_MASK));
    3abc:	211f      	movs	r1, #31
    3abe:	4039      	ands	r1, r7
    3ac0:	2340      	movs	r3, #64	; 0x40
    3ac2:	4319      	orrs	r1, r3
    3ac4:	b249      	sxtb	r1, r1
    3ac6:	b2c9      	uxtb	r1, r1
    3ac8:	2001      	movs	r0, #1
    3aca:	4f04      	ldr	r7, [pc, #16]	; (3adc <ENC28_Wcr8+0x34>)
    3acc:	47b8      	blx	r7
	ETH_SPI_WRITE8(v);
    3ace:	0021      	movs	r1, r4
    3ad0:	2001      	movs	r0, #1
    3ad2:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3ad4:	61ae      	str	r6, [r5, #24]
}
    3ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ad8:	000039f1 	.word	0x000039f1
    3adc:	0000632d 	.word	0x0000632d

00003ae0 <ENC28_Wcr16>:
{
    3ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ae2:	46ce      	mov	lr, r9
    3ae4:	4647      	mov	r7, r8
    3ae6:	b580      	push	{r7, lr}
    3ae8:	b083      	sub	sp, #12
    3aea:	0006      	movs	r6, r0
    3aec:	466b      	mov	r3, sp
    3aee:	1d9d      	adds	r5, r3, #6
    3af0:	8029      	strh	r1, [r5, #0]
	ENC28_BankSel(a);
    3af2:	4b14      	ldr	r3, [pc, #80]	; (3b44 <ENC28_Wcr16+0x64>)
    3af4:	4798      	blx	r3
	a &= SFR_MASK;
    3af6:	241f      	movs	r4, #31
    3af8:	4034      	ands	r4, r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3afa:	26c0      	movs	r6, #192	; 0xc0
    3afc:	05f6      	lsls	r6, r6, #23
    3afe:	2780      	movs	r7, #128	; 0x80
    3b00:	043f      	lsls	r7, r7, #16
    3b02:	6177      	str	r7, [r6, #20]
	ETH_SPI_WRITE8(wcr_inst | (a));
    3b04:	2340      	movs	r3, #64	; 0x40
    3b06:	4699      	mov	r9, r3
    3b08:	4649      	mov	r1, r9
    3b0a:	4321      	orrs	r1, r4
    3b0c:	b2c9      	uxtb	r1, r1
    3b0e:	2001      	movs	r0, #1
    3b10:	4b0d      	ldr	r3, [pc, #52]	; (3b48 <ENC28_Wcr16+0x68>)
    3b12:	4698      	mov	r8, r3
    3b14:	4798      	blx	r3
	ETH_SPI_WRITE8(((char *)&v)[0]);
    3b16:	7829      	ldrb	r1, [r5, #0]
    3b18:	2001      	movs	r0, #1
    3b1a:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3b1c:	61b7      	str	r7, [r6, #24]
	NOP();
    3b1e:	46c0      	nop			; (mov r8, r8)
	NOP();
    3b20:	46c0      	nop			; (mov r8, r8)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3b22:	6177      	str	r7, [r6, #20]
	ETH_SPI_WRITE8(wcr_inst | (a + 1));
    3b24:	3401      	adds	r4, #1
    3b26:	464b      	mov	r3, r9
    3b28:	431c      	orrs	r4, r3
    3b2a:	b2e1      	uxtb	r1, r4
    3b2c:	2001      	movs	r0, #1
    3b2e:	47c0      	blx	r8
	ETH_SPI_WRITE8(((char *)&v)[1]);
    3b30:	7869      	ldrb	r1, [r5, #1]
    3b32:	2001      	movs	r0, #1
    3b34:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3b36:	61b7      	str	r7, [r6, #24]
}
    3b38:	b003      	add	sp, #12
    3b3a:	bc0c      	pop	{r2, r3}
    3b3c:	4690      	mov	r8, r2
    3b3e:	4699      	mov	r9, r3
    3b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b42:	46c0      	nop			; (mov r8, r8)
    3b44:	000039f1 	.word	0x000039f1
    3b48:	0000632d 	.word	0x0000632d

00003b4c <ENC28_PhyWrite>:
 * Write PHY  register
 * @param a
 * @param d
 */
static void ENC28_PhyWrite(enc28j60_phy_registers_t a, uint16_t d)
{
    3b4c:	b510      	push	{r4, lr}
    3b4e:	000c      	movs	r4, r1
	uint8_t v = 1;

	ENC28_Wcr8(J60_MIREGADR, a);
    3b50:	0001      	movs	r1, r0
    3b52:	2094      	movs	r0, #148	; 0x94
    3b54:	4b06      	ldr	r3, [pc, #24]	; (3b70 <ENC28_PhyWrite+0x24>)
    3b56:	4798      	blx	r3
	ENC28_Wcr16(J60_MIWRL, d);
    3b58:	0021      	movs	r1, r4
    3b5a:	2096      	movs	r0, #150	; 0x96
    3b5c:	4b05      	ldr	r3, [pc, #20]	; (3b74 <ENC28_PhyWrite+0x28>)
    3b5e:	4798      	blx	r3
	uint8_t v = 1;
    3b60:	2001      	movs	r0, #1
	while (v & 0x01) {
    3b62:	e002      	b.n	3b6a <ENC28_PhyWrite+0x1e>
		v = ENC28_Rcr8(J60_MISTAT);
    3b64:	20ca      	movs	r0, #202	; 0xca
    3b66:	4b04      	ldr	r3, [pc, #16]	; (3b78 <ENC28_PhyWrite+0x2c>)
    3b68:	4798      	blx	r3
	while (v & 0x01) {
    3b6a:	07c3      	lsls	r3, r0, #31
    3b6c:	d4fa      	bmi.n	3b64 <ENC28_PhyWrite+0x18>
	}
}
    3b6e:	bd10      	pop	{r4, pc}
    3b70:	00003aa9 	.word	0x00003aa9
    3b74:	00003ae1 	.word	0x00003ae1
    3b78:	00003a41 	.word	0x00003a41

00003b7c <ENC28_Rcr16>:
{
    3b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b7e:	46c6      	mov	lr, r8
    3b80:	b500      	push	{lr}
    3b82:	b082      	sub	sp, #8
    3b84:	0005      	movs	r5, r0
	ENC28_BankSel(a);
    3b86:	4b13      	ldr	r3, [pc, #76]	; (3bd4 <ENC28_Rcr16+0x58>)
    3b88:	4798      	blx	r3
	a &= SFR_MASK;
    3b8a:	241f      	movs	r4, #31
    3b8c:	402c      	ands	r4, r5
    3b8e:	46a0      	mov	r8, r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3b90:	25c0      	movs	r5, #192	; 0xc0
    3b92:	05ed      	lsls	r5, r5, #23
    3b94:	2780      	movs	r7, #128	; 0x80
    3b96:	043f      	lsls	r7, r7, #16
    3b98:	616f      	str	r7, [r5, #20]
	ETH_SPI_WRITE8(rcr_inst | (a));
    3b9a:	0021      	movs	r1, r4
    3b9c:	2001      	movs	r0, #1
    3b9e:	4c0e      	ldr	r4, [pc, #56]	; (3bd8 <ENC28_Rcr16+0x5c>)
    3ba0:	47a0      	blx	r4
	((char *)&v)[0] = ETH_SPI_READ8();
    3ba2:	2100      	movs	r1, #0
    3ba4:	2000      	movs	r0, #0
    3ba6:	47a0      	blx	r4
    3ba8:	466b      	mov	r3, sp
    3baa:	1d9e      	adds	r6, r3, #6
    3bac:	7030      	strb	r0, [r6, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3bae:	61af      	str	r7, [r5, #24]
	NOP();
    3bb0:	46c0      	nop			; (mov r8, r8)
	NOP();
    3bb2:	46c0      	nop			; (mov r8, r8)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3bb4:	616f      	str	r7, [r5, #20]
	ETH_SPI_WRITE8(rcr_inst | (a + 1));
    3bb6:	4643      	mov	r3, r8
    3bb8:	1c59      	adds	r1, r3, #1
    3bba:	2001      	movs	r0, #1
    3bbc:	47a0      	blx	r4
	((char *)&v)[1] = ETH_SPI_READ8();
    3bbe:	2100      	movs	r1, #0
    3bc0:	2000      	movs	r0, #0
    3bc2:	47a0      	blx	r4
    3bc4:	7070      	strb	r0, [r6, #1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3bc6:	61af      	str	r7, [r5, #24]
	return v;
    3bc8:	8830      	ldrh	r0, [r6, #0]
}
    3bca:	b002      	add	sp, #8
    3bcc:	bc04      	pop	{r2}
    3bce:	4690      	mov	r8, r2
    3bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bd2:	46c0      	nop			; (mov r8, r8)
    3bd4:	000039f1 	.word	0x000039f1
    3bd8:	0000632d 	.word	0x0000632d

00003bdc <ENC28_Bfc>:
{
    3bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bde:	0007      	movs	r7, r0
    3be0:	000c      	movs	r4, r1
	ENC28_BankSel(a);
    3be2:	4b0a      	ldr	r3, [pc, #40]	; (3c0c <ENC28_Bfc+0x30>)
    3be4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3be6:	25c0      	movs	r5, #192	; 0xc0
    3be8:	05ed      	lsls	r5, r5, #23
    3bea:	2680      	movs	r6, #128	; 0x80
    3bec:	0436      	lsls	r6, r6, #16
    3bee:	616e      	str	r6, [r5, #20]
	ETH_SPI_WRITE8(bfc_inst | (a & SFR_MASK));
    3bf0:	211f      	movs	r1, #31
    3bf2:	400f      	ands	r7, r1
    3bf4:	397f      	subs	r1, #127	; 0x7f
    3bf6:	4339      	orrs	r1, r7
    3bf8:	b249      	sxtb	r1, r1
    3bfa:	b2c9      	uxtb	r1, r1
    3bfc:	2001      	movs	r0, #1
    3bfe:	4f04      	ldr	r7, [pc, #16]	; (3c10 <ENC28_Bfc+0x34>)
    3c00:	47b8      	blx	r7
	ETH_SPI_WRITE8(bits);
    3c02:	0021      	movs	r1, r4
    3c04:	2001      	movs	r0, #1
    3c06:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3c08:	61ae      	str	r6, [r5, #24]
}
    3c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c0c:	000039f1 	.word	0x000039f1
    3c10:	0000632d 	.word	0x0000632d

00003c14 <ENC28_PhyRead>:
 * Read PHY register
 * @param a
 * @return
 */
static uint16_t ENC28_PhyRead(enc28j60_phy_registers_t a)
{
    3c14:	b510      	push	{r4, lr}
    3c16:	0001      	movs	r1, r0
	ENC28_Wcr8(J60_MIREGADR, a);
    3c18:	2094      	movs	r0, #148	; 0x94
    3c1a:	4b09      	ldr	r3, [pc, #36]	; (3c40 <ENC28_PhyRead+0x2c>)
    3c1c:	4798      	blx	r3
	ENC28_Bfs(J60_MICMD, 0x01); // set the read flag
    3c1e:	2101      	movs	r1, #1
    3c20:	2092      	movs	r0, #146	; 0x92
    3c22:	4b08      	ldr	r3, [pc, #32]	; (3c44 <ENC28_PhyRead+0x30>)
    3c24:	4798      	blx	r3
	while (ENC28_Rcr8(J60_MISTAT) & 0x01)
    3c26:	20ca      	movs	r0, #202	; 0xca
    3c28:	4b07      	ldr	r3, [pc, #28]	; (3c48 <ENC28_PhyRead+0x34>)
    3c2a:	4798      	blx	r3
    3c2c:	07c3      	lsls	r3, r0, #31
    3c2e:	d4fa      	bmi.n	3c26 <ENC28_PhyRead+0x12>
		;                       // wait for the busy flag to clear
	ENC28_Bfc(J60_MICMD, 0x01); // clear the read flag
    3c30:	2101      	movs	r1, #1
    3c32:	2092      	movs	r0, #146	; 0x92
    3c34:	4b05      	ldr	r3, [pc, #20]	; (3c4c <ENC28_PhyRead+0x38>)
    3c36:	4798      	blx	r3

	return ENC28_Rcr16(J60_MIRDL);
    3c38:	2098      	movs	r0, #152	; 0x98
    3c3a:	4b05      	ldr	r3, [pc, #20]	; (3c50 <ENC28_PhyRead+0x3c>)
    3c3c:	4798      	blx	r3
}
    3c3e:	bd10      	pop	{r4, pc}
    3c40:	00003aa9 	.word	0x00003aa9
    3c44:	00003a71 	.word	0x00003a71
    3c48:	00003a41 	.word	0x00003a41
    3c4c:	00003bdd 	.word	0x00003bdd
    3c50:	00003b7d 	.word	0x00003b7d

00003c54 <ETH_NextPacketUpdate>:
{
    3c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (nextPacketPointer == RXSTART)
    3c56:	4b1c      	ldr	r3, [pc, #112]	; (3cc8 <ETH_NextPacketUpdate+0x74>)
    3c58:	8819      	ldrh	r1, [r3, #0]
    3c5a:	2900      	cmp	r1, #0
    3c5c:	d02f      	beq.n	3cbe <ETH_NextPacketUpdate+0x6a>
		ENC28_Wcr16(J60_ERXRDPTL, nextPacketPointer - 1);
    3c5e:	3901      	subs	r1, #1
    3c60:	b289      	uxth	r1, r1
    3c62:	200c      	movs	r0, #12
    3c64:	4b19      	ldr	r3, [pc, #100]	; (3ccc <ETH_NextPacketUpdate+0x78>)
    3c66:	4798      	blx	r3
	ENC28_Wcr16(J60_ERDPTL, nextPacketPointer);
    3c68:	4c17      	ldr	r4, [pc, #92]	; (3cc8 <ETH_NextPacketUpdate+0x74>)
    3c6a:	8821      	ldrh	r1, [r4, #0]
    3c6c:	2000      	movs	r0, #0
    3c6e:	4b17      	ldr	r3, [pc, #92]	; (3ccc <ETH_NextPacketUpdate+0x78>)
    3c70:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3c72:	26c0      	movs	r6, #192	; 0xc0
    3c74:	05f6      	lsls	r6, r6, #23
    3c76:	2780      	movs	r7, #128	; 0x80
    3c78:	043f      	lsls	r7, r7, #16
    3c7a:	6177      	str	r7, [r6, #20]
	ETH_SPI_WRITE8(rbm_inst);
    3c7c:	213a      	movs	r1, #58	; 0x3a
    3c7e:	2001      	movs	r0, #1
    3c80:	4d13      	ldr	r5, [pc, #76]	; (3cd0 <ETH_NextPacketUpdate+0x7c>)
    3c82:	47a8      	blx	r5
	((char *)&nextPacketPointer)[0]    = ETH_SPI_READ8();
    3c84:	2100      	movs	r1, #0
    3c86:	2000      	movs	r0, #0
    3c88:	47a8      	blx	r5
    3c8a:	7020      	strb	r0, [r4, #0]
	((char *)&nextPacketPointer)[1]    = ETH_SPI_READ8();
    3c8c:	2100      	movs	r1, #0
    3c8e:	2000      	movs	r0, #0
    3c90:	47a8      	blx	r5
    3c92:	7060      	strb	r0, [r4, #1]
	((char *)&rxPacketStatusVector)[0] = ETH_SPI_READ8();
    3c94:	2100      	movs	r1, #0
    3c96:	2000      	movs	r0, #0
    3c98:	47a8      	blx	r5
    3c9a:	7120      	strb	r0, [r4, #4]
	((char *)&rxPacketStatusVector)[1] = ETH_SPI_READ8();
    3c9c:	2100      	movs	r1, #0
    3c9e:	2000      	movs	r0, #0
    3ca0:	47a8      	blx	r5
    3ca2:	7160      	strb	r0, [r4, #5]
	((char *)&rxPacketStatusVector)[2] = ETH_SPI_READ8();
    3ca4:	2100      	movs	r1, #0
    3ca6:	2000      	movs	r0, #0
    3ca8:	47a8      	blx	r5
    3caa:	71a0      	strb	r0, [r4, #6]
	((char *)&rxPacketStatusVector)[3] = ETH_SPI_READ8();
    3cac:	2100      	movs	r1, #0
    3cae:	2000      	movs	r0, #0
    3cb0:	47a8      	blx	r5
    3cb2:	71e0      	strb	r0, [r4, #7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3cb4:	61b7      	str	r7, [r6, #24]
	rxPacketStatusVector.byteCount -= 4; // I don't care about the frame checksum at the end.
    3cb6:	88a3      	ldrh	r3, [r4, #4]
    3cb8:	3b04      	subs	r3, #4
    3cba:	80a3      	strh	r3, [r4, #4]
}
    3cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ENC28_Wcr16(J60_ERXRDPTL, RXEND);
    3cbe:	4905      	ldr	r1, [pc, #20]	; (3cd4 <ETH_NextPacketUpdate+0x80>)
    3cc0:	200c      	movs	r0, #12
    3cc2:	4b02      	ldr	r3, [pc, #8]	; (3ccc <ETH_NextPacketUpdate+0x78>)
    3cc4:	4798      	blx	r3
    3cc6:	e7cf      	b.n	3c68 <ETH_NextPacketUpdate+0x14>
    3cc8:	20000874 	.word	0x20000874
    3ccc:	00003ae1 	.word	0x00003ae1
    3cd0:	0000632d 	.word	0x0000632d
    3cd4:	00001a21 	.word	0x00001a21

00003cd8 <ETH_SendSystemReset>:

/**
 * System Software Reset
 */
void ETH_SendSystemReset(void)
{
    3cd8:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3cda:	24c0      	movs	r4, #192	; 0xc0
    3cdc:	05e4      	lsls	r4, r4, #23
    3cde:	2580      	movs	r5, #128	; 0x80
    3ce0:	042d      	lsls	r5, r5, #16
    3ce2:	6165      	str	r5, [r4, #20]
	ETH_NCS_LOW();
	ETH_SPI_WRITE8(src_inst);
    3ce4:	21ff      	movs	r1, #255	; 0xff
    3ce6:	2001      	movs	r0, #1
    3ce8:	4b01      	ldr	r3, [pc, #4]	; (3cf0 <ETH_SendSystemReset+0x18>)
    3cea:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3cec:	61a5      	str	r5, [r4, #24]
	ETH_NCS_HIGH();
}
    3cee:	bd70      	pop	{r4, r5, r6, pc}
    3cf0:	0000632d 	.word	0x0000632d

00003cf4 <ETH_CheckLinkUp>:
/**
 * Check for the link presence
 * @return
 */
bool ETH_CheckLinkUp()
{
    3cf4:	b510      	push	{r4, lr}
	uint16_t phstat2;

	phstat2 = ENC28_PhyRead(J60_PHSTAT2);
    3cf6:	2011      	movs	r0, #17
    3cf8:	4b06      	ldr	r3, [pc, #24]	; (3d14 <ETH_CheckLinkUp+0x20>)
    3cfa:	4798      	blx	r3

	if (phstat2 & 0x0400) {
    3cfc:	0543      	lsls	r3, r0, #21
    3cfe:	d506      	bpl.n	3d0e <ETH_CheckLinkUp+0x1a>
		ethData.up = true;
    3d00:	4a05      	ldr	r2, [pc, #20]	; (3d18 <ETH_CheckLinkUp+0x24>)
    3d02:	7813      	ldrb	r3, [r2, #0]
    3d04:	2104      	movs	r1, #4
    3d06:	430b      	orrs	r3, r1
    3d08:	7013      	strb	r3, [r2, #0]
		return true;
    3d0a:	2001      	movs	r0, #1
	} else
		return false;
}
    3d0c:	bd10      	pop	{r4, pc}
		return false;
    3d0e:	2000      	movs	r0, #0
    3d10:	e7fc      	b.n	3d0c <ETH_CheckLinkUp+0x18>
    3d12:	46c0      	nop			; (mov r8, r8)
    3d14:	00003c15 	.word	0x00003c15
    3d18:	20004ab8 	.word	0x20004ab8

00003d1c <ETH_Init>:
{
    3d1c:	b570      	push	{r4, r5, r6, lr}
	ethData.error      = false; // no error
    3d1e:	4b41      	ldr	r3, [pc, #260]	; (3e24 <ETH_Init+0x108>)
    3d20:	781a      	ldrb	r2, [r3, #0]
    3d22:	2101      	movs	r1, #1
    3d24:	438a      	bics	r2, r1
    3d26:	701a      	strb	r2, [r3, #0]
	ethData.up         = false; // no link
    3d28:	781a      	ldrb	r2, [r3, #0]
    3d2a:	3103      	adds	r1, #3
    3d2c:	438a      	bics	r2, r1
    3d2e:	701a      	strb	r2, [r3, #0]
	ethData.linkChange = false;
    3d30:	781a      	ldrb	r2, [r3, #0]
    3d32:	310c      	adds	r1, #12
    3d34:	438a      	bics	r2, r1
    3d36:	701a      	strb	r2, [r3, #0]
	ethData.bufferBusy = false; // transmit data buffer is free
    3d38:	781a      	ldrb	r2, [r3, #0]
    3d3a:	3110      	adds	r1, #16
    3d3c:	438a      	bics	r2, r1
    3d3e:	701a      	strb	r2, [r3, #0]
	ethData.saveRDPT   = 0;
    3d40:	2200      	movs	r2, #0
    3d42:	809a      	strh	r2, [r3, #4]
	lastBank = sfr_bank0;
    3d44:	4b38      	ldr	r3, [pc, #224]	; (3e28 <ETH_Init+0x10c>)
    3d46:	701a      	strb	r2, [r3, #0]
	__delay_us(100);
    3d48:	2064      	movs	r0, #100	; 0x64
    3d4a:	4b38      	ldr	r3, [pc, #224]	; (3e2c <ETH_Init+0x110>)
    3d4c:	4798      	blx	r3
	ETH_SendSystemReset(); // software reset
    3d4e:	4b38      	ldr	r3, [pc, #224]	; (3e30 <ETH_Init+0x114>)
    3d50:	4798      	blx	r3
	__delay_ms(10);
    3d52:	200a      	movs	r0, #10
    3d54:	4b37      	ldr	r3, [pc, #220]	; (3e34 <ETH_Init+0x118>)
    3d56:	4798      	blx	r3
	while (!(ENC28_Rcr8(J60_ESTAT) & 0x01))
    3d58:	20fd      	movs	r0, #253	; 0xfd
    3d5a:	4b37      	ldr	r3, [pc, #220]	; (3e38 <ETH_Init+0x11c>)
    3d5c:	4798      	blx	r3
    3d5e:	07c3      	lsls	r3, r0, #31
    3d60:	d5fa      	bpl.n	3d58 <ETH_Init+0x3c>
	nextPacketPointer = RXSTART;
    3d62:	4e36      	ldr	r6, [pc, #216]	; (3e3c <ETH_Init+0x120>)
    3d64:	2300      	movs	r3, #0
    3d66:	8033      	strh	r3, [r6, #0]
	ENC28_Bfs(J60_ECON2, 0x80); // enable AUTOINC
    3d68:	2180      	movs	r1, #128	; 0x80
    3d6a:	20fe      	movs	r0, #254	; 0xfe
    3d6c:	4b34      	ldr	r3, [pc, #208]	; (3e40 <ETH_Init+0x124>)
    3d6e:	4798      	blx	r3
	ENC28_Wcr16(J60_ETXSTL, TXSTART);
    3d70:	4c34      	ldr	r4, [pc, #208]	; (3e44 <ETH_Init+0x128>)
    3d72:	0021      	movs	r1, r4
    3d74:	2004      	movs	r0, #4
    3d76:	4d34      	ldr	r5, [pc, #208]	; (3e48 <ETH_Init+0x12c>)
    3d78:	47a8      	blx	r5
	ENC28_Wcr16(J60_ETXNDL, TXEND);
    3d7a:	4934      	ldr	r1, [pc, #208]	; (3e4c <ETH_Init+0x130>)
    3d7c:	2006      	movs	r0, #6
    3d7e:	47a8      	blx	r5
	ENC28_Wcr16(J60_ERXSTL, RXSTART);
    3d80:	2100      	movs	r1, #0
    3d82:	2008      	movs	r0, #8
    3d84:	47a8      	blx	r5
	ENC28_Wcr16(J60_ERXNDL, RXEND);
    3d86:	4932      	ldr	r1, [pc, #200]	; (3e50 <ETH_Init+0x134>)
    3d88:	200a      	movs	r0, #10
    3d8a:	47a8      	blx	r5
	ENC28_Wcr16(J60_ERDPTL, nextPacketPointer);
    3d8c:	8831      	ldrh	r1, [r6, #0]
    3d8e:	2000      	movs	r0, #0
    3d90:	47a8      	blx	r5
	ENC28_Wcr16(J60_ERDPTL, RXSTART);
    3d92:	2100      	movs	r1, #0
    3d94:	2000      	movs	r0, #0
    3d96:	47a8      	blx	r5
	ENC28_Wcr16(J60_EWRPTL, TXSTART);
    3d98:	0021      	movs	r1, r4
    3d9a:	2002      	movs	r0, #2
    3d9c:	47a8      	blx	r5
	ENC28_Wcr8(J60_ERXFCON, 0b10101001); // UCEN,OR,CRCEN,MPEN,BCEN (unicast,crc,magic packet,broadcast)
    3d9e:	21a9      	movs	r1, #169	; 0xa9
    3da0:	2058      	movs	r0, #88	; 0x58
    3da2:	4c2c      	ldr	r4, [pc, #176]	; (3e54 <ETH_Init+0x138>)
    3da4:	47a0      	blx	r4
	ENC28_Wcr8(J60_MACON1, 0x0D); // TXPAUS, RXPAUS, MARXEN
    3da6:	210d      	movs	r1, #13
    3da8:	2080      	movs	r0, #128	; 0x80
    3daa:	47a0      	blx	r4
	ENC28_Wcr8(J60_MACON3, 0xB2); // VLAN padded to 64 bytes (others pad to 60 bytes), Enable CRC, Frame Check, Half Duplex
    3dac:	21b2      	movs	r1, #178	; 0xb2
    3dae:	2082      	movs	r0, #130	; 0x82
    3db0:	47a0      	blx	r4
	ENC28_Wcr8(J60_MACON4, 0x40); // DEFER set
    3db2:	2140      	movs	r1, #64	; 0x40
    3db4:	2083      	movs	r0, #131	; 0x83
    3db6:	47a0      	blx	r4
	ENC28_Wcr16(J60_MAIPGL, 0x0c12);
    3db8:	4927      	ldr	r1, [pc, #156]	; (3e58 <ETH_Init+0x13c>)
    3dba:	2086      	movs	r0, #134	; 0x86
    3dbc:	47a8      	blx	r5
	ENC28_Wcr8(J60_MABBIPG, 0x12);
    3dbe:	2112      	movs	r1, #18
    3dc0:	2084      	movs	r0, #132	; 0x84
    3dc2:	47a0      	blx	r4
	ENC28_Wcr16(J60_MAMXFLL, MAX_TX_PACKET);
    3dc4:	4925      	ldr	r1, [pc, #148]	; (3e5c <ETH_Init+0x140>)
    3dc6:	208a      	movs	r0, #138	; 0x8a
    3dc8:	47a8      	blx	r5
    ENC28_Wcr8(J60_ECOCON, 0x00); // RNG: Disable the clock out output to reduce EMI generation
    3dca:	2100      	movs	r1, #0
    3dcc:	20d5      	movs	r0, #213	; 0xd5
    3dce:	47a0      	blx	r4
	ENC28_Wcr8(J60_MAADR1, eth_MAC.mac_array[0]);
    3dd0:	7a31      	ldrb	r1, [r6, #8]
    3dd2:	20c4      	movs	r0, #196	; 0xc4
    3dd4:	47a0      	blx	r4
	ENC28_Wcr8(J60_MAADR2, eth_MAC.mac_array[1]);
    3dd6:	7a71      	ldrb	r1, [r6, #9]
    3dd8:	20c5      	movs	r0, #197	; 0xc5
    3dda:	47a0      	blx	r4
	ENC28_Wcr8(J60_MAADR3, eth_MAC.mac_array[2]);
    3ddc:	7ab1      	ldrb	r1, [r6, #10]
    3dde:	20c2      	movs	r0, #194	; 0xc2
    3de0:	47a0      	blx	r4
	ENC28_Wcr8(J60_MAADR4, eth_MAC.mac_array[3]);
    3de2:	7af1      	ldrb	r1, [r6, #11]
    3de4:	20c3      	movs	r0, #195	; 0xc3
    3de6:	47a0      	blx	r4
	ENC28_Wcr8(J60_MAADR5, eth_MAC.mac_array[4]);
    3de8:	7b31      	ldrb	r1, [r6, #12]
    3dea:	20c0      	movs	r0, #192	; 0xc0
    3dec:	47a0      	blx	r4
	ENC28_Wcr8(J60_MAADR6, eth_MAC.mac_array[5]);
    3dee:	7b71      	ldrb	r1, [r6, #13]
    3df0:	20c1      	movs	r0, #193	; 0xc1
    3df2:	47a0      	blx	r4
	ENC28_Wcr8(J60_ECON1, 0x04); // RXEN enabled
    3df4:	2104      	movs	r1, #4
    3df6:	20ff      	movs	r0, #255	; 0xff
    3df8:	47a0      	blx	r4
	ENC28_PhyWrite(J60_PHCON1, 0x0000);
    3dfa:	2100      	movs	r1, #0
    3dfc:	2000      	movs	r0, #0
    3dfe:	4e18      	ldr	r6, [pc, #96]	; (3e60 <ETH_Init+0x144>)
    3e00:	47b0      	blx	r6
	ENC28_PhyWrite(J60_PHCON2, 0x0100); // Do not transmit loopback
    3e02:	2180      	movs	r1, #128	; 0x80
    3e04:	0049      	lsls	r1, r1, #1
    3e06:	2010      	movs	r0, #16
    3e08:	47b0      	blx	r6
	ENC28_PhyWrite(J60_PHLCON, 0x0472); // LED control - LEDA = Link, LEDB = TX/RX, Stretched LED
    3e0a:	4916      	ldr	r1, [pc, #88]	; (3e64 <ETH_Init+0x148>)
    3e0c:	2014      	movs	r0, #20
    3e0e:	47b0      	blx	r6
	ENC28_Wcr8(J60_EIE, 0xDB);   // Enable PKTIE,INTIE,LINKIE,TXIE,TXERIE,RXERIE
    3e10:	21db      	movs	r1, #219	; 0xdb
    3e12:	20fb      	movs	r0, #251	; 0xfb
    3e14:	47a0      	blx	r4
	ENC28_Wcr16(J60_PHIE, 0x12); // Enable PLNKIE and PGEIE
    3e16:	2112      	movs	r1, #18
    3e18:	2012      	movs	r0, #18
    3e1a:	47a8      	blx	r5
	ETH_CheckLinkUp();
    3e1c:	4b12      	ldr	r3, [pc, #72]	; (3e68 <ETH_Init+0x14c>)
    3e1e:	4798      	blx	r3
}
    3e20:	bd70      	pop	{r4, r5, r6, pc}
    3e22:	46c0      	nop			; (mov r8, r8)
    3e24:	20004ab8 	.word	0x20004ab8
    3e28:	20004ac0 	.word	0x20004ac0
    3e2c:	00002381 	.word	0x00002381
    3e30:	00003cd9 	.word	0x00003cd9
    3e34:	000023a1 	.word	0x000023a1
    3e38:	00003a41 	.word	0x00003a41
    3e3c:	20000874 	.word	0x20000874
    3e40:	00003a71 	.word	0x00003a71
    3e44:	00001a23 	.word	0x00001a23
    3e48:	00003ae1 	.word	0x00003ae1
    3e4c:	00001fff 	.word	0x00001fff
    3e50:	00001a21 	.word	0x00001a21
    3e54:	00003aa9 	.word	0x00003aa9
    3e58:	00000c12 	.word	0x00000c12
    3e5c:	000005dc 	.word	0x000005dc
    3e60:	00003b4d 	.word	0x00003b4d
    3e64:	00000472 	.word	0x00000472
    3e68:	00003cf5 	.word	0x00003cf5

00003e6c <ETH_EventHandler>:
{
    3e6c:	b570      	push	{r4, r5, r6, lr}
	eir_val.val     = ENC28_Rcr8(J60_EIR);
    3e6e:	20fc      	movs	r0, #252	; 0xfc
    3e70:	4b23      	ldr	r3, [pc, #140]	; (3f00 <ETH_EventHandler+0x94>)
    3e72:	4798      	blx	r3
    3e74:	0004      	movs	r4, r0
    3e76:	0005      	movs	r5, r0
	phstat2_val.val = ENC28_Rcr16(J60_PHSTAT2);
    3e78:	2011      	movs	r0, #17
    3e7a:	4b22      	ldr	r3, [pc, #136]	; (3f04 <ETH_EventHandler+0x98>)
    3e7c:	4798      	blx	r3
    3e7e:	0006      	movs	r6, r0
	if (eir_val.LINKIF) // something about the link changed.... update the link parameters
    3e80:	06e3      	lsls	r3, r4, #27
    3e82:	d40d      	bmi.n	3ea0 <ETH_EventHandler+0x34>
	if (eir_val.TXIF) // finished sending a packet
    3e84:	0723      	lsls	r3, r4, #28
    3e86:	d42a      	bmi.n	3ede <ETH_EventHandler+0x72>
	if (eir_val.PKTIF || ENC28_Rcr8(J60_EPKTCNT)) // Packet receive buffer has at least 1 unprocessed packet
    3e88:	0663      	lsls	r3, r4, #25
    3e8a:	d532      	bpl.n	3ef2 <ETH_EventHandler+0x86>
		ethData.pktReady = true;
    3e8c:	4a1e      	ldr	r2, [pc, #120]	; (3f08 <ETH_EventHandler+0x9c>)
    3e8e:	7813      	ldrb	r3, [r2, #0]
    3e90:	2102      	movs	r1, #2
    3e92:	430b      	orrs	r3, r1
    3e94:	7013      	strb	r3, [r2, #0]
	ENC28_Wcr8(J60_EIR, eir_val.val); // write the eir value back to clear any of the interrupts
    3e96:	b2e9      	uxtb	r1, r5
    3e98:	20fc      	movs	r0, #252	; 0xfc
    3e9a:	4b1c      	ldr	r3, [pc, #112]	; (3f0c <ETH_EventHandler+0xa0>)
    3e9c:	4798      	blx	r3
}
    3e9e:	bd70      	pop	{r4, r5, r6, pc}
		ethData.linkChange = true;
    3ea0:	4b19      	ldr	r3, [pc, #100]	; (3f08 <ETH_EventHandler+0x9c>)
    3ea2:	781a      	ldrb	r2, [r3, #0]
    3ea4:	2110      	movs	r1, #16
    3ea6:	430a      	orrs	r2, r1
    3ea8:	701a      	strb	r2, [r3, #0]
		ethData.up         = false;
    3eaa:	781a      	ldrb	r2, [r3, #0]
    3eac:	2104      	movs	r1, #4
    3eae:	438a      	bics	r2, r1
    3eb0:	701a      	strb	r2, [r3, #0]
		if (ETH_CheckLinkUp()) {
    3eb2:	4b17      	ldr	r3, [pc, #92]	; (3f10 <ETH_EventHandler+0xa4>)
    3eb4:	4798      	blx	r3
		if (phstat2_val.DPXSTAT) // Update MAC duplex settings to match PHY duplex setting
    3eb6:	05b3      	lsls	r3, r6, #22
    3eb8:	d508      	bpl.n	3ecc <ETH_EventHandler+0x60>
			ENC28_Wcr16(J60_MABBIPG, 0x15); // Switching to full duplex
    3eba:	2115      	movs	r1, #21
    3ebc:	2084      	movs	r0, #132	; 0x84
    3ebe:	4b15      	ldr	r3, [pc, #84]	; (3f14 <ETH_EventHandler+0xa8>)
    3ec0:	4798      	blx	r3
			ENC28_Bfs(J60_PHSTAT2, 0x01);
    3ec2:	2101      	movs	r1, #1
    3ec4:	2011      	movs	r0, #17
    3ec6:	4b14      	ldr	r3, [pc, #80]	; (3f18 <ETH_EventHandler+0xac>)
    3ec8:	4798      	blx	r3
    3eca:	e7db      	b.n	3e84 <ETH_EventHandler+0x18>
			ENC28_Wcr16(J60_MABBIPG, 0x12); // Switching to half duplex
    3ecc:	2112      	movs	r1, #18
    3ece:	2084      	movs	r0, #132	; 0x84
    3ed0:	4b10      	ldr	r3, [pc, #64]	; (3f14 <ETH_EventHandler+0xa8>)
    3ed2:	4798      	blx	r3
			ENC28_Bfc(J60_PHSTAT2, 0x01);
    3ed4:	2101      	movs	r1, #1
    3ed6:	2011      	movs	r0, #17
    3ed8:	4b10      	ldr	r3, [pc, #64]	; (3f1c <ETH_EventHandler+0xb0>)
    3eda:	4798      	blx	r3
    3edc:	e7d2      	b.n	3e84 <ETH_EventHandler+0x18>
		ethData.bufferBusy = false;
    3ede:	4a0a      	ldr	r2, [pc, #40]	; (3f08 <ETH_EventHandler+0x9c>)
    3ee0:	7813      	ldrb	r3, [r2, #0]
    3ee2:	2120      	movs	r1, #32
    3ee4:	438b      	bics	r3, r1
    3ee6:	7013      	strb	r3, [r2, #0]
		ENC28_Bfc(J60_EIR, 0x08);
    3ee8:	3918      	subs	r1, #24
    3eea:	20fc      	movs	r0, #252	; 0xfc
    3eec:	4b0b      	ldr	r3, [pc, #44]	; (3f1c <ETH_EventHandler+0xb0>)
    3eee:	4798      	blx	r3
    3ef0:	e7ca      	b.n	3e88 <ETH_EventHandler+0x1c>
	if (eir_val.PKTIF || ENC28_Rcr8(J60_EPKTCNT)) // Packet receive buffer has at least 1 unprocessed packet
    3ef2:	2059      	movs	r0, #89	; 0x59
    3ef4:	4b02      	ldr	r3, [pc, #8]	; (3f00 <ETH_EventHandler+0x94>)
    3ef6:	4798      	blx	r3
    3ef8:	2800      	cmp	r0, #0
    3efa:	d1c7      	bne.n	3e8c <ETH_EventHandler+0x20>
    3efc:	e7cb      	b.n	3e96 <ETH_EventHandler+0x2a>
    3efe:	46c0      	nop			; (mov r8, r8)
    3f00:	00003a41 	.word	0x00003a41
    3f04:	00003b7d 	.word	0x00003b7d
    3f08:	20004ab8 	.word	0x20004ab8
    3f0c:	00003aa9 	.word	0x00003aa9
    3f10:	00003cf5 	.word	0x00003cf5
    3f14:	00003ae1 	.word	0x00003ae1
    3f18:	00003a71 	.word	0x00003a71
    3f1c:	00003bdd 	.word	0x00003bdd

00003f20 <ETH_Read8>:
 * Read 1 byte of data from the RX Buffer
 * @return
 */

uint8_t ETH_Read8(void)
{
    3f20:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3f22:	24c0      	movs	r4, #192	; 0xc0
    3f24:	05e4      	lsls	r4, r4, #23
    3f26:	2580      	movs	r5, #128	; 0x80
    3f28:	042d      	lsls	r5, r5, #16
    3f2a:	6165      	str	r5, [r4, #20]
	uint8_t b;

	ETH_NCS_LOW();
	ETH_SPI_WRITE8(rbm_inst);
    3f2c:	213a      	movs	r1, #58	; 0x3a
    3f2e:	2001      	movs	r0, #1
    3f30:	4e03      	ldr	r6, [pc, #12]	; (3f40 <ETH_Read8+0x20>)
    3f32:	47b0      	blx	r6
	b = ETH_SPI_READ8();
    3f34:	2100      	movs	r1, #0
    3f36:	2000      	movs	r0, #0
    3f38:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3f3a:	61a5      	str	r5, [r4, #24]
	ETH_NCS_HIGH();

	return b;
}
    3f3c:	bd70      	pop	{r4, r5, r6, pc}
    3f3e:	46c0      	nop			; (mov r8, r8)
    3f40:	0000632d 	.word	0x0000632d

00003f44 <ETH_ComputeChecksum>:
	// TODO: RESET(); // reboot for now
	return DMA_TIMEOUT;
}

static uint16_t ETH_ComputeChecksum(uint16_t len, uint16_t seed)
{
    3f44:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f46:	b083      	sub	sp, #12
    3f48:	0005      	movs	r5, r0
    3f4a:	000c      	movs	r4, r1
	uint32_t cksm;
	uint16_t v;

	cksm = seed;

	while (len > 1) {
    3f4c:	e00c      	b.n	3f68 <ETH_ComputeChecksum+0x24>
		v               = 0;
    3f4e:	466b      	mov	r3, sp
    3f50:	1d9e      	adds	r6, r3, #6
    3f52:	2300      	movs	r3, #0
    3f54:	8033      	strh	r3, [r6, #0]
		((char *)&v)[1] = ETH_Read8();
    3f56:	4f11      	ldr	r7, [pc, #68]	; (3f9c <ETH_ComputeChecksum+0x58>)
    3f58:	47b8      	blx	r7
    3f5a:	7070      	strb	r0, [r6, #1]
		((char *)&v)[0] = ETH_Read8();
    3f5c:	47b8      	blx	r7
    3f5e:	7030      	strb	r0, [r6, #0]
		cksm += v;
    3f60:	8833      	ldrh	r3, [r6, #0]
    3f62:	18e4      	adds	r4, r4, r3
		len -= 2;
    3f64:	3d02      	subs	r5, #2
    3f66:	b2ad      	uxth	r5, r5
	while (len > 1) {
    3f68:	2d01      	cmp	r5, #1
    3f6a:	d8f0      	bhi.n	3f4e <ETH_ComputeChecksum+0xa>
	}

	if (len) {
    3f6c:	2d00      	cmp	r5, #0
    3f6e:	d00e      	beq.n	3f8e <ETH_ComputeChecksum+0x4a>
		v               = 0;
    3f70:	466b      	mov	r3, sp
    3f72:	1d9d      	adds	r5, r3, #6
    3f74:	2300      	movs	r3, #0
    3f76:	802b      	strh	r3, [r5, #0]
		((char *)&v)[1] = ETH_Read8();
    3f78:	4b08      	ldr	r3, [pc, #32]	; (3f9c <ETH_ComputeChecksum+0x58>)
    3f7a:	4798      	blx	r3
    3f7c:	7068      	strb	r0, [r5, #1]
		((char *)&v)[0] = 0;
    3f7e:	2300      	movs	r3, #0
    3f80:	702b      	strb	r3, [r5, #0]
		cksm += v;
    3f82:	882b      	ldrh	r3, [r5, #0]
    3f84:	18e4      	adds	r4, r4, r3
    3f86:	e002      	b.n	3f8e <ETH_ComputeChecksum+0x4a>
	}

	// wrap the checksum
	while (cksm >> 16) {
		cksm = (cksm & 0x0FFFF) + (cksm >> 16);
    3f88:	0424      	lsls	r4, r4, #16
    3f8a:	0c24      	lsrs	r4, r4, #16
    3f8c:	191c      	adds	r4, r3, r4
	while (cksm >> 16) {
    3f8e:	0c23      	lsrs	r3, r4, #16
    3f90:	d1fa      	bne.n	3f88 <ETH_ComputeChecksum+0x44>
	}

	// invert the number.
	cksm = ~cksm;
    3f92:	43e0      	mvns	r0, r4

	// Return the resulting checksum
	return cksm;
    3f94:	b280      	uxth	r0, r0
}
    3f96:	b003      	add	sp, #12
    3f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f9a:	46c0      	nop			; (mov r8, r8)
    3f9c:	00003f21 	.word	0x00003f21

00003fa0 <ETH_Read16>:
{
    3fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3fa2:	25c0      	movs	r5, #192	; 0xc0
    3fa4:	05ed      	lsls	r5, r5, #23
    3fa6:	2680      	movs	r6, #128	; 0x80
    3fa8:	0436      	lsls	r6, r6, #16
    3faa:	616e      	str	r6, [r5, #20]
	ETH_SPI_WRITE8(rbm_inst);
    3fac:	213a      	movs	r1, #58	; 0x3a
    3fae:	2001      	movs	r0, #1
    3fb0:	4f07      	ldr	r7, [pc, #28]	; (3fd0 <ETH_Read16+0x30>)
    3fb2:	47b8      	blx	r7
	b = ETH_SPI_READ8() << 8;
    3fb4:	2100      	movs	r1, #0
    3fb6:	2000      	movs	r0, #0
    3fb8:	47b8      	blx	r7
    3fba:	b280      	uxth	r0, r0
    3fbc:	0200      	lsls	r0, r0, #8
    3fbe:	b284      	uxth	r4, r0
	b |= ETH_SPI_READ8();
    3fc0:	2100      	movs	r1, #0
    3fc2:	2000      	movs	r0, #0
    3fc4:	47b8      	blx	r7
    3fc6:	b280      	uxth	r0, r0
    3fc8:	4320      	orrs	r0, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3fca:	61ae      	str	r6, [r5, #24]
}
    3fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fce:	46c0      	nop			; (mov r8, r8)
    3fd0:	0000632d 	.word	0x0000632d

00003fd4 <ETH_Read32>:
{
    3fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fd6:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3fd8:	26c0      	movs	r6, #192	; 0xc0
    3fda:	05f6      	lsls	r6, r6, #23
    3fdc:	2780      	movs	r7, #128	; 0x80
    3fde:	043f      	lsls	r7, r7, #16
    3fe0:	6177      	str	r7, [r6, #20]
	ETH_SPI_WRITE8(rbm_inst);
    3fe2:	213a      	movs	r1, #58	; 0x3a
    3fe4:	2001      	movs	r0, #1
    3fe6:	4c0b      	ldr	r4, [pc, #44]	; (4014 <ETH_Read32+0x40>)
    3fe8:	47a0      	blx	r4
	((char *)&b)[3] = ETH_SPI_READ8();
    3fea:	2100      	movs	r1, #0
    3fec:	2000      	movs	r0, #0
    3fee:	47a0      	blx	r4
    3ff0:	ad01      	add	r5, sp, #4
    3ff2:	70e8      	strb	r0, [r5, #3]
	((char *)&b)[2] = ETH_SPI_READ8();
    3ff4:	2100      	movs	r1, #0
    3ff6:	2000      	movs	r0, #0
    3ff8:	47a0      	blx	r4
    3ffa:	70a8      	strb	r0, [r5, #2]
	((char *)&b)[1] = ETH_SPI_READ8();
    3ffc:	2100      	movs	r1, #0
    3ffe:	2000      	movs	r0, #0
    4000:	47a0      	blx	r4
    4002:	7068      	strb	r0, [r5, #1]
	((char *)&b)[0] = ETH_SPI_READ8();
    4004:	2100      	movs	r1, #0
    4006:	2000      	movs	r0, #0
    4008:	47a0      	blx	r4
    400a:	7028      	strb	r0, [r5, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    400c:	61b7      	str	r7, [r6, #24]
}
    400e:	9801      	ldr	r0, [sp, #4]
    4010:	b003      	add	sp, #12
    4012:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4014:	0000632d 	.word	0x0000632d

00004018 <ETH_ReadBlock>:
{
    4018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    401a:	0005      	movs	r5, r0
	if (rxPacketStatusVector.byteCount < length)
    401c:	4b11      	ldr	r3, [pc, #68]	; (4064 <ETH_ReadBlock+0x4c>)
    401e:	889f      	ldrh	r7, [r3, #4]
    4020:	42b9      	cmp	r1, r7
    4022:	d800      	bhi.n	4026 <ETH_ReadBlock+0xe>
	uint16_t readCount = length;
    4024:	000f      	movs	r7, r1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4026:	2280      	movs	r2, #128	; 0x80
    4028:	0412      	lsls	r2, r2, #16
    402a:	23c0      	movs	r3, #192	; 0xc0
    402c:	05db      	lsls	r3, r3, #23
    402e:	615a      	str	r2, [r3, #20]
	ETH_SPI_WRITE8(rbm_inst);
    4030:	213a      	movs	r1, #58	; 0x3a
    4032:	2001      	movs	r0, #1
    4034:	4b0c      	ldr	r3, [pc, #48]	; (4068 <ETH_ReadBlock+0x50>)
    4036:	4798      	blx	r3
	length = readCount;
    4038:	003a      	movs	r2, r7
	while (length--)
    403a:	e007      	b.n	404c <ETH_ReadBlock+0x34>
		*p++ = ETH_SPI_READ8();
    403c:	1c6e      	adds	r6, r5, #1
    403e:	2100      	movs	r1, #0
    4040:	2000      	movs	r0, #0
    4042:	4b09      	ldr	r3, [pc, #36]	; (4068 <ETH_ReadBlock+0x50>)
    4044:	4798      	blx	r3
    4046:	7028      	strb	r0, [r5, #0]
    4048:	0035      	movs	r5, r6
	while (length--)
    404a:	0022      	movs	r2, r4
    404c:	1e54      	subs	r4, r2, #1
    404e:	b2a4      	uxth	r4, r4
    4050:	2a00      	cmp	r2, #0
    4052:	d1f3      	bne.n	403c <ETH_ReadBlock+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4054:	2280      	movs	r2, #128	; 0x80
    4056:	0412      	lsls	r2, r2, #16
    4058:	23c0      	movs	r3, #192	; 0xc0
    405a:	05db      	lsls	r3, r3, #23
    405c:	619a      	str	r2, [r3, #24]
}
    405e:	0038      	movs	r0, r7
    4060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4062:	46c0      	nop			; (mov r8, r8)
    4064:	20000874 	.word	0x20000874
    4068:	0000632d 	.word	0x0000632d

0000406c <ETH_Write8>:
{
    406c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    406e:	0005      	movs	r5, r0
	TXPacketSize += 1;
    4070:	4a08      	ldr	r2, [pc, #32]	; (4094 <ETH_Write8+0x28>)
    4072:	8813      	ldrh	r3, [r2, #0]
    4074:	3301      	adds	r3, #1
    4076:	8013      	strh	r3, [r2, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4078:	24c0      	movs	r4, #192	; 0xc0
    407a:	05e4      	lsls	r4, r4, #23
    407c:	2680      	movs	r6, #128	; 0x80
    407e:	0436      	lsls	r6, r6, #16
    4080:	6166      	str	r6, [r4, #20]
	ETH_SPI_WRITE8(wbm_inst);
    4082:	217a      	movs	r1, #122	; 0x7a
    4084:	2001      	movs	r0, #1
    4086:	4f04      	ldr	r7, [pc, #16]	; (4098 <ETH_Write8+0x2c>)
    4088:	47b8      	blx	r7
	ETH_SPI_WRITE8(data);
    408a:	0029      	movs	r1, r5
    408c:	2001      	movs	r0, #1
    408e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4090:	61a6      	str	r6, [r4, #24]
}
    4092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4094:	20004ab4 	.word	0x20004ab4
    4098:	0000632d 	.word	0x0000632d

0000409c <ETH_Write16>:
{
    409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    409e:	0004      	movs	r4, r0
	TXPacketSize += 2;
    40a0:	4a0a      	ldr	r2, [pc, #40]	; (40cc <ETH_Write16+0x30>)
    40a2:	8813      	ldrh	r3, [r2, #0]
    40a4:	3302      	adds	r3, #2
    40a6:	8013      	strh	r3, [r2, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    40a8:	26c0      	movs	r6, #192	; 0xc0
    40aa:	05f6      	lsls	r6, r6, #23
    40ac:	2780      	movs	r7, #128	; 0x80
    40ae:	043f      	lsls	r7, r7, #16
    40b0:	6177      	str	r7, [r6, #20]
	ETH_SPI_WRITE8(wbm_inst);
    40b2:	217a      	movs	r1, #122	; 0x7a
    40b4:	2001      	movs	r0, #1
    40b6:	4d06      	ldr	r5, [pc, #24]	; (40d0 <ETH_Write16+0x34>)
    40b8:	47a8      	blx	r5
	ETH_SPI_WRITE8(data >> 8);
    40ba:	0a21      	lsrs	r1, r4, #8
    40bc:	2001      	movs	r0, #1
    40be:	47a8      	blx	r5
	ETH_SPI_WRITE8(data);
    40c0:	b2e1      	uxtb	r1, r4
    40c2:	2001      	movs	r0, #1
    40c4:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    40c6:	61b7      	str	r7, [r6, #24]
}
    40c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40ca:	46c0      	nop			; (mov r8, r8)
    40cc:	20004ab4 	.word	0x20004ab4
    40d0:	0000632d 	.word	0x0000632d

000040d4 <ETH_Write32>:
{
    40d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40d6:	0004      	movs	r4, r0
	TXPacketSize += 4;
    40d8:	4a0e      	ldr	r2, [pc, #56]	; (4114 <ETH_Write32+0x40>)
    40da:	8813      	ldrh	r3, [r2, #0]
    40dc:	3304      	adds	r3, #4
    40de:	8013      	strh	r3, [r2, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    40e0:	26c0      	movs	r6, #192	; 0xc0
    40e2:	05f6      	lsls	r6, r6, #23
    40e4:	2780      	movs	r7, #128	; 0x80
    40e6:	043f      	lsls	r7, r7, #16
    40e8:	6177      	str	r7, [r6, #20]
	ETH_SPI_WRITE8(wbm_inst);
    40ea:	217a      	movs	r1, #122	; 0x7a
    40ec:	2001      	movs	r0, #1
    40ee:	4d0a      	ldr	r5, [pc, #40]	; (4118 <ETH_Write32+0x44>)
    40f0:	47a8      	blx	r5
	ETH_SPI_WRITE8(data >> 24);
    40f2:	0e21      	lsrs	r1, r4, #24
    40f4:	2001      	movs	r0, #1
    40f6:	47a8      	blx	r5
	ETH_SPI_WRITE8(data >> 16);
    40f8:	0c21      	lsrs	r1, r4, #16
    40fa:	b2c9      	uxtb	r1, r1
    40fc:	2001      	movs	r0, #1
    40fe:	47a8      	blx	r5
	ETH_SPI_WRITE8(data >> 8);
    4100:	0a21      	lsrs	r1, r4, #8
    4102:	b2c9      	uxtb	r1, r1
    4104:	2001      	movs	r0, #1
    4106:	47a8      	blx	r5
	ETH_SPI_WRITE8(data);
    4108:	b2e1      	uxtb	r1, r4
    410a:	2001      	movs	r0, #1
    410c:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    410e:	61b7      	str	r7, [r6, #24]
}
    4110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4112:	46c0      	nop			; (mov r8, r8)
    4114:	20004ab4 	.word	0x20004ab4
    4118:	0000632d 	.word	0x0000632d

0000411c <ETH_WriteBlock>:
{
    411c:	b570      	push	{r4, r5, r6, lr}
    411e:	0004      	movs	r4, r0
    4120:	000d      	movs	r5, r1
	TXPacketSize += length;
    4122:	4a10      	ldr	r2, [pc, #64]	; (4164 <ETH_WriteBlock+0x48>)
    4124:	8813      	ldrh	r3, [r2, #0]
    4126:	18cb      	adds	r3, r1, r3
    4128:	8013      	strh	r3, [r2, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    412a:	2280      	movs	r2, #128	; 0x80
    412c:	0412      	lsls	r2, r2, #16
    412e:	23c0      	movs	r3, #192	; 0xc0
    4130:	05db      	lsls	r3, r3, #23
    4132:	615a      	str	r2, [r3, #20]
	ETH_SPI_WRITE8(wbm_inst);
    4134:	217a      	movs	r1, #122	; 0x7a
    4136:	2001      	movs	r0, #1
    4138:	4b0b      	ldr	r3, [pc, #44]	; (4168 <ETH_WriteBlock+0x4c>)
    413a:	4798      	blx	r3
	char *p = data;
    413c:	0020      	movs	r0, r4
	while (length--) {
    413e:	e006      	b.n	414e <ETH_WriteBlock+0x32>
		ETH_SPI_WRITE8(*p++);
    4140:	1c45      	adds	r5, r0, #1
    4142:	7801      	ldrb	r1, [r0, #0]
    4144:	2001      	movs	r0, #1
    4146:	4b08      	ldr	r3, [pc, #32]	; (4168 <ETH_WriteBlock+0x4c>)
    4148:	4798      	blx	r3
    414a:	0028      	movs	r0, r5
	while (length--) {
    414c:	0025      	movs	r5, r4
    414e:	1e6c      	subs	r4, r5, #1
    4150:	b2a4      	uxth	r4, r4
    4152:	2d00      	cmp	r5, #0
    4154:	d1f4      	bne.n	4140 <ETH_WriteBlock+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4156:	2280      	movs	r2, #128	; 0x80
    4158:	0412      	lsls	r2, r2, #16
    415a:	23c0      	movs	r3, #192	; 0xc0
    415c:	05db      	lsls	r3, r3, #23
    415e:	619a      	str	r2, [r3, #24]
}
    4160:	0020      	movs	r0, r4
    4162:	bd70      	pop	{r4, r5, r6, pc}
    4164:	20004ab4 	.word	0x20004ab4
    4168:	0000632d 	.word	0x0000632d

0000416c <ETH_WriteStart>:
{
    416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    416e:	46ce      	mov	lr, r9
    4170:	4647      	mov	r7, r8
    4172:	b580      	push	{r7, lr}
    4174:	0004      	movs	r4, r0
    4176:	000d      	movs	r5, r1
	if (ethData.bufferBusy) {
    4178:	4b31      	ldr	r3, [pc, #196]	; (4240 <ETH_WriteStart+0xd4>)
    417a:	681b      	ldr	r3, [r3, #0]
    417c:	069b      	lsls	r3, r3, #26
    417e:	d504      	bpl.n	418a <ETH_WriteStart+0x1e>
		return BUFFER_BUSY;
    4180:	2003      	movs	r0, #3
}
    4182:	bc0c      	pop	{r2, r3}
    4184:	4690      	mov	r8, r2
    4186:	4699      	mov	r9, r3
    4188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((ENC28_Rcr8(J60_ECON1) & 0x08)) {
    418a:	20ff      	movs	r0, #255	; 0xff
    418c:	4b2d      	ldr	r3, [pc, #180]	; (4244 <ETH_WriteStart+0xd8>)
    418e:	4798      	blx	r3
    4190:	0703      	lsls	r3, r0, #28
    4192:	d501      	bpl.n	4198 <ETH_WriteStart+0x2c>
		return TX_LOGIC_NOT_IDLE;
    4194:	2004      	movs	r0, #4
    4196:	e7f4      	b.n	4182 <ETH_WriteStart+0x16>
	ENC28_Wcr16(J60_ETXSTL, TXSTART);
    4198:	4f2b      	ldr	r7, [pc, #172]	; (4248 <ETH_WriteStart+0xdc>)
    419a:	0039      	movs	r1, r7
    419c:	2004      	movs	r0, #4
    419e:	4e2b      	ldr	r6, [pc, #172]	; (424c <ETH_WriteStart+0xe0>)
    41a0:	47b0      	blx	r6
	ENC28_Wcr16(J60_EWRPTL, TXSTART);
    41a2:	0039      	movs	r1, r7
    41a4:	2002      	movs	r0, #2
    41a6:	47b0      	blx	r6
	TXPacketSize = 0;
    41a8:	4f29      	ldr	r7, [pc, #164]	; (4250 <ETH_WriteStart+0xe4>)
    41aa:	2300      	movs	r3, #0
    41ac:	803b      	strh	r3, [r7, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    41ae:	23c0      	movs	r3, #192	; 0xc0
    41b0:	05db      	lsls	r3, r3, #23
    41b2:	4698      	mov	r8, r3
    41b4:	2380      	movs	r3, #128	; 0x80
    41b6:	041b      	lsls	r3, r3, #16
    41b8:	4699      	mov	r9, r3
    41ba:	4643      	mov	r3, r8
    41bc:	464a      	mov	r2, r9
    41be:	615a      	str	r2, [r3, #20]
	ETH_SPI_WRITE8(wbm_inst);
    41c0:	217a      	movs	r1, #122	; 0x7a
    41c2:	2001      	movs	r0, #1
    41c4:	4e23      	ldr	r6, [pc, #140]	; (4254 <ETH_WriteStart+0xe8>)
    41c6:	47b0      	blx	r6
	ETH_SPI_WRITE8(Control_Byte);
    41c8:	2100      	movs	r1, #0
    41ca:	2001      	movs	r0, #1
    41cc:	47b0      	blx	r6
	ETH_SPI_WRITE8(dest_mac->mac_array[0]);
    41ce:	7821      	ldrb	r1, [r4, #0]
    41d0:	2001      	movs	r0, #1
    41d2:	47b0      	blx	r6
	ETH_SPI_WRITE8(dest_mac->mac_array[1]);
    41d4:	7861      	ldrb	r1, [r4, #1]
    41d6:	2001      	movs	r0, #1
    41d8:	47b0      	blx	r6
	ETH_SPI_WRITE8(dest_mac->mac_array[2]);
    41da:	78a1      	ldrb	r1, [r4, #2]
    41dc:	2001      	movs	r0, #1
    41de:	47b0      	blx	r6
	ETH_SPI_WRITE8(dest_mac->mac_array[3]);
    41e0:	78e1      	ldrb	r1, [r4, #3]
    41e2:	2001      	movs	r0, #1
    41e4:	47b0      	blx	r6
	ETH_SPI_WRITE8(dest_mac->mac_array[4]);
    41e6:	7921      	ldrb	r1, [r4, #4]
    41e8:	2001      	movs	r0, #1
    41ea:	47b0      	blx	r6
	ETH_SPI_WRITE8(dest_mac->mac_array[5]);
    41ec:	7961      	ldrb	r1, [r4, #5]
    41ee:	2001      	movs	r0, #1
    41f0:	47b0      	blx	r6
	ETH_SPI_WRITE8(eth_MAC.mac_array[0]);
    41f2:	4c19      	ldr	r4, [pc, #100]	; (4258 <ETH_WriteStart+0xec>)
    41f4:	7a21      	ldrb	r1, [r4, #8]
    41f6:	2001      	movs	r0, #1
    41f8:	47b0      	blx	r6
	ETH_SPI_WRITE8(eth_MAC.mac_array[1]);
    41fa:	7a61      	ldrb	r1, [r4, #9]
    41fc:	2001      	movs	r0, #1
    41fe:	47b0      	blx	r6
	ETH_SPI_WRITE8(eth_MAC.mac_array[2]);
    4200:	7aa1      	ldrb	r1, [r4, #10]
    4202:	2001      	movs	r0, #1
    4204:	47b0      	blx	r6
	ETH_SPI_WRITE8(eth_MAC.mac_array[3]);
    4206:	7ae1      	ldrb	r1, [r4, #11]
    4208:	2001      	movs	r0, #1
    420a:	47b0      	blx	r6
	ETH_SPI_WRITE8(eth_MAC.mac_array[4]);
    420c:	7b21      	ldrb	r1, [r4, #12]
    420e:	2001      	movs	r0, #1
    4210:	47b0      	blx	r6
	ETH_SPI_WRITE8(eth_MAC.mac_array[5]);
    4212:	7b61      	ldrb	r1, [r4, #13]
    4214:	2001      	movs	r0, #1
    4216:	47b0      	blx	r6
	ETH_SPI_WRITE8(type >> 8);
    4218:	0a29      	lsrs	r1, r5, #8
    421a:	2001      	movs	r0, #1
    421c:	47b0      	blx	r6
	ETH_SPI_WRITE8(type & 0x0FF);
    421e:	b2e9      	uxtb	r1, r5
    4220:	2001      	movs	r0, #1
    4222:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4224:	4643      	mov	r3, r8
    4226:	464a      	mov	r2, r9
    4228:	619a      	str	r2, [r3, #24]
	TXPacketSize += 15;
    422a:	883b      	ldrh	r3, [r7, #0]
    422c:	330f      	adds	r3, #15
    422e:	803b      	strh	r3, [r7, #0]
	ethData.bufferBusy = true;
    4230:	4a03      	ldr	r2, [pc, #12]	; (4240 <ETH_WriteStart+0xd4>)
    4232:	7813      	ldrb	r3, [r2, #0]
    4234:	2120      	movs	r1, #32
    4236:	430b      	orrs	r3, r1
    4238:	7013      	strb	r3, [r2, #0]
	return SUCCESS;
    423a:	2001      	movs	r0, #1
    423c:	e7a1      	b.n	4182 <ETH_WriteStart+0x16>
    423e:	46c0      	nop			; (mov r8, r8)
    4240:	20004ab8 	.word	0x20004ab8
    4244:	00003a41 	.word	0x00003a41
    4248:	00001a23 	.word	0x00001a23
    424c:	00003ae1 	.word	0x00003ae1
    4250:	20004ab4 	.word	0x20004ab4
    4254:	0000632d 	.word	0x0000632d
    4258:	20000874 	.word	0x20000874

0000425c <ETH_Send>:
{
    425c:	b510      	push	{r4, lr}
	ENC28_Wcr16(J60_ETXNDL, TXSTART + TXPacketSize);
    425e:	4b10      	ldr	r3, [pc, #64]	; (42a0 <ETH_Send+0x44>)
    4260:	8819      	ldrh	r1, [r3, #0]
    4262:	4b10      	ldr	r3, [pc, #64]	; (42a4 <ETH_Send+0x48>)
    4264:	469c      	mov	ip, r3
    4266:	4461      	add	r1, ip
    4268:	b289      	uxth	r1, r1
    426a:	2006      	movs	r0, #6
    426c:	4b0e      	ldr	r3, [pc, #56]	; (42a8 <ETH_Send+0x4c>)
    426e:	4798      	blx	r3
	if (!ethData.up) {
    4270:	4b0e      	ldr	r3, [pc, #56]	; (42ac <ETH_Send+0x50>)
    4272:	681b      	ldr	r3, [r3, #0]
    4274:	075b      	lsls	r3, r3, #29
    4276:	d401      	bmi.n	427c <ETH_Send+0x20>
		return LINK_NOT_FOUND;
    4278:	2002      	movs	r0, #2
}
    427a:	bd10      	pop	{r4, pc}
	if (!ethData.bufferBusy) {
    427c:	4b0b      	ldr	r3, [pc, #44]	; (42ac <ETH_Send+0x50>)
    427e:	681b      	ldr	r3, [r3, #0]
    4280:	069b      	lsls	r3, r3, #26
    4282:	d401      	bmi.n	4288 <ETH_Send+0x2c>
		return BUFFER_BUSY;
    4284:	2003      	movs	r0, #3
    4286:	e7f8      	b.n	427a <ETH_Send+0x1e>
	ENC28_Bfs(J60_ECON1, 0x08); // start the transmission
    4288:	2108      	movs	r1, #8
    428a:	20ff      	movs	r0, #255	; 0xff
    428c:	4b08      	ldr	r3, [pc, #32]	; (42b0 <ETH_Send+0x54>)
    428e:	4798      	blx	r3
	ethData.bufferBusy = false;
    4290:	4a06      	ldr	r2, [pc, #24]	; (42ac <ETH_Send+0x50>)
    4292:	7813      	ldrb	r3, [r2, #0]
    4294:	2120      	movs	r1, #32
    4296:	438b      	bics	r3, r1
    4298:	7013      	strb	r3, [r2, #0]
	return SUCCESS;
    429a:	2001      	movs	r0, #1
    429c:	e7ed      	b.n	427a <ETH_Send+0x1e>
    429e:	46c0      	nop			; (mov r8, r8)
    42a0:	20004ab4 	.word	0x20004ab4
    42a4:	00001a23 	.word	0x00001a23
    42a8:	00003ae1 	.word	0x00003ae1
    42ac:	20004ab8 	.word	0x20004ab8
    42b0:	00003a71 	.word	0x00003a71

000042b4 <ETH_Dump>:
{
    42b4:	b510      	push	{r4, lr}
	length = (rxPacketStatusVector.byteCount <= length) ? rxPacketStatusVector.byteCount : length;
    42b6:	4b0b      	ldr	r3, [pc, #44]	; (42e4 <ETH_Dump+0x30>)
    42b8:	889b      	ldrh	r3, [r3, #4]
    42ba:	1c1c      	adds	r4, r3, #0
    42bc:	4283      	cmp	r3, r0
    42be:	d900      	bls.n	42c2 <ETH_Dump+0xe>
    42c0:	1c04      	adds	r4, r0, #0
    42c2:	b2a4      	uxth	r4, r4
	if (length) {
    42c4:	2c00      	cmp	r4, #0
    42c6:	d100      	bne.n	42ca <ETH_Dump+0x16>
}
    42c8:	bd10      	pop	{r4, pc}
		newRXTail = ENC28_Rcr16(J60_ERDPTL);
    42ca:	2000      	movs	r0, #0
    42cc:	4b06      	ldr	r3, [pc, #24]	; (42e8 <ETH_Dump+0x34>)
    42ce:	4798      	blx	r3
		newRXTail += length;
    42d0:	1820      	adds	r0, r4, r0
    42d2:	b281      	uxth	r1, r0
		ENC28_Wcr16(J60_ERDPTL, newRXTail);
    42d4:	2000      	movs	r0, #0
    42d6:	4b05      	ldr	r3, [pc, #20]	; (42ec <ETH_Dump+0x38>)
    42d8:	4798      	blx	r3
		rxPacketStatusVector.byteCount -= length;
    42da:	4a02      	ldr	r2, [pc, #8]	; (42e4 <ETH_Dump+0x30>)
    42dc:	8893      	ldrh	r3, [r2, #4]
    42de:	1b1c      	subs	r4, r3, r4
    42e0:	8094      	strh	r4, [r2, #4]
}
    42e2:	e7f1      	b.n	42c8 <ETH_Dump+0x14>
    42e4:	20000874 	.word	0x20000874
    42e8:	00003b7d 	.word	0x00003b7d
    42ec:	00003ae1 	.word	0x00003ae1

000042f0 <ETH_Flush>:
{
    42f0:	b510      	push	{r4, lr}
	ethData.pktReady = false;
    42f2:	4a0e      	ldr	r2, [pc, #56]	; (432c <ETH_Flush+0x3c>)
    42f4:	7813      	ldrb	r3, [r2, #0]
    42f6:	2102      	movs	r1, #2
    42f8:	438b      	bics	r3, r1
    42fa:	7013      	strb	r3, [r2, #0]
	if (nextPacketPointer == RXSTART)
    42fc:	4b0c      	ldr	r3, [pc, #48]	; (4330 <ETH_Flush+0x40>)
    42fe:	8819      	ldrh	r1, [r3, #0]
    4300:	2900      	cmp	r1, #0
    4302:	d00e      	beq.n	4322 <ETH_Flush+0x32>
		ENC28_Wcr16(J60_ERXRDPTL, nextPacketPointer - 1);
    4304:	3901      	subs	r1, #1
    4306:	b289      	uxth	r1, r1
    4308:	200c      	movs	r0, #12
    430a:	4b0a      	ldr	r3, [pc, #40]	; (4334 <ETH_Flush+0x44>)
    430c:	4798      	blx	r3
	ENC28_Wcr16(J60_ERDPTL, nextPacketPointer);
    430e:	4b08      	ldr	r3, [pc, #32]	; (4330 <ETH_Flush+0x40>)
    4310:	8819      	ldrh	r1, [r3, #0]
    4312:	2000      	movs	r0, #0
    4314:	4b07      	ldr	r3, [pc, #28]	; (4334 <ETH_Flush+0x44>)
    4316:	4798      	blx	r3
	ENC28_Bfs(J60_ECON2, 0x40);
    4318:	2140      	movs	r1, #64	; 0x40
    431a:	20fe      	movs	r0, #254	; 0xfe
    431c:	4b06      	ldr	r3, [pc, #24]	; (4338 <ETH_Flush+0x48>)
    431e:	4798      	blx	r3
}
    4320:	bd10      	pop	{r4, pc}
		ENC28_Wcr16(J60_ERXRDPTL, RXEND);
    4322:	4906      	ldr	r1, [pc, #24]	; (433c <ETH_Flush+0x4c>)
    4324:	200c      	movs	r0, #12
    4326:	4b03      	ldr	r3, [pc, #12]	; (4334 <ETH_Flush+0x44>)
    4328:	4798      	blx	r3
    432a:	e7f0      	b.n	430e <ETH_Flush+0x1e>
    432c:	20004ab8 	.word	0x20004ab8
    4330:	20000874 	.word	0x20000874
    4334:	00003ae1 	.word	0x00003ae1
    4338:	00003a71 	.word	0x00003a71
    433c:	00001a21 	.word	0x00001a21

00004340 <ETH_Insert>:
{
    4340:	b5f0      	push	{r4, r5, r6, r7, lr}
    4342:	46d6      	mov	lr, sl
    4344:	4647      	mov	r7, r8
    4346:	b580      	push	{r7, lr}
    4348:	b083      	sub	sp, #12
    434a:	0006      	movs	r6, r0
    434c:	000c      	movs	r4, r1
    434e:	0015      	movs	r5, r2
	current_tx_pointer = ENC28_Rcr16(J60_EWRPTL);
    4350:	2002      	movs	r0, #2
    4352:	4b15      	ldr	r3, [pc, #84]	; (43a8 <ETH_Insert+0x68>)
    4354:	4798      	blx	r3
    4356:	9001      	str	r0, [sp, #4]
	ENC28_Wcr16(J60_EWRPTL, TXSTART + offset);
    4358:	4b14      	ldr	r3, [pc, #80]	; (43ac <ETH_Insert+0x6c>)
    435a:	469c      	mov	ip, r3
    435c:	4465      	add	r5, ip
    435e:	b2a9      	uxth	r1, r5
    4360:	2002      	movs	r0, #2
    4362:	4b13      	ldr	r3, [pc, #76]	; (43b0 <ETH_Insert+0x70>)
    4364:	4798      	blx	r3
	while (len--) {
    4366:	e010      	b.n	438a <ETH_Insert+0x4a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4368:	24c0      	movs	r4, #192	; 0xc0
    436a:	05e4      	lsls	r4, r4, #23
    436c:	2580      	movs	r5, #128	; 0x80
    436e:	042d      	lsls	r5, r5, #16
    4370:	6165      	str	r5, [r4, #20]
		ETH_SPI_WRITE8(wbm_inst); // WBM command
    4372:	217a      	movs	r1, #122	; 0x7a
    4374:	2001      	movs	r0, #1
    4376:	4f0f      	ldr	r7, [pc, #60]	; (43b4 <ETH_Insert+0x74>)
    4378:	47b8      	blx	r7
		ETH_SPI_WRITE8(*data++);
    437a:	1c73      	adds	r3, r6, #1
    437c:	469a      	mov	sl, r3
    437e:	7831      	ldrb	r1, [r6, #0]
    4380:	2001      	movs	r0, #1
    4382:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4384:	61a5      	str	r5, [r4, #24]
	while (len--) {
    4386:	4644      	mov	r4, r8
		ETH_SPI_WRITE8(*data++);
    4388:	4656      	mov	r6, sl
	while (len--) {
    438a:	1e63      	subs	r3, r4, #1
    438c:	b29b      	uxth	r3, r3
    438e:	4698      	mov	r8, r3
    4390:	2c00      	cmp	r4, #0
    4392:	d1e9      	bne.n	4368 <ETH_Insert+0x28>
	ENC28_Wcr16(J60_EWRPTL, current_tx_pointer);
    4394:	9901      	ldr	r1, [sp, #4]
    4396:	2002      	movs	r0, #2
    4398:	4b05      	ldr	r3, [pc, #20]	; (43b0 <ETH_Insert+0x70>)
    439a:	4798      	blx	r3
}
    439c:	b003      	add	sp, #12
    439e:	bc0c      	pop	{r2, r3}
    43a0:	4690      	mov	r8, r2
    43a2:	469a      	mov	sl, r3
    43a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43a6:	46c0      	nop			; (mov r8, r8)
    43a8:	00003b7d 	.word	0x00003b7d
    43ac:	00001a24 	.word	0x00001a24
    43b0:	00003ae1 	.word	0x00003ae1
    43b4:	0000632d 	.word	0x0000632d

000043b8 <ETH_Copy>:
{
    43b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43ba:	1e05      	subs	r5, r0, #0
    if (len==0) return SUCCESS; // nothing to copy
    43bc:	d05a      	beq.n	4474 <ETH_Copy+0xbc>
	timer = 2 * len;
    43be:	0044      	lsls	r4, r0, #1
    43c0:	b2a4      	uxth	r4, r4
	while ((ENC28_Rcr8(J60_ECON1) & 0x20) != 0 && --timer)
    43c2:	e000      	b.n	43c6 <ETH_Copy+0xe>
		NOP(); // sit here until the DMAST bit is clear
    43c4:	46c0      	nop			; (mov r8, r8)
	while ((ENC28_Rcr8(J60_ECON1) & 0x20) != 0 && --timer)
    43c6:	20ff      	movs	r0, #255	; 0xff
    43c8:	4b2b      	ldr	r3, [pc, #172]	; (4478 <ETH_Copy+0xc0>)
    43ca:	4798      	blx	r3
    43cc:	0683      	lsls	r3, r0, #26
    43ce:	d503      	bpl.n	43d8 <ETH_Copy+0x20>
    43d0:	3c01      	subs	r4, #1
    43d2:	b2a4      	uxth	r4, r4
    43d4:	2c00      	cmp	r4, #0
    43d6:	d1f5      	bne.n	43c4 <ETH_Copy+0xc>
	if ((ENC28_Rcr8(J60_ECON1) & 0x20) == 0) {
    43d8:	20ff      	movs	r0, #255	; 0xff
    43da:	4b27      	ldr	r3, [pc, #156]	; (4478 <ETH_Copy+0xc0>)
    43dc:	4798      	blx	r3
    43de:	0683      	lsls	r3, r0, #26
    43e0:	d501      	bpl.n	43e6 <ETH_Copy+0x2e>
	return DMA_TIMEOUT;
    43e2:	200c      	movs	r0, #12
}
    43e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_buffer_address = ENC28_Rcr16(J60_EWRPTL); // Current TX Write Pointer
    43e6:	2002      	movs	r0, #2
    43e8:	4b24      	ldr	r3, [pc, #144]	; (447c <ETH_Copy+0xc4>)
    43ea:	4798      	blx	r3
    43ec:	0006      	movs	r6, r0
		ENC28_Wcr16(J60_EDMADSTL, tx_buffer_address);
    43ee:	0001      	movs	r1, r0
    43f0:	2014      	movs	r0, #20
    43f2:	4f23      	ldr	r7, [pc, #140]	; (4480 <ETH_Copy+0xc8>)
    43f4:	47b8      	blx	r7
		ENC28_Wcr16(J60_EDMASTL, ethData.saveRDPT);
    43f6:	4c23      	ldr	r4, [pc, #140]	; (4484 <ETH_Copy+0xcc>)
    43f8:	88a1      	ldrh	r1, [r4, #4]
    43fa:	b289      	uxth	r1, r1
    43fc:	2010      	movs	r0, #16
    43fe:	47b8      	blx	r7
		tx_buffer_address += len;
    4400:	19ae      	adds	r6, r5, r6
    4402:	b2b6      	uxth	r6, r6
		temp_len = ethData.saveRDPT + len;
    4404:	88a1      	ldrh	r1, [r4, #4]
    4406:	1949      	adds	r1, r1, r5
    4408:	b289      	uxth	r1, r1
		if (temp_len > RXEND) {
    440a:	4b1f      	ldr	r3, [pc, #124]	; (4488 <ETH_Copy+0xd0>)
    440c:	4299      	cmp	r1, r3
    440e:	d912      	bls.n	4436 <ETH_Copy+0x7e>
			temp_len = temp_len - (RXEND) + RXSTART;
    4410:	4b1e      	ldr	r3, [pc, #120]	; (448c <ETH_Copy+0xd4>)
    4412:	469c      	mov	ip, r3
    4414:	4461      	add	r1, ip
    4416:	b289      	uxth	r1, r1
			ENC28_Wcr16(J60_EDMANDL, temp_len);
    4418:	2012      	movs	r0, #18
    441a:	4b19      	ldr	r3, [pc, #100]	; (4480 <ETH_Copy+0xc8>)
    441c:	4798      	blx	r3
		ENC28_Bfc(J60_ECON1, 0x10);
    441e:	2110      	movs	r1, #16
    4420:	20ff      	movs	r0, #255	; 0xff
    4422:	4b1b      	ldr	r3, [pc, #108]	; (4490 <ETH_Copy+0xd8>)
    4424:	4798      	blx	r3
		ENC28_Bfs(J60_ECON1, 0x20);
    4426:	2120      	movs	r1, #32
    4428:	20ff      	movs	r0, #255	; 0xff
    442a:	4b1a      	ldr	r3, [pc, #104]	; (4494 <ETH_Copy+0xdc>)
    442c:	4798      	blx	r3
		timer = 40 * len;
    442e:	2428      	movs	r4, #40	; 0x28
    4430:	436c      	muls	r4, r5
    4432:	b2a4      	uxth	r4, r4
		while ((ENC28_Rcr8(J60_ECON1) & 0x20) != 0 && --timer)
    4434:	e004      	b.n	4440 <ETH_Copy+0x88>
			ENC28_Wcr16(J60_EDMANDL, temp_len);
    4436:	2012      	movs	r0, #18
    4438:	4b11      	ldr	r3, [pc, #68]	; (4480 <ETH_Copy+0xc8>)
    443a:	4798      	blx	r3
    443c:	e7ef      	b.n	441e <ETH_Copy+0x66>
			NOP(); // sit here until the DMAST bit is clear
    443e:	46c0      	nop			; (mov r8, r8)
		while ((ENC28_Rcr8(J60_ECON1) & 0x20) != 0 && --timer)
    4440:	20ff      	movs	r0, #255	; 0xff
    4442:	4b0d      	ldr	r3, [pc, #52]	; (4478 <ETH_Copy+0xc0>)
    4444:	4798      	blx	r3
    4446:	0683      	lsls	r3, r0, #26
    4448:	d503      	bpl.n	4452 <ETH_Copy+0x9a>
    444a:	3c01      	subs	r4, #1
    444c:	b2a4      	uxth	r4, r4
    444e:	2c00      	cmp	r4, #0
    4450:	d1f5      	bne.n	443e <ETH_Copy+0x86>
		if ((ENC28_Rcr8(J60_ECON1) & 0x20) == 0) {
    4452:	20ff      	movs	r0, #255	; 0xff
    4454:	4b08      	ldr	r3, [pc, #32]	; (4478 <ETH_Copy+0xc0>)
    4456:	4798      	blx	r3
    4458:	0683      	lsls	r3, r0, #26
    445a:	d501      	bpl.n	4460 <ETH_Copy+0xa8>
	return DMA_TIMEOUT;
    445c:	200c      	movs	r0, #12
    445e:	e7c1      	b.n	43e4 <ETH_Copy+0x2c>
			ENC28_Wcr16(J60_EWRPTL, tx_buffer_address);
    4460:	0031      	movs	r1, r6
    4462:	2002      	movs	r0, #2
    4464:	4b06      	ldr	r3, [pc, #24]	; (4480 <ETH_Copy+0xc8>)
    4466:	4798      	blx	r3
			TXPacketSize += len; // fix the packet length
    4468:	4b0b      	ldr	r3, [pc, #44]	; (4498 <ETH_Copy+0xe0>)
    446a:	881a      	ldrh	r2, [r3, #0]
    446c:	18ad      	adds	r5, r5, r2
    446e:	801d      	strh	r5, [r3, #0]
			return SUCCESS;
    4470:	2001      	movs	r0, #1
    4472:	e7b7      	b.n	43e4 <ETH_Copy+0x2c>
    if (len==0) return SUCCESS; // nothing to copy
    4474:	2001      	movs	r0, #1
    4476:	e7b5      	b.n	43e4 <ETH_Copy+0x2c>
    4478:	00003a41 	.word	0x00003a41
    447c:	00003b7d 	.word	0x00003b7d
    4480:	00003ae1 	.word	0x00003ae1
    4484:	20004ab8 	.word	0x20004ab8
    4488:	00001a21 	.word	0x00001a21
    448c:	ffffe5df 	.word	0xffffe5df
    4490:	00003bdd 	.word	0x00003bdd
    4494:	00003a71 	.word	0x00003a71
    4498:	20004ab4 	.word	0x20004ab4

0000449c <ETH_TxComputeChecksum>:
 * @param position
 * @param length
 * @return
 */
uint16_t ETH_TxComputeChecksum(uint16_t position, uint16_t length, uint16_t seed)
{
    449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    449e:	0006      	movs	r6, r0
    44a0:	000f      	movs	r7, r1
    44a2:	0014      	movs	r4, r2
	uint32_t cksm = 0;

	//    cksm = seed;
	position += 1; /* sizeof(Control_Byte) */
    44a4:	1c45      	adds	r5, r0, #1
    44a6:	b2ad      	uxth	r5, r5

	while ((ENC28_Rcr8(J60_ECON1) & 0x20) != 0)
    44a8:	20ff      	movs	r0, #255	; 0xff
    44aa:	4b1e      	ldr	r3, [pc, #120]	; (4524 <ETH_TxComputeChecksum+0x88>)
    44ac:	4798      	blx	r3
    44ae:	0683      	lsls	r3, r0, #26
    44b0:	d4fa      	bmi.n	44a8 <ETH_TxComputeChecksum+0xc>
		; // sit here until the DMAST bit is clear

	ENC28_Wcr16(J60_EDMASTL, (TXSTART + position));
    44b2:	4b1d      	ldr	r3, [pc, #116]	; (4528 <ETH_TxComputeChecksum+0x8c>)
    44b4:	469c      	mov	ip, r3
    44b6:	4466      	add	r6, ip
    44b8:	b2b1      	uxth	r1, r6
    44ba:	2010      	movs	r0, #16
    44bc:	4e1b      	ldr	r6, [pc, #108]	; (452c <ETH_TxComputeChecksum+0x90>)
    44be:	47b0      	blx	r6
	ENC28_Wcr16(J60_EDMANDL, TXSTART + position + (length - 1));
    44c0:	19ed      	adds	r5, r5, r7
    44c2:	b2a9      	uxth	r1, r5
    44c4:	4b1a      	ldr	r3, [pc, #104]	; (4530 <ETH_TxComputeChecksum+0x94>)
    44c6:	469c      	mov	ip, r3
    44c8:	4461      	add	r1, ip
    44ca:	b289      	uxth	r1, r1
    44cc:	2012      	movs	r0, #18
    44ce:	47b0      	blx	r6

	if (!(ENC28_Rcr8(J60_ECON1) & 0x10)) // Make sure CSUMEN is not set already
    44d0:	20ff      	movs	r0, #255	; 0xff
    44d2:	4b14      	ldr	r3, [pc, #80]	; (4524 <ETH_TxComputeChecksum+0x88>)
    44d4:	4798      	blx	r3
    44d6:	06c3      	lsls	r3, r0, #27
    44d8:	d502      	bpl.n	44e0 <ETH_TxComputeChecksum+0x44>
	uint32_t cksm = 0;
    44da:	2300      	movs	r3, #0
				cksm = (cksm & 0x0FFFF) + (cksm >> 16);
			}
		}
		cksm = htons(cksm);
	}
	return cksm;
    44dc:	b298      	uxth	r0, r3
}
    44de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ENC28_Bfs(J60_ECON1, 0x30);
    44e0:	2130      	movs	r1, #48	; 0x30
    44e2:	20ff      	movs	r0, #255	; 0xff
    44e4:	4b13      	ldr	r3, [pc, #76]	; (4534 <ETH_TxComputeChecksum+0x98>)
    44e6:	4798      	blx	r3
		while ((ENC28_Rcr8(J60_ECON1) & 0x20) != 0)
    44e8:	20ff      	movs	r0, #255	; 0xff
    44ea:	4b0e      	ldr	r3, [pc, #56]	; (4524 <ETH_TxComputeChecksum+0x88>)
    44ec:	4798      	blx	r3
    44ee:	0683      	lsls	r3, r0, #26
    44f0:	d4fa      	bmi.n	44e8 <ETH_TxComputeChecksum+0x4c>
		ENC28_Bfc(J60_ECON1, 0x10);
    44f2:	2110      	movs	r1, #16
    44f4:	20ff      	movs	r0, #255	; 0xff
    44f6:	4b10      	ldr	r3, [pc, #64]	; (4538 <ETH_TxComputeChecksum+0x9c>)
    44f8:	4798      	blx	r3
		cksm = ENC28_Rcr16(J60_EDMACSL);
    44fa:	2016      	movs	r0, #22
    44fc:	4b0f      	ldr	r3, [pc, #60]	; (453c <ETH_TxComputeChecksum+0xa0>)
    44fe:	4798      	blx	r3
    4500:	0003      	movs	r3, r0
		if (seed) {
    4502:	2c00      	cmp	r4, #0
    4504:	d008      	beq.n	4518 <ETH_TxComputeChecksum+0x7c>
			seed = ~(seed);
    4506:	43e3      	mvns	r3, r4
    4508:	b29b      	uxth	r3, r3
			cksm += seed;
    450a:	18c3      	adds	r3, r0, r3
			while (cksm >> 16) {
    450c:	e002      	b.n	4514 <ETH_TxComputeChecksum+0x78>
				cksm = (cksm & 0x0FFFF) + (cksm >> 16);
    450e:	041b      	lsls	r3, r3, #16
    4510:	0c1b      	lsrs	r3, r3, #16
    4512:	18d3      	adds	r3, r2, r3
			while (cksm >> 16) {
    4514:	0c1a      	lsrs	r2, r3, #16
    4516:	d1fa      	bne.n	450e <ETH_TxComputeChecksum+0x72>
		cksm = htons(cksm);
    4518:	b298      	uxth	r0, r3
    451a:	0a00      	lsrs	r0, r0, #8
    451c:	061b      	lsls	r3, r3, #24
    451e:	0c1b      	lsrs	r3, r3, #16
    4520:	4303      	orrs	r3, r0
    4522:	e7db      	b.n	44dc <ETH_TxComputeChecksum+0x40>
    4524:	00003a41 	.word	0x00003a41
    4528:	00001a24 	.word	0x00001a24
    452c:	00003ae1 	.word	0x00003ae1
    4530:	00001a22 	.word	0x00001a22
    4534:	00003a71 	.word	0x00003a71
    4538:	00003bdd 	.word	0x00003bdd
    453c:	00003b7d 	.word	0x00003b7d

00004540 <ETH_RxComputeChecksum>:
 * @param len
 * @param seed
 * @return
 */
uint16_t ETH_RxComputeChecksum(uint16_t len, uint16_t seed)
{
    4540:	b570      	push	{r4, r5, r6, lr}
    4542:	0004      	movs	r4, r0
    4544:	000e      	movs	r6, r1
	uint16_t rxptr;
	uint32_t cksm;

	// Save the read pointer starting address
	rxptr = ENC28_Rcr16(J60_ERDPTL);
    4546:	2000      	movs	r0, #0
    4548:	4b09      	ldr	r3, [pc, #36]	; (4570 <ETH_RxComputeChecksum+0x30>)
    454a:	4798      	blx	r3
    454c:	0005      	movs	r5, r0
	;

	cksm = ETH_ComputeChecksum(len, seed);
    454e:	0031      	movs	r1, r6
    4550:	0020      	movs	r0, r4
    4552:	4b08      	ldr	r3, [pc, #32]	; (4574 <ETH_RxComputeChecksum+0x34>)
    4554:	4798      	blx	r3
    4556:	0004      	movs	r4, r0

	// Restore old read pointer location
	ENC28_Wcr16(J60_ERDPTL, rxptr);
    4558:	0029      	movs	r1, r5
    455a:	2000      	movs	r0, #0
    455c:	4b06      	ldr	r3, [pc, #24]	; (4578 <ETH_RxComputeChecksum+0x38>)
    455e:	4798      	blx	r3

	// Return the resulting checksum
	return ((cksm & 0xFF00) >> 8) | ((cksm & 0x00FF) << 8);
    4560:	0a23      	lsrs	r3, r4, #8
    4562:	20ff      	movs	r0, #255	; 0xff
    4564:	4003      	ands	r3, r0
    4566:	0224      	lsls	r4, r4, #8
    4568:	b2a0      	uxth	r0, r4
    456a:	4318      	orrs	r0, r3
}
    456c:	bd70      	pop	{r4, r5, r6, pc}
    456e:	46c0      	nop			; (mov r8, r8)
    4570:	00003b7d 	.word	0x00003b7d
    4574:	00003f45 	.word	0x00003f45
    4578:	00003ae1 	.word	0x00003ae1

0000457c <ETH_GetMAC>:
/**
 * To get the MAC address
 * @param mac
 */
void ETH_GetMAC(uint8_t *macAddr)
{
    457c:	b510      	push	{r4, lr}
#if 1

    // RNG: MAC registers are flakey when clocked < 8MHz... since MAC is tied to serial, over-ride with application set MAC
    memcpy(macAddr, (uint8_t*)&eth_MAC.mac_array[0], 6);
    457e:	2206      	movs	r2, #6
    4580:	4902      	ldr	r1, [pc, #8]	; (458c <ETH_GetMAC+0x10>)
    4582:	3108      	adds	r1, #8
    4584:	4b02      	ldr	r3, [pc, #8]	; (4590 <ETH_GetMAC+0x14>)
    4586:	4798      	blx	r3
	*macAddr++ = ENC28_Rcr8(J60_MAADR4);
	*macAddr++ = ENC28_Rcr8(J60_MAADR5);
	*macAddr++ = ENC28_Rcr8(J60_MAADR6);

#endif
}
    4588:	bd10      	pop	{r4, pc}
    458a:	46c0      	nop			; (mov r8, r8)
    458c:	20000874 	.word	0x20000874
    4590:	000065f3 	.word	0x000065f3

00004594 <ETH_SaveRDPT>:
	ENC28_Wcr8(J60_MAADR5, *macAddr++);
	ENC28_Wcr8(J60_MAADR6, *macAddr++);
}

void ETH_SaveRDPT(void)
{
    4594:	b510      	push	{r4, lr}
	ethData.saveRDPT = ENC28_Rcr16(J60_ERDPTL);
    4596:	2000      	movs	r0, #0
    4598:	4b02      	ldr	r3, [pc, #8]	; (45a4 <ETH_SaveRDPT+0x10>)
    459a:	4798      	blx	r3
    459c:	4b02      	ldr	r3, [pc, #8]	; (45a8 <ETH_SaveRDPT+0x14>)
    459e:	8098      	strh	r0, [r3, #4]
}
    45a0:	bd10      	pop	{r4, pc}
    45a2:	46c0      	nop			; (mov r8, r8)
    45a4:	00003b7d 	.word	0x00003b7d
    45a8:	20004ab8 	.word	0x20004ab8

000045ac <ETH_ResetByteCount>:

void ETH_ResetByteCount(void)
{
    45ac:	b510      	push	{r4, lr}
	ethData.saveWRPT = ENC28_Rcr16(J60_EWRPTL);
    45ae:	2002      	movs	r0, #2
    45b0:	4b02      	ldr	r3, [pc, #8]	; (45bc <ETH_ResetByteCount+0x10>)
    45b2:	4798      	blx	r3
    45b4:	4b02      	ldr	r3, [pc, #8]	; (45c0 <ETH_ResetByteCount+0x14>)
    45b6:	80d8      	strh	r0, [r3, #6]
}
    45b8:	bd10      	pop	{r4, pc}
    45ba:	46c0      	nop			; (mov r8, r8)
    45bc:	00003b7d 	.word	0x00003b7d
    45c0:	20004ab8 	.word	0x20004ab8

000045c4 <ETH_GetByteCount>:

uint16_t ETH_GetByteCount(void)
{
    45c4:	b510      	push	{r4, lr}
	uint16_t wptr;

	wptr = ENC28_Rcr16(J60_EWRPTL);
    45c6:	2002      	movs	r0, #2
    45c8:	4b03      	ldr	r3, [pc, #12]	; (45d8 <ETH_GetByteCount+0x14>)
    45ca:	4798      	blx	r3

	return (wptr - ethData.saveWRPT);
    45cc:	4b03      	ldr	r3, [pc, #12]	; (45dc <ETH_GetByteCount+0x18>)
    45ce:	88db      	ldrh	r3, [r3, #6]
    45d0:	1ac0      	subs	r0, r0, r3
    45d2:	b280      	uxth	r0, r0
}
    45d4:	bd10      	pop	{r4, pc}
    45d6:	46c0      	nop			; (mov r8, r8)
    45d8:	00003b7d 	.word	0x00003b7d
    45dc:	20004ab8 	.word	0x20004ab8

000045e0 <ETH_InitMAC>:
/**This function was added by Eyedro to set the MAC address BEFORE initializing the stack and performing DHCP requests
 *
 * @param pau8MAC
 *      MAC address to use
 */
void ETH_InitMAC(uint8_t *pau8MAC) {
    45e0:	b510      	push	{r4, lr}
    45e2:	0001      	movs	r1, r0
    memcpy((uint8_t*)&eth_MAC.mac_array[0], pau8MAC, 6);
    45e4:	2206      	movs	r2, #6
    45e6:	4802      	ldr	r0, [pc, #8]	; (45f0 <ETH_InitMAC+0x10>)
    45e8:	3008      	adds	r0, #8
    45ea:	4b02      	ldr	r3, [pc, #8]	; (45f4 <ETH_InitMAC+0x14>)
    45ec:	4798      	blx	r3
}
    45ee:	bd10      	pop	{r4, pc}
    45f0:	20000874 	.word	0x20000874
    45f4:	000065f3 	.word	0x000065f3

000045f8 <ARPV4_Init>:
 * ARP Initialization
 */

void ARPV4_Init(void)
{
	for (uint8_t x = 0; x < sizeof(arpMap); x++)
    45f8:	2300      	movs	r3, #0
    45fa:	e005      	b.n	4608 <ARPV4_Init+0x10>
		((char *)arpMap)[x] = 0;
    45fc:	4a04      	ldr	r2, [pc, #16]	; (4610 <ARPV4_Init+0x18>)
    45fe:	189a      	adds	r2, r3, r2
    4600:	2100      	movs	r1, #0
    4602:	7011      	strb	r1, [r2, #0]
	for (uint8_t x = 0; x < sizeof(arpMap); x++)
    4604:	3301      	adds	r3, #1
    4606:	b2db      	uxtb	r3, r3
    4608:	2b67      	cmp	r3, #103	; 0x67
    460a:	d9f7      	bls.n	45fc <ARPV4_Init+0x4>
}
    460c:	4770      	bx	lr
    460e:	46c0      	nop			; (mov r8, r8)
    4610:	20004ac4 	.word	0x20004ac4

00004614 <ARPV4_Packet>:
 * ARP Packet received
 * @return
 */

error_msg ARPV4_Packet(void)
{
    4614:	b530      	push	{r4, r5, lr}
    4616:	b089      	sub	sp, #36	; 0x24
	uint16_t    length;
	error_msg   ret;

	ret = ERROR;

	length = ETH_ReadBlock((char *)&header, sizeof(arpHeader_t));
    4618:	211c      	movs	r1, #28
    461a:	a801      	add	r0, sp, #4
    461c:	4b5c      	ldr	r3, [pc, #368]	; (4790 <ARPV4_Packet+0x17c>)
    461e:	4798      	blx	r3
	if (length == sizeof(arpHeader_t)) {
    4620:	281c      	cmp	r0, #28
    4622:	d02d      	beq.n	4680 <ARPV4_Packet+0x6c>
	ret = ERROR;
    4624:	2000      	movs	r0, #0
		} else {
			ret = ARP_IP_NOT_MATCHED;
		}
	}
	return ret;
}
    4626:	b009      	add	sp, #36	; 0x24
    4628:	bd30      	pop	{r4, r5, pc}
			entryPointer++;
    462a:	300d      	adds	r0, #13
		for (uint8_t x = ARP_MAP_SIZE; x > 0; x--) {
    462c:	3c01      	subs	r4, #1
    462e:	b2e4      	uxtb	r4, r4
    4630:	2c00      	cmp	r4, #0
    4632:	d01f      	beq.n	4674 <ARPV4_Packet+0x60>
			if ((header.spa == entryPointer->ipAddress) && (header.ptype == entryPointer->protocolType)) {
    4634:	ab01      	add	r3, sp, #4
    4636:	89d9      	ldrh	r1, [r3, #14]
    4638:	8a1a      	ldrh	r2, [r3, #16]
    463a:	0412      	lsls	r2, r2, #16
    463c:	430a      	orrs	r2, r1
    463e:	7983      	ldrb	r3, [r0, #6]
    4640:	79c1      	ldrb	r1, [r0, #7]
    4642:	0209      	lsls	r1, r1, #8
    4644:	4319      	orrs	r1, r3
    4646:	7a03      	ldrb	r3, [r0, #8]
    4648:	041b      	lsls	r3, r3, #16
    464a:	4319      	orrs	r1, r3
    464c:	7a43      	ldrb	r3, [r0, #9]
    464e:	061b      	lsls	r3, r3, #24
    4650:	430b      	orrs	r3, r1
    4652:	429a      	cmp	r2, r3
    4654:	d1e9      	bne.n	462a <ARPV4_Packet+0x16>
    4656:	ab01      	add	r3, sp, #4
    4658:	885a      	ldrh	r2, [r3, #2]
    465a:	7a81      	ldrb	r1, [r0, #10]
    465c:	7ac3      	ldrb	r3, [r0, #11]
    465e:	021b      	lsls	r3, r3, #8
    4660:	430b      	orrs	r3, r1
    4662:	429a      	cmp	r2, r3
    4664:	d1e1      	bne.n	462a <ARPV4_Packet+0x16>
				entryPointer->age          = 0; // reset the age
    4666:	2300      	movs	r3, #0
    4668:	7303      	strb	r3, [r0, #12]
				entryPointer->macAddress.s = header.sha.s;
    466a:	2206      	movs	r2, #6
    466c:	a903      	add	r1, sp, #12
    466e:	4b49      	ldr	r3, [pc, #292]	; (4794 <ARPV4_Packet+0x180>)
    4670:	4798      	blx	r3
				mergeFlag                  = true;
    4672:	2401      	movs	r4, #1
		if (ipv4Address
    4674:	4b48      	ldr	r3, [pc, #288]	; (4798 <ARPV4_Packet+0x184>)
    4676:	681a      	ldr	r2, [r3, #0]
    4678:	2a00      	cmp	r2, #0
    467a:	d104      	bne.n	4686 <ARPV4_Packet+0x72>
			ret = ARP_IP_NOT_MATCHED;
    467c:	200e      	movs	r0, #14
    467e:	e7d2      	b.n	4626 <ARPV4_Packet+0x12>
    4680:	2408      	movs	r4, #8
    4682:	4846      	ldr	r0, [pc, #280]	; (479c <ARPV4_Packet+0x188>)
    4684:	e7d4      	b.n	4630 <ARPV4_Packet+0x1c>
		        == (((header.tpa >> 24) & 0xff) | ((header.tpa << 8) & 0xff0000) | ((header.tpa >> 8) & 0xff00)
    4686:	9907      	ldr	r1, [sp, #28]
    4688:	0e0b      	lsrs	r3, r1, #24
    468a:	0208      	lsls	r0, r1, #8
    468c:	25ff      	movs	r5, #255	; 0xff
    468e:	042d      	lsls	r5, r5, #16
    4690:	4028      	ands	r0, r5
    4692:	4303      	orrs	r3, r0
    4694:	0a08      	lsrs	r0, r1, #8
    4696:	25ff      	movs	r5, #255	; 0xff
    4698:	022d      	lsls	r5, r5, #8
    469a:	4028      	ands	r0, r5
    469c:	4303      	orrs	r3, r0
		            | ((header.tpa << 24) & 0xff000000)))) {
    469e:	0609      	lsls	r1, r1, #24
    46a0:	430b      	orrs	r3, r1
		    && (ipv4Address
    46a2:	429a      	cmp	r2, r3
    46a4:	d001      	beq.n	46aa <ARPV4_Packet+0x96>
			ret = ARP_IP_NOT_MATCHED;
    46a6:	200e      	movs	r0, #14
    46a8:	e7bd      	b.n	4626 <ARPV4_Packet+0x12>
			if (!mergeFlag) {
    46aa:	2c00      	cmp	r4, #0
    46ac:	d131      	bne.n	4712 <ARPV4_Packet+0xfe>
    46ae:	2308      	movs	r3, #8
    46b0:	4a3a      	ldr	r2, [pc, #232]	; (479c <ARPV4_Packet+0x188>)
    46b2:	0014      	movs	r4, r2
    46b4:	e002      	b.n	46bc <ARPV4_Packet+0xa8>
					arpPtr++;
    46b6:	320d      	adds	r2, #13
				for (uint8_t x = ARP_MAP_SIZE; x != 0; x--) {
    46b8:	3b01      	subs	r3, #1
    46ba:	b2db      	uxtb	r3, r3
    46bc:	2b00      	cmp	r3, #0
    46be:	d005      	beq.n	46cc <ARPV4_Packet+0xb8>
					if (entryPointer->age < arpPtr->age) {
    46c0:	7b20      	ldrb	r0, [r4, #12]
    46c2:	7b11      	ldrb	r1, [r2, #12]
    46c4:	4288      	cmp	r0, r1
    46c6:	d2f6      	bcs.n	46b6 <ARPV4_Packet+0xa2>
						entryPointer = arpPtr;
    46c8:	0014      	movs	r4, r2
    46ca:	e7f4      	b.n	46b6 <ARPV4_Packet+0xa2>
				entryPointer->age          = 0;
    46cc:	7323      	strb	r3, [r4, #12]
				entryPointer->macAddress.s = header.sha.s;
    46ce:	ad01      	add	r5, sp, #4
    46d0:	2206      	movs	r2, #6
    46d2:	a903      	add	r1, sp, #12
    46d4:	0020      	movs	r0, r4
    46d6:	4b2f      	ldr	r3, [pc, #188]	; (4794 <ARPV4_Packet+0x180>)
    46d8:	4798      	blx	r3
				entryPointer->ipAddress    = ntohl(header.spa);
    46da:	89eb      	ldrh	r3, [r5, #14]
    46dc:	8a2a      	ldrh	r2, [r5, #16]
    46de:	0412      	lsls	r2, r2, #16
    46e0:	431a      	orrs	r2, r3
    46e2:	0e13      	lsrs	r3, r2, #24
    46e4:	0a11      	lsrs	r1, r2, #8
    46e6:	20ff      	movs	r0, #255	; 0xff
    46e8:	0200      	lsls	r0, r0, #8
    46ea:	4001      	ands	r1, r0
    46ec:	430b      	orrs	r3, r1
    46ee:	0211      	lsls	r1, r2, #8
    46f0:	20ff      	movs	r0, #255	; 0xff
    46f2:	0400      	lsls	r0, r0, #16
    46f4:	4001      	ands	r1, r0
    46f6:	430b      	orrs	r3, r1
    46f8:	0612      	lsls	r2, r2, #24
    46fa:	4313      	orrs	r3, r2
    46fc:	71a3      	strb	r3, [r4, #6]
    46fe:	0a19      	lsrs	r1, r3, #8
    4700:	71e1      	strb	r1, [r4, #7]
    4702:	0c19      	lsrs	r1, r3, #16
    4704:	7221      	strb	r1, [r4, #8]
    4706:	0e1b      	lsrs	r3, r3, #24
    4708:	7263      	strb	r3, [r4, #9]
				entryPointer->protocolType = header.ptype;
    470a:	886b      	ldrh	r3, [r5, #2]
    470c:	72a3      	strb	r3, [r4, #10]
    470e:	0a1b      	lsrs	r3, r3, #8
    4710:	72e3      	strb	r3, [r4, #11]
			if (header.oper == ntohs(ARP_REQUEST)) {
    4712:	ab01      	add	r3, sp, #4
    4714:	88da      	ldrh	r2, [r3, #6]
    4716:	2380      	movs	r3, #128	; 0x80
    4718:	005b      	lsls	r3, r3, #1
    471a:	429a      	cmp	r2, r3
    471c:	d001      	beq.n	4722 <ARPV4_Packet+0x10e>
	ret = ERROR;
    471e:	2000      	movs	r0, #0
    4720:	e781      	b.n	4626 <ARPV4_Packet+0x12>
				ret = ETH_WriteStart(&header.sha, ETHERTYPE_ARP);
    4722:	491f      	ldr	r1, [pc, #124]	; (47a0 <ARPV4_Packet+0x18c>)
    4724:	a803      	add	r0, sp, #12
    4726:	4b1f      	ldr	r3, [pc, #124]	; (47a4 <ARPV4_Packet+0x190>)
    4728:	4798      	blx	r3
				if (ret == SUCCESS) {
    472a:	2801      	cmp	r0, #1
    472c:	d000      	beq.n	4730 <ARPV4_Packet+0x11c>
    472e:	e77a      	b.n	4626 <ARPV4_Packet+0x12>
					header.tha.s = header.sha.s;
    4730:	ac01      	add	r4, sp, #4
    4732:	2206      	movs	r2, #6
    4734:	a903      	add	r1, sp, #12
    4736:	3015      	adds	r0, #21
    4738:	4468      	add	r0, sp
    473a:	4b16      	ldr	r3, [pc, #88]	; (4794 <ARPV4_Packet+0x180>)
    473c:	4798      	blx	r3
					ETH_GetMAC(header.sha.mac_array);
    473e:	a803      	add	r0, sp, #12
    4740:	4b19      	ldr	r3, [pc, #100]	; (47a8 <ARPV4_Packet+0x194>)
    4742:	4798      	blx	r3
					header.tpa  = header.spa;
    4744:	89e2      	ldrh	r2, [r4, #14]
    4746:	8a23      	ldrh	r3, [r4, #16]
    4748:	041b      	lsls	r3, r3, #16
    474a:	4313      	orrs	r3, r2
    474c:	61a3      	str	r3, [r4, #24]
					header.spa  = htonl(ipv4Address);
    474e:	4b12      	ldr	r3, [pc, #72]	; (4798 <ARPV4_Packet+0x184>)
    4750:	681a      	ldr	r2, [r3, #0]
    4752:	0e13      	lsrs	r3, r2, #24
    4754:	0a11      	lsrs	r1, r2, #8
    4756:	20ff      	movs	r0, #255	; 0xff
    4758:	0200      	lsls	r0, r0, #8
    475a:	4001      	ands	r1, r0
    475c:	430b      	orrs	r3, r1
    475e:	0211      	lsls	r1, r2, #8
    4760:	20ff      	movs	r0, #255	; 0xff
    4762:	0400      	lsls	r0, r0, #16
    4764:	4001      	ands	r1, r0
    4766:	430b      	orrs	r3, r1
    4768:	0612      	lsls	r2, r2, #24
    476a:	4313      	orrs	r3, r2
    476c:	2112      	movs	r1, #18
    476e:	4469      	add	r1, sp
    4770:	041a      	lsls	r2, r3, #16
    4772:	0c12      	lsrs	r2, r2, #16
    4774:	800a      	strh	r2, [r1, #0]
    4776:	0c1b      	lsrs	r3, r3, #16
    4778:	804b      	strh	r3, [r1, #2]
					header.oper = htons(ARP_REPLY);
    477a:	2380      	movs	r3, #128	; 0x80
    477c:	009b      	lsls	r3, r3, #2
    477e:	80e3      	strh	r3, [r4, #6]
					ETH_WriteBlock((char *)&header, sizeof(header));
    4780:	211c      	movs	r1, #28
    4782:	0020      	movs	r0, r4
    4784:	4b09      	ldr	r3, [pc, #36]	; (47ac <ARPV4_Packet+0x198>)
    4786:	4798      	blx	r3
					ret = ETH_Send(); // remember this could fail to send.
    4788:	4b09      	ldr	r3, [pc, #36]	; (47b0 <ARPV4_Packet+0x19c>)
    478a:	4798      	blx	r3
    478c:	e74b      	b.n	4626 <ARPV4_Packet+0x12>
    478e:	46c0      	nop			; (mov r8, r8)
    4790:	00004019 	.word	0x00004019
    4794:	000065f3 	.word	0x000065f3
    4798:	20004b4c 	.word	0x20004b4c
    479c:	20004ac4 	.word	0x20004ac4
    47a0:	00000806 	.word	0x00000806
    47a4:	0000416d 	.word	0x0000416d
    47a8:	0000457d 	.word	0x0000457d
    47ac:	0000411d 	.word	0x0000411d
    47b0:	0000425d 	.word	0x0000425d

000047b4 <ARPV4_Update>:
 */

void ARPV4_Update(void) // call me every 10 seconds or so and I will age the arp table.
{
	arpMap_t *entryPointer = arpMap;
	for (uint8_t x = 0; x < ARP_MAP_SIZE; x++) {
    47b4:	2300      	movs	r3, #0
	arpMap_t *entryPointer = arpMap;
    47b6:	4a05      	ldr	r2, [pc, #20]	; (47cc <ARPV4_Update+0x18>)
	for (uint8_t x = 0; x < ARP_MAP_SIZE; x++) {
    47b8:	e005      	b.n	47c6 <ARPV4_Update+0x12>
		entryPointer->age++;
    47ba:	7b11      	ldrb	r1, [r2, #12]
    47bc:	3101      	adds	r1, #1
    47be:	7311      	strb	r1, [r2, #12]
		entryPointer++;
    47c0:	320d      	adds	r2, #13
	for (uint8_t x = 0; x < ARP_MAP_SIZE; x++) {
    47c2:	3301      	adds	r3, #1
    47c4:	b2db      	uxtb	r3, r3
    47c6:	2b07      	cmp	r3, #7
    47c8:	d9f7      	bls.n	47ba <ARPV4_Update+0x6>
	}
}
    47ca:	4770      	bx	lr
    47cc:	20004ac4 	.word	0x20004ac4

000047d0 <ARPV4_Request>:
 * ARP send Request
 * @param dest_address
 * @return
 */
error_msg ARPV4_Request(uint32_t destAddress)
{
    47d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    47d2:	b089      	sub	sp, #36	; 0x24
    47d4:	0005      	movs	r5, r0
	error_msg ret;

	ret = ERROR;

	arpHeader_t header;
	header.htype = htons(1);
    47d6:	ac01      	add	r4, sp, #4
    47d8:	2380      	movs	r3, #128	; 0x80
    47da:	005b      	lsls	r3, r3, #1
    47dc:	8023      	strh	r3, [r4, #0]
	header.ptype = htons(0x0800);
    47de:	2208      	movs	r2, #8
    47e0:	8062      	strh	r2, [r4, #2]
	header.hlen  = 6;
    47e2:	3a02      	subs	r2, #2
    47e4:	7122      	strb	r2, [r4, #4]
	header.plen  = 4;
    47e6:	3a02      	subs	r2, #2
    47e8:	7162      	strb	r2, [r4, #5]
	header.oper  = htons(ARP_REQUEST);
    47ea:	80e3      	strh	r3, [r4, #6]
	ETH_GetMAC(header.sha.mac_array);
    47ec:	a803      	add	r0, sp, #12
    47ee:	4b1d      	ldr	r3, [pc, #116]	; (4864 <ARPV4_Request+0x94>)
    47f0:	4798      	blx	r3
	header.spa         = htonl(ipv4Address);
    47f2:	4b1d      	ldr	r3, [pc, #116]	; (4868 <ARPV4_Request+0x98>)
    47f4:	681a      	ldr	r2, [r3, #0]
    47f6:	0e13      	lsrs	r3, r2, #24
    47f8:	0a11      	lsrs	r1, r2, #8
    47fa:	26ff      	movs	r6, #255	; 0xff
    47fc:	0236      	lsls	r6, r6, #8
    47fe:	4031      	ands	r1, r6
    4800:	430b      	orrs	r3, r1
    4802:	0210      	lsls	r0, r2, #8
    4804:	21ff      	movs	r1, #255	; 0xff
    4806:	0409      	lsls	r1, r1, #16
    4808:	4008      	ands	r0, r1
    480a:	4303      	orrs	r3, r0
    480c:	0612      	lsls	r2, r2, #24
    480e:	4313      	orrs	r3, r2
    4810:	2012      	movs	r0, #18
    4812:	4468      	add	r0, sp
    4814:	041f      	lsls	r7, r3, #16
    4816:	0c3f      	lsrs	r7, r7, #16
    4818:	2200      	movs	r2, #0
    481a:	8007      	strh	r7, [r0, #0]
    481c:	0c1b      	lsrs	r3, r3, #16
    481e:	8043      	strh	r3, [r0, #2]
	header.tpa         = htonl(destAddress);
    4820:	0e28      	lsrs	r0, r5, #24
    4822:	0a2b      	lsrs	r3, r5, #8
    4824:	4033      	ands	r3, r6
    4826:	4318      	orrs	r0, r3
    4828:	022b      	lsls	r3, r5, #8
    482a:	400b      	ands	r3, r1
    482c:	4318      	orrs	r0, r3
    482e:	062d      	lsls	r5, r5, #24
    4830:	4328      	orrs	r0, r5
    4832:	61a0      	str	r0, [r4, #24]
	header.tha.s.byte1 = 0;
    4834:	74a2      	strb	r2, [r4, #18]
	header.tha.s.byte2 = 0;
    4836:	74e2      	strb	r2, [r4, #19]
	header.tha.s.byte3 = 0;
    4838:	7522      	strb	r2, [r4, #20]
	header.tha.s.byte4 = 0;
    483a:	7562      	strb	r2, [r4, #21]
	header.tha.s.byte5 = 0;
    483c:	75a2      	strb	r2, [r4, #22]
	header.tha.s.byte6 = 0;
    483e:	75e2      	strb	r2, [r4, #23]

	ret = ETH_WriteStart(&broadcastMAC, ETHERTYPE_ARP);
    4840:	490a      	ldr	r1, [pc, #40]	; (486c <ARPV4_Request+0x9c>)
    4842:	480b      	ldr	r0, [pc, #44]	; (4870 <ARPV4_Request+0xa0>)
    4844:	4b0b      	ldr	r3, [pc, #44]	; (4874 <ARPV4_Request+0xa4>)
    4846:	4798      	blx	r3
	if (ret == SUCCESS) {
    4848:	2801      	cmp	r0, #1
    484a:	d001      	beq.n	4850 <ARPV4_Request+0x80>
		if (ret == SUCCESS) {
			return MAC_NOT_FOUND;
		}
	}
	return ret;
}
    484c:	b009      	add	sp, #36	; 0x24
    484e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ETH_WriteBlock((char *)&header, sizeof(arpHeader_t));
    4850:	211c      	movs	r1, #28
    4852:	a801      	add	r0, sp, #4
    4854:	4b08      	ldr	r3, [pc, #32]	; (4878 <ARPV4_Request+0xa8>)
    4856:	4798      	blx	r3
		ret = ETH_Send();
    4858:	4b08      	ldr	r3, [pc, #32]	; (487c <ARPV4_Request+0xac>)
    485a:	4798      	blx	r3
		if (ret == SUCCESS) {
    485c:	2801      	cmp	r0, #1
    485e:	d1f5      	bne.n	484c <ARPV4_Request+0x7c>
			return MAC_NOT_FOUND;
    4860:	3004      	adds	r0, #4
    4862:	e7f3      	b.n	484c <ARPV4_Request+0x7c>
    4864:	0000457d 	.word	0x0000457d
    4868:	20004b4c 	.word	0x20004b4c
    486c:	00000806 	.word	0x00000806
    4870:	00007c98 	.word	0x00007c98
    4874:	0000416d 	.word	0x0000416d
    4878:	0000411d 	.word	0x0000411d
    487c:	0000425d 	.word	0x0000425d

00004880 <ARPV4_Lookup>:
 * ARP Lookup Table
 * @param ip_address
 * @return
 */
mac48Address_t *ARPV4_Lookup(uint32_t ip_address)
{
    4880:	b510      	push	{r4, lr}
	arpMap_t *entry_pointer = arpMap;
	uint8_t   x;

	for (x = 0; x < ARP_MAP_SIZE; x++) {
    4882:	2400      	movs	r4, #0
	arpMap_t *entry_pointer = arpMap;
    4884:	4b0b      	ldr	r3, [pc, #44]	; (48b4 <ARPV4_Lookup+0x34>)
	for (x = 0; x < ARP_MAP_SIZE; x++) {
    4886:	2c07      	cmp	r4, #7
    4888:	d811      	bhi.n	48ae <ARPV4_Lookup+0x2e>
		if (entry_pointer->ipAddress == ip_address)
    488a:	799a      	ldrb	r2, [r3, #6]
    488c:	79d9      	ldrb	r1, [r3, #7]
    488e:	0209      	lsls	r1, r1, #8
    4890:	4311      	orrs	r1, r2
    4892:	7a1a      	ldrb	r2, [r3, #8]
    4894:	0412      	lsls	r2, r2, #16
    4896:	4311      	orrs	r1, r2
    4898:	7a5a      	ldrb	r2, [r3, #9]
    489a:	0612      	lsls	r2, r2, #24
    489c:	430a      	orrs	r2, r1
    489e:	4282      	cmp	r2, r0
    48a0:	d003      	beq.n	48aa <ARPV4_Lookup+0x2a>
			return &entry_pointer->macAddress;
		entry_pointer++;
    48a2:	330d      	adds	r3, #13
	for (x = 0; x < ARP_MAP_SIZE; x++) {
    48a4:	3401      	adds	r4, #1
    48a6:	b2e4      	uxtb	r4, r4
    48a8:	e7ed      	b.n	4886 <ARPV4_Lookup+0x6>
			return &entry_pointer->macAddress;
    48aa:	0018      	movs	r0, r3
    48ac:	e000      	b.n	48b0 <ARPV4_Lookup+0x30>
	}
	return 0;
    48ae:	2000      	movs	r0, #0
}
    48b0:	bd10      	pop	{r4, pc}
    48b2:	46c0      	nop			; (mov r8, r8)
    48b4:	20004ac4 	.word	0x20004ac4

000048b8 <DHCP_WriteZeros>:
		}
	}
}

void DHCP_WriteZeros(uint16_t length)
{
    48b8:	b510      	push	{r4, lr}
	while (length--) {
    48ba:	e003      	b.n	48c4 <DHCP_WriteZeros+0xc>
		ETH_Write8(0);
    48bc:	2000      	movs	r0, #0
    48be:	4b04      	ldr	r3, [pc, #16]	; (48d0 <DHCP_WriteZeros+0x18>)
    48c0:	4798      	blx	r3
	while (length--) {
    48c2:	0020      	movs	r0, r4
    48c4:	1e44      	subs	r4, r0, #1
    48c6:	b2a4      	uxth	r4, r4
    48c8:	2800      	cmp	r0, #0
    48ca:	d1f7      	bne.n	48bc <DHCP_WriteZeros+0x4>
	}
}
    48cc:	bd10      	pop	{r4, pc}
    48ce:	46c0      	nop			; (mov r8, r8)
    48d0:	0000406d 	.word	0x0000406d

000048d4 <DHCP_Request>:
{
    48d4:	b570      	push	{r4, r5, r6, lr}
    48d6:	b082      	sub	sp, #8
    48d8:	0005      	movs	r5, r0
	ETH_GetMAC(ethMAC.mac_array);
    48da:	4668      	mov	r0, sp
    48dc:	4b3c      	ldr	r3, [pc, #240]	; (49d0 <DHCP_Request+0xfc>)
    48de:	4798      	blx	r3
	started = UDP_Start(0xFFFFFFFF, 68, 67);
    48e0:	2243      	movs	r2, #67	; 0x43
    48e2:	2144      	movs	r1, #68	; 0x44
    48e4:	2001      	movs	r0, #1
    48e6:	4240      	negs	r0, r0
    48e8:	4b3a      	ldr	r3, [pc, #232]	; (49d4 <DHCP_Request+0x100>)
    48ea:	4798      	blx	r3
	if (started == SUCCESS) {
    48ec:	2800      	cmp	r0, #0
    48ee:	d101      	bne.n	48f4 <DHCP_Request+0x20>
}
    48f0:	b002      	add	sp, #8
    48f2:	bd70      	pop	{r4, r5, r6, pc}
		ETH_Write32(0x01010600); // OP, HTYPE, HLEN, HOPS
    48f4:	4838      	ldr	r0, [pc, #224]	; (49d8 <DHCP_Request+0x104>)
    48f6:	4c39      	ldr	r4, [pc, #228]	; (49dc <DHCP_Request+0x108>)
    48f8:	47a0      	blx	r4
		ETH_Write32(xidValue);   // XID : made up number...
    48fa:	4839      	ldr	r0, [pc, #228]	; (49e0 <DHCP_Request+0x10c>)
    48fc:	47a0      	blx	r4
		ETH_Write32(0x00008000); // SECS, FLAGS (broadcast)
    48fe:	2080      	movs	r0, #128	; 0x80
    4900:	0200      	lsls	r0, r0, #8
    4902:	47a0      	blx	r4
		if (type == DHCP_REQUEST) {
    4904:	2d03      	cmp	r5, #3
    4906:	d04e      	beq.n	49a6 <DHCP_Request+0xd2>
			ETH_Write32(ipv4Address); // CIADDR
    4908:	4b36      	ldr	r3, [pc, #216]	; (49e4 <DHCP_Request+0x110>)
    490a:	6818      	ldr	r0, [r3, #0]
    490c:	4b33      	ldr	r3, [pc, #204]	; (49dc <DHCP_Request+0x108>)
    490e:	4798      	blx	r3
		ETH_Write32(0);                     // YIADDR
    4910:	2000      	movs	r0, #0
    4912:	4c32      	ldr	r4, [pc, #200]	; (49dc <DHCP_Request+0x108>)
    4914:	47a0      	blx	r4
		ETH_Write32(0);                     // SIADDR
    4916:	2000      	movs	r0, #0
    4918:	47a0      	blx	r4
		ETH_Write32(0);                     // GIADDR
    491a:	2000      	movs	r0, #0
    491c:	47a0      	blx	r4
		ETH_WriteBlock((char *)&ethMAC, 6); // Hardware Address
    491e:	2106      	movs	r1, #6
    4920:	4668      	mov	r0, sp
    4922:	4b31      	ldr	r3, [pc, #196]	; (49e8 <DHCP_Request+0x114>)
    4924:	4798      	blx	r3
		DHCP_WriteZeros(202);               // 0 padding  + 192 bytes of BOOTP padding
    4926:	20ca      	movs	r0, #202	; 0xca
    4928:	4b30      	ldr	r3, [pc, #192]	; (49ec <DHCP_Request+0x118>)
    492a:	4798      	blx	r3
		ETH_Write32(0x63825363);            // MAGIC COOKIE - Options to Follow
    492c:	4830      	ldr	r0, [pc, #192]	; (49f0 <DHCP_Request+0x11c>)
    492e:	47a0      	blx	r4
		ETH_Write8(53);
    4930:	2035      	movs	r0, #53	; 0x35
    4932:	4c30      	ldr	r4, [pc, #192]	; (49f4 <DHCP_Request+0x120>)
    4934:	47a0      	blx	r4
		ETH_Write8(1);
    4936:	2001      	movs	r0, #1
    4938:	47a0      	blx	r4
		ETH_Write8(type); // option 53 - DHCP packet type
    493a:	0028      	movs	r0, r5
    493c:	47a0      	blx	r4
		if (type == DHCP_REQUEST) {
    493e:	2d03      	cmp	r5, #3
    4940:	d035      	beq.n	49ae <DHCP_Request+0xda>
		ETH_Write8(55);
    4942:	2037      	movs	r0, #55	; 0x37
    4944:	4c2b      	ldr	r4, [pc, #172]	; (49f4 <DHCP_Request+0x120>)
    4946:	47a0      	blx	r4
		ETH_Write8(4);
    4948:	2004      	movs	r0, #4
    494a:	47a0      	blx	r4
		ETH_Write8(1);
    494c:	2001      	movs	r0, #1
    494e:	47a0      	blx	r4
		ETH_Write8(3);
    4950:	2003      	movs	r0, #3
    4952:	47a0      	blx	r4
		ETH_Write8(6);
    4954:	2006      	movs	r0, #6
    4956:	47a0      	blx	r4
		ETH_Write8(15);
    4958:	200f      	movs	r0, #15
    495a:	47a0      	blx	r4
		ETH_Write8(57);
    495c:	2039      	movs	r0, #57	; 0x39
    495e:	47a0      	blx	r4
		ETH_Write8(2);
    4960:	2002      	movs	r0, #2
    4962:	47a0      	blx	r4
		ETH_Write16(512); // option 57 - DHCP maximum packet length
    4964:	2080      	movs	r0, #128	; 0x80
    4966:	0080      	lsls	r0, r0, #2
    4968:	4b23      	ldr	r3, [pc, #140]	; (49f8 <DHCP_Request+0x124>)
    496a:	4798      	blx	r3
		ETH_Write8(12);
    496c:	200c      	movs	r0, #12
    496e:	47a0      	blx	r4
		ETH_Write8(DHCP_NAME_SIZE);
    4970:	200c      	movs	r0, #12
    4972:	47a0      	blx	r4
		ETH_WriteBlock((char *)dhcpName, DHCP_NAME_SIZE);
    4974:	210c      	movs	r1, #12
    4976:	4821      	ldr	r0, [pc, #132]	; (49fc <DHCP_Request+0x128>)
    4978:	4e1b      	ldr	r6, [pc, #108]	; (49e8 <DHCP_Request+0x114>)
    497a:	47b0      	blx	r6
		ETH_Write8(61);
    497c:	203d      	movs	r0, #61	; 0x3d
    497e:	47a0      	blx	r4
		ETH_Write8(7);
    4980:	2007      	movs	r0, #7
    4982:	47a0      	blx	r4
		ETH_Write8(1);
    4984:	2001      	movs	r0, #1
    4986:	47a0      	blx	r4
		ETH_WriteBlock((char *)&ethMAC, 6);
    4988:	2106      	movs	r1, #6
    498a:	4668      	mov	r0, sp
    498c:	47b0      	blx	r6
		ETH_Write8(255); // finished
    498e:	20ff      	movs	r0, #255	; 0xff
    4990:	47a0      	blx	r4
		ETH_Write8(0); // add a byte of padding to make the total length even
    4992:	2000      	movs	r0, #0
    4994:	47a0      	blx	r4
		UDP_Send();
    4996:	4b1a      	ldr	r3, [pc, #104]	; (4a00 <DHCP_Request+0x12c>)
    4998:	4798      	blx	r3
		if (type == DHCP_DISCOVER)
    499a:	2d01      	cmp	r5, #1
    499c:	d1a8      	bne.n	48f0 <DHCP_Request+0x1c>
			clientState = SELECTING;
    499e:	2203      	movs	r2, #3
    49a0:	4b18      	ldr	r3, [pc, #96]	; (4a04 <DHCP_Request+0x130>)
    49a2:	701a      	strb	r2, [r3, #0]
}
    49a4:	e7a4      	b.n	48f0 <DHCP_Request+0x1c>
			ETH_Write32(0);
    49a6:	2000      	movs	r0, #0
    49a8:	4b0c      	ldr	r3, [pc, #48]	; (49dc <DHCP_Request+0x108>)
    49aa:	4798      	blx	r3
    49ac:	e7b0      	b.n	4910 <DHCP_Request+0x3c>
			ETH_Write8(54);
    49ae:	2036      	movs	r0, #54	; 0x36
    49b0:	4c10      	ldr	r4, [pc, #64]	; (49f4 <DHCP_Request+0x120>)
    49b2:	47a0      	blx	r4
			ETH_Write8(4);
    49b4:	2004      	movs	r0, #4
    49b6:	47a0      	blx	r4
			ETH_Write32(dhcpServerId);
    49b8:	4b13      	ldr	r3, [pc, #76]	; (4a08 <DHCP_Request+0x134>)
    49ba:	6818      	ldr	r0, [r3, #0]
    49bc:	4e07      	ldr	r6, [pc, #28]	; (49dc <DHCP_Request+0x108>)
    49be:	47b0      	blx	r6
			ETH_Write8(50);
    49c0:	2032      	movs	r0, #50	; 0x32
    49c2:	47a0      	blx	r4
			ETH_Write8(4);
    49c4:	2004      	movs	r0, #4
    49c6:	47a0      	blx	r4
			ETH_Write32(ipv4Address);
    49c8:	4b06      	ldr	r3, [pc, #24]	; (49e4 <DHCP_Request+0x110>)
    49ca:	6818      	ldr	r0, [r3, #0]
    49cc:	47b0      	blx	r6
    49ce:	e7b8      	b.n	4942 <DHCP_Request+0x6e>
    49d0:	0000457d 	.word	0x0000457d
    49d4:	000061cd 	.word	0x000061cd
    49d8:	01010600 	.word	0x01010600
    49dc:	000040d5 	.word	0x000040d5
    49e0:	4d434850 	.word	0x4d434850
    49e4:	20004b4c 	.word	0x20004b4c
    49e8:	0000411d 	.word	0x0000411d
    49ec:	000048b9 	.word	0x000048b9
    49f0:	63825363 	.word	0x63825363
    49f4:	0000406d 	.word	0x0000406d
    49f8:	0000409d 	.word	0x0000409d
    49fc:	00007c04 	.word	0x00007c04
    4a00:	00006209 	.word	0x00006209
    4a04:	20000003 	.word	0x20000003
    4a08:	20000884 	.word	0x20000884

00004a0c <DHCP_Manage>:
{
    4a0c:	b510      	push	{r4, lr}
	if (ethData.linkChange) {
    4a0e:	4b22      	ldr	r3, [pc, #136]	; (4a98 <DHCP_Manage+0x8c>)
    4a10:	681b      	ldr	r3, [r3, #0]
    4a12:	06db      	lsls	r3, r3, #27
    4a14:	d51b      	bpl.n	4a4e <DHCP_Manage+0x42>
		if (clientState == BOUND && dhcpLeaseTime) {
    4a16:	4b21      	ldr	r3, [pc, #132]	; (4a9c <DHCP_Manage+0x90>)
    4a18:	781b      	ldrb	r3, [r3, #0]
    4a1a:	2b05      	cmp	r3, #5
    4a1c:	d00b      	beq.n	4a36 <DHCP_Manage+0x2a>
			clientState = INIT;
    4a1e:	2201      	movs	r2, #1
    4a20:	4b1e      	ldr	r3, [pc, #120]	; (4a9c <DHCP_Manage+0x90>)
    4a22:	701a      	strb	r2, [r3, #0]
			DHCP_Request(DHCP_DISCOVER);
    4a24:	2001      	movs	r0, #1
    4a26:	4b1e      	ldr	r3, [pc, #120]	; (4aa0 <DHCP_Manage+0x94>)
    4a28:	4798      	blx	r3
		ethData.linkChange = false;
    4a2a:	4a1b      	ldr	r2, [pc, #108]	; (4a98 <DHCP_Manage+0x8c>)
    4a2c:	7813      	ldrb	r3, [r2, #0]
    4a2e:	2110      	movs	r1, #16
    4a30:	438b      	bics	r3, r1
    4a32:	7013      	strb	r3, [r2, #0]
}
    4a34:	bd10      	pop	{r4, pc}
		if (clientState == BOUND && dhcpLeaseTime) {
    4a36:	4b1b      	ldr	r3, [pc, #108]	; (4aa4 <DHCP_Manage+0x98>)
    4a38:	685b      	ldr	r3, [r3, #4]
    4a3a:	2b00      	cmp	r3, #0
    4a3c:	d0ef      	beq.n	4a1e <DHCP_Manage+0x12>
			dhcpServerId = 0xFFFFFFFF;
    4a3e:	2201      	movs	r2, #1
    4a40:	4252      	negs	r2, r2
    4a42:	4b18      	ldr	r3, [pc, #96]	; (4aa4 <DHCP_Manage+0x98>)
    4a44:	601a      	str	r2, [r3, #0]
			DHCP_Request(DHCP_REQUEST);
    4a46:	2003      	movs	r0, #3
    4a48:	4b15      	ldr	r3, [pc, #84]	; (4aa0 <DHCP_Manage+0x94>)
    4a4a:	4798      	blx	r3
    4a4c:	e7ed      	b.n	4a2a <DHCP_Manage+0x1e>
	} else if (clientState == INIT || clientState == INIT_REBOOT) {
    4a4e:	4b13      	ldr	r3, [pc, #76]	; (4a9c <DHCP_Manage+0x90>)
    4a50:	781a      	ldrb	r2, [r3, #0]
    4a52:	1e53      	subs	r3, r2, #1
    4a54:	b2db      	uxtb	r3, r3
    4a56:	2b01      	cmp	r3, #1
    4a58:	d90d      	bls.n	4a76 <DHCP_Manage+0x6a>
	} else if ((dhcpLeaseTime < 100) && clientState == BOUND) // 100 seconds remaining on my dhcp lease
    4a5a:	4b12      	ldr	r3, [pc, #72]	; (4aa4 <DHCP_Manage+0x98>)
    4a5c:	685b      	ldr	r3, [r3, #4]
    4a5e:	2b63      	cmp	r3, #99	; 0x63
    4a60:	d801      	bhi.n	4a66 <DHCP_Manage+0x5a>
    4a62:	2a05      	cmp	r2, #5
    4a64:	d00e      	beq.n	4a84 <DHCP_Manage+0x78>
		if (clientState == BOUND && dhcpLeaseTime)
    4a66:	2a05      	cmp	r2, #5
    4a68:	d010      	beq.n	4a8c <DHCP_Manage+0x80>
		else if (!dhcpLeaseTime)
    4a6a:	2b00      	cmp	r3, #0
    4a6c:	d1e2      	bne.n	4a34 <DHCP_Manage+0x28>
			clientState = INIT_REBOOT;
    4a6e:	2202      	movs	r2, #2
    4a70:	4b0a      	ldr	r3, [pc, #40]	; (4a9c <DHCP_Manage+0x90>)
    4a72:	701a      	strb	r2, [r3, #0]
}
    4a74:	e7de      	b.n	4a34 <DHCP_Manage+0x28>
		clientState = INIT;
    4a76:	2201      	movs	r2, #1
    4a78:	4b08      	ldr	r3, [pc, #32]	; (4a9c <DHCP_Manage+0x90>)
    4a7a:	701a      	strb	r2, [r3, #0]
		DHCP_Request(DHCP_DISCOVER);
    4a7c:	2001      	movs	r0, #1
    4a7e:	4b08      	ldr	r3, [pc, #32]	; (4aa0 <DHCP_Manage+0x94>)
    4a80:	4798      	blx	r3
    4a82:	e7d7      	b.n	4a34 <DHCP_Manage+0x28>
		DHCP_Request(DHCP_REQUEST);
    4a84:	2003      	movs	r0, #3
    4a86:	4b06      	ldr	r3, [pc, #24]	; (4aa0 <DHCP_Manage+0x94>)
    4a88:	4798      	blx	r3
    4a8a:	e7d3      	b.n	4a34 <DHCP_Manage+0x28>
		if (clientState == BOUND && dhcpLeaseTime)
    4a8c:	2b00      	cmp	r3, #0
    4a8e:	d0ec      	beq.n	4a6a <DHCP_Manage+0x5e>
			dhcpLeaseTime--;
    4a90:	3b01      	subs	r3, #1
    4a92:	4a04      	ldr	r2, [pc, #16]	; (4aa4 <DHCP_Manage+0x98>)
    4a94:	6053      	str	r3, [r2, #4]
    4a96:	e7cd      	b.n	4a34 <DHCP_Manage+0x28>
    4a98:	20004ab8 	.word	0x20004ab8
    4a9c:	20000003 	.word	0x20000003
    4aa0:	000048d5 	.word	0x000048d5
    4aa4:	20000884 	.word	0x20000884

00004aa8 <DHCP_Handler>:
{
    4aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4aaa:	b087      	sub	sp, #28
    4aac:	0004      	movs	r4, r0
	ETH_GetMAC(ethMAC.mac_array);
    4aae:	a802      	add	r0, sp, #8
    4ab0:	4b47      	ldr	r3, [pc, #284]	; (4bd0 <DHCP_Handler+0x128>)
    4ab2:	4798      	blx	r3
	if (length > DHCP_HEADER_SIZE) {
    4ab4:	2cf0      	cmp	r4, #240	; 0xf0
    4ab6:	dc01      	bgt.n	4abc <DHCP_Handler+0x14>
}
    4ab8:	b007      	add	sp, #28
    4aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		v16 = ETH_Read16();
    4abc:	4b45      	ldr	r3, [pc, #276]	; (4bd4 <DHCP_Handler+0x12c>)
    4abe:	4798      	blx	r3
		if (v16 == 0x0201) {
    4ac0:	4b45      	ldr	r3, [pc, #276]	; (4bd8 <DHCP_Handler+0x130>)
    4ac2:	4298      	cmp	r0, r3
    4ac4:	d1f8      	bne.n	4ab8 <DHCP_Handler+0x10>
			ETH_Dump(2);
    4ac6:	2002      	movs	r0, #2
    4ac8:	4b44      	ldr	r3, [pc, #272]	; (4bdc <DHCP_Handler+0x134>)
    4aca:	4798      	blx	r3
			v = ETH_Read32();
    4acc:	4b44      	ldr	r3, [pc, #272]	; (4be0 <DHCP_Handler+0x138>)
    4ace:	4798      	blx	r3
			if (v == xidValue) {
    4ad0:	4b44      	ldr	r3, [pc, #272]	; (4be4 <DHCP_Handler+0x13c>)
    4ad2:	4298      	cmp	r0, r3
    4ad4:	d1f0      	bne.n	4ab8 <DHCP_Handler+0x10>
				ETH_Dump(8);          // dump SECS, FLAGS & CIADDR
    4ad6:	2008      	movs	r0, #8
    4ad8:	4d40      	ldr	r5, [pc, #256]	; (4bdc <DHCP_Handler+0x134>)
    4ada:	47a8      	blx	r5
				myip  = ETH_Read32(); // CIADDR
    4adc:	4b40      	ldr	r3, [pc, #256]	; (4be0 <DHCP_Handler+0x138>)
    4ade:	4798      	blx	r3
    4ae0:	9001      	str	r0, [sp, #4]
				ETH_Dump(8);                                            // SIADDR, GIADDR, CHADDR
    4ae2:	2008      	movs	r0, #8
    4ae4:	47a8      	blx	r5
				ETH_ReadBlock((char *)&ethPktMAC, sizeof(ethPktMAC.s)); // This is a DHCP for IPv4
    4ae6:	2106      	movs	r1, #6
    4ae8:	a804      	add	r0, sp, #16
    4aea:	4b3f      	ldr	r3, [pc, #252]	; (4be8 <DHCP_Handler+0x140>)
    4aec:	4798      	blx	r3
				if (memcmp(&ethPktMAC.s, &ethMAC.s, 6) == 0) // only compare 6 bytes of MAC address.
    4aee:	2206      	movs	r2, #6
    4af0:	a902      	add	r1, sp, #8
    4af2:	a804      	add	r0, sp, #16
    4af4:	4b3d      	ldr	r3, [pc, #244]	; (4bec <DHCP_Handler+0x144>)
    4af6:	4798      	blx	r3
    4af8:	2800      	cmp	r0, #0
    4afa:	d163      	bne.n	4bc4 <DHCP_Handler+0x11c>
					ETH_Dump(202);
    4afc:	30ca      	adds	r0, #202	; 0xca
    4afe:	4b37      	ldr	r3, [pc, #220]	; (4bdc <DHCP_Handler+0x134>)
    4b00:	4798      	blx	r3
					if (ETH_Read32() == 0x63825363) {
    4b02:	4b37      	ldr	r3, [pc, #220]	; (4be0 <DHCP_Handler+0x138>)
    4b04:	4798      	blx	r3
    4b06:	4b3a      	ldr	r3, [pc, #232]	; (4bf0 <DHCP_Handler+0x148>)
    4b08:	4298      	cmp	r0, r3
    4b0a:	d1d5      	bne.n	4ab8 <DHCP_Handler+0x10>
						length -= 240;
    4b0c:	3cf0      	subs	r4, #240	; 0xf0
						while (length > 0) {
    4b0e:	e003      	b.n	4b18 <DHCP_Handler+0x70>
								ipv4SubnetMask = ETH_Read32();
    4b10:	4b33      	ldr	r3, [pc, #204]	; (4be0 <DHCP_Handler+0x138>)
    4b12:	4798      	blx	r3
    4b14:	4b37      	ldr	r3, [pc, #220]	; (4bf4 <DHCP_Handler+0x14c>)
    4b16:	6018      	str	r0, [r3, #0]
						while (length > 0) {
    4b18:	2c00      	cmp	r4, #0
    4b1a:	dd4a      	ble.n	4bb2 <DHCP_Handler+0x10a>
							option       = ETH_Read8();
    4b1c:	4f36      	ldr	r7, [pc, #216]	; (4bf8 <DHCP_Handler+0x150>)
    4b1e:	47b8      	blx	r7
    4b20:	0005      	movs	r5, r0
							optionLength = ETH_Read8();
    4b22:	47b8      	blx	r7
    4b24:	0007      	movs	r7, r0
							length -= 2 + optionLength;
    4b26:	1c83      	adds	r3, r0, #2
    4b28:	1ae4      	subs	r4, r4, r3
							switch (option) {
    4b2a:	2d36      	cmp	r5, #54	; 0x36
    4b2c:	d83d      	bhi.n	4baa <DHCP_Handler+0x102>
    4b2e:	00ad      	lsls	r5, r5, #2
    4b30:	4b32      	ldr	r3, [pc, #200]	; (4bfc <DHCP_Handler+0x154>)
    4b32:	595b      	ldr	r3, [r3, r5]
    4b34:	469f      	mov	pc, r3
								ipv4Router = ETH_Read32(); // get MAC address of this router
    4b36:	4b2a      	ldr	r3, [pc, #168]	; (4be0 <DHCP_Handler+0x138>)
    4b38:	4798      	blx	r3
    4b3a:	4b31      	ldr	r3, [pc, #196]	; (4c00 <DHCP_Handler+0x158>)
    4b3c:	6018      	str	r0, [r3, #0]
								break;
    4b3e:	e7eb      	b.n	4b18 <DHCP_Handler+0x70>
								if (optionLength >= 4) {
    4b40:	2803      	cmp	r0, #3
    4b42:	d9e9      	bls.n	4b18 <DHCP_Handler+0x70>
									ipv4DNS[0] = ETH_Read32();
    4b44:	4b26      	ldr	r3, [pc, #152]	; (4be0 <DHCP_Handler+0x138>)
    4b46:	4798      	blx	r3
    4b48:	4b2e      	ldr	r3, [pc, #184]	; (4c04 <DHCP_Handler+0x15c>)
    4b4a:	6018      	str	r0, [r3, #0]
									optionLength -= 4;
    4b4c:	3f04      	subs	r7, #4
    4b4e:	b2ff      	uxtb	r7, r7
									if (optionLength >= 4) {
    4b50:	2f03      	cmp	r7, #3
    4b52:	d9e1      	bls.n	4b18 <DHCP_Handler+0x70>
										ipv4DNS[1] = ETH_Read32();
    4b54:	4b22      	ldr	r3, [pc, #136]	; (4be0 <DHCP_Handler+0x138>)
    4b56:	4798      	blx	r3
    4b58:	4b2a      	ldr	r3, [pc, #168]	; (4c04 <DHCP_Handler+0x15c>)
    4b5a:	6058      	str	r0, [r3, #4]
    4b5c:	e7dc      	b.n	4b18 <DHCP_Handler+0x70>
								if (optionLength >= 4) {
    4b5e:	2803      	cmp	r0, #3
    4b60:	d9da      	bls.n	4b18 <DHCP_Handler+0x70>
									dhcpLeaseTime = ETH_Read32();
    4b62:	4b1f      	ldr	r3, [pc, #124]	; (4be0 <DHCP_Handler+0x138>)
    4b64:	4798      	blx	r3
    4b66:	4b28      	ldr	r3, [pc, #160]	; (4c08 <DHCP_Handler+0x160>)
    4b68:	6058      	str	r0, [r3, #4]
    4b6a:	e7d5      	b.n	4b18 <DHCP_Handler+0x70>
								dhcpServerId = ETH_Read32();
    4b6c:	4b1c      	ldr	r3, [pc, #112]	; (4be0 <DHCP_Handler+0x138>)
    4b6e:	4798      	blx	r3
    4b70:	4b25      	ldr	r3, [pc, #148]	; (4c08 <DHCP_Handler+0x160>)
    4b72:	6018      	str	r0, [r3, #0]
								break;
    4b74:	e7d0      	b.n	4b18 <DHCP_Handler+0x70>
								switch (ETH_Read8()) {
    4b76:	4b20      	ldr	r3, [pc, #128]	; (4bf8 <DHCP_Handler+0x150>)
    4b78:	4798      	blx	r3
    4b7a:	2805      	cmp	r0, #5
    4b7c:	d00a      	beq.n	4b94 <DHCP_Handler+0xec>
    4b7e:	2806      	cmp	r0, #6
    4b80:	d00f      	beq.n	4ba2 <DHCP_Handler+0xfa>
    4b82:	2802      	cmp	r0, #2
    4b84:	d1c8      	bne.n	4b18 <DHCP_Handler+0x70>
									ipv4Address = myip;
    4b86:	4b21      	ldr	r3, [pc, #132]	; (4c0c <DHCP_Handler+0x164>)
    4b88:	9a01      	ldr	r2, [sp, #4]
    4b8a:	601a      	str	r2, [r3, #0]
									clientState = REQUESTING;
    4b8c:	2204      	movs	r2, #4
    4b8e:	4b20      	ldr	r3, [pc, #128]	; (4c10 <DHCP_Handler+0x168>)
    4b90:	701a      	strb	r2, [r3, #0]
									break;
    4b92:	e7c1      	b.n	4b18 <DHCP_Handler+0x70>
									ipv4Address = myip;
    4b94:	4b1d      	ldr	r3, [pc, #116]	; (4c0c <DHCP_Handler+0x164>)
    4b96:	9a01      	ldr	r2, [sp, #4]
    4b98:	601a      	str	r2, [r3, #0]
									clientState = BOUND;
    4b9a:	2205      	movs	r2, #5
    4b9c:	4b1c      	ldr	r3, [pc, #112]	; (4c10 <DHCP_Handler+0x168>)
    4b9e:	701a      	strb	r2, [r3, #0]
									break;
    4ba0:	e7ba      	b.n	4b18 <DHCP_Handler+0x70>
									clientState = INIT;
    4ba2:	2201      	movs	r2, #1
    4ba4:	4b1a      	ldr	r3, [pc, #104]	; (4c10 <DHCP_Handler+0x168>)
    4ba6:	701a      	strb	r2, [r3, #0]
								break;
    4ba8:	e7b6      	b.n	4b18 <DHCP_Handler+0x70>
								ETH_Dump(optionLength); // dump any unused bytes
    4baa:	b2b8      	uxth	r0, r7
    4bac:	4b0b      	ldr	r3, [pc, #44]	; (4bdc <DHCP_Handler+0x134>)
    4bae:	4798      	blx	r3
								break;
    4bb0:	e7b2      	b.n	4b18 <DHCP_Handler+0x70>
						if (clientState == REQUESTING)
    4bb2:	4b17      	ldr	r3, [pc, #92]	; (4c10 <DHCP_Handler+0x168>)
    4bb4:	781b      	ldrb	r3, [r3, #0]
    4bb6:	2b04      	cmp	r3, #4
    4bb8:	d000      	beq.n	4bbc <DHCP_Handler+0x114>
    4bba:	e77d      	b.n	4ab8 <DHCP_Handler+0x10>
							DHCP_Request(DHCP_REQUEST);
    4bbc:	2003      	movs	r0, #3
    4bbe:	4b15      	ldr	r3, [pc, #84]	; (4c14 <DHCP_Handler+0x16c>)
    4bc0:	4798      	blx	r3
    4bc2:	e779      	b.n	4ab8 <DHCP_Handler+0x10>
					ETH_Dump(length - 34);
    4bc4:	3c22      	subs	r4, #34	; 0x22
    4bc6:	b2a0      	uxth	r0, r4
    4bc8:	4b04      	ldr	r3, [pc, #16]	; (4bdc <DHCP_Handler+0x134>)
    4bca:	4798      	blx	r3
}
    4bcc:	e774      	b.n	4ab8 <DHCP_Handler+0x10>
    4bce:	46c0      	nop			; (mov r8, r8)
    4bd0:	0000457d 	.word	0x0000457d
    4bd4:	00003fa1 	.word	0x00003fa1
    4bd8:	00000201 	.word	0x00000201
    4bdc:	000042b5 	.word	0x000042b5
    4be0:	00003fd5 	.word	0x00003fd5
    4be4:	4d434850 	.word	0x4d434850
    4be8:	00004019 	.word	0x00004019
    4bec:	000065d5 	.word	0x000065d5
    4bf0:	63825363 	.word	0x63825363
    4bf4:	20004b34 	.word	0x20004b34
    4bf8:	00003f21 	.word	0x00003f21
    4bfc:	00007b24 	.word	0x00007b24
    4c00:	20004b2c 	.word	0x20004b2c
    4c04:	20004b50 	.word	0x20004b50
    4c08:	20000884 	.word	0x20000884
    4c0c:	20004b4c 	.word	0x20004b4c
    4c10:	20000003 	.word	0x20000003
    4c14:	000048d5 	.word	0x000048d5

00004c18 <ICMP_EchoReply>:
 * @param payload_length
 * @return
 */

error_msg ICMP_EchoReply(icmpHeader_t *icmpHdr, ipv4Header_t *ipv4Hdr)
{
    4c18:	b570      	push	{r4, r5, r6, lr}
    4c1a:	b082      	sub	sp, #8
    4c1c:	0005      	movs	r5, r0
    4c1e:	000c      	movs	r4, r1
	uint16_t  cksm = 0;
    4c20:	2200      	movs	r2, #0
    4c22:	466b      	mov	r3, sp
    4c24:	80da      	strh	r2, [r3, #6]
	error_msg ret  = ERROR;

	ret = IPv4_Start(ipv4Hdr->srcIpAddress, ipv4Hdr->protocol);
    4c26:	7a49      	ldrb	r1, [r1, #9]
    4c28:	68e0      	ldr	r0, [r4, #12]
    4c2a:	4b1c      	ldr	r3, [pc, #112]	; (4c9c <ICMP_EchoReply+0x84>)
    4c2c:	4798      	blx	r3
	if (ret == SUCCESS) {
    4c2e:	2801      	cmp	r0, #1
    4c30:	d001      	beq.n	4c36 <ICMP_EchoReply+0x1e>
			           sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) + offsetof(icmpHeader_t, checksum));
			ret = IPV4_Send(ipv4PayloadLength);
		}
	}
	return ret;
}
    4c32:	b002      	add	sp, #8
    4c34:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t ipv4PayloadLength = ipv4Hdr->length - sizeof(ipv4Header_t);
    4c36:	8863      	ldrh	r3, [r4, #2]
		ipv4PayloadLength = ipv4Hdr->length - (uint16_t)(ipv4Hdr->ihl << 2);
    4c38:	7824      	ldrb	r4, [r4, #0]
    4c3a:	0724      	lsls	r4, r4, #28
    4c3c:	0ea4      	lsrs	r4, r4, #26
    4c3e:	1b1c      	subs	r4, r3, r4
    4c40:	b2a4      	uxth	r4, r4
		ETH_Write16(ECHO_REPLY);
    4c42:	2000      	movs	r0, #0
    4c44:	4e16      	ldr	r6, [pc, #88]	; (4ca0 <ICMP_EchoReply+0x88>)
    4c46:	47b0      	blx	r6
		ETH_Write16(0); // checksum
    4c48:	2000      	movs	r0, #0
    4c4a:	47b0      	blx	r6
		ETH_Write16(ntohs(icmpHdr->identifier));
    4c4c:	88ab      	ldrh	r3, [r5, #4]
    4c4e:	0a18      	lsrs	r0, r3, #8
    4c50:	021b      	lsls	r3, r3, #8
    4c52:	4318      	orrs	r0, r3
    4c54:	b280      	uxth	r0, r0
    4c56:	47b0      	blx	r6
		ETH_Write16(ntohs(icmpHdr->sequence));
    4c58:	88eb      	ldrh	r3, [r5, #6]
    4c5a:	0a18      	lsrs	r0, r3, #8
    4c5c:	021b      	lsls	r3, r3, #8
    4c5e:	4318      	orrs	r0, r3
    4c60:	b280      	uxth	r0, r0
    4c62:	47b0      	blx	r6
		ret = ETH_Copy(ipv4PayloadLength - sizeof(icmpHeader_t));
    4c64:	0020      	movs	r0, r4
    4c66:	3808      	subs	r0, #8
    4c68:	b280      	uxth	r0, r0
    4c6a:	4b0e      	ldr	r3, [pc, #56]	; (4ca4 <ICMP_EchoReply+0x8c>)
    4c6c:	4798      	blx	r3
		if (ret == SUCCESS) // copy can timeout in heavy network situations like flood ping
    4c6e:	2801      	cmp	r0, #1
    4c70:	d1df      	bne.n	4c32 <ICMP_EchoReply+0x1a>
			ETH_SaveRDPT();
    4c72:	4b0d      	ldr	r3, [pc, #52]	; (4ca8 <ICMP_EchoReply+0x90>)
    4c74:	4798      	blx	r3
			cksm            = sizeof(ethernetFrame_t) + sizeof(ipv4Header_t);
    4c76:	466b      	mov	r3, sp
    4c78:	1d9d      	adds	r5, r3, #6
    4c7a:	2322      	movs	r3, #34	; 0x22
    4c7c:	802b      	strh	r3, [r5, #0]
			cksm            = ETH_TxComputeChecksum(icmp_cksm_start, ipv4PayloadLength, 0);
    4c7e:	2200      	movs	r2, #0
    4c80:	0021      	movs	r1, r4
    4c82:	2022      	movs	r0, #34	; 0x22
    4c84:	4b09      	ldr	r3, [pc, #36]	; (4cac <ICMP_EchoReply+0x94>)
    4c86:	4798      	blx	r3
    4c88:	8028      	strh	r0, [r5, #0]
			ETH_Insert((char *)&cksm,
    4c8a:	2224      	movs	r2, #36	; 0x24
    4c8c:	2102      	movs	r1, #2
    4c8e:	0028      	movs	r0, r5
    4c90:	4b07      	ldr	r3, [pc, #28]	; (4cb0 <ICMP_EchoReply+0x98>)
    4c92:	4798      	blx	r3
			ret = IPV4_Send(ipv4PayloadLength);
    4c94:	0020      	movs	r0, r4
    4c96:	4b07      	ldr	r3, [pc, #28]	; (4cb4 <ICMP_EchoReply+0x9c>)
    4c98:	4798      	blx	r3
    4c9a:	e7ca      	b.n	4c32 <ICMP_EchoReply+0x1a>
    4c9c:	00004efd 	.word	0x00004efd
    4ca0:	0000409d 	.word	0x0000409d
    4ca4:	000043b9 	.word	0x000043b9
    4ca8:	00004595 	.word	0x00004595
    4cac:	0000449d 	.word	0x0000449d
    4cb0:	00004341 	.word	0x00004341
    4cb4:	00004fdd 	.word	0x00004fdd

00004cb8 <ICMP_Receive>:
{
    4cb8:	b510      	push	{r4, lr}
    4cba:	b082      	sub	sp, #8
    4cbc:	0004      	movs	r4, r0
	ETH_ReadBlock((char *)&icmpHdr, sizeof(icmpHeader_t));
    4cbe:	2108      	movs	r1, #8
    4cc0:	4668      	mov	r0, sp
    4cc2:	4b0b      	ldr	r3, [pc, #44]	; (4cf0 <ICMP_Receive+0x38>)
    4cc4:	4798      	blx	r3
	ETH_SaveRDPT();
    4cc6:	4b0b      	ldr	r3, [pc, #44]	; (4cf4 <ICMP_Receive+0x3c>)
    4cc8:	4798      	blx	r3
	switch (ntohs((icmpTypeCodes_t)icmpHdr.typeCode)) {
    4cca:	466b      	mov	r3, sp
    4ccc:	881b      	ldrh	r3, [r3, #0]
    4cce:	0a1a      	lsrs	r2, r3, #8
    4cd0:	061b      	lsls	r3, r3, #24
    4cd2:	0c1b      	lsrs	r3, r3, #16
    4cd4:	4313      	orrs	r3, r2
    4cd6:	2280      	movs	r2, #128	; 0x80
    4cd8:	0112      	lsls	r2, r2, #4
    4cda:	4293      	cmp	r3, r2
    4cdc:	d002      	beq.n	4ce4 <ICMP_Receive+0x2c>
	error_msg    ret = ERROR;
    4cde:	2000      	movs	r0, #0
}
    4ce0:	b002      	add	sp, #8
    4ce2:	bd10      	pop	{r4, pc}
		ret = ICMP_EchoReply(&icmpHdr, ipv4Hdr);
    4ce4:	0021      	movs	r1, r4
    4ce6:	4668      	mov	r0, sp
    4ce8:	4b03      	ldr	r3, [pc, #12]	; (4cf8 <ICMP_Receive+0x40>)
    4cea:	4798      	blx	r3
	} break;
    4cec:	e7f8      	b.n	4ce0 <ICMP_Receive+0x28>
    4cee:	46c0      	nop			; (mov r8, r8)
    4cf0:	00004019 	.word	0x00004019
    4cf4:	00004595 	.word	0x00004595
    4cf8:	00004c19 	.word	0x00004c19

00004cfc <IPV4_Init>:
 */
extern void TCP_Recv(uint32_t, uint16_t);

void IPV4_Init(void)
{
	ipv4Address = 0;
    4cfc:	2200      	movs	r2, #0
    4cfe:	4b01      	ldr	r3, [pc, #4]	; (4d04 <IPV4_Init+0x8>)
    4d00:	601a      	str	r2, [r3, #0]
}
    4d02:	4770      	bx	lr
    4d04:	20004b4c 	.word	0x20004b4c

00004d08 <IPV4_PseudoHeaderChecksum>:

uint16_t IPV4_PseudoHeaderChecksum(uint16_t payloadLen)
{
    4d08:	b084      	sub	sp, #16
	ipv4_pseudo_header_t tmp;
	uint8_t              len;
	uint32_t             cksm = 0;
	uint16_t *           v;

	tmp.srcIpAddress = ipv4Header.srcIpAddress;
    4d0a:	4b0e      	ldr	r3, [pc, #56]	; (4d44 <IPV4_PseudoHeaderChecksum+0x3c>)
    4d0c:	aa01      	add	r2, sp, #4
    4d0e:	68d9      	ldr	r1, [r3, #12]
    4d10:	9101      	str	r1, [sp, #4]
	tmp.dstIpAddress = ipv4Header.dstIpAddress;
    4d12:	6919      	ldr	r1, [r3, #16]
    4d14:	6051      	str	r1, [r2, #4]
	tmp.protocol     = ipv4Header.protocol;
    4d16:	7a5b      	ldrb	r3, [r3, #9]
    4d18:	7213      	strb	r3, [r2, #8]
	tmp.z            = 0;
    4d1a:	2300      	movs	r3, #0
    4d1c:	7253      	strb	r3, [r2, #9]
	tmp.length       = payloadLen;
    4d1e:	8150      	strh	r0, [r2, #10]
	uint32_t             cksm = 0;
    4d20:	2100      	movs	r1, #0

	len = sizeof(tmp);
	len = len >> 1;
    4d22:	3306      	adds	r3, #6

	v = (uint16_t *)&tmp;

	while (len) {
    4d24:	e004      	b.n	4d30 <IPV4_PseudoHeaderChecksum+0x28>
		cksm += *v;
    4d26:	8810      	ldrh	r0, [r2, #0]
    4d28:	1809      	adds	r1, r1, r0
		len--;
    4d2a:	3b01      	subs	r3, #1
    4d2c:	b2db      	uxtb	r3, r3
		v++;
    4d2e:	3202      	adds	r2, #2
	while (len) {
    4d30:	2b00      	cmp	r3, #0
    4d32:	d1f8      	bne.n	4d26 <IPV4_PseudoHeaderChecksum+0x1e>
	}

	// wrap the checksum
	cksm = (cksm & 0x0FFFF) + (cksm >> 16);
    4d34:	0408      	lsls	r0, r1, #16
    4d36:	0c00      	lsrs	r0, r0, #16
    4d38:	0c09      	lsrs	r1, r1, #16
    4d3a:	1840      	adds	r0, r0, r1

	// Return the resulting checksum
	return cksm;
    4d3c:	b280      	uxth	r0, r0
}
    4d3e:	b004      	add	sp, #16
    4d40:	4770      	bx	lr
    4d42:	46c0      	nop			; (mov r8, r8)
    4d44:	20004b38 	.word	0x20004b38

00004d48 <IPV4_Packet>:

error_msg IPV4_Packet(void)
{
    4d48:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d4a:	b08b      	sub	sp, #44	; 0x2c
	uint16_t length = 0;
	char     msg[40];
	uint8_t  hdrLen;

	// calculate the IPv4 checksum
	cksm = ETH_RxComputeChecksum(sizeof(ipv4Header_t), 0);
    4d4c:	2100      	movs	r1, #0
    4d4e:	2014      	movs	r0, #20
    4d50:	4b56      	ldr	r3, [pc, #344]	; (4eac <IPV4_Packet+0x164>)
    4d52:	4798      	blx	r3
	if (cksm != 0) {
    4d54:	2800      	cmp	r0, #0
    4d56:	d005      	beq.n	4d64 <IPV4_Packet+0x1c>
		IPV4_SyslogWrite("IP Header wrong cksm");
    4d58:	4855      	ldr	r0, [pc, #340]	; (4eb0 <IPV4_Packet+0x168>)
    4d5a:	4b56      	ldr	r3, [pc, #344]	; (4eb4 <IPV4_Packet+0x16c>)
    4d5c:	4798      	blx	r3
		return IPV4_CHECKSUM_FAILS;
    4d5e:	2007      	movs	r0, #7
		IPV4_Sprintf(msg, "ip address : %X", (unsigned int)ipv4Header.dstIpAddress);
		IPV4_SyslogWrite(msg);
		IPV4_SyslogWrite("DEST IP NOT MATCHED");
		return DEST_IP_NOT_MATCHED;
	}
}
    4d60:	b00b      	add	sp, #44	; 0x2c
    4d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ETH_ReadBlock((char *)&ipv4Header, sizeof(ipv4Header_t));
    4d64:	4c54      	ldr	r4, [pc, #336]	; (4eb8 <IPV4_Packet+0x170>)
    4d66:	2114      	movs	r1, #20
    4d68:	0020      	movs	r0, r4
    4d6a:	4b54      	ldr	r3, [pc, #336]	; (4ebc <IPV4_Packet+0x174>)
    4d6c:	4798      	blx	r3
	if (ipv4Header.version != 4) {
    4d6e:	7823      	ldrb	r3, [r4, #0]
    4d70:	220f      	movs	r2, #15
    4d72:	4393      	bics	r3, r2
    4d74:	2b40      	cmp	r3, #64	; 0x40
    4d76:	d001      	beq.n	4d7c <IPV4_Packet+0x34>
		return IP_WRONG_VERSION; // Incorrect version number
    4d78:	2006      	movs	r0, #6
    4d7a:	e7f1      	b.n	4d60 <IPV4_Packet+0x18>
	ipv4Header.dstIpAddress = ntohl(ipv4Header.dstIpAddress);
    4d7c:	484e      	ldr	r0, [pc, #312]	; (4eb8 <IPV4_Packet+0x170>)
    4d7e:	6901      	ldr	r1, [r0, #16]
    4d80:	0e0a      	lsrs	r2, r1, #24
    4d82:	0a0b      	lsrs	r3, r1, #8
    4d84:	27ff      	movs	r7, #255	; 0xff
    4d86:	023f      	lsls	r7, r7, #8
    4d88:	403b      	ands	r3, r7
    4d8a:	431a      	orrs	r2, r3
    4d8c:	020c      	lsls	r4, r1, #8
    4d8e:	26ff      	movs	r6, #255	; 0xff
    4d90:	0436      	lsls	r6, r6, #16
    4d92:	4034      	ands	r4, r6
    4d94:	4322      	orrs	r2, r4
    4d96:	0609      	lsls	r1, r1, #24
    4d98:	430a      	orrs	r2, r1
    4d9a:	6102      	str	r2, [r0, #16]
	ipv4Header.srcIpAddress = ntohl(ipv4Header.srcIpAddress);
    4d9c:	68c1      	ldr	r1, [r0, #12]
    4d9e:	0e0b      	lsrs	r3, r1, #24
    4da0:	0a0d      	lsrs	r5, r1, #8
    4da2:	403d      	ands	r5, r7
    4da4:	432b      	orrs	r3, r5
    4da6:	020c      	lsls	r4, r1, #8
    4da8:	4034      	ands	r4, r6
    4daa:	4323      	orrs	r3, r4
    4dac:	0609      	lsls	r1, r1, #24
    4dae:	430b      	orrs	r3, r1
    4db0:	60c3      	str	r3, [r0, #12]
	if ((ipv4Header.dstIpAddress == ipv4Address) || (ipv4Header.dstIpAddress == IPV4_BROADCAST)) {
    4db2:	4b43      	ldr	r3, [pc, #268]	; (4ec0 <IPV4_Packet+0x178>)
    4db4:	681b      	ldr	r3, [r3, #0]
    4db6:	429a      	cmp	r2, r3
    4db8:	d00c      	beq.n	4dd4 <IPV4_Packet+0x8c>
    4dba:	1c53      	adds	r3, r2, #1
    4dbc:	d00a      	beq.n	4dd4 <IPV4_Packet+0x8c>
		IPV4_Sprintf(msg, "ip address : %X", (unsigned int)ipv4Header.dstIpAddress);
    4dbe:	4941      	ldr	r1, [pc, #260]	; (4ec4 <IPV4_Packet+0x17c>)
    4dc0:	4668      	mov	r0, sp
    4dc2:	4b41      	ldr	r3, [pc, #260]	; (4ec8 <IPV4_Packet+0x180>)
    4dc4:	4798      	blx	r3
		IPV4_SyslogWrite(msg);
    4dc6:	4668      	mov	r0, sp
    4dc8:	4c3a      	ldr	r4, [pc, #232]	; (4eb4 <IPV4_Packet+0x16c>)
    4dca:	47a0      	blx	r4
		IPV4_SyslogWrite("DEST IP NOT MATCHED");
    4dcc:	483f      	ldr	r0, [pc, #252]	; (4ecc <IPV4_Packet+0x184>)
    4dce:	47a0      	blx	r4
		return DEST_IP_NOT_MATCHED;
    4dd0:	2008      	movs	r0, #8
    4dd2:	e7c5      	b.n	4d60 <IPV4_Packet+0x18>
		ipv4Header.length = ntohs(ipv4Header.length);
    4dd4:	4a38      	ldr	r2, [pc, #224]	; (4eb8 <IPV4_Packet+0x170>)
    4dd6:	8853      	ldrh	r3, [r2, #2]
    4dd8:	0a19      	lsrs	r1, r3, #8
    4dda:	021b      	lsls	r3, r3, #8
    4ddc:	430b      	orrs	r3, r1
    4dde:	8053      	strh	r3, [r2, #2]
		hdrLen = (uint8_t)(ipv4Header.ihl << 2);
    4de0:	7813      	ldrb	r3, [r2, #0]
    4de2:	071b      	lsls	r3, r3, #28
    4de4:	0f1b      	lsrs	r3, r3, #28
    4de6:	009c      	lsls	r4, r3, #2
		if (ipv4Header.ihl > 5) {
    4de8:	2b05      	cmp	r3, #5
    4dea:	dc0d      	bgt.n	4e08 <IPV4_Packet+0xc0>
		switch ((ipProtocolNumbers)ipv4Header.protocol) {
    4dec:	4b32      	ldr	r3, [pc, #200]	; (4eb8 <IPV4_Packet+0x170>)
    4dee:	7a5b      	ldrb	r3, [r3, #9]
    4df0:	2b06      	cmp	r3, #6
    4df2:	d03c      	beq.n	4e6e <IPV4_Packet+0x126>
    4df4:	2b11      	cmp	r3, #17
    4df6:	d028      	beq.n	4e4a <IPV4_Packet+0x102>
    4df8:	2b01      	cmp	r3, #1
    4dfa:	d00b      	beq.n	4e14 <IPV4_Packet+0xcc>
			ETH_Dump(ipv4Header.length);
    4dfc:	4b2e      	ldr	r3, [pc, #184]	; (4eb8 <IPV4_Packet+0x170>)
    4dfe:	8858      	ldrh	r0, [r3, #2]
    4e00:	4b33      	ldr	r3, [pc, #204]	; (4ed0 <IPV4_Packet+0x188>)
    4e02:	4798      	blx	r3
		return SUCCESS;
    4e04:	2001      	movs	r0, #1
			break;
    4e06:	e7ab      	b.n	4d60 <IPV4_Packet+0x18>
			ETH_Dump((uint16_t)(hdrLen - sizeof(ipv4Header_t)));
    4e08:	0020      	movs	r0, r4
    4e0a:	3814      	subs	r0, #20
    4e0c:	b280      	uxth	r0, r0
    4e0e:	4b30      	ldr	r3, [pc, #192]	; (4ed0 <IPV4_Packet+0x188>)
    4e10:	4798      	blx	r3
    4e12:	e7eb      	b.n	4dec <IPV4_Packet+0xa4>
			IPV4_SyslogWrite("rx icmp");
    4e14:	482f      	ldr	r0, [pc, #188]	; (4ed4 <IPV4_Packet+0x18c>)
    4e16:	4b27      	ldr	r3, [pc, #156]	; (4eb4 <IPV4_Packet+0x16c>)
    4e18:	4798      	blx	r3
			length = ipv4Header.length - hdrLen;
    4e1a:	4b27      	ldr	r3, [pc, #156]	; (4eb8 <IPV4_Packet+0x170>)
    4e1c:	8858      	ldrh	r0, [r3, #2]
    4e1e:	1b00      	subs	r0, r0, r4
    4e20:	b280      	uxth	r0, r0
			cksm   = ETH_RxComputeChecksum(length, 0);
    4e22:	2100      	movs	r1, #0
    4e24:	4b21      	ldr	r3, [pc, #132]	; (4eac <IPV4_Packet+0x164>)
    4e26:	4798      	blx	r3
			if (cksm == 0) {
    4e28:	2800      	cmp	r0, #0
    4e2a:	d009      	beq.n	4e40 <IPV4_Packet+0xf8>
				IPV4_Sprintf(msg, "icmp wrong cksm : %x", cksm);
    4e2c:	0002      	movs	r2, r0
    4e2e:	492a      	ldr	r1, [pc, #168]	; (4ed8 <IPV4_Packet+0x190>)
    4e30:	4668      	mov	r0, sp
    4e32:	4b25      	ldr	r3, [pc, #148]	; (4ec8 <IPV4_Packet+0x180>)
    4e34:	4798      	blx	r3
				IPV4_SyslogWrite(msg);
    4e36:	4668      	mov	r0, sp
    4e38:	4b1e      	ldr	r3, [pc, #120]	; (4eb4 <IPV4_Packet+0x16c>)
    4e3a:	4798      	blx	r3
				return ICMP_CHECKSUM_FAILS;
    4e3c:	2009      	movs	r0, #9
    4e3e:	e78f      	b.n	4d60 <IPV4_Packet+0x18>
				ICMP_Receive(&ipv4Header);
    4e40:	481d      	ldr	r0, [pc, #116]	; (4eb8 <IPV4_Packet+0x170>)
    4e42:	4b26      	ldr	r3, [pc, #152]	; (4edc <IPV4_Packet+0x194>)
    4e44:	4798      	blx	r3
		return SUCCESS;
    4e46:	2001      	movs	r0, #1
		} break;
    4e48:	e78a      	b.n	4d60 <IPV4_Packet+0x18>
			IPV4_SyslogWrite("rx udp");
    4e4a:	4825      	ldr	r0, [pc, #148]	; (4ee0 <IPV4_Packet+0x198>)
    4e4c:	4b19      	ldr	r3, [pc, #100]	; (4eb4 <IPV4_Packet+0x16c>)
    4e4e:	4798      	blx	r3
			length = ipv4Header.length - hdrLen;
    4e50:	4b19      	ldr	r3, [pc, #100]	; (4eb8 <IPV4_Packet+0x170>)
    4e52:	885b      	ldrh	r3, [r3, #2]
    4e54:	1b1c      	subs	r4, r3, r4
    4e56:	b2a4      	uxth	r4, r4
			cksm = IPV4_PseudoHeaderChecksum(length); // Calculate pseudo header checksum
    4e58:	0020      	movs	r0, r4
    4e5a:	4b22      	ldr	r3, [pc, #136]	; (4ee4 <IPV4_Packet+0x19c>)
    4e5c:	4798      	blx	r3
    4e5e:	0001      	movs	r1, r0
			cksm = ETH_RxComputeChecksum(
    4e60:	0020      	movs	r0, r4
    4e62:	4b12      	ldr	r3, [pc, #72]	; (4eac <IPV4_Packet+0x164>)
    4e64:	4798      	blx	r3
			UDP_Receive(cksm);
    4e66:	4b20      	ldr	r3, [pc, #128]	; (4ee8 <IPV4_Packet+0x1a0>)
    4e68:	4798      	blx	r3
		return SUCCESS;
    4e6a:	2001      	movs	r0, #1
			break;
    4e6c:	e778      	b.n	4d60 <IPV4_Packet+0x18>
			IPV4_SyslogWrite("rx tcp");
    4e6e:	481f      	ldr	r0, [pc, #124]	; (4eec <IPV4_Packet+0x1a4>)
    4e70:	4b10      	ldr	r3, [pc, #64]	; (4eb4 <IPV4_Packet+0x16c>)
    4e72:	4798      	blx	r3
			length = ipv4Header.length - hdrLen;
    4e74:	4b10      	ldr	r3, [pc, #64]	; (4eb8 <IPV4_Packet+0x170>)
    4e76:	885b      	ldrh	r3, [r3, #2]
    4e78:	1b1c      	subs	r4, r3, r4
    4e7a:	b2a4      	uxth	r4, r4
			cksm   = IPV4_PseudoHeaderChecksum(length);
    4e7c:	0020      	movs	r0, r4
    4e7e:	4b19      	ldr	r3, [pc, #100]	; (4ee4 <IPV4_Packet+0x19c>)
    4e80:	4798      	blx	r3
    4e82:	0001      	movs	r1, r0
			cksm   = ETH_RxComputeChecksum(length, cksm);
    4e84:	0020      	movs	r0, r4
    4e86:	4b09      	ldr	r3, [pc, #36]	; (4eac <IPV4_Packet+0x164>)
    4e88:	4798      	blx	r3
			if (cksm == 0) {
    4e8a:	2800      	cmp	r0, #0
    4e8c:	d108      	bne.n	4ea0 <IPV4_Packet+0x158>
				remoteIpv4Address = ipv4Header.srcIpAddress;
    4e8e:	4b0a      	ldr	r3, [pc, #40]	; (4eb8 <IPV4_Packet+0x170>)
    4e90:	68d8      	ldr	r0, [r3, #12]
    4e92:	4b17      	ldr	r3, [pc, #92]	; (4ef0 <IPV4_Packet+0x1a8>)
    4e94:	6018      	str	r0, [r3, #0]
				TCP_Recv(remoteIpv4Address, length);
    4e96:	0021      	movs	r1, r4
    4e98:	4b16      	ldr	r3, [pc, #88]	; (4ef4 <IPV4_Packet+0x1ac>)
    4e9a:	4798      	blx	r3
		return SUCCESS;
    4e9c:	2001      	movs	r0, #1
    4e9e:	e75f      	b.n	4d60 <IPV4_Packet+0x18>
				IPV4_SyslogWrite("rx bad tcp cksm");
    4ea0:	4815      	ldr	r0, [pc, #84]	; (4ef8 <IPV4_Packet+0x1b0>)
    4ea2:	4b04      	ldr	r3, [pc, #16]	; (4eb4 <IPV4_Packet+0x16c>)
    4ea4:	4798      	blx	r3
		return SUCCESS;
    4ea6:	2001      	movs	r0, #1
    4ea8:	e75a      	b.n	4d60 <IPV4_Packet+0x18>
    4eaa:	46c0      	nop			; (mov r8, r8)
    4eac:	00004541 	.word	0x00004541
    4eb0:	00007c14 	.word	0x00007c14
    4eb4:	00005197 	.word	0x00005197
    4eb8:	20004b38 	.word	0x20004b38
    4ebc:	00004019 	.word	0x00004019
    4ec0:	20004b4c 	.word	0x20004b4c
    4ec4:	00007c6c 	.word	0x00007c6c
    4ec8:	00006789 	.word	0x00006789
    4ecc:	00007c7c 	.word	0x00007c7c
    4ed0:	000042b5 	.word	0x000042b5
    4ed4:	00007c2c 	.word	0x00007c2c
    4ed8:	00007c34 	.word	0x00007c34
    4edc:	00004cb9 	.word	0x00004cb9
    4ee0:	00007c4c 	.word	0x00007c4c
    4ee4:	00004d09 	.word	0x00004d09
    4ee8:	0000627d 	.word	0x0000627d
    4eec:	00007c54 	.word	0x00007c54
    4ef0:	20004b30 	.word	0x20004b30
    4ef4:	00005d05 	.word	0x00005d05
    4ef8:	00007c5c 	.word	0x00007c5c

00004efc <IPv4_Start>:

error_msg IPv4_Start(uint32_t destAddress, ipProtocolNumbers protocol)
{
    4efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4efe:	46ce      	mov	lr, r9
    4f00:	4647      	mov	r7, r8
    4f02:	b580      	push	{r7, lr}
    4f04:	0006      	movs	r6, r0
    4f06:	000d      	movs	r5, r1
	// get the dest mac address
	const mac48Address_t *macAddress;
	uint32_t              targetAddress;

	// Check if we have a valid IPadress and if it's different then 127.0.0.1
	if (((ipv4Address != 0) || (protocol == UDP)) && (ipv4Address != 0x7F000001)) {
    4f08:	4b27      	ldr	r3, [pc, #156]	; (4fa8 <IPv4_Start+0xac>)
    4f0a:	681b      	ldr	r3, [r3, #0]
    4f0c:	2b00      	cmp	r3, #0
    4f0e:	d103      	bne.n	4f18 <IPv4_Start+0x1c>
    4f10:	2911      	cmp	r1, #17
    4f12:	d001      	beq.n	4f18 <IPv4_Start+0x1c>
	error_msg ret = ERROR;
    4f14:	2400      	movs	r4, #0
    4f16:	e017      	b.n	4f48 <IPv4_Start+0x4c>
	if (((ipv4Address != 0) || (protocol == UDP)) && (ipv4Address != 0x7F000001)) {
    4f18:	4a24      	ldr	r2, [pc, #144]	; (4fac <IPv4_Start+0xb0>)
    4f1a:	4293      	cmp	r3, r2
    4f1c:	d041      	beq.n	4fa2 <IPv4_Start+0xa6>
		if (destAddress != 0xFFFFFFFF) {
    4f1e:	1c72      	adds	r2, r6, #1
    4f20:	d01e      	beq.n	4f60 <IPv4_Start+0x64>
			if ((ipv4SubnetMask & destAddress) == (ipv4SubnetMask & ipv4Address)) // check for subnet
    4f22:	4073      	eors	r3, r6
    4f24:	4a22      	ldr	r2, [pc, #136]	; (4fb0 <IPv4_Start+0xb4>)
    4f26:	6812      	ldr	r2, [r2, #0]
    4f28:	421a      	tst	r2, r3
    4f2a:	d012      	beq.n	4f52 <IPv4_Start+0x56>
			{
				targetAddress = destAddress;
			} else {
				targetAddress = ipv4Router;
    4f2c:	4b21      	ldr	r3, [pc, #132]	; (4fb4 <IPv4_Start+0xb8>)
    4f2e:	681c      	ldr	r4, [r3, #0]
			}

			macAddress = ARPV4_Lookup(targetAddress);
    4f30:	0020      	movs	r0, r4
    4f32:	4b21      	ldr	r3, [pc, #132]	; (4fb8 <IPv4_Start+0xbc>)
    4f34:	4798      	blx	r3
			if (macAddress == 0) {
    4f36:	2800      	cmp	r0, #0
    4f38:	d00d      	beq.n	4f56 <IPv4_Start+0x5a>
				return ret;
			}
		} else {
			macAddress = &broadcastMAC;
		}
		ret = ETH_WriteStart(macAddress, ETHERTYPE_IPV4);
    4f3a:	2180      	movs	r1, #128	; 0x80
    4f3c:	0109      	lsls	r1, r1, #4
    4f3e:	4b1f      	ldr	r3, [pc, #124]	; (4fbc <IPv4_Start+0xc0>)
    4f40:	4798      	blx	r3
    4f42:	0004      	movs	r4, r0
		if (ret == SUCCESS) {
    4f44:	2801      	cmp	r0, #1
    4f46:	d00d      	beq.n	4f64 <IPv4_Start+0x68>
			ipv4Header.dstIpAddress = destAddress;
			ipv4Header.protocol     = protocol;
		}
	}
	return ret;
}
    4f48:	0020      	movs	r0, r4
    4f4a:	bc0c      	pop	{r2, r3}
    4f4c:	4690      	mov	r8, r2
    4f4e:	4699      	mov	r9, r3
    4f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				targetAddress = destAddress;
    4f52:	0034      	movs	r4, r6
    4f54:	e7ec      	b.n	4f30 <IPv4_Start+0x34>
				ret = ARPV4_Request(targetAddress); // schedule an arp request
    4f56:	0020      	movs	r0, r4
    4f58:	4b19      	ldr	r3, [pc, #100]	; (4fc0 <IPv4_Start+0xc4>)
    4f5a:	4798      	blx	r3
    4f5c:	0004      	movs	r4, r0
				return ret;
    4f5e:	e7f3      	b.n	4f48 <IPv4_Start+0x4c>
			macAddress = &broadcastMAC;
    4f60:	4818      	ldr	r0, [pc, #96]	; (4fc4 <IPv4_Start+0xc8>)
    4f62:	e7ea      	b.n	4f3a <IPv4_Start+0x3e>
			ETH_Write16(0x4500);     // VERSION, IHL, DSCP, ECN
    4f64:	208a      	movs	r0, #138	; 0x8a
    4f66:	01c0      	lsls	r0, r0, #7
    4f68:	4b17      	ldr	r3, [pc, #92]	; (4fc8 <IPv4_Start+0xcc>)
    4f6a:	4698      	mov	r8, r3
    4f6c:	4798      	blx	r3
			ETH_Write16(0);          // total packet length
    4f6e:	2000      	movs	r0, #0
    4f70:	47c0      	blx	r8
			ETH_Write32(0xAA554000); // My IPV4 magic Number..., FLAGS, Fragment Offset
    4f72:	4816      	ldr	r0, [pc, #88]	; (4fcc <IPv4_Start+0xd0>)
    4f74:	4f16      	ldr	r7, [pc, #88]	; (4fd0 <IPv4_Start+0xd4>)
    4f76:	47b8      	blx	r7
			ETH_Write8(IPv4_TTL);    // TTL
    4f78:	2040      	movs	r0, #64	; 0x40
    4f7a:	4b16      	ldr	r3, [pc, #88]	; (4fd4 <IPv4_Start+0xd8>)
    4f7c:	4699      	mov	r9, r3
    4f7e:	4798      	blx	r3
			ETH_Write8(protocol);    // protocol
    4f80:	0028      	movs	r0, r5
    4f82:	47c8      	blx	r9
			ETH_Write16(0);          // checksum. set to zero and overwrite with correct value
    4f84:	2000      	movs	r0, #0
    4f86:	47c0      	blx	r8
			ETH_Write32(ipv4Address);
    4f88:	4b07      	ldr	r3, [pc, #28]	; (4fa8 <IPv4_Start+0xac>)
    4f8a:	4698      	mov	r8, r3
    4f8c:	6818      	ldr	r0, [r3, #0]
    4f8e:	47b8      	blx	r7
			ETH_Write32(destAddress);
    4f90:	0030      	movs	r0, r6
    4f92:	47b8      	blx	r7
			ipv4Header.srcIpAddress = ipv4Address;
    4f94:	4b10      	ldr	r3, [pc, #64]	; (4fd8 <IPv4_Start+0xdc>)
    4f96:	4642      	mov	r2, r8
    4f98:	6812      	ldr	r2, [r2, #0]
    4f9a:	60da      	str	r2, [r3, #12]
			ipv4Header.dstIpAddress = destAddress;
    4f9c:	611e      	str	r6, [r3, #16]
			ipv4Header.protocol     = protocol;
    4f9e:	725d      	strb	r5, [r3, #9]
    4fa0:	e7d2      	b.n	4f48 <IPv4_Start+0x4c>
	error_msg ret = ERROR;
    4fa2:	2400      	movs	r4, #0
    4fa4:	e7d0      	b.n	4f48 <IPv4_Start+0x4c>
    4fa6:	46c0      	nop			; (mov r8, r8)
    4fa8:	20004b4c 	.word	0x20004b4c
    4fac:	7f000001 	.word	0x7f000001
    4fb0:	20004b34 	.word	0x20004b34
    4fb4:	20004b2c 	.word	0x20004b2c
    4fb8:	00004881 	.word	0x00004881
    4fbc:	0000416d 	.word	0x0000416d
    4fc0:	000047d1 	.word	0x000047d1
    4fc4:	00007c98 	.word	0x00007c98
    4fc8:	0000409d 	.word	0x0000409d
    4fcc:	aa554000 	.word	0xaa554000
    4fd0:	000040d5 	.word	0x000040d5
    4fd4:	0000406d 	.word	0x0000406d
    4fd8:	20004b38 	.word	0x20004b38

00004fdc <IPV4_Send>:

error_msg IPV4_Send(uint16_t payloadLength)
{
    4fdc:	b510      	push	{r4, lr}
    4fde:	b082      	sub	sp, #8
	uint16_t  totalLength;
	uint16_t  cksm;
	error_msg ret;

	totalLength = 20 + payloadLength;
    4fe0:	3014      	adds	r0, #20
    4fe2:	b280      	uxth	r0, r0
	totalLength = ntohs(totalLength);
    4fe4:	0a03      	lsrs	r3, r0, #8
    4fe6:	0200      	lsls	r0, r0, #8
    4fe8:	4318      	orrs	r0, r3
    4fea:	466b      	mov	r3, sp
    4fec:	80d8      	strh	r0, [r3, #6]
    4fee:	3306      	adds	r3, #6

	// Insert IPv4 Total Length
	ETH_Insert((char *)&totalLength, 2, sizeof(ethernetFrame_t) + offsetof(ipv4Header_t, length));
    4ff0:	2210      	movs	r2, #16
    4ff2:	2102      	movs	r1, #2
    4ff4:	0018      	movs	r0, r3
    4ff6:	4c08      	ldr	r4, [pc, #32]	; (5018 <IPV4_Send+0x3c>)
    4ff8:	47a0      	blx	r4

	cksm = ETH_TxComputeChecksum(sizeof(ethernetFrame_t), sizeof(ipv4Header_t), 0);
    4ffa:	2200      	movs	r2, #0
    4ffc:	2114      	movs	r1, #20
    4ffe:	200e      	movs	r0, #14
    5000:	4b06      	ldr	r3, [pc, #24]	; (501c <IPV4_Send+0x40>)
    5002:	4798      	blx	r3
    5004:	ab01      	add	r3, sp, #4
    5006:	8018      	strh	r0, [r3, #0]
	// Insert Ipv4 Header Checksum
	ETH_Insert((char *)&cksm, 2, sizeof(ethernetFrame_t) + offsetof(ipv4Header_t, headerCksm));
    5008:	2218      	movs	r2, #24
    500a:	2102      	movs	r1, #2
    500c:	0018      	movs	r0, r3
    500e:	47a0      	blx	r4
	ret = ETH_Send();
    5010:	4b03      	ldr	r3, [pc, #12]	; (5020 <IPV4_Send+0x44>)
    5012:	4798      	blx	r3

	return ret;
}
    5014:	b002      	add	sp, #8
    5016:	bd10      	pop	{r4, pc}
    5018:	00004341 	.word	0x00004341
    501c:	0000449d 	.word	0x0000449d
    5020:	0000425d 	.word	0x0000425d

00005024 <IPV4_GetMyIP>:

uint32_t IPV4_GetMyIP(void)
{
	return (ipv4Address);
    5024:	4b01      	ldr	r3, [pc, #4]	; (502c <IPV4_GetMyIP+0x8>)
    5026:	6818      	ldr	r0, [r3, #0]
}
    5028:	4770      	bx	lr
    502a:	46c0      	nop			; (mov r8, r8)
    502c:	20004b4c 	.word	0x20004b4c

00005030 <Network_Init>:
#else
#define NET_SyslogWrite(x)
#endif

void Network_Init(void)
{
    5030:	b510      	push	{r4, lr}
	ETH_Init();
    5032:	4b08      	ldr	r3, [pc, #32]	; (5054 <Network_Init+0x24>)
    5034:	4798      	blx	r3
	ARPV4_Init();
    5036:	4b08      	ldr	r3, [pc, #32]	; (5058 <Network_Init+0x28>)
    5038:	4798      	blx	r3
	IPV4_Init();
    503a:	4b08      	ldr	r3, [pc, #32]	; (505c <Network_Init+0x2c>)
    503c:	4798      	blx	r3
	TCP_Init();
    503e:	4b08      	ldr	r3, [pc, #32]	; (5060 <Network_Init+0x30>)
    5040:	4798      	blx	r3

	time(&arpTimer);
    5042:	4c08      	ldr	r4, [pc, #32]	; (5064 <Network_Init+0x34>)
    5044:	0020      	movs	r0, r4
    5046:	4b08      	ldr	r3, [pc, #32]	; (5068 <Network_Init+0x38>)
    5048:	4798      	blx	r3
	arpTimer += 10;
    504a:	6823      	ldr	r3, [r4, #0]
    504c:	330a      	adds	r3, #10
    504e:	6023      	str	r3, [r4, #0]
}
    5050:	bd10      	pop	{r4, pc}
    5052:	46c0      	nop			; (mov r8, r8)
    5054:	00003d1d 	.word	0x00003d1d
    5058:	000045f9 	.word	0x000045f9
    505c:	00004cfd 	.word	0x00004cfd
    5060:	00005ec1 	.word	0x00005ec1
    5064:	20004b58 	.word	0x20004b58
    5068:	00006941 	.word	0x00006941

0000506c <Network_Read>:
	}
	nowPv = now;
}

void Network_Read(void)
{
    506c:	b510      	push	{r4, lr}
    506e:	b098      	sub	sp, #96	; 0x60
	ethernetFrame_t header;
	char            debug_str[80];

	if (ETH_packetReady()) {
    5070:	4b1f      	ldr	r3, [pc, #124]	; (50f0 <Network_Read+0x84>)
    5072:	681b      	ldr	r3, [r3, #0]
    5074:	079b      	lsls	r3, r3, #30
    5076:	d401      	bmi.n	507c <Network_Read+0x10>
			NET_SyslogWrite(debug_str);
			break;
		}
		ETH_Flush();
	}
}
    5078:	b018      	add	sp, #96	; 0x60
    507a:	bd10      	pop	{r4, pc}
		ETH_NextPacketUpdate();
    507c:	4b1d      	ldr	r3, [pc, #116]	; (50f4 <Network_Read+0x88>)
    507e:	4798      	blx	r3
		ETH_ReadBlock((char *)&header, sizeof(header));
    5080:	ac14      	add	r4, sp, #80	; 0x50
    5082:	210e      	movs	r1, #14
    5084:	0020      	movs	r0, r4
    5086:	4b1c      	ldr	r3, [pc, #112]	; (50f8 <Network_Read+0x8c>)
    5088:	4798      	blx	r3
		header.id.type = ntohs(header.id.type); // reverse the type field
    508a:	89a3      	ldrh	r3, [r4, #12]
    508c:	0a1a      	lsrs	r2, r3, #8
    508e:	021b      	lsls	r3, r3, #8
    5090:	431a      	orrs	r2, r3
    5092:	b292      	uxth	r2, r2
    5094:	81a2      	strh	r2, [r4, #12]
		switch (header.id.type) {
    5096:	4b19      	ldr	r3, [pc, #100]	; (50fc <Network_Read+0x90>)
    5098:	429a      	cmp	r2, r3
    509a:	d01a      	beq.n	50d2 <Network_Read+0x66>
    509c:	d90a      	bls.n	50b4 <Network_Read+0x48>
    509e:	2381      	movs	r3, #129	; 0x81
    50a0:	021b      	lsls	r3, r3, #8
    50a2:	429a      	cmp	r2, r3
    50a4:	d00f      	beq.n	50c6 <Network_Read+0x5a>
    50a6:	4b16      	ldr	r3, [pc, #88]	; (5100 <Network_Read+0x94>)
    50a8:	429a      	cmp	r2, r3
    50aa:	d118      	bne.n	50de <Network_Read+0x72>
			NET_SyslogWrite("IPV6 Packet Dropped");
    50ac:	4815      	ldr	r0, [pc, #84]	; (5104 <Network_Read+0x98>)
    50ae:	4b16      	ldr	r3, [pc, #88]	; (5108 <Network_Read+0x9c>)
    50b0:	4798      	blx	r3
			break;
    50b2:	e00b      	b.n	50cc <Network_Read+0x60>
		switch (header.id.type) {
    50b4:	3b06      	subs	r3, #6
    50b6:	429a      	cmp	r2, r3
    50b8:	d111      	bne.n	50de <Network_Read+0x72>
			NET_SyslogWrite("RX IPV4 Packet");
    50ba:	4814      	ldr	r0, [pc, #80]	; (510c <Network_Read+0xa0>)
    50bc:	4b12      	ldr	r3, [pc, #72]	; (5108 <Network_Read+0x9c>)
    50be:	4798      	blx	r3
			IPV4_Packet();
    50c0:	4b13      	ldr	r3, [pc, #76]	; (5110 <Network_Read+0xa4>)
    50c2:	4798      	blx	r3
			break;
    50c4:	e002      	b.n	50cc <Network_Read+0x60>
			NET_SyslogWrite("VLAN Packet Dropped");
    50c6:	4813      	ldr	r0, [pc, #76]	; (5114 <Network_Read+0xa8>)
    50c8:	4b0f      	ldr	r3, [pc, #60]	; (5108 <Network_Read+0x9c>)
    50ca:	4798      	blx	r3
		ETH_Flush();
    50cc:	4b12      	ldr	r3, [pc, #72]	; (5118 <Network_Read+0xac>)
    50ce:	4798      	blx	r3
}
    50d0:	e7d2      	b.n	5078 <Network_Read+0xc>
			NET_SyslogWrite("RX ARPV4 Packet");
    50d2:	4812      	ldr	r0, [pc, #72]	; (511c <Network_Read+0xb0>)
    50d4:	4b0c      	ldr	r3, [pc, #48]	; (5108 <Network_Read+0x9c>)
    50d6:	4798      	blx	r3
			ARPV4_Packet();
    50d8:	4b11      	ldr	r3, [pc, #68]	; (5120 <Network_Read+0xb4>)
    50da:	4798      	blx	r3
			break;
    50dc:	e7f6      	b.n	50cc <Network_Read+0x60>
			sprintf(debug_str, "%x : %d", header.id.type, header.id.length);
    50de:	0013      	movs	r3, r2
    50e0:	4910      	ldr	r1, [pc, #64]	; (5124 <Network_Read+0xb8>)
    50e2:	4668      	mov	r0, sp
    50e4:	4c10      	ldr	r4, [pc, #64]	; (5128 <Network_Read+0xbc>)
    50e6:	47a0      	blx	r4
			NET_SyslogWrite(debug_str);
    50e8:	4668      	mov	r0, sp
    50ea:	4b07      	ldr	r3, [pc, #28]	; (5108 <Network_Read+0x9c>)
    50ec:	4798      	blx	r3
			break;
    50ee:	e7ed      	b.n	50cc <Network_Read+0x60>
    50f0:	20004ab8 	.word	0x20004ab8
    50f4:	00003c55 	.word	0x00003c55
    50f8:	00004019 	.word	0x00004019
    50fc:	00000806 	.word	0x00000806
    5100:	000086dd 	.word	0x000086dd
    5104:	00007cd4 	.word	0x00007cd4
    5108:	00005197 	.word	0x00005197
    510c:	00007cc4 	.word	0x00007cc4
    5110:	00004d49 	.word	0x00004d49
    5114:	00007ca0 	.word	0x00007ca0
    5118:	000042f1 	.word	0x000042f1
    511c:	00007cb4 	.word	0x00007cb4
    5120:	00004615 	.word	0x00004615
    5124:	00007ce8 	.word	0x00007ce8
    5128:	00006789 	.word	0x00006789

0000512c <Network_Manage>:
{
    512c:	b500      	push	{lr}
    512e:	b083      	sub	sp, #12
	ETH_EventHandler();
    5130:	4b10      	ldr	r3, [pc, #64]	; (5174 <Network_Manage+0x48>)
    5132:	4798      	blx	r3
	Network_Read(); // handle any packets that have arrived...
    5134:	4b10      	ldr	r3, [pc, #64]	; (5178 <Network_Manage+0x4c>)
    5136:	4798      	blx	r3
	time(&now);
    5138:	a801      	add	r0, sp, #4
    513a:	4b10      	ldr	r3, [pc, #64]	; (517c <Network_Manage+0x50>)
    513c:	4798      	blx	r3
	if (now >= arpTimer) {
    513e:	4b10      	ldr	r3, [pc, #64]	; (5180 <Network_Manage+0x54>)
    5140:	681b      	ldr	r3, [r3, #0]
    5142:	9a01      	ldr	r2, [sp, #4]
    5144:	429a      	cmp	r2, r3
    5146:	da09      	bge.n	515c <Network_Manage+0x30>
	if (now > nowPv) // at least 1 second has elapsed
    5148:	4b0e      	ldr	r3, [pc, #56]	; (5184 <Network_Manage+0x58>)
    514a:	681b      	ldr	r3, [r3, #0]
    514c:	9a01      	ldr	r2, [sp, #4]
    514e:	429a      	cmp	r2, r3
    5150:	dc0b      	bgt.n	516a <Network_Manage+0x3e>
	nowPv = now;
    5152:	4b0c      	ldr	r3, [pc, #48]	; (5184 <Network_Manage+0x58>)
    5154:	9a01      	ldr	r2, [sp, #4]
    5156:	601a      	str	r2, [r3, #0]
}
    5158:	b003      	add	sp, #12
    515a:	bd00      	pop	{pc}
		ARPV4_Update();
    515c:	4b0a      	ldr	r3, [pc, #40]	; (5188 <Network_Manage+0x5c>)
    515e:	4798      	blx	r3
		arpTimer += 10;
    5160:	4a07      	ldr	r2, [pc, #28]	; (5180 <Network_Manage+0x54>)
    5162:	6813      	ldr	r3, [r2, #0]
    5164:	330a      	adds	r3, #10
    5166:	6013      	str	r3, [r2, #0]
    5168:	e7ee      	b.n	5148 <Network_Manage+0x1c>
		DHCP_Manage(); // update the DHCP status every second
    516a:	4b08      	ldr	r3, [pc, #32]	; (518c <Network_Manage+0x60>)
    516c:	4798      	blx	r3
		TCP_Update(); // handle timeouts
    516e:	4b08      	ldr	r3, [pc, #32]	; (5190 <Network_Manage+0x64>)
    5170:	4798      	blx	r3
    5172:	e7ee      	b.n	5152 <Network_Manage+0x26>
    5174:	00003e6d 	.word	0x00003e6d
    5178:	0000506d 	.word	0x0000506d
    517c:	00006941 	.word	0x00006941
    5180:	20004b58 	.word	0x20004b58
    5184:	2000088c 	.word	0x2000088c
    5188:	000047b5 	.word	0x000047b5
    518c:	00004a0d 	.word	0x00004a0d
    5190:	00006129 	.word	0x00006129

00005194 <SYSLOG_Init>:
#if ENABLE_SYSLOG_DEBUG
	unsigned long t = time(0);

	printf("\r\n\r\nStarting Syslog at %lu\r\n", t);
#endif
}
    5194:	4770      	bx	lr

00005196 <SYSLOG_Write>:
{
#if ENABLE_SYSLOG_DEBUG
	unsigned int t = (unsigned int)time(0); // only printing the LSW of the time
	printf("%u : %s\r\n", t, message);
#endif
}
    5196:	4770      	bx	lr

00005198 <TCB_Insert>:
 */
static void TCB_Insert(tcpTCB_t *ptr)
{
	// Insert the new TCB at the head of the list.
	// This prevents a list traversal and saves time.
	if (tcbList != NULL) {
    5198:	4b07      	ldr	r3, [pc, #28]	; (51b8 <TCB_Insert+0x20>)
    519a:	681b      	ldr	r3, [r3, #0]
    519c:	2b00      	cmp	r3, #0
    519e:	d000      	beq.n	51a2 <TCB_Insert+0xa>
		// link this TCB as the previous one for the top of the list
		tcbList->prevTCB = ptr;
    51a0:	6458      	str	r0, [r3, #68]	; 0x44
	}
	ptr->nextTCB = tcbList; // put the existing list at the end of this tcb...
    51a2:	6403      	str	r3, [r0, #64]	; 0x40
	tcbList      = ptr;     // put this tcb at the head of the list.
    51a4:	4b04      	ldr	r3, [pc, #16]	; (51b8 <TCB_Insert+0x20>)
    51a6:	6018      	str	r0, [r3, #0]
	ptr->prevTCB = NULL;    // make sure that the upstream pointer is empty
    51a8:	2300      	movs	r3, #0
    51aa:	6443      	str	r3, [r0, #68]	; 0x44
	tcbListSize++;
    51ac:	4a03      	ldr	r2, [pc, #12]	; (51bc <TCB_Insert+0x24>)
    51ae:	7813      	ldrb	r3, [r2, #0]
    51b0:	3301      	adds	r3, #1
    51b2:	7013      	strb	r3, [r2, #0]
}
    51b4:	4770      	bx	lr
    51b6:	46c0      	nop			; (mov r8, r8)
    51b8:	20004b60 	.word	0x20004b60
    51bc:	20004b64 	.word	0x20004b64

000051c0 <TCB_Remove>:
 * @return
 *      None
 */
static void TCB_Remove(tcpTCB_t *ptr)
{
	if (tcbListSize > 1) {
    51c0:	4b0e      	ldr	r3, [pc, #56]	; (51fc <TCB_Remove+0x3c>)
    51c2:	781b      	ldrb	r3, [r3, #0]
    51c4:	b25b      	sxtb	r3, r3
    51c6:	2b01      	cmp	r3, #1
    51c8:	dd12      	ble.n	51f0 <TCB_Remove+0x30>
		// check if this is the first in list
		if (ptr->prevTCB == NULL) {
    51ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
    51cc:	2b00      	cmp	r3, #0
    51ce:	d009      	beq.n	51e4 <TCB_Remove+0x24>
			tcbList                               = ptr->nextTCB;
			((tcpTCB_t *)(ptr->nextTCB))->prevTCB = NULL;
		} else {
			((tcpTCB_t *)(ptr->prevTCB))->nextTCB = ptr->nextTCB;
    51d0:	6c02      	ldr	r2, [r0, #64]	; 0x40
    51d2:	641a      	str	r2, [r3, #64]	; 0x40
			((tcpTCB_t *)(ptr->nextTCB))->prevTCB = ptr->prevTCB;
    51d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
    51d6:	6c42      	ldr	r2, [r0, #68]	; 0x44
    51d8:	645a      	str	r2, [r3, #68]	; 0x44
		}
		tcbListSize--;
    51da:	4a08      	ldr	r2, [pc, #32]	; (51fc <TCB_Remove+0x3c>)
    51dc:	7813      	ldrb	r3, [r2, #0]
    51de:	3b01      	subs	r3, #1
    51e0:	7013      	strb	r3, [r2, #0]
	} else if (tcbListSize == 1) {
		tcbList = NULL;
	}
}
    51e2:	4770      	bx	lr
			tcbList                               = ptr->nextTCB;
    51e4:	6c03      	ldr	r3, [r0, #64]	; 0x40
    51e6:	4a06      	ldr	r2, [pc, #24]	; (5200 <TCB_Remove+0x40>)
    51e8:	6013      	str	r3, [r2, #0]
			((tcpTCB_t *)(ptr->nextTCB))->prevTCB = NULL;
    51ea:	2200      	movs	r2, #0
    51ec:	645a      	str	r2, [r3, #68]	; 0x44
    51ee:	e7f4      	b.n	51da <TCB_Remove+0x1a>
	} else if (tcbListSize == 1) {
    51f0:	2b01      	cmp	r3, #1
    51f2:	d1f6      	bne.n	51e2 <TCB_Remove+0x22>
		tcbList = NULL;
    51f4:	2200      	movs	r2, #0
    51f6:	4b02      	ldr	r3, [pc, #8]	; (5200 <TCB_Remove+0x40>)
    51f8:	601a      	str	r2, [r3, #0]
}
    51fa:	e7f2      	b.n	51e2 <TCB_Remove+0x22>
    51fc:	20004b64 	.word	0x20004b64
    5200:	20004b60 	.word	0x20004b60

00005204 <TCB_Reset>:
 * @return
 *      None
 */
static void TCB_Reset(tcpTCB_t *tcbPtr)
{
	tcbPtr->destIP       = 0;
    5204:	2300      	movs	r3, #0
    5206:	6043      	str	r3, [r0, #4]
	tcbPtr->destPort     = 0;
    5208:	2200      	movs	r2, #0
    520a:	8103      	strh	r3, [r0, #8]
	tcbPtr->localSeqno   = 0;
    520c:	6143      	str	r3, [r0, #20]
	tcbPtr->localLastAck = 0;
    520e:	6183      	str	r3, [r0, #24]
	tcbPtr->remoteSeqno  = 0;
    5210:	60c3      	str	r3, [r0, #12]
	tcbPtr->remoteAck    = 0;
    5212:	6103      	str	r3, [r0, #16]
	tcbPtr->remoteWnd    = 0;
    5214:	8383      	strh	r3, [r0, #28]

	tcbPtr->timeout            = 0;
    5216:	2148      	movs	r1, #72	; 0x48
    5218:	5243      	strh	r3, [r0, r1]
	tcbPtr->timeoutReloadValue = 0;
    521a:	3102      	adds	r1, #2
    521c:	5243      	strh	r3, [r0, r1]
	tcbPtr->timeoutsCount      = 0;
    521e:	3102      	adds	r1, #2
    5220:	5442      	strb	r2, [r0, r1]
	tcbPtr->flags              = 0;
    5222:	3101      	adds	r1, #1
    5224:	5442      	strb	r2, [r0, r1]

	tcbPtr->localPort   = 0;
    5226:	8003      	strh	r3, [r0, #0]
	tcbPtr->socketState = SOCKET_CLOSED;
    5228:	2201      	movs	r2, #1
    522a:	334e      	adds	r3, #78	; 0x4e
    522c:	54c2      	strb	r2, [r0, r3]
}
    522e:	4770      	bx	lr

00005230 <TCB_Check>:
{
	tcpTCB_t *     tcbPtr;
	bool           ret   = false;
	socklistsize_t count = 0;

	if ((tcbList != NULL) && (ptr != NULL)) {
    5230:	4b0d      	ldr	r3, [pc, #52]	; (5268 <TCB_Check+0x38>)
    5232:	681a      	ldr	r2, [r3, #0]
    5234:	2a00      	cmp	r2, #0
    5236:	d011      	beq.n	525c <TCB_Check+0x2c>
    5238:	2800      	cmp	r0, #0
    523a:	d014      	beq.n	5266 <TCB_Check+0x36>
    523c:	2300      	movs	r3, #0
		// search for ptr into the active TCB/sockets list
		tcbPtr = tcbList;
		while ((tcbPtr != NULL) && (count < tcbListSize)) {
    523e:	2a00      	cmp	r2, #0
    5240:	d010      	beq.n	5264 <TCB_Check+0x34>
    5242:	490a      	ldr	r1, [pc, #40]	; (526c <TCB_Check+0x3c>)
    5244:	7809      	ldrb	r1, [r1, #0]
    5246:	b249      	sxtb	r1, r1
    5248:	428b      	cmp	r3, r1
    524a:	da05      	bge.n	5258 <TCB_Check+0x28>
			if (tcbPtr == ptr) {
    524c:	4282      	cmp	r2, r0
    524e:	d007      	beq.n	5260 <TCB_Check+0x30>
				ret = true;
				break;
			} else {
				tcbPtr = tcbPtr->nextTCB;
    5250:	6c12      	ldr	r2, [r2, #64]	; 0x40
				count++;
    5252:	3301      	adds	r3, #1
    5254:	b25b      	sxtb	r3, r3
    5256:	e7f2      	b.n	523e <TCB_Check+0xe>
	bool           ret   = false;
    5258:	2000      	movs	r0, #0
    525a:	e004      	b.n	5266 <TCB_Check+0x36>
    525c:	2000      	movs	r0, #0
    525e:	e002      	b.n	5266 <TCB_Check+0x36>
				ret = true;
    5260:	2001      	movs	r0, #1
    5262:	e000      	b.n	5266 <TCB_Check+0x36>
	bool           ret   = false;
    5264:	2000      	movs	r0, #0
			}
		}
	}
	return ret;
}
    5266:	4770      	bx	lr
    5268:	20004b60 	.word	0x20004b60
    526c:	20004b64 	.word	0x20004b64

00005270 <TCP_Snd>:
 *      true - The buffer was send successfully
 * @return
 *      false - Send buffer fails.
 */
static bool TCP_Snd(tcpTCB_t *tcbPtr)
{
    5270:	b5f0      	push	{r4, r5, r6, r7, lr}
    5272:	46c6      	mov	lr, r8
    5274:	b500      	push	{lr}
    5276:	b086      	sub	sp, #24
    5278:	0004      	movs	r4, r0
	uint16_t    payloadLength;
	uint16_t    cksm;
	uint16_t    tcpDataLength;
	uint8_t *   data;

	txHeader.sourcePort = htons(tcbPtr->localPort);
    527a:	8803      	ldrh	r3, [r0, #0]
    527c:	0a1a      	lsrs	r2, r3, #8
    527e:	021b      	lsls	r3, r3, #8
    5280:	431a      	orrs	r2, r3
    5282:	ab01      	add	r3, sp, #4
    5284:	801a      	strh	r2, [r3, #0]
	txHeader.destPort   = htons(tcbPtr->destPort);
    5286:	8902      	ldrh	r2, [r0, #8]
    5288:	0a11      	lsrs	r1, r2, #8
    528a:	0212      	lsls	r2, r2, #8
    528c:	430a      	orrs	r2, r1
    528e:	805a      	strh	r2, [r3, #2]

	txHeader.sequenceNumber = htonl(tcbPtr->localSeqno);
    5290:	6940      	ldr	r0, [r0, #20]
    5292:	0e01      	lsrs	r1, r0, #24
    5294:	0a02      	lsrs	r2, r0, #8
    5296:	27ff      	movs	r7, #255	; 0xff
    5298:	023f      	lsls	r7, r7, #8
    529a:	403a      	ands	r2, r7
    529c:	4311      	orrs	r1, r2
    529e:	0202      	lsls	r2, r0, #8
    52a0:	26ff      	movs	r6, #255	; 0xff
    52a2:	0436      	lsls	r6, r6, #16
    52a4:	4032      	ands	r2, r6
    52a6:	4311      	orrs	r1, r2
    52a8:	0600      	lsls	r0, r0, #24
    52aa:	4301      	orrs	r1, r0
    52ac:	9102      	str	r1, [sp, #8]

	txHeader.ackNumber = htonl(tcbPtr->remoteAck); // ask for next packet
    52ae:	6921      	ldr	r1, [r4, #16]
    52b0:	0e0a      	lsrs	r2, r1, #24
    52b2:	0a08      	lsrs	r0, r1, #8
    52b4:	4038      	ands	r0, r7
    52b6:	4302      	orrs	r2, r0
    52b8:	0208      	lsls	r0, r1, #8
    52ba:	4030      	ands	r0, r6
    52bc:	4302      	orrs	r2, r0
    52be:	0609      	lsls	r1, r1, #24
    52c0:	430a      	orrs	r2, r1
    52c2:	9203      	str	r2, [sp, #12]

	txHeader.ns         = 0; // make sure we clean unused fields
    52c4:	7b1a      	ldrb	r2, [r3, #12]
	txHeader.reserved   = 0; // make sure we clean unused fields
    52c6:	2101      	movs	r1, #1
    52c8:	438a      	bics	r2, r1
	txHeader.dataOffset = 5; // We don't support options for now
    52ca:	310d      	adds	r1, #13
    52cc:	438a      	bics	r2, r1
    52ce:	0011      	movs	r1, r2
    52d0:	220f      	movs	r2, #15
    52d2:	400a      	ands	r2, r1
    52d4:	2150      	movs	r1, #80	; 0x50
    52d6:	430a      	orrs	r2, r1
    52d8:	731a      	strb	r2, [r3, #12]
	txHeader.windowSize = htons(tcbPtr->localWnd);
    52da:	8be2      	ldrh	r2, [r4, #30]
    52dc:	0a11      	lsrs	r1, r2, #8
    52de:	0212      	lsls	r2, r2, #8
    52e0:	430a      	orrs	r2, r1
    52e2:	81da      	strh	r2, [r3, #14]
	txHeader.checksum   = 0;
    52e4:	2200      	movs	r2, #0
    52e6:	821a      	strh	r2, [r3, #16]
	txHeader.urgentPtr  = 0;
    52e8:	825a      	strh	r2, [r3, #18]

	if ((tcbPtr->flags) & (TCP_SYN_FLAG | TCP_RST_FLAG)) {
    52ea:	234d      	movs	r3, #77	; 0x4d
    52ec:	5ce3      	ldrb	r3, [r4, r3]
    52ee:	3206      	adds	r2, #6
    52f0:	421a      	tst	r2, r3
    52f2:	d118      	bne.n	5326 <TCP_Snd+0xb6>
		tcpDataLength = 0; // SYN and RST packets doesn't have any payload
	} else {
		tcpDataLength = tcbPtr->bytesToSend;
    52f4:	8f27      	ldrh	r7, [r4, #56]	; 0x38

		if (tcpDataLength != 0) {
    52f6:	2f00      	cmp	r7, #0
    52f8:	d016      	beq.n	5328 <TCP_Snd+0xb8>
			if (tcpDataLength > tcbPtr->remoteWnd) {
    52fa:	8ba1      	ldrh	r1, [r4, #28]
    52fc:	428f      	cmp	r7, r1
    52fe:	d800      	bhi.n	5302 <TCP_Snd+0x92>
		tcpDataLength = tcbPtr->bytesToSend;
    5300:	0039      	movs	r1, r7
				tcpDataLength = tcbPtr->remoteWnd;
			}

			if (tcpDataLength > tcbPtr->mss) {
    5302:	8c22      	ldrh	r2, [r4, #32]
    5304:	4291      	cmp	r1, r2
    5306:	d800      	bhi.n	530a <TCP_Snd+0x9a>
    5308:	000a      	movs	r2, r1
				tcpDataLength = tcbPtr->mss;
			}
			data = tcbPtr->txBufferPtr;
    530a:	6b65      	ldr	r5, [r4, #52]	; 0x34

			// update the pointer to the next byte that needs to be sent
			tcbPtr->txBufferPtr = tcbPtr->txBufferPtr + tcpDataLength;
    530c:	18a9      	adds	r1, r5, r2
    530e:	6361      	str	r1, [r4, #52]	; 0x34
			tcbPtr->bytesToSend = tcbPtr->bytesToSend - tcpDataLength;
    5310:	1abf      	subs	r7, r7, r2
    5312:	b2bf      	uxth	r7, r7
    5314:	8727      	strh	r7, [r4, #56]	; 0x38

			if (tcbPtr->bytesToSend == 0) {
    5316:	2f00      	cmp	r7, #0
    5318:	d12a      	bne.n	5370 <TCP_Snd+0x100>
				tcbPtr->flags |= TCP_PSH_FLAG;
    531a:	2108      	movs	r1, #8
    531c:	430b      	orrs	r3, r1
    531e:	214d      	movs	r1, #77	; 0x4d
    5320:	5463      	strb	r3, [r4, r1]
    5322:	0017      	movs	r7, r2
    5324:	e000      	b.n	5328 <TCP_Snd+0xb8>
		tcpDataLength = 0; // SYN and RST packets doesn't have any payload
    5326:	2700      	movs	r7, #0
			}
		}
	}
	// update the TCP Flags
	txHeader.flags = tcbPtr->flags;
    5328:	234d      	movs	r3, #77	; 0x4d
    532a:	5ce2      	ldrb	r2, [r4, r3]
    532c:	ab01      	add	r3, sp, #4
    532e:	735a      	strb	r2, [r3, #13]
	payloadLength  = sizeof(tcpHeader_t) + tcpDataLength;
    5330:	0038      	movs	r0, r7
    5332:	3014      	adds	r0, #20
    5334:	b283      	uxth	r3, r0
    5336:	4698      	mov	r8, r3

	ret = IPv4_Start(tcbPtr->destIP, TCP);
    5338:	2106      	movs	r1, #6
    533a:	6860      	ldr	r0, [r4, #4]
    533c:	4b23      	ldr	r3, [pc, #140]	; (53cc <TCP_Snd+0x15c>)
    533e:	4798      	blx	r3
    5340:	0006      	movs	r6, r0
    5342:	1e73      	subs	r3, r6, #1
    5344:	419e      	sbcs	r6, r3
    5346:	b2f6      	uxtb	r6, r6
	if (ret) {
    5348:	2800      	cmp	r0, #0
    534a:	d113      	bne.n	5374 <TCP_Snd+0x104>
		ret = IPV4_Send(payloadLength);
	}

	// The packet wasn't transmitted
	// Use the timeout to retry again later
	if (ret == false) {
    534c:	2e00      	cmp	r6, #0
    534e:	d135      	bne.n	53bc <TCP_Snd+0x14c>
		// make sure we keep the remaining timeouts and skip this send  that failed
		// try at least once
		tcbPtr->timeoutsCount = tcbPtr->timeoutsCount + 1;
    5350:	224c      	movs	r2, #76	; 0x4c
    5352:	5ca3      	ldrb	r3, [r4, r2]
    5354:	3301      	adds	r3, #1
    5356:	54a3      	strb	r3, [r4, r2]

		if (tcbPtr->timeout == 0) {
    5358:	2348      	movs	r3, #72	; 0x48
    535a:	5ae3      	ldrh	r3, [r4, r3]
    535c:	2b00      	cmp	r3, #0
    535e:	d102      	bne.n	5366 <TCP_Snd+0xf6>
			tcbPtr->timeout = TCP_START_TIMEOUT_VAL;
    5360:	3a4a      	subs	r2, #74	; 0x4a
    5362:	3348      	adds	r3, #72	; 0x48
    5364:	52e2      	strh	r2, [r4, r3]
		tcbPtr->localSeqno = tcbPtr->localSeqno + tcpDataLength;
		TCP_SyslogWrite("tcp_packet sent");
	}

	return ret;
}
    5366:	0030      	movs	r0, r6
    5368:	b006      	add	sp, #24
    536a:	bc04      	pop	{r2}
    536c:	4690      	mov	r8, r2
    536e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5370:	0017      	movs	r7, r2
    5372:	e7d9      	b.n	5328 <TCP_Snd+0xb8>
		ETH_WriteBlock((uint8_t *)&txHeader, sizeof(tcpHeader_t));
    5374:	2114      	movs	r1, #20
    5376:	a801      	add	r0, sp, #4
    5378:	4b15      	ldr	r3, [pc, #84]	; (53d0 <TCP_Snd+0x160>)
    537a:	4798      	blx	r3
		if (tcpDataLength > 0) {
    537c:	2f00      	cmp	r7, #0
    537e:	d118      	bne.n	53b2 <TCP_Snd+0x142>
		cksm = payloadLength + TCP;
    5380:	003a      	movs	r2, r7
    5382:	321a      	adds	r2, #26
    5384:	b292      	uxth	r2, r2
    5386:	466b      	mov	r3, sp
    5388:	1c9d      	adds	r5, r3, #2
    538a:	805a      	strh	r2, [r3, #2]
		cksm = ETH_TxComputeChecksum(sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) - 8, payloadLength + 8, cksm);
    538c:	0039      	movs	r1, r7
    538e:	311c      	adds	r1, #28
    5390:	b289      	uxth	r1, r1
    5392:	201a      	movs	r0, #26
    5394:	4b0f      	ldr	r3, [pc, #60]	; (53d4 <TCP_Snd+0x164>)
    5396:	4798      	blx	r3
    5398:	8028      	strh	r0, [r5, #0]
		ETH_Insert((char *)&cksm, 2, sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) + offsetof(tcpHeader_t, checksum));
    539a:	2232      	movs	r2, #50	; 0x32
    539c:	2102      	movs	r1, #2
    539e:	0028      	movs	r0, r5
    53a0:	4b0d      	ldr	r3, [pc, #52]	; (53d8 <TCP_Snd+0x168>)
    53a2:	4798      	blx	r3
		ret = IPV4_Send(payloadLength);
    53a4:	4640      	mov	r0, r8
    53a6:	4b0d      	ldr	r3, [pc, #52]	; (53dc <TCP_Snd+0x16c>)
    53a8:	4798      	blx	r3
    53aa:	1e46      	subs	r6, r0, #1
    53ac:	41b0      	sbcs	r0, r6
    53ae:	b2c6      	uxtb	r6, r0
    53b0:	e7cc      	b.n	534c <TCP_Snd+0xdc>
			ETH_WriteBlock(data, tcpDataLength);
    53b2:	0039      	movs	r1, r7
    53b4:	0028      	movs	r0, r5
    53b6:	4b06      	ldr	r3, [pc, #24]	; (53d0 <TCP_Snd+0x160>)
    53b8:	4798      	blx	r3
    53ba:	e7e1      	b.n	5380 <TCP_Snd+0x110>
		tcbPtr->localSeqno = tcbPtr->localSeqno + tcpDataLength;
    53bc:	6963      	ldr	r3, [r4, #20]
    53be:	469c      	mov	ip, r3
    53c0:	4467      	add	r7, ip
    53c2:	6167      	str	r7, [r4, #20]
		TCP_SyslogWrite("tcp_packet sent");
    53c4:	4806      	ldr	r0, [pc, #24]	; (53e0 <TCP_Snd+0x170>)
    53c6:	4b07      	ldr	r3, [pc, #28]	; (53e4 <TCP_Snd+0x174>)
    53c8:	4798      	blx	r3
    53ca:	e7cc      	b.n	5366 <TCP_Snd+0xf6>
    53cc:	00004efd 	.word	0x00004efd
    53d0:	0000411d 	.word	0x0000411d
    53d4:	0000449d 	.word	0x0000449d
    53d8:	00004341 	.word	0x00004341
    53dc:	00004fdd 	.word	0x00004fdd
    53e0:	00007db8 	.word	0x00007db8
    53e4:	00005197 	.word	0x00005197

000053e8 <TCP_ParseTCPOptions>:
 *      true - parsing the options filed was successfully
 * @return
 *      false - parsing the options filed was failed.
 */
static bool TCP_ParseTCPOptions(void)
{
    53e8:	b570      	push	{r4, r5, r6, lr}
	uint16_t tcpOptionsSize;
	bool     ret;

	ret = false;
	// Check for the option fields in TCP header
	tcpOptionsSize = (uint16_t)((tcpHeader.dataOffset << 2) - sizeof(tcpHeader_t));
    53ea:	4b37      	ldr	r3, [pc, #220]	; (54c8 <TCP_ParseTCPOptions+0xe0>)
    53ec:	7b1c      	ldrb	r4, [r3, #12]
    53ee:	0924      	lsrs	r4, r4, #4
    53f0:	00a4      	lsls	r4, r4, #2
    53f2:	3c14      	subs	r4, #20
    53f4:	b2a4      	uxth	r4, r4

	if (tcpOptionsSize > 0) {
    53f6:	2c00      	cmp	r4, #0
    53f8:	d062      	beq.n	54c0 <TCP_ParseTCPOptions+0xd8>
		// RFC 1122, page 85, Section 4.2.2.6  Maximum Segment Size Option: RFC-793 Section 3.1
		// more explanations in RFC-6691
		tcpMss = 536;
    53fa:	2286      	movs	r2, #134	; 0x86
    53fc:	0092      	lsls	r2, r2, #2
    53fe:	829a      	strh	r2, [r3, #20]
		// parse the option only for SYN segments
		if (tcpHeader.syn) {
    5400:	7b5b      	ldrb	r3, [r3, #13]
    5402:	079b      	lsls	r3, r3, #30
    5404:	d557      	bpl.n	54b6 <TCP_ParseTCPOptions+0xce>
    5406:	2600      	movs	r6, #0
    5408:	e033      	b.n	5472 <TCP_ParseTCPOptions+0x8a>
			while (tcpOptionsSize--) {
				opt = ETH_Read8();
				switch (opt) {
				case TCP_EOP:
					// End of options.
					if (tcpOptionsSize) {
    540a:	2d00      	cmp	r5, #0
    540c:	d102      	bne.n	5414 <TCP_ParseTCPOptions+0x2c>
			while (tcpOptionsSize--) {
    540e:	002c      	movs	r4, r5
						// dump remaining unused bytes
						ETH_Dump(tcpOptionsSize);
						tcpOptionsSize = 0;
					}
					ret = true;
    5410:	2601      	movs	r6, #1
    5412:	e02e      	b.n	5472 <TCP_ParseTCPOptions+0x8a>
						ETH_Dump(tcpOptionsSize);
    5414:	0028      	movs	r0, r5
    5416:	4b2d      	ldr	r3, [pc, #180]	; (54cc <TCP_ParseTCPOptions+0xe4>)
    5418:	4798      	blx	r3
					ret = true;
    541a:	2601      	movs	r6, #1
						tcpOptionsSize = 0;
    541c:	2400      	movs	r4, #0
    541e:	e028      	b.n	5472 <TCP_ParseTCPOptions+0x8a>
					break;
				case TCP_NOP:
					// NOP option.
					break;
				case TCP_MSS:
					if (tcpOptionsSize >= 3) // at least 3 more bytes
    5420:	2d02      	cmp	r5, #2
    5422:	d802      	bhi.n	542a <TCP_ParseTCPOptions+0x42>
							tcpOptionsSize = 0;
						}
					} else {
						// unexpected error
						tcpOptionsSize = 0;
						ret            = false;
    5424:	2600      	movs	r6, #0
						tcpOptionsSize = 0;
    5426:	2400      	movs	r4, #0
    5428:	e023      	b.n	5472 <TCP_ParseTCPOptions+0x8a>
						opt = ETH_Read8();
    542a:	4b29      	ldr	r3, [pc, #164]	; (54d0 <TCP_ParseTCPOptions+0xe8>)
    542c:	4798      	blx	r3
						if (opt == 0x04) {
    542e:	2804      	cmp	r0, #4
    5430:	d004      	beq.n	543c <TCP_ParseTCPOptions+0x54>
							TCP_SyslogWrite("tcp_parseopt: bad option size length");
    5432:	4828      	ldr	r0, [pc, #160]	; (54d4 <TCP_ParseTCPOptions+0xec>)
    5434:	4b28      	ldr	r3, [pc, #160]	; (54d8 <TCP_ParseTCPOptions+0xf0>)
    5436:	4798      	blx	r3
							tcpOptionsSize = 0;
    5438:	2400      	movs	r4, #0
    543a:	e01a      	b.n	5472 <TCP_ParseTCPOptions+0x8a>
							tcpMss = ETH_Read16(); // value returned in host endianess
    543c:	4b27      	ldr	r3, [pc, #156]	; (54dc <TCP_ParseTCPOptions+0xf4>)
    543e:	4798      	blx	r3
    5440:	4b21      	ldr	r3, [pc, #132]	; (54c8 <TCP_ParseTCPOptions+0xe0>)
    5442:	8298      	strh	r0, [r3, #20]
							tcpOptionsSize = tcpOptionsSize - 3;
    5444:	3c04      	subs	r4, #4
    5446:	b2a4      	uxth	r4, r4
							if (tcpMss > TCP_MAX_SEG_SIZE) {
    5448:	4b25      	ldr	r3, [pc, #148]	; (54e0 <TCP_ParseTCPOptions+0xf8>)
    544a:	4298      	cmp	r0, r3
    544c:	d931      	bls.n	54b2 <TCP_ParseTCPOptions+0xca>
								tcpMss = TCP_MAX_SEG_SIZE;
    544e:	001a      	movs	r2, r3
    5450:	4b1d      	ldr	r3, [pc, #116]	; (54c8 <TCP_ParseTCPOptions+0xe0>)
    5452:	829a      	strh	r2, [r3, #20]
							ret = true;
    5454:	2601      	movs	r6, #1
    5456:	e00c      	b.n	5472 <TCP_ParseTCPOptions+0x8a>
							// All other options have a length field, so that we easily can skip them.
							ETH_Dump(opt);
							tcpOptionsSize = tcpOptionsSize - opt;
							ret            = true;
						} else {
							TCP_SyslogWrite("tcp_parseopt: bad option length");
    5458:	4822      	ldr	r0, [pc, #136]	; (54e4 <TCP_ParseTCPOptions+0xfc>)
    545a:	4b1f      	ldr	r3, [pc, #124]	; (54d8 <TCP_ParseTCPOptions+0xf0>)
    545c:	4798      	blx	r3
							// the options are malformed and we don't process them further.
							tcpOptionsSize = 0;
							ret            = false;
    545e:	2600      	movs	r6, #0
							tcpOptionsSize = 0;
    5460:	2400      	movs	r4, #0
    5462:	e006      	b.n	5472 <TCP_ParseTCPOptions+0x8a>
						}
					} else {
						TCP_SyslogWrite("tcp_parseopt: bad length");
    5464:	4820      	ldr	r0, [pc, #128]	; (54e8 <TCP_ParseTCPOptions+0x100>)
    5466:	4b1c      	ldr	r3, [pc, #112]	; (54d8 <TCP_ParseTCPOptions+0xf0>)
    5468:	4798      	blx	r3
						// If the length field is zero, the options are malformed
						// and we don't process them further.
						tcpOptionsSize = 0;
						ret            = false;
    546a:	2600      	movs	r6, #0
						tcpOptionsSize = 0;
    546c:	2400      	movs	r4, #0
    546e:	e000      	b.n	5472 <TCP_ParseTCPOptions+0x8a>
			while (tcpOptionsSize--) {
    5470:	002c      	movs	r4, r5
    5472:	1e65      	subs	r5, r4, #1
    5474:	b2ad      	uxth	r5, r5
    5476:	2c00      	cmp	r4, #0
    5478:	d023      	beq.n	54c2 <TCP_ParseTCPOptions+0xda>
				opt = ETH_Read8();
    547a:	4b15      	ldr	r3, [pc, #84]	; (54d0 <TCP_ParseTCPOptions+0xe8>)
    547c:	4798      	blx	r3
				switch (opt) {
    547e:	2801      	cmp	r0, #1
    5480:	d0f6      	beq.n	5470 <TCP_ParseTCPOptions+0x88>
    5482:	2800      	cmp	r0, #0
    5484:	d0c1      	beq.n	540a <TCP_ParseTCPOptions+0x22>
    5486:	2802      	cmp	r0, #2
    5488:	d0ca      	beq.n	5420 <TCP_ParseTCPOptions+0x38>
					TCP_SyslogWrite("tcp_parseopt: other");
    548a:	4818      	ldr	r0, [pc, #96]	; (54ec <TCP_ParseTCPOptions+0x104>)
    548c:	4b12      	ldr	r3, [pc, #72]	; (54d8 <TCP_ParseTCPOptions+0xf0>)
    548e:	4798      	blx	r3
					opt = ETH_Read8();
    5490:	4b0f      	ldr	r3, [pc, #60]	; (54d0 <TCP_ParseTCPOptions+0xe8>)
    5492:	4798      	blx	r3
					tcpOptionsSize--;
    5494:	3c02      	subs	r4, #2
    5496:	b2a4      	uxth	r4, r4
					if (opt > 1) // this should be at least 2 to be valid
    5498:	2801      	cmp	r0, #1
    549a:	d9e3      	bls.n	5464 <TCP_ParseTCPOptions+0x7c>
						opt = opt - 2;
    549c:	3802      	subs	r0, #2
						if (opt <= tcpOptionsSize) {
    549e:	b2c5      	uxtb	r5, r0
    54a0:	42ac      	cmp	r4, r5
    54a2:	d3d9      	bcc.n	5458 <TCP_ParseTCPOptions+0x70>
							ETH_Dump(opt);
    54a4:	0028      	movs	r0, r5
    54a6:	4b09      	ldr	r3, [pc, #36]	; (54cc <TCP_ParseTCPOptions+0xe4>)
    54a8:	4798      	blx	r3
							tcpOptionsSize = tcpOptionsSize - opt;
    54aa:	1b64      	subs	r4, r4, r5
    54ac:	b2a4      	uxth	r4, r4
							ret            = true;
    54ae:	2601      	movs	r6, #1
    54b0:	e7df      	b.n	5472 <TCP_ParseTCPOptions+0x8a>
							ret = true;
    54b2:	2601      	movs	r6, #1
    54b4:	e7dd      	b.n	5472 <TCP_ParseTCPOptions+0x8a>
					break;
				}
			}
		} else // jump over the Options from TCP header
		{
			ETH_Dump(tcpOptionsSize);
    54b6:	0020      	movs	r0, r4
    54b8:	4b04      	ldr	r3, [pc, #16]	; (54cc <TCP_ParseTCPOptions+0xe4>)
    54ba:	4798      	blx	r3
			ret = true;
    54bc:	2601      	movs	r6, #1
    54be:	e000      	b.n	54c2 <TCP_ParseTCPOptions+0xda>
		}
	} else {
		ret = true;
    54c0:	2601      	movs	r6, #1
	}

	return ret;
}
    54c2:	0030      	movs	r0, r6
    54c4:	bd70      	pop	{r4, r5, r6, pc}
    54c6:	46c0      	nop			; (mov r8, r8)
    54c8:	20000890 	.word	0x20000890
    54cc:	000042b5 	.word	0x000042b5
    54d0:	00003f21 	.word	0x00003f21
    54d4:	00007dc8 	.word	0x00007dc8
    54d8:	00005197 	.word	0x00005197
    54dc:	00003fa1 	.word	0x00003fa1
    54e0:	000005b4 	.word	0x000005b4
    54e4:	00007e04 	.word	0x00007e04
    54e8:	00007e24 	.word	0x00007e24
    54ec:	00007df0 	.word	0x00007df0

000054f0 <TCP_PayloadSave>:
{
    54f0:	b510      	push	{r4, lr}
	if (currentTCB->rxBufState == RX_BUFF_IN_USE) {
    54f2:	4b11      	ldr	r3, [pc, #68]	; (5538 <TCP_PayloadSave+0x48>)
    54f4:	681b      	ldr	r3, [r3, #0]
    54f6:	222c      	movs	r2, #44	; 0x2c
    54f8:	5c9a      	ldrb	r2, [r3, r2]
    54fa:	2a01      	cmp	r2, #1
    54fc:	d001      	beq.n	5502 <TCP_PayloadSave+0x12>
	bool     ret = false;
    54fe:	2000      	movs	r0, #0
}
    5500:	bd10      	pop	{r4, pc}
		if (currentTCB->localWnd >= len) {
    5502:	8bdc      	ldrh	r4, [r3, #30]
    5504:	4284      	cmp	r4, r0
    5506:	d300      	bcc.n	550a <TCP_PayloadSave+0x1a>
			buffer_size = len;
    5508:	0004      	movs	r4, r0
		ETH_ReadBlock(currentTCB->rxBufferPtr, buffer_size);
    550a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    550c:	0021      	movs	r1, r4
    550e:	4b0b      	ldr	r3, [pc, #44]	; (553c <TCP_PayloadSave+0x4c>)
    5510:	4798      	blx	r3
		currentTCB->rxBufferPtr = currentTCB->rxBufferPtr + buffer_size;
    5512:	4b09      	ldr	r3, [pc, #36]	; (5538 <TCP_PayloadSave+0x48>)
    5514:	6818      	ldr	r0, [r3, #0]
    5516:	6a83      	ldr	r3, [r0, #40]	; 0x28
    5518:	191b      	adds	r3, r3, r4
    551a:	6283      	str	r3, [r0, #40]	; 0x28
		currentTCB->localWnd  = currentTCB->localWnd - buffer_size;
    551c:	8bc3      	ldrh	r3, [r0, #30]
    551e:	1b1b      	subs	r3, r3, r4
    5520:	83c3      	strh	r3, [r0, #30]
		currentTCB->remoteAck = currentTCB->remoteSeqno + buffer_size;
    5522:	68c3      	ldr	r3, [r0, #12]
    5524:	469c      	mov	ip, r3
    5526:	4464      	add	r4, ip
    5528:	6104      	str	r4, [r0, #16]
		currentTCB->flags = TCP_ACK_FLAG;
    552a:	2210      	movs	r2, #16
    552c:	234d      	movs	r3, #77	; 0x4d
    552e:	54c2      	strb	r2, [r0, r3]
		TCP_Snd(currentTCB);
    5530:	4b03      	ldr	r3, [pc, #12]	; (5540 <TCP_PayloadSave+0x50>)
    5532:	4798      	blx	r3
		ret = true;
    5534:	2001      	movs	r0, #1
    5536:	e7e3      	b.n	5500 <TCP_PayloadSave+0x10>
    5538:	20004b5c 	.word	0x20004b5c
    553c:	00004019 	.word	0x00004019
    5540:	00005271 	.word	0x00005271

00005544 <TCP_FiniteStateMachine>:
 *
 * @return
 *      None
 */
static bool TCP_FiniteStateMachine(void)
{
    5544:	b570      	push	{r4, r5, r6, lr}
	uint16_t notAckBytes;
	bool     ret = false;

	tcp_fsm_states_t nextState = currentTCB->fsmState; // default don't change states
    5546:	4bd5      	ldr	r3, [pc, #852]	; (589c <TCP_FiniteStateMachine+0x358>)
    5548:	6818      	ldr	r0, [r3, #0]
    554a:	233b      	movs	r3, #59	; 0x3b
    554c:	5cc4      	ldrb	r4, [r0, r3]
	tcpEvent_t       event     = currentTCB->connectionEvent;
    554e:	3301      	adds	r3, #1
    5550:	5cc2      	ldrb	r2, [r0, r3]

	switch (currentTCB->fsmState) {
    5552:	2c0a      	cmp	r4, #10
    5554:	d900      	bls.n	5558 <TCP_FiniteStateMachine+0x14>
    5556:	e3b3      	b.n	5cc0 <TCP_FiniteStateMachine+0x77c>
    5558:	00a3      	lsls	r3, r4, #2
    555a:	49d1      	ldr	r1, [pc, #836]	; (58a0 <TCP_FiniteStateMachine+0x35c>)
    555c:	58cb      	ldr	r3, [r1, r3]
    555e:	469f      	mov	pc, r3
	case LISTEN:
		switch (event) {
    5560:	2a00      	cmp	r2, #0
    5562:	d029      	beq.n	55b8 <TCP_FiniteStateMachine+0x74>
    5564:	2a03      	cmp	r2, #3
    5566:	d000      	beq.n	556a <TCP_FiniteStateMachine+0x26>
    5568:	e3b3      	b.n	5cd2 <TCP_FiniteStateMachine+0x78e>
		case RCV_SYN:
			TCP_SyslogWrite("LISTEN: rx_syn");
    556a:	48ce      	ldr	r0, [pc, #824]	; (58a4 <TCP_FiniteStateMachine+0x360>)
    556c:	4bce      	ldr	r3, [pc, #824]	; (58a8 <TCP_FiniteStateMachine+0x364>)
    556e:	4798      	blx	r3
			// Start the connection on the TCB

			currentTCB->destIP   = receivedRemoteAddress;
    5570:	4bca      	ldr	r3, [pc, #808]	; (589c <TCP_FiniteStateMachine+0x358>)
    5572:	6818      	ldr	r0, [r3, #0]
    5574:	4bcd      	ldr	r3, [pc, #820]	; (58ac <TCP_FiniteStateMachine+0x368>)
    5576:	699a      	ldr	r2, [r3, #24]
    5578:	6042      	str	r2, [r0, #4]
			currentTCB->destPort = tcpHeader.sourcePort;
    557a:	881a      	ldrh	r2, [r3, #0]
    557c:	8102      	strh	r2, [r0, #8]

			// TO DO modify the start seq no to be "random"
			currentTCB->localLastAck = 0;
    557e:	2200      	movs	r2, #0
    5580:	6182      	str	r2, [r0, #24]

			currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
    5582:	685a      	ldr	r2, [r3, #4]
    5584:	60c2      	str	r2, [r0, #12]
			currentTCB->remoteAck   = currentTCB->remoteSeqno + 1; // ask for next packet
    5586:	3201      	adds	r2, #1
    5588:	6102      	str	r2, [r0, #16]

			// save data from TCP header
			currentTCB->remoteWnd = ntohs(tcpHeader.windowSize);
    558a:	89da      	ldrh	r2, [r3, #14]
    558c:	0a11      	lsrs	r1, r2, #8
    558e:	0212      	lsls	r2, r2, #8
    5590:	430a      	orrs	r2, r1
    5592:	8382      	strh	r2, [r0, #28]
			currentTCB->mss       = tcpMss;
    5594:	8a9b      	ldrh	r3, [r3, #20]
    5596:	8403      	strh	r3, [r0, #32]

			// create and send a SYN+ACK packet
			currentTCB->flags              = TCP_SYN_FLAG | TCP_ACK_FLAG;
    5598:	2212      	movs	r2, #18
    559a:	234d      	movs	r3, #77	; 0x4d
    559c:	54c2      	strb	r2, [r0, r3]
			currentTCB->timeout            = TCP_START_TIMEOUT_VAL;
    559e:	3b4b      	subs	r3, #75	; 0x4b
    55a0:	3236      	adds	r2, #54	; 0x36
    55a2:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutReloadValue = TCP_START_TIMEOUT_VAL;
    55a4:	3202      	adds	r2, #2
    55a6:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutsCount      = TCP_MAX_SYN_RETRIES;
    55a8:	3a47      	subs	r2, #71	; 0x47
    55aa:	334a      	adds	r3, #74	; 0x4a
    55ac:	54c2      	strb	r2, [r0, r3]

			TCP_Snd(currentTCB);
    55ae:	4bc0      	ldr	r3, [pc, #768]	; (58b0 <TCP_FiniteStateMachine+0x36c>)
    55b0:	4798      	blx	r3
			nextState = SYN_RECEIVED;
    55b2:	2403      	movs	r4, #3
	bool     ret = false;
    55b4:	2000      	movs	r0, #0
			break;
    55b6:	e384      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
		case CLOSE:
			TCP_SyslogWrite("LISTEN: close");
    55b8:	48be      	ldr	r0, [pc, #760]	; (58b4 <TCP_FiniteStateMachine+0x370>)
    55ba:	4bbb      	ldr	r3, [pc, #748]	; (58a8 <TCP_FiniteStateMachine+0x364>)
    55bc:	4798      	blx	r3
			nextState = CLOSE;
			TCB_Reset(currentTCB);
    55be:	4bb7      	ldr	r3, [pc, #732]	; (589c <TCP_FiniteStateMachine+0x358>)
    55c0:	6818      	ldr	r0, [r3, #0]
    55c2:	4bbd      	ldr	r3, [pc, #756]	; (58b8 <TCP_FiniteStateMachine+0x374>)
    55c4:	4798      	blx	r3
			nextState = CLOSE;
    55c6:	2400      	movs	r4, #0
	bool     ret = false;
    55c8:	2000      	movs	r0, #0
			break;
    55ca:	e37a      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
			// for all other cases the packet is invalid and will be discarded
			break;
		}
		break;
	case SYN_SENT:
		switch (event) {
    55cc:	2a0c      	cmp	r2, #12
    55ce:	d900      	bls.n	55d2 <TCP_FiniteStateMachine+0x8e>
    55d0:	e381      	b.n	5cd6 <TCP_FiniteStateMachine+0x792>
    55d2:	0092      	lsls	r2, r2, #2
    55d4:	4bb9      	ldr	r3, [pc, #740]	; (58bc <TCP_FiniteStateMachine+0x378>)
    55d6:	589b      	ldr	r3, [r3, r2]
    55d8:	469f      	mov	pc, r3
		case RCV_SYN:
			TCP_SyslogWrite("SYN_SENT: rx_syn");
    55da:	48b9      	ldr	r0, [pc, #740]	; (58c0 <TCP_FiniteStateMachine+0x37c>)
    55dc:	4bb2      	ldr	r3, [pc, #712]	; (58a8 <TCP_FiniteStateMachine+0x364>)
    55de:	4798      	blx	r3
			// Simultaneous open
			currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
    55e0:	4bae      	ldr	r3, [pc, #696]	; (589c <TCP_FiniteStateMachine+0x358>)
    55e2:	6818      	ldr	r0, [r3, #0]
    55e4:	4ab1      	ldr	r2, [pc, #708]	; (58ac <TCP_FiniteStateMachine+0x368>)
    55e6:	6853      	ldr	r3, [r2, #4]
    55e8:	60c3      	str	r3, [r0, #12]
			currentTCB->remoteAck   = tcpHeader.sequenceNumber + 1; // ask for next packet
    55ea:	3301      	adds	r3, #1
    55ec:	6103      	str	r3, [r0, #16]

			// save data from TCP header
			currentTCB->remoteWnd = ntohs(tcpHeader.windowSize);
    55ee:	89d3      	ldrh	r3, [r2, #14]
    55f0:	0a19      	lsrs	r1, r3, #8
    55f2:	021b      	lsls	r3, r3, #8
    55f4:	430b      	orrs	r3, r1
    55f6:	8383      	strh	r3, [r0, #28]
			currentTCB->mss       = tcpMss;
    55f8:	8a93      	ldrh	r3, [r2, #20]
    55fa:	8403      	strh	r3, [r0, #32]

			// create and send a ACK packet
			currentTCB->timeout            = TCP_START_TIMEOUT_VAL;
    55fc:	2302      	movs	r3, #2
    55fe:	2248      	movs	r2, #72	; 0x48
    5600:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutReloadValue = TCP_START_TIMEOUT_VAL;
    5602:	3202      	adds	r2, #2
    5604:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutsCount      = TCP_MAX_SYN_RETRIES;
    5606:	3a47      	subs	r2, #71	; 0x47
    5608:	334a      	adds	r3, #74	; 0x4a
    560a:	54c2      	strb	r2, [r0, r3]
			currentTCB->flags              = TCP_SYN_FLAG | TCP_ACK_FLAG;
    560c:	320f      	adds	r2, #15
    560e:	3301      	adds	r3, #1
    5610:	54c2      	strb	r2, [r0, r3]

			TCP_Snd(currentTCB);
    5612:	4ba7      	ldr	r3, [pc, #668]	; (58b0 <TCP_FiniteStateMachine+0x36c>)
    5614:	4798      	blx	r3

			// Go to SYN_RECEIVED and waiting for the ack
			nextState = SYN_RECEIVED;
    5616:	2403      	movs	r4, #3
	bool     ret = false;
    5618:	2000      	movs	r0, #0
			break;
    561a:	e352      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
		case RCV_SYNACK:
			TCP_SyslogWrite("SYN_SENT: rx_synack");
    561c:	48a9      	ldr	r0, [pc, #676]	; (58c4 <TCP_FiniteStateMachine+0x380>)
    561e:	4ba2      	ldr	r3, [pc, #648]	; (58a8 <TCP_FiniteStateMachine+0x364>)
    5620:	4798      	blx	r3

			currentTCB->timeout = 0;
    5622:	4b9e      	ldr	r3, [pc, #632]	; (589c <TCP_FiniteStateMachine+0x358>)
    5624:	6818      	ldr	r0, [r3, #0]
    5626:	2200      	movs	r2, #0
    5628:	2348      	movs	r3, #72	; 0x48
    562a:	52c2      	strh	r2, [r0, r3]

			if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber) {
    562c:	6943      	ldr	r3, [r0, #20]
    562e:	3301      	adds	r3, #1
    5630:	4a9e      	ldr	r2, [pc, #632]	; (58ac <TCP_FiniteStateMachine+0x368>)
    5632:	6892      	ldr	r2, [r2, #8]
    5634:	4293      	cmp	r3, r2
    5636:	d00f      	beq.n	5658 <TCP_FiniteStateMachine+0x114>
					nextState               = ESTABLISHED;
					currentTCB->socketState = SOCKET_CONNECTED;
				}
			} else {
				// send reset
				currentTCB->localSeqno = tcpHeader.ackNumber;
    5638:	6142      	str	r2, [r0, #20]
				currentTCB->flags      = TCP_RST_FLAG | TCP_ACK_FLAG;
    563a:	2214      	movs	r2, #20
    563c:	234d      	movs	r3, #77	; 0x4d
    563e:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    5640:	4b9b      	ldr	r3, [pc, #620]	; (58b0 <TCP_FiniteStateMachine+0x36c>)
    5642:	4798      	blx	r3
    5644:	2800      	cmp	r0, #0
    5646:	d100      	bne.n	564a <TCP_FiniteStateMachine+0x106>
    5648:	e33b      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
					nextState = CLOSE;
					TCB_Reset(currentTCB);
    564a:	4b94      	ldr	r3, [pc, #592]	; (589c <TCP_FiniteStateMachine+0x358>)
    564c:	6818      	ldr	r0, [r3, #0]
    564e:	4b9a      	ldr	r3, [pc, #616]	; (58b8 <TCP_FiniteStateMachine+0x374>)
    5650:	4798      	blx	r3
					nextState = CLOSE;
    5652:	2400      	movs	r4, #0
	bool     ret = false;
    5654:	2000      	movs	r0, #0
    5656:	e334      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
				currentTCB->localSeqno = currentTCB->localSeqno + 1;
    5658:	6143      	str	r3, [r0, #20]
				currentTCB->flags      = TCP_ACK_FLAG;
    565a:	2210      	movs	r2, #16
    565c:	234d      	movs	r3, #77	; 0x4d
    565e:	54c2      	strb	r2, [r0, r3]
				currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
    5660:	4a92      	ldr	r2, [pc, #584]	; (58ac <TCP_FiniteStateMachine+0x368>)
    5662:	6853      	ldr	r3, [r2, #4]
    5664:	60c3      	str	r3, [r0, #12]
				currentTCB->remoteAck = tcpHeader.sequenceNumber + 1;
    5666:	3301      	adds	r3, #1
    5668:	6103      	str	r3, [r0, #16]
				currentTCB->remoteWnd = ntohs(tcpHeader.windowSize);
    566a:	89d3      	ldrh	r3, [r2, #14]
    566c:	0a19      	lsrs	r1, r3, #8
    566e:	021b      	lsls	r3, r3, #8
    5670:	430b      	orrs	r3, r1
    5672:	8383      	strh	r3, [r0, #28]
				currentTCB->mss       = tcpMss;
    5674:	8a93      	ldrh	r3, [r2, #20]
    5676:	8403      	strh	r3, [r0, #32]
				if (TCP_Snd(currentTCB)) {
    5678:	4b8d      	ldr	r3, [pc, #564]	; (58b0 <TCP_FiniteStateMachine+0x36c>)
    567a:	4798      	blx	r3
    567c:	2800      	cmp	r0, #0
    567e:	d100      	bne.n	5682 <TCP_FiniteStateMachine+0x13e>
    5680:	e31f      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
					currentTCB->socketState = SOCKET_CONNECTED;
    5682:	4b86      	ldr	r3, [pc, #536]	; (589c <TCP_FiniteStateMachine+0x358>)
    5684:	681a      	ldr	r2, [r3, #0]
    5686:	2103      	movs	r1, #3
    5688:	234e      	movs	r3, #78	; 0x4e
    568a:	54d1      	strb	r1, [r2, r3]
					nextState               = ESTABLISHED;
    568c:	2404      	movs	r4, #4
	bool     ret = false;
    568e:	2000      	movs	r0, #0
    5690:	e317      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
				}
			}
			break;
		case RCV_ACK:
			TCP_SyslogWrite("SYN_SENT: rx_ack");
    5692:	488d      	ldr	r0, [pc, #564]	; (58c8 <TCP_FiniteStateMachine+0x384>)
    5694:	4b84      	ldr	r3, [pc, #528]	; (58a8 <TCP_FiniteStateMachine+0x364>)
    5696:	4798      	blx	r3

			currentTCB->timeout = 0;
    5698:	4b80      	ldr	r3, [pc, #512]	; (589c <TCP_FiniteStateMachine+0x358>)
    569a:	6818      	ldr	r0, [r3, #0]
    569c:	2200      	movs	r2, #0
    569e:	2348      	movs	r3, #72	; 0x48
    56a0:	52c2      	strh	r2, [r0, r3]

			if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber) {
    56a2:	6943      	ldr	r3, [r0, #20]
    56a4:	3301      	adds	r3, #1
    56a6:	4a81      	ldr	r2, [pc, #516]	; (58ac <TCP_FiniteStateMachine+0x368>)
    56a8:	6892      	ldr	r2, [r2, #8]
    56aa:	4293      	cmp	r3, r2
    56ac:	d00f      	beq.n	56ce <TCP_FiniteStateMachine+0x18a>

				nextState               = ESTABLISHED;
				currentTCB->socketState = SOCKET_CONNECTED;
			} else {
				// send reset
				currentTCB->localSeqno = tcpHeader.ackNumber;
    56ae:	6142      	str	r2, [r0, #20]
				currentTCB->flags      = TCP_RST_FLAG;
    56b0:	2204      	movs	r2, #4
    56b2:	234d      	movs	r3, #77	; 0x4d
    56b4:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    56b6:	4b7e      	ldr	r3, [pc, #504]	; (58b0 <TCP_FiniteStateMachine+0x36c>)
    56b8:	4798      	blx	r3
    56ba:	2800      	cmp	r0, #0
    56bc:	d100      	bne.n	56c0 <TCP_FiniteStateMachine+0x17c>
    56be:	e300      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
					nextState = CLOSE;
					TCB_Reset(currentTCB);
    56c0:	4b76      	ldr	r3, [pc, #472]	; (589c <TCP_FiniteStateMachine+0x358>)
    56c2:	6818      	ldr	r0, [r3, #0]
    56c4:	4b7c      	ldr	r3, [pc, #496]	; (58b8 <TCP_FiniteStateMachine+0x374>)
    56c6:	4798      	blx	r3
					nextState = CLOSE;
    56c8:	2400      	movs	r4, #0
	bool     ret = false;
    56ca:	2000      	movs	r0, #0
    56cc:	e2f9      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
				currentTCB->localSeqno = currentTCB->localSeqno + 1;
    56ce:	6143      	str	r3, [r0, #20]
				currentTCB->flags      = TCP_ACK_FLAG;
    56d0:	2210      	movs	r2, #16
    56d2:	234d      	movs	r3, #77	; 0x4d
    56d4:	54c2      	strb	r2, [r0, r3]
				currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
    56d6:	4a75      	ldr	r2, [pc, #468]	; (58ac <TCP_FiniteStateMachine+0x368>)
    56d8:	6853      	ldr	r3, [r2, #4]
    56da:	60c3      	str	r3, [r0, #12]
				currentTCB->remoteAck   = tcpHeader.sequenceNumber + 1; // ask for next packet
    56dc:	3301      	adds	r3, #1
    56de:	6103      	str	r3, [r0, #16]
				currentTCB->remoteWnd = ntohs(tcpHeader.windowSize);
    56e0:	89d3      	ldrh	r3, [r2, #14]
    56e2:	0a19      	lsrs	r1, r3, #8
    56e4:	021b      	lsls	r3, r3, #8
    56e6:	430b      	orrs	r3, r1
    56e8:	8383      	strh	r3, [r0, #28]
				currentTCB->mss       = tcpMss;
    56ea:	8a93      	ldrh	r3, [r2, #20]
    56ec:	8403      	strh	r3, [r0, #32]
				currentTCB->socketState = SOCKET_CONNECTED;
    56ee:	2203      	movs	r2, #3
    56f0:	234e      	movs	r3, #78	; 0x4e
    56f2:	54c2      	strb	r2, [r0, r3]
				nextState               = ESTABLISHED;
    56f4:	2404      	movs	r4, #4
	bool     ret = false;
    56f6:	2000      	movs	r0, #0
    56f8:	e2e3      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
				}
			}
			break;
		case CLOSE:
			TCP_SyslogWrite("SYN_SENT: close");
    56fa:	4874      	ldr	r0, [pc, #464]	; (58cc <TCP_FiniteStateMachine+0x388>)
    56fc:	4b6a      	ldr	r3, [pc, #424]	; (58a8 <TCP_FiniteStateMachine+0x364>)
    56fe:	4798      	blx	r3
			// go to CLOSED state
			nextState = CLOSED;
			TCB_Reset(currentTCB);
    5700:	4b66      	ldr	r3, [pc, #408]	; (589c <TCP_FiniteStateMachine+0x358>)
    5702:	6818      	ldr	r0, [r3, #0]
    5704:	4b6c      	ldr	r3, [pc, #432]	; (58b8 <TCP_FiniteStateMachine+0x374>)
    5706:	4798      	blx	r3
			nextState = CLOSED;
    5708:	2400      	movs	r4, #0
	bool     ret = false;
    570a:	2000      	movs	r0, #0
			break;
    570c:	e2d9      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
		case TIMEOUT:
			TCP_SyslogWrite("SYN_SENT: timeout");
    570e:	4870      	ldr	r0, [pc, #448]	; (58d0 <TCP_FiniteStateMachine+0x38c>)
    5710:	4b65      	ldr	r3, [pc, #404]	; (58a8 <TCP_FiniteStateMachine+0x364>)
    5712:	4798      	blx	r3
			// looks like the the packet was lost
			// check inside the packet to see where to jump next
			if (currentTCB->timeoutsCount) {
    5714:	4b61      	ldr	r3, [pc, #388]	; (589c <TCP_FiniteStateMachine+0x358>)
    5716:	6818      	ldr	r0, [r3, #0]
    5718:	234c      	movs	r3, #76	; 0x4c
    571a:	5cc3      	ldrb	r3, [r0, r3]
    571c:	2b00      	cmp	r3, #0
    571e:	d018      	beq.n	5752 <TCP_FiniteStateMachine+0x20e>
				if (TCP_Snd(currentTCB)) {
    5720:	4b63      	ldr	r3, [pc, #396]	; (58b0 <TCP_FiniteStateMachine+0x36c>)
    5722:	4798      	blx	r3
    5724:	2800      	cmp	r0, #0
    5726:	d100      	bne.n	572a <TCP_FiniteStateMachine+0x1e6>
    5728:	e2cb      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
					if (currentTCB->flags & TCP_RST_FLAG) {
    572a:	4b5c      	ldr	r3, [pc, #368]	; (589c <TCP_FiniteStateMachine+0x358>)
    572c:	6818      	ldr	r0, [r3, #0]
    572e:	234d      	movs	r3, #77	; 0x4d
    5730:	5cc3      	ldrb	r3, [r0, r3]
    5732:	075a      	lsls	r2, r3, #29
    5734:	d408      	bmi.n	5748 <TCP_FiniteStateMachine+0x204>
						nextState = CLOSE;
						TCB_Reset(currentTCB);
					} else if (currentTCB->flags & TCP_ACK_FLAG) {
    5736:	06db      	lsls	r3, r3, #27
    5738:	d400      	bmi.n	573c <TCP_FiniteStateMachine+0x1f8>
    573a:	e2ce      	b.n	5cda <TCP_FiniteStateMachine+0x796>
						nextState               = ESTABLISHED;
						currentTCB->socketState = SOCKET_CONNECTED;
    573c:	2203      	movs	r2, #3
    573e:	234e      	movs	r3, #78	; 0x4e
    5740:	54c2      	strb	r2, [r0, r3]
						nextState               = ESTABLISHED;
    5742:	2404      	movs	r4, #4
	bool     ret = false;
    5744:	2000      	movs	r0, #0
    5746:	e2bc      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
						TCB_Reset(currentTCB);
    5748:	4b5b      	ldr	r3, [pc, #364]	; (58b8 <TCP_FiniteStateMachine+0x374>)
    574a:	4798      	blx	r3
						nextState = CLOSE;
    574c:	2400      	movs	r4, #0
	bool     ret = false;
    574e:	0020      	movs	r0, r4
    5750:	e2b7      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
					}
				}
			} else {
				// just reset the connection if there is no reply
				currentTCB->flags = TCP_RST_FLAG;
    5752:	2204      	movs	r2, #4
    5754:	234d      	movs	r3, #77	; 0x4d
    5756:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    5758:	4b55      	ldr	r3, [pc, #340]	; (58b0 <TCP_FiniteStateMachine+0x36c>)
    575a:	4798      	blx	r3
    575c:	2800      	cmp	r0, #0
    575e:	d100      	bne.n	5762 <TCP_FiniteStateMachine+0x21e>
    5760:	e2af      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
					nextState = CLOSE;
					TCB_Reset(currentTCB);
    5762:	4b4e      	ldr	r3, [pc, #312]	; (589c <TCP_FiniteStateMachine+0x358>)
    5764:	6818      	ldr	r0, [r3, #0]
    5766:	4b54      	ldr	r3, [pc, #336]	; (58b8 <TCP_FiniteStateMachine+0x374>)
    5768:	4798      	blx	r3
					nextState = CLOSE;
    576a:	2400      	movs	r4, #0
	bool     ret = false;
    576c:	2000      	movs	r0, #0
    576e:	e2a8      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
			break;
		case RCV_RST:
		case RCV_RSTACK:
			// port seems not to be opened
			nextState = CLOSED;
			TCB_Reset(currentTCB);
    5770:	4b51      	ldr	r3, [pc, #324]	; (58b8 <TCP_FiniteStateMachine+0x374>)
    5772:	4798      	blx	r3
			nextState = CLOSED;
    5774:	2400      	movs	r4, #0
	bool     ret = false;
    5776:	2000      	movs	r0, #0
			break;
    5778:	e2a3      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
			// for all other cases the packet is invalid and will be discarded
			break;
		}
		break;
	case SYN_RECEIVED:
		switch (event) {
    577a:	2a0c      	cmp	r2, #12
    577c:	d900      	bls.n	5780 <TCP_FiniteStateMachine+0x23c>
    577e:	e2ae      	b.n	5cde <TCP_FiniteStateMachine+0x79a>
    5780:	0092      	lsls	r2, r2, #2
    5782:	4b54      	ldr	r3, [pc, #336]	; (58d4 <TCP_FiniteStateMachine+0x390>)
    5784:	589b      	ldr	r3, [r3, r2]
    5786:	469f      	mov	pc, r3
		case RCV_SYNACK:
			TCP_SyslogWrite("SYN_RECEIVED: rx_synack");
    5788:	4853      	ldr	r0, [pc, #332]	; (58d8 <TCP_FiniteStateMachine+0x394>)
    578a:	4b47      	ldr	r3, [pc, #284]	; (58a8 <TCP_FiniteStateMachine+0x364>)
    578c:	4798      	blx	r3
			if (currentTCB->localPort == tcpHeader.destPort) {
    578e:	4b43      	ldr	r3, [pc, #268]	; (589c <TCP_FiniteStateMachine+0x358>)
    5790:	681b      	ldr	r3, [r3, #0]
    5792:	8819      	ldrh	r1, [r3, #0]
    5794:	4a45      	ldr	r2, [pc, #276]	; (58ac <TCP_FiniteStateMachine+0x368>)
    5796:	8852      	ldrh	r2, [r2, #2]
    5798:	4291      	cmp	r1, r2
    579a:	d001      	beq.n	57a0 <TCP_FiniteStateMachine+0x25c>
	bool     ret = false;
    579c:	2000      	movs	r0, #0
    579e:	e290      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
				// stop the current timeout
				currentTCB->timeout = 0;
    57a0:	2100      	movs	r1, #0
    57a2:	2248      	movs	r2, #72	; 0x48
    57a4:	5299      	strh	r1, [r3, r2]

				// This is part of simultaneous open
				// TO DO: Check if the received packet is the one that we expect
				if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPort == tcpHeader.sourcePort))
    57a6:	4a41      	ldr	r2, [pc, #260]	; (58ac <TCP_FiniteStateMachine+0x368>)
    57a8:	6992      	ldr	r2, [r2, #24]
    57aa:	6859      	ldr	r1, [r3, #4]
    57ac:	4291      	cmp	r1, r2
    57ae:	d004      	beq.n	57ba <TCP_FiniteStateMachine+0x276>
					if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber)

						nextState = ESTABLISHED;
				currentTCB->socketState = SOCKET_CONNECTED;
    57b0:	2103      	movs	r1, #3
    57b2:	224e      	movs	r2, #78	; 0x4e
    57b4:	5499      	strb	r1, [r3, r2]
	bool     ret = false;
    57b6:	2000      	movs	r0, #0
    57b8:	e283      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
				if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPort == tcpHeader.sourcePort))
    57ba:	8919      	ldrh	r1, [r3, #8]
    57bc:	4a3b      	ldr	r2, [pc, #236]	; (58ac <TCP_FiniteStateMachine+0x368>)
    57be:	8812      	ldrh	r2, [r2, #0]
    57c0:	4291      	cmp	r1, r2
    57c2:	d1f5      	bne.n	57b0 <TCP_FiniteStateMachine+0x26c>
					if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber)
    57c4:	695a      	ldr	r2, [r3, #20]
    57c6:	3201      	adds	r2, #1
    57c8:	4938      	ldr	r1, [pc, #224]	; (58ac <TCP_FiniteStateMachine+0x368>)
    57ca:	6889      	ldr	r1, [r1, #8]
    57cc:	428a      	cmp	r2, r1
    57ce:	d1ef      	bne.n	57b0 <TCP_FiniteStateMachine+0x26c>
						nextState = ESTABLISHED;
    57d0:	2404      	movs	r4, #4
    57d2:	e7ed      	b.n	57b0 <TCP_FiniteStateMachine+0x26c>
			}
			break;
		case RCV_ACK:
			TCP_SyslogWrite("SYN_RECEIVED: rx_ack");
    57d4:	4841      	ldr	r0, [pc, #260]	; (58dc <TCP_FiniteStateMachine+0x398>)
    57d6:	4b34      	ldr	r3, [pc, #208]	; (58a8 <TCP_FiniteStateMachine+0x364>)
    57d8:	4798      	blx	r3

			// check if the packet is for the curent TCB
			// we need to check the remote IP adress and remote port
			if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPort == tcpHeader.sourcePort)) {
    57da:	4b30      	ldr	r3, [pc, #192]	; (589c <TCP_FiniteStateMachine+0x358>)
    57dc:	681b      	ldr	r3, [r3, #0]
    57de:	4a33      	ldr	r2, [pc, #204]	; (58ac <TCP_FiniteStateMachine+0x368>)
    57e0:	6992      	ldr	r2, [r2, #24]
    57e2:	6859      	ldr	r1, [r3, #4]
    57e4:	4291      	cmp	r1, r2
    57e6:	d001      	beq.n	57ec <TCP_FiniteStateMachine+0x2a8>
	bool     ret = false;
    57e8:	2000      	movs	r0, #0
    57ea:	e26a      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
			if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPort == tcpHeader.sourcePort)) {
    57ec:	8919      	ldrh	r1, [r3, #8]
    57ee:	4a2f      	ldr	r2, [pc, #188]	; (58ac <TCP_FiniteStateMachine+0x368>)
    57f0:	8812      	ldrh	r2, [r2, #0]
    57f2:	4291      	cmp	r1, r2
    57f4:	d001      	beq.n	57fa <TCP_FiniteStateMachine+0x2b6>
	bool     ret = false;
    57f6:	2000      	movs	r0, #0
    57f8:	e263      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
				// check the sequence numbers
				// is it the packet that I've ask for?
				if (currentTCB->remoteAck == tcpHeader.sequenceNumber) {
    57fa:	4a2c      	ldr	r2, [pc, #176]	; (58ac <TCP_FiniteStateMachine+0x368>)
    57fc:	6852      	ldr	r2, [r2, #4]
    57fe:	6919      	ldr	r1, [r3, #16]
    5800:	4291      	cmp	r1, r2
    5802:	d001      	beq.n	5808 <TCP_FiniteStateMachine+0x2c4>
	bool     ret = false;
    5804:	2000      	movs	r0, #0
    5806:	e25c      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
					// is ACK OK?
					if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber) {
    5808:	695a      	ldr	r2, [r3, #20]
    580a:	3201      	adds	r2, #1
    580c:	4927      	ldr	r1, [pc, #156]	; (58ac <TCP_FiniteStateMachine+0x368>)
    580e:	6889      	ldr	r1, [r1, #8]
    5810:	428a      	cmp	r2, r1
    5812:	d001      	beq.n	5818 <TCP_FiniteStateMachine+0x2d4>
	bool     ret = false;
    5814:	2000      	movs	r0, #0
    5816:	e254      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
						currentTCB->localSeqno = currentTCB->localSeqno + 1;
    5818:	615a      	str	r2, [r3, #20]
						// stop the current timeout
						currentTCB->timeout = 0;
    581a:	2000      	movs	r0, #0
    581c:	2248      	movs	r2, #72	; 0x48
    581e:	5298      	strh	r0, [r3, r2]

						nextState               = ESTABLISHED;
						currentTCB->socketState = SOCKET_CONNECTED;
    5820:	2103      	movs	r1, #3
    5822:	3206      	adds	r2, #6
    5824:	5499      	strb	r1, [r3, r2]
						nextState               = ESTABLISHED;
    5826:	2404      	movs	r4, #4
    5828:	e24b      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
					}
				}
			}
			break;
		case CLOSE:
			TCP_SyslogWrite("SYN_RECEIVED: close");
    582a:	482d      	ldr	r0, [pc, #180]	; (58e0 <TCP_FiniteStateMachine+0x39c>)
    582c:	4b1e      	ldr	r3, [pc, #120]	; (58a8 <TCP_FiniteStateMachine+0x364>)
    582e:	4798      	blx	r3
			// stop the current timeout
			currentTCB->timeout = 0;
    5830:	4b1a      	ldr	r3, [pc, #104]	; (589c <TCP_FiniteStateMachine+0x358>)
    5832:	6818      	ldr	r0, [r3, #0]
			// Need to send FIN and go to the FIN_WAIT_1
			currentTCB->flags              = TCP_FIN_FLAG;
    5834:	2201      	movs	r2, #1
    5836:	234d      	movs	r3, #77	; 0x4d
    5838:	54c2      	strb	r2, [r0, r3]
			currentTCB->timeout            = TCP_START_TIMEOUT_VAL;
    583a:	3b4b      	subs	r3, #75	; 0x4b
    583c:	3247      	adds	r2, #71	; 0x47
    583e:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutReloadValue = TCP_START_TIMEOUT_VAL;
    5840:	3202      	adds	r2, #2
    5842:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutsCount      = TCP_MAX_RETRIES;
    5844:	3a45      	subs	r2, #69	; 0x45
    5846:	334a      	adds	r3, #74	; 0x4a
    5848:	54c2      	strb	r2, [r0, r3]

			nextState = FIN_WAIT_1;
			TCP_Snd(currentTCB);
    584a:	4b19      	ldr	r3, [pc, #100]	; (58b0 <TCP_FiniteStateMachine+0x36c>)
    584c:	4798      	blx	r3
			nextState = FIN_WAIT_1;
    584e:	2405      	movs	r4, #5
	bool     ret = false;
    5850:	2000      	movs	r0, #0
			break;
    5852:	e236      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
		case RCV_RSTACK:
		case RCV_RST:
			// Reset the connection
			TCP_SyslogWrite("SYN_RECEIVED:  rx_rst");
    5854:	4823      	ldr	r0, [pc, #140]	; (58e4 <TCP_FiniteStateMachine+0x3a0>)
    5856:	4b14      	ldr	r3, [pc, #80]	; (58a8 <TCP_FiniteStateMachine+0x364>)
    5858:	4798      	blx	r3
			// check if the local port match; else drop the pachet
			if (currentTCB->localPort == tcpHeader.destPort) {
    585a:	4b10      	ldr	r3, [pc, #64]	; (589c <TCP_FiniteStateMachine+0x358>)
    585c:	681b      	ldr	r3, [r3, #0]
    585e:	8819      	ldrh	r1, [r3, #0]
    5860:	4a12      	ldr	r2, [pc, #72]	; (58ac <TCP_FiniteStateMachine+0x368>)
    5862:	8852      	ldrh	r2, [r2, #2]
    5864:	4291      	cmp	r1, r2
    5866:	d001      	beq.n	586c <TCP_FiniteStateMachine+0x328>
	bool     ret = false;
    5868:	2000      	movs	r0, #0
    586a:	e22a      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
				if (currentTCB->remoteAck == tcpHeader.sequenceNumber) {
    586c:	691a      	ldr	r2, [r3, #16]
    586e:	4b0f      	ldr	r3, [pc, #60]	; (58ac <TCP_FiniteStateMachine+0x368>)
    5870:	685b      	ldr	r3, [r3, #4]
    5872:	429a      	cmp	r2, r3
    5874:	d001      	beq.n	587a <TCP_FiniteStateMachine+0x336>
	bool     ret = false;
    5876:	2000      	movs	r0, #0
    5878:	e223      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
					TCP_SyslogWrite("rst seq OK");
    587a:	481b      	ldr	r0, [pc, #108]	; (58e8 <TCP_FiniteStateMachine+0x3a4>)
    587c:	4b0a      	ldr	r3, [pc, #40]	; (58a8 <TCP_FiniteStateMachine+0x364>)
    587e:	4798      	blx	r3
					currentTCB->destIP       = 0;
    5880:	4b06      	ldr	r3, [pc, #24]	; (589c <TCP_FiniteStateMachine+0x358>)
    5882:	681b      	ldr	r3, [r3, #0]
    5884:	2000      	movs	r0, #0
    5886:	6058      	str	r0, [r3, #4]
					currentTCB->destPort     = 0;
    5888:	8118      	strh	r0, [r3, #8]
					currentTCB->localSeqno   = 0;
    588a:	6158      	str	r0, [r3, #20]
					currentTCB->localLastAck = 0;
    588c:	6198      	str	r0, [r3, #24]
					currentTCB->remoteSeqno  = 0;
    588e:	60d8      	str	r0, [r3, #12]
					currentTCB->remoteAck    = 0;
    5890:	6118      	str	r0, [r3, #16]
					currentTCB->remoteWnd    = 0;
    5892:	8398      	strh	r0, [r3, #28]
					currentTCB->mss          = 0;
    5894:	8418      	strh	r0, [r3, #32]

					nextState = LISTEN;
    5896:	2401      	movs	r4, #1
    5898:	e213      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
    589a:	46c0      	nop			; (mov r8, r8)
    589c:	20004b5c 	.word	0x20004b5c
    58a0:	00007cf0 	.word	0x00007cf0
    58a4:	00007e40 	.word	0x00007e40
    58a8:	00005197 	.word	0x00005197
    58ac:	20000890 	.word	0x20000890
    58b0:	00005271 	.word	0x00005271
    58b4:	00007e50 	.word	0x00007e50
    58b8:	00005205 	.word	0x00005205
    58bc:	00007d1c 	.word	0x00007d1c
    58c0:	00007e60 	.word	0x00007e60
    58c4:	00007e74 	.word	0x00007e74
    58c8:	00007e88 	.word	0x00007e88
    58cc:	00007e9c 	.word	0x00007e9c
    58d0:	00007eac 	.word	0x00007eac
    58d4:	00007d50 	.word	0x00007d50
    58d8:	00007ec0 	.word	0x00007ec0
    58dc:	00007ed8 	.word	0x00007ed8
    58e0:	00007ef0 	.word	0x00007ef0
    58e4:	00007f04 	.word	0x00007f04
    58e8:	00007f1c 	.word	0x00007f1c
				}
			}
			break;
		case TIMEOUT:
			TCP_SyslogWrite("SYN_RECEIVED:  timeout");
    58ec:	48cb      	ldr	r0, [pc, #812]	; (5c1c <TCP_FiniteStateMachine+0x6d8>)
    58ee:	4bcc      	ldr	r3, [pc, #816]	; (5c20 <TCP_FiniteStateMachine+0x6dc>)
    58f0:	4798      	blx	r3
			if (currentTCB->timeoutsCount) {
    58f2:	4bcc      	ldr	r3, [pc, #816]	; (5c24 <TCP_FiniteStateMachine+0x6e0>)
    58f4:	6818      	ldr	r0, [r3, #0]
    58f6:	234c      	movs	r3, #76	; 0x4c
    58f8:	5cc3      	ldrb	r3, [r0, r3]
    58fa:	2b00      	cmp	r3, #0
    58fc:	d115      	bne.n	592a <TCP_FiniteStateMachine+0x3e6>
				TCP_Snd(currentTCB);
			} else {
				// reseting the connection if there is no reply
				currentTCB->flags = TCP_RST_FLAG;
    58fe:	2204      	movs	r2, #4
    5900:	234d      	movs	r3, #77	; 0x4d
    5902:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    5904:	4bc8      	ldr	r3, [pc, #800]	; (5c28 <TCP_FiniteStateMachine+0x6e4>)
    5906:	4798      	blx	r3
    5908:	2800      	cmp	r0, #0
    590a:	d100      	bne.n	590e <TCP_FiniteStateMachine+0x3ca>
    590c:	e1d9      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
					currentTCB->destIP       = 0;
    590e:	4bc5      	ldr	r3, [pc, #788]	; (5c24 <TCP_FiniteStateMachine+0x6e0>)
    5910:	681b      	ldr	r3, [r3, #0]
    5912:	2200      	movs	r2, #0
    5914:	605a      	str	r2, [r3, #4]
					currentTCB->destPort     = 0;
    5916:	811a      	strh	r2, [r3, #8]
					currentTCB->localSeqno   = 0;
    5918:	615a      	str	r2, [r3, #20]
					currentTCB->localLastAck = 0;
    591a:	619a      	str	r2, [r3, #24]
					currentTCB->remoteSeqno  = 0;
    591c:	60da      	str	r2, [r3, #12]
					currentTCB->remoteAck    = 0;
    591e:	611a      	str	r2, [r3, #16]
					currentTCB->remoteWnd    = 0;
    5920:	839a      	strh	r2, [r3, #28]
					currentTCB->mss          = 0;
    5922:	841a      	strh	r2, [r3, #32]
					nextState                = LISTEN;
    5924:	2401      	movs	r4, #1
	bool     ret = false;
    5926:	2000      	movs	r0, #0
    5928:	e1cb      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
				TCP_Snd(currentTCB);
    592a:	4bbf      	ldr	r3, [pc, #764]	; (5c28 <TCP_FiniteStateMachine+0x6e4>)
    592c:	4798      	blx	r3
	bool     ret = false;
    592e:	2000      	movs	r0, #0
    5930:	e1c7      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
			// invalid packet so drop it
			break;
		}
		break;
	case ESTABLISHED:
		switch (event) {
    5932:	2a0c      	cmp	r2, #12
    5934:	d900      	bls.n	5938 <TCP_FiniteStateMachine+0x3f4>
    5936:	e1d4      	b.n	5ce2 <TCP_FiniteStateMachine+0x79e>
    5938:	0092      	lsls	r2, r2, #2
    593a:	4bbc      	ldr	r3, [pc, #752]	; (5c2c <TCP_FiniteStateMachine+0x6e8>)
    593c:	589b      	ldr	r3, [r3, r2]
    593e:	469f      	mov	pc, r3
		case RCV_ACK:
			TCP_SyslogWrite("ESTABLISHED: rx_ack");
    5940:	48bb      	ldr	r0, [pc, #748]	; (5c30 <TCP_FiniteStateMachine+0x6ec>)
    5942:	4bb7      	ldr	r3, [pc, #732]	; (5c20 <TCP_FiniteStateMachine+0x6dc>)
    5944:	4798      	blx	r3
			if (currentTCB->destIP == receivedRemoteAddress) {
    5946:	4bb7      	ldr	r3, [pc, #732]	; (5c24 <TCP_FiniteStateMachine+0x6e0>)
    5948:	681b      	ldr	r3, [r3, #0]
    594a:	4aba      	ldr	r2, [pc, #744]	; (5c34 <TCP_FiniteStateMachine+0x6f0>)
    594c:	6992      	ldr	r2, [r2, #24]
    594e:	6859      	ldr	r1, [r3, #4]
    5950:	4291      	cmp	r1, r2
    5952:	d001      	beq.n	5958 <TCP_FiniteStateMachine+0x414>
	bool     ret = false;
    5954:	2000      	movs	r0, #0
    5956:	e1b4      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
				// is sequence number OK?
				// remote ACK should be equal to header sequence number
				// we don't accept out of order packet (not enough memory)
				if (currentTCB->remoteAck == tcpHeader.sequenceNumber) {
    5958:	4ab6      	ldr	r2, [pc, #728]	; (5c34 <TCP_FiniteStateMachine+0x6f0>)
    595a:	6851      	ldr	r1, [r2, #4]
    595c:	691a      	ldr	r2, [r3, #16]
    595e:	428a      	cmp	r2, r1
    5960:	d001      	beq.n	5966 <TCP_FiniteStateMachine+0x422>
	bool     ret = false;
    5962:	2000      	movs	r0, #0
    5964:	e1ad      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
					// This is a ACK packet only
					// check the ACK sequence
					// check if this is on already received Ack
					if (currentTCB->localLastAck < tcpHeader.ackNumber) {
    5966:	4ab3      	ldr	r2, [pc, #716]	; (5c34 <TCP_FiniteStateMachine+0x6f0>)
    5968:	6890      	ldr	r0, [r2, #8]
    596a:	699a      	ldr	r2, [r3, #24]
    596c:	4282      	cmp	r2, r0
    596e:	d300      	bcc.n	5972 <TCP_FiniteStateMachine+0x42e>
    5970:	e1b9      	b.n	5ce6 <TCP_FiniteStateMachine+0x7a2>
						// check how many bytes sent was acknowledged
						if ((currentTCB->localSeqno + 1) >= tcpHeader.ackNumber) {
    5972:	695a      	ldr	r2, [r3, #20]
    5974:	1c55      	adds	r5, r2, #1
    5976:	42a8      	cmp	r0, r5
    5978:	d822      	bhi.n	59c0 <TCP_FiniteStateMachine+0x47c>
							notAckBytes = currentTCB->localSeqno - tcpHeader.ackNumber;
    597a:	b292      	uxth	r2, r2
    597c:	b285      	uxth	r5, r0
    597e:	1b52      	subs	r2, r2, r5
    5980:	b292      	uxth	r2, r2

							// update the pointer for next TX
							currentTCB->txBufferPtr = currentTCB->txBufferPtr - notAckBytes;
    5982:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    5984:	1aad      	subs	r5, r5, r2
    5986:	635d      	str	r5, [r3, #52]	; 0x34
							currentTCB->bytesToSend = currentTCB->bytesToSend + notAckBytes;
    5988:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
    598a:	1952      	adds	r2, r2, r5
    598c:	b292      	uxth	r2, r2
    598e:	871a      	strh	r2, [r3, #56]	; 0x38

							// Check if all TX buffer/data was acknowledged
							if (currentTCB->bytesToSend == 0) {
    5990:	2a00      	cmp	r2, #0
    5992:	d103      	bne.n	599c <TCP_FiniteStateMachine+0x458>
								if (currentTCB->txBufState == TX_BUFF_IN_USE) {
    5994:	323a      	adds	r2, #58	; 0x3a
    5996:	5c9a      	ldrb	r2, [r3, r2]
    5998:	2a02      	cmp	r2, #2
    599a:	d008      	beq.n	59ae <TCP_FiniteStateMachine+0x46a>
									currentTCB->txBufState = NO_BUFF;
								}
							}

							currentTCB->localLastAck = tcpHeader.ackNumber - 1;
    599c:	1e42      	subs	r2, r0, #1
    599e:	619a      	str	r2, [r3, #24]
							currentTCB->localSeqno   = tcpHeader.ackNumber;
    59a0:	6158      	str	r0, [r3, #20]

							// check if the packet has payload
							if (rcvPayloadLen > 0) {
    59a2:	4aa4      	ldr	r2, [pc, #656]	; (5c34 <TCP_FiniteStateMachine+0x6f0>)
    59a4:	8b90      	ldrh	r0, [r2, #28]
    59a6:	2800      	cmp	r0, #0
    59a8:	d105      	bne.n	59b6 <TCP_FiniteStateMachine+0x472>
	bool     ret = false;
    59aa:	2000      	movs	r0, #0
    59ac:	e189      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
									currentTCB->txBufState = NO_BUFF;
    59ae:	2500      	movs	r5, #0
    59b0:	3238      	adds	r2, #56	; 0x38
    59b2:	549d      	strb	r5, [r3, r2]
    59b4:	e7f2      	b.n	599c <TCP_FiniteStateMachine+0x458>
								currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
    59b6:	60d9      	str	r1, [r3, #12]

								// copy the payload to the local buffer
								TCP_PayloadSave(rcvPayloadLen);
    59b8:	4b9f      	ldr	r3, [pc, #636]	; (5c38 <TCP_FiniteStateMachine+0x6f4>)
    59ba:	4798      	blx	r3
	bool     ret = false;
    59bc:	2000      	movs	r0, #0
    59be:	e180      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
							}
						} else {
							// this is a wrong Ack
							// ACK a packet that wasn't transmitted
							// send a reset
							currentTCB->flags = TCP_RST_FLAG | TCP_ACK_FLAG;
    59c0:	2114      	movs	r1, #20
    59c2:	224d      	movs	r2, #77	; 0x4d
    59c4:	5499      	strb	r1, [r3, r2]
							if (TCP_Snd(currentTCB)) {
    59c6:	0018      	movs	r0, r3
    59c8:	4b97      	ldr	r3, [pc, #604]	; (5c28 <TCP_FiniteStateMachine+0x6e4>)
    59ca:	4798      	blx	r3
    59cc:	2800      	cmp	r0, #0
    59ce:	d100      	bne.n	59d2 <TCP_FiniteStateMachine+0x48e>
    59d0:	e177      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
								nextState = CLOSED;
								TCB_Reset(currentTCB);
    59d2:	4b94      	ldr	r3, [pc, #592]	; (5c24 <TCP_FiniteStateMachine+0x6e0>)
    59d4:	6818      	ldr	r0, [r3, #0]
    59d6:	4b99      	ldr	r3, [pc, #612]	; (5c3c <TCP_FiniteStateMachine+0x6f8>)
    59d8:	4798      	blx	r3
								nextState = CLOSED;
    59da:	2400      	movs	r4, #0
	bool     ret = false;
    59dc:	0020      	movs	r0, r4
    59de:	e170      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
					}
				}
			}
			break;
		case CLOSE:
			TCP_SyslogWrite("ESTABLISHED: close");
    59e0:	4897      	ldr	r0, [pc, #604]	; (5c40 <TCP_FiniteStateMachine+0x6fc>)
    59e2:	4b8f      	ldr	r3, [pc, #572]	; (5c20 <TCP_FiniteStateMachine+0x6dc>)
    59e4:	4798      	blx	r3
			currentTCB->flags = TCP_FIN_FLAG;
    59e6:	4b8f      	ldr	r3, [pc, #572]	; (5c24 <TCP_FiniteStateMachine+0x6e0>)
    59e8:	6818      	ldr	r0, [r3, #0]
    59ea:	2201      	movs	r2, #1
    59ec:	234d      	movs	r3, #77	; 0x4d
    59ee:	54c2      	strb	r2, [r0, r3]
			nextState         = FIN_WAIT_1;
			TCP_Snd(currentTCB);
    59f0:	4b8d      	ldr	r3, [pc, #564]	; (5c28 <TCP_FiniteStateMachine+0x6e4>)
    59f2:	4798      	blx	r3
			nextState         = FIN_WAIT_1;
    59f4:	2405      	movs	r4, #5
	bool     ret = false;
    59f6:	2000      	movs	r0, #0
			break;
    59f8:	e163      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
		case RCV_FINACK:
			TCP_SyslogWrite("ESTABLISHED: rx_finack");
    59fa:	4892      	ldr	r0, [pc, #584]	; (5c44 <TCP_FiniteStateMachine+0x700>)
    59fc:	4b88      	ldr	r3, [pc, #544]	; (5c20 <TCP_FiniteStateMachine+0x6dc>)
    59fe:	4798      	blx	r3
		case RCV_FIN:
			TCP_SyslogWrite("ESTABLISHED: rx_fin");
    5a00:	4891      	ldr	r0, [pc, #580]	; (5c48 <TCP_FiniteStateMachine+0x704>)
    5a02:	4b87      	ldr	r3, [pc, #540]	; (5c20 <TCP_FiniteStateMachine+0x6dc>)
    5a04:	4798      	blx	r3
			// ACK the current packet
			// TO DO  check if it's a valid packet
			currentTCB->localSeqno = tcpHeader.ackNumber;
    5a06:	4b87      	ldr	r3, [pc, #540]	; (5c24 <TCP_FiniteStateMachine+0x6e0>)
    5a08:	6818      	ldr	r0, [r3, #0]
    5a0a:	4b8a      	ldr	r3, [pc, #552]	; (5c34 <TCP_FiniteStateMachine+0x6f0>)
    5a0c:	689b      	ldr	r3, [r3, #8]
    5a0e:	6143      	str	r3, [r0, #20]
			currentTCB->remoteAck  = currentTCB->remoteAck + 1;
    5a10:	6903      	ldr	r3, [r0, #16]
    5a12:	3301      	adds	r3, #1
    5a14:	6103      	str	r3, [r0, #16]

			currentTCB->socketState        = SOCKET_CLOSING;
    5a16:	2204      	movs	r2, #4
    5a18:	234e      	movs	r3, #78	; 0x4e
    5a1a:	54c2      	strb	r2, [r0, r3]
			currentTCB->timeout            = TCP_START_TIMEOUT_VAL;
    5a1c:	3b4c      	subs	r3, #76	; 0x4c
    5a1e:	3244      	adds	r2, #68	; 0x44
    5a20:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutReloadValue = TCP_START_TIMEOUT_VAL;
    5a22:	3202      	adds	r2, #2
    5a24:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutsCount      = TCP_MAX_RETRIES;
    5a26:	3a45      	subs	r2, #69	; 0x45
    5a28:	334a      	adds	r3, #74	; 0x4a
    5a2a:	54c2      	strb	r2, [r0, r3]
			// JUMP over CLOSE_WAIT state and send one packet with FIN + ACK
			currentTCB->flags = TCP_FIN_FLAG | TCP_ACK_FLAG;
    5a2c:	320c      	adds	r2, #12
    5a2e:	3301      	adds	r3, #1
    5a30:	54c2      	strb	r2, [r0, r3]

			nextState = LAST_ACK;
			TCP_Snd(currentTCB);
    5a32:	4b7d      	ldr	r3, [pc, #500]	; (5c28 <TCP_FiniteStateMachine+0x6e4>)
    5a34:	4798      	blx	r3
			nextState = LAST_ACK;
    5a36:	2409      	movs	r4, #9
	bool     ret = false;
    5a38:	2000      	movs	r0, #0
			break;
    5a3a:	e142      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
		case RCV_RST:
		case RCV_RSTACK:
			nextState = CLOSED;
			TCB_Reset(currentTCB);
    5a3c:	4b7f      	ldr	r3, [pc, #508]	; (5c3c <TCP_FiniteStateMachine+0x6f8>)
    5a3e:	4798      	blx	r3
			nextState = CLOSED;
    5a40:	2400      	movs	r4, #0
	bool     ret = false;
    5a42:	2000      	movs	r0, #0
			break;
    5a44:	e13d      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
		case TIMEOUT:
			TCP_SyslogWrite("ESTABLISHED:  timeout");
    5a46:	4881      	ldr	r0, [pc, #516]	; (5c4c <TCP_FiniteStateMachine+0x708>)
    5a48:	4b75      	ldr	r3, [pc, #468]	; (5c20 <TCP_FiniteStateMachine+0x6dc>)
    5a4a:	4798      	blx	r3
			if (currentTCB->timeoutsCount) {
    5a4c:	4b75      	ldr	r3, [pc, #468]	; (5c24 <TCP_FiniteStateMachine+0x6e0>)
    5a4e:	6818      	ldr	r0, [r3, #0]
    5a50:	234c      	movs	r3, #76	; 0x4c
    5a52:	5cc3      	ldrb	r3, [r0, r3]
    5a54:	2b00      	cmp	r3, #0
    5a56:	d10e      	bne.n	5a76 <TCP_FiniteStateMachine+0x532>
				TCP_Snd(currentTCB);
			} else {
				// reset the connection if there is no reply
				currentTCB->flags = TCP_RST_FLAG;
    5a58:	2204      	movs	r2, #4
    5a5a:	234d      	movs	r3, #77	; 0x4d
    5a5c:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    5a5e:	4b72      	ldr	r3, [pc, #456]	; (5c28 <TCP_FiniteStateMachine+0x6e4>)
    5a60:	4798      	blx	r3
    5a62:	2800      	cmp	r0, #0
    5a64:	d100      	bne.n	5a68 <TCP_FiniteStateMachine+0x524>
    5a66:	e12c      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
					nextState = CLOSE;
					TCB_Reset(currentTCB);
    5a68:	4b6e      	ldr	r3, [pc, #440]	; (5c24 <TCP_FiniteStateMachine+0x6e0>)
    5a6a:	6818      	ldr	r0, [r3, #0]
    5a6c:	4b73      	ldr	r3, [pc, #460]	; (5c3c <TCP_FiniteStateMachine+0x6f8>)
    5a6e:	4798      	blx	r3
					nextState = CLOSE;
    5a70:	2400      	movs	r4, #0
	bool     ret = false;
    5a72:	2000      	movs	r0, #0
    5a74:	e125      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
				TCP_Snd(currentTCB);
    5a76:	4b6c      	ldr	r3, [pc, #432]	; (5c28 <TCP_FiniteStateMachine+0x6e4>)
    5a78:	4798      	blx	r3
	bool     ret = false;
    5a7a:	2000      	movs	r0, #0
    5a7c:	e121      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
		default:
			break;
		}
		break;
	case FIN_WAIT_1:
		switch (event) {
    5a7e:	2a06      	cmp	r2, #6
    5a80:	d02e      	beq.n	5ae0 <TCP_FiniteStateMachine+0x59c>
    5a82:	d91c      	bls.n	5abe <TCP_FiniteStateMachine+0x57a>
    5a84:	2a07      	cmp	r2, #7
    5a86:	d03b      	beq.n	5b00 <TCP_FiniteStateMachine+0x5bc>
    5a88:	2a0c      	cmp	r2, #12
    5a8a:	d000      	beq.n	5a8e <TCP_FiniteStateMachine+0x54a>
    5a8c:	e12d      	b.n	5cea <TCP_FiniteStateMachine+0x7a6>
			if (TCP_Snd(currentTCB)) {
				nextState = TIME_WAIT;
			}
			break;
		case TIMEOUT:
			TCP_SyslogWrite("FIN_WAIT_1:  timeout");
    5a8e:	4870      	ldr	r0, [pc, #448]	; (5c50 <TCP_FiniteStateMachine+0x70c>)
    5a90:	4b63      	ldr	r3, [pc, #396]	; (5c20 <TCP_FiniteStateMachine+0x6dc>)
    5a92:	4798      	blx	r3
			if (currentTCB->timeoutsCount) {
    5a94:	4b63      	ldr	r3, [pc, #396]	; (5c24 <TCP_FiniteStateMachine+0x6e0>)
    5a96:	6818      	ldr	r0, [r3, #0]
    5a98:	234c      	movs	r3, #76	; 0x4c
    5a9a:	5cc3      	ldrb	r3, [r0, r3]
    5a9c:	2b00      	cmp	r3, #0
    5a9e:	d13f      	bne.n	5b20 <TCP_FiniteStateMachine+0x5dc>
				TCP_Snd(currentTCB);
			} else {
				// just reset the connection if there is no reply
				currentTCB->flags = TCP_RST_FLAG;
    5aa0:	2204      	movs	r2, #4
    5aa2:	234d      	movs	r3, #77	; 0x4d
    5aa4:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    5aa6:	4b60      	ldr	r3, [pc, #384]	; (5c28 <TCP_FiniteStateMachine+0x6e4>)
    5aa8:	4798      	blx	r3
    5aaa:	2800      	cmp	r0, #0
    5aac:	d100      	bne.n	5ab0 <TCP_FiniteStateMachine+0x56c>
    5aae:	e108      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
					nextState = CLOSE;
					TCB_Reset(currentTCB);
    5ab0:	4b5c      	ldr	r3, [pc, #368]	; (5c24 <TCP_FiniteStateMachine+0x6e0>)
    5ab2:	6818      	ldr	r0, [r3, #0]
    5ab4:	4b61      	ldr	r3, [pc, #388]	; (5c3c <TCP_FiniteStateMachine+0x6f8>)
    5ab6:	4798      	blx	r3
					nextState = CLOSE;
    5ab8:	2400      	movs	r4, #0
	bool     ret = false;
    5aba:	2000      	movs	r0, #0
    5abc:	e101      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
		switch (event) {
    5abe:	2a04      	cmp	r2, #4
    5ac0:	d000      	beq.n	5ac4 <TCP_FiniteStateMachine+0x580>
    5ac2:	e112      	b.n	5cea <TCP_FiniteStateMachine+0x7a6>
			TCP_SyslogWrite("FIN_WAIT_1: rx_ack");
    5ac4:	4863      	ldr	r0, [pc, #396]	; (5c54 <TCP_FiniteStateMachine+0x710>)
    5ac6:	4b56      	ldr	r3, [pc, #344]	; (5c20 <TCP_FiniteStateMachine+0x6dc>)
    5ac8:	4798      	blx	r3
			currentTCB->timeout       = TCP_START_TIMEOUT_VAL;
    5aca:	4b56      	ldr	r3, [pc, #344]	; (5c24 <TCP_FiniteStateMachine+0x6e0>)
    5acc:	681b      	ldr	r3, [r3, #0]
    5ace:	2102      	movs	r1, #2
    5ad0:	2248      	movs	r2, #72	; 0x48
    5ad2:	5299      	strh	r1, [r3, r2]
			currentTCB->timeoutsCount = 1;
    5ad4:	3901      	subs	r1, #1
    5ad6:	3204      	adds	r2, #4
    5ad8:	5499      	strb	r1, [r3, r2]
			nextState                 = FIN_WAIT_2;
    5ada:	2406      	movs	r4, #6
	bool     ret = false;
    5adc:	2000      	movs	r0, #0
			break;
    5ade:	e0f0      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
			TCP_SyslogWrite("FIN_WAIT_1: rx_fin");
    5ae0:	485d      	ldr	r0, [pc, #372]	; (5c58 <TCP_FiniteStateMachine+0x714>)
    5ae2:	4b4f      	ldr	r3, [pc, #316]	; (5c20 <TCP_FiniteStateMachine+0x6dc>)
    5ae4:	4798      	blx	r3
			currentTCB->flags = TCP_ACK_FLAG;
    5ae6:	4b4f      	ldr	r3, [pc, #316]	; (5c24 <TCP_FiniteStateMachine+0x6e0>)
    5ae8:	6818      	ldr	r0, [r3, #0]
    5aea:	2210      	movs	r2, #16
    5aec:	234d      	movs	r3, #77	; 0x4d
    5aee:	54c2      	strb	r2, [r0, r3]
			if (TCP_Snd(currentTCB)) {
    5af0:	4b4d      	ldr	r3, [pc, #308]	; (5c28 <TCP_FiniteStateMachine+0x6e4>)
    5af2:	4798      	blx	r3
    5af4:	2800      	cmp	r0, #0
    5af6:	d100      	bne.n	5afa <TCP_FiniteStateMachine+0x5b6>
    5af8:	e0e3      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
				nextState = CLOSING;
    5afa:	2408      	movs	r4, #8
	bool     ret = false;
    5afc:	2000      	movs	r0, #0
    5afe:	e0e0      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
			TCP_SyslogWrite("FIN_WAIT_1: rx_finack");
    5b00:	4856      	ldr	r0, [pc, #344]	; (5c5c <TCP_FiniteStateMachine+0x718>)
    5b02:	4b47      	ldr	r3, [pc, #284]	; (5c20 <TCP_FiniteStateMachine+0x6dc>)
    5b04:	4798      	blx	r3
			currentTCB->flags = TCP_ACK_FLAG;
    5b06:	4b47      	ldr	r3, [pc, #284]	; (5c24 <TCP_FiniteStateMachine+0x6e0>)
    5b08:	6818      	ldr	r0, [r3, #0]
    5b0a:	2210      	movs	r2, #16
    5b0c:	234d      	movs	r3, #77	; 0x4d
    5b0e:	54c2      	strb	r2, [r0, r3]
			if (TCP_Snd(currentTCB)) {
    5b10:	4b45      	ldr	r3, [pc, #276]	; (5c28 <TCP_FiniteStateMachine+0x6e4>)
    5b12:	4798      	blx	r3
    5b14:	2800      	cmp	r0, #0
    5b16:	d100      	bne.n	5b1a <TCP_FiniteStateMachine+0x5d6>
    5b18:	e0d3      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
				nextState = TIME_WAIT;
    5b1a:	240a      	movs	r4, #10
	bool     ret = false;
    5b1c:	2000      	movs	r0, #0
    5b1e:	e0d0      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
				TCP_Snd(currentTCB);
    5b20:	4b41      	ldr	r3, [pc, #260]	; (5c28 <TCP_FiniteStateMachine+0x6e4>)
    5b22:	4798      	blx	r3
	bool     ret = false;
    5b24:	2000      	movs	r0, #0
    5b26:	e0cc      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
		default:
			break;
		}
		break;
	case FIN_WAIT_2:
		switch (event) {
    5b28:	2a06      	cmp	r2, #6
    5b2a:	d003      	beq.n	5b34 <TCP_FiniteStateMachine+0x5f0>
    5b2c:	2a0c      	cmp	r2, #12
    5b2e:	d00e      	beq.n	5b4e <TCP_FiniteStateMachine+0x60a>
	bool     ret = false;
    5b30:	2000      	movs	r0, #0
    5b32:	e0c6      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
		case RCV_FIN:
			TCP_SyslogWrite("FIN_WAIT_2: rx_fin");
    5b34:	484a      	ldr	r0, [pc, #296]	; (5c60 <TCP_FiniteStateMachine+0x71c>)
    5b36:	4b3a      	ldr	r3, [pc, #232]	; (5c20 <TCP_FiniteStateMachine+0x6dc>)
    5b38:	4798      	blx	r3
			if (TCP_Snd(currentTCB)) {
    5b3a:	4b3a      	ldr	r3, [pc, #232]	; (5c24 <TCP_FiniteStateMachine+0x6e0>)
    5b3c:	6818      	ldr	r0, [r3, #0]
    5b3e:	4b3a      	ldr	r3, [pc, #232]	; (5c28 <TCP_FiniteStateMachine+0x6e4>)
    5b40:	4798      	blx	r3
    5b42:	2800      	cmp	r0, #0
    5b44:	d100      	bne.n	5b48 <TCP_FiniteStateMachine+0x604>
    5b46:	e0bc      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
				nextState = TIME_WAIT;
    5b48:	240a      	movs	r4, #10
	bool     ret = false;
    5b4a:	2000      	movs	r0, #0
    5b4c:	e0b9      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
			}
			break;
		case TIMEOUT:
			TCP_SyslogWrite("FIN_WAIT_2:  timeout");
    5b4e:	4845      	ldr	r0, [pc, #276]	; (5c64 <TCP_FiniteStateMachine+0x720>)
    5b50:	4b33      	ldr	r3, [pc, #204]	; (5c20 <TCP_FiniteStateMachine+0x6dc>)
    5b52:	4798      	blx	r3
			if (currentTCB->timeoutsCount) {
    5b54:	4b33      	ldr	r3, [pc, #204]	; (5c24 <TCP_FiniteStateMachine+0x6e0>)
    5b56:	6818      	ldr	r0, [r3, #0]
    5b58:	234c      	movs	r3, #76	; 0x4c
    5b5a:	5cc3      	ldrb	r3, [r0, r3]
    5b5c:	2b00      	cmp	r3, #0
    5b5e:	d10e      	bne.n	5b7e <TCP_FiniteStateMachine+0x63a>
				TCP_Snd(currentTCB);
			} else {
				// just reset the connection if there is no reply
				currentTCB->flags = TCP_RST_FLAG;
    5b60:	2204      	movs	r2, #4
    5b62:	234d      	movs	r3, #77	; 0x4d
    5b64:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    5b66:	4b30      	ldr	r3, [pc, #192]	; (5c28 <TCP_FiniteStateMachine+0x6e4>)
    5b68:	4798      	blx	r3
    5b6a:	2800      	cmp	r0, #0
    5b6c:	d100      	bne.n	5b70 <TCP_FiniteStateMachine+0x62c>
    5b6e:	e0a8      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
					nextState = CLOSE;
					TCB_Reset(currentTCB);
    5b70:	4b2c      	ldr	r3, [pc, #176]	; (5c24 <TCP_FiniteStateMachine+0x6e0>)
    5b72:	6818      	ldr	r0, [r3, #0]
    5b74:	4b31      	ldr	r3, [pc, #196]	; (5c3c <TCP_FiniteStateMachine+0x6f8>)
    5b76:	4798      	blx	r3
					nextState = CLOSE;
    5b78:	2400      	movs	r4, #0
	bool     ret = false;
    5b7a:	2000      	movs	r0, #0
    5b7c:	e0a1      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
				TCP_Snd(currentTCB);
    5b7e:	4b2a      	ldr	r3, [pc, #168]	; (5c28 <TCP_FiniteStateMachine+0x6e4>)
    5b80:	4798      	blx	r3
	bool     ret = false;
    5b82:	2000      	movs	r0, #0
    5b84:	e09d      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
		break;
	case CLOSE_WAIT:
		// This state is defined in RFC, but is not used in the application
		break;
	case CLOSING:
		switch (event) {
    5b86:	2a04      	cmp	r2, #4
    5b88:	d001      	beq.n	5b8e <TCP_FiniteStateMachine+0x64a>
	bool     ret = false;
    5b8a:	2000      	movs	r0, #0
    5b8c:	e099      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
		case RCV_ACK:
			TCP_SyslogWrite("CLOSING: rx_ack");
    5b8e:	4836      	ldr	r0, [pc, #216]	; (5c68 <TCP_FiniteStateMachine+0x724>)
    5b90:	4b23      	ldr	r3, [pc, #140]	; (5c20 <TCP_FiniteStateMachine+0x6dc>)
    5b92:	4798      	blx	r3
			nextState = TIME_WAIT;
    5b94:	240a      	movs	r4, #10
	bool     ret = false;
    5b96:	2000      	movs	r0, #0
			break;
    5b98:	e093      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
			break;
		}
		break;
	case LAST_ACK:
		// check if the packet belongs to the curent TCB
		switch (event) {
    5b9a:	2a07      	cmp	r2, #7
    5b9c:	d005      	beq.n	5baa <TCP_FiniteStateMachine+0x666>
    5b9e:	2a0c      	cmp	r2, #12
    5ba0:	d01b      	beq.n	5bda <TCP_FiniteStateMachine+0x696>
    5ba2:	2a04      	cmp	r2, #4
    5ba4:	d001      	beq.n	5baa <TCP_FiniteStateMachine+0x666>
	bool     ret = false;
    5ba6:	2000      	movs	r0, #0
    5ba8:	e08b      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
		case RCV_FINACK:
		case RCV_ACK:
			if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPort == tcpHeader.sourcePort)) {
    5baa:	4b22      	ldr	r3, [pc, #136]	; (5c34 <TCP_FiniteStateMachine+0x6f0>)
    5bac:	699b      	ldr	r3, [r3, #24]
    5bae:	6842      	ldr	r2, [r0, #4]
    5bb0:	429a      	cmp	r2, r3
    5bb2:	d001      	beq.n	5bb8 <TCP_FiniteStateMachine+0x674>
	bool     ret = false;
    5bb4:	2000      	movs	r0, #0
    5bb6:	e084      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
			if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPort == tcpHeader.sourcePort)) {
    5bb8:	8902      	ldrh	r2, [r0, #8]
    5bba:	4b1e      	ldr	r3, [pc, #120]	; (5c34 <TCP_FiniteStateMachine+0x6f0>)
    5bbc:	881b      	ldrh	r3, [r3, #0]
    5bbe:	429a      	cmp	r2, r3
    5bc0:	d001      	beq.n	5bc6 <TCP_FiniteStateMachine+0x682>
	bool     ret = false;
    5bc2:	2000      	movs	r0, #0
    5bc4:	e07d      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
				TCP_SyslogWrite("LAST_ACK: rx_ack");
    5bc6:	4829      	ldr	r0, [pc, #164]	; (5c6c <TCP_FiniteStateMachine+0x728>)
    5bc8:	4b15      	ldr	r3, [pc, #84]	; (5c20 <TCP_FiniteStateMachine+0x6dc>)
    5bca:	4798      	blx	r3
				nextState = CLOSED;
				TCB_Reset(currentTCB);
    5bcc:	4b15      	ldr	r3, [pc, #84]	; (5c24 <TCP_FiniteStateMachine+0x6e0>)
    5bce:	6818      	ldr	r0, [r3, #0]
    5bd0:	4b1a      	ldr	r3, [pc, #104]	; (5c3c <TCP_FiniteStateMachine+0x6f8>)
    5bd2:	4798      	blx	r3
				nextState = CLOSED;
    5bd4:	2400      	movs	r4, #0
	bool     ret = false;
    5bd6:	2000      	movs	r0, #0
    5bd8:	e073      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
			}
			break;
		case TIMEOUT:
			if (currentTCB->timeoutsCount) {
    5bda:	234c      	movs	r3, #76	; 0x4c
    5bdc:	5cc3      	ldrb	r3, [r0, r3]
    5bde:	2b00      	cmp	r3, #0
    5be0:	d10d      	bne.n	5bfe <TCP_FiniteStateMachine+0x6ba>
				TCP_Snd(currentTCB);
			} else {
				// just reset the connection if there is no reply
				currentTCB->flags = TCP_RST_FLAG;
    5be2:	2204      	movs	r2, #4
    5be4:	234d      	movs	r3, #77	; 0x4d
    5be6:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    5be8:	4b0f      	ldr	r3, [pc, #60]	; (5c28 <TCP_FiniteStateMachine+0x6e4>)
    5bea:	4798      	blx	r3
    5bec:	2800      	cmp	r0, #0
    5bee:	d068      	beq.n	5cc2 <TCP_FiniteStateMachine+0x77e>
					nextState = CLOSE;
					TCB_Reset(currentTCB);
    5bf0:	4b0c      	ldr	r3, [pc, #48]	; (5c24 <TCP_FiniteStateMachine+0x6e0>)
    5bf2:	6818      	ldr	r0, [r3, #0]
    5bf4:	4b11      	ldr	r3, [pc, #68]	; (5c3c <TCP_FiniteStateMachine+0x6f8>)
    5bf6:	4798      	blx	r3
					nextState = CLOSE;
    5bf8:	2400      	movs	r4, #0
	bool     ret = false;
    5bfa:	2000      	movs	r0, #0
    5bfc:	e061      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
				TCP_Snd(currentTCB);
    5bfe:	4b0a      	ldr	r3, [pc, #40]	; (5c28 <TCP_FiniteStateMachine+0x6e4>)
    5c00:	4798      	blx	r3
	bool     ret = false;
    5c02:	2000      	movs	r0, #0
    5c04:	e05d      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
		default:
			break;
		}
		break;
	case TIME_WAIT:
		TCP_SyslogWrite("Time Wait");
    5c06:	481a      	ldr	r0, [pc, #104]	; (5c70 <TCP_FiniteStateMachine+0x72c>)
    5c08:	4b05      	ldr	r3, [pc, #20]	; (5c20 <TCP_FiniteStateMachine+0x6dc>)
    5c0a:	4798      	blx	r3
		nextState = CLOSED;
		TCB_Reset(currentTCB);
    5c0c:	4b05      	ldr	r3, [pc, #20]	; (5c24 <TCP_FiniteStateMachine+0x6e0>)
    5c0e:	6818      	ldr	r0, [r3, #0]
    5c10:	4b0a      	ldr	r3, [pc, #40]	; (5c3c <TCP_FiniteStateMachine+0x6f8>)
    5c12:	4798      	blx	r3
		nextState = CLOSED;
    5c14:	2400      	movs	r4, #0
	bool     ret = false;
    5c16:	2000      	movs	r0, #0
		break;
    5c18:	e053      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
    5c1a:	46c0      	nop			; (mov r8, r8)
    5c1c:	00007f28 	.word	0x00007f28
    5c20:	00005197 	.word	0x00005197
    5c24:	20004b5c 	.word	0x20004b5c
    5c28:	00005271 	.word	0x00005271
    5c2c:	00007d84 	.word	0x00007d84
    5c30:	00007f40 	.word	0x00007f40
    5c34:	20000890 	.word	0x20000890
    5c38:	000054f1 	.word	0x000054f1
    5c3c:	00005205 	.word	0x00005205
    5c40:	00007f54 	.word	0x00007f54
    5c44:	00007f68 	.word	0x00007f68
    5c48:	00007f80 	.word	0x00007f80
    5c4c:	00007f94 	.word	0x00007f94
    5c50:	00007fec 	.word	0x00007fec
    5c54:	00007fc0 	.word	0x00007fc0
    5c58:	00007fac 	.word	0x00007fac
    5c5c:	00007fd4 	.word	0x00007fd4
    5c60:	00008004 	.word	0x00008004
    5c64:	00008018 	.word	0x00008018
    5c68:	00008030 	.word	0x00008030
    5c6c:	00008040 	.word	0x00008040
    5c70:	00008054 	.word	0x00008054
	case CLOSED:
		switch (event) {
    5c74:	2a01      	cmp	r2, #1
    5c76:	d003      	beq.n	5c80 <TCP_FiniteStateMachine+0x73c>
    5c78:	2a02      	cmp	r2, #2
    5c7a:	d016      	beq.n	5caa <TCP_FiniteStateMachine+0x766>
	bool     ret = false;
    5c7c:	2000      	movs	r0, #0
    5c7e:	e020      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
		case ACTIVE_OPEN:
			TCP_SyslogWrite("CLOSED: active_open");
    5c80:	481b      	ldr	r0, [pc, #108]	; (5cf0 <TCP_FiniteStateMachine+0x7ac>)
    5c82:	4b1c      	ldr	r3, [pc, #112]	; (5cf4 <TCP_FiniteStateMachine+0x7b0>)
    5c84:	4798      	blx	r3
			// create and send a SYN packet
			currentTCB->timeout            = TCP_START_TIMEOUT_VAL;
    5c86:	4b1c      	ldr	r3, [pc, #112]	; (5cf8 <TCP_FiniteStateMachine+0x7b4>)
    5c88:	6818      	ldr	r0, [r3, #0]
    5c8a:	2302      	movs	r3, #2
    5c8c:	2248      	movs	r2, #72	; 0x48
    5c8e:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutReloadValue = TCP_START_TIMEOUT_VAL;
    5c90:	3202      	adds	r2, #2
    5c92:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutsCount      = TCP_MAX_SYN_RETRIES;
    5c94:	3a47      	subs	r2, #71	; 0x47
    5c96:	334a      	adds	r3, #74	; 0x4a
    5c98:	54c2      	strb	r2, [r0, r3]
			currentTCB->flags              = TCP_SYN_FLAG;
    5c9a:	3301      	adds	r3, #1
    5c9c:	2202      	movs	r2, #2
    5c9e:	54c2      	strb	r2, [r0, r3]
			TCP_Snd(currentTCB);
    5ca0:	4b16      	ldr	r3, [pc, #88]	; (5cfc <TCP_FiniteStateMachine+0x7b8>)
    5ca2:	4798      	blx	r3
			nextState = SYN_SENT;
    5ca4:	2402      	movs	r4, #2
			ret       = true;
    5ca6:	2001      	movs	r0, #1
			break;
    5ca8:	e00b      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
		case PASIVE_OPEN:
			TCP_SyslogWrite("CLOSED: passive_open");
    5caa:	4815      	ldr	r0, [pc, #84]	; (5d00 <TCP_FiniteStateMachine+0x7bc>)
    5cac:	4b11      	ldr	r3, [pc, #68]	; (5cf4 <TCP_FiniteStateMachine+0x7b0>)
    5cae:	4798      	blx	r3
			currentTCB->destIP   = 0;
    5cb0:	4b11      	ldr	r3, [pc, #68]	; (5cf8 <TCP_FiniteStateMachine+0x7b4>)
    5cb2:	681b      	ldr	r3, [r3, #0]
    5cb4:	2200      	movs	r2, #0
    5cb6:	605a      	str	r2, [r3, #4]
			currentTCB->destPort = 0;
    5cb8:	811a      	strh	r2, [r3, #8]
			nextState            = LISTEN;
    5cba:	2401      	movs	r4, #1
			ret                  = true;
    5cbc:	2001      	movs	r0, #1
			break;
    5cbe:	e000      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
	bool     ret = false;
    5cc0:	2000      	movs	r0, #0
		}
		break;
	default:
		break;
	}
	currentTCB->connectionEvent = DUMMY_NOP; // we are handling the event...
    5cc2:	4b0d      	ldr	r3, [pc, #52]	; (5cf8 <TCP_FiniteStateMachine+0x7b4>)
    5cc4:	681b      	ldr	r3, [r3, #0]
    5cc6:	210d      	movs	r1, #13
    5cc8:	223c      	movs	r2, #60	; 0x3c
    5cca:	5499      	strb	r1, [r3, r2]
	currentTCB->fsmState        = nextState;
    5ccc:	3a01      	subs	r2, #1
    5cce:	549c      	strb	r4, [r3, r2]
	return ret;
}
    5cd0:	bd70      	pop	{r4, r5, r6, pc}
	bool     ret = false;
    5cd2:	2000      	movs	r0, #0
    5cd4:	e7f5      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
    5cd6:	2000      	movs	r0, #0
    5cd8:	e7f3      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
    5cda:	2000      	movs	r0, #0
    5cdc:	e7f1      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
    5cde:	2000      	movs	r0, #0
    5ce0:	e7ef      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
    5ce2:	2000      	movs	r0, #0
    5ce4:	e7ed      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
    5ce6:	2000      	movs	r0, #0
    5ce8:	e7eb      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
    5cea:	2000      	movs	r0, #0
    5cec:	e7e9      	b.n	5cc2 <TCP_FiniteStateMachine+0x77e>
    5cee:	46c0      	nop			; (mov r8, r8)
    5cf0:	00008060 	.word	0x00008060
    5cf4:	00005197 	.word	0x00005197
    5cf8:	20004b5c 	.word	0x20004b5c
    5cfc:	00005271 	.word	0x00005271
    5d00:	00008074 	.word	0x00008074

00005d04 <TCP_Recv>:
{
    5d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d06:	0005      	movs	r5, r0
    5d08:	000c      	movs	r4, r1
	receivedRemoteAddress = 0;
    5d0a:	4e5c      	ldr	r6, [pc, #368]	; (5e7c <TCP_Recv+0x178>)
    5d0c:	2700      	movs	r7, #0
    5d0e:	61b7      	str	r7, [r6, #24]
	rcvPayloadLen         = 0;
    5d10:	83b7      	strh	r7, [r6, #28]
	ETH_ReadBlock((char *)&tcpHeader, sizeof(tcpHeader_t));
    5d12:	2114      	movs	r1, #20
    5d14:	0030      	movs	r0, r6
    5d16:	4b5a      	ldr	r3, [pc, #360]	; (5e80 <TCP_Recv+0x17c>)
    5d18:	4798      	blx	r3
	currentTCB = NULL;
    5d1a:	4b5a      	ldr	r3, [pc, #360]	; (5e84 <TCP_Recv+0x180>)
    5d1c:	601f      	str	r7, [r3, #0]
	if ((tcpHeader.destPort != 0) && (tcpHeader.sourcePort != 0)) {
    5d1e:	8873      	ldrh	r3, [r6, #2]
    5d20:	2b00      	cmp	r3, #0
    5d22:	d062      	beq.n	5dea <TCP_Recv+0xe6>
    5d24:	4a55      	ldr	r2, [pc, #340]	; (5e7c <TCP_Recv+0x178>)
    5d26:	8812      	ldrh	r2, [r2, #0]
    5d28:	2a00      	cmp	r2, #0
    5d2a:	d05e      	beq.n	5dea <TCP_Recv+0xe6>
		tcpHeader.sourcePort = ntohs(tcpHeader.sourcePort);
    5d2c:	0a16      	lsrs	r6, r2, #8
    5d2e:	0212      	lsls	r2, r2, #8
    5d30:	4316      	orrs	r6, r2
    5d32:	b2b6      	uxth	r6, r6
    5d34:	4a51      	ldr	r2, [pc, #324]	; (5e7c <TCP_Recv+0x178>)
    5d36:	8016      	strh	r6, [r2, #0]
		tcpHeader.destPort   = ntohs(tcpHeader.destPort);
    5d38:	0a18      	lsrs	r0, r3, #8
    5d3a:	021b      	lsls	r3, r3, #8
    5d3c:	4318      	orrs	r0, r3
    5d3e:	b280      	uxth	r0, r0
    5d40:	8050      	strh	r0, [r2, #2]
		tcbPtr = tcbList;
    5d42:	4b51      	ldr	r3, [pc, #324]	; (5e88 <TCP_Recv+0x184>)
    5d44:	681a      	ldr	r2, [r3, #0]
	socklistsize_t count = 0;
    5d46:	2300      	movs	r3, #0
		while ((tcbPtr != NULL) && (count < tcbListSize)) {
    5d48:	2a00      	cmp	r2, #0
    5d4a:	d00d      	beq.n	5d68 <TCP_Recv+0x64>
    5d4c:	494f      	ldr	r1, [pc, #316]	; (5e8c <TCP_Recv+0x188>)
    5d4e:	7809      	ldrb	r1, [r1, #0]
    5d50:	b249      	sxtb	r1, r1
    5d52:	428b      	cmp	r3, r1
    5d54:	da08      	bge.n	5d68 <TCP_Recv+0x64>
			if (tcpHeader.destPort == tcbPtr->localPort) {
    5d56:	8811      	ldrh	r1, [r2, #0]
    5d58:	4288      	cmp	r0, r1
    5d5a:	d003      	beq.n	5d64 <TCP_Recv+0x60>
				tcbPtr = tcbPtr->nextTCB;
    5d5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
				count++;
    5d5e:	3301      	adds	r3, #1
    5d60:	b25b      	sxtb	r3, r3
    5d62:	e7f1      	b.n	5d48 <TCP_Recv+0x44>
				currentTCB = tcbPtr;
    5d64:	4b47      	ldr	r3, [pc, #284]	; (5e84 <TCP_Recv+0x180>)
    5d66:	601a      	str	r2, [r3, #0]
		if (currentTCB != NULL) {
    5d68:	4b46      	ldr	r3, [pc, #280]	; (5e84 <TCP_Recv+0x180>)
    5d6a:	681b      	ldr	r3, [r3, #0]
    5d6c:	2b00      	cmp	r3, #0
    5d6e:	d03c      	beq.n	5dea <TCP_Recv+0xe6>
			if ((tcpHeader.sourcePort == currentTCB->destPort) || (currentTCB->destIP == 0)) {
    5d70:	891a      	ldrh	r2, [r3, #8]
    5d72:	4296      	cmp	r6, r2
    5d74:	d002      	beq.n	5d7c <TCP_Recv+0x78>
    5d76:	685b      	ldr	r3, [r3, #4]
    5d78:	2b00      	cmp	r3, #0
    5d7a:	d136      	bne.n	5dea <TCP_Recv+0xe6>
				receivedRemoteAddress = remoteAddress;
    5d7c:	4a3f      	ldr	r2, [pc, #252]	; (5e7c <TCP_Recv+0x178>)
    5d7e:	6195      	str	r5, [r2, #24]
				rcvPayloadLen         = length - (uint16_t)(tcpHeader.dataOffset << 2);
    5d80:	7b13      	ldrb	r3, [r2, #12]
    5d82:	091b      	lsrs	r3, r3, #4
    5d84:	009b      	lsls	r3, r3, #2
    5d86:	1ae4      	subs	r4, r4, r3
    5d88:	8394      	strh	r4, [r2, #28]
				if (TCP_ParseTCPOptions() == true) {
    5d8a:	4b41      	ldr	r3, [pc, #260]	; (5e90 <TCP_Recv+0x18c>)
    5d8c:	4798      	blx	r3
    5d8e:	2800      	cmp	r0, #0
    5d90:	d100      	bne.n	5d94 <TCP_Recv+0x90>
    5d92:	e06f      	b.n	5e74 <TCP_Recv+0x170>
					if (tcpHeader.syn) {
    5d94:	4b39      	ldr	r3, [pc, #228]	; (5e7c <TCP_Recv+0x178>)
    5d96:	7b5b      	ldrb	r3, [r3, #13]
    5d98:	079a      	lsls	r2, r3, #30
    5d9a:	d530      	bpl.n	5dfe <TCP_Recv+0xfa>
						if (tcpHeader.ack) {
    5d9c:	06db      	lsls	r3, r3, #27
    5d9e:	d525      	bpl.n	5dec <TCP_Recv+0xe8>
							TCP_SyslogWrite("found syn&ack");
    5da0:	483c      	ldr	r0, [pc, #240]	; (5e94 <TCP_Recv+0x190>)
    5da2:	4b3d      	ldr	r3, [pc, #244]	; (5e98 <TCP_Recv+0x194>)
    5da4:	4798      	blx	r3
							currentTCB->connectionEvent = RCV_SYNACK;
    5da6:	4b37      	ldr	r3, [pc, #220]	; (5e84 <TCP_Recv+0x180>)
    5da8:	681a      	ldr	r2, [r3, #0]
    5daa:	2105      	movs	r1, #5
    5dac:	233c      	movs	r3, #60	; 0x3c
    5dae:	54d1      	strb	r1, [r2, r3]
					tcpHeader.ackNumber      = ntohl(tcpHeader.ackNumber);
    5db0:	4832      	ldr	r0, [pc, #200]	; (5e7c <TCP_Recv+0x178>)
    5db2:	6881      	ldr	r1, [r0, #8]
    5db4:	0e0a      	lsrs	r2, r1, #24
    5db6:	0a0b      	lsrs	r3, r1, #8
    5db8:	27ff      	movs	r7, #255	; 0xff
    5dba:	023f      	lsls	r7, r7, #8
    5dbc:	403b      	ands	r3, r7
    5dbe:	431a      	orrs	r2, r3
    5dc0:	020e      	lsls	r6, r1, #8
    5dc2:	25ff      	movs	r5, #255	; 0xff
    5dc4:	042d      	lsls	r5, r5, #16
    5dc6:	402e      	ands	r6, r5
    5dc8:	4332      	orrs	r2, r6
    5dca:	0609      	lsls	r1, r1, #24
    5dcc:	430a      	orrs	r2, r1
    5dce:	6082      	str	r2, [r0, #8]
					tcpHeader.sequenceNumber = ntohl(tcpHeader.sequenceNumber);
    5dd0:	6842      	ldr	r2, [r0, #4]
    5dd2:	0e13      	lsrs	r3, r2, #24
    5dd4:	0a14      	lsrs	r4, r2, #8
    5dd6:	403c      	ands	r4, r7
    5dd8:	4323      	orrs	r3, r4
    5dda:	0211      	lsls	r1, r2, #8
    5ddc:	4029      	ands	r1, r5
    5dde:	430b      	orrs	r3, r1
    5de0:	0612      	lsls	r2, r2, #24
    5de2:	4313      	orrs	r3, r2
    5de4:	6043      	str	r3, [r0, #4]
					TCP_FiniteStateMachine();
    5de6:	4b2d      	ldr	r3, [pc, #180]	; (5e9c <TCP_Recv+0x198>)
    5de8:	4798      	blx	r3
}
    5dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
							TCP_SyslogWrite("found syn");
    5dec:	482c      	ldr	r0, [pc, #176]	; (5ea0 <TCP_Recv+0x19c>)
    5dee:	4b2a      	ldr	r3, [pc, #168]	; (5e98 <TCP_Recv+0x194>)
    5df0:	4798      	blx	r3
							currentTCB->connectionEvent = RCV_SYN;
    5df2:	4b24      	ldr	r3, [pc, #144]	; (5e84 <TCP_Recv+0x180>)
    5df4:	681a      	ldr	r2, [r3, #0]
    5df6:	2103      	movs	r1, #3
    5df8:	233c      	movs	r3, #60	; 0x3c
    5dfa:	54d1      	strb	r1, [r2, r3]
    5dfc:	e7d8      	b.n	5db0 <TCP_Recv+0xac>
					} else if (tcpHeader.fin) {
    5dfe:	07da      	lsls	r2, r3, #31
    5e00:	d513      	bpl.n	5e2a <TCP_Recv+0x126>
						if (tcpHeader.ack) {
    5e02:	06db      	lsls	r3, r3, #27
    5e04:	d508      	bpl.n	5e18 <TCP_Recv+0x114>
							TCP_SyslogWrite("found fin&ack");
    5e06:	4827      	ldr	r0, [pc, #156]	; (5ea4 <TCP_Recv+0x1a0>)
    5e08:	4b23      	ldr	r3, [pc, #140]	; (5e98 <TCP_Recv+0x194>)
    5e0a:	4798      	blx	r3
							currentTCB->connectionEvent = RCV_FINACK;
    5e0c:	4b1d      	ldr	r3, [pc, #116]	; (5e84 <TCP_Recv+0x180>)
    5e0e:	681a      	ldr	r2, [r3, #0]
    5e10:	2107      	movs	r1, #7
    5e12:	233c      	movs	r3, #60	; 0x3c
    5e14:	54d1      	strb	r1, [r2, r3]
    5e16:	e7cb      	b.n	5db0 <TCP_Recv+0xac>
							TCP_SyslogWrite("found fin");
    5e18:	4823      	ldr	r0, [pc, #140]	; (5ea8 <TCP_Recv+0x1a4>)
    5e1a:	4b1f      	ldr	r3, [pc, #124]	; (5e98 <TCP_Recv+0x194>)
    5e1c:	4798      	blx	r3
							currentTCB->connectionEvent = RCV_FIN;
    5e1e:	4b19      	ldr	r3, [pc, #100]	; (5e84 <TCP_Recv+0x180>)
    5e20:	681a      	ldr	r2, [r3, #0]
    5e22:	2106      	movs	r1, #6
    5e24:	233c      	movs	r3, #60	; 0x3c
    5e26:	54d1      	strb	r1, [r2, r3]
    5e28:	e7c2      	b.n	5db0 <TCP_Recv+0xac>
					} else if (tcpHeader.rst) {
    5e2a:	075a      	lsls	r2, r3, #29
    5e2c:	d513      	bpl.n	5e56 <TCP_Recv+0x152>
						if (tcpHeader.ack) {
    5e2e:	06db      	lsls	r3, r3, #27
    5e30:	d508      	bpl.n	5e44 <TCP_Recv+0x140>
							TCP_SyslogWrite("found rst&ack");
    5e32:	481e      	ldr	r0, [pc, #120]	; (5eac <TCP_Recv+0x1a8>)
    5e34:	4b18      	ldr	r3, [pc, #96]	; (5e98 <TCP_Recv+0x194>)
    5e36:	4798      	blx	r3
							currentTCB->connectionEvent = RCV_RSTACK;
    5e38:	4b12      	ldr	r3, [pc, #72]	; (5e84 <TCP_Recv+0x180>)
    5e3a:	681a      	ldr	r2, [r3, #0]
    5e3c:	210a      	movs	r1, #10
    5e3e:	233c      	movs	r3, #60	; 0x3c
    5e40:	54d1      	strb	r1, [r2, r3]
    5e42:	e7b5      	b.n	5db0 <TCP_Recv+0xac>
							TCP_SyslogWrite("found rst");
    5e44:	481a      	ldr	r0, [pc, #104]	; (5eb0 <TCP_Recv+0x1ac>)
    5e46:	4b14      	ldr	r3, [pc, #80]	; (5e98 <TCP_Recv+0x194>)
    5e48:	4798      	blx	r3
							currentTCB->connectionEvent = RCV_RST;
    5e4a:	4b0e      	ldr	r3, [pc, #56]	; (5e84 <TCP_Recv+0x180>)
    5e4c:	681a      	ldr	r2, [r3, #0]
    5e4e:	2109      	movs	r1, #9
    5e50:	233c      	movs	r3, #60	; 0x3c
    5e52:	54d1      	strb	r1, [r2, r3]
    5e54:	e7ac      	b.n	5db0 <TCP_Recv+0xac>
					} else if (tcpHeader.ack) {
    5e56:	06db      	lsls	r3, r3, #27
    5e58:	d508      	bpl.n	5e6c <TCP_Recv+0x168>
						TCP_SyslogWrite("found ack");
    5e5a:	4816      	ldr	r0, [pc, #88]	; (5eb4 <TCP_Recv+0x1b0>)
    5e5c:	4b0e      	ldr	r3, [pc, #56]	; (5e98 <TCP_Recv+0x194>)
    5e5e:	4798      	blx	r3
						currentTCB->connectionEvent = RCV_ACK;
    5e60:	4b08      	ldr	r3, [pc, #32]	; (5e84 <TCP_Recv+0x180>)
    5e62:	681a      	ldr	r2, [r3, #0]
    5e64:	2104      	movs	r1, #4
    5e66:	233c      	movs	r3, #60	; 0x3c
    5e68:	54d1      	strb	r1, [r2, r3]
    5e6a:	e7a1      	b.n	5db0 <TCP_Recv+0xac>
						TCP_SyslogWrite("confused");
    5e6c:	4812      	ldr	r0, [pc, #72]	; (5eb8 <TCP_Recv+0x1b4>)
    5e6e:	4b0a      	ldr	r3, [pc, #40]	; (5e98 <TCP_Recv+0x194>)
    5e70:	4798      	blx	r3
    5e72:	e79d      	b.n	5db0 <TCP_Recv+0xac>
					TCP_SyslogWrite("pkt dropped: bad options");
    5e74:	4811      	ldr	r0, [pc, #68]	; (5ebc <TCP_Recv+0x1b8>)
    5e76:	4b08      	ldr	r3, [pc, #32]	; (5e98 <TCP_Recv+0x194>)
    5e78:	4798      	blx	r3
}
    5e7a:	e7b6      	b.n	5dea <TCP_Recv+0xe6>
    5e7c:	20000890 	.word	0x20000890
    5e80:	00004019 	.word	0x00004019
    5e84:	20004b5c 	.word	0x20004b5c
    5e88:	20004b60 	.word	0x20004b60
    5e8c:	20004b64 	.word	0x20004b64
    5e90:	000053e9 	.word	0x000053e9
    5e94:	0000808c 	.word	0x0000808c
    5e98:	00005197 	.word	0x00005197
    5e9c:	00005545 	.word	0x00005545
    5ea0:	0000809c 	.word	0x0000809c
    5ea4:	000080a8 	.word	0x000080a8
    5ea8:	000080b8 	.word	0x000080b8
    5eac:	000080c4 	.word	0x000080c4
    5eb0:	000080d4 	.word	0x000080d4
    5eb4:	000080e0 	.word	0x000080e0
    5eb8:	000080ec 	.word	0x000080ec
    5ebc:	000080f8 	.word	0x000080f8

00005ec0 <TCP_Init>:

void TCP_Init(void)
{
	tcbList            = NULL;
    5ec0:	2300      	movs	r3, #0
    5ec2:	4a05      	ldr	r2, [pc, #20]	; (5ed8 <TCP_Init+0x18>)
    5ec4:	6013      	str	r3, [r2, #0]
	tcbListSize        = 0;
    5ec6:	4a05      	ldr	r2, [pc, #20]	; (5edc <TCP_Init+0x1c>)
    5ec8:	7013      	strb	r3, [r2, #0]
	nextAvailablePort  = LOCAL_TCP_PORT_START_NUMBER;
    5eca:	4a05      	ldr	r2, [pc, #20]	; (5ee0 <TCP_Init+0x20>)
    5ecc:	2180      	movs	r1, #128	; 0x80
    5ece:	00c9      	lsls	r1, r1, #3
    5ed0:	83d1      	strh	r1, [r2, #30]
	nextSequenceNumber = 0;
    5ed2:	6213      	str	r3, [r2, #32]
}
    5ed4:	4770      	bx	lr
    5ed6:	46c0      	nop			; (mov r8, r8)
    5ed8:	20004b60 	.word	0x20004b60
    5edc:	20004b64 	.word	0x20004b64
    5ee0:	20000890 	.word	0x20000890

00005ee4 <TCP_SocketInit>:

tcbError_t TCP_SocketInit(tcpTCB_t *tcbPtr)
{
    5ee4:	b510      	push	{r4, lr}
    5ee6:	0004      	movs	r4, r0
	tcbError_t ret = TCB_ERROR;

	// verify that this socket is not in the list
	if (TCB_Check(tcbPtr) == false) {
    5ee8:	4b10      	ldr	r3, [pc, #64]	; (5f2c <TCP_SocketInit+0x48>)
    5eea:	4798      	blx	r3
    5eec:	2800      	cmp	r0, #0
    5eee:	d11a      	bne.n	5f26 <TCP_SocketInit+0x42>
		TCB_Reset(tcbPtr);
    5ef0:	0020      	movs	r0, r4
    5ef2:	4b0f      	ldr	r3, [pc, #60]	; (5f30 <TCP_SocketInit+0x4c>)
    5ef4:	4798      	blx	r3

		tcbPtr->localWnd        = 0; // here we should put the RX buffer size
    5ef6:	2300      	movs	r3, #0
    5ef8:	2200      	movs	r2, #0
    5efa:	83e3      	strh	r3, [r4, #30]
		tcbPtr->mss             = TCP_MAX_SEG_SIZE;
    5efc:	490d      	ldr	r1, [pc, #52]	; (5f34 <TCP_SocketInit+0x50>)
    5efe:	8421      	strh	r1, [r4, #32]
		tcbPtr->fsmState        = CLOSED;
    5f00:	213b      	movs	r1, #59	; 0x3b
    5f02:	5462      	strb	r2, [r4, r1]
		tcbPtr->connectionEvent = DUMMY_NOP;
    5f04:	200d      	movs	r0, #13
    5f06:	3101      	adds	r1, #1
    5f08:	5460      	strb	r0, [r4, r1]
		tcbPtr->rxBufferStart   = NULL;
    5f0a:	6263      	str	r3, [r4, #36]	; 0x24
		tcbPtr->rxBufState      = NO_BUFF;
    5f0c:	3910      	subs	r1, #16
    5f0e:	2000      	movs	r0, #0
    5f10:	5460      	strb	r0, [r4, r1]
		tcbPtr->txBufferStart   = NULL;
    5f12:	6323      	str	r3, [r4, #48]	; 0x30
		tcbPtr->txBufferPtr     = NULL;
    5f14:	6363      	str	r3, [r4, #52]	; 0x34
		tcbPtr->bytesToSend     = 0;
    5f16:	8723      	strh	r3, [r4, #56]	; 0x38
		tcbPtr->txBufState      = NO_BUFF;
    5f18:	333a      	adds	r3, #58	; 0x3a
    5f1a:	54e2      	strb	r2, [r4, r3]

		TCB_Insert(tcbPtr);
    5f1c:	0020      	movs	r0, r4
    5f1e:	4b06      	ldr	r3, [pc, #24]	; (5f38 <TCP_SocketInit+0x54>)
    5f20:	4798      	blx	r3
		ret = TCB_NO_ERROR;
    5f22:	2000      	movs	r0, #0
	}
	return ret;
}
    5f24:	bd10      	pop	{r4, pc}
	tcbError_t ret = TCB_ERROR;
    5f26:	2001      	movs	r0, #1
    5f28:	4240      	negs	r0, r0
    5f2a:	e7fb      	b.n	5f24 <TCP_SocketInit+0x40>
    5f2c:	00005231 	.word	0x00005231
    5f30:	00005205 	.word	0x00005205
    5f34:	000005b4 	.word	0x000005b4
    5f38:	00005199 	.word	0x00005199

00005f3c <TCP_SocketPoll>:
	}
	return ret;
}

socketState_t TCP_SocketPoll(tcpTCB_t *socket_ptr)
{
    5f3c:	b510      	push	{r4, lr}
    5f3e:	0004      	movs	r4, r0
	socketState_t tmpSocketState;

	tmpSocketState = NOT_A_SOCKET;

	if (TCB_Check(socket_ptr)) {
    5f40:	4b04      	ldr	r3, [pc, #16]	; (5f54 <TCP_SocketPoll+0x18>)
    5f42:	4798      	blx	r3
    5f44:	2800      	cmp	r0, #0
    5f46:	d002      	beq.n	5f4e <TCP_SocketPoll+0x12>
		tmpSocketState = socket_ptr->socketState;
    5f48:	234e      	movs	r3, #78	; 0x4e
    5f4a:	5ce0      	ldrb	r0, [r4, r3]
	}

	return tmpSocketState;
}
    5f4c:	bd10      	pop	{r4, pc}
	tmpSocketState = NOT_A_SOCKET;
    5f4e:	2000      	movs	r0, #0
    5f50:	e7fc      	b.n	5f4c <TCP_SocketPoll+0x10>
    5f52:	46c0      	nop			; (mov r8, r8)
    5f54:	00005231 	.word	0x00005231

00005f58 <TCP_SocketRemove>:
{
    5f58:	b510      	push	{r4, lr}
    5f5a:	0004      	movs	r4, r0
	if (TCP_SocketPoll(tcbPtr) == SOCKET_CLOSED) {
    5f5c:	4b05      	ldr	r3, [pc, #20]	; (5f74 <TCP_SocketRemove+0x1c>)
    5f5e:	4798      	blx	r3
    5f60:	2801      	cmp	r0, #1
    5f62:	d104      	bne.n	5f6e <TCP_SocketRemove+0x16>
		TCB_Remove(tcbPtr);
    5f64:	0020      	movs	r0, r4
    5f66:	4b04      	ldr	r3, [pc, #16]	; (5f78 <TCP_SocketRemove+0x20>)
    5f68:	4798      	blx	r3
		ret = TCB_NO_ERROR;
    5f6a:	2000      	movs	r0, #0
}
    5f6c:	bd10      	pop	{r4, pc}
	tcbError_t ret = TCB_ERROR;
    5f6e:	2001      	movs	r0, #1
    5f70:	4240      	negs	r0, r0
    5f72:	e7fb      	b.n	5f6c <TCP_SocketRemove+0x14>
    5f74:	00005f3d 	.word	0x00005f3d
    5f78:	000051c1 	.word	0x000051c1

00005f7c <TCP_Connect>:
	}
	return ret;
}

bool TCP_Connect(tcpTCB_t *tcbPtr, sockaddr_in_t *srvaddr)
{
    5f7c:	b570      	push	{r4, r5, r6, lr}
    5f7e:	0004      	movs	r4, r0
    5f80:	000d      	movs	r5, r1
	bool ret = false;

	if (TCP_SocketPoll(tcbPtr) == SOCKET_CLOSED) {
    5f82:	4b10      	ldr	r3, [pc, #64]	; (5fc4 <TCP_Connect+0x48>)
    5f84:	4798      	blx	r3
    5f86:	2801      	cmp	r0, #1
    5f88:	d001      	beq.n	5f8e <TCP_Connect+0x12>
	bool ret = false;
    5f8a:	2000      	movs	r0, #0
		currentTCB = tcbPtr;
		ret        = TCP_FiniteStateMachine();
	}

	return ret;
}
    5f8c:	bd70      	pop	{r4, r5, r6, pc}
		tcbPtr->destIP   = srvaddr->addr.s_addr;
    5f8e:	686b      	ldr	r3, [r5, #4]
    5f90:	6063      	str	r3, [r4, #4]
		tcbPtr->destPort = srvaddr->port;
    5f92:	882b      	ldrh	r3, [r5, #0]
    5f94:	8123      	strh	r3, [r4, #8]
		if (tcbPtr->localPort == 0) {
    5f96:	8823      	ldrh	r3, [r4, #0]
    5f98:	2b00      	cmp	r3, #0
    5f9a:	d104      	bne.n	5fa6 <TCP_Connect+0x2a>
			tcbPtr->localPort = nextAvailablePort++;
    5f9c:	4a0a      	ldr	r2, [pc, #40]	; (5fc8 <TCP_Connect+0x4c>)
    5f9e:	8bd3      	ldrh	r3, [r2, #30]
    5fa0:	1c59      	adds	r1, r3, #1
    5fa2:	83d1      	strh	r1, [r2, #30]
    5fa4:	8023      	strh	r3, [r4, #0]
		tcbPtr->socketState     = SOCKET_IN_PROGRESS;
    5fa6:	2202      	movs	r2, #2
    5fa8:	234e      	movs	r3, #78	; 0x4e
    5faa:	54e2      	strb	r2, [r4, r3]
		tcbPtr->localSeqno      = nextSequenceNumber;
    5fac:	4b06      	ldr	r3, [pc, #24]	; (5fc8 <TCP_Connect+0x4c>)
    5fae:	6a1b      	ldr	r3, [r3, #32]
    5fb0:	6163      	str	r3, [r4, #20]
		tcbPtr->connectionEvent = ACTIVE_OPEN;
    5fb2:	3a01      	subs	r2, #1
    5fb4:	233c      	movs	r3, #60	; 0x3c
    5fb6:	54e2      	strb	r2, [r4, r3]
		currentTCB = tcbPtr;
    5fb8:	4b04      	ldr	r3, [pc, #16]	; (5fcc <TCP_Connect+0x50>)
    5fba:	601c      	str	r4, [r3, #0]
		ret        = TCP_FiniteStateMachine();
    5fbc:	4b04      	ldr	r3, [pc, #16]	; (5fd0 <TCP_Connect+0x54>)
    5fbe:	4798      	blx	r3
    5fc0:	e7e4      	b.n	5f8c <TCP_Connect+0x10>
    5fc2:	46c0      	nop			; (mov r8, r8)
    5fc4:	00005f3d 	.word	0x00005f3d
    5fc8:	20000890 	.word	0x20000890
    5fcc:	20004b5c 	.word	0x20004b5c
    5fd0:	00005545 	.word	0x00005545

00005fd4 <TCP_Close>:

bool TCP_Close(tcpTCB_t *tcbPtr)
{
    5fd4:	b510      	push	{r4, lr}
    5fd6:	0004      	movs	r4, r0
	bool ret = false;

	TCP_SyslogWrite("tcp_close");
    5fd8:	4809      	ldr	r0, [pc, #36]	; (6000 <TCP_Close+0x2c>)
    5fda:	4b0a      	ldr	r3, [pc, #40]	; (6004 <TCP_Close+0x30>)
    5fdc:	4798      	blx	r3

	if (TCB_Check(tcbPtr)) {
    5fde:	0020      	movs	r0, r4
    5fe0:	4b09      	ldr	r3, [pc, #36]	; (6008 <TCP_Close+0x34>)
    5fe2:	4798      	blx	r3
    5fe4:	2800      	cmp	r0, #0
    5fe6:	d100      	bne.n	5fea <TCP_Close+0x16>
		// likely to change this to a needs TX time queue
		currentTCB = tcbPtr;
		ret        = TCP_FiniteStateMachine();
	}
	return ret;
}
    5fe8:	bd10      	pop	{r4, pc}
		tcbPtr->connectionEvent = CLOSE;
    5fea:	2200      	movs	r2, #0
    5fec:	233c      	movs	r3, #60	; 0x3c
    5fee:	54e2      	strb	r2, [r4, r3]
		tcbPtr->socketState = SOCKET_CLOSING;
    5ff0:	3204      	adds	r2, #4
    5ff2:	3312      	adds	r3, #18
    5ff4:	54e2      	strb	r2, [r4, r3]
		currentTCB = tcbPtr;
    5ff6:	4b05      	ldr	r3, [pc, #20]	; (600c <TCP_Close+0x38>)
    5ff8:	601c      	str	r4, [r3, #0]
		ret        = TCP_FiniteStateMachine();
    5ffa:	4b05      	ldr	r3, [pc, #20]	; (6010 <TCP_Close+0x3c>)
    5ffc:	4798      	blx	r3
    5ffe:	e7f3      	b.n	5fe8 <TCP_Close+0x14>
    6000:	0000812c 	.word	0x0000812c
    6004:	00005197 	.word	0x00005197
    6008:	00005231 	.word	0x00005231
    600c:	20004b5c 	.word	0x20004b5c
    6010:	00005545 	.word	0x00005545

00006014 <TCP_Send>:

bool TCP_Send(tcpTCB_t *tcbPtr, uint8_t *data, uint16_t dataLen)
{
    6014:	b570      	push	{r4, r5, r6, lr}
    6016:	0004      	movs	r4, r0
    6018:	000d      	movs	r5, r1
    601a:	0016      	movs	r6, r2
	bool ret = false;

	if (TCP_SocketPoll(tcbPtr) == SOCKET_CONNECTED) {
    601c:	4b11      	ldr	r3, [pc, #68]	; (6064 <TCP_Send+0x50>)
    601e:	4798      	blx	r3
    6020:	2803      	cmp	r0, #3
    6022:	d001      	beq.n	6028 <TCP_Send+0x14>
	bool ret = false;
    6024:	2000      	movs	r0, #0
				ret = true;
			}
		}
	}
	return ret;
}
    6026:	bd70      	pop	{r4, r5, r6, pc}
		if (tcbPtr->txBufState == NO_BUFF) {
    6028:	233a      	movs	r3, #58	; 0x3a
    602a:	5ce3      	ldrb	r3, [r4, r3]
    602c:	2b00      	cmp	r3, #0
    602e:	d114      	bne.n	605a <TCP_Send+0x46>
			if (data != NULL) {
    6030:	2d00      	cmp	r5, #0
    6032:	d014      	beq.n	605e <TCP_Send+0x4a>
				tcbPtr->txBufferStart = data;
    6034:	6325      	str	r5, [r4, #48]	; 0x30
				tcbPtr->txBufferPtr   = tcbPtr->txBufferStart;
    6036:	6365      	str	r5, [r4, #52]	; 0x34
				tcbPtr->bytesToSend   = dataLen;
    6038:	8726      	strh	r6, [r4, #56]	; 0x38
				tcbPtr->txBufState    = TX_BUFF_IN_USE;
    603a:	3302      	adds	r3, #2
    603c:	223a      	movs	r2, #58	; 0x3a
    603e:	54a3      	strb	r3, [r4, r2]
				tcbPtr->timeoutReloadValue = TCP_START_TIMEOUT_VAL;
    6040:	3210      	adds	r2, #16
    6042:	52a3      	strh	r3, [r4, r2]
				tcbPtr->timeoutsCount      = TCP_MAX_RETRIES;
    6044:	3a45      	subs	r2, #69	; 0x45
    6046:	334a      	adds	r3, #74	; 0x4a
    6048:	54e2      	strb	r2, [r4, r3]
				tcbPtr->flags = TCP_ACK_FLAG;
    604a:	320b      	adds	r2, #11
    604c:	3301      	adds	r3, #1
    604e:	54e2      	strb	r2, [r4, r3]
				TCP_Snd(tcbPtr);
    6050:	0020      	movs	r0, r4
    6052:	4b05      	ldr	r3, [pc, #20]	; (6068 <TCP_Send+0x54>)
    6054:	4798      	blx	r3
				ret = true;
    6056:	2001      	movs	r0, #1
    6058:	e7e5      	b.n	6026 <TCP_Send+0x12>
	bool ret = false;
    605a:	2000      	movs	r0, #0
    605c:	e7e3      	b.n	6026 <TCP_Send+0x12>
    605e:	2000      	movs	r0, #0
    6060:	e7e1      	b.n	6026 <TCP_Send+0x12>
    6062:	46c0      	nop			; (mov r8, r8)
    6064:	00005f3d 	.word	0x00005f3d
    6068:	00005271 	.word	0x00005271

0000606c <TCP_SendDone>:

bool TCP_SendDone(tcpTCB_t *tcbPtr)
{
    606c:	b510      	push	{r4, lr}
    606e:	0004      	movs	r4, r0
	bool ret = false;

	if (TCB_Check(tcbPtr)) {
    6070:	4b05      	ldr	r3, [pc, #20]	; (6088 <TCP_SendDone+0x1c>)
    6072:	4798      	blx	r3
    6074:	2800      	cmp	r0, #0
    6076:	d003      	beq.n	6080 <TCP_SendDone+0x14>
		if (tcbPtr->txBufState == NO_BUFF) {
    6078:	233a      	movs	r3, #58	; 0x3a
    607a:	5ce3      	ldrb	r3, [r4, r3]
    607c:	2b00      	cmp	r3, #0
    607e:	d100      	bne.n	6082 <TCP_SendDone+0x16>
			ret = true;
		}
	}
	return ret;
}
    6080:	bd10      	pop	{r4, pc}
	bool ret = false;
    6082:	2000      	movs	r0, #0
    6084:	e7fc      	b.n	6080 <TCP_SendDone+0x14>
    6086:	46c0      	nop			; (mov r8, r8)
    6088:	00005231 	.word	0x00005231

0000608c <TCP_InsertRxBuffer>:

bool TCP_InsertRxBuffer(tcpTCB_t *tcbPtr, uint8_t *data, uint16_t data_len)
{
    608c:	b570      	push	{r4, r5, r6, lr}
    608e:	0004      	movs	r4, r0
    6090:	000e      	movs	r6, r1
    6092:	0015      	movs	r5, r2
	bool ret = false;

	if (TCB_Check(tcbPtr)) {
    6094:	4b0a      	ldr	r3, [pc, #40]	; (60c0 <TCP_InsertRxBuffer+0x34>)
    6096:	4798      	blx	r3
    6098:	2800      	cmp	r0, #0
    609a:	d00b      	beq.n	60b4 <TCP_InsertRxBuffer+0x28>
		if (tcbPtr->rxBufState == NO_BUFF) {
    609c:	232c      	movs	r3, #44	; 0x2c
    609e:	5ce3      	ldrb	r3, [r4, r3]
    60a0:	2b00      	cmp	r3, #0
    60a2:	d108      	bne.n	60b6 <TCP_InsertRxBuffer+0x2a>
			if (data != NULL) {
    60a4:	2e00      	cmp	r6, #0
    60a6:	d008      	beq.n	60ba <TCP_InsertRxBuffer+0x2e>
				tcbPtr->rxBufferStart = data;
    60a8:	6266      	str	r6, [r4, #36]	; 0x24
				tcbPtr->rxBufferPtr   = tcbPtr->rxBufferStart;
    60aa:	62a6      	str	r6, [r4, #40]	; 0x28
				tcbPtr->localWnd      = data_len; // update the available receive windows
    60ac:	83e5      	strh	r5, [r4, #30]
				tcbPtr->rxBufState    = RX_BUFF_IN_USE;
    60ae:	2201      	movs	r2, #1
    60b0:	332c      	adds	r3, #44	; 0x2c
    60b2:	54e2      	strb	r2, [r4, r3]
				ret                   = true;
			}
		}
	}
	return ret;
}
    60b4:	bd70      	pop	{r4, r5, r6, pc}
	bool ret = false;
    60b6:	2000      	movs	r0, #0
    60b8:	e7fc      	b.n	60b4 <TCP_InsertRxBuffer+0x28>
    60ba:	2000      	movs	r0, #0
    60bc:	e7fa      	b.n	60b4 <TCP_InsertRxBuffer+0x28>
    60be:	46c0      	nop			; (mov r8, r8)
    60c0:	00005231 	.word	0x00005231

000060c4 <TCP_GetReceivedData>:

int16_t TCP_GetReceivedData(tcpTCB_t *tcbPtr)
{
    60c4:	b510      	push	{r4, lr}
    60c6:	0004      	movs	r4, r0
	int16_t ret = 0;

	if (TCB_Check(tcbPtr)) {
    60c8:	4b0b      	ldr	r3, [pc, #44]	; (60f8 <TCP_GetReceivedData+0x34>)
    60ca:	4798      	blx	r3
    60cc:	2800      	cmp	r0, #0
    60ce:	d011      	beq.n	60f4 <TCP_GetReceivedData+0x30>
		if (tcbPtr->rxBufState == RX_BUFF_IN_USE) {
    60d0:	232c      	movs	r3, #44	; 0x2c
    60d2:	5ce3      	ldrb	r3, [r4, r3]
    60d4:	2b01      	cmp	r3, #1
    60d6:	d001      	beq.n	60dc <TCP_GetReceivedData+0x18>
	int16_t ret = 0;
    60d8:	2000      	movs	r0, #0
    60da:	e00c      	b.n	60f6 <TCP_GetReceivedData+0x32>
			ret = tcbPtr->rxBufferPtr - tcbPtr->rxBufferStart;
    60dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    60de:	6a62      	ldr	r2, [r4, #36]	; 0x24
    60e0:	1a98      	subs	r0, r3, r2
    60e2:	b200      	sxth	r0, r0

			if (ret != 0) {
    60e4:	2800      	cmp	r0, #0
    60e6:	d006      	beq.n	60f6 <TCP_GetReceivedData+0x32>
				tcbPtr->localWnd   = 0;
    60e8:	2300      	movs	r3, #0
    60ea:	83e3      	strh	r3, [r4, #30]
				tcbPtr->rxBufState = NO_BUFF;
    60ec:	332c      	adds	r3, #44	; 0x2c
    60ee:	2200      	movs	r2, #0
    60f0:	54e2      	strb	r2, [r4, r3]
    60f2:	e000      	b.n	60f6 <TCP_GetReceivedData+0x32>
	int16_t ret = 0;
    60f4:	2000      	movs	r0, #0
			}
		}
	}
	return ret;
}
    60f6:	bd10      	pop	{r4, pc}
    60f8:	00005231 	.word	0x00005231

000060fc <TCP_GetRxLength>:

int16_t TCP_GetRxLength(tcpTCB_t *tcbPtr)
{
    60fc:	b510      	push	{r4, lr}
    60fe:	0004      	movs	r4, r0
	int16_t ret = 0;

	if (TCB_Check(tcbPtr)) {
    6100:	4b08      	ldr	r3, [pc, #32]	; (6124 <TCP_GetRxLength+0x28>)
    6102:	4798      	blx	r3
    6104:	2800      	cmp	r0, #0
    6106:	d00a      	beq.n	611e <TCP_GetRxLength+0x22>
		if (tcbPtr->rxBufState == RX_BUFF_IN_USE) {
    6108:	232c      	movs	r3, #44	; 0x2c
    610a:	5ce3      	ldrb	r3, [r4, r3]
    610c:	2b01      	cmp	r3, #1
    610e:	d001      	beq.n	6114 <TCP_GetRxLength+0x18>
	int16_t ret = 0;
    6110:	2000      	movs	r0, #0
    6112:	e005      	b.n	6120 <TCP_GetRxLength+0x24>
			ret = tcbPtr->rxBufferPtr - tcbPtr->rxBufferStart;
    6114:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6116:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6118:	1ac0      	subs	r0, r0, r3
    611a:	b200      	sxth	r0, r0
    611c:	e000      	b.n	6120 <TCP_GetRxLength+0x24>
	int16_t ret = 0;
    611e:	2000      	movs	r0, #0
		}
	}
	return ret;
}
    6120:	bd10      	pop	{r4, pc}
    6122:	46c0      	nop			; (mov r8, r8)
    6124:	00005231 	.word	0x00005231

00006128 <TCP_Update>:

void TCP_Update(void)
{
    6128:	b570      	push	{r4, r5, r6, lr}
	tcbPtr    = NULL;
	int count = 0;

	// update sequence number and local port number in order to be different
	// for each new connection
	nextSequenceNumber++;
    612a:	4a20      	ldr	r2, [pc, #128]	; (61ac <TCP_Update+0x84>)
    612c:	6a13      	ldr	r3, [r2, #32]
    612e:	3301      	adds	r3, #1
    6130:	6213      	str	r3, [r2, #32]

	// keep local port number in the general port range
	nextAvailablePort = nextAvailablePort + 1;
    6132:	8bd3      	ldrh	r3, [r2, #30]
    6134:	3301      	adds	r3, #1
    6136:	b29b      	uxth	r3, r3
    6138:	83d3      	strh	r3, [r2, #30]
	if (nextAvailablePort < LOCAL_TCP_PORT_START_NUMBER) {
    613a:	4a1d      	ldr	r2, [pc, #116]	; (61b0 <TCP_Update+0x88>)
    613c:	4293      	cmp	r3, r2
    613e:	d802      	bhi.n	6146 <TCP_Update+0x1e>
		nextAvailablePort = LOCAL_TCP_PORT_START_NUMBER;
    6140:	3201      	adds	r2, #1
    6142:	4b1a      	ldr	r3, [pc, #104]	; (61ac <TCP_Update+0x84>)
    6144:	83da      	strh	r2, [r3, #30]
	}
	// TO DO also local seq number should be "random"

	tcbPtr = tcbList;
    6146:	4b1b      	ldr	r3, [pc, #108]	; (61b4 <TCP_Update+0x8c>)
    6148:	681c      	ldr	r4, [r3, #0]
	int count = 0;
    614a:	2500      	movs	r5, #0
	while ((tcbPtr != NULL) && (count < tcbListSize)) {
    614c:	e001      	b.n	6152 <TCP_Update+0x2a>
						TCP_FiniteStateMachine();
					}
				}
			}
		}
		tcbPtr = tcbPtr->nextTCB;
    614e:	6c24      	ldr	r4, [r4, #64]	; 0x40
		count++;
    6150:	3501      	adds	r5, #1
	while ((tcbPtr != NULL) && (count < tcbListSize)) {
    6152:	2c00      	cmp	r4, #0
    6154:	d029      	beq.n	61aa <TCP_Update+0x82>
    6156:	4b18      	ldr	r3, [pc, #96]	; (61b8 <TCP_Update+0x90>)
    6158:	781b      	ldrb	r3, [r3, #0]
    615a:	b25b      	sxtb	r3, r3
    615c:	429d      	cmp	r5, r3
    615e:	da24      	bge.n	61aa <TCP_Update+0x82>
		if (tcbPtr->timeout > 0) {
    6160:	2348      	movs	r3, #72	; 0x48
    6162:	5ae3      	ldrh	r3, [r4, r3]
    6164:	2b00      	cmp	r3, #0
    6166:	d0f2      	beq.n	614e <TCP_Update+0x26>
			TCP_SyslogWrite("tcp timeout");
    6168:	4814      	ldr	r0, [pc, #80]	; (61bc <TCP_Update+0x94>)
    616a:	4b15      	ldr	r3, [pc, #84]	; (61c0 <TCP_Update+0x98>)
    616c:	4798      	blx	r3
			tcbPtr->timeout = tcbPtr->timeout - 1;
    616e:	2248      	movs	r2, #72	; 0x48
    6170:	5aa3      	ldrh	r3, [r4, r2]
    6172:	3b01      	subs	r3, #1
    6174:	b29b      	uxth	r3, r3
    6176:	52a3      	strh	r3, [r4, r2]
			if (tcbPtr->timeout == 0) {
    6178:	2b00      	cmp	r3, #0
    617a:	d1e8      	bne.n	614e <TCP_Update+0x26>
				if (tcbPtr->timeoutsCount > 0) {
    617c:	334c      	adds	r3, #76	; 0x4c
    617e:	5ce3      	ldrb	r3, [r4, r3]
    6180:	2b00      	cmp	r3, #0
    6182:	d0e4      	beq.n	614e <TCP_Update+0x26>
					if (tcbPtr->connectionEvent == DUMMY_NOP) {
    6184:	3a0c      	subs	r2, #12
    6186:	5ca2      	ldrb	r2, [r4, r2]
    6188:	2a0d      	cmp	r2, #13
    618a:	d1e0      	bne.n	614e <TCP_Update+0x26>
						tcbPtr->timeout         = tcbPtr->timeoutReloadValue;
    618c:	323d      	adds	r2, #61	; 0x3d
    618e:	5aa1      	ldrh	r1, [r4, r2]
    6190:	3a02      	subs	r2, #2
    6192:	52a1      	strh	r1, [r4, r2]
						tcbPtr->timeoutsCount   = tcbPtr->timeoutsCount - 1;
    6194:	3b01      	subs	r3, #1
    6196:	3204      	adds	r2, #4
    6198:	54a3      	strb	r3, [r4, r2]
						tcbPtr->connectionEvent = TIMEOUT;
    619a:	3a40      	subs	r2, #64	; 0x40
    619c:	233c      	movs	r3, #60	; 0x3c
    619e:	54e2      	strb	r2, [r4, r3]
						currentTCB              = tcbPtr;
    61a0:	4b08      	ldr	r3, [pc, #32]	; (61c4 <TCP_Update+0x9c>)
    61a2:	601c      	str	r4, [r3, #0]
						TCP_FiniteStateMachine();
    61a4:	4b08      	ldr	r3, [pc, #32]	; (61c8 <TCP_Update+0xa0>)
    61a6:	4798      	blx	r3
    61a8:	e7d1      	b.n	614e <TCP_Update+0x26>
	}
}
    61aa:	bd70      	pop	{r4, r5, r6, pc}
    61ac:	20000890 	.word	0x20000890
    61b0:	000003ff 	.word	0x000003ff
    61b4:	20004b60 	.word	0x20004b60
    61b8:	20004b64 	.word	0x20004b64
    61bc:	00008138 	.word	0x00008138
    61c0:	00005197 	.word	0x00005197
    61c4:	20004b5c 	.word	0x20004b5c
    61c8:	00005545 	.word	0x00005545

000061cc <UDP_Start>:

/**
  Section: UDP Library APIs
*/
error_msg UDP_Start(uint32_t destIP, uint16_t srcPort, uint16_t dstPort)
{
    61cc:	b570      	push	{r4, r5, r6, lr}
    61ce:	000e      	movs	r6, r1
    61d0:	0015      	movs	r5, r2
	// Start a UDP Packet to Write UDP Header
	error_msg ret = ERROR;

	// Start IPv4 Packet to Write IPv4 Header
	ret = IPv4_Start(destIP, UDP);
    61d2:	2111      	movs	r1, #17
    61d4:	4b09      	ldr	r3, [pc, #36]	; (61fc <UDP_Start+0x30>)
    61d6:	4798      	blx	r3
    61d8:	0004      	movs	r4, r0
	
	if (ret == SUCCESS) {
    61da:	2801      	cmp	r0, #1
    61dc:	d001      	beq.n	61e2 <UDP_Start+0x16>

		// Write UDP Checksum; Initially set to '0'
		ETH_Write16(0);
	}
	return ret;
}
    61de:	0020      	movs	r0, r4
    61e0:	bd70      	pop	{r4, r5, r6, pc}
		ETH_ResetByteCount();
    61e2:	4b07      	ldr	r3, [pc, #28]	; (6200 <UDP_Start+0x34>)
    61e4:	4798      	blx	r3
		ETH_Write16(srcPort);
    61e6:	0030      	movs	r0, r6
    61e8:	4e06      	ldr	r6, [pc, #24]	; (6204 <UDP_Start+0x38>)
    61ea:	47b0      	blx	r6
		ETH_Write16(dstPort);
    61ec:	0028      	movs	r0, r5
    61ee:	47b0      	blx	r6
		ETH_Write16(0);
    61f0:	2000      	movs	r0, #0
    61f2:	47b0      	blx	r6
		ETH_Write16(0);
    61f4:	2000      	movs	r0, #0
    61f6:	47b0      	blx	r6
    61f8:	e7f1      	b.n	61de <UDP_Start+0x12>
    61fa:	46c0      	nop			; (mov r8, r8)
    61fc:	00004efd 	.word	0x00004efd
    6200:	000045ad 	.word	0x000045ad
    6204:	0000409d 	.word	0x0000409d

00006208 <UDP_Send>:

error_msg UDP_Send()
{
    6208:	b510      	push	{r4, lr}
    620a:	b082      	sub	sp, #8
	uint16_t  udpLength;
	uint16_t  cksm;
	error_msg ret = ERROR;

	udpLength = ETH_GetByteCount();
    620c:	4b17      	ldr	r3, [pc, #92]	; (626c <UDP_Send+0x64>)
    620e:	4798      	blx	r3
	udpLength = ntohs(udpLength);
    6210:	0a03      	lsrs	r3, r0, #8
    6212:	b21b      	sxth	r3, r3
    6214:	0200      	lsls	r0, r0, #8
    6216:	4318      	orrs	r0, r3
    6218:	466b      	mov	r3, sp
    621a:	1d9c      	adds	r4, r3, #6
    621c:	80d8      	strh	r0, [r3, #6]
	ETH_Insert((char *)&udpLength, 2, sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) + offsetof(udpHeader_t, length));
    621e:	2226      	movs	r2, #38	; 0x26
    6220:	2102      	movs	r1, #2
    6222:	0020      	movs	r0, r4
    6224:	4b12      	ldr	r3, [pc, #72]	; (6270 <UDP_Send+0x68>)
    6226:	4798      	blx	r3
	udpLength = htons(udpLength);
    6228:	8823      	ldrh	r3, [r4, #0]
    622a:	0a19      	lsrs	r1, r3, #8
    622c:	021b      	lsls	r3, r3, #8
    622e:	4319      	orrs	r1, r3
    6230:	b289      	uxth	r1, r1
    6232:	8021      	strh	r1, [r4, #0]

	// add the UDP header checksum
	cksm = udpLength + UDP;
    6234:	000a      	movs	r2, r1
    6236:	3211      	adds	r2, #17
    6238:	b292      	uxth	r2, r2
    623a:	ac01      	add	r4, sp, #4
    623c:	8022      	strh	r2, [r4, #0]
	cksm = ETH_TxComputeChecksum(sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) - 8, udpLength + 8, cksm);
    623e:	3108      	adds	r1, #8
    6240:	b289      	uxth	r1, r1
    6242:	201a      	movs	r0, #26
    6244:	4b0b      	ldr	r3, [pc, #44]	; (6274 <UDP_Send+0x6c>)
    6246:	4798      	blx	r3
    6248:	8020      	strh	r0, [r4, #0]

	// if the computed checksum is "0" set it to 0xFFFF
	if (cksm == 0) {
    624a:	2800      	cmp	r0, #0
    624c:	d103      	bne.n	6256 <UDP_Send+0x4e>
		cksm = 0xffff;
    624e:	2201      	movs	r2, #1
    6250:	4252      	negs	r2, r2
    6252:	ab01      	add	r3, sp, #4
    6254:	801a      	strh	r2, [r3, #0]
	}

	ETH_Insert((char *)&cksm, 2, sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) + offsetof(udpHeader_t, checksum));
    6256:	2228      	movs	r2, #40	; 0x28
    6258:	2102      	movs	r1, #2
    625a:	a801      	add	r0, sp, #4
    625c:	4b04      	ldr	r3, [pc, #16]	; (6270 <UDP_Send+0x68>)
    625e:	4798      	blx	r3

	ret = IPV4_Send(udpLength);
    6260:	466b      	mov	r3, sp
    6262:	88d8      	ldrh	r0, [r3, #6]
    6264:	4b04      	ldr	r3, [pc, #16]	; (6278 <UDP_Send+0x70>)
    6266:	4798      	blx	r3

	return ret;
}
    6268:	b002      	add	sp, #8
    626a:	bd10      	pop	{r4, pc}
    626c:	000045c5 	.word	0x000045c5
    6270:	00004341 	.word	0x00004341
    6274:	0000449d 	.word	0x0000449d
    6278:	00004fdd 	.word	0x00004fdd

0000627c <UDP_Receive>:

error_msg UDP_Receive(uint16_t udpcksm) // catch all UDP packets and dispatch them to the appropriate callback
{
    627c:	b570      	push	{r4, r5, r6, lr}
    627e:	0005      	movs	r5, r0
	error_msg            ret = ERROR;
	const udp_handler_t *hptr;
	uint16_t             x;

	hptr = UDP_CallBackTable;
	ETH_ReadBlock((char *)&udpHeader, sizeof(udpHeader));
    6280:	4c17      	ldr	r4, [pc, #92]	; (62e0 <UDP_Receive+0x64>)
    6282:	2108      	movs	r1, #8
    6284:	0020      	movs	r0, r4
    6286:	4b17      	ldr	r3, [pc, #92]	; (62e4 <UDP_Receive+0x68>)
    6288:	4798      	blx	r3

	if ((udpHeader.checksum == 0) || (udpcksm == 0)) {
    628a:	88e3      	ldrh	r3, [r4, #6]
    628c:	2b00      	cmp	r3, #0
    628e:	d003      	beq.n	6298 <UDP_Receive+0x1c>
    6290:	2d00      	cmp	r5, #0
    6292:	d001      	beq.n	6298 <UDP_Receive+0x1c>
				break;
			}
			hptr++;
		}
	} else {
		ret = UDP_CHECKSUM_FAILS;
    6294:	200a      	movs	r0, #10
    6296:	e022      	b.n	62de <UDP_Receive+0x62>
		udpHeader.dstPort = ntohs(udpHeader.dstPort); // reverse the port number
    6298:	4b11      	ldr	r3, [pc, #68]	; (62e0 <UDP_Receive+0x64>)
    629a:	8859      	ldrh	r1, [r3, #2]
    629c:	0a0a      	lsrs	r2, r1, #8
    629e:	0209      	lsls	r1, r1, #8
    62a0:	430a      	orrs	r2, r1
    62a2:	b292      	uxth	r2, r2
    62a4:	805a      	strh	r2, [r3, #2]
		destPort          = ntohs(udpHeader.srcPort);
    62a6:	8819      	ldrh	r1, [r3, #0]
    62a8:	0a08      	lsrs	r0, r1, #8
    62aa:	0209      	lsls	r1, r1, #8
    62ac:	4301      	orrs	r1, r0
    62ae:	8119      	strh	r1, [r3, #8]
		for (x = 0; x < ARRAYSIZE(UDP_CallBackTable); x++) {
    62b0:	2300      	movs	r3, #0
	hptr = UDP_CallBackTable;
    62b2:	490d      	ldr	r1, [pc, #52]	; (62e8 <UDP_Receive+0x6c>)
		for (x = 0; x < ARRAYSIZE(UDP_CallBackTable); x++) {
    62b4:	2b01      	cmp	r3, #1
    62b6:	d811      	bhi.n	62dc <UDP_Receive+0x60>
			if (hptr->portNumber == udpHeader.dstPort) {
    62b8:	8808      	ldrh	r0, [r1, #0]
    62ba:	4282      	cmp	r2, r0
    62bc:	d003      	beq.n	62c6 <UDP_Receive+0x4a>
			hptr++;
    62be:	3108      	adds	r1, #8
		for (x = 0; x < ARRAYSIZE(UDP_CallBackTable); x++) {
    62c0:	3301      	adds	r3, #1
    62c2:	b29b      	uxth	r3, r3
    62c4:	e7f6      	b.n	62b4 <UDP_Receive+0x38>
				hptr->callBack(ntohs(udpHeader.length) - sizeof(udpHeader));
    62c6:	684a      	ldr	r2, [r1, #4]
    62c8:	4b05      	ldr	r3, [pc, #20]	; (62e0 <UDP_Receive+0x64>)
    62ca:	889b      	ldrh	r3, [r3, #4]
    62cc:	0a18      	lsrs	r0, r3, #8
    62ce:	061b      	lsls	r3, r3, #24
    62d0:	0c1b      	lsrs	r3, r3, #16
    62d2:	4318      	orrs	r0, r3
    62d4:	3808      	subs	r0, #8
    62d6:	4790      	blx	r2
				ret = SUCCESS;
    62d8:	2001      	movs	r0, #1
				break;
    62da:	e000      	b.n	62de <UDP_Receive+0x62>
		ret               = PORT_NOT_AVAILABLE;
    62dc:	200d      	movs	r0, #13
	}
	return ret;
}
    62de:	bd70      	pop	{r4, r5, r6, pc}
    62e0:	200008b4 	.word	0x200008b4
    62e4:	00004019 	.word	0x00004019
    62e8:	00008144 	.word	0x00008144

000062ec <tcpip_lite_timer_task_cb>:
struct timer_task ms_tick_task;

static void tcpip_lite_timer_task_cb(const struct timer_task *const t)
{
	(void)t;
	ms_tick++;
    62ec:	4a02      	ldr	r2, [pc, #8]	; (62f8 <tcpip_lite_timer_task_cb+0xc>)
    62ee:	6813      	ldr	r3, [r2, #0]
    62f0:	3301      	adds	r3, #1
    62f2:	6013      	str	r3, [r2, #0]
}
    62f4:	4770      	bx	lr
    62f6:	46c0      	nop			; (mov r8, r8)
    62f8:	200008c0 	.word	0x200008c0

000062fc <_gettimeofday>:

int _gettimeofday(struct timeval *tv, void *tzvp)
{
    62fc:	b570      	push	{r4, r5, r6, lr}
    62fe:	1e04      	subs	r4, r0, #0
	if (!tv)
    6300:	d00d      	beq.n	631e <_gettimeofday+0x22>
		return -1;

	tv->tv_sec  = ms_tick / 1000;
    6302:	4b08      	ldr	r3, [pc, #32]	; (6324 <_gettimeofday+0x28>)
    6304:	681d      	ldr	r5, [r3, #0]
    6306:	21fa      	movs	r1, #250	; 0xfa
    6308:	0089      	lsls	r1, r1, #2
    630a:	0028      	movs	r0, r5
    630c:	4b06      	ldr	r3, [pc, #24]	; (6328 <_gettimeofday+0x2c>)
    630e:	4798      	blx	r3
    6310:	6020      	str	r0, [r4, #0]
	tv->tv_usec = ms_tick * 1000;
    6312:	20fa      	movs	r0, #250	; 0xfa
    6314:	0080      	lsls	r0, r0, #2
    6316:	4368      	muls	r0, r5
    6318:	6060      	str	r0, [r4, #4]

	return 0;
    631a:	2000      	movs	r0, #0
}
    631c:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    631e:	2001      	movs	r0, #1
    6320:	4240      	negs	r0, r0
    6322:	e7fb      	b.n	631c <_gettimeofday+0x20>
    6324:	200008c0 	.word	0x200008c0
    6328:	000063c1 	.word	0x000063c1

0000632c <SPI_ExchangeByte>:

char SPI_ExchangeByte(uint8_t dir, char v)
{
    632c:	b500      	push	{lr}
    632e:	b085      	sub	sp, #20

	struct spi_xfer xfer;
	uint8_t         buf = v;
    6330:	466b      	mov	r3, sp
    6332:	70d9      	strb	r1, [r3, #3]

	if (dir == 0) {
    6334:	2800      	cmp	r0, #0
    6336:	d00e      	beq.n	6356 <SPI_ExchangeByte+0x2a>
		xfer.rxbuf = &buf;
		xfer.txbuf = 0;
		xfer.size  = 1;
	} else {
		xfer.rxbuf = 0;
    6338:	2300      	movs	r3, #0
    633a:	9302      	str	r3, [sp, #8]
		xfer.txbuf = &buf;
    633c:	466b      	mov	r3, sp
    633e:	3303      	adds	r3, #3
    6340:	9301      	str	r3, [sp, #4]
		xfer.size  = 1;
    6342:	2301      	movs	r3, #1
    6344:	9303      	str	r3, [sp, #12]
	}

	spi_m_sync_transfer(&ETHERNET_SPI, &xfer);
    6346:	a901      	add	r1, sp, #4
    6348:	4807      	ldr	r0, [pc, #28]	; (6368 <SPI_ExchangeByte+0x3c>)
    634a:	4b08      	ldr	r3, [pc, #32]	; (636c <SPI_ExchangeByte+0x40>)
    634c:	4798      	blx	r3
	return (char)buf;
    634e:	466b      	mov	r3, sp
    6350:	78d8      	ldrb	r0, [r3, #3]
}
    6352:	b005      	add	sp, #20
    6354:	bd00      	pop	{pc}
		xfer.rxbuf = &buf;
    6356:	466b      	mov	r3, sp
    6358:	3303      	adds	r3, #3
    635a:	9302      	str	r3, [sp, #8]
		xfer.txbuf = 0;
    635c:	2300      	movs	r3, #0
    635e:	9301      	str	r3, [sp, #4]
		xfer.size  = 1;
    6360:	3301      	adds	r3, #1
    6362:	9303      	str	r3, [sp, #12]
    6364:	e7ef      	b.n	6346 <SPI_ExchangeByte+0x1a>
    6366:	46c0      	nop			; (mov r8, r8)
    6368:	20004a2c 	.word	0x20004a2c
    636c:	00002889 	.word	0x00002889

00006370 <tcpip_lite_stack_init>:

void tcpip_lite_stack_init(void)
{
    6370:	b510      	push	{r4, lr}

	spi_m_sync_enable(&ETHERNET_SPI);
    6372:	480a      	ldr	r0, [pc, #40]	; (639c <tcpip_lite_stack_init+0x2c>)
    6374:	4b0a      	ldr	r3, [pc, #40]	; (63a0 <tcpip_lite_stack_init+0x30>)
    6376:	4798      	blx	r3

	Network_Init();
    6378:	4b0a      	ldr	r3, [pc, #40]	; (63a4 <tcpip_lite_stack_init+0x34>)
    637a:	4798      	blx	r3
	SYSLOG_Init();
    637c:	4b0a      	ldr	r3, [pc, #40]	; (63a8 <tcpip_lite_stack_init+0x38>)
    637e:	4798      	blx	r3

	/* Start Timer Task */

	ms_tick_task.interval = 1;
    6380:	490a      	ldr	r1, [pc, #40]	; (63ac <tcpip_lite_stack_init+0x3c>)
    6382:	2301      	movs	r3, #1
    6384:	608b      	str	r3, [r1, #8]
	ms_tick_task.cb       = tcpip_lite_timer_task_cb;
    6386:	4a0a      	ldr	r2, [pc, #40]	; (63b0 <tcpip_lite_stack_init+0x40>)
    6388:	60ca      	str	r2, [r1, #12]
	ms_tick_task.mode     = TIMER_TASK_REPEAT;
    638a:	740b      	strb	r3, [r1, #16]
	timer_add_task(&TICK_TIMER, &ms_tick_task);
    638c:	4c09      	ldr	r4, [pc, #36]	; (63b4 <tcpip_lite_stack_init+0x44>)
    638e:	0020      	movs	r0, r4
    6390:	4b09      	ldr	r3, [pc, #36]	; (63b8 <tcpip_lite_stack_init+0x48>)
    6392:	4798      	blx	r3
	timer_start(&TICK_TIMER);
    6394:	0020      	movs	r0, r4
    6396:	4b09      	ldr	r3, [pc, #36]	; (63bc <tcpip_lite_stack_init+0x4c>)
    6398:	4798      	blx	r3
}
    639a:	bd10      	pop	{r4, pc}
    639c:	20004a2c 	.word	0x20004a2c
    63a0:	00002839 	.word	0x00002839
    63a4:	00005031 	.word	0x00005031
    63a8:	00005195 	.word	0x00005195
    63ac:	20004b68 	.word	0x20004b68
    63b0:	000062ed 	.word	0x000062ed
    63b4:	20004a64 	.word	0x20004a64
    63b8:	00002ab5 	.word	0x00002ab5
    63bc:	00002a79 	.word	0x00002a79

000063c0 <__udivsi3>:
    63c0:	2200      	movs	r2, #0
    63c2:	0843      	lsrs	r3, r0, #1
    63c4:	428b      	cmp	r3, r1
    63c6:	d374      	bcc.n	64b2 <__udivsi3+0xf2>
    63c8:	0903      	lsrs	r3, r0, #4
    63ca:	428b      	cmp	r3, r1
    63cc:	d35f      	bcc.n	648e <__udivsi3+0xce>
    63ce:	0a03      	lsrs	r3, r0, #8
    63d0:	428b      	cmp	r3, r1
    63d2:	d344      	bcc.n	645e <__udivsi3+0x9e>
    63d4:	0b03      	lsrs	r3, r0, #12
    63d6:	428b      	cmp	r3, r1
    63d8:	d328      	bcc.n	642c <__udivsi3+0x6c>
    63da:	0c03      	lsrs	r3, r0, #16
    63dc:	428b      	cmp	r3, r1
    63de:	d30d      	bcc.n	63fc <__udivsi3+0x3c>
    63e0:	22ff      	movs	r2, #255	; 0xff
    63e2:	0209      	lsls	r1, r1, #8
    63e4:	ba12      	rev	r2, r2
    63e6:	0c03      	lsrs	r3, r0, #16
    63e8:	428b      	cmp	r3, r1
    63ea:	d302      	bcc.n	63f2 <__udivsi3+0x32>
    63ec:	1212      	asrs	r2, r2, #8
    63ee:	0209      	lsls	r1, r1, #8
    63f0:	d065      	beq.n	64be <__udivsi3+0xfe>
    63f2:	0b03      	lsrs	r3, r0, #12
    63f4:	428b      	cmp	r3, r1
    63f6:	d319      	bcc.n	642c <__udivsi3+0x6c>
    63f8:	e000      	b.n	63fc <__udivsi3+0x3c>
    63fa:	0a09      	lsrs	r1, r1, #8
    63fc:	0bc3      	lsrs	r3, r0, #15
    63fe:	428b      	cmp	r3, r1
    6400:	d301      	bcc.n	6406 <__udivsi3+0x46>
    6402:	03cb      	lsls	r3, r1, #15
    6404:	1ac0      	subs	r0, r0, r3
    6406:	4152      	adcs	r2, r2
    6408:	0b83      	lsrs	r3, r0, #14
    640a:	428b      	cmp	r3, r1
    640c:	d301      	bcc.n	6412 <__udivsi3+0x52>
    640e:	038b      	lsls	r3, r1, #14
    6410:	1ac0      	subs	r0, r0, r3
    6412:	4152      	adcs	r2, r2
    6414:	0b43      	lsrs	r3, r0, #13
    6416:	428b      	cmp	r3, r1
    6418:	d301      	bcc.n	641e <__udivsi3+0x5e>
    641a:	034b      	lsls	r3, r1, #13
    641c:	1ac0      	subs	r0, r0, r3
    641e:	4152      	adcs	r2, r2
    6420:	0b03      	lsrs	r3, r0, #12
    6422:	428b      	cmp	r3, r1
    6424:	d301      	bcc.n	642a <__udivsi3+0x6a>
    6426:	030b      	lsls	r3, r1, #12
    6428:	1ac0      	subs	r0, r0, r3
    642a:	4152      	adcs	r2, r2
    642c:	0ac3      	lsrs	r3, r0, #11
    642e:	428b      	cmp	r3, r1
    6430:	d301      	bcc.n	6436 <__udivsi3+0x76>
    6432:	02cb      	lsls	r3, r1, #11
    6434:	1ac0      	subs	r0, r0, r3
    6436:	4152      	adcs	r2, r2
    6438:	0a83      	lsrs	r3, r0, #10
    643a:	428b      	cmp	r3, r1
    643c:	d301      	bcc.n	6442 <__udivsi3+0x82>
    643e:	028b      	lsls	r3, r1, #10
    6440:	1ac0      	subs	r0, r0, r3
    6442:	4152      	adcs	r2, r2
    6444:	0a43      	lsrs	r3, r0, #9
    6446:	428b      	cmp	r3, r1
    6448:	d301      	bcc.n	644e <__udivsi3+0x8e>
    644a:	024b      	lsls	r3, r1, #9
    644c:	1ac0      	subs	r0, r0, r3
    644e:	4152      	adcs	r2, r2
    6450:	0a03      	lsrs	r3, r0, #8
    6452:	428b      	cmp	r3, r1
    6454:	d301      	bcc.n	645a <__udivsi3+0x9a>
    6456:	020b      	lsls	r3, r1, #8
    6458:	1ac0      	subs	r0, r0, r3
    645a:	4152      	adcs	r2, r2
    645c:	d2cd      	bcs.n	63fa <__udivsi3+0x3a>
    645e:	09c3      	lsrs	r3, r0, #7
    6460:	428b      	cmp	r3, r1
    6462:	d301      	bcc.n	6468 <__udivsi3+0xa8>
    6464:	01cb      	lsls	r3, r1, #7
    6466:	1ac0      	subs	r0, r0, r3
    6468:	4152      	adcs	r2, r2
    646a:	0983      	lsrs	r3, r0, #6
    646c:	428b      	cmp	r3, r1
    646e:	d301      	bcc.n	6474 <__udivsi3+0xb4>
    6470:	018b      	lsls	r3, r1, #6
    6472:	1ac0      	subs	r0, r0, r3
    6474:	4152      	adcs	r2, r2
    6476:	0943      	lsrs	r3, r0, #5
    6478:	428b      	cmp	r3, r1
    647a:	d301      	bcc.n	6480 <__udivsi3+0xc0>
    647c:	014b      	lsls	r3, r1, #5
    647e:	1ac0      	subs	r0, r0, r3
    6480:	4152      	adcs	r2, r2
    6482:	0903      	lsrs	r3, r0, #4
    6484:	428b      	cmp	r3, r1
    6486:	d301      	bcc.n	648c <__udivsi3+0xcc>
    6488:	010b      	lsls	r3, r1, #4
    648a:	1ac0      	subs	r0, r0, r3
    648c:	4152      	adcs	r2, r2
    648e:	08c3      	lsrs	r3, r0, #3
    6490:	428b      	cmp	r3, r1
    6492:	d301      	bcc.n	6498 <__udivsi3+0xd8>
    6494:	00cb      	lsls	r3, r1, #3
    6496:	1ac0      	subs	r0, r0, r3
    6498:	4152      	adcs	r2, r2
    649a:	0883      	lsrs	r3, r0, #2
    649c:	428b      	cmp	r3, r1
    649e:	d301      	bcc.n	64a4 <__udivsi3+0xe4>
    64a0:	008b      	lsls	r3, r1, #2
    64a2:	1ac0      	subs	r0, r0, r3
    64a4:	4152      	adcs	r2, r2
    64a6:	0843      	lsrs	r3, r0, #1
    64a8:	428b      	cmp	r3, r1
    64aa:	d301      	bcc.n	64b0 <__udivsi3+0xf0>
    64ac:	004b      	lsls	r3, r1, #1
    64ae:	1ac0      	subs	r0, r0, r3
    64b0:	4152      	adcs	r2, r2
    64b2:	1a41      	subs	r1, r0, r1
    64b4:	d200      	bcs.n	64b8 <__udivsi3+0xf8>
    64b6:	4601      	mov	r1, r0
    64b8:	4152      	adcs	r2, r2
    64ba:	4610      	mov	r0, r2
    64bc:	4770      	bx	lr
    64be:	e7ff      	b.n	64c0 <__udivsi3+0x100>
    64c0:	b501      	push	{r0, lr}
    64c2:	2000      	movs	r0, #0
    64c4:	f000 f806 	bl	64d4 <__aeabi_idiv0>
    64c8:	bd02      	pop	{r1, pc}
    64ca:	46c0      	nop			; (mov r8, r8)

000064cc <__aeabi_uidivmod>:
    64cc:	2900      	cmp	r1, #0
    64ce:	d0f7      	beq.n	64c0 <__udivsi3+0x100>
    64d0:	e776      	b.n	63c0 <__udivsi3>
    64d2:	4770      	bx	lr

000064d4 <__aeabi_idiv0>:
    64d4:	4770      	bx	lr
    64d6:	46c0      	nop			; (mov r8, r8)

000064d8 <__aeabi_lmul>:
    64d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    64da:	46ce      	mov	lr, r9
    64dc:	4647      	mov	r7, r8
    64de:	0415      	lsls	r5, r2, #16
    64e0:	0c2d      	lsrs	r5, r5, #16
    64e2:	002e      	movs	r6, r5
    64e4:	b580      	push	{r7, lr}
    64e6:	0407      	lsls	r7, r0, #16
    64e8:	0c14      	lsrs	r4, r2, #16
    64ea:	0c3f      	lsrs	r7, r7, #16
    64ec:	4699      	mov	r9, r3
    64ee:	0c03      	lsrs	r3, r0, #16
    64f0:	437e      	muls	r6, r7
    64f2:	435d      	muls	r5, r3
    64f4:	4367      	muls	r7, r4
    64f6:	4363      	muls	r3, r4
    64f8:	197f      	adds	r7, r7, r5
    64fa:	0c34      	lsrs	r4, r6, #16
    64fc:	19e4      	adds	r4, r4, r7
    64fe:	469c      	mov	ip, r3
    6500:	42a5      	cmp	r5, r4
    6502:	d903      	bls.n	650c <__aeabi_lmul+0x34>
    6504:	2380      	movs	r3, #128	; 0x80
    6506:	025b      	lsls	r3, r3, #9
    6508:	4698      	mov	r8, r3
    650a:	44c4      	add	ip, r8
    650c:	464b      	mov	r3, r9
    650e:	4351      	muls	r1, r2
    6510:	4343      	muls	r3, r0
    6512:	0436      	lsls	r6, r6, #16
    6514:	0c36      	lsrs	r6, r6, #16
    6516:	0c25      	lsrs	r5, r4, #16
    6518:	0424      	lsls	r4, r4, #16
    651a:	4465      	add	r5, ip
    651c:	19a4      	adds	r4, r4, r6
    651e:	1859      	adds	r1, r3, r1
    6520:	1949      	adds	r1, r1, r5
    6522:	0020      	movs	r0, r4
    6524:	bc0c      	pop	{r2, r3}
    6526:	4690      	mov	r8, r2
    6528:	4699      	mov	r9, r3
    652a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000652c <__ffssi2>:
    652c:	b510      	push	{r4, lr}
    652e:	2300      	movs	r3, #0
    6530:	2800      	cmp	r0, #0
    6532:	d002      	beq.n	653a <__ffssi2+0xe>
    6534:	f000 f804 	bl	6540 <__ctzsi2>
    6538:	1c43      	adds	r3, r0, #1
    653a:	0018      	movs	r0, r3
    653c:	bd10      	pop	{r4, pc}
    653e:	46c0      	nop			; (mov r8, r8)

00006540 <__ctzsi2>:
    6540:	4241      	negs	r1, r0
    6542:	4008      	ands	r0, r1
    6544:	211c      	movs	r1, #28
    6546:	2301      	movs	r3, #1
    6548:	041b      	lsls	r3, r3, #16
    654a:	4298      	cmp	r0, r3
    654c:	d301      	bcc.n	6552 <__ctzsi2+0x12>
    654e:	0c00      	lsrs	r0, r0, #16
    6550:	3910      	subs	r1, #16
    6552:	0a1b      	lsrs	r3, r3, #8
    6554:	4298      	cmp	r0, r3
    6556:	d301      	bcc.n	655c <__ctzsi2+0x1c>
    6558:	0a00      	lsrs	r0, r0, #8
    655a:	3908      	subs	r1, #8
    655c:	091b      	lsrs	r3, r3, #4
    655e:	4298      	cmp	r0, r3
    6560:	d301      	bcc.n	6566 <__ctzsi2+0x26>
    6562:	0900      	lsrs	r0, r0, #4
    6564:	3904      	subs	r1, #4
    6566:	a202      	add	r2, pc, #8	; (adr r2, 6570 <__ctzsi2+0x30>)
    6568:	5c10      	ldrb	r0, [r2, r0]
    656a:	1a40      	subs	r0, r0, r1
    656c:	4770      	bx	lr
    656e:	46c0      	nop			; (mov r8, r8)
    6570:	1d1d1c1b 	.word	0x1d1d1c1b
    6574:	1e1e1e1e 	.word	0x1e1e1e1e
    6578:	1f1f1f1f 	.word	0x1f1f1f1f
    657c:	1f1f1f1f 	.word	0x1f1f1f1f

00006580 <atoi>:
    6580:	b510      	push	{r4, lr}
    6582:	220a      	movs	r2, #10
    6584:	2100      	movs	r1, #0
    6586:	f000 f9c7 	bl	6918 <strtol>
    658a:	bd10      	pop	{r4, pc}

0000658c <__libc_init_array>:
    658c:	b570      	push	{r4, r5, r6, lr}
    658e:	2600      	movs	r6, #0
    6590:	4d0c      	ldr	r5, [pc, #48]	; (65c4 <__libc_init_array+0x38>)
    6592:	4c0d      	ldr	r4, [pc, #52]	; (65c8 <__libc_init_array+0x3c>)
    6594:	1b64      	subs	r4, r4, r5
    6596:	10a4      	asrs	r4, r4, #2
    6598:	42a6      	cmp	r6, r4
    659a:	d109      	bne.n	65b0 <__libc_init_array+0x24>
    659c:	2600      	movs	r6, #0
    659e:	f001 fea9 	bl	82f4 <_init>
    65a2:	4d0a      	ldr	r5, [pc, #40]	; (65cc <__libc_init_array+0x40>)
    65a4:	4c0a      	ldr	r4, [pc, #40]	; (65d0 <__libc_init_array+0x44>)
    65a6:	1b64      	subs	r4, r4, r5
    65a8:	10a4      	asrs	r4, r4, #2
    65aa:	42a6      	cmp	r6, r4
    65ac:	d105      	bne.n	65ba <__libc_init_array+0x2e>
    65ae:	bd70      	pop	{r4, r5, r6, pc}
    65b0:	00b3      	lsls	r3, r6, #2
    65b2:	58eb      	ldr	r3, [r5, r3]
    65b4:	4798      	blx	r3
    65b6:	3601      	adds	r6, #1
    65b8:	e7ee      	b.n	6598 <__libc_init_array+0xc>
    65ba:	00b3      	lsls	r3, r6, #2
    65bc:	58eb      	ldr	r3, [r5, r3]
    65be:	4798      	blx	r3
    65c0:	3601      	adds	r6, #1
    65c2:	e7f2      	b.n	65aa <__libc_init_array+0x1e>
    65c4:	00008300 	.word	0x00008300
    65c8:	00008300 	.word	0x00008300
    65cc:	00008300 	.word	0x00008300
    65d0:	00008304 	.word	0x00008304

000065d4 <memcmp>:
    65d4:	b530      	push	{r4, r5, lr}
    65d6:	2400      	movs	r4, #0
    65d8:	42a2      	cmp	r2, r4
    65da:	d101      	bne.n	65e0 <memcmp+0xc>
    65dc:	2000      	movs	r0, #0
    65de:	e005      	b.n	65ec <memcmp+0x18>
    65e0:	5d03      	ldrb	r3, [r0, r4]
    65e2:	1c65      	adds	r5, r4, #1
    65e4:	5d0c      	ldrb	r4, [r1, r4]
    65e6:	42a3      	cmp	r3, r4
    65e8:	d001      	beq.n	65ee <memcmp+0x1a>
    65ea:	1b18      	subs	r0, r3, r4
    65ec:	bd30      	pop	{r4, r5, pc}
    65ee:	002c      	movs	r4, r5
    65f0:	e7f2      	b.n	65d8 <memcmp+0x4>

000065f2 <memcpy>:
    65f2:	2300      	movs	r3, #0
    65f4:	b510      	push	{r4, lr}
    65f6:	429a      	cmp	r2, r3
    65f8:	d100      	bne.n	65fc <memcpy+0xa>
    65fa:	bd10      	pop	{r4, pc}
    65fc:	5ccc      	ldrb	r4, [r1, r3]
    65fe:	54c4      	strb	r4, [r0, r3]
    6600:	3301      	adds	r3, #1
    6602:	e7f8      	b.n	65f6 <memcpy+0x4>

00006604 <memset>:
    6604:	0003      	movs	r3, r0
    6606:	1882      	adds	r2, r0, r2
    6608:	4293      	cmp	r3, r2
    660a:	d100      	bne.n	660e <memset+0xa>
    660c:	4770      	bx	lr
    660e:	7019      	strb	r1, [r3, #0]
    6610:	3301      	adds	r3, #1
    6612:	e7f9      	b.n	6608 <memset+0x4>

00006614 <_free_r>:
    6614:	b570      	push	{r4, r5, r6, lr}
    6616:	0005      	movs	r5, r0
    6618:	2900      	cmp	r1, #0
    661a:	d010      	beq.n	663e <_free_r+0x2a>
    661c:	1f0c      	subs	r4, r1, #4
    661e:	6823      	ldr	r3, [r4, #0]
    6620:	2b00      	cmp	r3, #0
    6622:	da00      	bge.n	6626 <_free_r+0x12>
    6624:	18e4      	adds	r4, r4, r3
    6626:	0028      	movs	r0, r5
    6628:	f000 f9e9 	bl	69fe <__malloc_lock>
    662c:	4a1d      	ldr	r2, [pc, #116]	; (66a4 <_free_r+0x90>)
    662e:	6813      	ldr	r3, [r2, #0]
    6630:	2b00      	cmp	r3, #0
    6632:	d105      	bne.n	6640 <_free_r+0x2c>
    6634:	6063      	str	r3, [r4, #4]
    6636:	6014      	str	r4, [r2, #0]
    6638:	0028      	movs	r0, r5
    663a:	f000 f9e1 	bl	6a00 <__malloc_unlock>
    663e:	bd70      	pop	{r4, r5, r6, pc}
    6640:	42a3      	cmp	r3, r4
    6642:	d909      	bls.n	6658 <_free_r+0x44>
    6644:	6821      	ldr	r1, [r4, #0]
    6646:	1860      	adds	r0, r4, r1
    6648:	4283      	cmp	r3, r0
    664a:	d1f3      	bne.n	6634 <_free_r+0x20>
    664c:	6818      	ldr	r0, [r3, #0]
    664e:	685b      	ldr	r3, [r3, #4]
    6650:	1841      	adds	r1, r0, r1
    6652:	6021      	str	r1, [r4, #0]
    6654:	e7ee      	b.n	6634 <_free_r+0x20>
    6656:	0013      	movs	r3, r2
    6658:	685a      	ldr	r2, [r3, #4]
    665a:	2a00      	cmp	r2, #0
    665c:	d001      	beq.n	6662 <_free_r+0x4e>
    665e:	42a2      	cmp	r2, r4
    6660:	d9f9      	bls.n	6656 <_free_r+0x42>
    6662:	6819      	ldr	r1, [r3, #0]
    6664:	1858      	adds	r0, r3, r1
    6666:	42a0      	cmp	r0, r4
    6668:	d10b      	bne.n	6682 <_free_r+0x6e>
    666a:	6820      	ldr	r0, [r4, #0]
    666c:	1809      	adds	r1, r1, r0
    666e:	1858      	adds	r0, r3, r1
    6670:	6019      	str	r1, [r3, #0]
    6672:	4282      	cmp	r2, r0
    6674:	d1e0      	bne.n	6638 <_free_r+0x24>
    6676:	6810      	ldr	r0, [r2, #0]
    6678:	6852      	ldr	r2, [r2, #4]
    667a:	1841      	adds	r1, r0, r1
    667c:	6019      	str	r1, [r3, #0]
    667e:	605a      	str	r2, [r3, #4]
    6680:	e7da      	b.n	6638 <_free_r+0x24>
    6682:	42a0      	cmp	r0, r4
    6684:	d902      	bls.n	668c <_free_r+0x78>
    6686:	230c      	movs	r3, #12
    6688:	602b      	str	r3, [r5, #0]
    668a:	e7d5      	b.n	6638 <_free_r+0x24>
    668c:	6821      	ldr	r1, [r4, #0]
    668e:	1860      	adds	r0, r4, r1
    6690:	4282      	cmp	r2, r0
    6692:	d103      	bne.n	669c <_free_r+0x88>
    6694:	6810      	ldr	r0, [r2, #0]
    6696:	6852      	ldr	r2, [r2, #4]
    6698:	1841      	adds	r1, r0, r1
    669a:	6021      	str	r1, [r4, #0]
    669c:	6062      	str	r2, [r4, #4]
    669e:	605c      	str	r4, [r3, #4]
    66a0:	e7ca      	b.n	6638 <_free_r+0x24>
    66a2:	46c0      	nop			; (mov r8, r8)
    66a4:	200008c4 	.word	0x200008c4

000066a8 <_malloc_r>:
    66a8:	2303      	movs	r3, #3
    66aa:	b570      	push	{r4, r5, r6, lr}
    66ac:	1ccd      	adds	r5, r1, #3
    66ae:	439d      	bics	r5, r3
    66b0:	3508      	adds	r5, #8
    66b2:	0006      	movs	r6, r0
    66b4:	2d0c      	cmp	r5, #12
    66b6:	d21e      	bcs.n	66f6 <_malloc_r+0x4e>
    66b8:	250c      	movs	r5, #12
    66ba:	42a9      	cmp	r1, r5
    66bc:	d81d      	bhi.n	66fa <_malloc_r+0x52>
    66be:	0030      	movs	r0, r6
    66c0:	f000 f99d 	bl	69fe <__malloc_lock>
    66c4:	4a25      	ldr	r2, [pc, #148]	; (675c <_malloc_r+0xb4>)
    66c6:	6814      	ldr	r4, [r2, #0]
    66c8:	0021      	movs	r1, r4
    66ca:	2900      	cmp	r1, #0
    66cc:	d119      	bne.n	6702 <_malloc_r+0x5a>
    66ce:	4c24      	ldr	r4, [pc, #144]	; (6760 <_malloc_r+0xb8>)
    66d0:	6823      	ldr	r3, [r4, #0]
    66d2:	2b00      	cmp	r3, #0
    66d4:	d103      	bne.n	66de <_malloc_r+0x36>
    66d6:	0030      	movs	r0, r6
    66d8:	f000 f844 	bl	6764 <_sbrk_r>
    66dc:	6020      	str	r0, [r4, #0]
    66de:	0029      	movs	r1, r5
    66e0:	0030      	movs	r0, r6
    66e2:	f000 f83f 	bl	6764 <_sbrk_r>
    66e6:	1c43      	adds	r3, r0, #1
    66e8:	d12c      	bne.n	6744 <_malloc_r+0x9c>
    66ea:	230c      	movs	r3, #12
    66ec:	0030      	movs	r0, r6
    66ee:	6033      	str	r3, [r6, #0]
    66f0:	f000 f986 	bl	6a00 <__malloc_unlock>
    66f4:	e003      	b.n	66fe <_malloc_r+0x56>
    66f6:	2d00      	cmp	r5, #0
    66f8:	dadf      	bge.n	66ba <_malloc_r+0x12>
    66fa:	230c      	movs	r3, #12
    66fc:	6033      	str	r3, [r6, #0]
    66fe:	2000      	movs	r0, #0
    6700:	bd70      	pop	{r4, r5, r6, pc}
    6702:	680b      	ldr	r3, [r1, #0]
    6704:	1b5b      	subs	r3, r3, r5
    6706:	d41a      	bmi.n	673e <_malloc_r+0x96>
    6708:	2b0b      	cmp	r3, #11
    670a:	d903      	bls.n	6714 <_malloc_r+0x6c>
    670c:	600b      	str	r3, [r1, #0]
    670e:	18cc      	adds	r4, r1, r3
    6710:	6025      	str	r5, [r4, #0]
    6712:	e003      	b.n	671c <_malloc_r+0x74>
    6714:	428c      	cmp	r4, r1
    6716:	d10e      	bne.n	6736 <_malloc_r+0x8e>
    6718:	6863      	ldr	r3, [r4, #4]
    671a:	6013      	str	r3, [r2, #0]
    671c:	0030      	movs	r0, r6
    671e:	f000 f96f 	bl	6a00 <__malloc_unlock>
    6722:	0020      	movs	r0, r4
    6724:	2207      	movs	r2, #7
    6726:	300b      	adds	r0, #11
    6728:	1d23      	adds	r3, r4, #4
    672a:	4390      	bics	r0, r2
    672c:	1ac3      	subs	r3, r0, r3
    672e:	d0e7      	beq.n	6700 <_malloc_r+0x58>
    6730:	425a      	negs	r2, r3
    6732:	50e2      	str	r2, [r4, r3]
    6734:	e7e4      	b.n	6700 <_malloc_r+0x58>
    6736:	684b      	ldr	r3, [r1, #4]
    6738:	6063      	str	r3, [r4, #4]
    673a:	000c      	movs	r4, r1
    673c:	e7ee      	b.n	671c <_malloc_r+0x74>
    673e:	000c      	movs	r4, r1
    6740:	6849      	ldr	r1, [r1, #4]
    6742:	e7c2      	b.n	66ca <_malloc_r+0x22>
    6744:	2303      	movs	r3, #3
    6746:	1cc4      	adds	r4, r0, #3
    6748:	439c      	bics	r4, r3
    674a:	42a0      	cmp	r0, r4
    674c:	d0e0      	beq.n	6710 <_malloc_r+0x68>
    674e:	1a21      	subs	r1, r4, r0
    6750:	0030      	movs	r0, r6
    6752:	f000 f807 	bl	6764 <_sbrk_r>
    6756:	1c43      	adds	r3, r0, #1
    6758:	d1da      	bne.n	6710 <_malloc_r+0x68>
    675a:	e7c6      	b.n	66ea <_malloc_r+0x42>
    675c:	200008c4 	.word	0x200008c4
    6760:	200008c8 	.word	0x200008c8

00006764 <_sbrk_r>:
    6764:	2300      	movs	r3, #0
    6766:	b570      	push	{r4, r5, r6, lr}
    6768:	4c06      	ldr	r4, [pc, #24]	; (6784 <_sbrk_r+0x20>)
    676a:	0005      	movs	r5, r0
    676c:	0008      	movs	r0, r1
    676e:	6023      	str	r3, [r4, #0]
    6770:	f7fc fa2c 	bl	2bcc <_sbrk>
    6774:	1c43      	adds	r3, r0, #1
    6776:	d103      	bne.n	6780 <_sbrk_r+0x1c>
    6778:	6823      	ldr	r3, [r4, #0]
    677a:	2b00      	cmp	r3, #0
    677c:	d000      	beq.n	6780 <_sbrk_r+0x1c>
    677e:	602b      	str	r3, [r5, #0]
    6780:	bd70      	pop	{r4, r5, r6, pc}
    6782:	46c0      	nop			; (mov r8, r8)
    6784:	20004b7c 	.word	0x20004b7c

00006788 <siprintf>:
    6788:	b40e      	push	{r1, r2, r3}
    678a:	b510      	push	{r4, lr}
    678c:	b09d      	sub	sp, #116	; 0x74
    678e:	a902      	add	r1, sp, #8
    6790:	9002      	str	r0, [sp, #8]
    6792:	6108      	str	r0, [r1, #16]
    6794:	480b      	ldr	r0, [pc, #44]	; (67c4 <siprintf+0x3c>)
    6796:	2482      	movs	r4, #130	; 0x82
    6798:	6088      	str	r0, [r1, #8]
    679a:	6148      	str	r0, [r1, #20]
    679c:	2001      	movs	r0, #1
    679e:	4240      	negs	r0, r0
    67a0:	ab1f      	add	r3, sp, #124	; 0x7c
    67a2:	81c8      	strh	r0, [r1, #14]
    67a4:	4808      	ldr	r0, [pc, #32]	; (67c8 <siprintf+0x40>)
    67a6:	cb04      	ldmia	r3!, {r2}
    67a8:	00a4      	lsls	r4, r4, #2
    67aa:	6800      	ldr	r0, [r0, #0]
    67ac:	9301      	str	r3, [sp, #4]
    67ae:	818c      	strh	r4, [r1, #12]
    67b0:	f000 f98a 	bl	6ac8 <_svfiprintf_r>
    67b4:	2300      	movs	r3, #0
    67b6:	9a02      	ldr	r2, [sp, #8]
    67b8:	7013      	strb	r3, [r2, #0]
    67ba:	b01d      	add	sp, #116	; 0x74
    67bc:	bc10      	pop	{r4}
    67be:	bc08      	pop	{r3}
    67c0:	b003      	add	sp, #12
    67c2:	4718      	bx	r3
    67c4:	7fffffff 	.word	0x7fffffff
    67c8:	20000004 	.word	0x20000004

000067cc <strlen>:
    67cc:	2300      	movs	r3, #0
    67ce:	5cc2      	ldrb	r2, [r0, r3]
    67d0:	3301      	adds	r3, #1
    67d2:	2a00      	cmp	r2, #0
    67d4:	d1fb      	bne.n	67ce <strlen+0x2>
    67d6:	1e58      	subs	r0, r3, #1
    67d8:	4770      	bx	lr

000067da <strstr>:
    67da:	b510      	push	{r4, lr}
    67dc:	0002      	movs	r2, r0
    67de:	7800      	ldrb	r0, [r0, #0]
    67e0:	2800      	cmp	r0, #0
    67e2:	d104      	bne.n	67ee <strstr+0x14>
    67e4:	7809      	ldrb	r1, [r1, #0]
    67e6:	2900      	cmp	r1, #0
    67e8:	d00d      	beq.n	6806 <strstr+0x2c>
    67ea:	bd10      	pop	{r4, pc}
    67ec:	3201      	adds	r2, #1
    67ee:	7810      	ldrb	r0, [r2, #0]
    67f0:	2800      	cmp	r0, #0
    67f2:	d0fa      	beq.n	67ea <strstr+0x10>
    67f4:	2300      	movs	r3, #0
    67f6:	5cc8      	ldrb	r0, [r1, r3]
    67f8:	2800      	cmp	r0, #0
    67fa:	d004      	beq.n	6806 <strstr+0x2c>
    67fc:	5cd4      	ldrb	r4, [r2, r3]
    67fe:	4284      	cmp	r4, r0
    6800:	d1f4      	bne.n	67ec <strstr+0x12>
    6802:	3301      	adds	r3, #1
    6804:	e7f7      	b.n	67f6 <strstr+0x1c>
    6806:	0010      	movs	r0, r2
    6808:	e7ef      	b.n	67ea <strstr+0x10>
	...

0000680c <_strtol_l.isra.0>:
    680c:	b5f0      	push	{r4, r5, r6, r7, lr}
    680e:	001f      	movs	r7, r3
    6810:	000e      	movs	r6, r1
    6812:	b087      	sub	sp, #28
    6814:	9005      	str	r0, [sp, #20]
    6816:	9103      	str	r1, [sp, #12]
    6818:	9202      	str	r2, [sp, #8]
    681a:	980c      	ldr	r0, [sp, #48]	; 0x30
    681c:	7834      	ldrb	r4, [r6, #0]
    681e:	f000 f8d9 	bl	69d4 <__locale_ctype_ptr_l>
    6822:	2208      	movs	r2, #8
    6824:	1900      	adds	r0, r0, r4
    6826:	7843      	ldrb	r3, [r0, #1]
    6828:	1c75      	adds	r5, r6, #1
    682a:	4013      	ands	r3, r2
    682c:	d10c      	bne.n	6848 <_strtol_l.isra.0+0x3c>
    682e:	2c2d      	cmp	r4, #45	; 0x2d
    6830:	d10c      	bne.n	684c <_strtol_l.isra.0+0x40>
    6832:	3301      	adds	r3, #1
    6834:	782c      	ldrb	r4, [r5, #0]
    6836:	9301      	str	r3, [sp, #4]
    6838:	1cb5      	adds	r5, r6, #2
    683a:	2f00      	cmp	r7, #0
    683c:	d00c      	beq.n	6858 <_strtol_l.isra.0+0x4c>
    683e:	2f10      	cmp	r7, #16
    6840:	d114      	bne.n	686c <_strtol_l.isra.0+0x60>
    6842:	2c30      	cmp	r4, #48	; 0x30
    6844:	d00a      	beq.n	685c <_strtol_l.isra.0+0x50>
    6846:	e011      	b.n	686c <_strtol_l.isra.0+0x60>
    6848:	002e      	movs	r6, r5
    684a:	e7e6      	b.n	681a <_strtol_l.isra.0+0xe>
    684c:	9301      	str	r3, [sp, #4]
    684e:	2c2b      	cmp	r4, #43	; 0x2b
    6850:	d1f3      	bne.n	683a <_strtol_l.isra.0+0x2e>
    6852:	782c      	ldrb	r4, [r5, #0]
    6854:	1cb5      	adds	r5, r6, #2
    6856:	e7f0      	b.n	683a <_strtol_l.isra.0+0x2e>
    6858:	2c30      	cmp	r4, #48	; 0x30
    685a:	d12f      	bne.n	68bc <_strtol_l.isra.0+0xb0>
    685c:	2220      	movs	r2, #32
    685e:	782b      	ldrb	r3, [r5, #0]
    6860:	4393      	bics	r3, r2
    6862:	2b58      	cmp	r3, #88	; 0x58
    6864:	d151      	bne.n	690a <_strtol_l.isra.0+0xfe>
    6866:	2710      	movs	r7, #16
    6868:	786c      	ldrb	r4, [r5, #1]
    686a:	3502      	adds	r5, #2
    686c:	9b01      	ldr	r3, [sp, #4]
    686e:	4a29      	ldr	r2, [pc, #164]	; (6914 <_strtol_l.isra.0+0x108>)
    6870:	0039      	movs	r1, r7
    6872:	189e      	adds	r6, r3, r2
    6874:	0030      	movs	r0, r6
    6876:	f7ff fe29 	bl	64cc <__aeabi_uidivmod>
    687a:	0030      	movs	r0, r6
    687c:	9104      	str	r1, [sp, #16]
    687e:	0039      	movs	r1, r7
    6880:	f7ff fd9e 	bl	63c0 <__udivsi3>
    6884:	2101      	movs	r1, #1
    6886:	2300      	movs	r3, #0
    6888:	4249      	negs	r1, r1
    688a:	0002      	movs	r2, r0
    688c:	468c      	mov	ip, r1
    688e:	0018      	movs	r0, r3
    6890:	0021      	movs	r1, r4
    6892:	3930      	subs	r1, #48	; 0x30
    6894:	2909      	cmp	r1, #9
    6896:	d813      	bhi.n	68c0 <_strtol_l.isra.0+0xb4>
    6898:	000c      	movs	r4, r1
    689a:	42a7      	cmp	r7, r4
    689c:	dd1c      	ble.n	68d8 <_strtol_l.isra.0+0xcc>
    689e:	1c59      	adds	r1, r3, #1
    68a0:	d009      	beq.n	68b6 <_strtol_l.isra.0+0xaa>
    68a2:	4663      	mov	r3, ip
    68a4:	4282      	cmp	r2, r0
    68a6:	d306      	bcc.n	68b6 <_strtol_l.isra.0+0xaa>
    68a8:	d102      	bne.n	68b0 <_strtol_l.isra.0+0xa4>
    68aa:	9904      	ldr	r1, [sp, #16]
    68ac:	42a1      	cmp	r1, r4
    68ae:	db02      	blt.n	68b6 <_strtol_l.isra.0+0xaa>
    68b0:	2301      	movs	r3, #1
    68b2:	4378      	muls	r0, r7
    68b4:	1820      	adds	r0, r4, r0
    68b6:	782c      	ldrb	r4, [r5, #0]
    68b8:	3501      	adds	r5, #1
    68ba:	e7e9      	b.n	6890 <_strtol_l.isra.0+0x84>
    68bc:	270a      	movs	r7, #10
    68be:	e7d5      	b.n	686c <_strtol_l.isra.0+0x60>
    68c0:	0021      	movs	r1, r4
    68c2:	3941      	subs	r1, #65	; 0x41
    68c4:	2919      	cmp	r1, #25
    68c6:	d801      	bhi.n	68cc <_strtol_l.isra.0+0xc0>
    68c8:	3c37      	subs	r4, #55	; 0x37
    68ca:	e7e6      	b.n	689a <_strtol_l.isra.0+0x8e>
    68cc:	0021      	movs	r1, r4
    68ce:	3961      	subs	r1, #97	; 0x61
    68d0:	2919      	cmp	r1, #25
    68d2:	d801      	bhi.n	68d8 <_strtol_l.isra.0+0xcc>
    68d4:	3c57      	subs	r4, #87	; 0x57
    68d6:	e7e0      	b.n	689a <_strtol_l.isra.0+0x8e>
    68d8:	1c5a      	adds	r2, r3, #1
    68da:	d108      	bne.n	68ee <_strtol_l.isra.0+0xe2>
    68dc:	9a05      	ldr	r2, [sp, #20]
    68de:	3323      	adds	r3, #35	; 0x23
    68e0:	6013      	str	r3, [r2, #0]
    68e2:	9b02      	ldr	r3, [sp, #8]
    68e4:	0030      	movs	r0, r6
    68e6:	2b00      	cmp	r3, #0
    68e8:	d10b      	bne.n	6902 <_strtol_l.isra.0+0xf6>
    68ea:	b007      	add	sp, #28
    68ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68ee:	9a01      	ldr	r2, [sp, #4]
    68f0:	2a00      	cmp	r2, #0
    68f2:	d000      	beq.n	68f6 <_strtol_l.isra.0+0xea>
    68f4:	4240      	negs	r0, r0
    68f6:	9a02      	ldr	r2, [sp, #8]
    68f8:	2a00      	cmp	r2, #0
    68fa:	d0f6      	beq.n	68ea <_strtol_l.isra.0+0xde>
    68fc:	9a03      	ldr	r2, [sp, #12]
    68fe:	2b00      	cmp	r3, #0
    6900:	d000      	beq.n	6904 <_strtol_l.isra.0+0xf8>
    6902:	1e6a      	subs	r2, r5, #1
    6904:	9b02      	ldr	r3, [sp, #8]
    6906:	601a      	str	r2, [r3, #0]
    6908:	e7ef      	b.n	68ea <_strtol_l.isra.0+0xde>
    690a:	2430      	movs	r4, #48	; 0x30
    690c:	2f00      	cmp	r7, #0
    690e:	d1ad      	bne.n	686c <_strtol_l.isra.0+0x60>
    6910:	3708      	adds	r7, #8
    6912:	e7ab      	b.n	686c <_strtol_l.isra.0+0x60>
    6914:	7fffffff 	.word	0x7fffffff

00006918 <strtol>:
    6918:	b537      	push	{r0, r1, r2, r4, r5, lr}
    691a:	0013      	movs	r3, r2
    691c:	4a06      	ldr	r2, [pc, #24]	; (6938 <strtol+0x20>)
    691e:	0005      	movs	r5, r0
    6920:	6810      	ldr	r0, [r2, #0]
    6922:	6a04      	ldr	r4, [r0, #32]
    6924:	2c00      	cmp	r4, #0
    6926:	d100      	bne.n	692a <strtol+0x12>
    6928:	4c04      	ldr	r4, [pc, #16]	; (693c <strtol+0x24>)
    692a:	000a      	movs	r2, r1
    692c:	9400      	str	r4, [sp, #0]
    692e:	0029      	movs	r1, r5
    6930:	f7ff ff6c 	bl	680c <_strtol_l.isra.0>
    6934:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    6936:	46c0      	nop			; (mov r8, r8)
    6938:	20000004 	.word	0x20000004
    693c:	20000068 	.word	0x20000068

00006940 <time>:
    6940:	b513      	push	{r0, r1, r4, lr}
    6942:	4b08      	ldr	r3, [pc, #32]	; (6964 <time+0x24>)
    6944:	0004      	movs	r4, r0
    6946:	2200      	movs	r2, #0
    6948:	4669      	mov	r1, sp
    694a:	6818      	ldr	r0, [r3, #0]
    694c:	f000 f830 	bl	69b0 <_gettimeofday_r>
    6950:	2800      	cmp	r0, #0
    6952:	da02      	bge.n	695a <time+0x1a>
    6954:	2301      	movs	r3, #1
    6956:	425b      	negs	r3, r3
    6958:	9300      	str	r3, [sp, #0]
    695a:	9800      	ldr	r0, [sp, #0]
    695c:	2c00      	cmp	r4, #0
    695e:	d000      	beq.n	6962 <time+0x22>
    6960:	6020      	str	r0, [r4, #0]
    6962:	bd16      	pop	{r1, r2, r4, pc}
    6964:	20000004 	.word	0x20000004

00006968 <_vsiprintf_r>:
    6968:	b530      	push	{r4, r5, lr}
    696a:	b09b      	sub	sp, #108	; 0x6c
    696c:	9100      	str	r1, [sp, #0]
    696e:	9104      	str	r1, [sp, #16]
    6970:	4908      	ldr	r1, [pc, #32]	; (6994 <_vsiprintf_r+0x2c>)
    6972:	466d      	mov	r5, sp
    6974:	9102      	str	r1, [sp, #8]
    6976:	9105      	str	r1, [sp, #20]
    6978:	2101      	movs	r1, #1
    697a:	2482      	movs	r4, #130	; 0x82
    697c:	4249      	negs	r1, r1
    697e:	81e9      	strh	r1, [r5, #14]
    6980:	00a4      	lsls	r4, r4, #2
    6982:	4669      	mov	r1, sp
    6984:	81ac      	strh	r4, [r5, #12]
    6986:	f000 f89f 	bl	6ac8 <_svfiprintf_r>
    698a:	2300      	movs	r3, #0
    698c:	9a00      	ldr	r2, [sp, #0]
    698e:	7013      	strb	r3, [r2, #0]
    6990:	b01b      	add	sp, #108	; 0x6c
    6992:	bd30      	pop	{r4, r5, pc}
    6994:	7fffffff 	.word	0x7fffffff

00006998 <vsiprintf>:
    6998:	b510      	push	{r4, lr}
    699a:	0013      	movs	r3, r2
    699c:	000a      	movs	r2, r1
    699e:	0001      	movs	r1, r0
    69a0:	4802      	ldr	r0, [pc, #8]	; (69ac <vsiprintf+0x14>)
    69a2:	6800      	ldr	r0, [r0, #0]
    69a4:	f7ff ffe0 	bl	6968 <_vsiprintf_r>
    69a8:	bd10      	pop	{r4, pc}
    69aa:	46c0      	nop			; (mov r8, r8)
    69ac:	20000004 	.word	0x20000004

000069b0 <_gettimeofday_r>:
    69b0:	2300      	movs	r3, #0
    69b2:	b570      	push	{r4, r5, r6, lr}
    69b4:	4c06      	ldr	r4, [pc, #24]	; (69d0 <_gettimeofday_r+0x20>)
    69b6:	0005      	movs	r5, r0
    69b8:	0008      	movs	r0, r1
    69ba:	0011      	movs	r1, r2
    69bc:	6023      	str	r3, [r4, #0]
    69be:	f7ff fc9d 	bl	62fc <_gettimeofday>
    69c2:	1c43      	adds	r3, r0, #1
    69c4:	d103      	bne.n	69ce <_gettimeofday_r+0x1e>
    69c6:	6823      	ldr	r3, [r4, #0]
    69c8:	2b00      	cmp	r3, #0
    69ca:	d000      	beq.n	69ce <_gettimeofday_r+0x1e>
    69cc:	602b      	str	r3, [r5, #0]
    69ce:	bd70      	pop	{r4, r5, r6, pc}
    69d0:	20004b7c 	.word	0x20004b7c

000069d4 <__locale_ctype_ptr_l>:
    69d4:	30ec      	adds	r0, #236	; 0xec
    69d6:	6800      	ldr	r0, [r0, #0]
    69d8:	4770      	bx	lr

000069da <__ascii_mbtowc>:
    69da:	b082      	sub	sp, #8
    69dc:	2900      	cmp	r1, #0
    69de:	d100      	bne.n	69e2 <__ascii_mbtowc+0x8>
    69e0:	a901      	add	r1, sp, #4
    69e2:	1e10      	subs	r0, r2, #0
    69e4:	d006      	beq.n	69f4 <__ascii_mbtowc+0x1a>
    69e6:	2b00      	cmp	r3, #0
    69e8:	d006      	beq.n	69f8 <__ascii_mbtowc+0x1e>
    69ea:	7813      	ldrb	r3, [r2, #0]
    69ec:	600b      	str	r3, [r1, #0]
    69ee:	7810      	ldrb	r0, [r2, #0]
    69f0:	1e43      	subs	r3, r0, #1
    69f2:	4198      	sbcs	r0, r3
    69f4:	b002      	add	sp, #8
    69f6:	4770      	bx	lr
    69f8:	2002      	movs	r0, #2
    69fa:	4240      	negs	r0, r0
    69fc:	e7fa      	b.n	69f4 <__ascii_mbtowc+0x1a>

000069fe <__malloc_lock>:
    69fe:	4770      	bx	lr

00006a00 <__malloc_unlock>:
    6a00:	4770      	bx	lr
	...

00006a04 <__ssputs_r>:
    6a04:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a06:	688e      	ldr	r6, [r1, #8]
    6a08:	b085      	sub	sp, #20
    6a0a:	0007      	movs	r7, r0
    6a0c:	000c      	movs	r4, r1
    6a0e:	9203      	str	r2, [sp, #12]
    6a10:	9301      	str	r3, [sp, #4]
    6a12:	429e      	cmp	r6, r3
    6a14:	d839      	bhi.n	6a8a <__ssputs_r+0x86>
    6a16:	2390      	movs	r3, #144	; 0x90
    6a18:	898a      	ldrh	r2, [r1, #12]
    6a1a:	00db      	lsls	r3, r3, #3
    6a1c:	421a      	tst	r2, r3
    6a1e:	d034      	beq.n	6a8a <__ssputs_r+0x86>
    6a20:	2503      	movs	r5, #3
    6a22:	6909      	ldr	r1, [r1, #16]
    6a24:	6823      	ldr	r3, [r4, #0]
    6a26:	1a5b      	subs	r3, r3, r1
    6a28:	9302      	str	r3, [sp, #8]
    6a2a:	6963      	ldr	r3, [r4, #20]
    6a2c:	9802      	ldr	r0, [sp, #8]
    6a2e:	435d      	muls	r5, r3
    6a30:	0feb      	lsrs	r3, r5, #31
    6a32:	195d      	adds	r5, r3, r5
    6a34:	9b01      	ldr	r3, [sp, #4]
    6a36:	106d      	asrs	r5, r5, #1
    6a38:	3301      	adds	r3, #1
    6a3a:	181b      	adds	r3, r3, r0
    6a3c:	42ab      	cmp	r3, r5
    6a3e:	d900      	bls.n	6a42 <__ssputs_r+0x3e>
    6a40:	001d      	movs	r5, r3
    6a42:	0553      	lsls	r3, r2, #21
    6a44:	d532      	bpl.n	6aac <__ssputs_r+0xa8>
    6a46:	0029      	movs	r1, r5
    6a48:	0038      	movs	r0, r7
    6a4a:	f7ff fe2d 	bl	66a8 <_malloc_r>
    6a4e:	1e06      	subs	r6, r0, #0
    6a50:	d109      	bne.n	6a66 <__ssputs_r+0x62>
    6a52:	230c      	movs	r3, #12
    6a54:	603b      	str	r3, [r7, #0]
    6a56:	2340      	movs	r3, #64	; 0x40
    6a58:	2001      	movs	r0, #1
    6a5a:	89a2      	ldrh	r2, [r4, #12]
    6a5c:	4240      	negs	r0, r0
    6a5e:	4313      	orrs	r3, r2
    6a60:	81a3      	strh	r3, [r4, #12]
    6a62:	b005      	add	sp, #20
    6a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a66:	9a02      	ldr	r2, [sp, #8]
    6a68:	6921      	ldr	r1, [r4, #16]
    6a6a:	f7ff fdc2 	bl	65f2 <memcpy>
    6a6e:	89a3      	ldrh	r3, [r4, #12]
    6a70:	4a14      	ldr	r2, [pc, #80]	; (6ac4 <__ssputs_r+0xc0>)
    6a72:	401a      	ands	r2, r3
    6a74:	2380      	movs	r3, #128	; 0x80
    6a76:	4313      	orrs	r3, r2
    6a78:	81a3      	strh	r3, [r4, #12]
    6a7a:	9b02      	ldr	r3, [sp, #8]
    6a7c:	6126      	str	r6, [r4, #16]
    6a7e:	18f6      	adds	r6, r6, r3
    6a80:	6026      	str	r6, [r4, #0]
    6a82:	6165      	str	r5, [r4, #20]
    6a84:	9e01      	ldr	r6, [sp, #4]
    6a86:	1aed      	subs	r5, r5, r3
    6a88:	60a5      	str	r5, [r4, #8]
    6a8a:	9b01      	ldr	r3, [sp, #4]
    6a8c:	42b3      	cmp	r3, r6
    6a8e:	d200      	bcs.n	6a92 <__ssputs_r+0x8e>
    6a90:	001e      	movs	r6, r3
    6a92:	0032      	movs	r2, r6
    6a94:	9903      	ldr	r1, [sp, #12]
    6a96:	6820      	ldr	r0, [r4, #0]
    6a98:	f000 fab9 	bl	700e <memmove>
    6a9c:	68a3      	ldr	r3, [r4, #8]
    6a9e:	2000      	movs	r0, #0
    6aa0:	1b9b      	subs	r3, r3, r6
    6aa2:	60a3      	str	r3, [r4, #8]
    6aa4:	6823      	ldr	r3, [r4, #0]
    6aa6:	199e      	adds	r6, r3, r6
    6aa8:	6026      	str	r6, [r4, #0]
    6aaa:	e7da      	b.n	6a62 <__ssputs_r+0x5e>
    6aac:	002a      	movs	r2, r5
    6aae:	0038      	movs	r0, r7
    6ab0:	f000 fabf 	bl	7032 <_realloc_r>
    6ab4:	1e06      	subs	r6, r0, #0
    6ab6:	d1e0      	bne.n	6a7a <__ssputs_r+0x76>
    6ab8:	6921      	ldr	r1, [r4, #16]
    6aba:	0038      	movs	r0, r7
    6abc:	f7ff fdaa 	bl	6614 <_free_r>
    6ac0:	e7c7      	b.n	6a52 <__ssputs_r+0x4e>
    6ac2:	46c0      	nop			; (mov r8, r8)
    6ac4:	fffffb7f 	.word	0xfffffb7f

00006ac8 <_svfiprintf_r>:
    6ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6aca:	b09f      	sub	sp, #124	; 0x7c
    6acc:	9002      	str	r0, [sp, #8]
    6ace:	9305      	str	r3, [sp, #20]
    6ad0:	898b      	ldrh	r3, [r1, #12]
    6ad2:	000f      	movs	r7, r1
    6ad4:	0016      	movs	r6, r2
    6ad6:	061b      	lsls	r3, r3, #24
    6ad8:	d511      	bpl.n	6afe <_svfiprintf_r+0x36>
    6ada:	690b      	ldr	r3, [r1, #16]
    6adc:	2b00      	cmp	r3, #0
    6ade:	d10e      	bne.n	6afe <_svfiprintf_r+0x36>
    6ae0:	2140      	movs	r1, #64	; 0x40
    6ae2:	f7ff fde1 	bl	66a8 <_malloc_r>
    6ae6:	6038      	str	r0, [r7, #0]
    6ae8:	6138      	str	r0, [r7, #16]
    6aea:	2800      	cmp	r0, #0
    6aec:	d105      	bne.n	6afa <_svfiprintf_r+0x32>
    6aee:	230c      	movs	r3, #12
    6af0:	9a02      	ldr	r2, [sp, #8]
    6af2:	3801      	subs	r0, #1
    6af4:	6013      	str	r3, [r2, #0]
    6af6:	b01f      	add	sp, #124	; 0x7c
    6af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6afa:	2340      	movs	r3, #64	; 0x40
    6afc:	617b      	str	r3, [r7, #20]
    6afe:	2300      	movs	r3, #0
    6b00:	ad06      	add	r5, sp, #24
    6b02:	616b      	str	r3, [r5, #20]
    6b04:	3320      	adds	r3, #32
    6b06:	766b      	strb	r3, [r5, #25]
    6b08:	3310      	adds	r3, #16
    6b0a:	76ab      	strb	r3, [r5, #26]
    6b0c:	0034      	movs	r4, r6
    6b0e:	7823      	ldrb	r3, [r4, #0]
    6b10:	2b00      	cmp	r3, #0
    6b12:	d147      	bne.n	6ba4 <_svfiprintf_r+0xdc>
    6b14:	1ba3      	subs	r3, r4, r6
    6b16:	9304      	str	r3, [sp, #16]
    6b18:	d00d      	beq.n	6b36 <_svfiprintf_r+0x6e>
    6b1a:	1ba3      	subs	r3, r4, r6
    6b1c:	0032      	movs	r2, r6
    6b1e:	0039      	movs	r1, r7
    6b20:	9802      	ldr	r0, [sp, #8]
    6b22:	f7ff ff6f 	bl	6a04 <__ssputs_r>
    6b26:	1c43      	adds	r3, r0, #1
    6b28:	d100      	bne.n	6b2c <_svfiprintf_r+0x64>
    6b2a:	e0b5      	b.n	6c98 <_svfiprintf_r+0x1d0>
    6b2c:	696a      	ldr	r2, [r5, #20]
    6b2e:	9b04      	ldr	r3, [sp, #16]
    6b30:	4694      	mov	ip, r2
    6b32:	4463      	add	r3, ip
    6b34:	616b      	str	r3, [r5, #20]
    6b36:	7823      	ldrb	r3, [r4, #0]
    6b38:	2b00      	cmp	r3, #0
    6b3a:	d100      	bne.n	6b3e <_svfiprintf_r+0x76>
    6b3c:	e0ac      	b.n	6c98 <_svfiprintf_r+0x1d0>
    6b3e:	2201      	movs	r2, #1
    6b40:	2300      	movs	r3, #0
    6b42:	4252      	negs	r2, r2
    6b44:	606a      	str	r2, [r5, #4]
    6b46:	a902      	add	r1, sp, #8
    6b48:	3254      	adds	r2, #84	; 0x54
    6b4a:	1852      	adds	r2, r2, r1
    6b4c:	3401      	adds	r4, #1
    6b4e:	602b      	str	r3, [r5, #0]
    6b50:	60eb      	str	r3, [r5, #12]
    6b52:	60ab      	str	r3, [r5, #8]
    6b54:	7013      	strb	r3, [r2, #0]
    6b56:	65ab      	str	r3, [r5, #88]	; 0x58
    6b58:	4e58      	ldr	r6, [pc, #352]	; (6cbc <_svfiprintf_r+0x1f4>)
    6b5a:	2205      	movs	r2, #5
    6b5c:	7821      	ldrb	r1, [r4, #0]
    6b5e:	0030      	movs	r0, r6
    6b60:	f000 fa4a 	bl	6ff8 <memchr>
    6b64:	1c62      	adds	r2, r4, #1
    6b66:	2800      	cmp	r0, #0
    6b68:	d120      	bne.n	6bac <_svfiprintf_r+0xe4>
    6b6a:	6829      	ldr	r1, [r5, #0]
    6b6c:	06cb      	lsls	r3, r1, #27
    6b6e:	d504      	bpl.n	6b7a <_svfiprintf_r+0xb2>
    6b70:	2353      	movs	r3, #83	; 0x53
    6b72:	ae02      	add	r6, sp, #8
    6b74:	3020      	adds	r0, #32
    6b76:	199b      	adds	r3, r3, r6
    6b78:	7018      	strb	r0, [r3, #0]
    6b7a:	070b      	lsls	r3, r1, #28
    6b7c:	d504      	bpl.n	6b88 <_svfiprintf_r+0xc0>
    6b7e:	2353      	movs	r3, #83	; 0x53
    6b80:	202b      	movs	r0, #43	; 0x2b
    6b82:	ae02      	add	r6, sp, #8
    6b84:	199b      	adds	r3, r3, r6
    6b86:	7018      	strb	r0, [r3, #0]
    6b88:	7823      	ldrb	r3, [r4, #0]
    6b8a:	2b2a      	cmp	r3, #42	; 0x2a
    6b8c:	d016      	beq.n	6bbc <_svfiprintf_r+0xf4>
    6b8e:	2000      	movs	r0, #0
    6b90:	210a      	movs	r1, #10
    6b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6b94:	7822      	ldrb	r2, [r4, #0]
    6b96:	3a30      	subs	r2, #48	; 0x30
    6b98:	2a09      	cmp	r2, #9
    6b9a:	d955      	bls.n	6c48 <_svfiprintf_r+0x180>
    6b9c:	2800      	cmp	r0, #0
    6b9e:	d015      	beq.n	6bcc <_svfiprintf_r+0x104>
    6ba0:	9309      	str	r3, [sp, #36]	; 0x24
    6ba2:	e013      	b.n	6bcc <_svfiprintf_r+0x104>
    6ba4:	2b25      	cmp	r3, #37	; 0x25
    6ba6:	d0b5      	beq.n	6b14 <_svfiprintf_r+0x4c>
    6ba8:	3401      	adds	r4, #1
    6baa:	e7b0      	b.n	6b0e <_svfiprintf_r+0x46>
    6bac:	2301      	movs	r3, #1
    6bae:	1b80      	subs	r0, r0, r6
    6bb0:	4083      	lsls	r3, r0
    6bb2:	6829      	ldr	r1, [r5, #0]
    6bb4:	0014      	movs	r4, r2
    6bb6:	430b      	orrs	r3, r1
    6bb8:	602b      	str	r3, [r5, #0]
    6bba:	e7cd      	b.n	6b58 <_svfiprintf_r+0x90>
    6bbc:	9b05      	ldr	r3, [sp, #20]
    6bbe:	1d18      	adds	r0, r3, #4
    6bc0:	681b      	ldr	r3, [r3, #0]
    6bc2:	9005      	str	r0, [sp, #20]
    6bc4:	2b00      	cmp	r3, #0
    6bc6:	db39      	blt.n	6c3c <_svfiprintf_r+0x174>
    6bc8:	9309      	str	r3, [sp, #36]	; 0x24
    6bca:	0014      	movs	r4, r2
    6bcc:	7823      	ldrb	r3, [r4, #0]
    6bce:	2b2e      	cmp	r3, #46	; 0x2e
    6bd0:	d10b      	bne.n	6bea <_svfiprintf_r+0x122>
    6bd2:	7863      	ldrb	r3, [r4, #1]
    6bd4:	1c62      	adds	r2, r4, #1
    6bd6:	2b2a      	cmp	r3, #42	; 0x2a
    6bd8:	d13e      	bne.n	6c58 <_svfiprintf_r+0x190>
    6bda:	9b05      	ldr	r3, [sp, #20]
    6bdc:	3402      	adds	r4, #2
    6bde:	1d1a      	adds	r2, r3, #4
    6be0:	681b      	ldr	r3, [r3, #0]
    6be2:	9205      	str	r2, [sp, #20]
    6be4:	2b00      	cmp	r3, #0
    6be6:	db34      	blt.n	6c52 <_svfiprintf_r+0x18a>
    6be8:	9307      	str	r3, [sp, #28]
    6bea:	4e35      	ldr	r6, [pc, #212]	; (6cc0 <_svfiprintf_r+0x1f8>)
    6bec:	7821      	ldrb	r1, [r4, #0]
    6bee:	2203      	movs	r2, #3
    6bf0:	0030      	movs	r0, r6
    6bf2:	f000 fa01 	bl	6ff8 <memchr>
    6bf6:	2800      	cmp	r0, #0
    6bf8:	d006      	beq.n	6c08 <_svfiprintf_r+0x140>
    6bfa:	2340      	movs	r3, #64	; 0x40
    6bfc:	1b80      	subs	r0, r0, r6
    6bfe:	4083      	lsls	r3, r0
    6c00:	682a      	ldr	r2, [r5, #0]
    6c02:	3401      	adds	r4, #1
    6c04:	4313      	orrs	r3, r2
    6c06:	602b      	str	r3, [r5, #0]
    6c08:	7821      	ldrb	r1, [r4, #0]
    6c0a:	2206      	movs	r2, #6
    6c0c:	482d      	ldr	r0, [pc, #180]	; (6cc4 <_svfiprintf_r+0x1fc>)
    6c0e:	1c66      	adds	r6, r4, #1
    6c10:	7629      	strb	r1, [r5, #24]
    6c12:	f000 f9f1 	bl	6ff8 <memchr>
    6c16:	2800      	cmp	r0, #0
    6c18:	d046      	beq.n	6ca8 <_svfiprintf_r+0x1e0>
    6c1a:	4b2b      	ldr	r3, [pc, #172]	; (6cc8 <_svfiprintf_r+0x200>)
    6c1c:	2b00      	cmp	r3, #0
    6c1e:	d12f      	bne.n	6c80 <_svfiprintf_r+0x1b8>
    6c20:	6829      	ldr	r1, [r5, #0]
    6c22:	9b05      	ldr	r3, [sp, #20]
    6c24:	2207      	movs	r2, #7
    6c26:	05c9      	lsls	r1, r1, #23
    6c28:	d528      	bpl.n	6c7c <_svfiprintf_r+0x1b4>
    6c2a:	189b      	adds	r3, r3, r2
    6c2c:	4393      	bics	r3, r2
    6c2e:	3308      	adds	r3, #8
    6c30:	9305      	str	r3, [sp, #20]
    6c32:	696b      	ldr	r3, [r5, #20]
    6c34:	9a03      	ldr	r2, [sp, #12]
    6c36:	189b      	adds	r3, r3, r2
    6c38:	616b      	str	r3, [r5, #20]
    6c3a:	e767      	b.n	6b0c <_svfiprintf_r+0x44>
    6c3c:	425b      	negs	r3, r3
    6c3e:	60eb      	str	r3, [r5, #12]
    6c40:	2302      	movs	r3, #2
    6c42:	430b      	orrs	r3, r1
    6c44:	602b      	str	r3, [r5, #0]
    6c46:	e7c0      	b.n	6bca <_svfiprintf_r+0x102>
    6c48:	434b      	muls	r3, r1
    6c4a:	3401      	adds	r4, #1
    6c4c:	189b      	adds	r3, r3, r2
    6c4e:	2001      	movs	r0, #1
    6c50:	e7a0      	b.n	6b94 <_svfiprintf_r+0xcc>
    6c52:	2301      	movs	r3, #1
    6c54:	425b      	negs	r3, r3
    6c56:	e7c7      	b.n	6be8 <_svfiprintf_r+0x120>
    6c58:	2300      	movs	r3, #0
    6c5a:	0014      	movs	r4, r2
    6c5c:	200a      	movs	r0, #10
    6c5e:	001a      	movs	r2, r3
    6c60:	606b      	str	r3, [r5, #4]
    6c62:	7821      	ldrb	r1, [r4, #0]
    6c64:	3930      	subs	r1, #48	; 0x30
    6c66:	2909      	cmp	r1, #9
    6c68:	d903      	bls.n	6c72 <_svfiprintf_r+0x1aa>
    6c6a:	2b00      	cmp	r3, #0
    6c6c:	d0bd      	beq.n	6bea <_svfiprintf_r+0x122>
    6c6e:	9207      	str	r2, [sp, #28]
    6c70:	e7bb      	b.n	6bea <_svfiprintf_r+0x122>
    6c72:	4342      	muls	r2, r0
    6c74:	3401      	adds	r4, #1
    6c76:	1852      	adds	r2, r2, r1
    6c78:	2301      	movs	r3, #1
    6c7a:	e7f2      	b.n	6c62 <_svfiprintf_r+0x19a>
    6c7c:	3307      	adds	r3, #7
    6c7e:	e7d5      	b.n	6c2c <_svfiprintf_r+0x164>
    6c80:	ab05      	add	r3, sp, #20
    6c82:	9300      	str	r3, [sp, #0]
    6c84:	003a      	movs	r2, r7
    6c86:	4b11      	ldr	r3, [pc, #68]	; (6ccc <_svfiprintf_r+0x204>)
    6c88:	0029      	movs	r1, r5
    6c8a:	9802      	ldr	r0, [sp, #8]
    6c8c:	e000      	b.n	6c90 <_svfiprintf_r+0x1c8>
    6c8e:	bf00      	nop
    6c90:	9003      	str	r0, [sp, #12]
    6c92:	9b03      	ldr	r3, [sp, #12]
    6c94:	3301      	adds	r3, #1
    6c96:	d1cc      	bne.n	6c32 <_svfiprintf_r+0x16a>
    6c98:	89bb      	ldrh	r3, [r7, #12]
    6c9a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6c9c:	065b      	lsls	r3, r3, #25
    6c9e:	d400      	bmi.n	6ca2 <_svfiprintf_r+0x1da>
    6ca0:	e729      	b.n	6af6 <_svfiprintf_r+0x2e>
    6ca2:	2001      	movs	r0, #1
    6ca4:	4240      	negs	r0, r0
    6ca6:	e726      	b.n	6af6 <_svfiprintf_r+0x2e>
    6ca8:	ab05      	add	r3, sp, #20
    6caa:	9300      	str	r3, [sp, #0]
    6cac:	003a      	movs	r2, r7
    6cae:	4b07      	ldr	r3, [pc, #28]	; (6ccc <_svfiprintf_r+0x204>)
    6cb0:	0029      	movs	r1, r5
    6cb2:	9802      	ldr	r0, [sp, #8]
    6cb4:	f000 f87a 	bl	6dac <_printf_i>
    6cb8:	e7ea      	b.n	6c90 <_svfiprintf_r+0x1c8>
    6cba:	46c0      	nop			; (mov r8, r8)
    6cbc:	000081be 	.word	0x000081be
    6cc0:	000081c4 	.word	0x000081c4
    6cc4:	000081c8 	.word	0x000081c8
    6cc8:	00000000 	.word	0x00000000
    6ccc:	00006a05 	.word	0x00006a05

00006cd0 <_printf_common>:
    6cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6cd2:	0015      	movs	r5, r2
    6cd4:	9301      	str	r3, [sp, #4]
    6cd6:	688a      	ldr	r2, [r1, #8]
    6cd8:	690b      	ldr	r3, [r1, #16]
    6cda:	9000      	str	r0, [sp, #0]
    6cdc:	000c      	movs	r4, r1
    6cde:	4293      	cmp	r3, r2
    6ce0:	da00      	bge.n	6ce4 <_printf_common+0x14>
    6ce2:	0013      	movs	r3, r2
    6ce4:	0022      	movs	r2, r4
    6ce6:	602b      	str	r3, [r5, #0]
    6ce8:	3243      	adds	r2, #67	; 0x43
    6cea:	7812      	ldrb	r2, [r2, #0]
    6cec:	2a00      	cmp	r2, #0
    6cee:	d001      	beq.n	6cf4 <_printf_common+0x24>
    6cf0:	3301      	adds	r3, #1
    6cf2:	602b      	str	r3, [r5, #0]
    6cf4:	6823      	ldr	r3, [r4, #0]
    6cf6:	069b      	lsls	r3, r3, #26
    6cf8:	d502      	bpl.n	6d00 <_printf_common+0x30>
    6cfa:	682b      	ldr	r3, [r5, #0]
    6cfc:	3302      	adds	r3, #2
    6cfe:	602b      	str	r3, [r5, #0]
    6d00:	2706      	movs	r7, #6
    6d02:	6823      	ldr	r3, [r4, #0]
    6d04:	401f      	ands	r7, r3
    6d06:	d027      	beq.n	6d58 <_printf_common+0x88>
    6d08:	0023      	movs	r3, r4
    6d0a:	3343      	adds	r3, #67	; 0x43
    6d0c:	781b      	ldrb	r3, [r3, #0]
    6d0e:	1e5a      	subs	r2, r3, #1
    6d10:	4193      	sbcs	r3, r2
    6d12:	6822      	ldr	r2, [r4, #0]
    6d14:	0692      	lsls	r2, r2, #26
    6d16:	d430      	bmi.n	6d7a <_printf_common+0xaa>
    6d18:	0022      	movs	r2, r4
    6d1a:	9901      	ldr	r1, [sp, #4]
    6d1c:	3243      	adds	r2, #67	; 0x43
    6d1e:	9800      	ldr	r0, [sp, #0]
    6d20:	9e08      	ldr	r6, [sp, #32]
    6d22:	47b0      	blx	r6
    6d24:	1c43      	adds	r3, r0, #1
    6d26:	d025      	beq.n	6d74 <_printf_common+0xa4>
    6d28:	2306      	movs	r3, #6
    6d2a:	6820      	ldr	r0, [r4, #0]
    6d2c:	682a      	ldr	r2, [r5, #0]
    6d2e:	68e1      	ldr	r1, [r4, #12]
    6d30:	4003      	ands	r3, r0
    6d32:	2500      	movs	r5, #0
    6d34:	2b04      	cmp	r3, #4
    6d36:	d103      	bne.n	6d40 <_printf_common+0x70>
    6d38:	1a8d      	subs	r5, r1, r2
    6d3a:	43eb      	mvns	r3, r5
    6d3c:	17db      	asrs	r3, r3, #31
    6d3e:	401d      	ands	r5, r3
    6d40:	68a3      	ldr	r3, [r4, #8]
    6d42:	6922      	ldr	r2, [r4, #16]
    6d44:	4293      	cmp	r3, r2
    6d46:	dd01      	ble.n	6d4c <_printf_common+0x7c>
    6d48:	1a9b      	subs	r3, r3, r2
    6d4a:	18ed      	adds	r5, r5, r3
    6d4c:	2700      	movs	r7, #0
    6d4e:	42bd      	cmp	r5, r7
    6d50:	d120      	bne.n	6d94 <_printf_common+0xc4>
    6d52:	2000      	movs	r0, #0
    6d54:	e010      	b.n	6d78 <_printf_common+0xa8>
    6d56:	3701      	adds	r7, #1
    6d58:	68e3      	ldr	r3, [r4, #12]
    6d5a:	682a      	ldr	r2, [r5, #0]
    6d5c:	1a9b      	subs	r3, r3, r2
    6d5e:	429f      	cmp	r7, r3
    6d60:	dad2      	bge.n	6d08 <_printf_common+0x38>
    6d62:	0022      	movs	r2, r4
    6d64:	2301      	movs	r3, #1
    6d66:	3219      	adds	r2, #25
    6d68:	9901      	ldr	r1, [sp, #4]
    6d6a:	9800      	ldr	r0, [sp, #0]
    6d6c:	9e08      	ldr	r6, [sp, #32]
    6d6e:	47b0      	blx	r6
    6d70:	1c43      	adds	r3, r0, #1
    6d72:	d1f0      	bne.n	6d56 <_printf_common+0x86>
    6d74:	2001      	movs	r0, #1
    6d76:	4240      	negs	r0, r0
    6d78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6d7a:	2030      	movs	r0, #48	; 0x30
    6d7c:	18e1      	adds	r1, r4, r3
    6d7e:	3143      	adds	r1, #67	; 0x43
    6d80:	7008      	strb	r0, [r1, #0]
    6d82:	0021      	movs	r1, r4
    6d84:	1c5a      	adds	r2, r3, #1
    6d86:	3145      	adds	r1, #69	; 0x45
    6d88:	7809      	ldrb	r1, [r1, #0]
    6d8a:	18a2      	adds	r2, r4, r2
    6d8c:	3243      	adds	r2, #67	; 0x43
    6d8e:	3302      	adds	r3, #2
    6d90:	7011      	strb	r1, [r2, #0]
    6d92:	e7c1      	b.n	6d18 <_printf_common+0x48>
    6d94:	0022      	movs	r2, r4
    6d96:	2301      	movs	r3, #1
    6d98:	321a      	adds	r2, #26
    6d9a:	9901      	ldr	r1, [sp, #4]
    6d9c:	9800      	ldr	r0, [sp, #0]
    6d9e:	9e08      	ldr	r6, [sp, #32]
    6da0:	47b0      	blx	r6
    6da2:	1c43      	adds	r3, r0, #1
    6da4:	d0e6      	beq.n	6d74 <_printf_common+0xa4>
    6da6:	3701      	adds	r7, #1
    6da8:	e7d1      	b.n	6d4e <_printf_common+0x7e>
	...

00006dac <_printf_i>:
    6dac:	b5f0      	push	{r4, r5, r6, r7, lr}
    6dae:	b08b      	sub	sp, #44	; 0x2c
    6db0:	9206      	str	r2, [sp, #24]
    6db2:	000a      	movs	r2, r1
    6db4:	3243      	adds	r2, #67	; 0x43
    6db6:	9307      	str	r3, [sp, #28]
    6db8:	9005      	str	r0, [sp, #20]
    6dba:	9204      	str	r2, [sp, #16]
    6dbc:	7e0a      	ldrb	r2, [r1, #24]
    6dbe:	000c      	movs	r4, r1
    6dc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6dc2:	2a6e      	cmp	r2, #110	; 0x6e
    6dc4:	d100      	bne.n	6dc8 <_printf_i+0x1c>
    6dc6:	e08f      	b.n	6ee8 <_printf_i+0x13c>
    6dc8:	d817      	bhi.n	6dfa <_printf_i+0x4e>
    6dca:	2a63      	cmp	r2, #99	; 0x63
    6dcc:	d02c      	beq.n	6e28 <_printf_i+0x7c>
    6dce:	d808      	bhi.n	6de2 <_printf_i+0x36>
    6dd0:	2a00      	cmp	r2, #0
    6dd2:	d100      	bne.n	6dd6 <_printf_i+0x2a>
    6dd4:	e099      	b.n	6f0a <_printf_i+0x15e>
    6dd6:	2a58      	cmp	r2, #88	; 0x58
    6dd8:	d054      	beq.n	6e84 <_printf_i+0xd8>
    6dda:	0026      	movs	r6, r4
    6ddc:	3642      	adds	r6, #66	; 0x42
    6dde:	7032      	strb	r2, [r6, #0]
    6de0:	e029      	b.n	6e36 <_printf_i+0x8a>
    6de2:	2a64      	cmp	r2, #100	; 0x64
    6de4:	d001      	beq.n	6dea <_printf_i+0x3e>
    6de6:	2a69      	cmp	r2, #105	; 0x69
    6de8:	d1f7      	bne.n	6dda <_printf_i+0x2e>
    6dea:	6821      	ldr	r1, [r4, #0]
    6dec:	681a      	ldr	r2, [r3, #0]
    6dee:	0608      	lsls	r0, r1, #24
    6df0:	d523      	bpl.n	6e3a <_printf_i+0x8e>
    6df2:	1d11      	adds	r1, r2, #4
    6df4:	6019      	str	r1, [r3, #0]
    6df6:	6815      	ldr	r5, [r2, #0]
    6df8:	e025      	b.n	6e46 <_printf_i+0x9a>
    6dfa:	2a73      	cmp	r2, #115	; 0x73
    6dfc:	d100      	bne.n	6e00 <_printf_i+0x54>
    6dfe:	e088      	b.n	6f12 <_printf_i+0x166>
    6e00:	d808      	bhi.n	6e14 <_printf_i+0x68>
    6e02:	2a6f      	cmp	r2, #111	; 0x6f
    6e04:	d029      	beq.n	6e5a <_printf_i+0xae>
    6e06:	2a70      	cmp	r2, #112	; 0x70
    6e08:	d1e7      	bne.n	6dda <_printf_i+0x2e>
    6e0a:	2220      	movs	r2, #32
    6e0c:	6809      	ldr	r1, [r1, #0]
    6e0e:	430a      	orrs	r2, r1
    6e10:	6022      	str	r2, [r4, #0]
    6e12:	e003      	b.n	6e1c <_printf_i+0x70>
    6e14:	2a75      	cmp	r2, #117	; 0x75
    6e16:	d020      	beq.n	6e5a <_printf_i+0xae>
    6e18:	2a78      	cmp	r2, #120	; 0x78
    6e1a:	d1de      	bne.n	6dda <_printf_i+0x2e>
    6e1c:	0022      	movs	r2, r4
    6e1e:	2178      	movs	r1, #120	; 0x78
    6e20:	3245      	adds	r2, #69	; 0x45
    6e22:	7011      	strb	r1, [r2, #0]
    6e24:	4a6c      	ldr	r2, [pc, #432]	; (6fd8 <_printf_i+0x22c>)
    6e26:	e030      	b.n	6e8a <_printf_i+0xde>
    6e28:	000e      	movs	r6, r1
    6e2a:	681a      	ldr	r2, [r3, #0]
    6e2c:	3642      	adds	r6, #66	; 0x42
    6e2e:	1d11      	adds	r1, r2, #4
    6e30:	6019      	str	r1, [r3, #0]
    6e32:	6813      	ldr	r3, [r2, #0]
    6e34:	7033      	strb	r3, [r6, #0]
    6e36:	2301      	movs	r3, #1
    6e38:	e079      	b.n	6f2e <_printf_i+0x182>
    6e3a:	0649      	lsls	r1, r1, #25
    6e3c:	d5d9      	bpl.n	6df2 <_printf_i+0x46>
    6e3e:	1d11      	adds	r1, r2, #4
    6e40:	6019      	str	r1, [r3, #0]
    6e42:	2300      	movs	r3, #0
    6e44:	5ed5      	ldrsh	r5, [r2, r3]
    6e46:	2d00      	cmp	r5, #0
    6e48:	da03      	bge.n	6e52 <_printf_i+0xa6>
    6e4a:	232d      	movs	r3, #45	; 0x2d
    6e4c:	9a04      	ldr	r2, [sp, #16]
    6e4e:	426d      	negs	r5, r5
    6e50:	7013      	strb	r3, [r2, #0]
    6e52:	4b62      	ldr	r3, [pc, #392]	; (6fdc <_printf_i+0x230>)
    6e54:	270a      	movs	r7, #10
    6e56:	9303      	str	r3, [sp, #12]
    6e58:	e02f      	b.n	6eba <_printf_i+0x10e>
    6e5a:	6820      	ldr	r0, [r4, #0]
    6e5c:	6819      	ldr	r1, [r3, #0]
    6e5e:	0605      	lsls	r5, r0, #24
    6e60:	d503      	bpl.n	6e6a <_printf_i+0xbe>
    6e62:	1d08      	adds	r0, r1, #4
    6e64:	6018      	str	r0, [r3, #0]
    6e66:	680d      	ldr	r5, [r1, #0]
    6e68:	e005      	b.n	6e76 <_printf_i+0xca>
    6e6a:	0640      	lsls	r0, r0, #25
    6e6c:	d5f9      	bpl.n	6e62 <_printf_i+0xb6>
    6e6e:	680d      	ldr	r5, [r1, #0]
    6e70:	1d08      	adds	r0, r1, #4
    6e72:	6018      	str	r0, [r3, #0]
    6e74:	b2ad      	uxth	r5, r5
    6e76:	4b59      	ldr	r3, [pc, #356]	; (6fdc <_printf_i+0x230>)
    6e78:	2708      	movs	r7, #8
    6e7a:	9303      	str	r3, [sp, #12]
    6e7c:	2a6f      	cmp	r2, #111	; 0x6f
    6e7e:	d018      	beq.n	6eb2 <_printf_i+0x106>
    6e80:	270a      	movs	r7, #10
    6e82:	e016      	b.n	6eb2 <_printf_i+0x106>
    6e84:	3145      	adds	r1, #69	; 0x45
    6e86:	700a      	strb	r2, [r1, #0]
    6e88:	4a54      	ldr	r2, [pc, #336]	; (6fdc <_printf_i+0x230>)
    6e8a:	9203      	str	r2, [sp, #12]
    6e8c:	681a      	ldr	r2, [r3, #0]
    6e8e:	6821      	ldr	r1, [r4, #0]
    6e90:	1d10      	adds	r0, r2, #4
    6e92:	6018      	str	r0, [r3, #0]
    6e94:	6815      	ldr	r5, [r2, #0]
    6e96:	0608      	lsls	r0, r1, #24
    6e98:	d522      	bpl.n	6ee0 <_printf_i+0x134>
    6e9a:	07cb      	lsls	r3, r1, #31
    6e9c:	d502      	bpl.n	6ea4 <_printf_i+0xf8>
    6e9e:	2320      	movs	r3, #32
    6ea0:	4319      	orrs	r1, r3
    6ea2:	6021      	str	r1, [r4, #0]
    6ea4:	2710      	movs	r7, #16
    6ea6:	2d00      	cmp	r5, #0
    6ea8:	d103      	bne.n	6eb2 <_printf_i+0x106>
    6eaa:	2320      	movs	r3, #32
    6eac:	6822      	ldr	r2, [r4, #0]
    6eae:	439a      	bics	r2, r3
    6eb0:	6022      	str	r2, [r4, #0]
    6eb2:	0023      	movs	r3, r4
    6eb4:	2200      	movs	r2, #0
    6eb6:	3343      	adds	r3, #67	; 0x43
    6eb8:	701a      	strb	r2, [r3, #0]
    6eba:	6863      	ldr	r3, [r4, #4]
    6ebc:	60a3      	str	r3, [r4, #8]
    6ebe:	2b00      	cmp	r3, #0
    6ec0:	db5c      	blt.n	6f7c <_printf_i+0x1d0>
    6ec2:	2204      	movs	r2, #4
    6ec4:	6821      	ldr	r1, [r4, #0]
    6ec6:	4391      	bics	r1, r2
    6ec8:	6021      	str	r1, [r4, #0]
    6eca:	2d00      	cmp	r5, #0
    6ecc:	d158      	bne.n	6f80 <_printf_i+0x1d4>
    6ece:	9e04      	ldr	r6, [sp, #16]
    6ed0:	2b00      	cmp	r3, #0
    6ed2:	d064      	beq.n	6f9e <_printf_i+0x1f2>
    6ed4:	0026      	movs	r6, r4
    6ed6:	9b03      	ldr	r3, [sp, #12]
    6ed8:	3642      	adds	r6, #66	; 0x42
    6eda:	781b      	ldrb	r3, [r3, #0]
    6edc:	7033      	strb	r3, [r6, #0]
    6ede:	e05e      	b.n	6f9e <_printf_i+0x1f2>
    6ee0:	0648      	lsls	r0, r1, #25
    6ee2:	d5da      	bpl.n	6e9a <_printf_i+0xee>
    6ee4:	b2ad      	uxth	r5, r5
    6ee6:	e7d8      	b.n	6e9a <_printf_i+0xee>
    6ee8:	6809      	ldr	r1, [r1, #0]
    6eea:	681a      	ldr	r2, [r3, #0]
    6eec:	0608      	lsls	r0, r1, #24
    6eee:	d505      	bpl.n	6efc <_printf_i+0x150>
    6ef0:	1d11      	adds	r1, r2, #4
    6ef2:	6019      	str	r1, [r3, #0]
    6ef4:	6813      	ldr	r3, [r2, #0]
    6ef6:	6962      	ldr	r2, [r4, #20]
    6ef8:	601a      	str	r2, [r3, #0]
    6efa:	e006      	b.n	6f0a <_printf_i+0x15e>
    6efc:	0649      	lsls	r1, r1, #25
    6efe:	d5f7      	bpl.n	6ef0 <_printf_i+0x144>
    6f00:	1d11      	adds	r1, r2, #4
    6f02:	6019      	str	r1, [r3, #0]
    6f04:	6813      	ldr	r3, [r2, #0]
    6f06:	8aa2      	ldrh	r2, [r4, #20]
    6f08:	801a      	strh	r2, [r3, #0]
    6f0a:	2300      	movs	r3, #0
    6f0c:	9e04      	ldr	r6, [sp, #16]
    6f0e:	6123      	str	r3, [r4, #16]
    6f10:	e054      	b.n	6fbc <_printf_i+0x210>
    6f12:	681a      	ldr	r2, [r3, #0]
    6f14:	1d11      	adds	r1, r2, #4
    6f16:	6019      	str	r1, [r3, #0]
    6f18:	6816      	ldr	r6, [r2, #0]
    6f1a:	2100      	movs	r1, #0
    6f1c:	6862      	ldr	r2, [r4, #4]
    6f1e:	0030      	movs	r0, r6
    6f20:	f000 f86a 	bl	6ff8 <memchr>
    6f24:	2800      	cmp	r0, #0
    6f26:	d001      	beq.n	6f2c <_printf_i+0x180>
    6f28:	1b80      	subs	r0, r0, r6
    6f2a:	6060      	str	r0, [r4, #4]
    6f2c:	6863      	ldr	r3, [r4, #4]
    6f2e:	6123      	str	r3, [r4, #16]
    6f30:	2300      	movs	r3, #0
    6f32:	9a04      	ldr	r2, [sp, #16]
    6f34:	7013      	strb	r3, [r2, #0]
    6f36:	e041      	b.n	6fbc <_printf_i+0x210>
    6f38:	6923      	ldr	r3, [r4, #16]
    6f3a:	0032      	movs	r2, r6
    6f3c:	9906      	ldr	r1, [sp, #24]
    6f3e:	9805      	ldr	r0, [sp, #20]
    6f40:	9d07      	ldr	r5, [sp, #28]
    6f42:	47a8      	blx	r5
    6f44:	1c43      	adds	r3, r0, #1
    6f46:	d043      	beq.n	6fd0 <_printf_i+0x224>
    6f48:	6823      	ldr	r3, [r4, #0]
    6f4a:	2500      	movs	r5, #0
    6f4c:	079b      	lsls	r3, r3, #30
    6f4e:	d40f      	bmi.n	6f70 <_printf_i+0x1c4>
    6f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6f52:	68e0      	ldr	r0, [r4, #12]
    6f54:	4298      	cmp	r0, r3
    6f56:	da3d      	bge.n	6fd4 <_printf_i+0x228>
    6f58:	0018      	movs	r0, r3
    6f5a:	e03b      	b.n	6fd4 <_printf_i+0x228>
    6f5c:	0022      	movs	r2, r4
    6f5e:	2301      	movs	r3, #1
    6f60:	3219      	adds	r2, #25
    6f62:	9906      	ldr	r1, [sp, #24]
    6f64:	9805      	ldr	r0, [sp, #20]
    6f66:	9e07      	ldr	r6, [sp, #28]
    6f68:	47b0      	blx	r6
    6f6a:	1c43      	adds	r3, r0, #1
    6f6c:	d030      	beq.n	6fd0 <_printf_i+0x224>
    6f6e:	3501      	adds	r5, #1
    6f70:	68e3      	ldr	r3, [r4, #12]
    6f72:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6f74:	1a9b      	subs	r3, r3, r2
    6f76:	429d      	cmp	r5, r3
    6f78:	dbf0      	blt.n	6f5c <_printf_i+0x1b0>
    6f7a:	e7e9      	b.n	6f50 <_printf_i+0x1a4>
    6f7c:	2d00      	cmp	r5, #0
    6f7e:	d0a9      	beq.n	6ed4 <_printf_i+0x128>
    6f80:	9e04      	ldr	r6, [sp, #16]
    6f82:	0028      	movs	r0, r5
    6f84:	0039      	movs	r1, r7
    6f86:	f7ff faa1 	bl	64cc <__aeabi_uidivmod>
    6f8a:	9b03      	ldr	r3, [sp, #12]
    6f8c:	3e01      	subs	r6, #1
    6f8e:	5c5b      	ldrb	r3, [r3, r1]
    6f90:	0028      	movs	r0, r5
    6f92:	7033      	strb	r3, [r6, #0]
    6f94:	0039      	movs	r1, r7
    6f96:	f7ff fa13 	bl	63c0 <__udivsi3>
    6f9a:	1e05      	subs	r5, r0, #0
    6f9c:	d1f1      	bne.n	6f82 <_printf_i+0x1d6>
    6f9e:	2f08      	cmp	r7, #8
    6fa0:	d109      	bne.n	6fb6 <_printf_i+0x20a>
    6fa2:	6823      	ldr	r3, [r4, #0]
    6fa4:	07db      	lsls	r3, r3, #31
    6fa6:	d506      	bpl.n	6fb6 <_printf_i+0x20a>
    6fa8:	6863      	ldr	r3, [r4, #4]
    6faa:	6922      	ldr	r2, [r4, #16]
    6fac:	4293      	cmp	r3, r2
    6fae:	dc02      	bgt.n	6fb6 <_printf_i+0x20a>
    6fb0:	2330      	movs	r3, #48	; 0x30
    6fb2:	3e01      	subs	r6, #1
    6fb4:	7033      	strb	r3, [r6, #0]
    6fb6:	9b04      	ldr	r3, [sp, #16]
    6fb8:	1b9b      	subs	r3, r3, r6
    6fba:	6123      	str	r3, [r4, #16]
    6fbc:	9b07      	ldr	r3, [sp, #28]
    6fbe:	aa09      	add	r2, sp, #36	; 0x24
    6fc0:	9300      	str	r3, [sp, #0]
    6fc2:	0021      	movs	r1, r4
    6fc4:	9b06      	ldr	r3, [sp, #24]
    6fc6:	9805      	ldr	r0, [sp, #20]
    6fc8:	f7ff fe82 	bl	6cd0 <_printf_common>
    6fcc:	1c43      	adds	r3, r0, #1
    6fce:	d1b3      	bne.n	6f38 <_printf_i+0x18c>
    6fd0:	2001      	movs	r0, #1
    6fd2:	4240      	negs	r0, r0
    6fd4:	b00b      	add	sp, #44	; 0x2c
    6fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6fd8:	000081e0 	.word	0x000081e0
    6fdc:	000081cf 	.word	0x000081cf

00006fe0 <__ascii_wctomb>:
    6fe0:	1e0b      	subs	r3, r1, #0
    6fe2:	d004      	beq.n	6fee <__ascii_wctomb+0xe>
    6fe4:	2aff      	cmp	r2, #255	; 0xff
    6fe6:	d904      	bls.n	6ff2 <__ascii_wctomb+0x12>
    6fe8:	238a      	movs	r3, #138	; 0x8a
    6fea:	6003      	str	r3, [r0, #0]
    6fec:	3b8b      	subs	r3, #139	; 0x8b
    6fee:	0018      	movs	r0, r3
    6ff0:	4770      	bx	lr
    6ff2:	700a      	strb	r2, [r1, #0]
    6ff4:	2301      	movs	r3, #1
    6ff6:	e7fa      	b.n	6fee <__ascii_wctomb+0xe>

00006ff8 <memchr>:
    6ff8:	b2c9      	uxtb	r1, r1
    6ffa:	1882      	adds	r2, r0, r2
    6ffc:	4290      	cmp	r0, r2
    6ffe:	d101      	bne.n	7004 <memchr+0xc>
    7000:	2000      	movs	r0, #0
    7002:	4770      	bx	lr
    7004:	7803      	ldrb	r3, [r0, #0]
    7006:	428b      	cmp	r3, r1
    7008:	d0fb      	beq.n	7002 <memchr+0xa>
    700a:	3001      	adds	r0, #1
    700c:	e7f6      	b.n	6ffc <memchr+0x4>

0000700e <memmove>:
    700e:	b510      	push	{r4, lr}
    7010:	4288      	cmp	r0, r1
    7012:	d902      	bls.n	701a <memmove+0xc>
    7014:	188b      	adds	r3, r1, r2
    7016:	4298      	cmp	r0, r3
    7018:	d308      	bcc.n	702c <memmove+0x1e>
    701a:	2300      	movs	r3, #0
    701c:	429a      	cmp	r2, r3
    701e:	d007      	beq.n	7030 <memmove+0x22>
    7020:	5ccc      	ldrb	r4, [r1, r3]
    7022:	54c4      	strb	r4, [r0, r3]
    7024:	3301      	adds	r3, #1
    7026:	e7f9      	b.n	701c <memmove+0xe>
    7028:	5c8b      	ldrb	r3, [r1, r2]
    702a:	5483      	strb	r3, [r0, r2]
    702c:	3a01      	subs	r2, #1
    702e:	d2fb      	bcs.n	7028 <memmove+0x1a>
    7030:	bd10      	pop	{r4, pc}

00007032 <_realloc_r>:
    7032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7034:	0007      	movs	r7, r0
    7036:	000d      	movs	r5, r1
    7038:	0016      	movs	r6, r2
    703a:	2900      	cmp	r1, #0
    703c:	d105      	bne.n	704a <_realloc_r+0x18>
    703e:	0011      	movs	r1, r2
    7040:	f7ff fb32 	bl	66a8 <_malloc_r>
    7044:	0004      	movs	r4, r0
    7046:	0020      	movs	r0, r4
    7048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    704a:	2a00      	cmp	r2, #0
    704c:	d103      	bne.n	7056 <_realloc_r+0x24>
    704e:	f7ff fae1 	bl	6614 <_free_r>
    7052:	0034      	movs	r4, r6
    7054:	e7f7      	b.n	7046 <_realloc_r+0x14>
    7056:	f000 f812 	bl	707e <_malloc_usable_size_r>
    705a:	002c      	movs	r4, r5
    705c:	4286      	cmp	r6, r0
    705e:	d9f2      	bls.n	7046 <_realloc_r+0x14>
    7060:	0031      	movs	r1, r6
    7062:	0038      	movs	r0, r7
    7064:	f7ff fb20 	bl	66a8 <_malloc_r>
    7068:	1e04      	subs	r4, r0, #0
    706a:	d0ec      	beq.n	7046 <_realloc_r+0x14>
    706c:	0029      	movs	r1, r5
    706e:	0032      	movs	r2, r6
    7070:	f7ff fabf 	bl	65f2 <memcpy>
    7074:	0029      	movs	r1, r5
    7076:	0038      	movs	r0, r7
    7078:	f7ff facc 	bl	6614 <_free_r>
    707c:	e7e3      	b.n	7046 <_realloc_r+0x14>

0000707e <_malloc_usable_size_r>:
    707e:	1f0b      	subs	r3, r1, #4
    7080:	681b      	ldr	r3, [r3, #0]
    7082:	1f18      	subs	r0, r3, #4
    7084:	2b00      	cmp	r3, #0
    7086:	da01      	bge.n	708c <_malloc_usable_size_r+0xe>
    7088:	580b      	ldr	r3, [r1, r0]
    708a:	18c0      	adds	r0, r0, r3
    708c:	4770      	bx	lr
	...

00007090 <STATUS_LED>:
    7090:	0202 0202 0101 0000 0102 0102 7645 6e65     ............Even
    70a0:	3a74 7953 7473 6d65 533a 6174 7472 7075     t:System:Startup
    70b0:	253a 0064 7645 6e65 3a74 7953 7473 6d65     :%d.Event:System
    70c0:	483a 6165 7472 6562 7461 253a 0064 0000     :Heartbeat:%d...
    70d0:	6e45 6574 6972 676e 6d20 6961 206e 7473     Entering main st
    70e0:	7461 2065 616d 6863 6e69 2e65 2e2e 0020     ate machine... .
    70f0:	6f50 6577 2072 7075 4520 6874 7265 656e     Power up Etherne
    7100:	2e74 0020 7445 6568 6e72 7465 6c20 6e69     t. .Ethernet lin
    7110:	206b 7075 202e 0000 6f50 6577 2072 6f64     k up. ..Power do
    7120:	6e77 5720 6669 2e69 0020 0000 7445 6568     wn Wifi. ...Ethe
    7130:	6e72 7465 6c20 6e69 206b 6f64 6e77 202e     rnet link down. 
    7140:	0000 0000 6f50 6577 2072 6f64 6e77 4520     ....Power down E
    7150:	6874 7265 656e 2e74 0020 0000 6f50 6577     thernet. ...Powe
    7160:	2072 7075 5720 4669 2e69 0020 7645 6e65     r up WiFi. .Even
    7170:	3a74 6552 6573 4374 7561 6573 573a 5444     t:ResetCause:WDT
    7180:	253a 0064 7645 6e65 3a74 6552 6573 4374     :%d.Event:ResetC
    7190:	7561 6573 333a 332e 2056 7242 776f 6f6e     ause:3.3V Browno
    71a0:	7475 253a 0064 0000 7645 6e65 3a74 6552     ut:%d...Event:Re
    71b0:	6573 4374 7561 6573 313a 322e 2056 7242     setCause:1.2V Br
    71c0:	776f 6f6e 7475 253a 0064 0000 7645 6e65     ownout:%d...Even
    71d0:	3a74 6552 6573 4374 7561 6573 553a 6b6e     t:ResetCause:Unk
    71e0:	6f6e 6e77 253a 0064 7645 6e65 3a74 6144     nown:%d.Event:Da
    71f0:	6174 543a 3a31 6425 0000 0000 7645 6e65     ta:T1:%d....Even
    7200:	3a74 6144 6174 543a 3a32 6425 0000 0000     t:Data:T2:%d....
    7210:	7355 7265 7257 7469 0065 0000 7645 6e65     UserWrite...Even
    7220:	3a74 7953 636e 253a 3a64 6425 0000 0000     t:Sync:%d:%d....
    7230:	7355 7265 6e49 7469 0000 0000 6e49 7469     UserInit....Init
    7240:	6169 696c 697a 676e 7420 6568 7520 6573     ializing the use
    7250:	2072 6f63 666e 6769 7275 7461 6f69 2e6e     r configuration.
    7260:	0020 0000 7355 7265 6552 6461 0000 0000      ...UserRead....
    7270:	6544 7562 2067 6f6c 2067 6e69 7469 6169     Debug log initia
    7280:	696c 657a 2e64 0020 6157 6374 6468 676f     lized. .Watchdog
    7290:	6920 696e 6974 6c61 7a69 6465 202e 0000      initialized. ..
    72a0:	6954 656d 7372 6920 696e 6974 6c61 7a69     Timers initializ
    72b0:	6465 202e 0000 0000 5452 2043 6e69 7469     ed. ....RTC init
    72c0:	6169 696c 657a 2e64 0020 0000 6d43 4664     ialized. ...CmdF
    72d0:	4649 204f 6e69 7469 6169 696c 657a 2e64     IFO initialized.
    72e0:	0020 0000 6144 6174 4946 4f46 6920 696e      ...DataFIFO ini
    72f0:	6974 6c61 7a69 6465 202e 0000 6c46 7361     tialized. ..Flas
    7300:	2068 6e69 7469 6169 696c 657a 2e64 0020     h initialized. .
    7310:	7355 7265 6320 6e6f 6966 7567 6172 6974     User configurati
    7320:	6e6f 7220 7465 6972 7665 6465 202e 0000     on retrieved. ..
    7330:	6954 656d 7473 6d61 2070 6e69 7469 6169     Timestamp initia
    7340:	696c 657a 2e64 0020 7445 6568 6e72 7465     lized. .Ethernet
    7350:	6920 696e 6974 6c61 7a69 6465 202e 0000      initialized. ..
    7360:	6957 6946 6920 696e 6974 6c61 7a69 6465     WiFi initialized
    7370:	202e 0000 6553 736e 726f 2073 6e49 7469     . ..Sensors Init
    7380:	202e 0000 7041 6c70 6369 7461 6f69 206e     . ..Application 
    7390:	6e69 7469 6320 6d6f 6c70 7465 2e65 0020     init complete. .
    73a0:	0d9c 0000 0d14 0000 0d3a 0000 0d54 0000     ........:...T...
    73b0:	0dba 0000 0df0 0000 0e26 0000 0fa0 0000     ........&.......
    73c0:	0fae 0000 1078 0000 1090 0000 1352 0000     ....x.......R...
    73d0:	4344 2d41 3030 3030 0031 0000 4e44 2053     DCA-00001...DNS 
    73e0:	5453 5441 2045 5328 4154 5452 0029 0000     STATE (START)...
    73f0:	4e44 2053 5453 5441 2045 4f28 4550 294e     DNS STATE (OPEN)
    7400:	0000 0000 4e44 2053 5453 5441 2045 5128     ....DNS STATE (Q
    7410:	4555 5952 0029 0000 4e44 2053 5453 5441     UERY)...DNS STAT
    7420:	2045 4728 5445 462d 4941 294c 0000 0000     E (GET-FAIL)....
    7430:	4e44 2053 5453 5441 2045 4728 5445 442d     DNS STATE (GET-D
    7440:	4e4f 2945 0000 0000 4e44 2053 5453 5441     ONE)....DNS STAT
    7450:	2045 4628 4941 294c 0000 0000 4e44 2053     E (FAIL)....DNS 
    7460:	5453 5441 2045 4428 4e4f 2945 0000 0000     STATE (DONE)....
    7470:	7525 002d 4e44 2053 6552 6f6d 6576 4820     %u-.DNS Remove H
    7480:	736f 2074 4243 0000 7325 7220 7365 6c6f     ost CB..%s resol
    7490:	6576 2064 6f74 4920 2050 6441 7264 7365     ved to IP Addres
    74a0:	2073 7830 5825 202e 0000 0000 6146 6c69     s 0x%X. ....Fail
    74b0:	6465 7220 7365 6c6f 6976 676e 2520 2e73     ed resolving %s.
    74c0:	0020 0000 7768 642e 7261 6f6d 6772 6d61      ...hw.darmorgam
    74d0:	2e7a 6163 0000 0000 6e55 6261 656c 7420     z.ca....Unable t
    74e0:	206f 6572 6f73 766c 2e65 0020 7542 6c69     o resolve. .Buil
    74f0:	2064 6f63 6d6d 6e6f 6820 6165 6564 2e72     d common header.
    7500:	0020 0000 704f 6e65 7220 6d65 746f 2065      ...Open remote 
    7510:	6f73 6b63 7465 202e 0000 0000 7525 0000     socket. ....%u..
    7520:	6425 0000 0a0d 0a0d 0000 0000 6d45 7470     %d..........Empt
    7530:	2079 6170 6c79 616f 2e64 0020 6f53 6b63     y payload. .Sock
    7540:	7465 6320 6f6c 6573 0064 0000 6553 646e     et closed...Send
    7550:	6e69 2067 6425 6220 7479 7365 6f20 2066     ing %d bytes of 
    7560:	6164 6174 7420 206f 6573 7672 7265 202e     data to server. 
    7570:	0000 0000 6146 6c69 6465 7320 6e65 6964     ....Failed sendi
    7580:	676e 7320 6765 656d 746e 202e 0000 0000     ng segment. ....
    7590:	6146 6c69 6465 7320 6e65 6964 676e 202e     Failed sending. 
    75a0:	0000 0000 6552 6563 7669 6465 2520 2064     ....Received %d 
    75b0:	7962 6574 2073 666f 6420 7461 2061 7266     bytes of data fr
    75c0:	6d6f 7320 7265 6576 2e72 0020 5245 4f52     om server. .ERRO
    75d0:	2052 202d 6e69 6176 696c 2064 6572 7073     R - invalid resp
    75e0:	6e6f 6573 2021 0000 5245 4f52 2052 202d     onse! ..ERROR - 
    75f0:	6146 6c69 6465 7220 6d65 746f 2065 6f73     Failed remote so
    7600:	6b63 7465 6320 656c 6e61 7075 2021 0000     cket cleanup! ..
    7610:	6e49 6176 696c 2064 6572 6f6d 6574 7320     Invalid remote s
    7620:	636f 656b 2074 7473 7461 2165 0020 0000     ocket state! ...
    7630:	6f48 7473 614e 656d 252d 0073 5445 4548     HostName-%s.ETHE
    7640:	4e52 5445 5320 4154 4554 4320 4e4f 4946     RNET STATE CONFI
    7650:	2047 4928 2050 4843 4e41 4547 2944 0000     G (IP CHANGED)..
    7660:	5049 4120 7373 6769 656e 2e64 0020 0000     IP Assigned. ...
    7670:	252c 2d75 0000 0000 5445 4548 4e52 5445     ,%u-....ETHERNET
    7680:	5320 4154 4554 4920 4c44 2045 4928 2050      STATE IDLE (IP 
    7690:	4843 4e41 4547 2944 0000 0000 5049 6120     CHANGED)....IP a
    76a0:	6464 6572 7373 6320 6168 676e 6465 202e     ddress changed. 
    76b0:	0000 0000 5445 4548 4e52 5445 5320 4154     ....ETHERNET STA
    76c0:	4554 4520 5252 524f 0000 0000 6553 7672     TE ERROR....Serv
    76d0:	7265 6e20 746f 7220 7365 6f70 646e 6e69     er not respondin
    76e0:	2e67 0020 7250 636f 7365 2073 4e44 2053     g. .Process DNS 
    76f0:	7571 7265 2079 6572 7073 6e6f 6573 202e     query response. 
    7700:	0000 0000 6e55 7865 6570 7463 6465 7420     ....Unexpected t
    7710:	6172 736e 6361 6974 6e6f 4920 2e44 0020     ransaction ID. .
    7720:	5448 5054 312f 312e 3320 3230 4620 756f     HTTP/1.1 302 Fou
    7730:	646e 0a0d 0000 0000 5448 5054 312f 312e     nd......HTTP/1.1
    7740:	3320 3130 4d20 766f 6465 5020 7265 616d      301 Moved Perma
    7750:	656e 746e 796c 0a0d 0000 0000 6f4c 6163     nently......Loca
    7760:	6974 6e6f 203a 0000 6f43 746e 6e65 2d74     tion: ..Content-
    7770:	654c 676e 6874 203a 0d30 000a 6f43 6e6e     Length: 0...Conn
    7780:	6365 6974 6e6f 203a 6c63 736f 0d65 000a     ection: close...
    7790:	5448 5054 312f 312e 3420 3430 4e20 746f     HTTP/1.1 404 Not
    77a0:	4620 756f 646e 0a0d 0000 0000 5448 5054      Found......HTTP
    77b0:	312f 312e 3220 3030 4f20 0d4b 000a 0000     /1.1 200 OK.....
    77c0:	6341 6563 7373 432d 6e6f 7274 6c6f 412d     Access-Control-A
    77d0:	6c6c 776f 4f2d 6972 6967 3a6e 2a20 0a0d     llow-Origin: *..
    77e0:	0000 0000 6f43 746e 6e65 2d74 7954 6570     ....Content-Type
    77f0:	203a 6574 7478 702f 616c 6e69 0a0d 0000     : text/plain....
    7800:	6f43 746e 6e65 2d74 654c 676e 6874 203a     Content-Length: 
    7810:	2020 2020 0a0d 0000 257b 7d73 0000 0000         ....{%s}....
    7820:	6341 6563 7373 432d 6e6f 7274 6c6f 412d     Access-Control-A
    7830:	6c6c 776f 4f2d 6972 6967 3a6e 2a20 0a0d     llow-Origin: *..
    7840:	6341 6563 7373 432d 6e6f 7274 6c6f 412d     Access-Control-A
    7850:	6c6c 776f 4d2d 7465 6f68 7364 203a 4f50     llow-Methods: PO
    7860:	5453 202c 4547 0d54 410a 6363 7365 2d73     ST, GET..Access-
    7870:	6f43 746e 6f72 2d6c 6c41 6f6c 2d77 6548     Control-Allow-He
    7880:	6461 7265 3a73 6320 6e6f 6574 746e 542d     aders: content-T
    7890:	7079 2c65 6f20 6972 6967 2c6e 7820 722d     ype, origin, x-r
    78a0:	7165 6575 7473 6465 772d 7469 0d68 000a     equested-with...
    78b0:	6e69 6564 2e78 6870 0070 0000 4f50 5453     index.php...POST
    78c0:	2f20 7325 4820 5454 2f50 2e31 0d31 000a      /%s HTTP/1.1...
    78d0:	6f48 7473 203a 7325 0a0d 0000 6f43 746e     Host: %s....Cont
    78e0:	6e65 2d74 7954 6570 203a 6574 7478 702f     ent-Type: text/p
    78f0:	616c 6e69 203b 6863 7261 6573 3d74 7475     lain; charset=ut
    7900:	2d66 0d38 000a 0000 3032 2030 4b4f 0000     f-8.....200 OK..
    7910:	6f43 746e 6e65 2d74 654c 676e 6874 203a     Content-Length: 
    7920:	0000 0000 6e55 6261 656c 7420 206f 6966     ....Unable to fi
    7930:	646e 7320 6174 7472 6f20 2066 6f63 746e     nd start of cont
    7940:	6e65 2e74 0020 0000 6f43 746e 6e65 2074     ent. ...Content 
    7950:	696d 7373 6e69 2067 726f 6920 636e 6d6f     missing or incom
    7960:	6c70 7465 2e65 0020 2e2e 682f 6c61 692f     plete. .../hal/i
    7970:	636e 756c 6564 682f 6c61 775f 7464 682e     nclude/hal_wdt.h
    7980:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
    7990:	6c61 665f 616c 6873 632e 0000 2e2e 682f     al_flash.c..../h
    79a0:	6c61 732f 6372 682f 6c61 695f 2e6f 0063     al/src/hal_io.c.
    79b0:	2e2e 682f 6c61 732f 6372 682f 6c61 735f     ../hal/src/hal_s
    79c0:	6970 6d5f 735f 6e79 2e63 0063 2e2e 682f     pi_m_sync.c.../h
    79d0:	6c61 732f 6372 682f 6c61 745f 6d69 7265     al/src/hal_timer
    79e0:	632e 0000 2e2e 682f 6c61 752f 6974 736c     .c..../hal/utils
    79f0:	732f 6372 752f 6974 736c 6c5f 7369 2e74     /src/utils_list.
    7a00:	0063 0000                                   c...

00007a04 <_map>:
    7a04:	0004 0000 0004 0000 0006 0000 0006 0000     ................
    7a14:	0008 0000 001c 0000 000b 0000 000b 0000     ................
    7a24:	2e2e 682f 6c70 652f 6369 682f 6c70 655f     ../hpl/eic/hpl_e
    7a34:	6369 632e 0000 0000 2e2e 682f 6c70 6e2f     ic.c....../hpl/n
    7a44:	6d76 7463 6c72 682f 6c70 6e5f 6d76 7463     vmctrl/hpl_nvmct
    7a54:	6c72 632e 0000 0000                         rl.c....

00007a5c <_usarts>:
	...

00007a6c <_i2cms>:
	...

00007a84 <_i2css>:
	...

00007a94 <sercomspi_regs>:
    7a94:	000c 0013 0000 0002 0000 0000 0000 0100     ................
    7aa4:	000c 0001 0000 0002 0000 0000 0000 0300     ................
    7ab4:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
    7ac4:	5f6c 6573 6372 6d6f 632e 0000               l_sercom.c..

00007ad0 <_tcs>:
    7ad0:	0000 0768 0000 0000 0000 0000 0000 0000     ..h.............
    7ae0:	0000 0000 0004 0368 0000 0000 0000 0000     ......h.........
    7af0:	03e8 0000 0000 0000 2e2e 682f 6c70 742f     ........../hpl/t
    7b00:	2f63 7068 5f6c 6374 632e 0000 2e2e 682f     c/hpl_tc.c..../h
    7b10:	6c70 772f 7464 682f 6c70 775f 7464 632e     pl/wdt/hpl_wdt.c
    7b20:	0000 0000 4baa 0000 4b10 0000 4baa 0000     .....K...K...K..
    7b30:	4b36 0000 4baa 0000 4baa 0000 4b40 0000     6K...K...K..@K..
    7b40:	4baa 0000 4baa 0000 4baa 0000 4baa 0000     .K...K...K...K..
    7b50:	4baa 0000 4baa 0000 4baa 0000 4baa 0000     .K...K...K...K..
    7b60:	4baa 0000 4baa 0000 4baa 0000 4baa 0000     .K...K...K...K..
    7b70:	4baa 0000 4baa 0000 4baa 0000 4baa 0000     .K...K...K...K..
    7b80:	4baa 0000 4baa 0000 4baa 0000 4baa 0000     .K...K...K...K..
    7b90:	4baa 0000 4baa 0000 4baa 0000 4baa 0000     .K...K...K...K..
    7ba0:	4baa 0000 4baa 0000 4baa 0000 4baa 0000     .K...K...K...K..
    7bb0:	4baa 0000 4baa 0000 4baa 0000 4baa 0000     .K...K...K...K..
    7bc0:	4baa 0000 4baa 0000 4baa 0000 4baa 0000     .K...K...K...K..
    7bd0:	4baa 0000 4baa 0000 4baa 0000 4baa 0000     .K...K...K...K..
    7be0:	4baa 0000 4baa 0000 4baa 0000 4baa 0000     .K...K...K...K..
    7bf0:	4b5e 0000 4baa 0000 4b76 0000 4b6c 0000     ^K...K..vK..lK..

00007c00 <xidValue>:
    7c00:	4850 4d43                                   PHCM

00007c04 <dhcpName>:
    7c04:	4344 2d41 5858 5958 5959 5959 0000 0000     DCA-XXXYYYYY....
    7c14:	5049 4820 6165 6564 2072 7277 6e6f 2067     IP Header wrong 
    7c24:	6b63 6d73 0000 0000 7872 6920 6d63 0070     cksm....rx icmp.
    7c34:	6369 706d 7720 6f72 676e 6320 736b 206d     icmp wrong cksm 
    7c44:	203a 7825 0000 0000 7872 7520 7064 0000     : %x....rx udp..
    7c54:	7872 7420 7063 0000 7872 6220 6461 7420     rx tcp..rx bad t
    7c64:	7063 6320 736b 006d 7069 6120 6464 6572     cp cksm.ip addre
    7c74:	7373 3a20 2520 0058 4544 5453 4920 2050     ss : %X.DEST IP 
    7c84:	4f4e 2054 414d 4354 4548 0044               NOT MATCHED.

00007c90 <macAddress>:
    7c90:	de00 00ad efbe 0000                         ........

00007c98 <broadcastMAC>:
    7c98:	ffff ffff ffff 0000 4c56 4e41 5020 6361     ........VLAN Pac
    7ca8:	656b 2074 7244 706f 6570 0064 5852 4120     ket Dropped.RX A
    7cb8:	5052 3456 5020 6361 656b 0074 5852 4920     RPV4 Packet.RX I
    7cc8:	5650 2034 6150 6b63 7465 0000 5049 3656     PV4 Packet..IPV6
    7cd8:	5020 6361 656b 2074 7244 706f 6570 0064      Packet Dropped.
    7ce8:	7825 3a20 2520 0064 5c74 0000 5560 0000     %x : %d.t\..`U..
    7cf8:	55cc 0000 577a 0000 5932 0000 5a7e 0000     .U..zW..2Y..~Z..
    7d08:	5b28 0000 5cc0 0000 5b86 0000 5b9a 0000     ([...\...[...[..
    7d18:	5c06 0000 56fa 0000 5cd6 0000 5cd6 0000     .\...V...\...\..
    7d28:	55da 0000 5692 0000 561c 0000 5cd6 0000     .U...V...V...\..
    7d38:	5cd6 0000 5cd6 0000 5770 0000 5770 0000     .\...\..pW..pW..
    7d48:	5cd6 0000 570e 0000 582a 0000 5cde 0000     .\...W..*X...\..
    7d58:	5cde 0000 5cde 0000 57d4 0000 5788 0000     .\...\...W...W..
    7d68:	5cde 0000 5cde 0000 5cde 0000 5854 0000     .\...\...\..TX..
    7d78:	5854 0000 5cde 0000 58ec 0000 59e0 0000     TX...\...X...Y..
    7d88:	5ce2 0000 5ce2 0000 5ce2 0000 5940 0000     .\...\...\..@Y..
    7d98:	5ce2 0000 5a00 0000 59fa 0000 5ce2 0000     .\...Z...Y...\..
    7da8:	5a3c 0000 5a3c 0000 5ce2 0000 5a46 0000     <Z..<Z...\..FZ..
    7db8:	6374 5f70 6170 6b63 7465 7320 6e65 0074     tcp_packet sent.
    7dc8:	6374 5f70 6170 7372 6f65 7470 203a 6162     tcp_parseopt: ba
    7dd8:	2064 706f 6974 6e6f 7320 7a69 2065 656c     d option size le
    7de8:	676e 6874 0000 0000 6374 5f70 6170 7372     ngth....tcp_pars
    7df8:	6f65 7470 203a 746f 6568 0072 6374 5f70     eopt: other.tcp_
    7e08:	6170 7372 6f65 7470 203a 6162 2064 706f     parseopt: bad op
    7e18:	6974 6e6f 6c20 6e65 7467 0068 6374 5f70     tion length.tcp_
    7e28:	6170 7372 6f65 7470 203a 6162 2064 656c     parseopt: bad le
    7e38:	676e 6874 0000 0000 494c 5453 4e45 203a     ngth....LISTEN: 
    7e48:	7872 735f 6e79 0000 494c 5453 4e45 203a     rx_syn..LISTEN: 
    7e58:	6c63 736f 0065 0000 5953 5f4e 4553 544e     close...SYN_SENT
    7e68:	203a 7872 735f 6e79 0000 0000 5953 5f4e     : rx_syn....SYN_
    7e78:	4553 544e 203a 7872 735f 6e79 6361 006b     SENT: rx_synack.
    7e88:	5953 5f4e 4553 544e 203a 7872 615f 6b63     SYN_SENT: rx_ack
    7e98:	0000 0000 5953 5f4e 4553 544e 203a 6c63     ....SYN_SENT: cl
    7ea8:	736f 0065 5953 5f4e 4553 544e 203a 6974     ose.SYN_SENT: ti
    7eb8:	656d 756f 0074 0000 5953 5f4e 4552 4543     meout...SYN_RECE
    7ec8:	5649 4445 203a 7872 735f 6e79 6361 006b     IVED: rx_synack.
    7ed8:	5953 5f4e 4552 4543 5649 4445 203a 7872     SYN_RECEIVED: rx
    7ee8:	615f 6b63 0000 0000 5953 5f4e 4552 4543     _ack....SYN_RECE
    7ef8:	5649 4445 203a 6c63 736f 0065 5953 5f4e     IVED: close.SYN_
    7f08:	4552 4543 5649 4445 203a 7220 5f78 7372     RECEIVED:  rx_rs
    7f18:	0074 0000 7372 2074 6573 2071 4b4f 0000     t...rst seq OK..
    7f28:	5953 5f4e 4552 4543 5649 4445 203a 7420     SYN_RECEIVED:  t
    7f38:	6d69 6f65 7475 0000 5345 4154 4c42 5349     imeout..ESTABLIS
    7f48:	4548 3a44 7220 5f78 6361 006b 5345 4154     HED: rx_ack.ESTA
    7f58:	4c42 5349 4548 3a44 6320 6f6c 6573 0000     BLISHED: close..
    7f68:	5345 4154 4c42 5349 4548 3a44 7220 5f78     ESTABLISHED: rx_
    7f78:	6966 616e 6b63 0000 5345 4154 4c42 5349     finack..ESTABLIS
    7f88:	4548 3a44 7220 5f78 6966 006e 5345 4154     HED: rx_fin.ESTA
    7f98:	4c42 5349 4548 3a44 2020 6974 656d 756f     BLISHED:  timeou
    7fa8:	0074 0000 4946 5f4e 4157 5449 315f 203a     t...FIN_WAIT_1: 
    7fb8:	7872 665f 6e69 0000 4946 5f4e 4157 5449     rx_fin..FIN_WAIT
    7fc8:	315f 203a 7872 615f 6b63 0000 4946 5f4e     _1: rx_ack..FIN_
    7fd8:	4157 5449 315f 203a 7872 665f 6e69 6361     WAIT_1: rx_finac
    7fe8:	006b 0000 4946 5f4e 4157 5449 315f 203a     k...FIN_WAIT_1: 
    7ff8:	7420 6d69 6f65 7475 0000 0000 4946 5f4e      timeout....FIN_
    8008:	4157 5449 325f 203a 7872 665f 6e69 0000     WAIT_2: rx_fin..
    8018:	4946 5f4e 4157 5449 325f 203a 7420 6d69     FIN_WAIT_2:  tim
    8028:	6f65 7475 0000 0000 4c43 534f 4e49 3a47     eout....CLOSING:
    8038:	7220 5f78 6361 006b 414c 5453 415f 4b43      rx_ack.LAST_ACK
    8048:	203a 7872 615f 6b63 0000 0000 6954 656d     : rx_ack....Time
    8058:	5720 6961 0074 0000 4c43 534f 4445 203a      Wait...CLOSED: 
    8068:	6361 6974 6576 6f5f 6570 006e 4c43 534f     active_open.CLOS
    8078:	4445 203a 6170 7373 7669 5f65 706f 6e65     ED: passive_open
    8088:	0000 0000 6f66 6e75 2064 7973 266e 6361     ....found syn&ac
    8098:	006b 0000 6f66 6e75 2064 7973 006e 0000     k...found syn...
    80a8:	6f66 6e75 2064 6966 266e 6361 006b 0000     found fin&ack...
    80b8:	6f66 6e75 2064 6966 006e 0000 6f66 6e75     found fin...foun
    80c8:	2064 7372 2674 6361 006b 0000 6f66 6e75     d rst&ack...foun
    80d8:	2064 7372 0074 0000 6f66 6e75 2064 6361     d rst...found ac
    80e8:	006b 0000 6f63 666e 7375 6465 0000 0000     k...confused....
    80f8:	6b70 2074 7264 706f 6570 3a64 6220 6461     pkt dropped: bad
    8108:	6f20 7470 6f69 736e 0000 0000 6374 5f70      options....tcp_
    8118:	6962 646e 0000 0000 6374 5f70 696c 7473     bind....tcp_list
    8128:	6e65 0000 6374 5f70 6c63 736f 0065 0000     en..tcp_close...
    8138:	6374 2070 6974 656d 756f 0074               tcp timeout.

00008144 <UDP_CallBackTable>:
    8144:	1000 0000 17ad 0000 0044 0000 4aa9 0000     ........D....J..

00008154 <__sf_fake_stderr>:
	...

00008174 <__sf_fake_stdin>:
	...

00008194 <__sf_fake_stdout>:
	...
    81b4:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
    81c4:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
    81d4:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
    81e4:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

000081f1 <_ctype_>:
    81f1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    8201:	2020 2020 2020 2020 2020 2020 2020 2020                     
    8211:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    8221:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    8231:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    8241:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    8251:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    8261:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    8271:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000082f4 <_init>:
    82f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    82f6:	46c0      	nop			; (mov r8, r8)
    82f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    82fa:	bc08      	pop	{r3}
    82fc:	469e      	mov	lr, r3
    82fe:	4770      	bx	lr

00008300 <__init_array_start>:
    8300:	000000cd 	.word	0x000000cd

00008304 <_fini>:
    8304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8306:	46c0      	nop			; (mov r8, r8)
    8308:	bcf8      	pop	{r3, r4, r5, r6, r7}
    830a:	bc08      	pop	{r3}
    830c:	469e      	mov	lr, r3
    830e:	4770      	bx	lr

00008310 <__fini_array_start>:
    8310:	000000a5 	.word	0x000000a5
