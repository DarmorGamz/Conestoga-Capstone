
DCA_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009518  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001d4  20000000  00009518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003ef4  200001d4  000096ec  000201d4  2**2
                  ALLOC
  3 .stack        00002000  200040c8  0000d5e0  000201d4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004f696  00000000  00000000  00020255  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007f88  00000000  00000000  0006f8eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001598e  00000000  00000000  00077873  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001468  00000000  00000000  0008d201  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000013b0  00000000  00000000  0008e669  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d25c  00000000  00000000  0008fa19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002495d  00000000  00000000  000acc75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005bd57  00000000  00000000  000d15d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003bb4  00000000  00000000  0012d32c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
const mac48Address_t broadcastMAC = {{0xff, 0xff, 0xff, 0xff, 0xff, 0xff}};

const mac48Address_t *MAC_getAddress(void)
{
	return &macAddress;
}
       0:	c8 60 00 20 1d 1f 00 00 19 1f 00 00 19 1f 00 00     .`. ............
	...
      2c:	19 1f 00 00 00 00 00 00 00 00 00 00 19 1f 00 00     ................
      3c:	19 1f 00 00 19 1f 00 00 19 1f 00 00 19 1f 00 00     ................
      4c:	19 1f 00 00 65 2f 00 00 51 33 00 00 19 1f 00 00     ....e/..Q3......
      5c:	19 1f 00 00 19 1f 00 00 19 1f 00 00 19 1f 00 00     ................
	...
      74:	fd 39 00 00 19 1f 00 00 11 3a 00 00 19 1f 00 00     .9.......:......
      84:	25 3a 00 00 19 1f 00 00 00 00 00 00 00 00 00 00     %:..............
      94:	19 1f 00 00 19 1f 00 00 19 1f 00 00 19 1f 00 00     ................

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	200001d4 	.word	0x200001d4
      c4:	00000000 	.word	0x00000000
      c8:	00009518 	.word	0x00009518

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	200001d8 	.word	0x200001d8
      f8:	00009518 	.word	0x00009518
      fc:	00009518 	.word	0x00009518
     100:	00000000 	.word	0x00000000

00000104 <_LedColorControl>:



void _LedColorControl(eLED_COLOR color) {
    // Set the LEDs according to input colour enumeration
    switch(color) {
     104:	2801      	cmp	r0, #1
     106:	d00d      	beq.n	124 <_LedColorControl+0x20>
     108:	2800      	cmp	r0, #0
     10a:	d004      	beq.n	116 <_LedColorControl+0x12>
     10c:	2802      	cmp	r0, #2
     10e:	d010      	beq.n	132 <_LedColorControl+0x2e>
     110:	2803      	cmp	r0, #3
     112:	d015      	beq.n	140 <_LedColorControl+0x3c>
            gpio_set_pin_level(LED_GREEN, true);
            break;
        default:
            break;
    }
}
     114:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     116:	23c0      	movs	r3, #192	; 0xc0
     118:	05db      	lsls	r3, r3, #23
     11a:	2208      	movs	r2, #8
     11c:	615a      	str	r2, [r3, #20]
     11e:	3a04      	subs	r2, #4
     120:	615a      	str	r2, [r3, #20]
     122:	e7f7      	b.n	114 <_LedColorControl+0x10>
     124:	23c0      	movs	r3, #192	; 0xc0
     126:	05db      	lsls	r3, r3, #23
     128:	2208      	movs	r2, #8
     12a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     12c:	3a04      	subs	r2, #4
     12e:	619a      	str	r2, [r3, #24]
     130:	e7f0      	b.n	114 <_LedColorControl+0x10>
     132:	23c0      	movs	r3, #192	; 0xc0
     134:	05db      	lsls	r3, r3, #23
     136:	2208      	movs	r2, #8
     138:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     13a:	3a04      	subs	r2, #4
     13c:	615a      	str	r2, [r3, #20]
     13e:	e7e9      	b.n	114 <_LedColorControl+0x10>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     140:	23c0      	movs	r3, #192	; 0xc0
     142:	05db      	lsls	r3, r3, #23
     144:	2208      	movs	r2, #8
     146:	619a      	str	r2, [r3, #24]
     148:	3a04      	subs	r2, #4
     14a:	619a      	str	r2, [r3, #24]
     14c:	e7e2      	b.n	114 <_LedColorControl+0x10>
	...

00000150 <App_SetStatus>:
    Timer_SetTimer(TIMER_APP_LED_HOLD, TIMEOUT_LED_HOLD);
}


void App_SetStatus(eStatusCode code) {
    s_u8StatusCode = code;
     150:	4b01      	ldr	r3, [pc, #4]	; (158 <App_SetStatus+0x8>)
     152:	7098      	strb	r0, [r3, #2]
}
     154:	4770      	bx	lr
     156:	46c0      	nop			; (mov r8, r8)
     158:	200001f0 	.word	0x200001f0

0000015c <App_GetStatus>:

eStatusCode App_GetStatus(void) {
    return s_u8StatusCode;
     15c:	4b01      	ldr	r3, [pc, #4]	; (164 <App_GetStatus+0x8>)
     15e:	7898      	ldrb	r0, [r3, #2]
}
     160:	4770      	bx	lr
     162:	46c0      	nop			; (mov r8, r8)
     164:	200001f0 	.word	0x200001f0

00000168 <_LedControl>:
void _LedControl(void) {
     168:	b510      	push	{r4, lr}
    eStatusCode code = App_GetStatus();
     16a:	4b07      	ldr	r3, [pc, #28]	; (188 <_LedControl+0x20>)
     16c:	4798      	blx	r3
    eLED_COLOR color =	STATUS_LED[code][(index++)%LED_SEQUENCE_MAXCNT];
     16e:	4b07      	ldr	r3, [pc, #28]	; (18c <_LedControl+0x24>)
     170:	78da      	ldrb	r2, [r3, #3]
     172:	1c51      	adds	r1, r2, #1
     174:	70d9      	strb	r1, [r3, #3]
     176:	2303      	movs	r3, #3
     178:	4013      	ands	r3, r2
     17a:	0082      	lsls	r2, r0, #2
     17c:	4804      	ldr	r0, [pc, #16]	; (190 <_LedControl+0x28>)
     17e:	1880      	adds	r0, r0, r2
     180:	5cc0      	ldrb	r0, [r0, r3]
    _LedColorControl(color);
     182:	4b04      	ldr	r3, [pc, #16]	; (194 <_LedControl+0x2c>)
     184:	4798      	blx	r3
}
     186:	bd10      	pop	{r4, pc}
     188:	0000015d 	.word	0x0000015d
     18c:	200001f0 	.word	0x200001f0
     190:	00008208 	.word	0x00008208
     194:	00000105 	.word	0x00000105

00000198 <_One_Second_Timer_Callback>:
static void _One_Second_Timer_Callback(void) {
     198:	b510      	push	{r4, lr}
    if (fSkipPump==false) Timer_Pump();
     19a:	4b07      	ldr	r3, [pc, #28]	; (1b8 <_One_Second_Timer_Callback+0x20>)
     19c:	4798      	blx	r3
	TC2->COUNT32.COUNT.reg = 0; // Reset the timer count to 0
     19e:	2200      	movs	r2, #0
     1a0:	4b06      	ldr	r3, [pc, #24]	; (1bc <_One_Second_Timer_Callback+0x24>)
     1a2:	611a      	str	r2, [r3, #16]
    if (Timer_GetTimer(TIMER_APP_LED_HOLD)==0) _LedControl();
     1a4:	4b06      	ldr	r3, [pc, #24]	; (1c0 <_One_Second_Timer_Callback+0x28>)
     1a6:	8818      	ldrh	r0, [r3, #0]
     1a8:	4b06      	ldr	r3, [pc, #24]	; (1c4 <_One_Second_Timer_Callback+0x2c>)
     1aa:	4798      	blx	r3
     1ac:	2800      	cmp	r0, #0
     1ae:	d000      	beq.n	1b2 <_One_Second_Timer_Callback+0x1a>
}
     1b0:	bd10      	pop	{r4, pc}
    if (Timer_GetTimer(TIMER_APP_LED_HOLD)==0) _LedControl();
     1b2:	4b05      	ldr	r3, [pc, #20]	; (1c8 <_One_Second_Timer_Callback+0x30>)
     1b4:	4798      	blx	r3
}
     1b6:	e7fb      	b.n	1b0 <_One_Second_Timer_Callback+0x18>
     1b8:	00001d81 	.word	0x00001d81
     1bc:	42002800 	.word	0x42002800
     1c0:	200001f0 	.word	0x200001f0
     1c4:	00001d3d 	.word	0x00001d3d
     1c8:	00000169 	.word	0x00000169

000001cc <_AddToFifo_EventStartup>:

bool _AddToFifo_EventStartup(void) {
     1cc:	b510      	push	{r4, lr}
     1ce:	b082      	sub	sp, #8
	uint32_t u32Timestamp;
    Timestamp_GetTimestamp(&u32Timestamp);
     1d0:	a801      	add	r0, sp, #4
     1d2:	4b09      	ldr	r3, [pc, #36]	; (1f8 <_AddToFifo_EventStartup+0x2c>)
     1d4:	4798      	blx	r3

	// String to add to buffer
	sprintf(g_acBuffer64, "Event:System:Startup:%d", u32Timestamp);
     1d6:	4c09      	ldr	r4, [pc, #36]	; (1fc <_AddToFifo_EventStartup+0x30>)
     1d8:	9a01      	ldr	r2, [sp, #4]
     1da:	4909      	ldr	r1, [pc, #36]	; (200 <_AddToFifo_EventStartup+0x34>)
     1dc:	0020      	movs	r0, r4
     1de:	4b09      	ldr	r3, [pc, #36]	; (204 <_AddToFifo_EventStartup+0x38>)
     1e0:	4798      	blx	r3

	uint8_t u8TotalLength;
	u8TotalLength = strlen(g_acBuffer64);
     1e2:	0020      	movs	r0, r4
     1e4:	4b08      	ldr	r3, [pc, #32]	; (208 <_AddToFifo_EventStartup+0x3c>)
     1e6:	4798      	blx	r3
	
    // Push to the command FIFO
    CmdFifo_Push(&g_acBuffer64[0], u8TotalLength);
     1e8:	21ff      	movs	r1, #255	; 0xff
     1ea:	4001      	ands	r1, r0
     1ec:	0020      	movs	r0, r4
     1ee:	4b07      	ldr	r3, [pc, #28]	; (20c <_AddToFifo_EventStartup+0x40>)
     1f0:	4798      	blx	r3
	

    return true;
}
     1f2:	2001      	movs	r0, #1
     1f4:	b002      	add	sp, #8
     1f6:	bd10      	pop	{r4, pc}
     1f8:	00001e69 	.word	0x00001e69
     1fc:	2000098c 	.word	0x2000098c
     200:	00008214 	.word	0x00008214
     204:	00007901 	.word	0x00007901
     208:	00007945 	.word	0x00007945
     20c:	000007fd 	.word	0x000007fd

00000210 <_AddToFifo_Heartbeat>:

bool _AddToFifo_Heartbeat(void) {
     210:	b510      	push	{r4, lr}
     212:	b082      	sub	sp, #8
	uint32_t u32Timestamp;
    Timestamp_GetTimestamp(&u32Timestamp);
     214:	a801      	add	r0, sp, #4
     216:	4b09      	ldr	r3, [pc, #36]	; (23c <_AddToFifo_Heartbeat+0x2c>)
     218:	4798      	blx	r3

	// String to add to buffer
	sprintf(g_acBuffer64, "Event:System:Heartbeat:%d", u32Timestamp);
     21a:	4c09      	ldr	r4, [pc, #36]	; (240 <_AddToFifo_Heartbeat+0x30>)
     21c:	9a01      	ldr	r2, [sp, #4]
     21e:	4909      	ldr	r1, [pc, #36]	; (244 <_AddToFifo_Heartbeat+0x34>)
     220:	0020      	movs	r0, r4
     222:	4b09      	ldr	r3, [pc, #36]	; (248 <_AddToFifo_Heartbeat+0x38>)
     224:	4798      	blx	r3

	uint8_t u8TotalLength;
	u8TotalLength = strlen(g_acBuffer64);
     226:	0020      	movs	r0, r4
     228:	4b08      	ldr	r3, [pc, #32]	; (24c <_AddToFifo_Heartbeat+0x3c>)
     22a:	4798      	blx	r3
	
    // Push to the command FIFO
    CmdFifo_Push(&g_acBuffer64[0], u8TotalLength);
     22c:	21ff      	movs	r1, #255	; 0xff
     22e:	4001      	ands	r1, r0
     230:	0020      	movs	r0, r4
     232:	4b07      	ldr	r3, [pc, #28]	; (250 <_AddToFifo_Heartbeat+0x40>)
     234:	4798      	blx	r3
	

    return true;
}
     236:	2001      	movs	r0, #1
     238:	b002      	add	sp, #8
     23a:	bd10      	pop	{r4, pc}
     23c:	00001e69 	.word	0x00001e69
     240:	2000098c 	.word	0x2000098c
     244:	0000822c 	.word	0x0000822c
     248:	00007901 	.word	0x00007901
     24c:	00007945 	.word	0x00007945
     250:	000007fd 	.word	0x000007fd

00000254 <DcaApp_Entry>:
void DcaApp_Entry(void) {
     254:	b570      	push	{r4, r5, r6, lr}
	DEBUG_INFO("Entering main state machine... ");
     256:	4837      	ldr	r0, [pc, #220]	; (334 <DcaApp_Entry+0xe0>)
     258:	4b37      	ldr	r3, [pc, #220]	; (338 <DcaApp_Entry+0xe4>)
     25a:	4798      	blx	r3
	App_SetStatus(STATUS_OK);
     25c:	2001      	movs	r0, #1
     25e:	4b37      	ldr	r3, [pc, #220]	; (33c <DcaApp_Entry+0xe8>)
     260:	4798      	blx	r3
     262:	e024      	b.n	2ae <DcaApp_Entry+0x5a>
            if (fLinked==true) {
     264:	2d00      	cmp	r5, #0
     266:	d043      	beq.n	2f0 <DcaApp_Entry+0x9c>
                DEBUG_INFO("Ethernet link up. ");
     268:	4835      	ldr	r0, [pc, #212]	; (340 <DcaApp_Entry+0xec>)
     26a:	4c33      	ldr	r4, [pc, #204]	; (338 <DcaApp_Entry+0xe4>)
     26c:	47a0      	blx	r4
                DEBUG_INFO("Power down Wifi. ");
     26e:	4835      	ldr	r0, [pc, #212]	; (344 <DcaApp_Entry+0xf0>)
     270:	47a0      	blx	r4
                s_fUseWifi = false;
     272:	2300      	movs	r3, #0
     274:	4a34      	ldr	r2, [pc, #208]	; (348 <DcaApp_Entry+0xf4>)
     276:	7113      	strb	r3, [r2, #4]
			s_fCheckLink = false;
     278:	4a34      	ldr	r2, [pc, #208]	; (34c <DcaApp_Entry+0xf8>)
     27a:	7013      	strb	r3, [r2, #0]
		if (s_fUseWifi==true) {} // Wifi_PumpEvents();
     27c:	4b32      	ldr	r3, [pc, #200]	; (348 <DcaApp_Entry+0xf4>)
     27e:	791b      	ldrb	r3, [r3, #4]
		if (s_fUseWifi==false) Ethernet_PumpEvents();
     280:	2b00      	cmp	r3, #0
     282:	d03f      	beq.n	304 <DcaApp_Entry+0xb0>
		_Sensor1_Callback();
     284:	4b32      	ldr	r3, [pc, #200]	; (350 <DcaApp_Entry+0xfc>)
     286:	4798      	blx	r3
        if (CmdFifo_GetByteCount()>0) {
     288:	4b32      	ldr	r3, [pc, #200]	; (354 <DcaApp_Entry+0x100>)
     28a:	4798      	blx	r3
     28c:	2800      	cmp	r0, #0
     28e:	dd3c      	ble.n	30a <DcaApp_Entry+0xb6>
            fTimeToSend = true;
     290:	2401      	movs	r4, #1
		if (Timer_GetTimer(TIMER_APP_HEARTBEAT)==0) {
     292:	4b2d      	ldr	r3, [pc, #180]	; (348 <DcaApp_Entry+0xf4>)
     294:	88d8      	ldrh	r0, [r3, #6]
     296:	4b30      	ldr	r3, [pc, #192]	; (358 <DcaApp_Entry+0x104>)
     298:	4798      	blx	r3
     29a:	2800      	cmp	r0, #0
     29c:	d037      	beq.n	30e <DcaApp_Entry+0xba>
        Timer_SetTimer(TIMER_APP_ENWI_LINK_CHECK, 300);
     29e:	4b2a      	ldr	r3, [pc, #168]	; (348 <DcaApp_Entry+0xf4>)
     2a0:	8918      	ldrh	r0, [r3, #8]
     2a2:	2196      	movs	r1, #150	; 0x96
     2a4:	0049      	lsls	r1, r1, #1
     2a6:	4b2d      	ldr	r3, [pc, #180]	; (35c <DcaApp_Entry+0x108>)
     2a8:	4798      	blx	r3
        if (fTimeToSend==true) {
     2aa:	2c00      	cmp	r4, #0
     2ac:	d139      	bne.n	322 <DcaApp_Entry+0xce>
		Watchdog_Feed();
     2ae:	4b2c      	ldr	r3, [pc, #176]	; (360 <DcaApp_Entry+0x10c>)
     2b0:	4798      	blx	r3
		if (s_fCheckLink==true) {
     2b2:	4b26      	ldr	r3, [pc, #152]	; (34c <DcaApp_Entry+0xf8>)
     2b4:	781c      	ldrb	r4, [r3, #0]
     2b6:	2c00      	cmp	r4, #0
     2b8:	d0e0      	beq.n	27c <DcaApp_Entry+0x28>
            DEBUG_INFO("Power up Ethernet. ");
     2ba:	482a      	ldr	r0, [pc, #168]	; (364 <DcaApp_Entry+0x110>)
     2bc:	4b1e      	ldr	r3, [pc, #120]	; (338 <DcaApp_Entry+0xe4>)
     2be:	4798      	blx	r3
            Ethernet_PowerUp();
     2c0:	4b29      	ldr	r3, [pc, #164]	; (368 <DcaApp_Entry+0x114>)
     2c2:	4798      	blx	r3
            Timer_SetTimer(TIMER_APP_ETHERNET_LINK_TIMEOUT, TIMEOUT_ETHERNET_LINK);
     2c4:	2103      	movs	r1, #3
     2c6:	2000      	movs	r0, #0
     2c8:	4b24      	ldr	r3, [pc, #144]	; (35c <DcaApp_Entry+0x108>)
     2ca:	4798      	blx	r3
            bool fLinked = false;
     2cc:	2500      	movs	r5, #0
            while(Timer_GetTimer(TIMER_APP_ETHERNET_LINK_TIMEOUT)>0) {
     2ce:	2000      	movs	r0, #0
     2d0:	4b21      	ldr	r3, [pc, #132]	; (358 <DcaApp_Entry+0x104>)
     2d2:	4798      	blx	r3
     2d4:	2800      	cmp	r0, #0
     2d6:	d0c5      	beq.n	264 <DcaApp_Entry+0x10>
                Watchdog_Feed();
     2d8:	4b21      	ldr	r3, [pc, #132]	; (360 <DcaApp_Entry+0x10c>)
     2da:	4798      	blx	r3
                if (Ethernet_HasLink()==true) {
     2dc:	4b23      	ldr	r3, [pc, #140]	; (36c <DcaApp_Entry+0x118>)
     2de:	4798      	blx	r3
     2e0:	2801      	cmp	r0, #1
     2e2:	d1f4      	bne.n	2ce <DcaApp_Entry+0x7a>
                    Timer_SetTimer(TIMER_APP_ETHERNET_LINK_TIMEOUT, 0);
     2e4:	2100      	movs	r1, #0
     2e6:	2000      	movs	r0, #0
     2e8:	4b1c      	ldr	r3, [pc, #112]	; (35c <DcaApp_Entry+0x108>)
     2ea:	4798      	blx	r3
                    fLinked = true;
     2ec:	0025      	movs	r5, r4
     2ee:	e7ee      	b.n	2ce <DcaApp_Entry+0x7a>
                DEBUG_INFO("Ethernet link down. ");
     2f0:	481f      	ldr	r0, [pc, #124]	; (370 <DcaApp_Entry+0x11c>)
     2f2:	4c11      	ldr	r4, [pc, #68]	; (338 <DcaApp_Entry+0xe4>)
     2f4:	47a0      	blx	r4
                DEBUG_INFO("Power down Ethernet. ");
     2f6:	481f      	ldr	r0, [pc, #124]	; (374 <DcaApp_Entry+0x120>)
     2f8:	47a0      	blx	r4
                Ethernet_PowerDown();
     2fa:	4b1f      	ldr	r3, [pc, #124]	; (378 <DcaApp_Entry+0x124>)
     2fc:	4798      	blx	r3
                DEBUG_INFO("Power up WiFi. ");
     2fe:	481f      	ldr	r0, [pc, #124]	; (37c <DcaApp_Entry+0x128>)
     300:	47a0      	blx	r4
     302:	e7fe      	b.n	302 <DcaApp_Entry+0xae>
		if (s_fUseWifi==false) Ethernet_PumpEvents();
     304:	4b1e      	ldr	r3, [pc, #120]	; (380 <DcaApp_Entry+0x12c>)
     306:	4798      	blx	r3
     308:	e7bc      	b.n	284 <DcaApp_Entry+0x30>
        bool fTimeToSend = false;
     30a:	2400      	movs	r4, #0
     30c:	e7c1      	b.n	292 <DcaApp_Entry+0x3e>
			if (CmdFifo_GetByteCount()==0) _AddToFifo_Heartbeat();
     30e:	4b11      	ldr	r3, [pc, #68]	; (354 <DcaApp_Entry+0x100>)
     310:	4798      	blx	r3
     312:	2800      	cmp	r0, #0
     314:	d103      	bne.n	31e <DcaApp_Entry+0xca>
     316:	4b1b      	ldr	r3, [pc, #108]	; (384 <DcaApp_Entry+0x130>)
     318:	4798      	blx	r3
            fTimeToSend = true;
     31a:	2401      	movs	r4, #1
     31c:	e7bf      	b.n	29e <DcaApp_Entry+0x4a>
     31e:	2401      	movs	r4, #1
     320:	e7bd      	b.n	29e <DcaApp_Entry+0x4a>
            Ethernet_QueueServerSend();
     322:	4b19      	ldr	r3, [pc, #100]	; (388 <DcaApp_Entry+0x134>)
     324:	4798      	blx	r3
            Timer_SetTimer(TIMER_APP_HEARTBEAT, s_u16HeartbeatRate);
     326:	4b08      	ldr	r3, [pc, #32]	; (348 <DcaApp_Entry+0xf4>)
     328:	8959      	ldrh	r1, [r3, #10]
     32a:	88d8      	ldrh	r0, [r3, #6]
     32c:	4b0b      	ldr	r3, [pc, #44]	; (35c <DcaApp_Entry+0x108>)
     32e:	4798      	blx	r3
     330:	e7bd      	b.n	2ae <DcaApp_Entry+0x5a>
     332:	46c0      	nop			; (mov r8, r8)
     334:	00008248 	.word	0x00008248
     338:	00000891 	.word	0x00000891
     33c:	00000151 	.word	0x00000151
     340:	0000827c 	.word	0x0000827c
     344:	00008290 	.word	0x00008290
     348:	200001f0 	.word	0x200001f0
     34c:	20000000 	.word	0x20000000
     350:	00001ac1 	.word	0x00001ac1
     354:	000007f1 	.word	0x000007f1
     358:	00001d3d 	.word	0x00001d3d
     35c:	00001d31 	.word	0x00001d31
     360:	00001ee5 	.word	0x00001ee5
     364:	00008268 	.word	0x00008268
     368:	000009cd 	.word	0x000009cd
     36c:	00000c35 	.word	0x00000c35
     370:	000082a4 	.word	0x000082a4
     374:	000082bc 	.word	0x000082bc
     378:	00000955 	.word	0x00000955
     37c:	000082d4 	.word	0x000082d4
     380:	00001661 	.word	0x00001661
     384:	00000211 	.word	0x00000211
     388:	000018dd 	.word	0x000018dd

0000038c <_AddToFifo_EventResetCause>:

bool _AddToFifo_EventResetCause(int u8ResetCause) {
     38c:	b510      	push	{r4, lr}
     38e:	b082      	sub	sp, #8
     390:	0004      	movs	r4, r0
	uint32_t u32Timestamp;
    Timestamp_GetTimestamp(&u32Timestamp);
     392:	a801      	add	r0, sp, #4
     394:	4b1c      	ldr	r3, [pc, #112]	; (408 <_AddToFifo_EventResetCause+0x7c>)
     396:	4798      	blx	r3
	
	uint8_t u8TotalLength;

	switch(u8ResetCause) {
     398:	2c02      	cmp	r4, #2
     39a:	d01e      	beq.n	3da <_AddToFifo_EventResetCause+0x4e>
     39c:	2c03      	cmp	r4, #3
     39e:	d027      	beq.n	3f0 <_AddToFifo_EventResetCause+0x64>
     3a0:	2c01      	cmp	r4, #1
     3a2:	d00a      	beq.n	3ba <_AddToFifo_EventResetCause+0x2e>
		case 3:
			sprintf(g_acBuffer64, "Event:ResetCause:1.2V Brownout:%d", u32Timestamp);
			u8TotalLength = strlen(g_acBuffer64);
			break;
		default:
			sprintf(g_acBuffer64, "Event:ResetCause:Unknown:%d", u32Timestamp);
     3a4:	4c19      	ldr	r4, [pc, #100]	; (40c <_AddToFifo_EventResetCause+0x80>)
     3a6:	9a01      	ldr	r2, [sp, #4]
     3a8:	4919      	ldr	r1, [pc, #100]	; (410 <_AddToFifo_EventResetCause+0x84>)
     3aa:	0020      	movs	r0, r4
     3ac:	4b19      	ldr	r3, [pc, #100]	; (414 <_AddToFifo_EventResetCause+0x88>)
     3ae:	4798      	blx	r3
			u8TotalLength = strlen(g_acBuffer64);
     3b0:	0020      	movs	r0, r4
     3b2:	4b19      	ldr	r3, [pc, #100]	; (418 <_AddToFifo_EventResetCause+0x8c>)
     3b4:	4798      	blx	r3
     3b6:	b2c1      	uxtb	r1, r0
			break;
     3b8:	e009      	b.n	3ce <_AddToFifo_EventResetCause+0x42>
			sprintf(g_acBuffer64, "Event:ResetCause:WDT:%d", u32Timestamp);
     3ba:	4c14      	ldr	r4, [pc, #80]	; (40c <_AddToFifo_EventResetCause+0x80>)
     3bc:	9a01      	ldr	r2, [sp, #4]
     3be:	4917      	ldr	r1, [pc, #92]	; (41c <_AddToFifo_EventResetCause+0x90>)
     3c0:	0020      	movs	r0, r4
     3c2:	4b14      	ldr	r3, [pc, #80]	; (414 <_AddToFifo_EventResetCause+0x88>)
     3c4:	4798      	blx	r3
			u8TotalLength = strlen(g_acBuffer64);
     3c6:	0020      	movs	r0, r4
     3c8:	4b13      	ldr	r3, [pc, #76]	; (418 <_AddToFifo_EventResetCause+0x8c>)
     3ca:	4798      	blx	r3
     3cc:	b2c1      	uxtb	r1, r0
	}
	
    // Push to the command FIFO
    CmdFifo_Push(&g_acBuffer64[0], u8TotalLength);
     3ce:	480f      	ldr	r0, [pc, #60]	; (40c <_AddToFifo_EventResetCause+0x80>)
     3d0:	4b13      	ldr	r3, [pc, #76]	; (420 <_AddToFifo_EventResetCause+0x94>)
     3d2:	4798      	blx	r3


    return true;
}
     3d4:	2001      	movs	r0, #1
     3d6:	b002      	add	sp, #8
     3d8:	bd10      	pop	{r4, pc}
			sprintf(g_acBuffer64, "Event:ResetCause:3.3V Brownout:%d", u32Timestamp);
     3da:	4c0c      	ldr	r4, [pc, #48]	; (40c <_AddToFifo_EventResetCause+0x80>)
     3dc:	9a01      	ldr	r2, [sp, #4]
     3de:	4911      	ldr	r1, [pc, #68]	; (424 <_AddToFifo_EventResetCause+0x98>)
     3e0:	0020      	movs	r0, r4
     3e2:	4b0c      	ldr	r3, [pc, #48]	; (414 <_AddToFifo_EventResetCause+0x88>)
     3e4:	4798      	blx	r3
			u8TotalLength = strlen(g_acBuffer64);
     3e6:	0020      	movs	r0, r4
     3e8:	4b0b      	ldr	r3, [pc, #44]	; (418 <_AddToFifo_EventResetCause+0x8c>)
     3ea:	4798      	blx	r3
     3ec:	b2c1      	uxtb	r1, r0
			break;
     3ee:	e7ee      	b.n	3ce <_AddToFifo_EventResetCause+0x42>
			sprintf(g_acBuffer64, "Event:ResetCause:1.2V Brownout:%d", u32Timestamp);
     3f0:	4c06      	ldr	r4, [pc, #24]	; (40c <_AddToFifo_EventResetCause+0x80>)
     3f2:	9a01      	ldr	r2, [sp, #4]
     3f4:	490c      	ldr	r1, [pc, #48]	; (428 <_AddToFifo_EventResetCause+0x9c>)
     3f6:	0020      	movs	r0, r4
     3f8:	4b06      	ldr	r3, [pc, #24]	; (414 <_AddToFifo_EventResetCause+0x88>)
     3fa:	4798      	blx	r3
			u8TotalLength = strlen(g_acBuffer64);
     3fc:	0020      	movs	r0, r4
     3fe:	4b06      	ldr	r3, [pc, #24]	; (418 <_AddToFifo_EventResetCause+0x8c>)
     400:	4798      	blx	r3
     402:	b2c1      	uxtb	r1, r0
			break;
     404:	e7e3      	b.n	3ce <_AddToFifo_EventResetCause+0x42>
     406:	46c0      	nop			; (mov r8, r8)
     408:	00001e69 	.word	0x00001e69
     40c:	2000098c 	.word	0x2000098c
     410:	00008344 	.word	0x00008344
     414:	00007901 	.word	0x00007901
     418:	00007945 	.word	0x00007945
     41c:	000082e4 	.word	0x000082e4
     420:	000007fd 	.word	0x000007fd
     424:	000082fc 	.word	0x000082fc
     428:	00008320 	.word	0x00008320

0000042c <_FlashWriteAppUserConfig>:
        _InitUserConfig();
    }
	DEBUG_INFO("UserRead");
}

void _FlashWriteAppUserConfig(void) {
     42c:	b530      	push	{r4, r5, lr}
     42e:	b083      	sub	sp, #12
	// Set timestamp
    uint32_t timestamp;
    Timestamp_GetTimestamp(&timestamp);
     430:	a801      	add	r0, sp, #4
     432:	4b14      	ldr	r3, [pc, #80]	; (484 <_FlashWriteAppUserConfig+0x58>)
     434:	4798      	blx	r3
	memcpy(&g_st_UserConfig.au8Timestamp[0], &timestamp, 4);
     436:	2204      	movs	r2, #4
     438:	a901      	add	r1, sp, #4
     43a:	4813      	ldr	r0, [pc, #76]	; (488 <_FlashWriteAppUserConfig+0x5c>)
     43c:	4b13      	ldr	r3, [pc, #76]	; (48c <_FlashWriteAppUserConfig+0x60>)
     43e:	4798      	blx	r3
	
	// Before the flash can be written, it must be erased - note this will erase whole 256 byte rows!
    Flash_EraseFlash(USER_CONFIG_SPACE_ORIGIN, USER_CONFIG_SPACE_SIZE_PAGES);
     440:	2108      	movs	r1, #8
     442:	4813      	ldr	r0, [pc, #76]	; (490 <_FlashWriteAppUserConfig+0x64>)
     444:	4b13      	ldr	r3, [pc, #76]	; (494 <_FlashWriteAppUserConfig+0x68>)
     446:	4798      	blx	r3
	
	// Wait for the Flash memory controller to finish erasing
	while (RTC->MODE0.STATUS.bit.SYNCBUSY || NVMCTRL->INTFLAG.bit.READY == 0);
     448:	4b13      	ldr	r3, [pc, #76]	; (498 <_FlashWriteAppUserConfig+0x6c>)
     44a:	7a9b      	ldrb	r3, [r3, #10]
     44c:	09db      	lsrs	r3, r3, #7
     44e:	d1fb      	bne.n	448 <_FlashWriteAppUserConfig+0x1c>
     450:	4b12      	ldr	r3, [pc, #72]	; (49c <_FlashWriteAppUserConfig+0x70>)
     452:	7d1b      	ldrb	r3, [r3, #20]
     454:	07db      	lsls	r3, r3, #31
     456:	d5f7      	bpl.n	448 <_FlashWriteAppUserConfig+0x1c>

    // Store the user configuration in the appropriate region of NVM
    Flash_WriteFlash(USER_CONFIG_SPACE_ORIGIN, (char*)&g_st_UserConfig, sizeof(tsUserConfig));
     458:	4c11      	ldr	r4, [pc, #68]	; (4a0 <_FlashWriteAppUserConfig+0x74>)
     45a:	4d0d      	ldr	r5, [pc, #52]	; (490 <_FlashWriteAppUserConfig+0x64>)
     45c:	2206      	movs	r2, #6
     45e:	0021      	movs	r1, r4
     460:	0028      	movs	r0, r5
     462:	4b10      	ldr	r3, [pc, #64]	; (4a4 <_FlashWriteAppUserConfig+0x78>)
     464:	4798      	blx	r3
	memset(&g_st_UserConfig, 0, sizeof(tsUserConfig));
     466:	2206      	movs	r2, #6
     468:	2100      	movs	r1, #0
     46a:	0020      	movs	r0, r4
     46c:	4b0e      	ldr	r3, [pc, #56]	; (4a8 <_FlashWriteAppUserConfig+0x7c>)
     46e:	4798      	blx	r3
	Flash_ReadFlash(USER_CONFIG_SPACE_ORIGIN, (char*)&g_st_UserConfig, sizeof(tsUserConfig));
     470:	2206      	movs	r2, #6
     472:	0021      	movs	r1, r4
     474:	0028      	movs	r0, r5
     476:	4b0d      	ldr	r3, [pc, #52]	; (4ac <_FlashWriteAppUserConfig+0x80>)
     478:	4798      	blx	r3
	DEBUG_INFO("UserWrite");
     47a:	480d      	ldr	r0, [pc, #52]	; (4b0 <_FlashWriteAppUserConfig+0x84>)
     47c:	4b0d      	ldr	r3, [pc, #52]	; (4b4 <_FlashWriteAppUserConfig+0x88>)
     47e:	4798      	blx	r3
}
     480:	b003      	add	sp, #12
     482:	bd30      	pop	{r4, r5, pc}
     484:	00001e69 	.word	0x00001e69
     488:	20000986 	.word	0x20000986
     48c:	0000776b 	.word	0x0000776b
     490:	0000cccc 	.word	0x0000cccc
     494:	0000192d 	.word	0x0000192d
     498:	40001400 	.word	0x40001400
     49c:	41004000 	.word	0x41004000
     4a0:	20000984 	.word	0x20000984
     4a4:	00001945 	.word	0x00001945
     4a8:	0000777d 	.word	0x0000777d
     4ac:	00001915 	.word	0x00001915
     4b0:	00008388 	.word	0x00008388
     4b4:	00000891 	.word	0x00000891

000004b8 <_AddToFifo_EventSync>:
bool _AddToFifo_EventSync(int16_t s16Diff) {
     4b8:	b530      	push	{r4, r5, lr}
     4ba:	b083      	sub	sp, #12
     4bc:	0004      	movs	r4, r0
    Timestamp_GetTimestamp(&u32Timestamp);
     4be:	a801      	add	r0, sp, #4
     4c0:	4b0e      	ldr	r3, [pc, #56]	; (4fc <_AddToFifo_EventSync+0x44>)
     4c2:	4798      	blx	r3
	memcpy(&g_st_UserConfig.au8Timestamp[0], &u32Timestamp, 4);
     4c4:	2204      	movs	r2, #4
     4c6:	a901      	add	r1, sp, #4
     4c8:	480d      	ldr	r0, [pc, #52]	; (500 <_AddToFifo_EventSync+0x48>)
     4ca:	4b0e      	ldr	r3, [pc, #56]	; (504 <_AddToFifo_EventSync+0x4c>)
     4cc:	4798      	blx	r3
	_FlashWriteAppUserConfig();
     4ce:	4b0e      	ldr	r3, [pc, #56]	; (508 <_AddToFifo_EventSync+0x50>)
     4d0:	4798      	blx	r3
	if(s16Diff > 120) {
     4d2:	2c78      	cmp	r4, #120	; 0x78
     4d4:	dc02      	bgt.n	4dc <_AddToFifo_EventSync+0x24>
}
     4d6:	2001      	movs	r0, #1
     4d8:	b003      	add	sp, #12
     4da:	bd30      	pop	{r4, r5, pc}
	sprintf(g_acBuffer64, "Event:Sync:%d:%d", s16Diff, u32Timestamp);
     4dc:	4d0b      	ldr	r5, [pc, #44]	; (50c <_AddToFifo_EventSync+0x54>)
     4de:	9b01      	ldr	r3, [sp, #4]
     4e0:	0022      	movs	r2, r4
     4e2:	490b      	ldr	r1, [pc, #44]	; (510 <_AddToFifo_EventSync+0x58>)
     4e4:	0028      	movs	r0, r5
     4e6:	4c0b      	ldr	r4, [pc, #44]	; (514 <_AddToFifo_EventSync+0x5c>)
     4e8:	47a0      	blx	r4
	u8TotalLength = strlen(g_acBuffer64);
     4ea:	0028      	movs	r0, r5
     4ec:	4b0a      	ldr	r3, [pc, #40]	; (518 <_AddToFifo_EventSync+0x60>)
     4ee:	4798      	blx	r3
    CmdFifo_Push(&g_acBuffer64[0], u8TotalLength);
     4f0:	21ff      	movs	r1, #255	; 0xff
     4f2:	4001      	ands	r1, r0
     4f4:	0028      	movs	r0, r5
     4f6:	4b09      	ldr	r3, [pc, #36]	; (51c <_AddToFifo_EventSync+0x64>)
     4f8:	4798      	blx	r3
     4fa:	e7ec      	b.n	4d6 <_AddToFifo_EventSync+0x1e>
     4fc:	00001e69 	.word	0x00001e69
     500:	20000986 	.word	0x20000986
     504:	0000776b 	.word	0x0000776b
     508:	0000042d 	.word	0x0000042d
     50c:	2000098c 	.word	0x2000098c
     510:	00008394 	.word	0x00008394
     514:	00007901 	.word	0x00007901
     518:	00007945 	.word	0x00007945
     51c:	000007fd 	.word	0x000007fd

00000520 <App_ProcessBinaryPayload>:
void App_ProcessBinaryPayload(char *pSrc, int nSrcBytes) {
     520:	b530      	push	{r4, r5, lr}
     522:	b083      	sub	sp, #12
	uint32_t u32NewTime = atoi(pSrc);
     524:	4b0a      	ldr	r3, [pc, #40]	; (550 <App_ProcessBinaryPayload+0x30>)
     526:	4798      	blx	r3
     528:	0005      	movs	r5, r0
    Timestamp_GetTimestamp(&u32CheckTime);
     52a:	a801      	add	r0, sp, #4
     52c:	4b09      	ldr	r3, [pc, #36]	; (554 <App_ProcessBinaryPayload+0x34>)
     52e:	4798      	blx	r3
    s16Diff = (int16_t)(u32CheckTime - u32NewTime);
     530:	9b01      	ldr	r3, [sp, #4]
     532:	1b5c      	subs	r4, r3, r5
     534:	b224      	sxth	r4, r4
	if(abs(s16Diff)>1) {
     536:	17e3      	asrs	r3, r4, #31
     538:	18e4      	adds	r4, r4, r3
     53a:	405c      	eors	r4, r3
     53c:	2c01      	cmp	r4, #1
     53e:	dd05      	ble.n	54c <App_ProcessBinaryPayload+0x2c>
		Timestamp_SetTimestamp(u32NewTime);
     540:	0028      	movs	r0, r5
     542:	4b05      	ldr	r3, [pc, #20]	; (558 <App_ProcessBinaryPayload+0x38>)
     544:	4798      	blx	r3
		_AddToFifo_EventSync(abs(s16Diff));
     546:	b220      	sxth	r0, r4
     548:	4b04      	ldr	r3, [pc, #16]	; (55c <App_ProcessBinaryPayload+0x3c>)
     54a:	4798      	blx	r3
}
     54c:	b003      	add	sp, #12
     54e:	bd30      	pop	{r4, r5, pc}
     550:	000076f9 	.word	0x000076f9
     554:	00001e69 	.word	0x00001e69
     558:	00001e35 	.word	0x00001e35
     55c:	000004b9 	.word	0x000004b9

00000560 <_InitUserConfig>:

void _InitUserConfig(void) {
     560:	b510      	push	{r4, lr}
	memset(&g_st_UserConfig, 0, sizeof(tsUserConfig));
     562:	4c07      	ldr	r4, [pc, #28]	; (580 <_InitUserConfig+0x20>)
     564:	2206      	movs	r2, #6
     566:	2100      	movs	r1, #0
     568:	0020      	movs	r0, r4
     56a:	4b06      	ldr	r3, [pc, #24]	; (584 <_InitUserConfig+0x24>)
     56c:	4798      	blx	r3
	 g_st_UserConfig.u16InitCode = USER_CONFIG_INIT_CODE;
     56e:	4b06      	ldr	r3, [pc, #24]	; (588 <_InitUserConfig+0x28>)
     570:	8023      	strh	r3, [r4, #0]
	 
	_FlashWriteAppUserConfig();
     572:	4b06      	ldr	r3, [pc, #24]	; (58c <_InitUserConfig+0x2c>)
     574:	4798      	blx	r3
	DEBUG_INFO("UserInit");
     576:	4806      	ldr	r0, [pc, #24]	; (590 <_InitUserConfig+0x30>)
     578:	4b06      	ldr	r3, [pc, #24]	; (594 <_InitUserConfig+0x34>)
     57a:	4798      	blx	r3
}
     57c:	bd10      	pop	{r4, pc}
     57e:	46c0      	nop			; (mov r8, r8)
     580:	20000984 	.word	0x20000984
     584:	0000777d 	.word	0x0000777d
     588:	00005a5a 	.word	0x00005a5a
     58c:	0000042d 	.word	0x0000042d
     590:	000083a8 	.word	0x000083a8
     594:	00000891 	.word	0x00000891

00000598 <_FlashReadAppUserConfig>:
void _FlashReadAppUserConfig(void) {
     598:	b510      	push	{r4, lr}
    Flash_ReadFlash(USER_CONFIG_SPACE_ORIGIN, (char*)&g_st_UserConfig, sizeof(tsUserConfig));
     59a:	4c09      	ldr	r4, [pc, #36]	; (5c0 <_FlashReadAppUserConfig+0x28>)
     59c:	2206      	movs	r2, #6
     59e:	0021      	movs	r1, r4
     5a0:	4808      	ldr	r0, [pc, #32]	; (5c4 <_FlashReadAppUserConfig+0x2c>)
     5a2:	4b09      	ldr	r3, [pc, #36]	; (5c8 <_FlashReadAppUserConfig+0x30>)
     5a4:	4798      	blx	r3
    if (g_st_UserConfig.u16InitCode!=USER_CONFIG_INIT_CODE) {
     5a6:	8822      	ldrh	r2, [r4, #0]
     5a8:	4b08      	ldr	r3, [pc, #32]	; (5cc <_FlashReadAppUserConfig+0x34>)
     5aa:	429a      	cmp	r2, r3
     5ac:	d004      	beq.n	5b8 <_FlashReadAppUserConfig+0x20>
        DEBUG_INFO("Initializing the user configuration. ");
     5ae:	4808      	ldr	r0, [pc, #32]	; (5d0 <_FlashReadAppUserConfig+0x38>)
     5b0:	4b08      	ldr	r3, [pc, #32]	; (5d4 <_FlashReadAppUserConfig+0x3c>)
     5b2:	4798      	blx	r3
        _InitUserConfig();
     5b4:	4b08      	ldr	r3, [pc, #32]	; (5d8 <_FlashReadAppUserConfig+0x40>)
     5b6:	4798      	blx	r3
	DEBUG_INFO("UserRead");
     5b8:	4808      	ldr	r0, [pc, #32]	; (5dc <_FlashReadAppUserConfig+0x44>)
     5ba:	4b06      	ldr	r3, [pc, #24]	; (5d4 <_FlashReadAppUserConfig+0x3c>)
     5bc:	4798      	blx	r3
}
     5be:	bd10      	pop	{r4, pc}
     5c0:	20000984 	.word	0x20000984
     5c4:	0000cccc 	.word	0x0000cccc
     5c8:	00001915 	.word	0x00001915
     5cc:	00005a5a 	.word	0x00005a5a
     5d0:	000083b4 	.word	0x000083b4
     5d4:	00000891 	.word	0x00000891
     5d8:	00000561 	.word	0x00000561
     5dc:	000083dc 	.word	0x000083dc

000005e0 <DcaApp_Init>:
void DcaApp_Init(void) {
     5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     5e2:	b083      	sub	sp, #12
    uint8_t u8ResetCause = PM->RCAUSE.reg;
     5e4:	2338      	movs	r3, #56	; 0x38
     5e6:	4a48      	ldr	r2, [pc, #288]	; (708 <DcaApp_Init+0x128>)
     5e8:	5cd6      	ldrb	r6, [r2, r3]
     5ea:	b2f6      	uxtb	r6, r6
    SYSCTRL->BOD33.bit.ENABLE = 0; // Disable
     5ec:	4b47      	ldr	r3, [pc, #284]	; (70c <DcaApp_Init+0x12c>)
     5ee:	6b58      	ldr	r0, [r3, #52]	; 0x34
     5f0:	2202      	movs	r2, #2
     5f2:	0001      	movs	r1, r0
     5f4:	4391      	bics	r1, r2
     5f6:	6359      	str	r1, [r3, #52]	; 0x34
    SYSCTRL->BOD33.bit.LEVEL = 39; // 2.84V (from datasheet)
     5f8:	6b58      	ldr	r0, [r3, #52]	; 0x34
     5fa:	4945      	ldr	r1, [pc, #276]	; (710 <DcaApp_Init+0x130>)
     5fc:	4008      	ands	r0, r1
     5fe:	219c      	movs	r1, #156	; 0x9c
     600:	0389      	lsls	r1, r1, #14
     602:	4301      	orrs	r1, r0
     604:	6359      	str	r1, [r3, #52]	; 0x34
    SYSCTRL->BOD33.bit.ENABLE = 1; // Re-enable
     606:	6b59      	ldr	r1, [r3, #52]	; 0x34
     608:	430a      	orrs	r2, r1
     60a:	635a      	str	r2, [r3, #52]	; 0x34
    Debug_InitLog();
     60c:	4b41      	ldr	r3, [pc, #260]	; (714 <DcaApp_Init+0x134>)
     60e:	4798      	blx	r3
    DEBUG_INFO("Debug log initialized. ");
     610:	4841      	ldr	r0, [pc, #260]	; (718 <DcaApp_Init+0x138>)
     612:	4c42      	ldr	r4, [pc, #264]	; (71c <DcaApp_Init+0x13c>)
     614:	47a0      	blx	r4
    Watchdog_Init();
     616:	4b42      	ldr	r3, [pc, #264]	; (720 <DcaApp_Init+0x140>)
     618:	4798      	blx	r3
    DEBUG_INFO("Watchdog initialized. ");
     61a:	4842      	ldr	r0, [pc, #264]	; (724 <DcaApp_Init+0x144>)
     61c:	47a0      	blx	r4
    Timer_Init();
     61e:	4b42      	ldr	r3, [pc, #264]	; (728 <DcaApp_Init+0x148>)
     620:	4798      	blx	r3
    DEBUG_INFO("Timers initialized. ");
     622:	4842      	ldr	r0, [pc, #264]	; (72c <DcaApp_Init+0x14c>)
     624:	47a0      	blx	r4
    Timer_AddTimer(&TIMER_APP_LED_HOLD);
     626:	4d42      	ldr	r5, [pc, #264]	; (730 <DcaApp_Init+0x150>)
     628:	0028      	movs	r0, r5
     62a:	4f42      	ldr	r7, [pc, #264]	; (734 <DcaApp_Init+0x154>)
     62c:	47b8      	blx	r7
	Timer_AddTimer(&TIMER_APP_HEARTBEAT);
     62e:	1da8      	adds	r0, r5, #6
     630:	47b8      	blx	r7
    Timer_AddTimer(&TIMER_APP_UPDATE_CLOCK);
     632:	0028      	movs	r0, r5
     634:	300c      	adds	r0, #12
     636:	47b8      	blx	r7
	Timer_AddTimer(&TIMER_APP_ENWI_LINK_CHECK);
     638:	0028      	movs	r0, r5
     63a:	3008      	adds	r0, #8
     63c:	47b8      	blx	r7
	timer_set_clock_cycles_per_tick(&SAMPLE_TIMER, (uint32_t)1000);
     63e:	4d3e      	ldr	r5, [pc, #248]	; (738 <DcaApp_Init+0x158>)
     640:	21fa      	movs	r1, #250	; 0xfa
     642:	0089      	lsls	r1, r1, #2
     644:	0028      	movs	r0, r5
     646:	4b3d      	ldr	r3, [pc, #244]	; (73c <DcaApp_Init+0x15c>)
     648:	4798      	blx	r3
	timer_start(&SAMPLE_TIMER);
     64a:	0028      	movs	r0, r5
     64c:	4b3c      	ldr	r3, [pc, #240]	; (740 <DcaApp_Init+0x160>)
     64e:	4798      	blx	r3
	Timestamp_Init();
     650:	4b3c      	ldr	r3, [pc, #240]	; (744 <DcaApp_Init+0x164>)
     652:	4798      	blx	r3
	DEBUG_INFO("RTC initialized. ");
     654:	483c      	ldr	r0, [pc, #240]	; (748 <DcaApp_Init+0x168>)
     656:	47a0      	blx	r4
	CmdFifo_Init();
     658:	4b3c      	ldr	r3, [pc, #240]	; (74c <DcaApp_Init+0x16c>)
     65a:	4798      	blx	r3
	DEBUG_INFO("CmdFIFO initialized. ");
     65c:	483c      	ldr	r0, [pc, #240]	; (750 <DcaApp_Init+0x170>)
     65e:	47a0      	blx	r4
	ReadingQueue_Init();
     660:	4b3c      	ldr	r3, [pc, #240]	; (754 <DcaApp_Init+0x174>)
     662:	4798      	blx	r3
	DEBUG_INFO("DataFIFO initialized. ");
     664:	483c      	ldr	r0, [pc, #240]	; (758 <DcaApp_Init+0x178>)
     666:	47a0      	blx	r4
    Flash_Init();
     668:	4b3c      	ldr	r3, [pc, #240]	; (75c <DcaApp_Init+0x17c>)
     66a:	4798      	blx	r3
    DEBUG_INFO("Flash initialized. ");
     66c:	483c      	ldr	r0, [pc, #240]	; (760 <DcaApp_Init+0x180>)
     66e:	47a0      	blx	r4
	_FlashReadAppUserConfig();
     670:	4b3c      	ldr	r3, [pc, #240]	; (764 <DcaApp_Init+0x184>)
     672:	4798      	blx	r3
	DEBUG_INFO("User configuration retrieved. ");
     674:	483c      	ldr	r0, [pc, #240]	; (768 <DcaApp_Init+0x188>)
     676:	47a0      	blx	r4
    memcpy(&timestamp, &g_st_UserConfig.au8Timestamp[0], 4);
     678:	2204      	movs	r2, #4
     67a:	493c      	ldr	r1, [pc, #240]	; (76c <DcaApp_Init+0x18c>)
     67c:	a801      	add	r0, sp, #4
     67e:	4b3c      	ldr	r3, [pc, #240]	; (770 <DcaApp_Init+0x190>)
     680:	4798      	blx	r3
    if (timestamp>0) {
     682:	9801      	ldr	r0, [sp, #4]
     684:	2800      	cmp	r0, #0
     686:	d001      	beq.n	68c <DcaApp_Init+0xac>
        Timestamp_SetTimestamp(timestamp);
     688:	4b3a      	ldr	r3, [pc, #232]	; (774 <DcaApp_Init+0x194>)
     68a:	4798      	blx	r3
    DEBUG_INFO("Timestamp initialized. ");
     68c:	483a      	ldr	r0, [pc, #232]	; (778 <DcaApp_Init+0x198>)
     68e:	4b23      	ldr	r3, [pc, #140]	; (71c <DcaApp_Init+0x13c>)
     690:	4798      	blx	r3
    s8Status = Ethernet_Init();
     692:	4b3a      	ldr	r3, [pc, #232]	; (77c <DcaApp_Init+0x19c>)
     694:	4798      	blx	r3
    if (s8Status!=0) {
     696:	2800      	cmp	r0, #0
     698:	d003      	beq.n	6a2 <DcaApp_Init+0xc2>
        _LedColorControl(LED_COLOR_RED);
     69a:	2002      	movs	r0, #2
     69c:	4b38      	ldr	r3, [pc, #224]	; (780 <DcaApp_Init+0x1a0>)
     69e:	4798      	blx	r3
     6a0:	e7fe      	b.n	6a0 <DcaApp_Init+0xc0>
    DEBUG_INFO("Ethernet initialized. ");
     6a2:	4838      	ldr	r0, [pc, #224]	; (784 <DcaApp_Init+0x1a4>)
     6a4:	4b1d      	ldr	r3, [pc, #116]	; (71c <DcaApp_Init+0x13c>)
     6a6:	4798      	blx	r3
    s8Status = Wifi_Init();
     6a8:	4b37      	ldr	r3, [pc, #220]	; (788 <DcaApp_Init+0x1a8>)
     6aa:	4798      	blx	r3
    if (s8Status!=0) {
     6ac:	2800      	cmp	r0, #0
     6ae:	d003      	beq.n	6b8 <DcaApp_Init+0xd8>
        _LedColorControl(LED_COLOR_RED);
     6b0:	2002      	movs	r0, #2
     6b2:	4b33      	ldr	r3, [pc, #204]	; (780 <DcaApp_Init+0x1a0>)
     6b4:	4798      	blx	r3
     6b6:	e7fe      	b.n	6b6 <DcaApp_Init+0xd6>
    DEBUG_INFO("WiFi initialized. ");
     6b8:	4834      	ldr	r0, [pc, #208]	; (78c <DcaApp_Init+0x1ac>)
     6ba:	4c18      	ldr	r4, [pc, #96]	; (71c <DcaApp_Init+0x13c>)
     6bc:	47a0      	blx	r4
    Ethernet_PowerDown();
     6be:	4b34      	ldr	r3, [pc, #208]	; (790 <DcaApp_Init+0x1b0>)
     6c0:	4798      	blx	r3
	Sensor_Init();
     6c2:	4b34      	ldr	r3, [pc, #208]	; (794 <DcaApp_Init+0x1b4>)
     6c4:	4798      	blx	r3
	DEBUG_INFO("Sensors Init. ");
     6c6:	4834      	ldr	r0, [pc, #208]	; (798 <DcaApp_Init+0x1b8>)
     6c8:	47a0      	blx	r4
    DEBUG_INFO("Application init complete. ");
     6ca:	4834      	ldr	r0, [pc, #208]	; (79c <DcaApp_Init+0x1bc>)
     6cc:	47a0      	blx	r4
    _AddToFifo_EventStartup();
     6ce:	4b34      	ldr	r3, [pc, #208]	; (7a0 <DcaApp_Init+0x1c0>)
     6d0:	4798      	blx	r3
    if ((u8ResetCause & PM_RCAUSE_WDT) == PM_RCAUSE_WDT) {
     6d2:	06b3      	lsls	r3, r6, #26
     6d4:	d50c      	bpl.n	6f0 <DcaApp_Init+0x110>
		_AddToFifo_EventResetCause(1);
     6d6:	2001      	movs	r0, #1
     6d8:	4b32      	ldr	r3, [pc, #200]	; (7a4 <DcaApp_Init+0x1c4>)
     6da:	4798      	blx	r3
	s_u16HeartbeatRate = TIMEOUT_STARTUP_HEARTBEAT_HOLD;
     6dc:	4b14      	ldr	r3, [pc, #80]	; (730 <DcaApp_Init+0x150>)
     6de:	223c      	movs	r2, #60	; 0x3c
     6e0:	815a      	strh	r2, [r3, #10]
	s_u8ReadingBufferUsed = 0;
     6e2:	2200      	movs	r2, #0
     6e4:	739a      	strb	r2, [r3, #14]
    Timer_Register_Callback(_One_Second_Timer_Callback);
     6e6:	4830      	ldr	r0, [pc, #192]	; (7a8 <DcaApp_Init+0x1c8>)
     6e8:	4b30      	ldr	r3, [pc, #192]	; (7ac <DcaApp_Init+0x1cc>)
     6ea:	4798      	blx	r3
}
     6ec:	b003      	add	sp, #12
     6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if ((u8ResetCause & PM_RCAUSE_BOD33) == PM_RCAUSE_BOD33) {
     6f0:	0773      	lsls	r3, r6, #29
     6f2:	d503      	bpl.n	6fc <DcaApp_Init+0x11c>
        _AddToFifo_EventResetCause(2);
     6f4:	2002      	movs	r0, #2
     6f6:	4b2b      	ldr	r3, [pc, #172]	; (7a4 <DcaApp_Init+0x1c4>)
     6f8:	4798      	blx	r3
     6fa:	e7ef      	b.n	6dc <DcaApp_Init+0xfc>
    } else if ((u8ResetCause & PM_RCAUSE_BOD12) == PM_RCAUSE_BOD12) {
     6fc:	07b3      	lsls	r3, r6, #30
     6fe:	d5ed      	bpl.n	6dc <DcaApp_Init+0xfc>
        _AddToFifo_EventResetCause(3);
     700:	2003      	movs	r0, #3
     702:	4b28      	ldr	r3, [pc, #160]	; (7a4 <DcaApp_Init+0x1c4>)
     704:	4798      	blx	r3
     706:	e7e9      	b.n	6dc <DcaApp_Init+0xfc>
     708:	40000400 	.word	0x40000400
     70c:	40000800 	.word	0x40000800
     710:	ffc0ffff 	.word	0xffc0ffff
     714:	0000086d 	.word	0x0000086d
     718:	000083e8 	.word	0x000083e8
     71c:	00000891 	.word	0x00000891
     720:	00001e8d 	.word	0x00001e8d
     724:	00008400 	.word	0x00008400
     728:	00001ccd 	.word	0x00001ccd
     72c:	00008418 	.word	0x00008418
     730:	200001f0 	.word	0x200001f0
     734:	00001d11 	.word	0x00001d11
     738:	20003f70 	.word	0x20003f70
     73c:	00002ca1 	.word	0x00002ca1
     740:	00002c65 	.word	0x00002c65
     744:	00001db9 	.word	0x00001db9
     748:	00008430 	.word	0x00008430
     74c:	000007c9 	.word	0x000007c9
     750:	00008444 	.word	0x00008444
     754:	000019f1 	.word	0x000019f1
     758:	0000845c 	.word	0x0000845c
     75c:	00001911 	.word	0x00001911
     760:	00008474 	.word	0x00008474
     764:	00000599 	.word	0x00000599
     768:	00008488 	.word	0x00008488
     76c:	20000986 	.word	0x20000986
     770:	0000776b 	.word	0x0000776b
     774:	00001e35 	.word	0x00001e35
     778:	000084a8 	.word	0x000084a8
     77c:	00000b49 	.word	0x00000b49
     780:	00000105 	.word	0x00000105
     784:	000084c0 	.word	0x000084c0
     788:	00001f15 	.word	0x00001f15
     78c:	000084d8 	.word	0x000084d8
     790:	00000955 	.word	0x00000955
     794:	00001ba1 	.word	0x00001ba1
     798:	000084ec 	.word	0x000084ec
     79c:	000084fc 	.word	0x000084fc
     7a0:	000001cd 	.word	0x000001cd
     7a4:	0000038d 	.word	0x0000038d
     7a8:	00000199 	.word	0x00000199
     7ac:	00001d49 	.word	0x00001d49

000007b0 <_get_tick_count>:

uint32_t _get_tick_count(void) {
	uint32_t count = TC2->COUNT32.COUNT.reg;
     7b0:	4b01      	ldr	r3, [pc, #4]	; (7b8 <_get_tick_count+0x8>)
     7b2:	6918      	ldr	r0, [r3, #16]
	return count;
     7b4:	4770      	bx	lr
     7b6:	46c0      	nop			; (mov r8, r8)
     7b8:	42002800 	.word	0x42002800

000007bc <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     7bc:	b510      	push	{r4, lr}
	system_init();
     7be:	4b01      	ldr	r3, [pc, #4]	; (7c4 <atmel_start_init+0x8>)
     7c0:	4798      	blx	r3
	//tcpip_lite_stack_init();
}
     7c2:	bd10      	pop	{r4, pc}
     7c4:	000023f1 	.word	0x000023f1

000007c8 <CmdFifo_Init>:
/** VARIABLES *****************************************************************/
static uint16_t   s_u16FifoWriteIndex;
static uint16_t   s_u16FifoReadIndex;
static uint16_t   s_u16FifoByteCount;

void CmdFifo_Init(void) {
     7c8:	b510      	push	{r4, lr}
	// Clear the contents of the command FIFO
	memset(&g_acCmdFifo[0], 0, COMMAND_FIFO_NUM_BYTES);
     7ca:	2280      	movs	r2, #128	; 0x80
     7cc:	0152      	lsls	r2, r2, #5
     7ce:	2100      	movs	r1, #0
     7d0:	4804      	ldr	r0, [pc, #16]	; (7e4 <CmdFifo_Init+0x1c>)
     7d2:	4b05      	ldr	r3, [pc, #20]	; (7e8 <CmdFifo_Init+0x20>)
     7d4:	4798      	blx	r3
	// Reset the buffer read/write indexes and byte count
	s_u16FifoWriteIndex = 0;
     7d6:	4b05      	ldr	r3, [pc, #20]	; (7ec <CmdFifo_Init+0x24>)
     7d8:	2200      	movs	r2, #0
     7da:	801a      	strh	r2, [r3, #0]
	s_u16FifoReadIndex = 0;
     7dc:	805a      	strh	r2, [r3, #2]
	s_u16FifoByteCount = 0;
     7de:	809a      	strh	r2, [r3, #4]
}
     7e0:	bd10      	pop	{r4, pc}
     7e2:	46c0      	nop			; (mov r8, r8)
     7e4:	20000b54 	.word	0x20000b54
     7e8:	0000777d 	.word	0x0000777d
     7ec:	20000200 	.word	0x20000200

000007f0 <CmdFifo_GetByteCount>:

uint16_t CmdFifo_GetByteCount(void) {
	return s_u16FifoByteCount;
     7f0:	4b01      	ldr	r3, [pc, #4]	; (7f8 <CmdFifo_GetByteCount+0x8>)
     7f2:	8898      	ldrh	r0, [r3, #4]
}
     7f4:	4770      	bx	lr
     7f6:	46c0      	nop			; (mov r8, r8)
     7f8:	20000200 	.word	0x20000200

000007fc <CmdFifo_Push>:
uint16_t CmdFifo_GetByteRemaining(void) {
    int remainig = COMMAND_FIFO_NUM_BYTES - s_u16FifoByteCount;
    return remainig;
}

bool CmdFifo_Push(char *pCmd, uint16_t length) {
     7fc:	b570      	push	{r4, r5, r6, lr}
     7fe:	0003      	movs	r3, r0
     800:	000c      	movs	r4, r1
    uint16_t bytesToWrite, trimmed;

    // Write the bytes to the command FIFO
    bytesToWrite = length;
    char *pDst = &g_acCmdFifo[0] + s_u16FifoByteCount;
     802:	4d07      	ldr	r5, [pc, #28]	; (820 <CmdFifo_Push+0x24>)
     804:	88ae      	ldrh	r6, [r5, #4]
     806:	4807      	ldr	r0, [pc, #28]	; (824 <CmdFifo_Push+0x28>)
     808:	1830      	adds	r0, r6, r0
    memcpy(pDst, pCmd, bytesToWrite);
     80a:	000a      	movs	r2, r1
     80c:	0019      	movs	r1, r3
     80e:	4b06      	ldr	r3, [pc, #24]	; (828 <CmdFifo_Push+0x2c>)
     810:	4798      	blx	r3
    s_u16FifoByteCount += bytesToWrite;
     812:	19a6      	adds	r6, r4, r6
     814:	80ae      	strh	r6, [r5, #4]
    s_u16FifoWriteIndex += bytesToWrite;
     816:	882b      	ldrh	r3, [r5, #0]
     818:	18e4      	adds	r4, r4, r3
     81a:	802c      	strh	r4, [r5, #0]
    bytesToWrite = 0;

    return true;
}
     81c:	2001      	movs	r0, #1
     81e:	bd70      	pop	{r4, r5, r6, pc}
     820:	20000200 	.word	0x20000200
     824:	20000b54 	.word	0x20000b54
     828:	0000776b 	.word	0x0000776b

0000082c <CmdFifo_Send>:

uint16_t CmdFifo_Send(char *pDst, uint16_t maxBytes) {
     82c:	b570      	push	{r4, r5, r6, lr}
     82e:	0006      	movs	r6, r0
    uint16_t bytesToSend;
    uint16_t bytesSent = 0;

    bytesToSend = (uint16_t)s_u16FifoByteCount;
     830:	4b0b      	ldr	r3, [pc, #44]	; (860 <CmdFifo_Send+0x34>)
     832:	889c      	ldrh	r4, [r3, #4]
    uint16_t bytesSent = 0;
     834:	2500      	movs	r5, #0

    while (bytesToSend>0) {
     836:	e00f      	b.n	858 <CmdFifo_Send+0x2c>
        // Compute source pointer within the command FIFO
        char *pSrc = &g_acCmdFifo[0];

        memcpy(pDst, pSrc, bytesToSend);
     838:	0022      	movs	r2, r4
     83a:	490a      	ldr	r1, [pc, #40]	; (864 <CmdFifo_Send+0x38>)
     83c:	0030      	movs	r0, r6
     83e:	4b0a      	ldr	r3, [pc, #40]	; (868 <CmdFifo_Send+0x3c>)
     840:	4798      	blx	r3
        // Increment bytes sent and decrement bytes in FIFO
        bytesSent += bytesToSend;
     842:	1965      	adds	r5, r4, r5
     844:	b2ad      	uxth	r5, r5
        s_u16FifoByteCount -= bytesToSend;
     846:	4b06      	ldr	r3, [pc, #24]	; (860 <CmdFifo_Send+0x34>)
     848:	889a      	ldrh	r2, [r3, #4]
     84a:	1b12      	subs	r2, r2, r4
     84c:	809a      	strh	r2, [r3, #4]
        // Adjust read index for next time
        s_u16FifoReadIndex += bytesToSend;
     84e:	885a      	ldrh	r2, [r3, #2]
     850:	18a2      	adds	r2, r4, r2
     852:	805a      	strh	r2, [r3, #2]
        // Increment destination pointer by number of bytes sent
        pDst += bytesToSend;
     854:	1936      	adds	r6, r6, r4
        bytesToSend = 0;
     856:	2400      	movs	r4, #0
    while (bytesToSend>0) {
     858:	2c00      	cmp	r4, #0
     85a:	d1ed      	bne.n	838 <CmdFifo_Send+0xc>
    };

    return bytesSent;
     85c:	0028      	movs	r0, r5
     85e:	bd70      	pop	{r4, r5, r6, pc}
     860:	20000200 	.word	0x20000200
     864:	20000b54 	.word	0x20000b54
     868:	0000776b 	.word	0x0000776b

0000086c <Debug_InitLog>:
 *  @param[in]  None
 *  @param[out] None
 *  @return     Nothing
 ******************************************************************************/
void Debug_InitLog()
{
     86c:	b510      	push	{r4, lr}
    // Clear the contents of the log
    memset(&s_acLogBuffer[0], 0, sizeof(s_acLogBuffer));
     86e:	2280      	movs	r2, #128	; 0x80
     870:	00d2      	lsls	r2, r2, #3
     872:	2100      	movs	r1, #0
     874:	4803      	ldr	r0, [pc, #12]	; (884 <Debug_InitLog+0x18>)
     876:	4b04      	ldr	r3, [pc, #16]	; (888 <Debug_InitLog+0x1c>)
     878:	4798      	blx	r3
    // Reset the buffer index
    s_u16LogBufferIndex = 0;
     87a:	2200      	movs	r2, #0
     87c:	4b03      	ldr	r3, [pc, #12]	; (88c <Debug_InitLog+0x20>)
     87e:	801a      	strh	r2, [r3, #0]
}
     880:	bd10      	pop	{r4, pc}
     882:	46c0      	nop			; (mov r8, r8)
     884:	20000208 	.word	0x20000208
     888:	0000777d 	.word	0x0000777d
     88c:	20000608 	.word	0x20000608

00000890 <Debug_StoreLog>:
 *  Initialize the debug log (buffer in RAM)
 *  @param[in]  const char* format  sprintf formatter
 *  @param[in]  sprintf argument array
 *  @return     Nothing
 ******************************************************************************/
void Debug_StoreLog(const char *format, ...) {
     890:	b40f      	push	{r0, r1, r2, r3}
     892:	b5f0      	push	{r4, r5, r6, r7, lr}
     894:	46ce      	mov	lr, r9
     896:	4647      	mov	r7, r8
     898:	b580      	push	{r7, lr}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	2328      	movs	r3, #40	; 0x28
     8a0:	18fd      	adds	r5, r7, r3
     8a2:	cd10      	ldmia	r5!, {r4}
    uint16_t bytesToWrite, offset, length;
    va_list args;
    char buffer[strlen(format)];
     8a4:	0020      	movs	r0, r4
     8a6:	4e25      	ldr	r6, [pc, #148]	; (93c <Debug_StoreLog+0xac>)
     8a8:	47b0      	blx	r6
     8aa:	3007      	adds	r0, #7
     8ac:	08c0      	lsrs	r0, r0, #3
     8ae:	00c0      	lsls	r0, r0, #3
     8b0:	466b      	mov	r3, sp
     8b2:	1a1b      	subs	r3, r3, r0
     8b4:	469d      	mov	sp, r3
     8b6:	46e8      	mov	r8, sp

    va_start(args, format);
     8b8:	607d      	str	r5, [r7, #4]
    vsprintf(buffer, format, args);
     8ba:	002a      	movs	r2, r5
     8bc:	0021      	movs	r1, r4
     8be:	4668      	mov	r0, sp
     8c0:	4b1f      	ldr	r3, [pc, #124]	; (940 <Debug_StoreLog+0xb0>)
     8c2:	4798      	blx	r3
#if DEBUG_STDIO_REDIRECT
    printf(buffer);
    printf("\r\n");
#endif

    bytesToWrite = strlen(buffer);
     8c4:	4668      	mov	r0, sp
     8c6:	47b0      	blx	r6
     8c8:	b284      	uxth	r4, r0
    offset = 0;
     8ca:	2300      	movs	r3, #0
     8cc:	4699      	mov	r9, r3

    // Write the bytes to the debug log
    while (bytesToWrite>0) {
     8ce:	e010      	b.n	8f2 <Debug_StoreLog+0x62>
            s_u16LogBufferIndex += bytesToWrite;
            bytesToWrite = 0;

        // Not enough room... fill in remainder of buffer and roll over. Next time through while loop will complete
        } else {
            length = DEBUG_LOG_NUM_BYTES - s_u16LogBufferIndex;
     8d0:	2380      	movs	r3, #128	; 0x80
     8d2:	00db      	lsls	r3, r3, #3
     8d4:	1b9b      	subs	r3, r3, r6
     8d6:	b29d      	uxth	r5, r3
            memcpy(pDst, &buffer[offset], length);
     8d8:	4641      	mov	r1, r8
     8da:	4449      	add	r1, r9
     8dc:	002a      	movs	r2, r5
     8de:	4b19      	ldr	r3, [pc, #100]	; (944 <Debug_StoreLog+0xb4>)
     8e0:	4798      	blx	r3
            s_u16LogBufferIndex = 0;
     8e2:	2200      	movs	r2, #0
     8e4:	4b18      	ldr	r3, [pc, #96]	; (948 <Debug_StoreLog+0xb8>)
     8e6:	801a      	strh	r2, [r3, #0]
            bytesToWrite -= length;
     8e8:	1b64      	subs	r4, r4, r5
     8ea:	b2a4      	uxth	r4, r4
            offset += length;
     8ec:	444d      	add	r5, r9
     8ee:	b2ab      	uxth	r3, r5
     8f0:	4699      	mov	r9, r3
    while (bytesToWrite>0) {
     8f2:	2c00      	cmp	r4, #0
     8f4:	d011      	beq.n	91a <Debug_StoreLog+0x8a>
        char *pDst = &s_acLogBuffer[0] + s_u16LogBufferIndex;
     8f6:	4b14      	ldr	r3, [pc, #80]	; (948 <Debug_StoreLog+0xb8>)
     8f8:	881e      	ldrh	r6, [r3, #0]
     8fa:	4814      	ldr	r0, [pc, #80]	; (94c <Debug_StoreLog+0xbc>)
     8fc:	1980      	adds	r0, r0, r6
        if (DEBUG_LOG_NUM_BYTES > (s_u16LogBufferIndex + bytesToWrite)) {
     8fe:	1932      	adds	r2, r6, r4
     900:	4b13      	ldr	r3, [pc, #76]	; (950 <Debug_StoreLog+0xc0>)
     902:	429a      	cmp	r2, r3
     904:	dce4      	bgt.n	8d0 <Debug_StoreLog+0x40>
            memcpy(pDst, &buffer[offset], bytesToWrite);
     906:	4641      	mov	r1, r8
     908:	4449      	add	r1, r9
     90a:	0022      	movs	r2, r4
     90c:	4b0d      	ldr	r3, [pc, #52]	; (944 <Debug_StoreLog+0xb4>)
     90e:	4798      	blx	r3
            s_u16LogBufferIndex += bytesToWrite;
     910:	19a4      	adds	r4, r4, r6
     912:	4a0d      	ldr	r2, [pc, #52]	; (948 <Debug_StoreLog+0xb8>)
     914:	8014      	strh	r4, [r2, #0]
            bytesToWrite = 0;
     916:	2400      	movs	r4, #0
     918:	e7eb      	b.n	8f2 <Debug_StoreLog+0x62>
        }
    }

    // This should never happen (because of logic above)... just a sanity check
    if (s_u16LogBufferIndex >= DEBUG_LOG_NUM_BYTES) {
     91a:	4b0b      	ldr	r3, [pc, #44]	; (948 <Debug_StoreLog+0xb8>)
     91c:	881a      	ldrh	r2, [r3, #0]
     91e:	4b0c      	ldr	r3, [pc, #48]	; (950 <Debug_StoreLog+0xc0>)
     920:	429a      	cmp	r2, r3
     922:	d902      	bls.n	92a <Debug_StoreLog+0x9a>
        s_u16LogBufferIndex = 0;
     924:	2200      	movs	r2, #0
     926:	4b08      	ldr	r3, [pc, #32]	; (948 <Debug_StoreLog+0xb8>)
     928:	801a      	strh	r2, [r3, #0]
    }
}
     92a:	46bd      	mov	sp, r7
     92c:	b003      	add	sp, #12
     92e:	bc0c      	pop	{r2, r3}
     930:	4690      	mov	r8, r2
     932:	4699      	mov	r9, r3
     934:	bcf0      	pop	{r4, r5, r6, r7}
     936:	bc08      	pop	{r3}
     938:	b004      	add	sp, #16
     93a:	4718      	bx	r3
     93c:	00007945 	.word	0x00007945
     940:	00007b11 	.word	0x00007b11
     944:	0000776b 	.word	0x0000776b
     948:	20000608 	.word	0x20000608
     94c:	20000208 	.word	0x20000208
     950:	000003ff 	.word	0x000003ff

00000954 <Ethernet_PowerDown>:
    tcpip_lite_stack_init();
	
	return 0;
}

void Ethernet_PowerDown(void) {
     954:	b5f0      	push	{r4, r5, r6, r7, lr}
     956:	b083      	sub	sp, #12
	struct io_descriptor *s_ioSPI;
	uint8_t tx_buffer[2];

	// Get the IO descriptor for the SPI peripheral
	if (spi_m_sync_get_io_descriptor(&ETHERNET_SPI, &s_ioSPI)!=0 ) {
     958:	a901      	add	r1, sp, #4
     95a:	4818      	ldr	r0, [pc, #96]	; (9bc <Ethernet_PowerDown+0x68>)
     95c:	4b18      	ldr	r3, [pc, #96]	; (9c0 <Ethernet_PowerDown+0x6c>)
     95e:	4798      	blx	r3
     960:	2800      	cmp	r0, #0
     962:	d001      	beq.n	968 <Ethernet_PowerDown+0x14>
	// Disable the SPI slave (deactivates CSn)
	gpio_set_pin_level(ETHERNET_CS, 1);

	// Disable the SPI peripheral
	spi_m_sync_disable(&ETHERNET_SPI);
}
     964:	b003      	add	sp, #12
     966:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tx_buffer[0] = 0xA0|0x1F;   // Bit field clear | ECON1 register address
     968:	23bf      	movs	r3, #191	; 0xbf
     96a:	466a      	mov	r2, sp
     96c:	7013      	strb	r3, [r2, #0]
	tx_buffer[1] = 0x03;        // Bank 3
     96e:	2703      	movs	r7, #3
     970:	7057      	strb	r7, [r2, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     972:	24c0      	movs	r4, #192	; 0xc0
     974:	05e4      	lsls	r4, r4, #23
     976:	2580      	movs	r5, #128	; 0x80
     978:	042d      	lsls	r5, r5, #16
     97a:	6165      	str	r5, [r4, #20]
	io_write(s_ioSPI, tx_buffer, 2);
     97c:	2202      	movs	r2, #2
     97e:	4669      	mov	r1, sp
     980:	9801      	ldr	r0, [sp, #4]
     982:	4e10      	ldr	r6, [pc, #64]	; (9c4 <Ethernet_PowerDown+0x70>)
     984:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     986:	61a5      	str	r5, [r4, #24]
	tx_buffer[0] = 0x80|0x1F;   // Bit field set | ECON1 register address
     988:	239f      	movs	r3, #159	; 0x9f
     98a:	466a      	mov	r2, sp
     98c:	7013      	strb	r3, [r2, #0]
	tx_buffer[1] = 0x03;        // Bank 3
     98e:	7057      	strb	r7, [r2, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     990:	6165      	str	r5, [r4, #20]
	io_write(s_ioSPI, tx_buffer, 2);
     992:	2202      	movs	r2, #2
     994:	4669      	mov	r1, sp
     996:	9801      	ldr	r0, [sp, #4]
     998:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     99a:	61a5      	str	r5, [r4, #24]
	tx_buffer[0] = 0x80|0x1E;   // Bit field set | ECON2 register address
     99c:	239e      	movs	r3, #158	; 0x9e
     99e:	466a      	mov	r2, sp
     9a0:	7013      	strb	r3, [r2, #0]
	tx_buffer[1] = 0x20;        // PWRSV bit set
     9a2:	3b7e      	subs	r3, #126	; 0x7e
     9a4:	7053      	strb	r3, [r2, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9a6:	6165      	str	r5, [r4, #20]
	io_write(s_ioSPI, tx_buffer, 2);
     9a8:	2202      	movs	r2, #2
     9aa:	4669      	mov	r1, sp
     9ac:	9801      	ldr	r0, [sp, #4]
     9ae:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9b0:	61a5      	str	r5, [r4, #24]
	spi_m_sync_disable(&ETHERNET_SPI);
     9b2:	4802      	ldr	r0, [pc, #8]	; (9bc <Ethernet_PowerDown+0x68>)
     9b4:	4b04      	ldr	r3, [pc, #16]	; (9c8 <Ethernet_PowerDown+0x74>)
     9b6:	4798      	blx	r3
     9b8:	e7d4      	b.n	964 <Ethernet_PowerDown+0x10>
     9ba:	46c0      	nop			; (mov r8, r8)
     9bc:	20003f58 	.word	0x20003f58
     9c0:	00002b35 	.word	0x00002b35
     9c4:	0000295d 	.word	0x0000295d
     9c8:	00002a4d 	.word	0x00002a4d

000009cc <Ethernet_PowerUp>:

void Ethernet_PowerUp(void) {
     9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ce:	b083      	sub	sp, #12
	struct io_descriptor *s_ioSPI;
    uint8_t tx_buffer[2];

    // Enable the SPI peripheral
    spi_m_sync_enable(&ETHERNET_SPI);
     9d0:	4c18      	ldr	r4, [pc, #96]	; (a34 <Ethernet_PowerUp+0x68>)
     9d2:	0020      	movs	r0, r4
     9d4:	4b18      	ldr	r3, [pc, #96]	; (a38 <Ethernet_PowerUp+0x6c>)
     9d6:	4798      	blx	r3

    // Get the IO descriptor for the SPI peripheral
    if (spi_m_sync_get_io_descriptor(&ETHERNET_SPI, &s_ioSPI)!=0 ) {
     9d8:	a901      	add	r1, sp, #4
     9da:	0020      	movs	r0, r4
     9dc:	4b17      	ldr	r3, [pc, #92]	; (a3c <Ethernet_PowerUp+0x70>)
     9de:	4798      	blx	r3
     9e0:	2800      	cmp	r0, #0
     9e2:	d001      	beq.n	9e8 <Ethernet_PowerUp+0x1c>
    gpio_set_pin_level(ETHERNET_CS, 0);
    // Write payload
    io_write(s_ioSPI, tx_buffer, 2);
    // Disable the SPI slave (deactivates CSn)
    gpio_set_pin_level(ETHERNET_CS, 1);
}
     9e4:	b003      	add	sp, #12
     9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tx_buffer[0] = 0xA0|0x1F;   // Bit field clear | ECON1 register address
     9e8:	23bf      	movs	r3, #191	; 0xbf
     9ea:	466a      	mov	r2, sp
     9ec:	7013      	strb	r3, [r2, #0]
    tx_buffer[1] = 0x03;        // Bank 3
     9ee:	2703      	movs	r7, #3
     9f0:	7057      	strb	r7, [r2, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9f2:	24c0      	movs	r4, #192	; 0xc0
     9f4:	05e4      	lsls	r4, r4, #23
     9f6:	2580      	movs	r5, #128	; 0x80
     9f8:	042d      	lsls	r5, r5, #16
     9fa:	6165      	str	r5, [r4, #20]
    io_write(s_ioSPI, tx_buffer, 2);
     9fc:	2202      	movs	r2, #2
     9fe:	4669      	mov	r1, sp
     a00:	9801      	ldr	r0, [sp, #4]
     a02:	4e0f      	ldr	r6, [pc, #60]	; (a40 <Ethernet_PowerUp+0x74>)
     a04:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a06:	61a5      	str	r5, [r4, #24]
    tx_buffer[0] = 0x80|0x1F;   // Bit field set | ECON1 register address
     a08:	239f      	movs	r3, #159	; 0x9f
     a0a:	466a      	mov	r2, sp
     a0c:	7013      	strb	r3, [r2, #0]
    tx_buffer[1] = 0x03;        // Bank 3
     a0e:	7057      	strb	r7, [r2, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a10:	6165      	str	r5, [r4, #20]
    io_write(s_ioSPI, tx_buffer, 2);
     a12:	2202      	movs	r2, #2
     a14:	4669      	mov	r1, sp
     a16:	9801      	ldr	r0, [sp, #4]
     a18:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a1a:	61a5      	str	r5, [r4, #24]
    tx_buffer[0] = 0xA0|0x1E;   // Bit field clear | ECON2 register address
     a1c:	23be      	movs	r3, #190	; 0xbe
     a1e:	466a      	mov	r2, sp
     a20:	7013      	strb	r3, [r2, #0]
    tx_buffer[1] = 0x20;        // PWRSV bit set
     a22:	3b9e      	subs	r3, #158	; 0x9e
     a24:	7053      	strb	r3, [r2, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a26:	6165      	str	r5, [r4, #20]
    io_write(s_ioSPI, tx_buffer, 2);
     a28:	2202      	movs	r2, #2
     a2a:	4669      	mov	r1, sp
     a2c:	9801      	ldr	r0, [sp, #4]
     a2e:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a30:	61a5      	str	r5, [r4, #24]
     a32:	e7d7      	b.n	9e4 <Ethernet_PowerUp+0x18>
     a34:	20003f58 	.word	0x20003f58
     a38:	00002a25 	.word	0x00002a25
     a3c:	00002b35 	.word	0x00002b35
     a40:	0000295d 	.word	0x0000295d

00000a44 <_DetectEthernet>:

bool _DetectEthernet() {
     a44:	b510      	push	{r4, lr}
     a46:	b084      	sub	sp, #16
    int8_t result = 0;
    uint8_t tx_buffer[2];
    uint8_t rx_buffer[1];

    // Get the IO descriptor for the SPI peripheral
    if (spi_m_sync_get_io_descriptor(&ETHERNET_SPI, &s_ioSPI)!=0 ) {
     a48:	a903      	add	r1, sp, #12
     a4a:	4831      	ldr	r0, [pc, #196]	; (b10 <_DetectEthernet+0xcc>)
     a4c:	4b31      	ldr	r3, [pc, #196]	; (b14 <_DetectEthernet+0xd0>)
     a4e:	4798      	blx	r3
     a50:	2800      	cmp	r0, #0
     a52:	d002      	beq.n	a5a <_DetectEthernet+0x16>
        return false;
     a54:	2000      	movs	r0, #0
    if (result==-1) return false;
    // 0x00 or 0xFF in the REV ID register indicates that the device is not present
    else if (rx_buffer[0]==0x00 || rx_buffer[0]==0xFF) return false;
    // If we make it here, the device is present
    else return true;
}
     a56:	b004      	add	sp, #16
     a58:	bd10      	pop	{r4, pc}
    spi_m_sync_enable(&ETHERNET_SPI);
     a5a:	482d      	ldr	r0, [pc, #180]	; (b10 <_DetectEthernet+0xcc>)
     a5c:	4b2e      	ldr	r3, [pc, #184]	; (b18 <_DetectEthernet+0xd4>)
     a5e:	4798      	blx	r3
    tx_buffer[0] = 0xA0|0x1F;   // Bit field clear | ECON1 register address
     a60:	a902      	add	r1, sp, #8
     a62:	23bf      	movs	r3, #191	; 0xbf
     a64:	700b      	strb	r3, [r1, #0]
    tx_buffer[1] = 0x03;        // Bank 3
     a66:	3bbc      	subs	r3, #188	; 0xbc
     a68:	704b      	strb	r3, [r1, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a6a:	2280      	movs	r2, #128	; 0x80
     a6c:	0412      	lsls	r2, r2, #16
     a6e:	23c0      	movs	r3, #192	; 0xc0
     a70:	05db      	lsls	r3, r3, #23
     a72:	615a      	str	r2, [r3, #20]
    if (io_write(s_ioSPI, tx_buffer, 2) != 2) result = -1;
     a74:	2202      	movs	r2, #2
     a76:	9803      	ldr	r0, [sp, #12]
     a78:	4b28      	ldr	r3, [pc, #160]	; (b1c <_DetectEthernet+0xd8>)
     a7a:	4798      	blx	r3
     a7c:	2802      	cmp	r0, #2
     a7e:	d040      	beq.n	b02 <_DetectEthernet+0xbe>
     a80:	2401      	movs	r4, #1
     a82:	4264      	negs	r4, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a84:	23c0      	movs	r3, #192	; 0xc0
     a86:	05db      	lsls	r3, r3, #23
     a88:	2280      	movs	r2, #128	; 0x80
     a8a:	0412      	lsls	r2, r2, #16
     a8c:	619a      	str	r2, [r3, #24]
    tx_buffer[0] = 0x80|0x1F;   // Bit field set | ECON1 register address
     a8e:	a902      	add	r1, sp, #8
     a90:	209f      	movs	r0, #159	; 0x9f
     a92:	7008      	strb	r0, [r1, #0]
    tx_buffer[1] = 0x03;        // Bank 3
     a94:	389c      	subs	r0, #156	; 0x9c
     a96:	7048      	strb	r0, [r1, #1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a98:	615a      	str	r2, [r3, #20]
    if (io_write(s_ioSPI, tx_buffer, 2) != 2) result = -1;
     a9a:	2202      	movs	r2, #2
     a9c:	9803      	ldr	r0, [sp, #12]
     a9e:	4b1f      	ldr	r3, [pc, #124]	; (b1c <_DetectEthernet+0xd8>)
     aa0:	4798      	blx	r3
     aa2:	2802      	cmp	r0, #2
     aa4:	d001      	beq.n	aaa <_DetectEthernet+0x66>
     aa6:	2401      	movs	r4, #1
     aa8:	4264      	negs	r4, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     aaa:	23c0      	movs	r3, #192	; 0xc0
     aac:	05db      	lsls	r3, r3, #23
     aae:	2280      	movs	r2, #128	; 0x80
     ab0:	0412      	lsls	r2, r2, #16
     ab2:	619a      	str	r2, [r3, #24]
    tx_buffer[0] = 0x00|0x12;   // Read control register | EREVID register address
     ab4:	a902      	add	r1, sp, #8
     ab6:	2012      	movs	r0, #18
     ab8:	7008      	strb	r0, [r1, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     aba:	615a      	str	r2, [r3, #20]
    if (io_write(s_ioSPI, tx_buffer, 1) != 1) result = -1;
     abc:	2201      	movs	r2, #1
     abe:	9803      	ldr	r0, [sp, #12]
     ac0:	4b16      	ldr	r3, [pc, #88]	; (b1c <_DetectEthernet+0xd8>)
     ac2:	4798      	blx	r3
     ac4:	2801      	cmp	r0, #1
     ac6:	d001      	beq.n	acc <_DetectEthernet+0x88>
     ac8:	2401      	movs	r4, #1
     aca:	4264      	negs	r4, r4
    if (io_read(s_ioSPI, rx_buffer, 1) != 1)  result = -1;
     acc:	2201      	movs	r2, #1
     ace:	a901      	add	r1, sp, #4
     ad0:	9803      	ldr	r0, [sp, #12]
     ad2:	4b13      	ldr	r3, [pc, #76]	; (b20 <_DetectEthernet+0xdc>)
     ad4:	4798      	blx	r3
     ad6:	2801      	cmp	r0, #1
     ad8:	d001      	beq.n	ade <_DetectEthernet+0x9a>
     ada:	2401      	movs	r4, #1
     adc:	4264      	negs	r4, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ade:	2280      	movs	r2, #128	; 0x80
     ae0:	0412      	lsls	r2, r2, #16
     ae2:	23c0      	movs	r3, #192	; 0xc0
     ae4:	05db      	lsls	r3, r3, #23
     ae6:	619a      	str	r2, [r3, #24]
    spi_m_sync_disable(&ETHERNET_SPI);
     ae8:	4809      	ldr	r0, [pc, #36]	; (b10 <_DetectEthernet+0xcc>)
     aea:	4b0e      	ldr	r3, [pc, #56]	; (b24 <_DetectEthernet+0xe0>)
     aec:	4798      	blx	r3
    if (result==-1) return false;
     aee:	1c63      	adds	r3, r4, #1
     af0:	d00b      	beq.n	b0a <_DetectEthernet+0xc6>
    else if (rx_buffer[0]==0x00 || rx_buffer[0]==0xFF) return false;
     af2:	ab01      	add	r3, sp, #4
     af4:	781b      	ldrb	r3, [r3, #0]
     af6:	3b01      	subs	r3, #1
     af8:	b2db      	uxtb	r3, r3
     afa:	2bfd      	cmp	r3, #253	; 0xfd
     afc:	d803      	bhi.n	b06 <_DetectEthernet+0xc2>
    else return true;
     afe:	2001      	movs	r0, #1
     b00:	e7a9      	b.n	a56 <_DetectEthernet+0x12>
    int8_t result = 0;
     b02:	2400      	movs	r4, #0
     b04:	e7be      	b.n	a84 <_DetectEthernet+0x40>
    else if (rx_buffer[0]==0x00 || rx_buffer[0]==0xFF) return false;
     b06:	2000      	movs	r0, #0
     b08:	e7a5      	b.n	a56 <_DetectEthernet+0x12>
    if (result==-1) return false;
     b0a:	2000      	movs	r0, #0
     b0c:	e7a3      	b.n	a56 <_DetectEthernet+0x12>
     b0e:	46c0      	nop			; (mov r8, r8)
     b10:	20003f58 	.word	0x20003f58
     b14:	00002b35 	.word	0x00002b35
     b18:	00002a25 	.word	0x00002a25
     b1c:	0000295d 	.word	0x0000295d
     b20:	00002995 	.word	0x00002995
     b24:	00002a4d 	.word	0x00002a4d

00000b28 <Ethernet_Detect>:
bool Ethernet_Detect(void) {
     b28:	b510      	push	{r4, lr}
     b2a:	2280      	movs	r2, #128	; 0x80
     b2c:	0512      	lsls	r2, r2, #20
     b2e:	23c0      	movs	r3, #192	; 0xc0
     b30:	05db      	lsls	r3, r3, #23
     b32:	619a      	str	r2, [r3, #24]
    delay_ms(1);
     b34:	2001      	movs	r0, #1
     b36:	4b02      	ldr	r3, [pc, #8]	; (b40 <Ethernet_Detect+0x18>)
     b38:	4798      	blx	r3
    return _DetectEthernet();
     b3a:	4b02      	ldr	r3, [pc, #8]	; (b44 <Ethernet_Detect+0x1c>)
     b3c:	4798      	blx	r3
}
     b3e:	bd10      	pop	{r4, pc}
     b40:	0000258d 	.word	0x0000258d
     b44:	00000a45 	.word	0x00000a45

00000b48 <Ethernet_Init>:
int8_t Ethernet_Init(void) {
     b48:	b530      	push	{r4, r5, lr}
     b4a:	b087      	sub	sp, #28
    bool fHasEthernet = Ethernet_Detect();
     b4c:	4b2f      	ldr	r3, [pc, #188]	; (c0c <Ethernet_Init+0xc4>)
     b4e:	4798      	blx	r3
    if (fHasEthernet==false) return -1;
     b50:	2800      	cmp	r0, #0
     b52:	d058      	beq.n	c06 <Ethernet_Init+0xbe>
    if (s_fEthernetFirstTime==true) {
     b54:	4b2e      	ldr	r3, [pc, #184]	; (c10 <Ethernet_Init+0xc8>)
     b56:	781b      	ldrb	r3, [r3, #0]
     b58:	2b00      	cmp	r3, #0
     b5a:	d039      	beq.n	bd0 <Ethernet_Init+0x88>
        s_fEthernetFirstTime = false;
     b5c:	2200      	movs	r2, #0
     b5e:	4b2c      	ldr	r3, [pc, #176]	; (c10 <Ethernet_Init+0xc8>)
     b60:	701a      	strb	r2, [r3, #0]
        Timer_AddTimer(&TIMER_ETH_CONNECION_TIMEOUT);
     b62:	4c2c      	ldr	r4, [pc, #176]	; (c14 <Ethernet_Init+0xcc>)
     b64:	0020      	movs	r0, r4
     b66:	4d2c      	ldr	r5, [pc, #176]	; (c18 <Ethernet_Init+0xd0>)
     b68:	47a8      	blx	r5
        Timer_AddTimer(&TIMER_ETH_DNS_TIMEOUT);
     b6a:	1ca0      	adds	r0, r4, #2
     b6c:	47a8      	blx	r5
        Timer_AddTimer(&TIMER_ETH_SERVER_LOST_COMM);
     b6e:	1d20      	adds	r0, r4, #4
     b70:	47a8      	blx	r5
        Timer_AddTimer(&TIMER_ETH_SERVER_ESTABLISH_COMM);
     b72:	1da0      	adds	r0, r4, #6
     b74:	47a8      	blx	r5
        Timer_AddTimer(&TIMER_ETH_DNS_REMOTE_RESOLUTION_TIMEOUT);
     b76:	0020      	movs	r0, r4
     b78:	3008      	adds	r0, #8
     b7a:	47a8      	blx	r5
        Timer_AddTimer(&TIMER_ETH_SOCKET_REMOTE_INIT_TIMEOUT);
     b7c:	0020      	movs	r0, r4
     b7e:	300a      	adds	r0, #10
     b80:	47a8      	blx	r5
        Timer_AddTimer(&TIMER_ETH_SOCKET_REMOTE_RESPONSE_TIMEOUT);
     b82:	0020      	movs	r0, r4
     b84:	300c      	adds	r0, #12
     b86:	47a8      	blx	r5
        Timer_AddTimer(&TIMER_ETH_SOCKET_REMOTE_CLEANUP_TIMEOUT);
     b88:	0020      	movs	r0, r4
     b8a:	300e      	adds	r0, #14
     b8c:	47a8      	blx	r5
    memset((uint8_t *)&s_stEthernetInfo, 0, sizeof(sEthernetInfo));
     b8e:	2218      	movs	r2, #24
     b90:	2100      	movs	r1, #0
     b92:	4820      	ldr	r0, [pc, #128]	; (c14 <Ethernet_Init+0xcc>)
     b94:	3010      	adds	r0, #16
     b96:	4b21      	ldr	r3, [pc, #132]	; (c1c <Ethernet_Init+0xd4>)
     b98:	4798      	blx	r3
    sprintf(acHostname, "DCA-00001");
     b9a:	466b      	mov	r3, sp
     b9c:	4a20      	ldr	r2, [pc, #128]	; (c20 <Ethernet_Init+0xd8>)
     b9e:	ca03      	ldmia	r2!, {r0, r1}
     ba0:	c303      	stmia	r3!, {r0, r1}
     ba2:	0019      	movs	r1, r3
     ba4:	8813      	ldrh	r3, [r2, #0]
     ba6:	800b      	strh	r3, [r1, #0]
    g_au8MacAddress[0] = OUI_BYTE_1; // 0x60
     ba8:	481e      	ldr	r0, [pc, #120]	; (c24 <Ethernet_Init+0xdc>)
     baa:	2360      	movs	r3, #96	; 0x60
     bac:	7003      	strb	r3, [r0, #0]
    g_au8MacAddress[1] = OUI_BYTE_2; // 0x54
     bae:	3b0c      	subs	r3, #12
     bb0:	7043      	strb	r3, [r0, #1]
    g_au8MacAddress[2] = OUI_BYTE_3; // 0x64
     bb2:	3310      	adds	r3, #16
     bb4:	7083      	strb	r3, [r0, #2]
    g_au8MacAddress[3] = 0x00;
     bb6:	2300      	movs	r3, #0
     bb8:	70c3      	strb	r3, [r0, #3]
    g_au8MacAddress[4] =  0x10;
     bba:	3310      	adds	r3, #16
     bbc:	7103      	strb	r3, [r0, #4]
    g_au8MacAddress[5] = 0x01;
     bbe:	3b0f      	subs	r3, #15
     bc0:	7143      	strb	r3, [r0, #5]
    ETH_InitMAC((uint8_t*)&g_au8MacAddress[0]);
     bc2:	4b19      	ldr	r3, [pc, #100]	; (c28 <Ethernet_Init+0xe0>)
     bc4:	4798      	blx	r3
    tcpip_lite_stack_init();
     bc6:	4b19      	ldr	r3, [pc, #100]	; (c2c <Ethernet_Init+0xe4>)
     bc8:	4798      	blx	r3
	return 0;
     bca:	2000      	movs	r0, #0
}
     bcc:	b007      	add	sp, #28
     bce:	bd30      	pop	{r4, r5, pc}
        Timer_SetTimer(TIMER_ETH_CONNECION_TIMEOUT, 0);
     bd0:	4d10      	ldr	r5, [pc, #64]	; (c14 <Ethernet_Init+0xcc>)
     bd2:	8828      	ldrh	r0, [r5, #0]
     bd4:	2100      	movs	r1, #0
     bd6:	4c16      	ldr	r4, [pc, #88]	; (c30 <Ethernet_Init+0xe8>)
     bd8:	47a0      	blx	r4
        Timer_SetTimer(TIMER_ETH_DNS_TIMEOUT, 0);
     bda:	8868      	ldrh	r0, [r5, #2]
     bdc:	2100      	movs	r1, #0
     bde:	47a0      	blx	r4
        Timer_SetTimer(TIMER_ETH_SERVER_LOST_COMM, 0);
     be0:	88a8      	ldrh	r0, [r5, #4]
     be2:	2100      	movs	r1, #0
     be4:	47a0      	blx	r4
        Timer_SetTimer(TIMER_ETH_SERVER_ESTABLISH_COMM, 0);
     be6:	88e8      	ldrh	r0, [r5, #6]
     be8:	2100      	movs	r1, #0
     bea:	47a0      	blx	r4
        Timer_SetTimer(TIMER_ETH_DNS_REMOTE_RESOLUTION_TIMEOUT, 0);
     bec:	8928      	ldrh	r0, [r5, #8]
     bee:	2100      	movs	r1, #0
     bf0:	47a0      	blx	r4
        Timer_SetTimer(TIMER_ETH_SOCKET_REMOTE_INIT_TIMEOUT, 0);
     bf2:	8968      	ldrh	r0, [r5, #10]
     bf4:	2100      	movs	r1, #0
     bf6:	47a0      	blx	r4
        Timer_SetTimer(TIMER_ETH_SOCKET_REMOTE_RESPONSE_TIMEOUT, 0);
     bf8:	89a8      	ldrh	r0, [r5, #12]
     bfa:	2100      	movs	r1, #0
     bfc:	47a0      	blx	r4
        Timer_SetTimer(TIMER_ETH_SOCKET_REMOTE_CLEANUP_TIMEOUT, 0);
     bfe:	89e8      	ldrh	r0, [r5, #14]
     c00:	2100      	movs	r1, #0
     c02:	47a0      	blx	r4
     c04:	e7c3      	b.n	b8e <Ethernet_Init+0x46>
    if (fHasEthernet==false) return -1;
     c06:	2001      	movs	r0, #1
     c08:	4240      	negs	r0, r0
     c0a:	e7df      	b.n	bcc <Ethernet_Init+0x84>
     c0c:	00000b29 	.word	0x00000b29
     c10:	20000001 	.word	0x20000001
     c14:	2000060c 	.word	0x2000060c
     c18:	00001d11 	.word	0x00001d11
     c1c:	0000777d 	.word	0x0000777d
     c20:	00008548 	.word	0x00008548
     c24:	200009cc 	.word	0x200009cc
     c28:	0000484d 	.word	0x0000484d
     c2c:	000065dd 	.word	0x000065dd
     c30:	00001d31 	.word	0x00001d31

00000c34 <Ethernet_HasLink>:

bool Ethernet_HasLink(void) {
     c34:	b510      	push	{r4, lr}
	return ETH_CheckLinkUp();
     c36:	4b01      	ldr	r3, [pc, #4]	; (c3c <Ethernet_HasLink+0x8>)
     c38:	4798      	blx	r3
}
     c3a:	bd10      	pop	{r4, pc}
     c3c:	00003f61 	.word	0x00003f61

00000c40 <_DnsWriteHostname>:
        default:
            break;
    }
}

void _DnsWriteHostname(void) {
     c40:	b5f0      	push	{r4, r5, r6, r7, lr}
     c42:	46c6      	mov	lr, r8
     c44:	b500      	push	{lr}
	char* pcLookAhead;
	char cByte;
	uint8_t u8Len;

	// Initialize pointers
	pcHostname = s_pcLookupHostname;
     c46:	4b1a      	ldr	r3, [pc, #104]	; (cb0 <_DnsWriteHostname+0x70>)
     c48:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	pcLookAhead = s_pcLookupHostname;
     c4a:	0037      	movs	r7, r6
     c4c:	e026      	b.n	c9c <_DnsWriteHostname+0x5c>
	// Loop through the host name string formatting correctly for DNS query
	while (1) {
		u8Len = 0;
		do {
			cByte = *pcLookAhead++;
			u8Len++;
     c4e:	001c      	movs	r4, r3
			cByte = *pcLookAhead++;
     c50:	1c57      	adds	r7, r2, #1
     c52:	7815      	ldrb	r5, [r2, #0]
			u8Len++;
     c54:	1c63      	adds	r3, r4, #1
     c56:	b2db      	uxtb	r3, r3
		} while((cByte!='\0') && (cByte!='.') && (cByte!='/') && (cByte!=',') && (cByte!='>'));
     c58:	2d00      	cmp	r5, #0
     c5a:	d008      	beq.n	c6e <_DnsWriteHostname+0x2e>
     c5c:	2d2e      	cmp	r5, #46	; 0x2e
     c5e:	d006      	beq.n	c6e <_DnsWriteHostname+0x2e>
     c60:	2d2f      	cmp	r5, #47	; 0x2f
     c62:	d004      	beq.n	c6e <_DnsWriteHostname+0x2e>
     c64:	2d2c      	cmp	r5, #44	; 0x2c
     c66:	d002      	beq.n	c6e <_DnsWriteHostname+0x2e>
			cByte = *pcLookAhead++;
     c68:	003a      	movs	r2, r7
		} while((cByte!='\0') && (cByte!='.') && (cByte!='/') && (cByte!=',') && (cByte!='>'));
     c6a:	2d3e      	cmp	r5, #62	; 0x3e
     c6c:	d1ef      	bne.n	c4e <_DnsWriteHostname+0xe>
		// Decrement the length, to exclude the '.', and write it to the UDP
		u8Len--;
		UDP_Write8(u8Len);
     c6e:	0020      	movs	r0, r4
     c70:	4b10      	ldr	r3, [pc, #64]	; (cb4 <_DnsWriteHostname+0x74>)
     c72:	4798      	blx	r3
     c74:	e000      	b.n	c78 <_DnsWriteHostname+0x38>
		// Put the data up to (but excluding) the '.' in the host name string
		do {
			UDP_Write8(*pcHostname++);
     c76:	4646      	mov	r6, r8
     c78:	1c73      	adds	r3, r6, #1
     c7a:	4698      	mov	r8, r3
     c7c:	7830      	ldrb	r0, [r6, #0]
     c7e:	4b0d      	ldr	r3, [pc, #52]	; (cb4 <_DnsWriteHostname+0x74>)
     c80:	4798      	blx	r3
			u8Len--;
     c82:	3c01      	subs	r4, #1
     c84:	b2e4      	uxtb	r4, r4
		} while(u8Len>0);
     c86:	2c00      	cmp	r4, #0
     c88:	d1f5      	bne.n	c76 <_DnsWriteHostname+0x36>
		pcHostname++;
     c8a:	3602      	adds	r6, #2
		// Break out of the while loop if the last byte read indicates the end of the host name
		if ((cByte=='\0') || (cByte=='/') || (cByte==',') || (cByte=='>'))
     c8c:	2d00      	cmp	r5, #0
     c8e:	d008      	beq.n	ca2 <_DnsWriteHostname+0x62>
     c90:	2d2f      	cmp	r5, #47	; 0x2f
     c92:	d006      	beq.n	ca2 <_DnsWriteHostname+0x62>
     c94:	2d2c      	cmp	r5, #44	; 0x2c
     c96:	d004      	beq.n	ca2 <_DnsWriteHostname+0x62>
     c98:	2d3e      	cmp	r5, #62	; 0x3e
     c9a:	d002      	beq.n	ca2 <_DnsWriteHostname+0x62>
	pcLookAhead = s_pcLookupHostname;
     c9c:	003a      	movs	r2, r7
		u8Len = 0;
     c9e:	2400      	movs	r4, #0
     ca0:	e7d6      	b.n	c50 <_DnsWriteHostname+0x10>
		break;
	}
	UDP_Write8(0x00); // Write the null terminator for the host name string
     ca2:	2000      	movs	r0, #0
     ca4:	4b03      	ldr	r3, [pc, #12]	; (cb4 <_DnsWriteHostname+0x74>)
     ca6:	4798      	blx	r3
}
     ca8:	bc04      	pop	{r2}
     caa:	4690      	mov	r8, r2
     cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cae:	46c0      	nop			; (mov r8, r8)
     cb0:	2000060c 	.word	0x2000060c
     cb4:	000042d9 	.word	0x000042d9

00000cb8 <_ManageEthernetDnsState>:
void _ManageEthernetDnsState(void) {
     cb8:	b570      	push	{r4, r5, r6, lr}
    if (s_stEthernetInfo.fConnected==false) return;
     cba:	4b50      	ldr	r3, [pc, #320]	; (dfc <_ManageEthernetDnsState+0x144>)
     cbc:	7c1b      	ldrb	r3, [r3, #16]
     cbe:	2b00      	cmp	r3, #0
     cc0:	d04c      	beq.n	d5c <_ManageEthernetDnsState+0xa4>
    switch(s_eEthernetDnsState) {
     cc2:	4a4e      	ldr	r2, [pc, #312]	; (dfc <_ManageEthernetDnsState+0x144>)
     cc4:	232c      	movs	r3, #44	; 0x2c
     cc6:	5cd1      	ldrb	r1, [r2, r3]
     cc8:	2906      	cmp	r1, #6
     cca:	d847      	bhi.n	d5c <_ManageEthernetDnsState+0xa4>
     ccc:	008b      	lsls	r3, r1, #2
     cce:	4a4c      	ldr	r2, [pc, #304]	; (e00 <_ManageEthernetDnsState+0x148>)
     cd0:	58d3      	ldr	r3, [r2, r3]
     cd2:	469f      	mov	pc, r3
			DEBUG_INFO("DNS STATE (START)");
     cd4:	484b      	ldr	r0, [pc, #300]	; (e04 <_ManageEthernetDnsState+0x14c>)
     cd6:	4b4c      	ldr	r3, [pc, #304]	; (e08 <_ManageEthernetDnsState+0x150>)
     cd8:	4798      	blx	r3
            su8Attempts = 0;
     cda:	4b48      	ldr	r3, [pc, #288]	; (dfc <_ManageEthernetDnsState+0x144>)
     cdc:	2200      	movs	r2, #0
     cde:	212d      	movs	r1, #45	; 0x2d
     ce0:	545a      	strb	r2, [r3, r1]
            su32DnsServer = ipv4DNS[0];
     ce2:	494a      	ldr	r1, [pc, #296]	; (e0c <_ManageEthernetDnsState+0x154>)
     ce4:	6809      	ldr	r1, [r1, #0]
     ce6:	6319      	str	r1, [r3, #48]	; 0x30
            *s_pu32LookupHostIp = 0;
     ce8:	6b59      	ldr	r1, [r3, #52]	; 0x34
     cea:	600a      	str	r2, [r1, #0]
            s_eEthernetDnsState = DNS_STATE_OPEN_SOCKET;
     cec:	2102      	movs	r1, #2
     cee:	322c      	adds	r2, #44	; 0x2c
     cf0:	5499      	strb	r1, [r3, r2]
            Timer_SetTimer(TIMER_ETH_DNS_TIMEOUT, TIMEOUT_DNS_RESOLUTION);
     cf2:	8858      	ldrh	r0, [r3, #2]
     cf4:	3101      	adds	r1, #1
     cf6:	4b46      	ldr	r3, [pc, #280]	; (e10 <_ManageEthernetDnsState+0x158>)
     cf8:	4798      	blx	r3
			DEBUG_INFO("DNS STATE (OPEN)");
     cfa:	4846      	ldr	r0, [pc, #280]	; (e14 <_ManageEthernetDnsState+0x15c>)
     cfc:	4b42      	ldr	r3, [pc, #264]	; (e08 <_ManageEthernetDnsState+0x150>)
     cfe:	4798      	blx	r3
            if (Timer_GetTimer(TIMER_ETH_DNS_TIMEOUT)==0) {
     d00:	4b3e      	ldr	r3, [pc, #248]	; (dfc <_ManageEthernetDnsState+0x144>)
     d02:	8858      	ldrh	r0, [r3, #2]
     d04:	4b44      	ldr	r3, [pc, #272]	; (e18 <_ManageEthernetDnsState+0x160>)
     d06:	4798      	blx	r3
     d08:	2800      	cmp	r0, #0
     d0a:	d128      	bne.n	d5e <_ManageEthernetDnsState+0xa6>
                s_eEthernetDnsState = DNS_STATE_FAIL;
     d0c:	2105      	movs	r1, #5
     d0e:	232c      	movs	r3, #44	; 0x2c
     d10:	4a3a      	ldr	r2, [pc, #232]	; (dfc <_ManageEthernetDnsState+0x144>)
     d12:	54d1      	strb	r1, [r2, r3]
			DEBUG_INFO("DNS STATE (QUERY)");
     d14:	4841      	ldr	r0, [pc, #260]	; (e1c <_ManageEthernetDnsState+0x164>)
     d16:	4b3c      	ldr	r3, [pc, #240]	; (e08 <_ManageEthernetDnsState+0x150>)
     d18:	4798      	blx	r3
            s_u16TransactionID++;
     d1a:	4d38      	ldr	r5, [pc, #224]	; (dfc <_ManageEthernetDnsState+0x144>)
     d1c:	8f28      	ldrh	r0, [r5, #56]	; 0x38
     d1e:	3001      	adds	r0, #1
     d20:	b280      	uxth	r0, r0
     d22:	8728      	strh	r0, [r5, #56]	; 0x38
            UDP_Write16(s_u16TransactionID);
     d24:	4c3e      	ldr	r4, [pc, #248]	; (e20 <_ManageEthernetDnsState+0x168>)
     d26:	47a0      	blx	r4
            UDP_Write16(0x0100); // Standard query with recursion
     d28:	2080      	movs	r0, #128	; 0x80
     d2a:	0040      	lsls	r0, r0, #1
     d2c:	47a0      	blx	r4
            UDP_Write16(0x0001); // 0x0001 questions
     d2e:	2001      	movs	r0, #1
     d30:	47a0      	blx	r4
            UDP_Write16(0x0000); // 0x0000 answers
     d32:	2000      	movs	r0, #0
     d34:	47a0      	blx	r4
            UDP_Write16(0x0000); // 0x0000 name server resource records
     d36:	2000      	movs	r0, #0
     d38:	47a0      	blx	r4
            UDP_Write16(0x0000); // 0x0000 additional records
     d3a:	2000      	movs	r0, #0
     d3c:	47a0      	blx	r4
            _DnsWriteHostname();
     d3e:	4b39      	ldr	r3, [pc, #228]	; (e24 <_ManageEthernetDnsState+0x16c>)
     d40:	4798      	blx	r3
            UDP_Write16(0x0001); // Type A (host address)
     d42:	2001      	movs	r0, #1
     d44:	47a0      	blx	r4
            UDP_Write16(0x0001); // Class: IN (Internet)
     d46:	2001      	movs	r0, #1
     d48:	47a0      	blx	r4
            UDP_Send();
     d4a:	4b37      	ldr	r3, [pc, #220]	; (e28 <_ManageEthernetDnsState+0x170>)
     d4c:	4798      	blx	r3
            Timer_SetTimer(TIMER_ETH_DNS_TIMEOUT, TIMEOUT_DNS_RESOLUTION);
     d4e:	8868      	ldrh	r0, [r5, #2]
     d50:	2103      	movs	r1, #3
     d52:	4b2f      	ldr	r3, [pc, #188]	; (e10 <_ManageEthernetDnsState+0x158>)
     d54:	4798      	blx	r3
            s_eEthernetDnsState = DNS_STATE_GET_RESULT;
     d56:	2204      	movs	r2, #4
     d58:	232c      	movs	r3, #44	; 0x2c
     d5a:	54ea      	strb	r2, [r5, r3]
}
     d5c:	bd70      	pop	{r4, r5, r6, pc}
                if (UDP_Start(su32DnsServer, DNS_APP_PORT, DNS_PORT) != SUCCESS) {
     d5e:	4b27      	ldr	r3, [pc, #156]	; (dfc <_ManageEthernetDnsState+0x144>)
     d60:	6b18      	ldr	r0, [r3, #48]	; 0x30
     d62:	2235      	movs	r2, #53	; 0x35
     d64:	2180      	movs	r1, #128	; 0x80
     d66:	0149      	lsls	r1, r1, #5
     d68:	4b30      	ldr	r3, [pc, #192]	; (e2c <_ManageEthernetDnsState+0x174>)
     d6a:	4798      	blx	r3
     d6c:	2801      	cmp	r0, #1
     d6e:	d1f5      	bne.n	d5c <_ManageEthernetDnsState+0xa4>
                    s_eEthernetDnsState = DNS_STATE_QUERY;
     d70:	2103      	movs	r1, #3
     d72:	232c      	movs	r3, #44	; 0x2c
     d74:	4a21      	ldr	r2, [pc, #132]	; (dfc <_ManageEthernetDnsState+0x144>)
     d76:	54d1      	strb	r1, [r2, r3]
     d78:	e7cc      	b.n	d14 <_ManageEthernetDnsState+0x5c>
            if (*s_pu32LookupHostIp==0) {
     d7a:	4b20      	ldr	r3, [pc, #128]	; (dfc <_ManageEthernetDnsState+0x144>)
     d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     d7e:	681b      	ldr	r3, [r3, #0]
     d80:	2b00      	cmp	r3, #0
     d82:	d10d      	bne.n	da0 <_ManageEthernetDnsState+0xe8>
                if (Timer_GetTimer(TIMER_ETH_DNS_TIMEOUT)==0) {
     d84:	4b1d      	ldr	r3, [pc, #116]	; (dfc <_ManageEthernetDnsState+0x144>)
     d86:	8858      	ldrh	r0, [r3, #2]
     d88:	4b23      	ldr	r3, [pc, #140]	; (e18 <_ManageEthernetDnsState+0x160>)
     d8a:	4798      	blx	r3
     d8c:	2800      	cmp	r0, #0
     d8e:	d1e5      	bne.n	d5c <_ManageEthernetDnsState+0xa4>
					DEBUG_INFO("DNS STATE (GET-FAIL)");
     d90:	4827      	ldr	r0, [pc, #156]	; (e30 <_ManageEthernetDnsState+0x178>)
     d92:	4b1d      	ldr	r3, [pc, #116]	; (e08 <_ManageEthernetDnsState+0x150>)
     d94:	4798      	blx	r3
                    s_eEthernetDnsState = DNS_STATE_FAIL;
     d96:	2105      	movs	r1, #5
     d98:	232c      	movs	r3, #44	; 0x2c
     d9a:	4a18      	ldr	r2, [pc, #96]	; (dfc <_ManageEthernetDnsState+0x144>)
     d9c:	54d1      	strb	r1, [r2, r3]
     d9e:	e7dd      	b.n	d5c <_ManageEthernetDnsState+0xa4>
				DEBUG_INFO("DNS STATE (GET-DONE)");
     da0:	4824      	ldr	r0, [pc, #144]	; (e34 <_ManageEthernetDnsState+0x17c>)
     da2:	4b19      	ldr	r3, [pc, #100]	; (e08 <_ManageEthernetDnsState+0x150>)
     da4:	4798      	blx	r3
                s_eEthernetDnsState = DNS_STATE_DONE;
     da6:	2106      	movs	r1, #6
     da8:	232c      	movs	r3, #44	; 0x2c
     daa:	4a14      	ldr	r2, [pc, #80]	; (dfc <_ManageEthernetDnsState+0x144>)
     dac:	54d1      	strb	r1, [r2, r3]
     dae:	e7d5      	b.n	d5c <_ManageEthernetDnsState+0xa4>
			DEBUG_INFO("DNS STATE (FAIL)");
     db0:	4821      	ldr	r0, [pc, #132]	; (e38 <_ManageEthernetDnsState+0x180>)
     db2:	4b15      	ldr	r3, [pc, #84]	; (e08 <_ManageEthernetDnsState+0x150>)
     db4:	4798      	blx	r3
            su8Attempts++;
     db6:	4911      	ldr	r1, [pc, #68]	; (dfc <_ManageEthernetDnsState+0x144>)
     db8:	222d      	movs	r2, #45	; 0x2d
     dba:	5c8b      	ldrb	r3, [r1, r2]
     dbc:	3301      	adds	r3, #1
     dbe:	b2db      	uxtb	r3, r3
     dc0:	548b      	strb	r3, [r1, r2]
            if (su8Attempts<2) {
     dc2:	2b01      	cmp	r3, #1
     dc4:	d906      	bls.n	dd4 <_ManageEthernetDnsState+0x11c>
                s_eEthernetDnsState = DNS_STATE_IDLE;
     dc6:	4b0d      	ldr	r3, [pc, #52]	; (dfc <_ManageEthernetDnsState+0x144>)
     dc8:	2100      	movs	r1, #0
     dca:	222c      	movs	r2, #44	; 0x2c
     dcc:	5499      	strb	r1, [r3, r2]
                s_pfDnsResponseCb();
     dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     dd0:	4798      	blx	r3
     dd2:	e7c3      	b.n	d5c <_ManageEthernetDnsState+0xa4>
                s_eEthernetDnsState = DNS_STATE_OPEN_SOCKET;
     dd4:	000b      	movs	r3, r1
     dd6:	2102      	movs	r1, #2
     dd8:	3a01      	subs	r2, #1
     dda:	5499      	strb	r1, [r3, r2]
                Timer_SetTimer(TIMER_ETH_DNS_TIMEOUT, TIMEOUT_DNS_RESOLUTION);
     ddc:	8858      	ldrh	r0, [r3, #2]
     dde:	3101      	adds	r1, #1
     de0:	4b0b      	ldr	r3, [pc, #44]	; (e10 <_ManageEthernetDnsState+0x158>)
     de2:	4798      	blx	r3
     de4:	e7ba      	b.n	d5c <_ManageEthernetDnsState+0xa4>
			DEBUG_INFO("DNS STATE (DONE)");
     de6:	4815      	ldr	r0, [pc, #84]	; (e3c <_ManageEthernetDnsState+0x184>)
     de8:	4b07      	ldr	r3, [pc, #28]	; (e08 <_ManageEthernetDnsState+0x150>)
     dea:	4798      	blx	r3
            s_eEthernetDnsState = DNS_STATE_IDLE;
     dec:	4b03      	ldr	r3, [pc, #12]	; (dfc <_ManageEthernetDnsState+0x144>)
     dee:	2100      	movs	r1, #0
     df0:	222c      	movs	r2, #44	; 0x2c
     df2:	5499      	strb	r1, [r3, r2]
            s_pfDnsResponseCb();
     df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     df6:	4798      	blx	r3
     df8:	e7b0      	b.n	d5c <_ManageEthernetDnsState+0xa4>
     dfa:	46c0      	nop			; (mov r8, r8)
     dfc:	2000060c 	.word	0x2000060c
     e00:	00008518 	.word	0x00008518
     e04:	00008554 	.word	0x00008554
     e08:	00000891 	.word	0x00000891
     e0c:	20004098 	.word	0x20004098
     e10:	00001d31 	.word	0x00001d31
     e14:	00008568 	.word	0x00008568
     e18:	00001d3d 	.word	0x00001d3d
     e1c:	0000857c 	.word	0x0000857c
     e20:	00004309 	.word	0x00004309
     e24:	00000c41 	.word	0x00000c41
     e28:	00006475 	.word	0x00006475
     e2c:	00006439 	.word	0x00006439
     e30:	00008590 	.word	0x00008590
     e34:	000085a8 	.word	0x000085a8
     e38:	000085c0 	.word	0x000085c0
     e3c:	000085d4 	.word	0x000085d4

00000e40 <_InitEthernetSockets>:

void _InitEthernetSockets(void) {
    s_fEthernetSocketsInitialized = true;
     e40:	2101      	movs	r1, #1
     e42:	2340      	movs	r3, #64	; 0x40
     e44:	4a01      	ldr	r2, [pc, #4]	; (e4c <_InitEthernetSockets+0xc>)
     e46:	54d1      	strb	r1, [r2, r3]
}
     e48:	4770      	bx	lr
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	2000060c 	.word	0x2000060c

00000e50 <_DnsLookup>:

void _DnsLookup(char* pcHostname, uint32_t* pu32HostIp, dns_function_ptr pfResponseHandler) {
     e50:	b510      	push	{r4, lr}
	// Bail out if the DNS is already in use
	if (s_eEthernetDnsState!=DNS_STATE_IDLE) return;
     e52:	232c      	movs	r3, #44	; 0x2c
     e54:	4c05      	ldr	r4, [pc, #20]	; (e6c <_DnsLookup+0x1c>)
     e56:	5ce3      	ldrb	r3, [r4, r3]
     e58:	2b00      	cmp	r3, #0
     e5a:	d105      	bne.n	e68 <_DnsLookup+0x18>

	// Store the result pointers
	s_pcLookupHostname = pcHostname;
     e5c:	62a0      	str	r0, [r4, #40]	; 0x28
	s_pu32LookupHostIp = pu32HostIp;
     e5e:	6361      	str	r1, [r4, #52]	; 0x34
	s_pfDnsResponseCb = pfResponseHandler;
     e60:	63e2      	str	r2, [r4, #60]	; 0x3c

	// Initiate the DNS
	s_eEthernetDnsState = DNS_STATE_START;
     e62:	2101      	movs	r1, #1
     e64:	222c      	movs	r2, #44	; 0x2c
     e66:	54a1      	strb	r1, [r4, r2]
}
     e68:	bd10      	pop	{r4, pc}
     e6a:	46c0      	nop			; (mov r8, r8)
     e6c:	2000060c 	.word	0x2000060c

00000e70 <_DnsRemoteHostCb>:
void _DnsRemoteHostCb(void) {
     e70:	b5f0      	push	{r4, r5, r6, r7, lr}
     e72:	b083      	sub	sp, #12
    memcpy(&au8Tmp[0], (uint8_t*)&s_u32EthernetRemoteHostIp, 4);
     e74:	ae01      	add	r6, sp, #4
     e76:	4f1c      	ldr	r7, [pc, #112]	; (ee8 <_DnsRemoteHostCb+0x78>)
     e78:	6c79      	ldr	r1, [r7, #68]	; 0x44
     e7a:	9101      	str	r1, [sp, #4]
	DEBUG_INFO("%u-", au8Tmp[3]);
     e7c:	0e09      	lsrs	r1, r1, #24
     e7e:	4d1b      	ldr	r5, [pc, #108]	; (eec <_DnsRemoteHostCb+0x7c>)
     e80:	0028      	movs	r0, r5
     e82:	4c1b      	ldr	r4, [pc, #108]	; (ef0 <_DnsRemoteHostCb+0x80>)
     e84:	47a0      	blx	r4
	DEBUG_INFO("%u-", au8Tmp[2]);
     e86:	78b1      	ldrb	r1, [r6, #2]
     e88:	0028      	movs	r0, r5
     e8a:	47a0      	blx	r4
	DEBUG_INFO("%u-", au8Tmp[1]);
     e8c:	7871      	ldrb	r1, [r6, #1]
     e8e:	0028      	movs	r0, r5
     e90:	47a0      	blx	r4
	DEBUG_INFO("%u-", au8Tmp[0]);
     e92:	7831      	ldrb	r1, [r6, #0]
     e94:	0028      	movs	r0, r5
     e96:	47a0      	blx	r4
	DEBUG_INFO("DNS Remove Host CB");
     e98:	4816      	ldr	r0, [pc, #88]	; (ef4 <_DnsRemoteHostCb+0x84>)
     e9a:	47a0      	blx	r4
	if (s_u32EthernetRemoteHostIp!=0) {
     e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     e9e:	2b00      	cmp	r3, #0
     ea0:	d10c      	bne.n	ebc <_DnsRemoteHostCb+0x4c>
		DEBUG_INFO("Failed resolving %s. ", s_pcLookupHostname);
     ea2:	4c11      	ldr	r4, [pc, #68]	; (ee8 <_DnsRemoteHostCb+0x78>)
     ea4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     ea6:	4814      	ldr	r0, [pc, #80]	; (ef8 <_DnsRemoteHostCb+0x88>)
     ea8:	4b11      	ldr	r3, [pc, #68]	; (ef0 <_DnsRemoteHostCb+0x80>)
     eaa:	4798      	blx	r3
		if (s_u8EthernetRemoteDnsAttempts<3) {
     eac:	2348      	movs	r3, #72	; 0x48
     eae:	5ce3      	ldrb	r3, [r4, r3]
     eb0:	2b02      	cmp	r3, #2
     eb2:	d90c      	bls.n	ece <_DnsRemoteHostCb+0x5e>
			DEBUG_INFO("Unable to resolve. ");
     eb4:	4811      	ldr	r0, [pc, #68]	; (efc <_DnsRemoteHostCb+0x8c>)
     eb6:	4b0e      	ldr	r3, [pc, #56]	; (ef0 <_DnsRemoteHostCb+0x80>)
     eb8:	4798      	blx	r3
}
     eba:	e006      	b.n	eca <_DnsRemoteHostCb+0x5a>
		DEBUG_INFO("%s resolved to IP Address 0x%X. ", s_pcLookupHostname, *s_pu32LookupHostIp);
     ebc:	4b0a      	ldr	r3, [pc, #40]	; (ee8 <_DnsRemoteHostCb+0x78>)
     ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
     ec0:	6812      	ldr	r2, [r2, #0]
     ec2:	6a99      	ldr	r1, [r3, #40]	; 0x28
     ec4:	480e      	ldr	r0, [pc, #56]	; (f00 <_DnsRemoteHostCb+0x90>)
     ec6:	4b0a      	ldr	r3, [pc, #40]	; (ef0 <_DnsRemoteHostCb+0x80>)
     ec8:	4798      	blx	r3
}
     eca:	b003      	add	sp, #12
     ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					_DnsLookup(hostname, &s_u32EthernetRemoteHostIp, &_DnsRemoteHostCb);
     ece:	4c06      	ldr	r4, [pc, #24]	; (ee8 <_DnsRemoteHostCb+0x78>)
     ed0:	0021      	movs	r1, r4
     ed2:	3144      	adds	r1, #68	; 0x44
     ed4:	4a0b      	ldr	r2, [pc, #44]	; (f04 <_DnsRemoteHostCb+0x94>)
     ed6:	480c      	ldr	r0, [pc, #48]	; (f08 <_DnsRemoteHostCb+0x98>)
     ed8:	4b0c      	ldr	r3, [pc, #48]	; (f0c <_DnsRemoteHostCb+0x9c>)
     eda:	4798      	blx	r3
			s_fEthernetServerCommEstablished = false;
     edc:	2200      	movs	r2, #0
     ede:	2349      	movs	r3, #73	; 0x49
     ee0:	54e2      	strb	r2, [r4, r3]
			s_stEthernetInfo.eState = ETHERNET_STATE_ERROR;
     ee2:	3b46      	subs	r3, #70	; 0x46
     ee4:	7463      	strb	r3, [r4, #17]
     ee6:	e7f0      	b.n	eca <_DnsRemoteHostCb+0x5a>
     ee8:	2000060c 	.word	0x2000060c
     eec:	000085e8 	.word	0x000085e8
     ef0:	00000891 	.word	0x00000891
     ef4:	000085ec 	.word	0x000085ec
     ef8:	00008624 	.word	0x00008624
     efc:	00008650 	.word	0x00008650
     f00:	00008600 	.word	0x00008600
     f04:	00000e71 	.word	0x00000e71
     f08:	0000863c 	.word	0x0000863c
     f0c:	00000e51 	.word	0x00000e51

00000f10 <Ethernet_IsConnected>:

bool Ethernet_IsConnected(void) {
	if (s_stEthernetInfo.fConnected==true && s_stEthernetInfo.eState==ETHERNET_STATE_IDLE) return true;
     f10:	4b04      	ldr	r3, [pc, #16]	; (f24 <Ethernet_IsConnected+0x14>)
     f12:	8a1a      	ldrh	r2, [r3, #16]
     f14:	4b04      	ldr	r3, [pc, #16]	; (f28 <Ethernet_IsConnected+0x18>)
     f16:	429a      	cmp	r2, r3
     f18:	d001      	beq.n	f1e <Ethernet_IsConnected+0xe>
	else return false;
     f1a:	2000      	movs	r0, #0
}
     f1c:	4770      	bx	lr
	if (s_stEthernetInfo.fConnected==true && s_stEthernetInfo.eState==ETHERNET_STATE_IDLE) return true;
     f1e:	2001      	movs	r0, #1
     f20:	e7fc      	b.n	f1c <Ethernet_IsConnected+0xc>
     f22:	46c0      	nop			; (mov r8, r8)
     f24:	2000060c 	.word	0x2000060c
     f28:	00000201 	.word	0x00000201

00000f2c <_ManageEthernetRemoteSocketState>:
void _ManageEthernetRemoteSocketState(void) {
     f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f2e:	46d6      	mov	lr, sl
     f30:	464f      	mov	r7, r9
     f32:	b580      	push	{r7, lr}
     f34:	b083      	sub	sp, #12
    if (s_fEthernetSocketsInitialized==false) return;
     f36:	2340      	movs	r3, #64	; 0x40
     f38:	4ac7      	ldr	r2, [pc, #796]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
     f3a:	5cd3      	ldrb	r3, [r2, r3]
     f3c:	2b00      	cmp	r3, #0
     f3e:	d104      	bne.n	f4a <_ManageEthernetRemoteSocketState+0x1e>
}
     f40:	b003      	add	sp, #12
     f42:	bc0c      	pop	{r2, r3}
     f44:	4691      	mov	r9, r2
     f46:	469a      	mov	sl, r3
     f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eSocketState = TCP_SocketPoll(&s_stEthernetSocketRemote);
     f4a:	0010      	movs	r0, r2
     f4c:	304c      	adds	r0, #76	; 0x4c
     f4e:	4bc3      	ldr	r3, [pc, #780]	; (125c <_ManageEthernetRemoteSocketState+0x330>)
     f50:	4798      	blx	r3
    switch (eSocketState) {
     f52:	2804      	cmp	r0, #4
     f54:	d900      	bls.n	f58 <_ManageEthernetRemoteSocketState+0x2c>
     f56:	e1f7      	b.n	1348 <_ManageEthernetRemoteSocketState+0x41c>
     f58:	0080      	lsls	r0, r0, #2
     f5a:	4bc1      	ldr	r3, [pc, #772]	; (1260 <_ManageEthernetRemoteSocketState+0x334>)
     f5c:	581b      	ldr	r3, [r3, r0]
     f5e:	469f      	mov	pc, r3
            if (TCP_SocketInit(&s_stEthernetSocketRemote) != SUCCESS) return;
     f60:	48bd      	ldr	r0, [pc, #756]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
     f62:	304c      	adds	r0, #76	; 0x4c
     f64:	4bbf      	ldr	r3, [pc, #764]	; (1264 <_ManageEthernetRemoteSocketState+0x338>)
     f66:	4798      	blx	r3
     f68:	2801      	cmp	r0, #1
     f6a:	d1e9      	bne.n	f40 <_ManageEthernetRemoteSocketState+0x14>
     f6c:	e1f4      	b.n	1358 <_ManageEthernetRemoteSocketState+0x42c>
            if (s_fPendingClose==true) {
     f6e:	4bbe      	ldr	r3, [pc, #760]	; (1268 <_ManageEthernetRemoteSocketState+0x33c>)
     f70:	7f1b      	ldrb	r3, [r3, #28]
     f72:	2b00      	cmp	r3, #0
     f74:	d12c      	bne.n	fd0 <_ManageEthernetRemoteSocketState+0xa4>
			if (s_fEthernetQueueServerSend==true && s_u32EthernetRemoteHostIp!=0) {
     f76:	4bbc      	ldr	r3, [pc, #752]	; (1268 <_ManageEthernetRemoteSocketState+0x33c>)
     f78:	7f9b      	ldrb	r3, [r3, #30]
     f7a:	2b00      	cmp	r3, #0
     f7c:	d100      	bne.n	f80 <_ManageEthernetRemoteSocketState+0x54>
     f7e:	e1eb      	b.n	1358 <_ManageEthernetRemoteSocketState+0x42c>
     f80:	4bb5      	ldr	r3, [pc, #724]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
     f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     f84:	2b00      	cmp	r3, #0
     f86:	d100      	bne.n	f8a <_ManageEthernetRemoteSocketState+0x5e>
     f88:	e1e6      	b.n	1358 <_ManageEthernetRemoteSocketState+0x42c>
                if (s_u16EthernetPostLengthOffset==0) {
     f8a:	4bb7      	ldr	r3, [pc, #732]	; (1268 <_ManageEthernetRemoteSocketState+0x33c>)
     f8c:	8c1b      	ldrh	r3, [r3, #32]
     f8e:	2b00      	cmp	r3, #0
     f90:	d027      	beq.n	fe2 <_ManageEthernetRemoteSocketState+0xb6>
                DEBUG_INFO("Open remote socket. ");
     f92:	48b6      	ldr	r0, [pc, #728]	; (126c <_ManageEthernetRemoteSocketState+0x340>)
     f94:	4bb6      	ldr	r3, [pc, #728]	; (1270 <_ManageEthernetRemoteSocketState+0x344>)
     f96:	4798      	blx	r3
                s_stEthernetSocketAddressRemote.addr.s_addr = s_u32EthernetRemoteHostIp;
     f98:	4bb6      	ldr	r3, [pc, #728]	; (1274 <_ManageEthernetRemoteSocketState+0x348>)
     f9a:	48af      	ldr	r0, [pc, #700]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
     f9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
     f9e:	62da      	str	r2, [r3, #44]	; 0x2c
                s_stEthernetSocketAddressRemote.port = ETHERNET_SOCKET_PORT_HTTP;
     fa0:	2250      	movs	r2, #80	; 0x50
     fa2:	851a      	strh	r2, [r3, #40]	; 0x28
                if (TCP_InsertRxBuffer(&s_stEthernetSocketRemote, (uint8_t*)g_acRxBuffer, RX_BUFFER_NUM_BYTES) != true) {
     fa4:	304c      	adds	r0, #76	; 0x4c
     fa6:	2280      	movs	r2, #128	; 0x80
     fa8:	0112      	lsls	r2, r2, #4
     faa:	49b3      	ldr	r1, [pc, #716]	; (1278 <_ManageEthernetRemoteSocketState+0x34c>)
     fac:	4bb3      	ldr	r3, [pc, #716]	; (127c <_ManageEthernetRemoteSocketState+0x350>)
     fae:	4798      	blx	r3
     fb0:	2800      	cmp	r0, #0
     fb2:	d125      	bne.n	1000 <_ManageEthernetRemoteSocketState+0xd4>
                    if (s_u8TxAttemptCount>5) {} //App_SetLastError(ERROR_ETH_RX_BUFFER_FAILURE);
     fb4:	2330      	movs	r3, #48	; 0x30
     fb6:	4aaf      	ldr	r2, [pc, #700]	; (1274 <_ManageEthernetRemoteSocketState+0x348>)
     fb8:	5cd3      	ldrb	r3, [r2, r3]
     fba:	2b05      	cmp	r3, #5
     fbc:	d803      	bhi.n	fc6 <_ManageEthernetRemoteSocketState+0x9a>
                    else s_u8TxAttemptCount++;
     fbe:	3301      	adds	r3, #1
     fc0:	2230      	movs	r2, #48	; 0x30
     fc2:	49ac      	ldr	r1, [pc, #688]	; (1274 <_ManageEthernetRemoteSocketState+0x348>)
     fc4:	548b      	strb	r3, [r1, r2]
                    TCP_SocketRemove(&s_stEthernetSocketRemote);
     fc6:	48a4      	ldr	r0, [pc, #656]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
     fc8:	304c      	adds	r0, #76	; 0x4c
     fca:	4bad      	ldr	r3, [pc, #692]	; (1280 <_ManageEthernetRemoteSocketState+0x354>)
     fcc:	4798      	blx	r3
                    return;
     fce:	e7b7      	b.n	f40 <_ManageEthernetRemoteSocketState+0x14>
                TCP_SocketRemove(&s_stEthernetSocketRemote);
     fd0:	48a1      	ldr	r0, [pc, #644]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
     fd2:	304c      	adds	r0, #76	; 0x4c
     fd4:	4baa      	ldr	r3, [pc, #680]	; (1280 <_ManageEthernetRemoteSocketState+0x354>)
     fd6:	4798      	blx	r3
                s_fPendingRepsonse = false;
     fd8:	4ba3      	ldr	r3, [pc, #652]	; (1268 <_ManageEthernetRemoteSocketState+0x33c>)
     fda:	2200      	movs	r2, #0
     fdc:	775a      	strb	r2, [r3, #29]
                s_fPendingClose = false;
     fde:	771a      	strb	r2, [r3, #28]
                return;
     fe0:	e7ae      	b.n	f40 <_ManageEthernetRemoteSocketState+0x14>
                    DEBUG_INFO("Build common header. ");
     fe2:	48a8      	ldr	r0, [pc, #672]	; (1284 <_ManageEthernetRemoteSocketState+0x358>)
     fe4:	4ba2      	ldr	r3, [pc, #648]	; (1270 <_ManageEthernetRemoteSocketState+0x344>)
     fe6:	4798      	blx	r3
                    s_u16EthernetPostPayloadOffset = Http_BuildPostHeaderCommon(&s_acEthernetStrPostHeader[0], pcHostname, false);
     fe8:	4c9f      	ldr	r4, [pc, #636]	; (1268 <_ManageEthernetRemoteSocketState+0x33c>)
     fea:	0020      	movs	r0, r4
     fec:	3024      	adds	r0, #36	; 0x24
     fee:	2200      	movs	r2, #0
     ff0:	49a5      	ldr	r1, [pc, #660]	; (1288 <_ManageEthernetRemoteSocketState+0x35c>)
     ff2:	4ba6      	ldr	r3, [pc, #664]	; (128c <_ManageEthernetRemoteSocketState+0x360>)
     ff4:	4798      	blx	r3
     ff6:	4b9f      	ldr	r3, [pc, #636]	; (1274 <_ManageEthernetRemoteSocketState+0x348>)
     ff8:	8498      	strh	r0, [r3, #36]	; 0x24
                    s_u16EthernetPostLengthOffset = s_u16EthernetPostPayloadOffset - 8; // shift back double CRLF and 4 digits...
     ffa:	3808      	subs	r0, #8
     ffc:	8420      	strh	r0, [r4, #32]
     ffe:	e7c8      	b.n	f92 <_ManageEthernetRemoteSocketState+0x66>
                if (TCP_Connect(&s_stEthernetSocketRemote, &s_stEthernetSocketAddressRemote) == false) {
    1000:	499c      	ldr	r1, [pc, #624]	; (1274 <_ManageEthernetRemoteSocketState+0x348>)
    1002:	3128      	adds	r1, #40	; 0x28
    1004:	4894      	ldr	r0, [pc, #592]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
    1006:	304c      	adds	r0, #76	; 0x4c
    1008:	4ba1      	ldr	r3, [pc, #644]	; (1290 <_ManageEthernetRemoteSocketState+0x364>)
    100a:	4798      	blx	r3
    100c:	2800      	cmp	r0, #0
    100e:	d10d      	bne.n	102c <_ManageEthernetRemoteSocketState+0x100>
                    if (s_u8TxAttemptCount>5) {} //App_SetLastError(ERROR_ETH_REMOTE_SOCKET_OPEN);
    1010:	2330      	movs	r3, #48	; 0x30
    1012:	4a98      	ldr	r2, [pc, #608]	; (1274 <_ManageEthernetRemoteSocketState+0x348>)
    1014:	5cd3      	ldrb	r3, [r2, r3]
    1016:	2b05      	cmp	r3, #5
    1018:	d803      	bhi.n	1022 <_ManageEthernetRemoteSocketState+0xf6>
                    else s_u8TxAttemptCount++;
    101a:	3301      	adds	r3, #1
    101c:	2230      	movs	r2, #48	; 0x30
    101e:	4995      	ldr	r1, [pc, #596]	; (1274 <_ManageEthernetRemoteSocketState+0x348>)
    1020:	548b      	strb	r3, [r1, r2]
                    TCP_SocketRemove(&s_stEthernetSocketRemote);
    1022:	488d      	ldr	r0, [pc, #564]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
    1024:	304c      	adds	r0, #76	; 0x4c
    1026:	4b96      	ldr	r3, [pc, #600]	; (1280 <_ManageEthernetRemoteSocketState+0x354>)
    1028:	4798      	blx	r3
                    return;
    102a:	e789      	b.n	f40 <_ManageEthernetRemoteSocketState+0x14>
                Timer_SetTimer(TIMER_ETH_SOCKET_REMOTE_INIT_TIMEOUT, TIMEOUT_SOCKET_REMOTE_INIT);
    102c:	4b8a      	ldr	r3, [pc, #552]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
    102e:	8958      	ldrh	r0, [r3, #10]
    1030:	210a      	movs	r1, #10
    1032:	4b98      	ldr	r3, [pc, #608]	; (1294 <_ManageEthernetRemoteSocketState+0x368>)
    1034:	4798      	blx	r3
    1036:	e18f      	b.n	1358 <_ManageEthernetRemoteSocketState+0x42c>
        if (Timer_GetTimer(TIMER_ETH_SOCKET_REMOTE_INIT_TIMEOUT) == 0) {
    1038:	4b87      	ldr	r3, [pc, #540]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
    103a:	8958      	ldrh	r0, [r3, #10]
    103c:	4b96      	ldr	r3, [pc, #600]	; (1298 <_ManageEthernetRemoteSocketState+0x36c>)
    103e:	4798      	blx	r3
    1040:	2800      	cmp	r0, #0
    1042:	d000      	beq.n	1046 <_ManageEthernetRemoteSocketState+0x11a>
    1044:	e188      	b.n	1358 <_ManageEthernetRemoteSocketState+0x42c>
            TCP_Close(&s_stEthernetSocketRemote);
    1046:	4884      	ldr	r0, [pc, #528]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
    1048:	304c      	adds	r0, #76	; 0x4c
    104a:	4b94      	ldr	r3, [pc, #592]	; (129c <_ManageEthernetRemoteSocketState+0x370>)
    104c:	4798      	blx	r3
    104e:	e183      	b.n	1358 <_ManageEthernetRemoteSocketState+0x42c>
            if (s_fEthernetQueueServerSend==true && s_fPendingRepsonse==false) {
    1050:	4b85      	ldr	r3, [pc, #532]	; (1268 <_ManageEthernetRemoteSocketState+0x33c>)
    1052:	7f9b      	ldrb	r3, [r3, #30]
    1054:	2b00      	cmp	r3, #0
    1056:	d003      	beq.n	1060 <_ManageEthernetRemoteSocketState+0x134>
    1058:	4b83      	ldr	r3, [pc, #524]	; (1268 <_ManageEthernetRemoteSocketState+0x33c>)
    105a:	7f5b      	ldrb	r3, [r3, #29]
    105c:	2b00      	cmp	r3, #0
    105e:	d02e      	beq.n	10be <_ManageEthernetRemoteSocketState+0x192>
            if (s_u16EthernetRemainingRemoteBytes!=0) {
    1060:	4b84      	ldr	r3, [pc, #528]	; (1274 <_ManageEthernetRemoteSocketState+0x348>)
    1062:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1064:	2b00      	cmp	r3, #0
    1066:	d100      	bne.n	106a <_ManageEthernetRemoteSocketState+0x13e>
    1068:	e0c5      	b.n	11f6 <_ManageEthernetRemoteSocketState+0x2ca>
                s_stEthernetSocketRemote.localWnd = LOCAL_RX_BUFFER_NUM_BYTES; // set the window to the RX buffer size (to avoid TCP ZeroWindow warnings in Wireshark)
    106a:	487b      	ldr	r0, [pc, #492]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
    106c:	304c      	adds	r0, #76	; 0x4c
    106e:	2380      	movs	r3, #128	; 0x80
    1070:	00db      	lsls	r3, r3, #3
    1072:	83c3      	strh	r3, [r0, #30]
                if (TCP_SendDone(&s_stEthernetSocketRemote)) {
    1074:	4b8a      	ldr	r3, [pc, #552]	; (12a0 <_ManageEthernetRemoteSocketState+0x374>)
    1076:	4798      	blx	r3
    1078:	2800      	cmp	r0, #0
    107a:	d100      	bne.n	107e <_ManageEthernetRemoteSocketState+0x152>
    107c:	e0ac      	b.n	11d8 <_ManageEthernetRemoteSocketState+0x2ac>
                    if (s_u16EthernetRemainingRemoteBytes>MAX_TCP_CHUNK_SIZE) {
    107e:	4b7d      	ldr	r3, [pc, #500]	; (1274 <_ManageEthernetRemoteSocketState+0x348>)
    1080:	8e59      	ldrh	r1, [r3, #50]	; 0x32
    1082:	4b88      	ldr	r3, [pc, #544]	; (12a4 <_ManageEthernetRemoteSocketState+0x378>)
    1084:	4299      	cmp	r1, r3
    1086:	d800      	bhi.n	108a <_ManageEthernetRemoteSocketState+0x15e>
    1088:	e08a      	b.n	11a0 <_ManageEthernetRemoteSocketState+0x274>
                        DEBUG_INFO("Sending %d bytes of data to server. ", MAX_TCP_CHUNK_SIZE);
    108a:	001c      	movs	r4, r3
    108c:	0019      	movs	r1, r3
    108e:	4886      	ldr	r0, [pc, #536]	; (12a8 <_ManageEthernetRemoteSocketState+0x37c>)
    1090:	4b77      	ldr	r3, [pc, #476]	; (1270 <_ManageEthernetRemoteSocketState+0x344>)
    1092:	4798      	blx	r3
                        if (TCP_Send(&s_stEthernetSocketRemote, (uint8_t*)s_pvEthernetRemainingRemoteBuffer, MAX_TCP_CHUNK_SIZE) != true) {
    1094:	4b77      	ldr	r3, [pc, #476]	; (1274 <_ManageEthernetRemoteSocketState+0x348>)
    1096:	6b59      	ldr	r1, [r3, #52]	; 0x34
    1098:	0022      	movs	r2, r4
    109a:	486f      	ldr	r0, [pc, #444]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
    109c:	304c      	adds	r0, #76	; 0x4c
    109e:	4b83      	ldr	r3, [pc, #524]	; (12ac <_ManageEthernetRemoteSocketState+0x380>)
    10a0:	4798      	blx	r3
    10a2:	2800      	cmp	r0, #0
    10a4:	d074      	beq.n	1190 <_ManageEthernetRemoteSocketState+0x264>
                        s_pvEthernetRemainingRemoteBuffer = (void*)(s_pvEthernetRemainingRemoteBuffer + MAX_TCP_CHUNK_SIZE);
    10a6:	4b73      	ldr	r3, [pc, #460]	; (1274 <_ManageEthernetRemoteSocketState+0x348>)
    10a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    10aa:	497e      	ldr	r1, [pc, #504]	; (12a4 <_ManageEthernetRemoteSocketState+0x378>)
    10ac:	468c      	mov	ip, r1
    10ae:	4462      	add	r2, ip
    10b0:	635a      	str	r2, [r3, #52]	; 0x34
                        s_u16EthernetRemainingRemoteBytes = s_u16EthernetRemainingRemoteBytes - MAX_TCP_CHUNK_SIZE;
    10b2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    10b4:	497e      	ldr	r1, [pc, #504]	; (12b0 <_ManageEthernetRemoteSocketState+0x384>)
    10b6:	468c      	mov	ip, r1
    10b8:	4462      	add	r2, ip
    10ba:	865a      	strh	r2, [r3, #50]	; 0x32
    10bc:	e14c      	b.n	1358 <_ManageEthernetRemoteSocketState+0x42c>
                memcpy(pTxDst, s_acEthernetStrPostHeader, s_u16EthernetPostPayloadOffset);
    10be:	4b6d      	ldr	r3, [pc, #436]	; (1274 <_ManageEthernetRemoteSocketState+0x348>)
    10c0:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
    10c2:	4d7c      	ldr	r5, [pc, #496]	; (12b4 <_ManageEthernetRemoteSocketState+0x388>)
    10c4:	0022      	movs	r2, r4
    10c6:	4968      	ldr	r1, [pc, #416]	; (1268 <_ManageEthernetRemoteSocketState+0x33c>)
    10c8:	3124      	adds	r1, #36	; 0x24
    10ca:	0028      	movs	r0, r5
    10cc:	4b7a      	ldr	r3, [pc, #488]	; (12b8 <_ManageEthernetRemoteSocketState+0x38c>)
    10ce:	4798      	blx	r3
                pTxDst += s_u16EthernetPostPayloadOffset;
    10d0:	1964      	adds	r4, r4, r5
                u16FifoBytes = CmdFifo_Send(pTxDst, COMMAND_FIFO_NUM_BYTES);
    10d2:	2180      	movs	r1, #128	; 0x80
    10d4:	0149      	lsls	r1, r1, #5
    10d6:	0020      	movs	r0, r4
    10d8:	4b78      	ldr	r3, [pc, #480]	; (12bc <_ManageEthernetRemoteSocketState+0x390>)
    10da:	4798      	blx	r3
    10dc:	b283      	uxth	r3, r0
    10de:	4699      	mov	r9, r3
    10e0:	0400      	lsls	r0, r0, #16
    10e2:	0c07      	lsrs	r7, r0, #16
				DEBUG_INFO("%u", u16FifoBytes);
    10e4:	0039      	movs	r1, r7
    10e6:	4876      	ldr	r0, [pc, #472]	; (12c0 <_ManageEthernetRemoteSocketState+0x394>)
    10e8:	4b61      	ldr	r3, [pc, #388]	; (1270 <_ManageEthernetRemoteSocketState+0x344>)
    10ea:	4798      	blx	r3
                pTxDst += u16FifoBytes;
    10ec:	19e4      	adds	r4, r4, r7
                if (u16PayloadBytes>999)     {digits = 4;}
    10ee:	4b75      	ldr	r3, [pc, #468]	; (12c4 <_ManageEthernetRemoteSocketState+0x398>)
    10f0:	4599      	cmp	r9, r3
    10f2:	d806      	bhi.n	1102 <_ManageEthernetRemoteSocketState+0x1d6>
                else if (u16PayloadBytes>99) {digits = 3;}
    10f4:	464b      	mov	r3, r9
    10f6:	2b63      	cmp	r3, #99	; 0x63
    10f8:	d832      	bhi.n	1160 <_ManageEthernetRemoteSocketState+0x234>
                else if (u16PayloadBytes>9)  {digits = 2;}
    10fa:	2b09      	cmp	r3, #9
    10fc:	d932      	bls.n	1164 <_ManageEthernetRemoteSocketState+0x238>
    10fe:	2602      	movs	r6, #2
    1100:	e000      	b.n	1104 <_ManageEthernetRemoteSocketState+0x1d8>
                if (u16PayloadBytes>999)     {digits = 4;}
    1102:	2604      	movs	r6, #4
                sprintf(acLength, "%d", u16PayloadBytes);
    1104:	003a      	movs	r2, r7
    1106:	4970      	ldr	r1, [pc, #448]	; (12c8 <_ManageEthernetRemoteSocketState+0x39c>)
    1108:	4668      	mov	r0, sp
    110a:	4b70      	ldr	r3, [pc, #448]	; (12cc <_ManageEthernetRemoteSocketState+0x3a0>)
    110c:	4798      	blx	r3
                char* pDst = &g_acTxBuffer[s_u16EthernetPostLengthOffset];
    110e:	4b56      	ldr	r3, [pc, #344]	; (1268 <_ManageEthernetRemoteSocketState+0x33c>)
    1110:	8c1d      	ldrh	r5, [r3, #32]
    1112:	4868      	ldr	r0, [pc, #416]	; (12b4 <_ManageEthernetRemoteSocketState+0x388>)
    1114:	182d      	adds	r5, r5, r0
                memcpy(pDst, acLength, digits);
    1116:	0032      	movs	r2, r6
    1118:	4669      	mov	r1, sp
    111a:	0028      	movs	r0, r5
    111c:	4b66      	ldr	r3, [pc, #408]	; (12b8 <_ManageEthernetRemoteSocketState+0x38c>)
    111e:	469a      	mov	sl, r3
    1120:	4798      	blx	r3
                pDst += digits;
    1122:	19ad      	adds	r5, r5, r6
                memcpy(pDst, "\r\n\r\n", 4);
    1124:	2204      	movs	r2, #4
    1126:	496a      	ldr	r1, [pc, #424]	; (12d0 <_ManageEthernetRemoteSocketState+0x3a4>)
    1128:	0028      	movs	r0, r5
    112a:	47d0      	blx	sl
                pDst += 4;
    112c:	1d28      	adds	r0, r5, #4
                if (digits < 4) {
    112e:	2e03      	cmp	r6, #3
    1130:	d91a      	bls.n	1168 <_ManageEthernetRemoteSocketState+0x23c>
                u16BytesToSend = pTxDst - &g_acTxBuffer[0];
    1132:	4b60      	ldr	r3, [pc, #384]	; (12b4 <_ManageEthernetRemoteSocketState+0x388>)
    1134:	1ae4      	subs	r4, r4, r3
    1136:	b2a4      	uxth	r4, r4
                if (u16PayloadBytes>0) {
    1138:	464b      	mov	r3, r9
    113a:	2b00      	cmp	r3, #0
    113c:	d01e      	beq.n	117c <_ManageEthernetRemoteSocketState+0x250>
                    s_u16EthernetRemainingRemoteBytes = u16BytesToSend;
    113e:	4b4d      	ldr	r3, [pc, #308]	; (1274 <_ManageEthernetRemoteSocketState+0x348>)
    1140:	865c      	strh	r4, [r3, #50]	; 0x32
                    s_pvEthernetRemainingRemoteBuffer = (void*)&g_acTxBuffer[0];
    1142:	4a5c      	ldr	r2, [pc, #368]	; (12b4 <_ManageEthernetRemoteSocketState+0x388>)
    1144:	635a      	str	r2, [r3, #52]	; 0x34
                    Timer_SetTimer(TIMER_ETH_SOCKET_REMOTE_RESPONSE_TIMEOUT, TIMEOUT_SOCKET_REMOTE_RESPONSE);
    1146:	4b44      	ldr	r3, [pc, #272]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
    1148:	8998      	ldrh	r0, [r3, #12]
    114a:	210a      	movs	r1, #10
    114c:	4b51      	ldr	r3, [pc, #324]	; (1294 <_ManageEthernetRemoteSocketState+0x368>)
    114e:	4798      	blx	r3
                s_fEthernetQueueServerSend = false;
    1150:	2300      	movs	r3, #0
    1152:	4a45      	ldr	r2, [pc, #276]	; (1268 <_ManageEthernetRemoteSocketState+0x33c>)
    1154:	7793      	strb	r3, [r2, #30]
                s_u8TxAttemptCount = 0;
    1156:	4a47      	ldr	r2, [pc, #284]	; (1274 <_ManageEthernetRemoteSocketState+0x348>)
    1158:	2130      	movs	r1, #48	; 0x30
    115a:	5453      	strb	r3, [r2, r1]
                s_u16ResponseSize = 0;
    115c:	8713      	strh	r3, [r2, #56]	; 0x38
    115e:	e77f      	b.n	1060 <_ManageEthernetRemoteSocketState+0x134>
                else if (u16PayloadBytes>99) {digits = 3;}
    1160:	2603      	movs	r6, #3
    1162:	e7cf      	b.n	1104 <_ManageEthernetRemoteSocketState+0x1d8>
                else                         {digits = 1;}
    1164:	2601      	movs	r6, #1
    1166:	e7cd      	b.n	1104 <_ManageEthernetRemoteSocketState+0x1d8>
                    memcpy(pDst, (char*)&g_acTxBuffer[s_u16EthernetPostPayloadOffset], u16PayloadBytes);
    1168:	4b42      	ldr	r3, [pc, #264]	; (1274 <_ManageEthernetRemoteSocketState+0x348>)
    116a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    116c:	4b51      	ldr	r3, [pc, #324]	; (12b4 <_ManageEthernetRemoteSocketState+0x388>)
    116e:	18c9      	adds	r1, r1, r3
    1170:	003a      	movs	r2, r7
    1172:	4b51      	ldr	r3, [pc, #324]	; (12b8 <_ManageEthernetRemoteSocketState+0x38c>)
    1174:	4798      	blx	r3
                    pTxDst += digits;
    1176:	3e04      	subs	r6, #4
    1178:	19a4      	adds	r4, r4, r6
    117a:	e7da      	b.n	1132 <_ManageEthernetRemoteSocketState+0x206>
                    DEBUG_INFO("Empty payload. ");
    117c:	4855      	ldr	r0, [pc, #340]	; (12d4 <_ManageEthernetRemoteSocketState+0x3a8>)
    117e:	4c3c      	ldr	r4, [pc, #240]	; (1270 <_ManageEthernetRemoteSocketState+0x344>)
    1180:	47a0      	blx	r4
                    TCP_Close(&s_stEthernetSocketRemote);
    1182:	4835      	ldr	r0, [pc, #212]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
    1184:	304c      	adds	r0, #76	; 0x4c
    1186:	4b45      	ldr	r3, [pc, #276]	; (129c <_ManageEthernetRemoteSocketState+0x370>)
    1188:	4798      	blx	r3
					 DEBUG_INFO("Socket closed");
    118a:	4853      	ldr	r0, [pc, #332]	; (12d8 <_ManageEthernetRemoteSocketState+0x3ac>)
    118c:	47a0      	blx	r4
    118e:	e7df      	b.n	1150 <_ManageEthernetRemoteSocketState+0x224>
                            DEBUG_INFO("Failed sending segment. ");
    1190:	4852      	ldr	r0, [pc, #328]	; (12dc <_ManageEthernetRemoteSocketState+0x3b0>)
    1192:	4b37      	ldr	r3, [pc, #220]	; (1270 <_ManageEthernetRemoteSocketState+0x344>)
    1194:	4798      	blx	r3
                            TCP_Close(&s_stEthernetSocketRemote);
    1196:	4830      	ldr	r0, [pc, #192]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
    1198:	304c      	adds	r0, #76	; 0x4c
    119a:	4b40      	ldr	r3, [pc, #256]	; (129c <_ManageEthernetRemoteSocketState+0x370>)
    119c:	4798      	blx	r3
                            return;
    119e:	e6cf      	b.n	f40 <_ManageEthernetRemoteSocketState+0x14>
                        DEBUG_INFO("Sending %d bytes of data to server. ", s_u16EthernetRemainingRemoteBytes);
    11a0:	4841      	ldr	r0, [pc, #260]	; (12a8 <_ManageEthernetRemoteSocketState+0x37c>)
    11a2:	4b33      	ldr	r3, [pc, #204]	; (1270 <_ManageEthernetRemoteSocketState+0x344>)
    11a4:	4798      	blx	r3
                        if (TCP_Send(&s_stEthernetSocketRemote, (uint8_t*)s_pvEthernetRemainingRemoteBuffer, s_u16EthernetRemainingRemoteBytes) != true) {
    11a6:	4b33      	ldr	r3, [pc, #204]	; (1274 <_ManageEthernetRemoteSocketState+0x348>)
    11a8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    11aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
    11ac:	482a      	ldr	r0, [pc, #168]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
    11ae:	304c      	adds	r0, #76	; 0x4c
    11b0:	4b3e      	ldr	r3, [pc, #248]	; (12ac <_ManageEthernetRemoteSocketState+0x380>)
    11b2:	4798      	blx	r3
    11b4:	2800      	cmp	r0, #0
    11b6:	d007      	beq.n	11c8 <_ManageEthernetRemoteSocketState+0x29c>
                        s_pvEthernetRemainingRemoteBuffer = NULL;
    11b8:	4b2e      	ldr	r3, [pc, #184]	; (1274 <_ManageEthernetRemoteSocketState+0x348>)
    11ba:	2200      	movs	r2, #0
    11bc:	635a      	str	r2, [r3, #52]	; 0x34
                        s_u16EthernetRemainingRemoteBytes = 0;
    11be:	865a      	strh	r2, [r3, #50]	; 0x32
                        s_fPendingRepsonse = true;
    11c0:	3201      	adds	r2, #1
    11c2:	4b29      	ldr	r3, [pc, #164]	; (1268 <_ManageEthernetRemoteSocketState+0x33c>)
    11c4:	775a      	strb	r2, [r3, #29]
    11c6:	e0c7      	b.n	1358 <_ManageEthernetRemoteSocketState+0x42c>
                            DEBUG_INFO("Failed sending. ");
    11c8:	4845      	ldr	r0, [pc, #276]	; (12e0 <_ManageEthernetRemoteSocketState+0x3b4>)
    11ca:	4b29      	ldr	r3, [pc, #164]	; (1270 <_ManageEthernetRemoteSocketState+0x344>)
    11cc:	4798      	blx	r3
                            TCP_Close(&s_stEthernetSocketRemote);
    11ce:	4822      	ldr	r0, [pc, #136]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
    11d0:	304c      	adds	r0, #76	; 0x4c
    11d2:	4b32      	ldr	r3, [pc, #200]	; (129c <_ManageEthernetRemoteSocketState+0x370>)
    11d4:	4798      	blx	r3
                            return;
    11d6:	e6b3      	b.n	f40 <_ManageEthernetRemoteSocketState+0x14>
                } else if (Timer_GetTimer(TIMER_ETH_SOCKET_REMOTE_RESPONSE_TIMEOUT)==0) {
    11d8:	4b1f      	ldr	r3, [pc, #124]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
    11da:	8998      	ldrh	r0, [r3, #12]
    11dc:	4b2e      	ldr	r3, [pc, #184]	; (1298 <_ManageEthernetRemoteSocketState+0x36c>)
    11de:	4798      	blx	r3
    11e0:	2800      	cmp	r0, #0
    11e2:	d000      	beq.n	11e6 <_ManageEthernetRemoteSocketState+0x2ba>
    11e4:	e0b8      	b.n	1358 <_ManageEthernetRemoteSocketState+0x42c>
                    DEBUG_INFO("Failed sending. ");
    11e6:	483e      	ldr	r0, [pc, #248]	; (12e0 <_ManageEthernetRemoteSocketState+0x3b4>)
    11e8:	4b21      	ldr	r3, [pc, #132]	; (1270 <_ManageEthernetRemoteSocketState+0x344>)
    11ea:	4798      	blx	r3
                    TCP_Close(&s_stEthernetSocketRemote);
    11ec:	481a      	ldr	r0, [pc, #104]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
    11ee:	304c      	adds	r0, #76	; 0x4c
    11f0:	4b2a      	ldr	r3, [pc, #168]	; (129c <_ManageEthernetRemoteSocketState+0x370>)
    11f2:	4798      	blx	r3
                    return;
    11f4:	e6a4      	b.n	f40 <_ManageEthernetRemoteSocketState+0x14>
                if (Timer_GetTimer(TIMER_ETH_SOCKET_REMOTE_RESPONSE_TIMEOUT)==0) {
    11f6:	4b18      	ldr	r3, [pc, #96]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
    11f8:	8998      	ldrh	r0, [r3, #12]
    11fa:	4b27      	ldr	r3, [pc, #156]	; (1298 <_ManageEthernetRemoteSocketState+0x36c>)
    11fc:	4798      	blx	r3
    11fe:	2800      	cmp	r0, #0
    1200:	d024      	beq.n	124c <_ManageEthernetRemoteSocketState+0x320>
                if (TCP_SendDone(&s_stEthernetSocketRemote)) {
    1202:	4815      	ldr	r0, [pc, #84]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
    1204:	304c      	adds	r0, #76	; 0x4c
    1206:	4b26      	ldr	r3, [pc, #152]	; (12a0 <_ManageEthernetRemoteSocketState+0x374>)
    1208:	4798      	blx	r3
    120a:	2800      	cmp	r0, #0
    120c:	d100      	bne.n	1210 <_ManageEthernetRemoteSocketState+0x2e4>
    120e:	e0a3      	b.n	1358 <_ManageEthernetRemoteSocketState+0x42c>
                    u16RxSize = TCP_GetRxLength(&s_stEthernetSocketRemote);
    1210:	4811      	ldr	r0, [pc, #68]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
    1212:	304c      	adds	r0, #76	; 0x4c
    1214:	4b33      	ldr	r3, [pc, #204]	; (12e4 <_ManageEthernetRemoteSocketState+0x3b8>)
    1216:	4798      	blx	r3
                    if (u16RxSize > 0) {
    1218:	2800      	cmp	r0, #0
    121a:	d100      	bne.n	121e <_ManageEthernetRemoteSocketState+0x2f2>
    121c:	e09c      	b.n	1358 <_ManageEthernetRemoteSocketState+0x42c>
                        u16RxSize = TCP_GetReceivedData(&s_stEthernetSocketRemote);
    121e:	480e      	ldr	r0, [pc, #56]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
    1220:	304c      	adds	r0, #76	; 0x4c
    1222:	4b31      	ldr	r3, [pc, #196]	; (12e8 <_ManageEthernetRemoteSocketState+0x3bc>)
    1224:	4798      	blx	r3
    1226:	b284      	uxth	r4, r0
                        DEBUG_INFO("Received %d bytes of data from server. ", u16RxSize);
    1228:	0021      	movs	r1, r4
    122a:	4830      	ldr	r0, [pc, #192]	; (12ec <_ManageEthernetRemoteSocketState+0x3c0>)
    122c:	4b10      	ldr	r3, [pc, #64]	; (1270 <_ManageEthernetRemoteSocketState+0x344>)
    122e:	4798      	blx	r3
                        s_u16ResponseSize += u16RxSize;
    1230:	4b10      	ldr	r3, [pc, #64]	; (1274 <_ManageEthernetRemoteSocketState+0x348>)
    1232:	8f19      	ldrh	r1, [r3, #56]	; 0x38
    1234:	1861      	adds	r1, r4, r1
    1236:	b289      	uxth	r1, r1
    1238:	8719      	strh	r1, [r3, #56]	; 0x38
                        if (TcpParser_ParseServerResponse((char*)g_acRxBuffer, s_u16ResponseSize)==true) {
    123a:	480f      	ldr	r0, [pc, #60]	; (1278 <_ManageEthernetRemoteSocketState+0x34c>)
    123c:	4b2c      	ldr	r3, [pc, #176]	; (12f0 <_ManageEthernetRemoteSocketState+0x3c4>)
    123e:	4798      	blx	r3
    1240:	2801      	cmp	r0, #1
    1242:	d059      	beq.n	12f8 <_ManageEthernetRemoteSocketState+0x3cc>
							DEBUG_INFO("ERROR - invalid response! ");
    1244:	482b      	ldr	r0, [pc, #172]	; (12f4 <_ManageEthernetRemoteSocketState+0x3c8>)
    1246:	4b0a      	ldr	r3, [pc, #40]	; (1270 <_ManageEthernetRemoteSocketState+0x344>)
    1248:	4798      	blx	r3
    124a:	e085      	b.n	1358 <_ManageEthernetRemoteSocketState+0x42c>
                    TCP_Close(&s_stEthernetSocketRemote);
    124c:	4802      	ldr	r0, [pc, #8]	; (1258 <_ManageEthernetRemoteSocketState+0x32c>)
    124e:	304c      	adds	r0, #76	; 0x4c
    1250:	4b12      	ldr	r3, [pc, #72]	; (129c <_ManageEthernetRemoteSocketState+0x370>)
    1252:	4798      	blx	r3
                    return;
    1254:	e674      	b.n	f40 <_ManageEthernetRemoteSocketState+0x14>
    1256:	46c0      	nop			; (mov r8, r8)
    1258:	2000060c 	.word	0x2000060c
    125c:	000061a9 	.word	0x000061a9
    1260:	00008534 	.word	0x00008534
    1264:	00006151 	.word	0x00006151
    1268:	2000068c 	.word	0x2000068c
    126c:	0000867c 	.word	0x0000867c
    1270:	00000891 	.word	0x00000891
    1274:	2000070c 	.word	0x2000070c
    1278:	20003758 	.word	0x20003758
    127c:	000062f9 	.word	0x000062f9
    1280:	000061c5 	.word	0x000061c5
    1284:	00008664 	.word	0x00008664
    1288:	0000863c 	.word	0x0000863c
    128c:	0000195d 	.word	0x0000195d
    1290:	000061e9 	.word	0x000061e9
    1294:	00001d31 	.word	0x00001d31
    1298:	00001d3d 	.word	0x00001d3d
    129c:	00006241 	.word	0x00006241
    12a0:	000062d9 	.word	0x000062d9
    12a4:	00000574 	.word	0x00000574
    12a8:	000086c4 	.word	0x000086c4
    12ac:	00006281 	.word	0x00006281
    12b0:	fffffa8c 	.word	0xfffffa8c
    12b4:	20001f58 	.word	0x20001f58
    12b8:	0000776b 	.word	0x0000776b
    12bc:	0000082d 	.word	0x0000082d
    12c0:	00008694 	.word	0x00008694
    12c4:	000003e7 	.word	0x000003e7
    12c8:	00008698 	.word	0x00008698
    12cc:	00007901 	.word	0x00007901
    12d0:	0000869c 	.word	0x0000869c
    12d4:	000086a4 	.word	0x000086a4
    12d8:	000086b4 	.word	0x000086b4
    12dc:	000086ec 	.word	0x000086ec
    12e0:	00008708 	.word	0x00008708
    12e4:	00006369 	.word	0x00006369
    12e8:	00006331 	.word	0x00006331
    12ec:	0000871c 	.word	0x0000871c
    12f0:	00001c75 	.word	0x00001c75
    12f4:	00008744 	.word	0x00008744
                            s_fEthernetServerCommEstablished = true;
    12f8:	4c2e      	ldr	r4, [pc, #184]	; (13b4 <_ManageEthernetRemoteSocketState+0x488>)
    12fa:	2201      	movs	r2, #1
    12fc:	2349      	movs	r3, #73	; 0x49
    12fe:	54e2      	strb	r2, [r4, r3]
                            Timer_SetTimer(TIMER_ETH_SERVER_LOST_COMM, 120);
    1300:	88a0      	ldrh	r0, [r4, #4]
    1302:	2178      	movs	r1, #120	; 0x78
    1304:	4b2c      	ldr	r3, [pc, #176]	; (13b8 <_ManageEthernetRemoteSocketState+0x48c>)
    1306:	4798      	blx	r3
                            TCP_Close(&s_stEthernetSocketRemote);
    1308:	0020      	movs	r0, r4
    130a:	304c      	adds	r0, #76	; 0x4c
    130c:	4b2b      	ldr	r3, [pc, #172]	; (13bc <_ManageEthernetRemoteSocketState+0x490>)
    130e:	4798      	blx	r3
    1310:	e022      	b.n	1358 <_ManageEthernetRemoteSocketState+0x42c>
            if (s_fPendingClose==false) {
    1312:	4b2b      	ldr	r3, [pc, #172]	; (13c0 <_ManageEthernetRemoteSocketState+0x494>)
    1314:	7f1b      	ldrb	r3, [r3, #28]
    1316:	2b00      	cmp	r3, #0
    1318:	d108      	bne.n	132c <_ManageEthernetRemoteSocketState+0x400>
                s_fPendingClose = true;
    131a:	2201      	movs	r2, #1
    131c:	4b28      	ldr	r3, [pc, #160]	; (13c0 <_ManageEthernetRemoteSocketState+0x494>)
    131e:	771a      	strb	r2, [r3, #28]
                Timer_SetTimer(TIMER_ETH_SOCKET_REMOTE_CLEANUP_TIMEOUT, 3);
    1320:	4b24      	ldr	r3, [pc, #144]	; (13b4 <_ManageEthernetRemoteSocketState+0x488>)
    1322:	89d8      	ldrh	r0, [r3, #14]
    1324:	2103      	movs	r1, #3
    1326:	4b24      	ldr	r3, [pc, #144]	; (13b8 <_ManageEthernetRemoteSocketState+0x48c>)
    1328:	4798      	blx	r3
    132a:	e015      	b.n	1358 <_ManageEthernetRemoteSocketState+0x42c>
            } else if (Timer_GetTimer(TIMER_ETH_SOCKET_REMOTE_CLEANUP_TIMEOUT) == 0) {
    132c:	4b21      	ldr	r3, [pc, #132]	; (13b4 <_ManageEthernetRemoteSocketState+0x488>)
    132e:	89d8      	ldrh	r0, [r3, #14]
    1330:	4b24      	ldr	r3, [pc, #144]	; (13c4 <_ManageEthernetRemoteSocketState+0x498>)
    1332:	4798      	blx	r3
    1334:	2800      	cmp	r0, #0
    1336:	d10f      	bne.n	1358 <_ManageEthernetRemoteSocketState+0x42c>
                DEBUG_INFO("ERROR - Failed remote socket cleanup! ");
    1338:	4823      	ldr	r0, [pc, #140]	; (13c8 <_ManageEthernetRemoteSocketState+0x49c>)
    133a:	4b24      	ldr	r3, [pc, #144]	; (13cc <_ManageEthernetRemoteSocketState+0x4a0>)
    133c:	4798      	blx	r3
                s_fPendingRepsonse = false;
    133e:	4b20      	ldr	r3, [pc, #128]	; (13c0 <_ManageEthernetRemoteSocketState+0x494>)
    1340:	2200      	movs	r2, #0
    1342:	775a      	strb	r2, [r3, #29]
                s_fPendingClose = false;
    1344:	771a      	strb	r2, [r3, #28]
    1346:	e007      	b.n	1358 <_ManageEthernetRemoteSocketState+0x42c>
            DEBUG_INFO("Invalid remote socket state! ");
    1348:	4821      	ldr	r0, [pc, #132]	; (13d0 <_ManageEthernetRemoteSocketState+0x4a4>)
    134a:	4b20      	ldr	r3, [pc, #128]	; (13cc <_ManageEthernetRemoteSocketState+0x4a0>)
    134c:	4798      	blx	r3
            s_fEthernetQueueServerSend = false;
    134e:	4b1c      	ldr	r3, [pc, #112]	; (13c0 <_ManageEthernetRemoteSocketState+0x494>)
    1350:	2200      	movs	r2, #0
    1352:	779a      	strb	r2, [r3, #30]
            s_fPendingRepsonse = false;
    1354:	775a      	strb	r2, [r3, #29]
            s_fPendingClose = false;
    1356:	771a      	strb	r2, [r3, #28]
    if (Timer_GetTimer(TIMER_ETH_DNS_REMOTE_RESOLUTION_TIMEOUT)==0) {
    1358:	4b16      	ldr	r3, [pc, #88]	; (13b4 <_ManageEthernetRemoteSocketState+0x488>)
    135a:	8918      	ldrh	r0, [r3, #8]
    135c:	4b19      	ldr	r3, [pc, #100]	; (13c4 <_ManageEthernetRemoteSocketState+0x498>)
    135e:	4798      	blx	r3
    1360:	2800      	cmp	r0, #0
    1362:	d000      	beq.n	1366 <_ManageEthernetRemoteSocketState+0x43a>
    1364:	e5ec      	b.n	f40 <_ManageEthernetRemoteSocketState+0x14>
        s_u32EthernetRemoteHostIp = 0;
    1366:	2300      	movs	r3, #0
    1368:	4a12      	ldr	r2, [pc, #72]	; (13b4 <_ManageEthernetRemoteSocketState+0x488>)
    136a:	6453      	str	r3, [r2, #68]	; 0x44
        s_u16EthernetPostPayloadOffset = 0;
    136c:	4a19      	ldr	r2, [pc, #100]	; (13d4 <_ManageEthernetRemoteSocketState+0x4a8>)
    136e:	8493      	strh	r3, [r2, #36]	; 0x24
        s_u16EthernetPostLengthOffset = 0;
    1370:	4a13      	ldr	r2, [pc, #76]	; (13c0 <_ManageEthernetRemoteSocketState+0x494>)
    1372:	8413      	strh	r3, [r2, #32]
        if (Ethernet_IsConnected()==true && s_eEthernetDnsState==DNS_STATE_IDLE) {
    1374:	4b18      	ldr	r3, [pc, #96]	; (13d8 <_ManageEthernetRemoteSocketState+0x4ac>)
    1376:	4798      	blx	r3
    1378:	2800      	cmp	r0, #0
    137a:	d100      	bne.n	137e <_ManageEthernetRemoteSocketState+0x452>
    137c:	e5e0      	b.n	f40 <_ManageEthernetRemoteSocketState+0x14>
    137e:	232c      	movs	r3, #44	; 0x2c
    1380:	4a0c      	ldr	r2, [pc, #48]	; (13b4 <_ManageEthernetRemoteSocketState+0x488>)
    1382:	5cd3      	ldrb	r3, [r2, r3]
    1384:	2b00      	cmp	r3, #0
    1386:	d000      	beq.n	138a <_ManageEthernetRemoteSocketState+0x45e>
    1388:	e5da      	b.n	f40 <_ManageEthernetRemoteSocketState+0x14>
            s_u8EthernetRemoteDnsAttempts = 0;
    138a:	0014      	movs	r4, r2
    138c:	2200      	movs	r2, #0
    138e:	3348      	adds	r3, #72	; 0x48
    1390:	54e2      	strb	r2, [r4, r3]
                    _DnsLookup(hostname, &s_u32EthernetRemoteHostIp, &_DnsRemoteHostCb);
    1392:	0021      	movs	r1, r4
    1394:	3144      	adds	r1, #68	; 0x44
    1396:	4d11      	ldr	r5, [pc, #68]	; (13dc <_ManageEthernetRemoteSocketState+0x4b0>)
    1398:	4a11      	ldr	r2, [pc, #68]	; (13e0 <_ManageEthernetRemoteSocketState+0x4b4>)
    139a:	0028      	movs	r0, r5
    139c:	4b11      	ldr	r3, [pc, #68]	; (13e4 <_ManageEthernetRemoteSocketState+0x4b8>)
    139e:	4798      	blx	r3
					DEBUG_INFO("HostName-%s", hostname);
    13a0:	0029      	movs	r1, r5
    13a2:	4811      	ldr	r0, [pc, #68]	; (13e8 <_ManageEthernetRemoteSocketState+0x4bc>)
    13a4:	4b09      	ldr	r3, [pc, #36]	; (13cc <_ManageEthernetRemoteSocketState+0x4a0>)
    13a6:	4798      	blx	r3
            Timer_SetTimer(TIMER_ETH_DNS_REMOTE_RESOLUTION_TIMEOUT, TIMEOUT_DNS_RERESOLVE);
    13a8:	8920      	ldrh	r0, [r4, #8]
    13aa:	21e1      	movs	r1, #225	; 0xe1
    13ac:	0109      	lsls	r1, r1, #4
    13ae:	4b02      	ldr	r3, [pc, #8]	; (13b8 <_ManageEthernetRemoteSocketState+0x48c>)
    13b0:	4798      	blx	r3
    13b2:	e5c5      	b.n	f40 <_ManageEthernetRemoteSocketState+0x14>
    13b4:	2000060c 	.word	0x2000060c
    13b8:	00001d31 	.word	0x00001d31
    13bc:	00006241 	.word	0x00006241
    13c0:	2000068c 	.word	0x2000068c
    13c4:	00001d3d 	.word	0x00001d3d
    13c8:	00008760 	.word	0x00008760
    13cc:	00000891 	.word	0x00000891
    13d0:	00008788 	.word	0x00008788
    13d4:	2000070c 	.word	0x2000070c
    13d8:	00000f11 	.word	0x00000f11
    13dc:	0000863c 	.word	0x0000863c
    13e0:	00000e71 	.word	0x00000e71
    13e4:	00000e51 	.word	0x00000e51
    13e8:	000087a8 	.word	0x000087a8

000013ec <_DeinitEthernetSockets>:

void _DeinitEthernetSockets(void) {
    13ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s_fEthernetSocketsInitialized = false;
    13ee:	4d08      	ldr	r5, [pc, #32]	; (1410 <_DeinitEthernetSockets+0x24>)
    13f0:	2400      	movs	r4, #0
    13f2:	2340      	movs	r3, #64	; 0x40
    13f4:	54ec      	strb	r4, [r5, r3]
    TCP_SocketRemove(&s_stEthernetSocketLocal);
    13f6:	4e07      	ldr	r6, [pc, #28]	; (1414 <_DeinitEthernetSockets+0x28>)
    13f8:	0030      	movs	r0, r6
    13fa:	303c      	adds	r0, #60	; 0x3c
    13fc:	4f06      	ldr	r7, [pc, #24]	; (1418 <_DeinitEthernetSockets+0x2c>)
    13fe:	47b8      	blx	r7
    s_pvEthernetRemainingLocalBuffer = NULL;
    s_u16EthernetRemainingLocalBytes = 0;
    1400:	4b06      	ldr	r3, [pc, #24]	; (141c <_DeinitEthernetSockets+0x30>)
    1402:	819c      	strh	r4, [r3, #12]
    TCP_SocketRemove(&s_stEthernetSocketRemote);
    1404:	0028      	movs	r0, r5
    1406:	304c      	adds	r0, #76	; 0x4c
    1408:	47b8      	blx	r7
    s_pvEthernetRemainingRemoteBuffer = NULL;
    140a:	6374      	str	r4, [r6, #52]	; 0x34
    s_u16EthernetRemainingRemoteBytes = 0;
    140c:	8674      	strh	r4, [r6, #50]	; 0x32
}
    140e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1410:	2000060c 	.word	0x2000060c
    1414:	2000070c 	.word	0x2000070c
    1418:	000061c5 	.word	0x000061c5
    141c:	2000078c 	.word	0x2000078c

00001420 <_ManageEthernetState>:
void _ManageEthernetState(void){
    1420:	b5f0      	push	{r4, r5, r6, r7, lr}
    1422:	46de      	mov	lr, fp
    1424:	4657      	mov	r7, sl
    1426:	464e      	mov	r6, r9
    1428:	b5c0      	push	{r6, r7, lr}
    142a:	b082      	sub	sp, #8
	Network_Manage();
    142c:	4b77      	ldr	r3, [pc, #476]	; (160c <_ManageEthernetState+0x1ec>)
    142e:	4798      	blx	r3
    switch (s_stEthernetInfo.eState) {
    1430:	4b77      	ldr	r3, [pc, #476]	; (1610 <_ManageEthernetState+0x1f0>)
    1432:	7c5b      	ldrb	r3, [r3, #17]
    1434:	2b01      	cmp	r3, #1
    1436:	d01b      	beq.n	1470 <_ManageEthernetState+0x50>
    1438:	2b00      	cmp	r3, #0
    143a:	d00b      	beq.n	1454 <_ManageEthernetState+0x34>
    143c:	2b02      	cmp	r3, #2
    143e:	d100      	bne.n	1442 <_ManageEthernetState+0x22>
    1440:	e09a      	b.n	1578 <_ManageEthernetState+0x158>
    1442:	2b03      	cmp	r3, #3
    1444:	d100      	bne.n	1448 <_ManageEthernetState+0x28>
    1446:	e0d2      	b.n	15ee <_ManageEthernetState+0x1ce>
}
    1448:	b002      	add	sp, #8
    144a:	bc1c      	pop	{r2, r3, r4}
    144c:	4691      	mov	r9, r2
    144e:	469a      	mov	sl, r3
    1450:	46a3      	mov	fp, r4
    1452:	bdf0      	pop	{r4, r5, r6, r7, pc}
            memset((uint8_t *)&s_stEthernetInfo, 0, sizeof(sEthernetInfo));
    1454:	4c6e      	ldr	r4, [pc, #440]	; (1610 <_ManageEthernetState+0x1f0>)
    1456:	0020      	movs	r0, r4
    1458:	3010      	adds	r0, #16
    145a:	2218      	movs	r2, #24
    145c:	2100      	movs	r1, #0
    145e:	4b6d      	ldr	r3, [pc, #436]	; (1614 <_ManageEthernetState+0x1f4>)
    1460:	4798      	blx	r3
            s_stEthernetInfo.eState = ETHERNET_STATE_NETWORK_CONFIG;
    1462:	2301      	movs	r3, #1
    1464:	7463      	strb	r3, [r4, #17]
            Timer_SetTimer(TIMER_ETH_CONNECION_TIMEOUT, 3);
    1466:	8820      	ldrh	r0, [r4, #0]
    1468:	2103      	movs	r1, #3
    146a:	4b6b      	ldr	r3, [pc, #428]	; (1618 <_ManageEthernetState+0x1f8>)
    146c:	4798      	blx	r3
            break;
    146e:	e7eb      	b.n	1448 <_ManageEthernetState+0x28>
            ip = IPV4_GetMyIP();	
    1470:	4b6a      	ldr	r3, [pc, #424]	; (161c <_ManageEthernetState+0x1fc>)
    1472:	4798      	blx	r3
            if (ip != s_stEthernetInfo.u32IpAddr) {
    1474:	4b66      	ldr	r3, [pc, #408]	; (1610 <_ManageEthernetState+0x1f0>)
    1476:	695b      	ldr	r3, [r3, #20]
    1478:	4298      	cmp	r0, r3
    147a:	d071      	beq.n	1560 <_ManageEthernetState+0x140>
				DEBUG_INFO("ETHERNET STATE CONFIG (IP CHANGED)");
    147c:	4868      	ldr	r0, [pc, #416]	; (1620 <_ManageEthernetState+0x200>)
    147e:	4f69      	ldr	r7, [pc, #420]	; (1624 <_ManageEthernetState+0x204>)
    1480:	47b8      	blx	r7
                DEBUG_INFO("IP Assigned. ");
    1482:	4869      	ldr	r0, [pc, #420]	; (1628 <_ManageEthernetState+0x208>)
    1484:	47b8      	blx	r7
                s_stEthernetInfo.u32IpAddr = ipv4Address;
    1486:	4c62      	ldr	r4, [pc, #392]	; (1610 <_ManageEthernetState+0x1f0>)
    1488:	4b68      	ldr	r3, [pc, #416]	; (162c <_ManageEthernetState+0x20c>)
    148a:	681b      	ldr	r3, [r3, #0]
    148c:	6163      	str	r3, [r4, #20]
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4Address, 4);
    148e:	0c18      	lsrs	r0, r3, #16
    1490:	0a1a      	lsrs	r2, r3, #8
    1492:	9301      	str	r3, [sp, #4]
                s_stEthernetInfo.au8IpAddr[0] = au8Tmp[3];
    1494:	0e19      	lsrs	r1, r3, #24
    1496:	7621      	strb	r1, [r4, #24]
                s_stEthernetInfo.au8IpAddr[1] = au8Tmp[2];
    1498:	7660      	strb	r0, [r4, #25]
                s_stEthernetInfo.au8IpAddr[2] = au8Tmp[1];
    149a:	76a2      	strb	r2, [r4, #26]
                s_stEthernetInfo.au8IpAddr[3] = au8Tmp[0];
    149c:	76e3      	strb	r3, [r4, #27]
				DEBUG_INFO("%u-", s_stEthernetInfo.au8IpAddr[0]);
    149e:	4d64      	ldr	r5, [pc, #400]	; (1630 <_ManageEthernetState+0x210>)
    14a0:	0028      	movs	r0, r5
    14a2:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8IpAddr[1]);
    14a4:	7e61      	ldrb	r1, [r4, #25]
    14a6:	0028      	movs	r0, r5
    14a8:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8IpAddr[2]);
    14aa:	7ea1      	ldrb	r1, [r4, #26]
    14ac:	0028      	movs	r0, r5
    14ae:	47b8      	blx	r7
				DEBUG_INFO("%u", s_stEthernetInfo.au8IpAddr[3]);
    14b0:	7ee1      	ldrb	r1, [r4, #27]
    14b2:	4860      	ldr	r0, [pc, #384]	; (1634 <_ManageEthernetState+0x214>)
    14b4:	47b8      	blx	r7
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4SubnetMask, 4);
    14b6:	4b60      	ldr	r3, [pc, #384]	; (1638 <_ManageEthernetState+0x218>)
    14b8:	681b      	ldr	r3, [r3, #0]
    14ba:	0c18      	lsrs	r0, r3, #16
    14bc:	0a1a      	lsrs	r2, r3, #8
    14be:	9301      	str	r3, [sp, #4]
                s_stEthernetInfo.au8SubnetMask[0] = au8Tmp[3];
    14c0:	0e19      	lsrs	r1, r3, #24
    14c2:	7721      	strb	r1, [r4, #28]
                s_stEthernetInfo.au8SubnetMask[1] = au8Tmp[2];
    14c4:	7760      	strb	r0, [r4, #29]
                s_stEthernetInfo.au8SubnetMask[2] = au8Tmp[1];
    14c6:	77a2      	strb	r2, [r4, #30]
                s_stEthernetInfo.au8SubnetMask[3] = au8Tmp[0];
    14c8:	77e3      	strb	r3, [r4, #31]
				DEBUG_INFO(",%u-", s_stEthernetInfo.au8SubnetMask[0]);
    14ca:	485c      	ldr	r0, [pc, #368]	; (163c <_ManageEthernetState+0x21c>)
    14cc:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8SubnetMask[1]);
    14ce:	7f61      	ldrb	r1, [r4, #29]
    14d0:	0028      	movs	r0, r5
    14d2:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8SubnetMask[2]);
    14d4:	7fa1      	ldrb	r1, [r4, #30]
    14d6:	0028      	movs	r0, r5
    14d8:	47b8      	blx	r7
				DEBUG_INFO("%u", s_stEthernetInfo.au8SubnetMask[3]);
    14da:	7fe1      	ldrb	r1, [r4, #31]
    14dc:	4855      	ldr	r0, [pc, #340]	; (1634 <_ManageEthernetState+0x214>)
    14de:	47b8      	blx	r7
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4Router, 4);
    14e0:	4b57      	ldr	r3, [pc, #348]	; (1640 <_ManageEthernetState+0x220>)
    14e2:	681b      	ldr	r3, [r3, #0]
    14e4:	0c18      	lsrs	r0, r3, #16
    14e6:	0a1a      	lsrs	r2, r3, #8
    14e8:	9301      	str	r3, [sp, #4]
                s_stEthernetInfo.au8Gateway[0] = au8Tmp[3];
    14ea:	0e19      	lsrs	r1, r3, #24
    14ec:	2620      	movs	r6, #32
    14ee:	55a1      	strb	r1, [r4, r6]
                s_stEthernetInfo.au8Gateway[1] = au8Tmp[2];
    14f0:	3601      	adds	r6, #1
    14f2:	55a0      	strb	r0, [r4, r6]
                s_stEthernetInfo.au8Gateway[2] = au8Tmp[1];
    14f4:	2022      	movs	r0, #34	; 0x22
    14f6:	4682      	mov	sl, r0
    14f8:	5422      	strb	r2, [r4, r0]
                s_stEthernetInfo.au8Gateway[3] = au8Tmp[0];
    14fa:	2223      	movs	r2, #35	; 0x23
    14fc:	4691      	mov	r9, r2
    14fe:	54a3      	strb	r3, [r4, r2]
				DEBUG_INFO(",%u-", s_stEthernetInfo.au8Gateway[0]);
    1500:	484e      	ldr	r0, [pc, #312]	; (163c <_ManageEthernetState+0x21c>)
    1502:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8Gateway[1]);
    1504:	5da1      	ldrb	r1, [r4, r6]
    1506:	0028      	movs	r0, r5
    1508:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8Gateway[2]);
    150a:	4653      	mov	r3, sl
    150c:	5ce1      	ldrb	r1, [r4, r3]
    150e:	0028      	movs	r0, r5
    1510:	47b8      	blx	r7
				DEBUG_INFO("%u", s_stEthernetInfo.au8Gateway[3]);
    1512:	464b      	mov	r3, r9
    1514:	5ce1      	ldrb	r1, [r4, r3]
    1516:	4847      	ldr	r0, [pc, #284]	; (1634 <_ManageEthernetState+0x214>)
    1518:	47b8      	blx	r7
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4DNS, 4);
    151a:	4b4a      	ldr	r3, [pc, #296]	; (1644 <_ManageEthernetState+0x224>)
    151c:	681b      	ldr	r3, [r3, #0]
    151e:	0c18      	lsrs	r0, r3, #16
    1520:	0a1a      	lsrs	r2, r3, #8
    1522:	9301      	str	r3, [sp, #4]
                s_stEthernetInfo.au8Dns[0] = au8Tmp[3];
    1524:	0e19      	lsrs	r1, r3, #24
    1526:	3603      	adds	r6, #3
    1528:	55a1      	strb	r1, [r4, r6]
                s_stEthernetInfo.au8Dns[1] = au8Tmp[2];
    152a:	3601      	adds	r6, #1
    152c:	55a0      	strb	r0, [r4, r6]
                s_stEthernetInfo.au8Dns[2] = au8Tmp[1];
    152e:	2026      	movs	r0, #38	; 0x26
    1530:	4682      	mov	sl, r0
    1532:	5422      	strb	r2, [r4, r0]
                s_stEthernetInfo.au8Dns[3] = au8Tmp[0];
    1534:	2227      	movs	r2, #39	; 0x27
    1536:	4691      	mov	r9, r2
    1538:	54a3      	strb	r3, [r4, r2]
				DEBUG_INFO(",%u-", s_stEthernetInfo.au8Dns[0]);
    153a:	4840      	ldr	r0, [pc, #256]	; (163c <_ManageEthernetState+0x21c>)
    153c:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8Dns[1]);
    153e:	5da1      	ldrb	r1, [r4, r6]
    1540:	0028      	movs	r0, r5
    1542:	47b8      	blx	r7
				DEBUG_INFO("%u-", s_stEthernetInfo.au8Dns[2]);
    1544:	4653      	mov	r3, sl
    1546:	5ce1      	ldrb	r1, [r4, r3]
    1548:	0028      	movs	r0, r5
    154a:	47b8      	blx	r7
				DEBUG_INFO("%u", s_stEthernetInfo.au8Dns[3]);
    154c:	464b      	mov	r3, r9
    154e:	5ce1      	ldrb	r1, [r4, r3]
    1550:	4838      	ldr	r0, [pc, #224]	; (1634 <_ManageEthernetState+0x214>)
    1552:	47b8      	blx	r7
                _InitEthernetSockets();
    1554:	4b3c      	ldr	r3, [pc, #240]	; (1648 <_ManageEthernetState+0x228>)
    1556:	4798      	blx	r3
                s_stEthernetInfo.fConnected = true;
    1558:	2301      	movs	r3, #1
    155a:	7423      	strb	r3, [r4, #16]
                s_stEthernetInfo.eState = ETHERNET_STATE_IDLE;
    155c:	3301      	adds	r3, #1
    155e:	7463      	strb	r3, [r4, #17]
            if (Timer_GetTimer(TIMER_ETH_CONNECION_TIMEOUT)==0) {
    1560:	4b2b      	ldr	r3, [pc, #172]	; (1610 <_ManageEthernetState+0x1f0>)
    1562:	8818      	ldrh	r0, [r3, #0]
    1564:	4b39      	ldr	r3, [pc, #228]	; (164c <_ManageEthernetState+0x22c>)
    1566:	4798      	blx	r3
    1568:	2800      	cmp	r0, #0
    156a:	d000      	beq.n	156e <_ManageEthernetState+0x14e>
    156c:	e76c      	b.n	1448 <_ManageEthernetState+0x28>
                s_stEthernetInfo.fConnected = false;
    156e:	4b28      	ldr	r3, [pc, #160]	; (1610 <_ManageEthernetState+0x1f0>)
    1570:	2200      	movs	r2, #0
    1572:	741a      	strb	r2, [r3, #16]
                s_stEthernetInfo.eState = ETHERNET_STATE_INITIALIZE;
    1574:	745a      	strb	r2, [r3, #17]
    1576:	e767      	b.n	1448 <_ManageEthernetState+0x28>
            ip = IPV4_GetMyIP();
    1578:	4b28      	ldr	r3, [pc, #160]	; (161c <_ManageEthernetState+0x1fc>)
    157a:	4798      	blx	r3
            if (ip != s_stEthernetInfo.u32IpAddr) {
    157c:	4b24      	ldr	r3, [pc, #144]	; (1610 <_ManageEthernetState+0x1f0>)
    157e:	695b      	ldr	r3, [r3, #20]
    1580:	4298      	cmp	r0, r3
    1582:	d100      	bne.n	1586 <_ManageEthernetState+0x166>
    1584:	e760      	b.n	1448 <_ManageEthernetState+0x28>
				DEBUG_INFO("ETHERNET STATE IDLE (IP CHANGED)");
    1586:	4832      	ldr	r0, [pc, #200]	; (1650 <_ManageEthernetState+0x230>)
    1588:	4c26      	ldr	r4, [pc, #152]	; (1624 <_ManageEthernetState+0x204>)
    158a:	47a0      	blx	r4
                DEBUG_INFO("IP address changed. ");
    158c:	4831      	ldr	r0, [pc, #196]	; (1654 <_ManageEthernetState+0x234>)
    158e:	47a0      	blx	r4
                s_stEthernetInfo.u32IpAddr = ipv4Address;
    1590:	4b1f      	ldr	r3, [pc, #124]	; (1610 <_ManageEthernetState+0x1f0>)
    1592:	4a26      	ldr	r2, [pc, #152]	; (162c <_ManageEthernetState+0x20c>)
    1594:	6812      	ldr	r2, [r2, #0]
    1596:	615a      	str	r2, [r3, #20]
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4Address, 4);
    1598:	0c10      	lsrs	r0, r2, #16
    159a:	0a11      	lsrs	r1, r2, #8
                s_stEthernetInfo.au8IpAddr[0] = au8Tmp[3];
    159c:	0e14      	lsrs	r4, r2, #24
    159e:	761c      	strb	r4, [r3, #24]
                s_stEthernetInfo.au8IpAddr[1] = au8Tmp[2];
    15a0:	7658      	strb	r0, [r3, #25]
                s_stEthernetInfo.au8IpAddr[2] = au8Tmp[1];
    15a2:	7699      	strb	r1, [r3, #26]
                s_stEthernetInfo.au8IpAddr[3] = au8Tmp[0];
    15a4:	76da      	strb	r2, [r3, #27]
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4SubnetMask, 4);
    15a6:	4a24      	ldr	r2, [pc, #144]	; (1638 <_ManageEthernetState+0x218>)
    15a8:	6812      	ldr	r2, [r2, #0]
    15aa:	0c10      	lsrs	r0, r2, #16
    15ac:	0a11      	lsrs	r1, r2, #8
                s_stEthernetInfo.au8SubnetMask[0] = au8Tmp[3];
    15ae:	0e14      	lsrs	r4, r2, #24
    15b0:	771c      	strb	r4, [r3, #28]
                s_stEthernetInfo.au8SubnetMask[1] = au8Tmp[2];
    15b2:	7758      	strb	r0, [r3, #29]
                s_stEthernetInfo.au8SubnetMask[2] = au8Tmp[1];
    15b4:	7799      	strb	r1, [r3, #30]
                s_stEthernetInfo.au8SubnetMask[3] = au8Tmp[0];
    15b6:	77da      	strb	r2, [r3, #31]
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4Router, 4);
    15b8:	4a21      	ldr	r2, [pc, #132]	; (1640 <_ManageEthernetState+0x220>)
    15ba:	6812      	ldr	r2, [r2, #0]
    15bc:	0c14      	lsrs	r4, r2, #16
    15be:	0a10      	lsrs	r0, r2, #8
                s_stEthernetInfo.au8Gateway[0] = au8Tmp[3];
    15c0:	0e15      	lsrs	r5, r2, #24
    15c2:	2120      	movs	r1, #32
    15c4:	545d      	strb	r5, [r3, r1]
                s_stEthernetInfo.au8Gateway[1] = au8Tmp[2];
    15c6:	3101      	adds	r1, #1
    15c8:	545c      	strb	r4, [r3, r1]
                s_stEthernetInfo.au8Gateway[2] = au8Tmp[1];
    15ca:	3101      	adds	r1, #1
    15cc:	5458      	strb	r0, [r3, r1]
                s_stEthernetInfo.au8Gateway[3] = au8Tmp[0];
    15ce:	3101      	adds	r1, #1
    15d0:	545a      	strb	r2, [r3, r1]
                memcpy(&au8Tmp[0], (uint8_t*)&ipv4DNS, 4);
    15d2:	4a1c      	ldr	r2, [pc, #112]	; (1644 <_ManageEthernetState+0x224>)
    15d4:	6812      	ldr	r2, [r2, #0]
    15d6:	0c14      	lsrs	r4, r2, #16
    15d8:	0a10      	lsrs	r0, r2, #8
                s_stEthernetInfo.au8Dns[0] = au8Tmp[3];
    15da:	0e15      	lsrs	r5, r2, #24
    15dc:	3101      	adds	r1, #1
    15de:	545d      	strb	r5, [r3, r1]
                s_stEthernetInfo.au8Dns[1] = au8Tmp[2];
    15e0:	3101      	adds	r1, #1
    15e2:	545c      	strb	r4, [r3, r1]
                s_stEthernetInfo.au8Dns[2] = au8Tmp[1];
    15e4:	3101      	adds	r1, #1
    15e6:	5458      	strb	r0, [r3, r1]
                s_stEthernetInfo.au8Dns[3] = au8Tmp[0];
    15e8:	3101      	adds	r1, #1
    15ea:	545a      	strb	r2, [r3, r1]
    15ec:	e72c      	b.n	1448 <_ManageEthernetState+0x28>
			DEBUG_INFO("ETHERNET STATE ERROR");
    15ee:	481a      	ldr	r0, [pc, #104]	; (1658 <_ManageEthernetState+0x238>)
    15f0:	4b0c      	ldr	r3, [pc, #48]	; (1624 <_ManageEthernetState+0x204>)
    15f2:	4798      	blx	r3
            s_stEthernetInfo.u32IpAddr = 0;
    15f4:	4c06      	ldr	r4, [pc, #24]	; (1610 <_ManageEthernetState+0x1f0>)
    15f6:	2500      	movs	r5, #0
    15f8:	6165      	str	r5, [r4, #20]
            memset(&s_stEthernetInfo.au8IpAddr[0], 0, 4);
    15fa:	61a5      	str	r5, [r4, #24]
            memset(&s_stEthernetInfo.au8SubnetMask[0], 0, 4);
    15fc:	61e5      	str	r5, [r4, #28]
            memset(&s_stEthernetInfo.au8Gateway[0], 0, 4);
    15fe:	6225      	str	r5, [r4, #32]
            memset(&s_stEthernetInfo.au8Dns[0], 0, 4);
    1600:	6265      	str	r5, [r4, #36]	; 0x24
			_DeinitEthernetSockets();
    1602:	4b16      	ldr	r3, [pc, #88]	; (165c <_ManageEthernetState+0x23c>)
    1604:	4798      	blx	r3
            s_stEthernetInfo.fConnected = false;
    1606:	7425      	strb	r5, [r4, #16]
            s_stEthernetInfo.eState = ETHERNET_STATE_INITIALIZE;
    1608:	7465      	strb	r5, [r4, #17]
}
    160a:	e71d      	b.n	1448 <_ManageEthernetState+0x28>
    160c:	00005399 	.word	0x00005399
    1610:	2000060c 	.word	0x2000060c
    1614:	0000777d 	.word	0x0000777d
    1618:	00001d31 	.word	0x00001d31
    161c:	00005291 	.word	0x00005291
    1620:	000087b4 	.word	0x000087b4
    1624:	00000891 	.word	0x00000891
    1628:	000087d8 	.word	0x000087d8
    162c:	20004094 	.word	0x20004094
    1630:	000085e8 	.word	0x000085e8
    1634:	00008694 	.word	0x00008694
    1638:	2000407c 	.word	0x2000407c
    163c:	000087e8 	.word	0x000087e8
    1640:	20004074 	.word	0x20004074
    1644:	20004098 	.word	0x20004098
    1648:	00000e41 	.word	0x00000e41
    164c:	00001d3d 	.word	0x00001d3d
    1650:	000087f0 	.word	0x000087f0
    1654:	00008814 	.word	0x00008814
    1658:	0000882c 	.word	0x0000882c
    165c:	000013ed 	.word	0x000013ed

00001660 <Ethernet_PumpEvents>:
void Ethernet_PumpEvents(void) {
    1660:	b510      	push	{r4, lr}
    if (s_fLinkUp==false) {
    1662:	4b2a      	ldr	r3, [pc, #168]	; (170c <Ethernet_PumpEvents+0xac>)
    1664:	7b9b      	ldrb	r3, [r3, #14]
    1666:	2b00      	cmp	r3, #0
    1668:	d106      	bne.n	1678 <Ethernet_PumpEvents+0x18>
        if (Ethernet_HasLink()==false) {
    166a:	4b29      	ldr	r3, [pc, #164]	; (1710 <Ethernet_PumpEvents+0xb0>)
    166c:	4798      	blx	r3
    166e:	2800      	cmp	r0, #0
    1670:	d014      	beq.n	169c <Ethernet_PumpEvents+0x3c>
            s_fLinkUp = true;
    1672:	2201      	movs	r2, #1
    1674:	4b25      	ldr	r3, [pc, #148]	; (170c <Ethernet_PumpEvents+0xac>)
    1676:	739a      	strb	r2, [r3, #14]
    _ManageEthernetState();
    1678:	4b26      	ldr	r3, [pc, #152]	; (1714 <Ethernet_PumpEvents+0xb4>)
    167a:	4798      	blx	r3
    if (s_u16EthernetRemainingLocalBytes==0) {
    167c:	4b23      	ldr	r3, [pc, #140]	; (170c <Ethernet_PumpEvents+0xac>)
    167e:	899b      	ldrh	r3, [r3, #12]
    1680:	2b00      	cmp	r3, #0
    1682:	d00f      	beq.n	16a4 <Ethernet_PumpEvents+0x44>
    _ManageEthernetDnsState();
    1684:	4b24      	ldr	r3, [pc, #144]	; (1718 <Ethernet_PumpEvents+0xb8>)
    1686:	4798      	blx	r3
    if (s_fEthernetServerCommEstablished==true) {
    1688:	2349      	movs	r3, #73	; 0x49
    168a:	4a24      	ldr	r2, [pc, #144]	; (171c <Ethernet_PumpEvents+0xbc>)
    168c:	5cd3      	ldrb	r3, [r2, r3]
    168e:	2b00      	cmp	r3, #0
    1690:	d10b      	bne.n	16aa <Ethernet_PumpEvents+0x4a>
    if (s_fEthernetServerCommLost==true) {
    1692:	4b1e      	ldr	r3, [pc, #120]	; (170c <Ethernet_PumpEvents+0xac>)
    1694:	7bdb      	ldrb	r3, [r3, #15]
    1696:	2b00      	cmp	r3, #0
    1698:	d132      	bne.n	1700 <Ethernet_PumpEvents+0xa0>
}
    169a:	bd10      	pop	{r4, pc}
            App_SetStatus(STATUS_NO_SERVER_COMM);
    169c:	3002      	adds	r0, #2
    169e:	4b20      	ldr	r3, [pc, #128]	; (1720 <Ethernet_PumpEvents+0xc0>)
    16a0:	4798      	blx	r3
            return;
    16a2:	e7fa      	b.n	169a <Ethernet_PumpEvents+0x3a>
        _ManageEthernetRemoteSocketState();
    16a4:	4b1f      	ldr	r3, [pc, #124]	; (1724 <Ethernet_PumpEvents+0xc4>)
    16a6:	4798      	blx	r3
    16a8:	e7ec      	b.n	1684 <Ethernet_PumpEvents+0x24>
        if (Timer_GetTimer(TIMER_ETH_SERVER_LOST_COMM)==0) {
    16aa:	8890      	ldrh	r0, [r2, #4]
    16ac:	4b1e      	ldr	r3, [pc, #120]	; (1728 <Ethernet_PumpEvents+0xc8>)
    16ae:	4798      	blx	r3
    16b0:	2800      	cmp	r0, #0
    16b2:	d11e      	bne.n	16f2 <Ethernet_PumpEvents+0x92>
            DEBUG_INFO("Server not responding. ");
    16b4:	481d      	ldr	r0, [pc, #116]	; (172c <Ethernet_PumpEvents+0xcc>)
    16b6:	4b1e      	ldr	r3, [pc, #120]	; (1730 <Ethernet_PumpEvents+0xd0>)
    16b8:	4798      	blx	r3
            App_SetStatus(STATUS_NO_SERVER_COMM);
    16ba:	2002      	movs	r0, #2
    16bc:	4b18      	ldr	r3, [pc, #96]	; (1720 <Ethernet_PumpEvents+0xc0>)
    16be:	4798      	blx	r3
            s_fEthernetServerCommEstablished = false;
    16c0:	2100      	movs	r1, #0
    16c2:	2349      	movs	r3, #73	; 0x49
    16c4:	4a15      	ldr	r2, [pc, #84]	; (171c <Ethernet_PumpEvents+0xbc>)
    16c6:	54d1      	strb	r1, [r2, r3]
            s_fEthernetServerCommLost = true;
    16c8:	4a10      	ldr	r2, [pc, #64]	; (170c <Ethernet_PumpEvents+0xac>)
    16ca:	3b48      	subs	r3, #72	; 0x48
    16cc:	73d3      	strb	r3, [r2, #15]
            s_u8EthernetHostIdx++; // alt1, alt2, primary, failsafe
    16ce:	7c13      	ldrb	r3, [r2, #16]
    16d0:	3301      	adds	r3, #1
    16d2:	b2db      	uxtb	r3, r3
    16d4:	7413      	strb	r3, [r2, #16]
            if (s_u8EthernetHostIdx>=4) s_u8EthernetHostIdx=0;
    16d6:	2b03      	cmp	r3, #3
    16d8:	d902      	bls.n	16e0 <Ethernet_PumpEvents+0x80>
    16da:	2200      	movs	r2, #0
    16dc:	4b0b      	ldr	r3, [pc, #44]	; (170c <Ethernet_PumpEvents+0xac>)
    16de:	741a      	strb	r2, [r3, #16]
            s_stEthernetInfo.eState = ETHERNET_STATE_ERROR;
    16e0:	4b0e      	ldr	r3, [pc, #56]	; (171c <Ethernet_PumpEvents+0xbc>)
    16e2:	2203      	movs	r2, #3
    16e4:	745a      	strb	r2, [r3, #17]
            Timer_SetTimer(TIMER_ETH_SERVER_ESTABLISH_COMM, TIMEOUT_ESTABLISH_COMM); // 10 minutes before we try a soft reset
    16e6:	88d8      	ldrh	r0, [r3, #6]
    16e8:	2196      	movs	r1, #150	; 0x96
    16ea:	0089      	lsls	r1, r1, #2
    16ec:	4b11      	ldr	r3, [pc, #68]	; (1734 <Ethernet_PumpEvents+0xd4>)
    16ee:	4798      	blx	r3
    16f0:	e7cf      	b.n	1692 <Ethernet_PumpEvents+0x32>
            App_SetStatus(STATUS_OK);
    16f2:	2001      	movs	r0, #1
    16f4:	4b0a      	ldr	r3, [pc, #40]	; (1720 <Ethernet_PumpEvents+0xc0>)
    16f6:	4798      	blx	r3
            s_fEthernetServerCommLost = false;
    16f8:	2200      	movs	r2, #0
    16fa:	4b04      	ldr	r3, [pc, #16]	; (170c <Ethernet_PumpEvents+0xac>)
    16fc:	73da      	strb	r2, [r3, #15]
    16fe:	e7c8      	b.n	1692 <Ethernet_PumpEvents+0x32>
        if (Timer_GetTimer(TIMER_ETH_SERVER_ESTABLISH_COMM)==0){
    1700:	4b06      	ldr	r3, [pc, #24]	; (171c <Ethernet_PumpEvents+0xbc>)
    1702:	88d8      	ldrh	r0, [r3, #6]
    1704:	4b08      	ldr	r3, [pc, #32]	; (1728 <Ethernet_PumpEvents+0xc8>)
    1706:	4798      	blx	r3
    1708:	e7c7      	b.n	169a <Ethernet_PumpEvents+0x3a>
    170a:	46c0      	nop			; (mov r8, r8)
    170c:	2000078c 	.word	0x2000078c
    1710:	00000c35 	.word	0x00000c35
    1714:	00001421 	.word	0x00001421
    1718:	00000cb9 	.word	0x00000cb9
    171c:	2000060c 	.word	0x2000060c
    1720:	00000151 	.word	0x00000151
    1724:	00000f2d 	.word	0x00000f2d
    1728:	00001d3d 	.word	0x00001d3d
    172c:	00008844 	.word	0x00008844
    1730:	00000891 	.word	0x00000891
    1734:	00001d31 	.word	0x00001d31

00001738 <_DnsDiscardName>:

DoneSearchingRecords:
    s_eEthernetDnsState = DNS_STATE_DONE;
}

void _DnsDiscardName(void) {
    1738:	b510      	push	{r4, lr}
    173a:	e009      	b.n	1750 <_DnsDiscardName+0x18>

    while (1) {
        // Get first byte which will tell us if this is a 16-bit pointer or the length of a label
        u8Byte = UDP_Read8();
        if ((u8Byte & 0xC0u) == 0xC0u) {
            u8Byte = UDP_Read8();
    173c:	4b0a      	ldr	r3, [pc, #40]	; (1768 <_DnsDiscardName+0x30>)
    173e:	4798      	blx	r3
        // Discard complete label
        while (u8Byte--) {
            UDP_Read8();
        }
    }
}
    1740:	bd10      	pop	{r4, pc}
            UDP_Read8();
    1742:	4b09      	ldr	r3, [pc, #36]	; (1768 <_DnsDiscardName+0x30>)
    1744:	4798      	blx	r3
        while (u8Byte--) {
    1746:	0022      	movs	r2, r4
    1748:	1e54      	subs	r4, r2, #1
    174a:	b2e4      	uxtb	r4, r4
    174c:	2a00      	cmp	r2, #0
    174e:	d1f8      	bne.n	1742 <_DnsDiscardName+0xa>
        u8Byte = UDP_Read8();
    1750:	4b05      	ldr	r3, [pc, #20]	; (1768 <_DnsDiscardName+0x30>)
    1752:	4798      	blx	r3
    1754:	0002      	movs	r2, r0
        if ((u8Byte & 0xC0u) == 0xC0u) {
    1756:	233f      	movs	r3, #63	; 0x3f
    1758:	4398      	bics	r0, r3
    175a:	b2c0      	uxtb	r0, r0
    175c:	28c0      	cmp	r0, #192	; 0xc0
    175e:	d0ed      	beq.n	173c <_DnsDiscardName+0x4>
        if (u8Byte == 0u) return;
    1760:	2a00      	cmp	r2, #0
    1762:	d1f1      	bne.n	1748 <_DnsDiscardName+0x10>
    1764:	e7ec      	b.n	1740 <_DnsDiscardName+0x8>
    1766:	46c0      	nop			; (mov r8, r8)
    1768:	0000418d 	.word	0x0000418d

0000176c <DNS_Handler>:
{
    176c:	b530      	push	{r4, r5, lr}
    176e:	b087      	sub	sp, #28
    DEBUG_INFO("Process DNS query response. ");
    1770:	4851      	ldr	r0, [pc, #324]	; (18b8 <DNS_Handler+0x14c>)
    1772:	4b52      	ldr	r3, [pc, #328]	; (18bc <DNS_Handler+0x150>)
    1774:	4798      	blx	r3
    stDnsHeader.u16TransactionID = UDP_Read16();
    1776:	4b52      	ldr	r3, [pc, #328]	; (18c0 <DNS_Handler+0x154>)
    1778:	4798      	blx	r3
    if (stDnsHeader.u16TransactionID!=s_u16TransactionID) {
    177a:	4b52      	ldr	r3, [pc, #328]	; (18c4 <DNS_Handler+0x158>)
    177c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    177e:	4298      	cmp	r0, r3
    1780:	d004      	beq.n	178c <DNS_Handler+0x20>
        DEBUG_INFO("Unexpected transaction ID. ");
    1782:	4851      	ldr	r0, [pc, #324]	; (18c8 <DNS_Handler+0x15c>)
    1784:	4b4d      	ldr	r3, [pc, #308]	; (18bc <DNS_Handler+0x150>)
    1786:	4798      	blx	r3
}
    1788:	b007      	add	sp, #28
    178a:	bd30      	pop	{r4, r5, pc}
    stDnsHeader.u16Flags = UDP_Read16();
    178c:	4c4c      	ldr	r4, [pc, #304]	; (18c0 <DNS_Handler+0x154>)
    178e:	47a0      	blx	r4
    stDnsHeader.u16Questions = UDP_Read16();
    1790:	47a0      	blx	r4
    1792:	ad03      	add	r5, sp, #12
    1794:	80a8      	strh	r0, [r5, #4]
    stDnsHeader.u16Answers = UDP_Read16();
    1796:	47a0      	blx	r4
    1798:	80e8      	strh	r0, [r5, #6]
    stDnsHeader.u16AuthoritativeRecords = UDP_Read16();
    179a:	47a0      	blx	r4
    179c:	8128      	strh	r0, [r5, #8]
    stDnsHeader.u16AdditionalRecords = UDP_Read16();
    179e:	47a0      	blx	r4
    17a0:	8168      	strh	r0, [r5, #10]
    while(stDnsHeader.u16Questions--) {
    17a2:	aa03      	add	r2, sp, #12
    17a4:	8893      	ldrh	r3, [r2, #4]
    17a6:	1e59      	subs	r1, r3, #1
    17a8:	8091      	strh	r1, [r2, #4]
    17aa:	2b00      	cmp	r3, #0
    17ac:	d00e      	beq.n	17cc <DNS_Handler+0x60>
        _DnsDiscardName(); // Throw away response name
    17ae:	4b47      	ldr	r3, [pc, #284]	; (18cc <DNS_Handler+0x160>)
    17b0:	4798      	blx	r3
        UDP_Read16(); // Question type
    17b2:	4c43      	ldr	r4, [pc, #268]	; (18c0 <DNS_Handler+0x154>)
    17b4:	47a0      	blx	r4
        UDP_Read16(); // Question class
    17b6:	47a0      	blx	r4
    17b8:	e7f3      	b.n	17a2 <DNS_Handler+0x36>
                UDP_Read8();
    17ba:	4b45      	ldr	r3, [pc, #276]	; (18d0 <DNS_Handler+0x164>)
    17bc:	4798      	blx	r3
            while(stDnsAnswerHeader.u16ResponseLen--) {
    17be:	466b      	mov	r3, sp
    17c0:	891b      	ldrh	r3, [r3, #8]
    17c2:	1e5a      	subs	r2, r3, #1
    17c4:	4669      	mov	r1, sp
    17c6:	810a      	strh	r2, [r1, #8]
    17c8:	2b00      	cmp	r3, #0
    17ca:	d1f6      	bne.n	17ba <DNS_Handler+0x4e>
    while(stDnsHeader.u16Answers--) {
    17cc:	aa03      	add	r2, sp, #12
    17ce:	88d3      	ldrh	r3, [r2, #6]
    17d0:	1e59      	subs	r1, r3, #1
    17d2:	80d1      	strh	r1, [r2, #6]
    17d4:	2b00      	cmp	r3, #0
    17d6:	d026      	beq.n	1826 <DNS_Handler+0xba>
        _DnsDiscardName(); // Throw away response name
    17d8:	4b3c      	ldr	r3, [pc, #240]	; (18cc <DNS_Handler+0x160>)
    17da:	4798      	blx	r3
        stDnsAnswerHeader.u16ResponseType = UDP_Read16(); // Response type
    17dc:	4c38      	ldr	r4, [pc, #224]	; (18c0 <DNS_Handler+0x154>)
    17de:	47a0      	blx	r4
    17e0:	466b      	mov	r3, sp
    17e2:	8018      	strh	r0, [r3, #0]
        stDnsAnswerHeader.u16ResponseClass = UDP_Read16(); // Response class
    17e4:	47a0      	blx	r4
    17e6:	466b      	mov	r3, sp
    17e8:	8058      	strh	r0, [r3, #2]
        stDnsAnswerHeader.u32ResponseTTL = UDP_Read32(); // Time to live
    17ea:	4b3a      	ldr	r3, [pc, #232]	; (18d4 <DNS_Handler+0x168>)
    17ec:	4798      	blx	r3
        stDnsAnswerHeader.u16ResponseLen = UDP_Read16(); // Response length
    17ee:	47a0      	blx	r4
    17f0:	466b      	mov	r3, sp
    17f2:	8118      	strh	r0, [r3, #8]
        if (stDnsAnswerHeader.u16ResponseType == 0x0001u && stDnsAnswerHeader.u16ResponseClass == 0x0001u && stDnsAnswerHeader.u16ResponseLen == 0x0004u) {
    17f4:	4b38      	ldr	r3, [pc, #224]	; (18d8 <DNS_Handler+0x16c>)
    17f6:	9900      	ldr	r1, [sp, #0]
    17f8:	4299      	cmp	r1, r3
    17fa:	d1e0      	bne.n	17be <DNS_Handler+0x52>
    17fc:	2804      	cmp	r0, #4
    17fe:	d1de      	bne.n	17be <DNS_Handler+0x52>
            *s_pu32LookupHostIp = UDP_Read32();
    1800:	4b30      	ldr	r3, [pc, #192]	; (18c4 <DNS_Handler+0x158>)
    1802:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    1804:	4b33      	ldr	r3, [pc, #204]	; (18d4 <DNS_Handler+0x168>)
    1806:	4798      	blx	r3
    1808:	6020      	str	r0, [r4, #0]
    s_eEthernetDnsState = DNS_STATE_DONE;
    180a:	2106      	movs	r1, #6
    180c:	232c      	movs	r3, #44	; 0x2c
    180e:	4a2d      	ldr	r2, [pc, #180]	; (18c4 <DNS_Handler+0x158>)
    1810:	54d1      	strb	r1, [r2, r3]
    1812:	e7b9      	b.n	1788 <DNS_Handler+0x1c>
                UDP_Read8();
    1814:	4b2e      	ldr	r3, [pc, #184]	; (18d0 <DNS_Handler+0x164>)
    1816:	4798      	blx	r3
            while(stDnsAnswerHeader.u16ResponseLen--) {
    1818:	466b      	mov	r3, sp
    181a:	891b      	ldrh	r3, [r3, #8]
    181c:	1e5a      	subs	r2, r3, #1
    181e:	4669      	mov	r1, sp
    1820:	810a      	strh	r2, [r1, #8]
    1822:	2b00      	cmp	r3, #0
    1824:	d1f6      	bne.n	1814 <DNS_Handler+0xa8>
    while(stDnsHeader.u16AuthoritativeRecords--) {
    1826:	aa03      	add	r2, sp, #12
    1828:	8913      	ldrh	r3, [r2, #8]
    182a:	1e59      	subs	r1, r3, #1
    182c:	8111      	strh	r1, [r2, #8]
    182e:	2b00      	cmp	r3, #0
    1830:	d022      	beq.n	1878 <DNS_Handler+0x10c>
        _DnsDiscardName(); // Throw away response name
    1832:	4b26      	ldr	r3, [pc, #152]	; (18cc <DNS_Handler+0x160>)
    1834:	4798      	blx	r3
        stDnsAnswerHeader.u16ResponseType = UDP_Read16(); // Response type
    1836:	4c22      	ldr	r4, [pc, #136]	; (18c0 <DNS_Handler+0x154>)
    1838:	47a0      	blx	r4
    183a:	466b      	mov	r3, sp
    183c:	8018      	strh	r0, [r3, #0]
        stDnsAnswerHeader.u16ResponseClass = UDP_Read16(); // Response class
    183e:	47a0      	blx	r4
    1840:	466b      	mov	r3, sp
    1842:	8058      	strh	r0, [r3, #2]
        stDnsAnswerHeader.u32ResponseTTL = UDP_Read32(); // Time to live
    1844:	4b23      	ldr	r3, [pc, #140]	; (18d4 <DNS_Handler+0x168>)
    1846:	4798      	blx	r3
        stDnsAnswerHeader.u16ResponseLen = UDP_Read16(); // Response length
    1848:	47a0      	blx	r4
    184a:	466b      	mov	r3, sp
    184c:	8118      	strh	r0, [r3, #8]
        if (stDnsAnswerHeader.u16ResponseType == 0x0001u && stDnsAnswerHeader.u16ResponseClass == 0x0001u && stDnsAnswerHeader.u16ResponseLen == 0x0004u) {
    184e:	4b22      	ldr	r3, [pc, #136]	; (18d8 <DNS_Handler+0x16c>)
    1850:	9900      	ldr	r1, [sp, #0]
    1852:	4299      	cmp	r1, r3
    1854:	d1e0      	bne.n	1818 <DNS_Handler+0xac>
    1856:	2804      	cmp	r0, #4
    1858:	d1de      	bne.n	1818 <DNS_Handler+0xac>
            *s_pu32LookupHostIp = UDP_Read32();
    185a:	4b1a      	ldr	r3, [pc, #104]	; (18c4 <DNS_Handler+0x158>)
    185c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    185e:	4b1d      	ldr	r3, [pc, #116]	; (18d4 <DNS_Handler+0x168>)
    1860:	4798      	blx	r3
    1862:	6020      	str	r0, [r4, #0]
            goto DoneSearchingRecords;
    1864:	e7d1      	b.n	180a <DNS_Handler+0x9e>
                UDP_Read8();
    1866:	4b1a      	ldr	r3, [pc, #104]	; (18d0 <DNS_Handler+0x164>)
    1868:	4798      	blx	r3
            while(stDnsAnswerHeader.u16ResponseLen--) {
    186a:	466b      	mov	r3, sp
    186c:	891b      	ldrh	r3, [r3, #8]
    186e:	1e5a      	subs	r2, r3, #1
    1870:	4669      	mov	r1, sp
    1872:	810a      	strh	r2, [r1, #8]
    1874:	2b00      	cmp	r3, #0
    1876:	d1f6      	bne.n	1866 <DNS_Handler+0xfa>
    while(stDnsHeader.u16AdditionalRecords--) {
    1878:	aa03      	add	r2, sp, #12
    187a:	8953      	ldrh	r3, [r2, #10]
    187c:	1e59      	subs	r1, r3, #1
    187e:	8151      	strh	r1, [r2, #10]
    1880:	2b00      	cmp	r3, #0
    1882:	d0c2      	beq.n	180a <DNS_Handler+0x9e>
        _DnsDiscardName(); // Throw away response name
    1884:	4b11      	ldr	r3, [pc, #68]	; (18cc <DNS_Handler+0x160>)
    1886:	4798      	blx	r3
        stDnsAnswerHeader.u16ResponseType = UDP_Read16(); // Response type
    1888:	4c0d      	ldr	r4, [pc, #52]	; (18c0 <DNS_Handler+0x154>)
    188a:	47a0      	blx	r4
    188c:	466b      	mov	r3, sp
    188e:	8018      	strh	r0, [r3, #0]
        stDnsAnswerHeader.u16ResponseClass = UDP_Read16(); // Response class
    1890:	47a0      	blx	r4
    1892:	466b      	mov	r3, sp
    1894:	8058      	strh	r0, [r3, #2]
        stDnsAnswerHeader.u32ResponseTTL = UDP_Read32(); // Time to live
    1896:	4b0f      	ldr	r3, [pc, #60]	; (18d4 <DNS_Handler+0x168>)
    1898:	4798      	blx	r3
        stDnsAnswerHeader.u16ResponseLen = UDP_Read16(); // Response length
    189a:	47a0      	blx	r4
    189c:	466b      	mov	r3, sp
    189e:	8118      	strh	r0, [r3, #8]
        if (stDnsAnswerHeader.u16ResponseType == 0x0001u && stDnsAnswerHeader.u16ResponseClass == 0x0001u && stDnsAnswerHeader.u16ResponseLen == 0x0004u) {
    18a0:	4b0d      	ldr	r3, [pc, #52]	; (18d8 <DNS_Handler+0x16c>)
    18a2:	9900      	ldr	r1, [sp, #0]
    18a4:	4299      	cmp	r1, r3
    18a6:	d1e0      	bne.n	186a <DNS_Handler+0xfe>
    18a8:	2804      	cmp	r0, #4
    18aa:	d1de      	bne.n	186a <DNS_Handler+0xfe>
            *s_pu32LookupHostIp = UDP_Read32();
    18ac:	4b05      	ldr	r3, [pc, #20]	; (18c4 <DNS_Handler+0x158>)
    18ae:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    18b0:	4b08      	ldr	r3, [pc, #32]	; (18d4 <DNS_Handler+0x168>)
    18b2:	4798      	blx	r3
    18b4:	6020      	str	r0, [r4, #0]
            goto DoneSearchingRecords;
    18b6:	e7a8      	b.n	180a <DNS_Handler+0x9e>
    18b8:	0000885c 	.word	0x0000885c
    18bc:	00000891 	.word	0x00000891
    18c0:	0000420d 	.word	0x0000420d
    18c4:	2000060c 	.word	0x2000060c
    18c8:	0000887c 	.word	0x0000887c
    18cc:	00001739 	.word	0x00001739
    18d0:	0000418d 	.word	0x0000418d
    18d4:	00004241 	.word	0x00004241
    18d8:	00010001 	.word	0x00010001

000018dc <Ethernet_QueueServerSend>:

void Ethernet_QueueServerSend(void) {
    18dc:	b510      	push	{r4, lr}
    // No point in setting the flag if it is already set
    if (s_fEthernetQueueServerSend==true) return;
    18de:	4b09      	ldr	r3, [pc, #36]	; (1904 <Ethernet_QueueServerSend+0x28>)
    18e0:	7f9b      	ldrb	r3, [r3, #30]
    18e2:	2b00      	cmp	r3, #0
    18e4:	d10d      	bne.n	1902 <Ethernet_QueueServerSend+0x26>
    // No point in setting the flag is still waiting on a response
    if (s_stEthernetSocketRemote.socketState==SOCKET_CONNECTED || s_stEthernetSocketRemote.socketState==SOCKET_IN_PROGRESS) return;
    18e6:	4b08      	ldr	r3, [pc, #32]	; (1908 <Ethernet_QueueServerSend+0x2c>)
    18e8:	339a      	adds	r3, #154	; 0x9a
    18ea:	781b      	ldrb	r3, [r3, #0]
    18ec:	3b02      	subs	r3, #2
    18ee:	b2db      	uxtb	r3, r3
    18f0:	2b01      	cmp	r3, #1
    18f2:	d906      	bls.n	1902 <Ethernet_QueueServerSend+0x26>
	
	if (CmdFifo_GetByteCount()>0) s_fEthernetQueueServerSend = true;
    18f4:	4b05      	ldr	r3, [pc, #20]	; (190c <Ethernet_QueueServerSend+0x30>)
    18f6:	4798      	blx	r3
    18f8:	2800      	cmp	r0, #0
    18fa:	dd02      	ble.n	1902 <Ethernet_QueueServerSend+0x26>
    18fc:	2201      	movs	r2, #1
    18fe:	4b01      	ldr	r3, [pc, #4]	; (1904 <Ethernet_QueueServerSend+0x28>)
    1900:	779a      	strb	r2, [r3, #30]
    1902:	bd10      	pop	{r4, pc}
    1904:	2000068c 	.word	0x2000068c
    1908:	2000060c 	.word	0x2000060c
    190c:	000007f1 	.word	0x000007f1

00001910 <Flash_Init>:
 *  @param[out] None
 *  @return     Nothing
 ******************************************************************************/
void Flash_Init(void) {
    // Initialization of FLASH_0 already done in driver_init.c
}
    1910:	4770      	bx	lr
	...

00001914 <Flash_ReadFlash>:
 *  @param[in]  uint32_t  byteAddress  Flash page to begin operation
 *  @param[out] char*   buffer      Pointer to destination buffer
 *  @param[in]  uint32_t  size        Number of bytes to read
 *  @return     Nothing
 ******************************************************************************/
void Flash_ReadFlash(uint32_t byteAddress, char *buffer, uint32_t size) {
    1914:	b510      	push	{r4, lr}
    1916:	0013      	movs	r3, r2
    flash_read(&FLASH_0, byteAddress, (uint8_t*)buffer, size);
    1918:	000a      	movs	r2, r1
    191a:	0001      	movs	r1, r0
    191c:	4801      	ldr	r0, [pc, #4]	; (1924 <Flash_ReadFlash+0x10>)
    191e:	4c02      	ldr	r4, [pc, #8]	; (1928 <Flash_ReadFlash+0x14>)
    1920:	47a0      	blx	r4
}
    1922:	bd10      	pop	{r4, pc}
    1924:	20003f8c 	.word	0x20003f8c
    1928:	000027b9 	.word	0x000027b9

0000192c <Flash_EraseFlash>:
 *  Erase contents of NVM in 256-byte rows
 *  @param[in]  uint32_t  pageOffset  Flash page to begin operation
 *  @param[in]  uint32_t  size        Number of bytes to erase. Will round up to pages!
 *  @return     Nothing
 ******************************************************************************/
void Flash_EraseFlash(uint32_t byteAddress, uint32_t numPages) {
    192c:	b510      	push	{r4, lr}
    192e:	000a      	movs	r2, r1
    flash_erase(&FLASH_0, byteAddress, numPages);
    1930:	0001      	movs	r1, r0
    1932:	4802      	ldr	r0, [pc, #8]	; (193c <Flash_EraseFlash+0x10>)
    1934:	4b02      	ldr	r3, [pc, #8]	; (1940 <Flash_EraseFlash+0x14>)
    1936:	4798      	blx	r3
}
    1938:	bd10      	pop	{r4, pc}
    193a:	46c0      	nop			; (mov r8, r8)
    193c:	20003f8c 	.word	0x20003f8c
    1940:	000028d1 	.word	0x000028d1

00001944 <Flash_WriteFlash>:
 *  @param[in]  uint32_t  pageOffset  Flash page to begin operation
 *  @param[in]  char*   buffer      Pointer to source buffer
 *  @param[in]  uint32_t  size        Number of bytes to write
 *  @return     Nothing
 ******************************************************************************/
void Flash_WriteFlash(uint32_t byteAddress, char *buffer, uint32_t size) {
    1944:	b510      	push	{r4, lr}
    1946:	0013      	movs	r3, r2
    flash_write(&FLASH_0, byteAddress, (uint8_t*)buffer, size);
    1948:	000a      	movs	r2, r1
    194a:	0001      	movs	r1, r0
    194c:	4801      	ldr	r0, [pc, #4]	; (1954 <Flash_WriteFlash+0x10>)
    194e:	4c02      	ldr	r4, [pc, #8]	; (1958 <Flash_WriteFlash+0x14>)
    1950:	47a0      	blx	r4
}
    1952:	bd10      	pop	{r4, pc}
    1954:	20003f8c 	.word	0x20003f8c
    1958:	00002839 	.word	0x00002839

0000195c <Http_BuildPostHeaderCommon>:
    totalBytes = (uint16_t)(pDst - buffer);
    return totalBytes;
}


uint16_t Http_BuildPostHeaderCommon(char* buffer, char* hostname, bool useFailsafe) {
    195c:	b5f0      	push	{r4, r5, r6, r7, lr}
    195e:	b083      	sub	sp, #12
    1960:	0007      	movs	r7, r0
    1962:	9101      	str	r1, [sp, #4]
    uint16_t  totalBytes = 0;
    char    *pDst = buffer;

    // POST {path} HTTP/1.1\r\n
    sprintf(g_acBuffer256, HTTP_HDR_POST, "index.php");
    1964:	4a17      	ldr	r2, [pc, #92]	; (19c4 <Http_BuildPostHeaderCommon+0x68>)
    1966:	4918      	ldr	r1, [pc, #96]	; (19c8 <Http_BuildPostHeaderCommon+0x6c>)
    1968:	4818      	ldr	r0, [pc, #96]	; (19cc <Http_BuildPostHeaderCommon+0x70>)
    196a:	4d19      	ldr	r5, [pc, #100]	; (19d0 <Http_BuildPostHeaderCommon+0x74>)
    196c:	47a8      	blx	r5
    sprintf(pDst, g_acBuffer256); pDst += strlen(g_acBuffer256);
    196e:	4917      	ldr	r1, [pc, #92]	; (19cc <Http_BuildPostHeaderCommon+0x70>)
    1970:	0038      	movs	r0, r7
    1972:	47a8      	blx	r5
    1974:	4815      	ldr	r0, [pc, #84]	; (19cc <Http_BuildPostHeaderCommon+0x70>)
    1976:	4e17      	ldr	r6, [pc, #92]	; (19d4 <Http_BuildPostHeaderCommon+0x78>)
    1978:	47b0      	blx	r6
    197a:	183c      	adds	r4, r7, r0
    // Host: {domain}\r\n
    sprintf(g_acBuffer256, HTTP_HDR_HOST, hostname);
    197c:	9a01      	ldr	r2, [sp, #4]
    197e:	4916      	ldr	r1, [pc, #88]	; (19d8 <Http_BuildPostHeaderCommon+0x7c>)
    1980:	4812      	ldr	r0, [pc, #72]	; (19cc <Http_BuildPostHeaderCommon+0x70>)
    1982:	47a8      	blx	r5
    sprintf(pDst, g_acBuffer256); pDst += strlen(g_acBuffer256);
    1984:	4911      	ldr	r1, [pc, #68]	; (19cc <Http_BuildPostHeaderCommon+0x70>)
    1986:	0020      	movs	r0, r4
    1988:	47a8      	blx	r5
    198a:	4810      	ldr	r0, [pc, #64]	; (19cc <Http_BuildPostHeaderCommon+0x70>)
    198c:	47b0      	blx	r6
    198e:	1824      	adds	r4, r4, r0
    // Connection: close\r\n
    sprintf(pDst, HTTP_HDR_CONNECTION_CLOSE);
    1990:	2214      	movs	r2, #20
    1992:	4912      	ldr	r1, [pc, #72]	; (19dc <Http_BuildPostHeaderCommon+0x80>)
    1994:	0020      	movs	r0, r4
    1996:	4d12      	ldr	r5, [pc, #72]	; (19e0 <Http_BuildPostHeaderCommon+0x84>)
    1998:	47a8      	blx	r5
    pDst += strlen(HTTP_HDR_CONNECTION_CLOSE);
    199a:	0020      	movs	r0, r4
    199c:	3013      	adds	r0, #19
	
	sprintf(pDst, HTTP_HDR_CONTENT_TYPE_PLAIN);
    199e:	222a      	movs	r2, #42	; 0x2a
    19a0:	4910      	ldr	r1, [pc, #64]	; (19e4 <Http_BuildPostHeaderCommon+0x88>)
    19a2:	47a8      	blx	r5
    pDst += strlen(HTTP_HDR_CONTENT_TYPE_PLAIN);
    19a4:	0020      	movs	r0, r4
    19a6:	303c      	adds	r0, #60	; 0x3c
	
    // Content-Length: xxxx\r\n\r\n
    // It is critical that this is always at the end and doesn't change size - it gets updated later
    sprintf(pDst, HTTP_HDR_CONTENT_LENGTH);
    19a8:	2217      	movs	r2, #23
    19aa:	490f      	ldr	r1, [pc, #60]	; (19e8 <Http_BuildPostHeaderCommon+0x8c>)
    19ac:	47a8      	blx	r5
    pDst += strlen(HTTP_HDR_CONTENT_LENGTH);
    19ae:	0020      	movs	r0, r4
    19b0:	3052      	adds	r0, #82	; 0x52
    sprintf(pDst, HTTP_HDR_CRLF);
    19b2:	2203      	movs	r2, #3
    19b4:	490d      	ldr	r1, [pc, #52]	; (19ec <Http_BuildPostHeaderCommon+0x90>)
    19b6:	47a8      	blx	r5
    pDst += strlen(HTTP_HDR_CRLF);
    19b8:	0020      	movs	r0, r4
    19ba:	3054      	adds	r0, #84	; 0x54

    // Return the total byte count
    totalBytes = (uint16_t)(pDst - buffer);
    19bc:	1bc0      	subs	r0, r0, r7
    19be:	b280      	uxth	r0, r0
    return totalBytes;
}
    19c0:	b003      	add	sp, #12
    19c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19c4:	00008a28 	.word	0x00008a28
    19c8:	00008a34 	.word	0x00008a34
    19cc:	20000a54 	.word	0x20000a54
    19d0:	00007901 	.word	0x00007901
    19d4:	00007945 	.word	0x00007945
    19d8:	00008a48 	.word	0x00008a48
    19dc:	000088f4 	.word	0x000088f4
    19e0:	0000776b 	.word	0x0000776b
    19e4:	00008a54 	.word	0x00008a54
    19e8:	00008978 	.word	0x00008978
    19ec:	0000898c 	.word	0x0000898c

000019f0 <ReadingQueue_Init>:

/** LOCAL (PRIVATE) FUNCTION PROTOTYPES ***************************************/


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
void ReadingQueue_Init(void) {
    19f0:	b510      	push	{r4, lr}
	// Clear the contents of the reading queue
	memset(&g_acReadingBuffer1[0], 0, READING_BUFF_NUM_BYTES);
    19f2:	2280      	movs	r2, #128	; 0x80
    19f4:	2100      	movs	r1, #0
    19f6:	4806      	ldr	r0, [pc, #24]	; (1a10 <ReadingQueue_Init+0x20>)
    19f8:	4c06      	ldr	r4, [pc, #24]	; (1a14 <ReadingQueue_Init+0x24>)
    19fa:	47a0      	blx	r4
	memset(&g_acReadingBuffer2[0], 0, READING_BUFF_NUM_BYTES);
    19fc:	2280      	movs	r2, #128	; 0x80
    19fe:	2100      	movs	r1, #0
    1a00:	4805      	ldr	r0, [pc, #20]	; (1a18 <ReadingQueue_Init+0x28>)
    1a02:	47a0      	blx	r4
	
	// Clear Queue count
	s_u16Queue1Count = 0;
    1a04:	4b05      	ldr	r3, [pc, #20]	; (1a1c <ReadingQueue_Init+0x2c>)
    1a06:	2200      	movs	r2, #0
    1a08:	801a      	strh	r2, [r3, #0]
	s_u16Queue2Count = 0;
    1a0a:	805a      	strh	r2, [r3, #2]
}
    1a0c:	bd10      	pop	{r4, pc}
    1a0e:	46c0      	nop			; (mov r8, r8)
    1a10:	200009d4 	.word	0x200009d4
    1a14:	0000777d 	.word	0x0000777d
    1a18:	20000904 	.word	0x20000904
    1a1c:	2000079e 	.word	0x2000079e

00001a20 <ReadingQueue1_Add>:
void ReadingQueue2_GetReadingRemaining(void) {
	uint16_t remaining = READING_BUFF_NUM_BYTES - s_u16Queue2Count;
	return remaining;
}

bool ReadingQueue1_Add(uint16_t val) {
    1a20:	b510      	push	{r4, lr}
	// Bail out if there isn't room for readings
	if (s_u16Queue1Count >= READING_BUFF_NUM_BYTES) return false;
    1a22:	4b0c      	ldr	r3, [pc, #48]	; (1a54 <ReadingQueue1_Add+0x34>)
    1a24:	881b      	ldrh	r3, [r3, #0]
    1a26:	2b7f      	cmp	r3, #127	; 0x7f
    1a28:	d901      	bls.n	1a2e <ReadingQueue1_Add+0xe>
    1a2a:	2000      	movs	r0, #0
	s_u16Queue1Count++;
	
	 DEBUG_INFO("Queue1 Item Added: %luus ", (val*0.125));
	// Return Success.
	return true;
}
    1a2c:	bd10      	pop	{r4, pc}
	g_acReadingBuffer1[s_u16Queue1Count] = val;
    1a2e:	4a0a      	ldr	r2, [pc, #40]	; (1a58 <ReadingQueue1_Add+0x38>)
    1a30:	54d0      	strb	r0, [r2, r3]
	s_u16Queue1Count++;
    1a32:	3301      	adds	r3, #1
    1a34:	4a07      	ldr	r2, [pc, #28]	; (1a54 <ReadingQueue1_Add+0x34>)
    1a36:	8013      	strh	r3, [r2, #0]
	 DEBUG_INFO("Queue1 Item Added: %luus ", (val*0.125));
    1a38:	4b08      	ldr	r3, [pc, #32]	; (1a5c <ReadingQueue1_Add+0x3c>)
    1a3a:	4798      	blx	r3
    1a3c:	2200      	movs	r2, #0
    1a3e:	23ff      	movs	r3, #255	; 0xff
    1a40:	059b      	lsls	r3, r3, #22
    1a42:	4c07      	ldr	r4, [pc, #28]	; (1a60 <ReadingQueue1_Add+0x40>)
    1a44:	47a0      	blx	r4
    1a46:	0002      	movs	r2, r0
    1a48:	000b      	movs	r3, r1
    1a4a:	4806      	ldr	r0, [pc, #24]	; (1a64 <ReadingQueue1_Add+0x44>)
    1a4c:	4906      	ldr	r1, [pc, #24]	; (1a68 <ReadingQueue1_Add+0x48>)
    1a4e:	4788      	blx	r1
	return true;
    1a50:	2001      	movs	r0, #1
    1a52:	e7eb      	b.n	1a2c <ReadingQueue1_Add+0xc>
    1a54:	2000079e 	.word	0x2000079e
    1a58:	200009d4 	.word	0x200009d4
    1a5c:	0000737d 	.word	0x0000737d
    1a60:	000067e9 	.word	0x000067e9
    1a64:	00008a80 	.word	0x00008a80
    1a68:	00000891 	.word	0x00000891

00001a6c <ReadingQueue2_Add>:

bool ReadingQueue2_Add(uint16_t val) {
    1a6c:	b510      	push	{r4, lr}
	// Bail out if there isn't room for readings
	if (s_u16Queue2Count >= READING_BUFF_NUM_BYTES) return false;
    1a6e:	4b0d      	ldr	r3, [pc, #52]	; (1aa4 <ReadingQueue2_Add+0x38>)
    1a70:	885b      	ldrh	r3, [r3, #2]
    1a72:	2b7f      	cmp	r3, #127	; 0x7f
    1a74:	d901      	bls.n	1a7a <ReadingQueue2_Add+0xe>
    1a76:	2000      	movs	r0, #0
	uint16_t temp = val*0.125;
	 DEBUG_INFO("Queue2 Item Added: %luus ", temp);
	 
	// Return Success.
	return true;
    1a78:	bd10      	pop	{r4, pc}
	g_acReadingBuffer2[s_u16Queue2Count] = val;
    1a7a:	4a0b      	ldr	r2, [pc, #44]	; (1aa8 <ReadingQueue2_Add+0x3c>)
    1a7c:	54d0      	strb	r0, [r2, r3]
	s_u16Queue2Count++;
    1a7e:	3301      	adds	r3, #1
    1a80:	4a08      	ldr	r2, [pc, #32]	; (1aa4 <ReadingQueue2_Add+0x38>)
    1a82:	8053      	strh	r3, [r2, #2]
	uint16_t temp = val*0.125;
    1a84:	4b09      	ldr	r3, [pc, #36]	; (1aac <ReadingQueue2_Add+0x40>)
    1a86:	4798      	blx	r3
    1a88:	2200      	movs	r2, #0
    1a8a:	23ff      	movs	r3, #255	; 0xff
    1a8c:	059b      	lsls	r3, r3, #22
    1a8e:	4c08      	ldr	r4, [pc, #32]	; (1ab0 <ReadingQueue2_Add+0x44>)
    1a90:	47a0      	blx	r4
    1a92:	4b08      	ldr	r3, [pc, #32]	; (1ab4 <ReadingQueue2_Add+0x48>)
    1a94:	4798      	blx	r3
    1a96:	b281      	uxth	r1, r0
	 DEBUG_INFO("Queue2 Item Added: %luus ", temp);
    1a98:	4807      	ldr	r0, [pc, #28]	; (1ab8 <ReadingQueue2_Add+0x4c>)
    1a9a:	4b08      	ldr	r3, [pc, #32]	; (1abc <ReadingQueue2_Add+0x50>)
    1a9c:	4798      	blx	r3
	return true;
    1a9e:	2001      	movs	r0, #1
    1aa0:	e7ea      	b.n	1a78 <ReadingQueue2_Add+0xc>
    1aa2:	46c0      	nop			; (mov r8, r8)
    1aa4:	2000079e 	.word	0x2000079e
    1aa8:	20000904 	.word	0x20000904
    1aac:	0000737d 	.word	0x0000737d
    1ab0:	000067e9 	.word	0x000067e9
    1ab4:	000067ad 	.word	0x000067ad
    1ab8:	00008a9c 	.word	0x00008a9c
    1abc:	00000891 	.word	0x00000891

00001ac0 <_Sensor1_Callback>:
}

static uint32_t Sensor1Val;
static uint32_t Sensor2Val;

void _Sensor1_Callback(void) {
    1ac0:	b510      	push	{r4, lr}
	static uint32_t Now;
	static uint32_t Read;
	static int iCount;
	
	// Get Current ticks.
	Read = _get_tick_count();
    1ac2:	4b31      	ldr	r3, [pc, #196]	; (1b88 <_Sensor1_Callback+0xc8>)
    1ac4:	4798      	blx	r3
	
	// Read and Now will be equal on first iteration.
	if(Now != NULL) { Now = Read; } 
    1ac6:	4b31      	ldr	r3, [pc, #196]	; (1b8c <_Sensor1_Callback+0xcc>)
    1ac8:	681b      	ldr	r3, [r3, #0]
    1aca:	2b00      	cmp	r3, #0
    1acc:	d001      	beq.n	1ad2 <_Sensor1_Callback+0x12>
    1ace:	4b2f      	ldr	r3, [pc, #188]	; (1b8c <_Sensor1_Callback+0xcc>)
    1ad0:	6018      	str	r0, [r3, #0]
		
	// Insert Tick value into buffer.
	ValBuffer[iCount] = Now;
    1ad2:	4a2e      	ldr	r2, [pc, #184]	; (1b8c <_Sensor1_Callback+0xcc>)
    1ad4:	6853      	ldr	r3, [r2, #4]
    1ad6:	0099      	lsls	r1, r3, #2
    1ad8:	1851      	adds	r1, r2, r1
    1ada:	6814      	ldr	r4, [r2, #0]
    1adc:	608c      	str	r4, [r1, #8]
	
	// Update Now with the Read value. Redundant and waste of time on first iteration.
	Now = Read;
    1ade:	6010      	str	r0, [r2, #0]
		
	// Increase count.
	iCount++;
    1ae0:	3301      	adds	r3, #1
    1ae2:	6053      	str	r3, [r2, #4]
	
	if(iCount == 4) { // Ready to Average Buffer and reset variables. Needs to be multiple of 2 to bit shift for division.
    1ae4:	2b04      	cmp	r3, #4
    1ae6:	d000      	beq.n	1aea <_Sensor1_Callback+0x2a>
			// Clear buffers.
			Sensor1Val = 0;
			Sensor2Val = 0;
		}
	}
}
    1ae8:	bd10      	pop	{r4, pc}
		if(Sensor1_Tx) {
    1aea:	4a29      	ldr	r2, [pc, #164]	; (1b90 <_Sensor1_Callback+0xd0>)
    1aec:	7812      	ldrb	r2, [r2, #0]
    1aee:	2a00      	cmp	r2, #0
    1af0:	d025      	beq.n	1b3e <_Sensor1_Callback+0x7e>
    1af2:	2200      	movs	r2, #0
    1af4:	e008      	b.n	1b08 <_Sensor1_Callback+0x48>
				Sensor1Val+=ValBuffer[i];
    1af6:	4925      	ldr	r1, [pc, #148]	; (1b8c <_Sensor1_Callback+0xcc>)
    1af8:	0090      	lsls	r0, r2, #2
    1afa:	1808      	adds	r0, r1, r0
    1afc:	6880      	ldr	r0, [r0, #8]
    1afe:	698c      	ldr	r4, [r1, #24]
    1b00:	46a4      	mov	ip, r4
    1b02:	4460      	add	r0, ip
    1b04:	6188      	str	r0, [r1, #24]
			for(;i<iCount; i++) {
    1b06:	3201      	adds	r2, #1
    1b08:	429a      	cmp	r2, r3
    1b0a:	dbf4      	blt.n	1af6 <_Sensor1_Callback+0x36>
			Sensor1Val = Sensor1Val >> iCount; // Faster than division.
    1b0c:	4c1f      	ldr	r4, [pc, #124]	; (1b8c <_Sensor1_Callback+0xcc>)
    1b0e:	69a2      	ldr	r2, [r4, #24]
    1b10:	40da      	lsrs	r2, r3
    1b12:	61a2      	str	r2, [r4, #24]
			memset(ValBuffer, 0, sizeof(ValBuffer));
    1b14:	0020      	movs	r0, r4
    1b16:	3008      	adds	r0, #8
    1b18:	2210      	movs	r2, #16
    1b1a:	2100      	movs	r1, #0
    1b1c:	4b1d      	ldr	r3, [pc, #116]	; (1b94 <_Sensor1_Callback+0xd4>)
    1b1e:	4798      	blx	r3
			Now = 0; Read = 0; iCount = 0;
    1b20:	2300      	movs	r3, #0
    1b22:	6023      	str	r3, [r4, #0]
    1b24:	6063      	str	r3, [r4, #4]
			Sensor1_Tx = false; // Needs to handle the digital high somewhere.
    1b26:	4a1a      	ldr	r2, [pc, #104]	; (1b90 <_Sensor1_Callback+0xd0>)
    1b28:	7013      	strb	r3, [r2, #0]
    1b2a:	e7dd      	b.n	1ae8 <_Sensor1_Callback+0x28>
				Sensor2Val+=ValBuffer[i];
    1b2c:	4917      	ldr	r1, [pc, #92]	; (1b8c <_Sensor1_Callback+0xcc>)
    1b2e:	0090      	lsls	r0, r2, #2
    1b30:	1808      	adds	r0, r1, r0
    1b32:	6880      	ldr	r0, [r0, #8]
    1b34:	69cc      	ldr	r4, [r1, #28]
    1b36:	46a4      	mov	ip, r4
    1b38:	4460      	add	r0, ip
    1b3a:	61c8      	str	r0, [r1, #28]
			for(;i<iCount; i++) {
    1b3c:	3201      	adds	r2, #1
    1b3e:	429a      	cmp	r2, r3
    1b40:	dbf4      	blt.n	1b2c <_Sensor1_Callback+0x6c>
			Sensor2Val = Sensor2Val >> iCount; // Faster than division.
    1b42:	4a12      	ldr	r2, [pc, #72]	; (1b8c <_Sensor1_Callback+0xcc>)
    1b44:	69d0      	ldr	r0, [r2, #28]
    1b46:	40d8      	lsrs	r0, r3
    1b48:	61d0      	str	r0, [r2, #28]
			if(!s_u8ReadingBufferUsed) {
    1b4a:	2320      	movs	r3, #32
    1b4c:	5cd3      	ldrb	r3, [r2, r3]
    1b4e:	2b00      	cmp	r3, #0
    1b50:	d113      	bne.n	1b7a <_Sensor1_Callback+0xba>
				ReadingQueue1_Add((Sensor2Val - Sensor1Val));
    1b52:	6993      	ldr	r3, [r2, #24]
    1b54:	1ac0      	subs	r0, r0, r3
    1b56:	4b10      	ldr	r3, [pc, #64]	; (1b98 <_Sensor1_Callback+0xd8>)
    1b58:	4798      	blx	r3
			memset(ValBuffer, 0, sizeof(ValBuffer));
    1b5a:	4c0c      	ldr	r4, [pc, #48]	; (1b8c <_Sensor1_Callback+0xcc>)
    1b5c:	0020      	movs	r0, r4
    1b5e:	3008      	adds	r0, #8
    1b60:	2210      	movs	r2, #16
    1b62:	2100      	movs	r1, #0
    1b64:	4b0b      	ldr	r3, [pc, #44]	; (1b94 <_Sensor1_Callback+0xd4>)
    1b66:	4798      	blx	r3
			Now = 0; Read = 0; iCount = 0;
    1b68:	2300      	movs	r3, #0
    1b6a:	6023      	str	r3, [r4, #0]
    1b6c:	6063      	str	r3, [r4, #4]
			Sensor1_Tx = true; // Needs to handle the digital high somewhere.
    1b6e:	2101      	movs	r1, #1
    1b70:	4a07      	ldr	r2, [pc, #28]	; (1b90 <_Sensor1_Callback+0xd0>)
    1b72:	7011      	strb	r1, [r2, #0]
			Sensor1Val = 0;
    1b74:	61a3      	str	r3, [r4, #24]
			Sensor2Val = 0;
    1b76:	61e3      	str	r3, [r4, #28]
}
    1b78:	e7b6      	b.n	1ae8 <_Sensor1_Callback+0x28>
				ReadingQueue2_Add((Sensor2Val - Sensor1Val));
    1b7a:	4b04      	ldr	r3, [pc, #16]	; (1b8c <_Sensor1_Callback+0xcc>)
    1b7c:	699b      	ldr	r3, [r3, #24]
    1b7e:	1ac0      	subs	r0, r0, r3
    1b80:	4b06      	ldr	r3, [pc, #24]	; (1b9c <_Sensor1_Callback+0xdc>)
    1b82:	4798      	blx	r3
    1b84:	e7e9      	b.n	1b5a <_Sensor1_Callback+0x9a>
    1b86:	46c0      	nop			; (mov r8, r8)
    1b88:	000007b1 	.word	0x000007b1
    1b8c:	200007a4 	.word	0x200007a4
    1b90:	20000002 	.word	0x20000002
    1b94:	0000777d 	.word	0x0000777d
    1b98:	00001a21 	.word	0x00001a21
    1b9c:	00001a6d 	.word	0x00001a6d

00001ba0 <Sensor_Init>:
int8_t Sensor_Init(void) {
    1ba0:	b510      	push	{r4, lr}
	Sensor1_Tx = true;
    1ba2:	2201      	movs	r2, #1
    1ba4:	4b08      	ldr	r3, [pc, #32]	; (1bc8 <Sensor_Init+0x28>)
    1ba6:	701a      	strb	r2, [r3, #0]
    uint32_t u32RegOrig = EIC->CONFIG[0].reg;
    1ba8:	4a08      	ldr	r2, [pc, #32]	; (1bcc <Sensor_Init+0x2c>)
    1baa:	6991      	ldr	r1, [r2, #24]
    EIC->CONFIG[0].reg = u32RegOrig | u32Sense | u32Filter;
    1bac:	2380      	movs	r3, #128	; 0x80
    1bae:	029b      	lsls	r3, r3, #10
    1bb0:	430b      	orrs	r3, r1
    1bb2:	6193      	str	r3, [r2, #24]
    ext_irq_register(SENSOR1_IN, _Sensor1_Callback);
    1bb4:	4906      	ldr	r1, [pc, #24]	; (1bd0 <Sensor_Init+0x30>)
    1bb6:	2004      	movs	r0, #4
    1bb8:	4b06      	ldr	r3, [pc, #24]	; (1bd4 <Sensor_Init+0x34>)
    1bba:	4798      	blx	r3
    ext_irq_enable(SENSOR1_IN);
    1bbc:	2004      	movs	r0, #4
    1bbe:	4b06      	ldr	r3, [pc, #24]	; (1bd8 <Sensor_Init+0x38>)
    1bc0:	4798      	blx	r3
}
    1bc2:	2001      	movs	r0, #1
    1bc4:	bd10      	pop	{r4, pc}
    1bc6:	46c0      	nop			; (mov r8, r8)
    1bc8:	20000002 	.word	0x20000002
    1bcc:	40001800 	.word	0x40001800
    1bd0:	00001ac1 	.word	0x00001ac1
    1bd4:	00002625 	.word	0x00002625
    1bd8:	0000270d 	.word	0x0000270d

00001bdc <_FindContentPointer>:
 *  @param[in]  char*   buff    Pointer to buffer to search content length
 *  @param[out] None
 *  @return     Pointer to beginning of the content. Null if not found
 ******************************************************************************/
char* _FindContentPointer(char* buff)
{
    1bdc:	b510      	push	{r4, lr}
    char* ptr = NULL;
    ptr = strstr(buff, "\r\n\r\n");
    1bde:	4903      	ldr	r1, [pc, #12]	; (1bec <_FindContentPointer+0x10>)
    1be0:	4b03      	ldr	r3, [pc, #12]	; (1bf0 <_FindContentPointer+0x14>)
    1be2:	4798      	blx	r3
    if (ptr!=NULL) ptr += 4;
    1be4:	2800      	cmp	r0, #0
    1be6:	d000      	beq.n	1bea <_FindContentPointer+0xe>
    1be8:	3004      	adds	r0, #4
    return ptr;
}
    1bea:	bd10      	pop	{r4, pc}
    1bec:	0000869c 	.word	0x0000869c
    1bf0:	00007953 	.word	0x00007953

00001bf4 <_FindTokenValue>:
 *  @param[in]  char*   max_sz  Maximum length of response
 *  @param[out] char*   value   Destination buffer
 *  @return     Pointer to beginning of the content. 0 if token not found
 ******************************************************************************/
uint16_t _FindTokenValue(char *buff, const char *tok, char term, uint16_t max_sz, char *value)
{
    1bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bf6:	b083      	sub	sp, #12
    1bf8:	9101      	str	r1, [sp, #4]
    1bfa:	0017      	movs	r7, r2
    1bfc:	001e      	movs	r6, r3
    1bfe:	9d08      	ldr	r5, [sp, #32]
    uint8_t i = 0;

    // Search for token in string, then advance pointer
    char *pch = strstr(buff, tok);
    1c00:	4b0f      	ldr	r3, [pc, #60]	; (1c40 <_FindTokenValue+0x4c>)
    1c02:	4798      	blx	r3
    1c04:	0004      	movs	r4, r0
    pch += strlen(tok);
    1c06:	9801      	ldr	r0, [sp, #4]
    1c08:	4b0e      	ldr	r3, [pc, #56]	; (1c44 <_FindTokenValue+0x50>)
    1c0a:	4798      	blx	r3
    1c0c:	1824      	adds	r4, r4, r0

    // Clear out buffer before parsing
    memset(value, 0, max_sz);
    1c0e:	0032      	movs	r2, r6
    1c10:	2100      	movs	r1, #0
    1c12:	0028      	movs	r0, r5
    1c14:	4b0c      	ldr	r3, [pc, #48]	; (1c48 <_FindTokenValue+0x54>)
    1c16:	4798      	blx	r3
    uint8_t i = 0;
    1c18:	2300      	movs	r3, #0

    // Copy value into buffer up to the 'term' character (or null)
    while (i < max_sz) {
    1c1a:	b298      	uxth	r0, r3
    1c1c:	4286      	cmp	r6, r0
    1c1e:	d909      	bls.n	1c34 <_FindTokenValue+0x40>
        if ((*pch == term) || (*pch == 0)) {break;}
    1c20:	7822      	ldrb	r2, [r4, #0]
    1c22:	42ba      	cmp	r2, r7
    1c24:	d006      	beq.n	1c34 <_FindTokenValue+0x40>
    1c26:	2a00      	cmp	r2, #0
    1c28:	d004      	beq.n	1c34 <_FindTokenValue+0x40>
        value[i++] = *pch++;
    1c2a:	1c59      	adds	r1, r3, #1
    1c2c:	3401      	adds	r4, #1
    1c2e:	54ea      	strb	r2, [r5, r3]
    1c30:	b2cb      	uxtb	r3, r1
    1c32:	e7f2      	b.n	1c1a <_FindTokenValue+0x26>
    }

    /* add terminating 'null' to string */
    value[i] = 0;
    1c34:	18eb      	adds	r3, r5, r3
    1c36:	2200      	movs	r2, #0
    1c38:	701a      	strb	r2, [r3, #0]

    return i;
}
    1c3a:	b003      	add	sp, #12
    1c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c3e:	46c0      	nop			; (mov r8, r8)
    1c40:	00007953 	.word	0x00007953
    1c44:	00007945 	.word	0x00007945
    1c48:	0000777d 	.word	0x0000777d

00001c4c <_FindContentLength>:
{
    1c4c:	b530      	push	{r4, r5, lr}
    1c4e:	b085      	sub	sp, #20
    _FindTokenValue(buff, "Content-Length: ", '\r', sizeof(value), value);
    1c50:	ac02      	add	r4, sp, #8
    1c52:	9400      	str	r4, [sp, #0]
    1c54:	2305      	movs	r3, #5
    1c56:	220d      	movs	r2, #13
    1c58:	4903      	ldr	r1, [pc, #12]	; (1c68 <_FindContentLength+0x1c>)
    1c5a:	4d04      	ldr	r5, [pc, #16]	; (1c6c <_FindContentLength+0x20>)
    1c5c:	47a8      	blx	r5
    length = atoi(value);
    1c5e:	0020      	movs	r0, r4
    1c60:	4b03      	ldr	r3, [pc, #12]	; (1c70 <_FindContentLength+0x24>)
    1c62:	4798      	blx	r3
}
    1c64:	b005      	add	sp, #20
    1c66:	bd30      	pop	{r4, r5, pc}
    1c68:	00008ac0 	.word	0x00008ac0
    1c6c:	00001bf5 	.word	0x00001bf5
    1c70:	000076f9 	.word	0x000076f9

00001c74 <TcpParser_ParseServerResponse>:
bool TcpParser_ParseServerResponse(char* pcResponseBuff, uint16_t u16ResponseSize) {
    1c74:	b570      	push	{r4, r5, r6, lr}
    1c76:	0004      	movs	r4, r0
    1c78:	000e      	movs	r6, r1
    contentLen = _FindContentLength(pcResponseBuff);
    1c7a:	4b0e      	ldr	r3, [pc, #56]	; (1cb4 <TcpParser_ParseServerResponse+0x40>)
    1c7c:	4798      	blx	r3
    1c7e:	0005      	movs	r5, r0
    pContent = _FindContentPointer(pcResponseBuff);
    1c80:	0020      	movs	r0, r4
    1c82:	4b0d      	ldr	r3, [pc, #52]	; (1cb8 <TcpParser_ParseServerResponse+0x44>)
    1c84:	4798      	blx	r3
    if (pContent==NULL) {
    1c86:	2800      	cmp	r0, #0
    1c88:	d009      	beq.n	1c9e <TcpParser_ParseServerResponse+0x2a>
    pBuffEnd = pcResponseBuff + u16ResponseSize;
    1c8a:	19a4      	adds	r4, r4, r6
    payloadBytes = (int)(pBuffEnd - pContent);
    1c8c:	1a24      	subs	r4, r4, r0
    1c8e:	0429      	lsls	r1, r5, #16
    1c90:	0c09      	lsrs	r1, r1, #16
    if (payloadBytes<contentLen){
    1c92:	428c      	cmp	r4, r1
    1c94:	db08      	blt.n	1ca8 <TcpParser_ParseServerResponse+0x34>
    App_ProcessBinaryPayload(pSrc, contentLen);
    1c96:	4b09      	ldr	r3, [pc, #36]	; (1cbc <TcpParser_ParseServerResponse+0x48>)
    1c98:	4798      	blx	r3
    return true;
    1c9a:	2001      	movs	r0, #1
}
    1c9c:	bd70      	pop	{r4, r5, r6, pc}
        DEBUG_INFO("Unable to find start of content. ");
    1c9e:	4808      	ldr	r0, [pc, #32]	; (1cc0 <TcpParser_ParseServerResponse+0x4c>)
    1ca0:	4b08      	ldr	r3, [pc, #32]	; (1cc4 <TcpParser_ParseServerResponse+0x50>)
    1ca2:	4798      	blx	r3
        return false;
    1ca4:	2000      	movs	r0, #0
    1ca6:	e7f9      	b.n	1c9c <TcpParser_ParseServerResponse+0x28>
        DEBUG_INFO("Content missing or incomplete. ");
    1ca8:	4807      	ldr	r0, [pc, #28]	; (1cc8 <TcpParser_ParseServerResponse+0x54>)
    1caa:	4b06      	ldr	r3, [pc, #24]	; (1cc4 <TcpParser_ParseServerResponse+0x50>)
    1cac:	4798      	blx	r3
        return false;
    1cae:	2000      	movs	r0, #0
    1cb0:	e7f4      	b.n	1c9c <TcpParser_ParseServerResponse+0x28>
    1cb2:	46c0      	nop			; (mov r8, r8)
    1cb4:	00001c4d 	.word	0x00001c4d
    1cb8:	00001bdd 	.word	0x00001bdd
    1cbc:	00000521 	.word	0x00000521
    1cc0:	00008ad4 	.word	0x00008ad4
    1cc4:	00000891 	.word	0x00000891
    1cc8:	00008af8 	.word	0x00008af8

00001ccc <Timer_Init>:
 *  callback on (one second) roll over.
 *  @param[in]  None
 *  @param[out] None
 *  @return     0 indicates success. Anything else is an error.
 ******************************************************************************/
int16_t Timer_Init(void) {
    1ccc:	b510      	push	{r4, lr}
    // Initialization of TIMER_0 already done in driver_init.c

    // Clear the contents of the timer array
    memset(&s_au16Timers[0], 0, sizeof(s_au16Timers));
    1cce:	2280      	movs	r2, #128	; 0x80
    1cd0:	2100      	movs	r1, #0
    1cd2:	4809      	ldr	r0, [pc, #36]	; (1cf8 <Timer_Init+0x2c>)
    1cd4:	4b09      	ldr	r3, [pc, #36]	; (1cfc <Timer_Init+0x30>)
    1cd6:	4798      	blx	r3
    // Reset timer counter
    s_u16TimerCount = 0;
    1cd8:	2200      	movs	r2, #0
    1cda:	4b09      	ldr	r3, [pc, #36]	; (1d00 <Timer_Init+0x34>)
    1cdc:	801a      	strh	r2, [r3, #0]
	
	// Configure the timer for 32-bit mode and a tick period of 0.125 us
	TC2->COUNT32.CTRLA.reg = TC_CTRLA_MODE_COUNT32 | TC_CTRLA_PRESCALER_DIV1;
    1cde:	4b09      	ldr	r3, [pc, #36]	; (1d04 <Timer_Init+0x38>)
    1ce0:	2108      	movs	r1, #8
    1ce2:	8019      	strh	r1, [r3, #0]
	TC2->COUNT32.CC[0].reg = 63; // Match value for a period of 0.125 us
    1ce4:	3137      	adds	r1, #55	; 0x37
    1ce6:	6199      	str	r1, [r3, #24]
	TC2->COUNT32.CTRLBSET.reg = TC_CTRLBSET_CMD_STOP; // Stop the timer
    1ce8:	3141      	adds	r1, #65	; 0x41
    1cea:	7159      	strb	r1, [r3, #5]
	TC2->COUNT32.COUNT.reg = 0; // Reset the timer count to 0
    1cec:	611a      	str	r2, [r3, #16]

	// Start the timer
	timer_start(&SAMPLE_TIMER);
    1cee:	4806      	ldr	r0, [pc, #24]	; (1d08 <Timer_Init+0x3c>)
    1cf0:	4b06      	ldr	r3, [pc, #24]	; (1d0c <Timer_Init+0x40>)
    1cf2:	4798      	blx	r3
	
    return 0;
}
    1cf4:	2000      	movs	r0, #0
    1cf6:	bd10      	pop	{r4, pc}
    1cf8:	200007c8 	.word	0x200007c8
    1cfc:	0000777d 	.word	0x0000777d
    1d00:	20000848 	.word	0x20000848
    1d04:	42002800 	.word	0x42002800
    1d08:	20003f70 	.word	0x20003f70
    1d0c:	00002c65 	.word	0x00002c65

00001d10 <Timer_AddTimer>:
 *  @param[out] uint16_t    Index of the new timer
 *  @return     0 indicates success. Anything else is an error.
 ******************************************************************************/
int16_t Timer_AddTimer(uint16_t *u16Timer) {
    // Bail out with error if there are no timers left
    if (s_u16TimerCount>=TIMER_MAX_COUNT) return -1;
    1d10:	4b06      	ldr	r3, [pc, #24]	; (1d2c <Timer_AddTimer+0x1c>)
    1d12:	881b      	ldrh	r3, [r3, #0]
    1d14:	2b3f      	cmp	r3, #63	; 0x3f
    1d16:	d805      	bhi.n	1d24 <Timer_AddTimer+0x14>

    // Assign current timer count as the new index;
    *u16Timer = s_u16TimerCount;
    1d18:	8003      	strh	r3, [r0, #0]
    // Increment the timer count
    s_u16TimerCount++;
    1d1a:	3301      	adds	r3, #1
    1d1c:	4a03      	ldr	r2, [pc, #12]	; (1d2c <Timer_AddTimer+0x1c>)
    1d1e:	8013      	strh	r3, [r2, #0]

    // Return success
    return 0;
    1d20:	2000      	movs	r0, #0
}
    1d22:	4770      	bx	lr
    if (s_u16TimerCount>=TIMER_MAX_COUNT) return -1;
    1d24:	2001      	movs	r0, #1
    1d26:	4240      	negs	r0, r0
    1d28:	e7fb      	b.n	1d22 <Timer_AddTimer+0x12>
    1d2a:	46c0      	nop			; (mov r8, r8)
    1d2c:	20000848 	.word	0x20000848

00001d30 <Timer_SetTimer>:
 *  @param[in]  uint16_t    Value (in seconds) to set
 *  @param[out] None
 *  @return     Nothing
 ******************************************************************************/
void Timer_SetTimer(uint16_t timer, uint16_t sec) {
    s_au16Timers[timer] = sec;
    1d30:	0040      	lsls	r0, r0, #1
    1d32:	4b01      	ldr	r3, [pc, #4]	; (1d38 <Timer_SetTimer+0x8>)
    1d34:	52c1      	strh	r1, [r0, r3]
}
    1d36:	4770      	bx	lr
    1d38:	200007c8 	.word	0x200007c8

00001d3c <Timer_GetTimer>:
 *  @param[in]  uint16_t    Index of timer to retrieve
 *  @param[out] None
 *  @return     uint16_t    Current timer value (in seconds)
 ******************************************************************************/
uint16_t Timer_GetTimer(uint16_t timer) {
    return s_au16Timers[timer];
    1d3c:	0040      	lsls	r0, r0, #1
    1d3e:	4b01      	ldr	r3, [pc, #4]	; (1d44 <Timer_GetTimer+0x8>)
    1d40:	5a18      	ldrh	r0, [r3, r0]
}
    1d42:	4770      	bx	lr
    1d44:	200007c8 	.word	0x200007c8

00001d48 <Timer_Register_Callback>:
 *  @param[in]  void*   Pointer to user callback function
 *  @param[out] None
 *  @return     Nothing
 ******************************************************************************/
static struct timer_task task;
void Timer_Register_Callback(void* fpTimerCb) {
    1d48:	b510      	push	{r4, lr}
    task.interval = 1; // Timer output configured for one second
    1d4a:	4908      	ldr	r1, [pc, #32]	; (1d6c <Timer_Register_Callback+0x24>)
    1d4c:	2301      	movs	r3, #1
    1d4e:	60cb      	str	r3, [r1, #12]
    task.cb = fpTimerCb;
    1d50:	6108      	str	r0, [r1, #16]
    task.mode = TIMER_TASK_REPEAT;
    1d52:	750b      	strb	r3, [r1, #20]
    timer_add_task(&TIMER_0, &task);
    1d54:	3104      	adds	r1, #4
    1d56:	4c06      	ldr	r4, [pc, #24]	; (1d70 <Timer_Register_Callback+0x28>)
    1d58:	0020      	movs	r0, r4
    1d5a:	4b06      	ldr	r3, [pc, #24]	; (1d74 <Timer_Register_Callback+0x2c>)
    1d5c:	4798      	blx	r3
	
	TC2->COUNT32.COUNT.reg = 0; // Reset the timer count to 0
    1d5e:	2200      	movs	r2, #0
    1d60:	4b05      	ldr	r3, [pc, #20]	; (1d78 <Timer_Register_Callback+0x30>)
    1d62:	611a      	str	r2, [r3, #16]
	timer_start(&TIMER_0);
    1d64:	0020      	movs	r0, r4
    1d66:	4b05      	ldr	r3, [pc, #20]	; (1d7c <Timer_Register_Callback+0x34>)
    1d68:	4798      	blx	r3
}
    1d6a:	bd10      	pop	{r4, pc}
    1d6c:	20000848 	.word	0x20000848
    1d70:	20003fe0 	.word	0x20003fe0
    1d74:	00002ccd 	.word	0x00002ccd
    1d78:	42002800 	.word	0x42002800
    1d7c:	00002c65 	.word	0x00002c65

00001d80 <Timer_Pump>:
 *  Pumps all timers. Decrements all non-zero timers. MUST be called from user callback
 *  @param[in]  None
 *  @param[out] None
 *  @return     Nothing
 ******************************************************************************/
void Timer_Pump(void) {
    1d80:	b510      	push	{r4, lr}
    for (uint16_t index=0; index<s_u16TimerCount; index++) {
    1d82:	2400      	movs	r4, #0
    1d84:	e001      	b.n	1d8a <Timer_Pump+0xa>
    1d86:	3401      	adds	r4, #1
    1d88:	b2a4      	uxth	r4, r4
    1d8a:	4b08      	ldr	r3, [pc, #32]	; (1dac <Timer_Pump+0x2c>)
    1d8c:	881b      	ldrh	r3, [r3, #0]
    1d8e:	429c      	cmp	r4, r3
    1d90:	d20a      	bcs.n	1da8 <Timer_Pump+0x28>
        uint16_t count = Timer_GetTimer(index);
    1d92:	0020      	movs	r0, r4
    1d94:	4b06      	ldr	r3, [pc, #24]	; (1db0 <Timer_Pump+0x30>)
    1d96:	4798      	blx	r3
        if (count>0) Timer_SetTimer(index, count-1);
    1d98:	2800      	cmp	r0, #0
    1d9a:	d0f4      	beq.n	1d86 <Timer_Pump+0x6>
    1d9c:	3801      	subs	r0, #1
    1d9e:	b281      	uxth	r1, r0
    1da0:	0020      	movs	r0, r4
    1da2:	4b04      	ldr	r3, [pc, #16]	; (1db4 <Timer_Pump+0x34>)
    1da4:	4798      	blx	r3
    1da6:	e7ee      	b.n	1d86 <Timer_Pump+0x6>
    }
}
    1da8:	bd10      	pop	{r4, pc}
    1daa:	46c0      	nop			; (mov r8, r8)
    1dac:	20000848 	.word	0x20000848
    1db0:	00001d3d 	.word	0x00001d3d
    1db4:	00001d31 	.word	0x00001d31

00001db8 <Timestamp_Init>:
			peripheral = (uint32_t)_pm_get_ahb_index(module);
			PM->AHBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBA:
		PM->APBAMASK.reg |= 1 << peripheral;
    1db8:	4a18      	ldr	r2, [pc, #96]	; (1e1c <Timestamp_Init+0x64>)
    1dba:	6993      	ldr	r3, [r2, #24]
    1dbc:	2120      	movs	r1, #32
    1dbe:	430b      	orrs	r3, r1
    1dc0:	6193      	str	r3, [r2, #24]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
    1dc2:	4a17      	ldr	r2, [pc, #92]	; (1e20 <Timestamp_Init+0x68>)
    1dc4:	4b17      	ldr	r3, [pc, #92]	; (1e24 <Timestamp_Init+0x6c>)
    1dc6:	805a      	strh	r2, [r3, #2]
    _pm_enable_bus_clock(PM_BUS_APBA, RTC);
    // Coming from clock generator 1 output (1024Hz from OSC32K source)
    _gclk_enable_channel(RTC_GCLK_ID, GCLK_CLKCTRL_GEN_GCLK1_Val);

    // Disable the RTC peripheral
    RTC->MODE0.CTRL.bit.ENABLE = 0;
    1dc8:	4a17      	ldr	r2, [pc, #92]	; (1e28 <Timestamp_Init+0x70>)
    1dca:	8813      	ldrh	r3, [r2, #0]
    1dcc:	391e      	subs	r1, #30
    1dce:	438b      	bics	r3, r1
    1dd0:	8013      	strh	r3, [r2, #0]
    while(RTC->MODE0.STATUS.bit.SYNCBUSY){/* Wait for sync */}
    1dd2:	4b15      	ldr	r3, [pc, #84]	; (1e28 <Timestamp_Init+0x70>)
    1dd4:	7a9b      	ldrb	r3, [r3, #10]
    1dd6:	09db      	lsrs	r3, r3, #7
    1dd8:	d1fb      	bne.n	1dd2 <Timestamp_Init+0x1a>

    // Initiate software reset
    RTC->MODE0.CTRL.bit.SWRST = 1;
    1dda:	4a13      	ldr	r2, [pc, #76]	; (1e28 <Timestamp_Init+0x70>)
    1ddc:	8813      	ldrh	r3, [r2, #0]
    1dde:	2101      	movs	r1, #1
    1de0:	430b      	orrs	r3, r1
    1de2:	8013      	strh	r3, [r2, #0]
    while(RTC->MODE0.STATUS.bit.SYNCBUSY){/* Wait for sync */}
    1de4:	4b10      	ldr	r3, [pc, #64]	; (1e28 <Timestamp_Init+0x70>)
    1de6:	7a9b      	ldrb	r3, [r3, #10]
    1de8:	09db      	lsrs	r3, r3, #7
    1dea:	d1fb      	bne.n	1de4 <Timestamp_Init+0x2c>

    // Set mode (32-bit) and prescaler (1024)
    //RTC->MODE0.CTRL.bit.MODE = RTC_MODE0_CTRL_MODE_COUNT32_Val;
    //RTC->MODE0.CTRL.bit.PRESCALER = RTC_MODE0_CTRL_PRESCALER_DIV1024_Val;
    RTC->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE_COUNT32 | RTC_MODE0_CTRL_PRESCALER_DIV1024;
    1dec:	22a0      	movs	r2, #160	; 0xa0
    1dee:	0112      	lsls	r2, r2, #4
    1df0:	4b0d      	ldr	r3, [pc, #52]	; (1e28 <Timestamp_Init+0x70>)
    1df2:	801a      	strh	r2, [r3, #0]

    // Set the initial value
    while(RTC->MODE0.STATUS.bit.SYNCBUSY){/* Wait for sync */}
    1df4:	4b0c      	ldr	r3, [pc, #48]	; (1e28 <Timestamp_Init+0x70>)
    1df6:	7a9b      	ldrb	r3, [r3, #10]
    1df8:	09db      	lsrs	r3, r3, #7
    1dfa:	d1fb      	bne.n	1df4 <Timestamp_Init+0x3c>
    RTC->MODE0.COUNT.reg = RTC_MINIMUM_TIMESTAMP;
    1dfc:	4a0b      	ldr	r2, [pc, #44]	; (1e2c <Timestamp_Init+0x74>)
    1dfe:	4b0a      	ldr	r3, [pc, #40]	; (1e28 <Timestamp_Init+0x70>)
    1e00:	611a      	str	r2, [r3, #16]
    //// Set continuous update
    //RTC->MODE0.READREQ.reg = RTC_READREQ_RREQ | RTC_READREQ_RCONT;

    // Enable the peripheral
    while(RTC->MODE0.STATUS.bit.SYNCBUSY){/* Wait for sync */}
    1e02:	4b09      	ldr	r3, [pc, #36]	; (1e28 <Timestamp_Init+0x70>)
    1e04:	7a9b      	ldrb	r3, [r3, #10]
    1e06:	09db      	lsrs	r3, r3, #7
    1e08:	d1fb      	bne.n	1e02 <Timestamp_Init+0x4a>
    RTC->MODE0.CTRL.bit.ENABLE = 1;
    1e0a:	4a07      	ldr	r2, [pc, #28]	; (1e28 <Timestamp_Init+0x70>)
    1e0c:	8813      	ldrh	r3, [r2, #0]
    1e0e:	2102      	movs	r1, #2
    1e10:	430b      	orrs	r3, r1
    1e12:	8013      	strh	r3, [r2, #0]

    // Set status flag
    s_eRtcStatus = RTC_STATUS_INIT;
    1e14:	2200      	movs	r2, #0
    1e16:	4b06      	ldr	r3, [pc, #24]	; (1e30 <Timestamp_Init+0x78>)
    1e18:	701a      	strb	r2, [r3, #0]
}
    1e1a:	4770      	bx	lr
    1e1c:	40000400 	.word	0x40000400
    1e20:	00004102 	.word	0x00004102
    1e24:	40000c00 	.word	0x40000c00
    1e28:	40001400 	.word	0x40001400
    1e2c:	5e0be100 	.word	0x5e0be100
    1e30:	20000861 	.word	0x20000861

00001e34 <Timestamp_SetTimestamp>:
 *  @param[out] None
 *  @return     true=success, false=failure
 ******************************************************************************/
bool Timestamp_SetTimestamp(uint32_t timestamp) {
    // Determine if the timestamp passed in is valid
    if (timestamp<RTC_MINIMUM_TIMESTAMP) {
    1e34:	4b09      	ldr	r3, [pc, #36]	; (1e5c <Timestamp_SetTimestamp+0x28>)
    1e36:	4298      	cmp	r0, r3
    1e38:	d90a      	bls.n	1e50 <Timestamp_SetTimestamp+0x1c>
        s_eRtcStatus = RTC_STATUS_ERROR;
        return false;
    }

    while(RTC->MODE0.STATUS.bit.SYNCBUSY){/* Wait for sync */}
    1e3a:	4b09      	ldr	r3, [pc, #36]	; (1e60 <Timestamp_SetTimestamp+0x2c>)
    1e3c:	7a9b      	ldrb	r3, [r3, #10]
    1e3e:	09db      	lsrs	r3, r3, #7
    1e40:	d1fb      	bne.n	1e3a <Timestamp_SetTimestamp+0x6>
    RTC->MODE0.COUNT.reg = timestamp;
    1e42:	4b07      	ldr	r3, [pc, #28]	; (1e60 <Timestamp_SetTimestamp+0x2c>)
    1e44:	6118      	str	r0, [r3, #16]

    s_eRtcStatus = RTC_STATUS_SYNC_SUCCESS;
    1e46:	2202      	movs	r2, #2
    1e48:	4b06      	ldr	r3, [pc, #24]	; (1e64 <Timestamp_SetTimestamp+0x30>)
    1e4a:	701a      	strb	r2, [r3, #0]
    return true;
    1e4c:	2001      	movs	r0, #1
}
    1e4e:	4770      	bx	lr
        s_eRtcStatus = RTC_STATUS_ERROR;
    1e50:	2201      	movs	r2, #1
    1e52:	4b04      	ldr	r3, [pc, #16]	; (1e64 <Timestamp_SetTimestamp+0x30>)
    1e54:	701a      	strb	r2, [r3, #0]
        return false;
    1e56:	2000      	movs	r0, #0
    1e58:	e7f9      	b.n	1e4e <Timestamp_SetTimestamp+0x1a>
    1e5a:	46c0      	nop			; (mov r8, r8)
    1e5c:	5e0be0ff 	.word	0x5e0be0ff
    1e60:	40001400 	.word	0x40001400
    1e64:	20000861 	.word	0x20000861

00001e68 <Timestamp_GetTimestamp>:
 *  @param[out] uint32  Current system time in timestamp (seconds from Unix epoch)
 *  @return     Nothing
 ******************************************************************************/
void Timestamp_GetTimestamp(uint32_t *timestamp) {
    // Request read
    RTC->MODE0.READREQ.bit.RREQ = 1;
    1e68:	4a06      	ldr	r2, [pc, #24]	; (1e84 <Timestamp_GetTimestamp+0x1c>)
    1e6a:	8851      	ldrh	r1, [r2, #2]
    1e6c:	4b06      	ldr	r3, [pc, #24]	; (1e88 <Timestamp_GetTimestamp+0x20>)
    1e6e:	430b      	orrs	r3, r1
    1e70:	8053      	strh	r3, [r2, #2]
    while(RTC->MODE0.STATUS.bit.SYNCBUSY){/* Wait for sync */}
    1e72:	4b04      	ldr	r3, [pc, #16]	; (1e84 <Timestamp_GetTimestamp+0x1c>)
    1e74:	7a9b      	ldrb	r3, [r3, #10]
    1e76:	09db      	lsrs	r3, r3, #7
    1e78:	d1fb      	bne.n	1e72 <Timestamp_GetTimestamp+0xa>

    // Pull the current count (in seconds) directly from the counter
    *timestamp = RTC->MODE0.COUNT.reg;
    1e7a:	4b02      	ldr	r3, [pc, #8]	; (1e84 <Timestamp_GetTimestamp+0x1c>)
    1e7c:	691b      	ldr	r3, [r3, #16]
    1e7e:	6003      	str	r3, [r0, #0]
}
    1e80:	4770      	bx	lr
    1e82:	46c0      	nop			; (mov r8, r8)
    1e84:	40001400 	.word	0x40001400
    1e88:	ffff8000 	.word	0xffff8000

00001e8c <Watchdog_Init>:
/** INCLUDES ******************************************************************/
#include "driver_init.h"
#include "Watchdog.h"
#include <App/DcaApp.h>

void Watchdog_Init() {
    1e8c:	b510      	push	{r4, lr}
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
    1e8e:	4b10      	ldr	r3, [pc, #64]	; (1ed0 <Watchdog_Init+0x44>)
    1e90:	681b      	ldr	r3, [r3, #0]
    1e92:	2b00      	cmp	r3, #0
    1e94:	d018      	beq.n	1ec8 <Watchdog_Init+0x3c>
    1e96:	2001      	movs	r0, #1
    1e98:	226f      	movs	r2, #111	; 0x6f
    1e9a:	490e      	ldr	r1, [pc, #56]	; (1ed4 <Watchdog_Init+0x48>)
    1e9c:	4b0e      	ldr	r3, [pc, #56]	; (1ed8 <Watchdog_Init+0x4c>)
    1e9e:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    1ea0:	4c0b      	ldr	r4, [pc, #44]	; (1ed0 <Watchdog_Init+0x44>)
    1ea2:	22fa      	movs	r2, #250	; 0xfa
    1ea4:	0152      	lsls	r2, r2, #5
    1ea6:	2180      	movs	r1, #128	; 0x80
    1ea8:	00c9      	lsls	r1, r1, #3
    1eaa:	0020      	movs	r0, r4
    1eac:	4b0b      	ldr	r3, [pc, #44]	; (1edc <Watchdog_Init+0x50>)
    1eae:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    1eb0:	6823      	ldr	r3, [r4, #0]
    1eb2:	2b00      	cmp	r3, #0
    1eb4:	d00a      	beq.n	1ecc <Watchdog_Init+0x40>
    1eb6:	2001      	movs	r0, #1
    1eb8:	228c      	movs	r2, #140	; 0x8c
    1eba:	4906      	ldr	r1, [pc, #24]	; (1ed4 <Watchdog_Init+0x48>)
    1ebc:	4b06      	ldr	r3, [pc, #24]	; (1ed8 <Watchdog_Init+0x4c>)
    1ebe:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
    1ec0:	4803      	ldr	r0, [pc, #12]	; (1ed0 <Watchdog_Init+0x44>)
    1ec2:	4b07      	ldr	r3, [pc, #28]	; (1ee0 <Watchdog_Init+0x54>)
    1ec4:	4798      	blx	r3
	timeout_period = WATCHDOG_TIMEOUT_MS; // 8s
	wdt_set_timeout_period(&WDT_0, RT_CLOCK_FREQUENCY_HZ, timeout_period);

	// Enable the dog.
	wdt_enable(&WDT_0);
}
    1ec6:	bd10      	pop	{r4, pc}
	ASSERT(wdt && wdt->dev.hw);
    1ec8:	2000      	movs	r0, #0
    1eca:	e7e5      	b.n	1e98 <Watchdog_Init+0xc>
	ASSERT(wdt && wdt->dev.hw);
    1ecc:	2000      	movs	r0, #0
    1ece:	e7f3      	b.n	1eb8 <Watchdog_Init+0x2c>
    1ed0:	20003fa8 	.word	0x20003fa8
    1ed4:	00008b18 	.word	0x00008b18
    1ed8:	00002d7d 	.word	0x00002d7d
    1edc:	00003aad 	.word	0x00003aad
    1ee0:	00003bc9 	.word	0x00003bc9

00001ee4 <Watchdog_Feed>:

void Watchdog_Feed(void) {
    1ee4:	b510      	push	{r4, lr}
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    1ee6:	4b07      	ldr	r3, [pc, #28]	; (1f04 <Watchdog_Feed+0x20>)
    1ee8:	681b      	ldr	r3, [r3, #0]
    1eea:	2b00      	cmp	r3, #0
    1eec:	d008      	beq.n	1f00 <Watchdog_Feed+0x1c>
    1eee:	2001      	movs	r0, #1
    1ef0:	22a9      	movs	r2, #169	; 0xa9
    1ef2:	4905      	ldr	r1, [pc, #20]	; (1f08 <Watchdog_Feed+0x24>)
    1ef4:	4b05      	ldr	r3, [pc, #20]	; (1f0c <Watchdog_Feed+0x28>)
    1ef6:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
    1ef8:	4802      	ldr	r0, [pc, #8]	; (1f04 <Watchdog_Feed+0x20>)
    1efa:	4b05      	ldr	r3, [pc, #20]	; (1f10 <Watchdog_Feed+0x2c>)
    1efc:	4798      	blx	r3
	wdt_feed(&WDT_0);
    1efe:	bd10      	pop	{r4, pc}
	ASSERT(wdt && wdt->dev.hw);
    1f00:	2000      	movs	r0, #0
    1f02:	e7f5      	b.n	1ef0 <Watchdog_Feed+0xc>
    1f04:	20003fa8 	.word	0x20003fa8
    1f08:	00008b18 	.word	0x00008b18
    1f0c:	00002d7d 	.word	0x00002d7d
    1f10:	00003c05 	.word	0x00003c05

00001f14 <Wifi_Init>:


/** PUBLIC FUNCTION IMPLEMENTATIONS *******************************************/
int8_t Wifi_Init(void) {
    return 0;
}
    1f14:	2000      	movs	r0, #0
    1f16:	4770      	bx	lr

00001f18 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1f18:	e7fe      	b.n	1f18 <Dummy_Handler>
	...

00001f1c <Reset_Handler>:
{
    1f1c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    1f1e:	4a12      	ldr	r2, [pc, #72]	; (1f68 <Reset_Handler+0x4c>)
    1f20:	4b12      	ldr	r3, [pc, #72]	; (1f6c <Reset_Handler+0x50>)
    1f22:	429a      	cmp	r2, r3
    1f24:	d009      	beq.n	1f3a <Reset_Handler+0x1e>
    1f26:	4b11      	ldr	r3, [pc, #68]	; (1f6c <Reset_Handler+0x50>)
    1f28:	4a0f      	ldr	r2, [pc, #60]	; (1f68 <Reset_Handler+0x4c>)
    1f2a:	e003      	b.n	1f34 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    1f2c:	6811      	ldr	r1, [r2, #0]
    1f2e:	6019      	str	r1, [r3, #0]
    1f30:	3304      	adds	r3, #4
    1f32:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1f34:	490e      	ldr	r1, [pc, #56]	; (1f70 <Reset_Handler+0x54>)
    1f36:	428b      	cmp	r3, r1
    1f38:	d3f8      	bcc.n	1f2c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    1f3a:	4b0e      	ldr	r3, [pc, #56]	; (1f74 <Reset_Handler+0x58>)
    1f3c:	e002      	b.n	1f44 <Reset_Handler+0x28>
                *pDest++ = 0;
    1f3e:	2200      	movs	r2, #0
    1f40:	601a      	str	r2, [r3, #0]
    1f42:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    1f44:	4a0c      	ldr	r2, [pc, #48]	; (1f78 <Reset_Handler+0x5c>)
    1f46:	4293      	cmp	r3, r2
    1f48:	d3f9      	bcc.n	1f3e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1f4a:	4a0c      	ldr	r2, [pc, #48]	; (1f7c <Reset_Handler+0x60>)
    1f4c:	21ff      	movs	r1, #255	; 0xff
    1f4e:	4b0c      	ldr	r3, [pc, #48]	; (1f80 <Reset_Handler+0x64>)
    1f50:	438b      	bics	r3, r1
    1f52:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1f54:	4a0b      	ldr	r2, [pc, #44]	; (1f84 <Reset_Handler+0x68>)
    1f56:	6851      	ldr	r1, [r2, #4]
    1f58:	2380      	movs	r3, #128	; 0x80
    1f5a:	430b      	orrs	r3, r1
    1f5c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1f5e:	4b0a      	ldr	r3, [pc, #40]	; (1f88 <Reset_Handler+0x6c>)
    1f60:	4798      	blx	r3
        main();
    1f62:	4b0a      	ldr	r3, [pc, #40]	; (1f8c <Reset_Handler+0x70>)
    1f64:	4798      	blx	r3
    1f66:	e7fe      	b.n	1f66 <Reset_Handler+0x4a>
    1f68:	00009518 	.word	0x00009518
    1f6c:	20000000 	.word	0x20000000
    1f70:	200001d4 	.word	0x200001d4
    1f74:	200001d4 	.word	0x200001d4
    1f78:	200040c8 	.word	0x200040c8
    1f7c:	e000ed00 	.word	0xe000ed00
    1f80:	00000000 	.word	0x00000000
    1f84:	41004000 	.word	0x41004000
    1f88:	00007705 	.word	0x00007705
    1f8c:	00003c3d 	.word	0x00003c3d

00001f90 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
    1f90:	b510      	push	{r4, lr}
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    1f92:	4a08      	ldr	r2, [pc, #32]	; (1fb4 <TIMER_0_init+0x24>)
    1f94:	6a11      	ldr	r1, [r2, #32]
    1f96:	2380      	movs	r3, #128	; 0x80
    1f98:	005b      	lsls	r3, r3, #1
    1f9a:	430b      	orrs	r3, r1
    1f9c:	6213      	str	r3, [r2, #32]
    1f9e:	4a06      	ldr	r2, [pc, #24]	; (1fb8 <TIMER_0_init+0x28>)
    1fa0:	4b06      	ldr	r3, [pc, #24]	; (1fbc <TIMER_0_init+0x2c>)
    1fa2:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC0);
	_gclk_enable_channel(TC0_GCLK_ID, CONF_GCLK_TC0_SRC);

	timer_init(&TIMER_0, TC0, _tc_get_timer());
    1fa4:	4b06      	ldr	r3, [pc, #24]	; (1fc0 <TIMER_0_init+0x30>)
    1fa6:	4798      	blx	r3
    1fa8:	0002      	movs	r2, r0
    1faa:	4906      	ldr	r1, [pc, #24]	; (1fc4 <TIMER_0_init+0x34>)
    1fac:	4806      	ldr	r0, [pc, #24]	; (1fc8 <TIMER_0_init+0x38>)
    1fae:	4b07      	ldr	r3, [pc, #28]	; (1fcc <TIMER_0_init+0x3c>)
    1fb0:	4798      	blx	r3
}
    1fb2:	bd10      	pop	{r4, pc}
    1fb4:	40000400 	.word	0x40000400
    1fb8:	00004113 	.word	0x00004113
    1fbc:	40000c00 	.word	0x40000c00
    1fc0:	000039dd 	.word	0x000039dd
    1fc4:	42002000 	.word	0x42002000
    1fc8:	20003fe0 	.word	0x20003fe0
    1fcc:	00002c21 	.word	0x00002c21

00001fd0 <SAMPLE_TIMER_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void SAMPLE_TIMER_init(void)
{
    1fd0:	b510      	push	{r4, lr}
    1fd2:	4a08      	ldr	r2, [pc, #32]	; (1ff4 <SAMPLE_TIMER_init+0x24>)
    1fd4:	6a11      	ldr	r1, [r2, #32]
    1fd6:	2380      	movs	r3, #128	; 0x80
    1fd8:	00db      	lsls	r3, r3, #3
    1fda:	430b      	orrs	r3, r1
    1fdc:	6213      	str	r3, [r2, #32]
    1fde:	4a06      	ldr	r2, [pc, #24]	; (1ff8 <SAMPLE_TIMER_init+0x28>)
    1fe0:	4b06      	ldr	r3, [pc, #24]	; (1ffc <SAMPLE_TIMER_init+0x2c>)
    1fe2:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC2);
	_gclk_enable_channel(TC2_GCLK_ID, CONF_GCLK_TC2_SRC);

	timer_init(&SAMPLE_TIMER, TC2, _tc_get_timer());
    1fe4:	4b06      	ldr	r3, [pc, #24]	; (2000 <STACK_SIZE>)
    1fe6:	4798      	blx	r3
    1fe8:	0002      	movs	r2, r0
    1fea:	4906      	ldr	r1, [pc, #24]	; (2004 <STACK_SIZE+0x4>)
    1fec:	4806      	ldr	r0, [pc, #24]	; (2008 <STACK_SIZE+0x8>)
    1fee:	4b07      	ldr	r3, [pc, #28]	; (200c <STACK_SIZE+0xc>)
    1ff0:	4798      	blx	r3
}
    1ff2:	bd10      	pop	{r4, pc}
    1ff4:	40000400 	.word	0x40000400
    1ff8:	00004014 	.word	0x00004014
    1ffc:	40000c00 	.word	0x40000c00
    2000:	000039dd 	.word	0x000039dd
    2004:	42002800 	.word	0x42002800
    2008:	20003f70 	.word	0x20003f70
    200c:	00002c21 	.word	0x00002c21

00002010 <TICK_TIMER_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TICK_TIMER_init(void)
{
    2010:	b510      	push	{r4, lr}
    2012:	4a08      	ldr	r2, [pc, #32]	; (2034 <TICK_TIMER_init+0x24>)
    2014:	6a11      	ldr	r1, [r2, #32]
    2016:	2380      	movs	r3, #128	; 0x80
    2018:	015b      	lsls	r3, r3, #5
    201a:	430b      	orrs	r3, r1
    201c:	6213      	str	r3, [r2, #32]
    201e:	4a06      	ldr	r2, [pc, #24]	; (2038 <TICK_TIMER_init+0x28>)
    2020:	4b06      	ldr	r3, [pc, #24]	; (203c <TICK_TIMER_init+0x2c>)
    2022:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC4);
	_gclk_enable_channel(TC4_GCLK_ID, CONF_GCLK_TC4_SRC);

	timer_init(&TICK_TIMER, TC4, _tc_get_timer());
    2024:	4b06      	ldr	r3, [pc, #24]	; (2040 <TICK_TIMER_init+0x30>)
    2026:	4798      	blx	r3
    2028:	0002      	movs	r2, r0
    202a:	4906      	ldr	r1, [pc, #24]	; (2044 <TICK_TIMER_init+0x34>)
    202c:	4806      	ldr	r0, [pc, #24]	; (2048 <TICK_TIMER_init+0x38>)
    202e:	4b07      	ldr	r3, [pc, #28]	; (204c <TICK_TIMER_init+0x3c>)
    2030:	4798      	blx	r3
}
    2032:	bd10      	pop	{r4, pc}
    2034:	40000400 	.word	0x40000400
    2038:	00004015 	.word	0x00004015
    203c:	40000c00 	.word	0x40000c00
    2040:	000039dd 	.word	0x000039dd
    2044:	42003000 	.word	0x42003000
    2048:	20003fac 	.word	0x20003fac
    204c:	00002c21 	.word	0x00002c21

00002050 <EXTERNAL_IRQ_0_init>:
{
    2050:	b5f0      	push	{r4, r5, r6, r7, lr}
    2052:	46c6      	mov	lr, r8
    2054:	b500      	push	{lr}
    2056:	4a34      	ldr	r2, [pc, #208]	; (2128 <EXTERNAL_IRQ_0_init+0xd8>)
    2058:	4b34      	ldr	r3, [pc, #208]	; (212c <EXTERNAL_IRQ_0_init+0xdc>)
    205a:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    205c:	25c0      	movs	r5, #192	; 0xc0
    205e:	05ed      	lsls	r5, r5, #23
    2060:	2310      	movs	r3, #16
    2062:	606b      	str	r3, [r5, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2064:	4b32      	ldr	r3, [pc, #200]	; (2130 <EXTERNAL_IRQ_0_init+0xe0>)
    2066:	4a33      	ldr	r2, [pc, #204]	; (2134 <EXTERNAL_IRQ_0_init+0xe4>)
    2068:	629a      	str	r2, [r3, #40]	; 0x28
    206a:	4a33      	ldr	r2, [pc, #204]	; (2138 <EXTERNAL_IRQ_0_init+0xe8>)
    206c:	4690      	mov	r8, r2
    206e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2070:	2744      	movs	r7, #68	; 0x44
    2072:	5dd9      	ldrb	r1, [r3, r7]
    2074:	2204      	movs	r2, #4
    2076:	4391      	bics	r1, r2
    2078:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    207a:	5dd9      	ldrb	r1, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    207c:	2401      	movs	r4, #1
    207e:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2080:	2001      	movs	r0, #1
    2082:	4301      	orrs	r1, r0
    2084:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2086:	55d9      	strb	r1, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2088:	2132      	movs	r1, #50	; 0x32
    208a:	468c      	mov	ip, r1
    208c:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    208e:	3f35      	subs	r7, #53	; 0x35
    2090:	43b9      	bics	r1, r7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2092:	4666      	mov	r6, ip
    2094:	5599      	strb	r1, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2096:	2140      	movs	r1, #64	; 0x40
    2098:	6069      	str	r1, [r5, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    209a:	4928      	ldr	r1, [pc, #160]	; (213c <EXTERNAL_IRQ_0_init+0xec>)
    209c:	6299      	str	r1, [r3, #40]	; 0x28
    209e:	4641      	mov	r1, r8
    20a0:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    20a2:	2146      	movs	r1, #70	; 0x46
    20a4:	468c      	mov	ip, r1
    20a6:	5c59      	ldrb	r1, [r3, r1]
    20a8:	4391      	bics	r1, r2
    20aa:	4666      	mov	r6, ip
    20ac:	5599      	strb	r1, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    20ae:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    20b0:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    20b2:	4301      	orrs	r1, r0
    20b4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    20b6:	5599      	strb	r1, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    20b8:	2133      	movs	r1, #51	; 0x33
    20ba:	468c      	mov	ip, r1
    20bc:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    20be:	43b9      	bics	r1, r7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    20c0:	4666      	mov	r6, ip
    20c2:	5599      	strb	r1, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    20c4:	2180      	movs	r1, #128	; 0x80
    20c6:	0549      	lsls	r1, r1, #21
    20c8:	6069      	str	r1, [r5, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    20ca:	491d      	ldr	r1, [pc, #116]	; (2140 <EXTERNAL_IRQ_0_init+0xf0>)
    20cc:	6299      	str	r1, [r3, #40]	; 0x28
    20ce:	491d      	ldr	r1, [pc, #116]	; (2144 <EXTERNAL_IRQ_0_init+0xf4>)
    20d0:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    20d2:	215c      	movs	r1, #92	; 0x5c
    20d4:	468c      	mov	ip, r1
    20d6:	5c59      	ldrb	r1, [r3, r1]
    20d8:	4391      	bics	r1, r2
    20da:	4666      	mov	r6, ip
    20dc:	5599      	strb	r1, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    20de:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    20e0:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    20e2:	4301      	orrs	r1, r0
    20e4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    20e6:	5599      	strb	r1, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    20e8:	213e      	movs	r1, #62	; 0x3e
    20ea:	468c      	mov	ip, r1
    20ec:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    20ee:	43b9      	bics	r1, r7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    20f0:	4666      	mov	r6, ip
    20f2:	5599      	strb	r1, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    20f4:	2180      	movs	r1, #128	; 0x80
    20f6:	0109      	lsls	r1, r1, #4
    20f8:	6069      	str	r1, [r5, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    20fa:	4913      	ldr	r1, [pc, #76]	; (2148 <EXTERNAL_IRQ_0_init+0xf8>)
    20fc:	6299      	str	r1, [r3, #40]	; 0x28
    20fe:	4641      	mov	r1, r8
    2100:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2102:	214b      	movs	r1, #75	; 0x4b
    2104:	5c5d      	ldrb	r5, [r3, r1]
    2106:	4395      	bics	r5, r2
    2108:	545d      	strb	r5, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    210a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    210c:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    210e:	4302      	orrs	r2, r0
    2110:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2112:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2114:	3916      	subs	r1, #22
    2116:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2118:	200f      	movs	r0, #15
    211a:	4002      	ands	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    211c:	545a      	strb	r2, [r3, r1]
	ext_irq_init();
    211e:	4b0b      	ldr	r3, [pc, #44]	; (214c <EXTERNAL_IRQ_0_init+0xfc>)
    2120:	4798      	blx	r3
}
    2122:	bc04      	pop	{r2}
    2124:	4690      	mov	r8, r2
    2126:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2128:	00004003 	.word	0x00004003
    212c:	40000c00 	.word	0x40000c00
    2130:	41004400 	.word	0x41004400
    2134:	40020010 	.word	0x40020010
    2138:	c0020000 	.word	0xc0020000
    213c:	40020040 	.word	0x40020040
    2140:	40020000 	.word	0x40020000
    2144:	c0021000 	.word	0xc0021000
    2148:	40020800 	.word	0x40020800
    214c:	000025f1 	.word	0x000025f1

00002150 <FLASH_0_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
    2150:	4a02      	ldr	r2, [pc, #8]	; (215c <FLASH_0_CLOCK_init+0xc>)
    2152:	69d3      	ldr	r3, [r2, #28]
    2154:	2104      	movs	r1, #4
    2156:	430b      	orrs	r3, r1
    2158:	61d3      	str	r3, [r2, #28]
}
    215a:	4770      	bx	lr
    215c:	40000400 	.word	0x40000400

00002160 <FLASH_0_init>:
{
    2160:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
    2162:	4b03      	ldr	r3, [pc, #12]	; (2170 <FLASH_0_init+0x10>)
    2164:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
    2166:	4903      	ldr	r1, [pc, #12]	; (2174 <FLASH_0_init+0x14>)
    2168:	4803      	ldr	r0, [pc, #12]	; (2178 <FLASH_0_init+0x18>)
    216a:	4b04      	ldr	r3, [pc, #16]	; (217c <FLASH_0_init+0x1c>)
    216c:	4798      	blx	r3
}
    216e:	bd10      	pop	{r4, pc}
    2170:	00002151 	.word	0x00002151
    2174:	41004000 	.word	0x41004000
    2178:	20003f8c 	.word	0x20003f8c
    217c:	0000276d 	.word	0x0000276d

00002180 <WIRELESS_SPI_PORT_init>:
{
    2180:	b5f0      	push	{r4, r5, r6, r7, lr}
    2182:	46c6      	mov	lr, r8
    2184:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2186:	20c0      	movs	r0, #192	; 0xc0
    2188:	05c0      	lsls	r0, r0, #23
    218a:	2380      	movs	r3, #128	; 0x80
    218c:	025b      	lsls	r3, r3, #9
    218e:	6143      	str	r3, [r0, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2190:	6083      	str	r3, [r0, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2192:	4b26      	ldr	r3, [pc, #152]	; (222c <WIRELESS_SPI_PORT_init+0xac>)
    2194:	2180      	movs	r1, #128	; 0x80
    2196:	05c9      	lsls	r1, r1, #23
    2198:	6299      	str	r1, [r3, #40]	; 0x28
    219a:	4a25      	ldr	r2, [pc, #148]	; (2230 <WIRELESS_SPI_PORT_init+0xb0>)
    219c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    219e:	2450      	movs	r4, #80	; 0x50
    21a0:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    21a2:	2501      	movs	r5, #1
    21a4:	46a8      	mov	r8, r5
    21a6:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    21a8:	46ac      	mov	ip, r5
    21aa:	4665      	mov	r5, ip
    21ac:	432a      	orrs	r2, r5
    21ae:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    21b0:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    21b2:	2738      	movs	r7, #56	; 0x38
    21b4:	5dda      	ldrb	r2, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    21b6:	3c41      	subs	r4, #65	; 0x41
    21b8:	43a2      	bics	r2, r4
	tmp |= PORT_PMUX_PMUXE(data);
    21ba:	2402      	movs	r4, #2
    21bc:	4322      	orrs	r2, r4
    21be:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    21c0:	55da      	strb	r2, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    21c2:	2580      	movs	r5, #128	; 0x80
    21c4:	02ad      	lsls	r5, r5, #10
    21c6:	6045      	str	r5, [r0, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    21c8:	4a1a      	ldr	r2, [pc, #104]	; (2234 <WIRELESS_SPI_PORT_init+0xb4>)
    21ca:	629a      	str	r2, [r3, #40]	; 0x28
    21cc:	4a1a      	ldr	r2, [pc, #104]	; (2238 <WIRELESS_SPI_PORT_init+0xb8>)
    21ce:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    21d0:	6045      	str	r5, [r0, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    21d2:	2451      	movs	r4, #81	; 0x51
    21d4:	5d1a      	ldrb	r2, [r3, r4]
    21d6:	2604      	movs	r6, #4
    21d8:	4332      	orrs	r2, r6
    21da:	b2d2      	uxtb	r2, r2
    21dc:	551a      	strb	r2, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    21de:	6185      	str	r5, [r0, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    21e0:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    21e2:	4645      	mov	r5, r8
    21e4:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    21e6:	4665      	mov	r5, ip
    21e8:	432a      	orrs	r2, r5
    21ea:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    21ec:	551a      	strb	r2, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    21ee:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    21f0:	260f      	movs	r6, #15
    21f2:	4034      	ands	r4, r6
	tmp |= PORT_PMUX_PMUXO(data);
    21f4:	2520      	movs	r5, #32
    21f6:	432c      	orrs	r4, r5
    21f8:	b2e4      	uxtb	r4, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    21fa:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    21fc:	2280      	movs	r2, #128	; 0x80
    21fe:	0312      	lsls	r2, r2, #12
    2200:	6182      	str	r2, [r0, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2202:	6082      	str	r2, [r0, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2204:	6299      	str	r1, [r3, #40]	; 0x28
    2206:	4a0d      	ldr	r2, [pc, #52]	; (223c <WIRELESS_SPI_PORT_init+0xbc>)
    2208:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    220a:	2253      	movs	r2, #83	; 0x53
    220c:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    220e:	4640      	mov	r0, r8
    2210:	4381      	bics	r1, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2212:	4660      	mov	r0, ip
    2214:	4301      	orrs	r1, r0
    2216:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2218:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    221a:	2139      	movs	r1, #57	; 0x39
    221c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    221e:	4032      	ands	r2, r6
	tmp |= PORT_PMUX_PMUXO(data);
    2220:	432a      	orrs	r2, r5
    2222:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2224:	545a      	strb	r2, [r3, r1]
}
    2226:	bc04      	pop	{r2}
    2228:	4690      	mov	r8, r2
    222a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    222c:	41004400 	.word	0x41004400
    2230:	c0000001 	.word	0xc0000001
    2234:	40020000 	.word	0x40020000
    2238:	c0020002 	.word	0xc0020002
    223c:	c0000008 	.word	0xc0000008

00002240 <WIRELESS_SPI_CLOCK_init>:
		PM->APBCMASK.reg |= 1 << peripheral;
    2240:	4a04      	ldr	r2, [pc, #16]	; (2254 <WIRELESS_SPI_CLOCK_init+0x14>)
    2242:	6a13      	ldr	r3, [r2, #32]
    2244:	2108      	movs	r1, #8
    2246:	430b      	orrs	r3, r1
    2248:	6213      	str	r3, [r2, #32]
    224a:	4a03      	ldr	r2, [pc, #12]	; (2258 <WIRELESS_SPI_CLOCK_init+0x18>)
    224c:	4b03      	ldr	r3, [pc, #12]	; (225c <WIRELESS_SPI_CLOCK_init+0x1c>)
    224e:	805a      	strh	r2, [r3, #2]
}
    2250:	4770      	bx	lr
    2252:	46c0      	nop			; (mov r8, r8)
    2254:	40000400 	.word	0x40000400
    2258:	0000400e 	.word	0x0000400e
    225c:	40000c00 	.word	0x40000c00

00002260 <WIRELESS_SPI_init>:
{
    2260:	b510      	push	{r4, lr}
	WIRELESS_SPI_CLOCK_init();
    2262:	4b04      	ldr	r3, [pc, #16]	; (2274 <WIRELESS_SPI_init+0x14>)
    2264:	4798      	blx	r3
	spi_m_sync_init(&WIRELESS_SPI, SERCOM1);
    2266:	4904      	ldr	r1, [pc, #16]	; (2278 <WIRELESS_SPI_init+0x18>)
    2268:	4804      	ldr	r0, [pc, #16]	; (227c <WIRELESS_SPI_init+0x1c>)
    226a:	4b05      	ldr	r3, [pc, #20]	; (2280 <WIRELESS_SPI_init+0x20>)
    226c:	4798      	blx	r3
	WIRELESS_SPI_PORT_init();
    226e:	4b05      	ldr	r3, [pc, #20]	; (2284 <WIRELESS_SPI_init+0x24>)
    2270:	4798      	blx	r3
}
    2272:	bd10      	pop	{r4, pc}
    2274:	00002241 	.word	0x00002241
    2278:	42000c00 	.word	0x42000c00
    227c:	20003fc8 	.word	0x20003fc8
    2280:	000029cd 	.word	0x000029cd
    2284:	00002181 	.word	0x00002181

00002288 <ETHERNET_SPI_PORT_init>:
{
    2288:	b5f0      	push	{r4, r5, r6, r7, lr}
    228a:	46c6      	mov	lr, r8
    228c:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    228e:	24c0      	movs	r4, #192	; 0xc0
    2290:	05e4      	lsls	r4, r4, #23
    2292:	2380      	movs	r3, #128	; 0x80
    2294:	03db      	lsls	r3, r3, #15
    2296:	6063      	str	r3, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2298:	4b24      	ldr	r3, [pc, #144]	; (232c <ETHERNET_SPI_PORT_init+0xa4>)
    229a:	4a25      	ldr	r2, [pc, #148]	; (2330 <ETHERNET_SPI_PORT_init+0xa8>)
    229c:	629a      	str	r2, [r3, #40]	; 0x28
    229e:	4a25      	ldr	r2, [pc, #148]	; (2334 <ETHERNET_SPI_PORT_init+0xac>)
    22a0:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    22a2:	2156      	movs	r1, #86	; 0x56
    22a4:	5c5a      	ldrb	r2, [r3, r1]
    22a6:	2004      	movs	r0, #4
    22a8:	4382      	bics	r2, r0
    22aa:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    22ac:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    22ae:	2601      	movs	r6, #1
    22b0:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    22b2:	2501      	movs	r5, #1
    22b4:	432a      	orrs	r2, r5
    22b6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    22b8:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    22ba:	391b      	subs	r1, #27
    22bc:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    22be:	300b      	adds	r0, #11
    22c0:	4684      	mov	ip, r0
    22c2:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
    22c4:	2702      	movs	r7, #2
    22c6:	433a      	orrs	r2, r7
    22c8:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    22ca:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    22cc:	2280      	movs	r2, #128	; 0x80
    22ce:	0452      	lsls	r2, r2, #17
    22d0:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    22d2:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    22d4:	2280      	movs	r2, #128	; 0x80
    22d6:	05d2      	lsls	r2, r2, #23
    22d8:	4690      	mov	r8, r2
    22da:	629a      	str	r2, [r3, #40]	; 0x28
    22dc:	4916      	ldr	r1, [pc, #88]	; (2338 <ETHERNET_SPI_PORT_init+0xb0>)
    22de:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    22e0:	2158      	movs	r1, #88	; 0x58
    22e2:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    22e4:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    22e6:	4328      	orrs	r0, r5
    22e8:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    22ea:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    22ec:	203c      	movs	r0, #60	; 0x3c
    22ee:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    22f0:	4662      	mov	r2, ip
    22f2:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    22f4:	4339      	orrs	r1, r7
    22f6:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    22f8:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    22fa:	2180      	movs	r1, #128	; 0x80
    22fc:	0489      	lsls	r1, r1, #18
    22fe:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2300:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2302:	4642      	mov	r2, r8
    2304:	629a      	str	r2, [r3, #40]	; 0x28
    2306:	4a0d      	ldr	r2, [pc, #52]	; (233c <ETHERNET_SPI_PORT_init+0xb4>)
    2308:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    230a:	2159      	movs	r1, #89	; 0x59
    230c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    230e:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2310:	432a      	orrs	r2, r5
    2312:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2314:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2316:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2318:	394a      	subs	r1, #74	; 0x4a
    231a:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    231c:	2120      	movs	r1, #32
    231e:	430a      	orrs	r2, r1
    2320:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2322:	541a      	strb	r2, [r3, r0]
}
    2324:	bc04      	pop	{r2}
    2326:	4690      	mov	r8, r2
    2328:	bdf0      	pop	{r4, r5, r6, r7, pc}
    232a:	46c0      	nop			; (mov r8, r8)
    232c:	41004400 	.word	0x41004400
    2330:	40020000 	.word	0x40020000
    2334:	c0020040 	.word	0xc0020040
    2338:	c0000100 	.word	0xc0000100
    233c:	c0000200 	.word	0xc0000200

00002340 <ETHERNET_SPI_CLOCK_init>:
    2340:	4a04      	ldr	r2, [pc, #16]	; (2354 <ETHERNET_SPI_CLOCK_init+0x14>)
    2342:	6a13      	ldr	r3, [r2, #32]
    2344:	2120      	movs	r1, #32
    2346:	430b      	orrs	r3, r1
    2348:	6213      	str	r3, [r2, #32]
    234a:	4a03      	ldr	r2, [pc, #12]	; (2358 <ETHERNET_SPI_CLOCK_init+0x18>)
    234c:	4b03      	ldr	r3, [pc, #12]	; (235c <ETHERNET_SPI_CLOCK_init+0x1c>)
    234e:	805a      	strh	r2, [r3, #2]
}
    2350:	4770      	bx	lr
    2352:	46c0      	nop			; (mov r8, r8)
    2354:	40000400 	.word	0x40000400
    2358:	00004010 	.word	0x00004010
    235c:	40000c00 	.word	0x40000c00

00002360 <ETHERNET_SPI_init>:
{
    2360:	b510      	push	{r4, lr}
	ETHERNET_SPI_CLOCK_init();
    2362:	4b04      	ldr	r3, [pc, #16]	; (2374 <ETHERNET_SPI_init+0x14>)
    2364:	4798      	blx	r3
	spi_m_sync_init(&ETHERNET_SPI, SERCOM3);
    2366:	4904      	ldr	r1, [pc, #16]	; (2378 <ETHERNET_SPI_init+0x18>)
    2368:	4804      	ldr	r0, [pc, #16]	; (237c <ETHERNET_SPI_init+0x1c>)
    236a:	4b05      	ldr	r3, [pc, #20]	; (2380 <ETHERNET_SPI_init+0x20>)
    236c:	4798      	blx	r3
	ETHERNET_SPI_PORT_init();
    236e:	4b05      	ldr	r3, [pc, #20]	; (2384 <ETHERNET_SPI_init+0x24>)
    2370:	4798      	blx	r3
}
    2372:	bd10      	pop	{r4, pc}
    2374:	00002341 	.word	0x00002341
    2378:	42001400 	.word	0x42001400
    237c:	20003f58 	.word	0x20003f58
    2380:	000029cd 	.word	0x000029cd
    2384:	00002289 	.word	0x00002289

00002388 <delay_driver_init>:
{
    2388:	b510      	push	{r4, lr}
	delay_init(SysTick);
    238a:	4802      	ldr	r0, [pc, #8]	; (2394 <delay_driver_init+0xc>)
    238c:	4b02      	ldr	r3, [pc, #8]	; (2398 <delay_driver_init+0x10>)
    238e:	4798      	blx	r3
}
    2390:	bd10      	pop	{r4, pc}
    2392:	46c0      	nop			; (mov r8, r8)
    2394:	e000e010 	.word	0xe000e010
    2398:	00002559 	.word	0x00002559

0000239c <WDT_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
    239c:	4a04      	ldr	r2, [pc, #16]	; (23b0 <WDT_0_CLOCK_init+0x14>)
    239e:	6993      	ldr	r3, [r2, #24]
    23a0:	2110      	movs	r1, #16
    23a2:	430b      	orrs	r3, r1
    23a4:	6193      	str	r3, [r2, #24]
    23a6:	4a03      	ldr	r2, [pc, #12]	; (23b4 <WDT_0_CLOCK_init+0x18>)
    23a8:	4b03      	ldr	r3, [pc, #12]	; (23b8 <WDT_0_CLOCK_init+0x1c>)
    23aa:	805a      	strh	r2, [r3, #2]

void WDT_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, WDT);
	_gclk_enable_channel(WDT_GCLK_ID, CONF_GCLK_WDT_SRC);
}
    23ac:	4770      	bx	lr
    23ae:	46c0      	nop			; (mov r8, r8)
    23b0:	40000400 	.word	0x40000400
    23b4:	00004101 	.word	0x00004101
    23b8:	40000c00 	.word	0x40000c00

000023bc <WDT_0_init>:

void WDT_0_init(void)
{
    23bc:	b510      	push	{r4, lr}
	WDT_0_CLOCK_init();
    23be:	4b06      	ldr	r3, [pc, #24]	; (23d8 <WDT_0_init+0x1c>)
    23c0:	4798      	blx	r3
	ASSERT(wdt && hw);
    23c2:	2248      	movs	r2, #72	; 0x48
    23c4:	4905      	ldr	r1, [pc, #20]	; (23dc <WDT_0_init+0x20>)
    23c6:	2001      	movs	r0, #1
    23c8:	4b05      	ldr	r3, [pc, #20]	; (23e0 <WDT_0_init+0x24>)
    23ca:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
    23cc:	4805      	ldr	r0, [pc, #20]	; (23e4 <WDT_0_init+0x28>)
    23ce:	4b06      	ldr	r3, [pc, #24]	; (23e8 <WDT_0_init+0x2c>)
    23d0:	6003      	str	r3, [r0, #0]
	return _wdt_init(&wdt->dev);
    23d2:	4b06      	ldr	r3, [pc, #24]	; (23ec <WDT_0_init+0x30>)
    23d4:	4798      	blx	r3
	wdt_init(&WDT_0, WDT);
}
    23d6:	bd10      	pop	{r4, pc}
    23d8:	0000239d 	.word	0x0000239d
    23dc:	00008b18 	.word	0x00008b18
    23e0:	00002d7d 	.word	0x00002d7d
    23e4:	20003fa8 	.word	0x20003fa8
    23e8:	40001000 	.word	0x40001000
    23ec:	00003a39 	.word	0x00003a39

000023f0 <system_init>:

void system_init(void)
{
    23f0:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    23f2:	4b3e      	ldr	r3, [pc, #248]	; (24ec <system_init+0xfc>)
    23f4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    23f6:	22c0      	movs	r2, #192	; 0xc0
    23f8:	05d2      	lsls	r2, r2, #23
    23fa:	2304      	movs	r3, #4
    23fc:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    23fe:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2400:	4b3b      	ldr	r3, [pc, #236]	; (24f0 <system_init+0x100>)
    2402:	493c      	ldr	r1, [pc, #240]	; (24f4 <system_init+0x104>)
    2404:	6299      	str	r1, [r3, #40]	; 0x28
    2406:	20c0      	movs	r0, #192	; 0xc0
    2408:	0600      	lsls	r0, r0, #24
    240a:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    240c:	2542      	movs	r5, #66	; 0x42
    240e:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2410:	2101      	movs	r1, #1
    2412:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2414:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2416:	2408      	movs	r4, #8
    2418:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    241a:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    241c:	4c36      	ldr	r4, [pc, #216]	; (24f8 <system_init+0x108>)
    241e:	629c      	str	r4, [r3, #40]	; 0x28
    2420:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2422:	3501      	adds	r5, #1
    2424:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2426:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2428:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    242a:	2420      	movs	r4, #32
    242c:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    242e:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2430:	4c32      	ldr	r4, [pc, #200]	; (24fc <system_init+0x10c>)
    2432:	629c      	str	r4, [r3, #40]	; 0x28
    2434:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2436:	3502      	adds	r5, #2
    2438:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    243a:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    243c:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    243e:	2480      	movs	r4, #128	; 0x80
    2440:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2442:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2444:	4c2e      	ldr	r4, [pc, #184]	; (2500 <system_init+0x110>)
    2446:	629c      	str	r4, [r3, #40]	; 0x28
    2448:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    244a:	3502      	adds	r5, #2
    244c:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    244e:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2450:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2452:	2480      	movs	r4, #128	; 0x80
    2454:	01e4      	lsls	r4, r4, #7
    2456:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2458:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    245a:	4c2a      	ldr	r4, [pc, #168]	; (2504 <system_init+0x114>)
    245c:	629c      	str	r4, [r3, #40]	; 0x28
    245e:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2460:	3507      	adds	r5, #7
    2462:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2464:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2466:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2468:	2480      	movs	r4, #128	; 0x80
    246a:	0224      	lsls	r4, r4, #8
    246c:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    246e:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2470:	4c25      	ldr	r4, [pc, #148]	; (2508 <system_init+0x118>)
    2472:	629c      	str	r4, [r3, #40]	; 0x28
    2474:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2476:	244f      	movs	r4, #79	; 0x4f
    2478:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    247a:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    247c:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    247e:	2080      	movs	r0, #128	; 0x80
    2480:	02c0      	lsls	r0, r0, #11
    2482:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2484:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2486:	2080      	movs	r0, #128	; 0x80
    2488:	05c0      	lsls	r0, r0, #23
    248a:	6298      	str	r0, [r3, #40]	; 0x28
    248c:	4c1f      	ldr	r4, [pc, #124]	; (250c <system_init+0x11c>)
    248e:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2490:	3504      	adds	r5, #4
    2492:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2494:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2496:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2498:	2480      	movs	r4, #128	; 0x80
    249a:	0424      	lsls	r4, r4, #16
    249c:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    249e:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    24a0:	6298      	str	r0, [r3, #40]	; 0x28
    24a2:	4c1b      	ldr	r4, [pc, #108]	; (2510 <system_init+0x120>)
    24a4:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    24a6:	3505      	adds	r5, #5
    24a8:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    24aa:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    24ac:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    24ae:	2480      	movs	r4, #128	; 0x80
    24b0:	0524      	lsls	r4, r4, #20
    24b2:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    24b4:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    24b6:	6298      	str	r0, [r3, #40]	; 0x28
    24b8:	4a16      	ldr	r2, [pc, #88]	; (2514 <system_init+0x124>)
    24ba:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    24bc:	205b      	movs	r0, #91	; 0x5b
    24be:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    24c0:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    24c2:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(ETHERNET_RESET, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(ETHERNET_RESET, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
    24c4:	4b14      	ldr	r3, [pc, #80]	; (2518 <system_init+0x128>)
    24c6:	4798      	blx	r3

	FLASH_0_init();
    24c8:	4b14      	ldr	r3, [pc, #80]	; (251c <system_init+0x12c>)
    24ca:	4798      	blx	r3

	WIRELESS_SPI_init();
    24cc:	4b14      	ldr	r3, [pc, #80]	; (2520 <system_init+0x130>)
    24ce:	4798      	blx	r3

	ETHERNET_SPI_init();
    24d0:	4b14      	ldr	r3, [pc, #80]	; (2524 <system_init+0x134>)
    24d2:	4798      	blx	r3

	delay_driver_init();
    24d4:	4b14      	ldr	r3, [pc, #80]	; (2528 <system_init+0x138>)
    24d6:	4798      	blx	r3

	TIMER_0_init();
    24d8:	4b14      	ldr	r3, [pc, #80]	; (252c <system_init+0x13c>)
    24da:	4798      	blx	r3
	SAMPLE_TIMER_init();
    24dc:	4b14      	ldr	r3, [pc, #80]	; (2530 <system_init+0x140>)
    24de:	4798      	blx	r3
	TICK_TIMER_init();
    24e0:	4b14      	ldr	r3, [pc, #80]	; (2534 <system_init+0x144>)
    24e2:	4798      	blx	r3

	WDT_0_init();
    24e4:	4b14      	ldr	r3, [pc, #80]	; (2538 <system_init+0x148>)
    24e6:	4798      	blx	r3
}
    24e8:	bd70      	pop	{r4, r5, r6, pc}
    24ea:	46c0      	nop			; (mov r8, r8)
    24ec:	00002e51 	.word	0x00002e51
    24f0:	41004400 	.word	0x41004400
    24f4:	40000004 	.word	0x40000004
    24f8:	40000008 	.word	0x40000008
    24fc:	40000020 	.word	0x40000020
    2500:	40000080 	.word	0x40000080
    2504:	40004000 	.word	0x40004000
    2508:	40008000 	.word	0x40008000
    250c:	c0000004 	.word	0xc0000004
    2510:	c0000080 	.word	0xc0000080
    2514:	c0000800 	.word	0xc0000800
    2518:	00002051 	.word	0x00002051
    251c:	00002161 	.word	0x00002161
    2520:	00002261 	.word	0x00002261
    2524:	00002361 	.word	0x00002361
    2528:	00002389 	.word	0x00002389
    252c:	00001f91 	.word	0x00001f91
    2530:	00001fd1 	.word	0x00001fd1
    2534:	00002011 	.word	0x00002011
    2538:	000023bd 	.word	0x000023bd

0000253c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    253c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    2540:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2542:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2544:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    2548:	4770      	bx	lr

0000254a <atomic_leave_critical>:
    254a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    254e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2550:	f383 8810 	msr	PRIMASK, r3
}
    2554:	4770      	bx	lr
	...

00002558 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    2558:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
    255a:	4b02      	ldr	r3, [pc, #8]	; (2564 <delay_init+0xc>)
    255c:	6018      	str	r0, [r3, #0]
    255e:	4b02      	ldr	r3, [pc, #8]	; (2568 <delay_init+0x10>)
    2560:	4798      	blx	r3
}
    2562:	bd10      	pop	{r4, pc}
    2564:	20000864 	.word	0x20000864
    2568:	00003779 	.word	0x00003779

0000256c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    256c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    256e:	4b04      	ldr	r3, [pc, #16]	; (2580 <delay_us+0x14>)
    2570:	681c      	ldr	r4, [r3, #0]
    2572:	4b04      	ldr	r3, [pc, #16]	; (2584 <delay_us+0x18>)
    2574:	4798      	blx	r3
    2576:	0001      	movs	r1, r0
    2578:	0020      	movs	r0, r4
    257a:	4b03      	ldr	r3, [pc, #12]	; (2588 <delay_us+0x1c>)
    257c:	4798      	blx	r3
}
    257e:	bd10      	pop	{r4, pc}
    2580:	20000864 	.word	0x20000864
    2584:	00002e25 	.word	0x00002e25
    2588:	00003785 	.word	0x00003785

0000258c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    258c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    258e:	4b04      	ldr	r3, [pc, #16]	; (25a0 <delay_ms+0x14>)
    2590:	681c      	ldr	r4, [r3, #0]
    2592:	4b04      	ldr	r3, [pc, #16]	; (25a4 <delay_ms+0x18>)
    2594:	4798      	blx	r3
    2596:	0001      	movs	r1, r0
    2598:	0020      	movs	r0, r4
    259a:	4b03      	ldr	r3, [pc, #12]	; (25a8 <delay_ms+0x1c>)
    259c:	4798      	blx	r3
}
    259e:	bd10      	pop	{r4, pc}
    25a0:	20000864 	.word	0x20000864
    25a4:	00002e41 	.word	0x00002e41
    25a8:	00003785 	.word	0x00003785

000025ac <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    25ac:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    25ae:	2504      	movs	r5, #4
    25b0:	2400      	movs	r4, #0

	while (upper >= lower) {
    25b2:	e007      	b.n	25c4 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
    25b4:	4a0d      	ldr	r2, [pc, #52]	; (25ec <process_ext_irq+0x40>)
    25b6:	58b3      	ldr	r3, [r6, r2]
    25b8:	2b00      	cmp	r3, #0
    25ba:	d000      	beq.n	25be <process_ext_irq+0x12>
				ext_irqs[middle].cb();
    25bc:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
    25be:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
    25c0:	3a01      	subs	r2, #1
    25c2:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
    25c4:	42ac      	cmp	r4, r5
    25c6:	d8fa      	bhi.n	25be <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
    25c8:	192b      	adds	r3, r5, r4
    25ca:	105b      	asrs	r3, r3, #1
    25cc:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
    25ce:	2a03      	cmp	r2, #3
    25d0:	d8f5      	bhi.n	25be <process_ext_irq+0x12>
    25d2:	21ff      	movs	r1, #255	; 0xff
    25d4:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
    25d6:	00de      	lsls	r6, r3, #3
    25d8:	4904      	ldr	r1, [pc, #16]	; (25ec <process_ext_irq+0x40>)
    25da:	1989      	adds	r1, r1, r6
    25dc:	6849      	ldr	r1, [r1, #4]
    25de:	4281      	cmp	r1, r0
    25e0:	d0e8      	beq.n	25b4 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
    25e2:	d2ed      	bcs.n	25c0 <process_ext_irq+0x14>
			lower = middle + 1;
    25e4:	3201      	adds	r2, #1
    25e6:	b2d4      	uxtb	r4, r2
    25e8:	e7ec      	b.n	25c4 <process_ext_irq+0x18>
    25ea:	46c0      	nop			; (mov r8, r8)
    25ec:	20000868 	.word	0x20000868

000025f0 <ext_irq_init>:
{
    25f0:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    25f2:	2300      	movs	r3, #0
    25f4:	e009      	b.n	260a <ext_irq_init+0x1a>
		ext_irqs[i].pin = 0xFFFFFFFF;
    25f6:	4a08      	ldr	r2, [pc, #32]	; (2618 <ext_irq_init+0x28>)
    25f8:	00d9      	lsls	r1, r3, #3
    25fa:	1850      	adds	r0, r2, r1
    25fc:	2401      	movs	r4, #1
    25fe:	4264      	negs	r4, r4
    2600:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
    2602:	2000      	movs	r0, #0
    2604:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    2606:	3301      	adds	r3, #1
    2608:	b29b      	uxth	r3, r3
    260a:	2b03      	cmp	r3, #3
    260c:	d9f3      	bls.n	25f6 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
    260e:	4803      	ldr	r0, [pc, #12]	; (261c <ext_irq_init+0x2c>)
    2610:	4b03      	ldr	r3, [pc, #12]	; (2620 <ext_irq_init+0x30>)
    2612:	4798      	blx	r3
}
    2614:	bd10      	pop	{r4, pc}
    2616:	46c0      	nop			; (mov r8, r8)
    2618:	20000868 	.word	0x20000868
    261c:	000025ad 	.word	0x000025ad
    2620:	00002e81 	.word	0x00002e81

00002624 <ext_irq_register>:
{
    2624:	b5f0      	push	{r4, r5, r6, r7, lr}
    2626:	46d6      	mov	lr, sl
    2628:	464f      	mov	r7, r9
    262a:	4646      	mov	r6, r8
    262c:	b5c0      	push	{r6, r7, lr}
    262e:	b084      	sub	sp, #16
	uint8_t i = 0, j = 0;
    2630:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2632:	2b03      	cmp	r3, #3
    2634:	d80c      	bhi.n	2650 <ext_irq_register+0x2c>
		if (ext_irqs[i].pin == pin) {
    2636:	00dc      	lsls	r4, r3, #3
    2638:	4a32      	ldr	r2, [pc, #200]	; (2704 <ext_irq_register+0xe0>)
    263a:	1912      	adds	r2, r2, r4
    263c:	6852      	ldr	r2, [r2, #4]
    263e:	4282      	cmp	r2, r0
    2640:	d002      	beq.n	2648 <ext_irq_register+0x24>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    2642:	3301      	adds	r3, #1
    2644:	b2db      	uxtb	r3, r3
    2646:	e7f4      	b.n	2632 <ext_irq_register+0xe>
			ext_irqs[i].cb = cb;
    2648:	4b2e      	ldr	r3, [pc, #184]	; (2704 <ext_irq_register+0xe0>)
    264a:	50e1      	str	r1, [r4, r3]
			found          = true;
    264c:	2601      	movs	r6, #1
			break;
    264e:	e000      	b.n	2652 <ext_irq_register+0x2e>
	bool    found = false;
    2650:	2600      	movs	r6, #0
	if (NULL == cb) {
    2652:	2900      	cmp	r1, #0
    2654:	d00c      	beq.n	2670 <ext_irq_register+0x4c>
	if (!found) {
    2656:	2e00      	cmp	r6, #0
    2658:	d142      	bne.n	26e0 <ext_irq_register+0xbc>
    265a:	2300      	movs	r3, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    265c:	2b03      	cmp	r3, #3
    265e:	d811      	bhi.n	2684 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
    2660:	00da      	lsls	r2, r3, #3
    2662:	4d28      	ldr	r5, [pc, #160]	; (2704 <ext_irq_register+0xe0>)
    2664:	5952      	ldr	r2, [r2, r5]
    2666:	2a00      	cmp	r2, #0
    2668:	d007      	beq.n	267a <ext_irq_register+0x56>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    266a:	3301      	adds	r3, #1
    266c:	b2db      	uxtb	r3, r3
    266e:	e7f5      	b.n	265c <ext_irq_register+0x38>
		if (!found) {
    2670:	2e00      	cmp	r6, #0
    2672:	d040      	beq.n	26f6 <ext_irq_register+0xd2>
		return _ext_irq_enable(pin, false);
    2674:	4b24      	ldr	r3, [pc, #144]	; (2708 <ext_irq_register+0xe4>)
    2676:	4798      	blx	r3
    2678:	e037      	b.n	26ea <ext_irq_register+0xc6>
				ext_irqs[i].cb  = cb;
    267a:	00dc      	lsls	r4, r3, #3
    267c:	5161      	str	r1, [r4, r5]
				ext_irqs[i].pin = pin;
    267e:	192c      	adds	r4, r5, r4
    2680:	6060      	str	r0, [r4, #4]
				found           = true;
    2682:	2601      	movs	r6, #1
    2684:	2200      	movs	r2, #0
    2686:	e001      	b.n	268c <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    2688:	3201      	adds	r2, #1
    268a:	b2d2      	uxtb	r2, r2
    268c:	2a03      	cmp	r2, #3
    268e:	d827      	bhi.n	26e0 <ext_irq_register+0xbc>
    2690:	2b03      	cmp	r3, #3
    2692:	d825      	bhi.n	26e0 <ext_irq_register+0xbc>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    2694:	9301      	str	r3, [sp, #4]
    2696:	491b      	ldr	r1, [pc, #108]	; (2704 <ext_irq_register+0xe0>)
    2698:	00dc      	lsls	r4, r3, #3
    269a:	190c      	adds	r4, r1, r4
    269c:	6867      	ldr	r7, [r4, #4]
    269e:	00d4      	lsls	r4, r2, #3
    26a0:	1909      	adds	r1, r1, r4
    26a2:	6849      	ldr	r1, [r1, #4]
    26a4:	428f      	cmp	r7, r1
    26a6:	d2ef      	bcs.n	2688 <ext_irq_register+0x64>
    26a8:	1c4c      	adds	r4, r1, #1
    26aa:	d0ed      	beq.n	2688 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
    26ac:	a902      	add	r1, sp, #8
    26ae:	468c      	mov	ip, r1
    26b0:	4c14      	ldr	r4, [pc, #80]	; (2704 <ext_irq_register+0xe0>)
    26b2:	46a0      	mov	r8, r4
    26b4:	00d4      	lsls	r4, r2, #3
    26b6:	46a1      	mov	r9, r4
    26b8:	4644      	mov	r4, r8
    26ba:	444c      	add	r4, r9
    26bc:	4665      	mov	r5, ip
    26be:	cc82      	ldmia	r4!, {r1, r7}
    26c0:	c582      	stmia	r5!, {r1, r7}
				ext_irqs[j] = ext_irqs[i];
    26c2:	9901      	ldr	r1, [sp, #4]
    26c4:	00c9      	lsls	r1, r1, #3
    26c6:	468a      	mov	sl, r1
    26c8:	4649      	mov	r1, r9
    26ca:	4441      	add	r1, r8
    26cc:	4644      	mov	r4, r8
    26ce:	4454      	add	r4, sl
    26d0:	cca0      	ldmia	r4!, {r5, r7}
    26d2:	c1a0      	stmia	r1!, {r5, r7}
				ext_irqs[i] = tmp;
    26d4:	4645      	mov	r5, r8
    26d6:	4455      	add	r5, sl
    26d8:	4661      	mov	r1, ip
    26da:	c990      	ldmia	r1!, {r4, r7}
    26dc:	c590      	stmia	r5!, {r4, r7}
    26de:	e7d3      	b.n	2688 <ext_irq_register+0x64>
	if (!found) {
    26e0:	2e00      	cmp	r6, #0
    26e2:	d00b      	beq.n	26fc <ext_irq_register+0xd8>
	return _ext_irq_enable(pin, true);
    26e4:	2101      	movs	r1, #1
    26e6:	4b08      	ldr	r3, [pc, #32]	; (2708 <ext_irq_register+0xe4>)
    26e8:	4798      	blx	r3
}
    26ea:	b004      	add	sp, #16
    26ec:	bc1c      	pop	{r2, r3, r4}
    26ee:	4690      	mov	r8, r2
    26f0:	4699      	mov	r9, r3
    26f2:	46a2      	mov	sl, r4
    26f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
    26f6:	200d      	movs	r0, #13
    26f8:	4240      	negs	r0, r0
    26fa:	e7f6      	b.n	26ea <ext_irq_register+0xc6>
		return ERR_INVALID_ARG;
    26fc:	200d      	movs	r0, #13
    26fe:	4240      	negs	r0, r0
    2700:	e7f3      	b.n	26ea <ext_irq_register+0xc6>
    2702:	46c0      	nop			; (mov r8, r8)
    2704:	20000868 	.word	0x20000868
    2708:	00002f11 	.word	0x00002f11

0000270c <ext_irq_enable>:
{
    270c:	b510      	push	{r4, lr}
	return _ext_irq_enable(pin, true);
    270e:	2101      	movs	r1, #1
    2710:	4b01      	ldr	r3, [pc, #4]	; (2718 <ext_irq_enable+0xc>)
    2712:	4798      	blx	r3
}
    2714:	bd10      	pop	{r4, pc}
    2716:	46c0      	nop			; (mov r8, r8)
    2718:	00002f11 	.word	0x00002f11

0000271c <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    271c:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    271e:	6943      	ldr	r3, [r0, #20]
    2720:	2b00      	cmp	r3, #0
    2722:	d000      	beq.n	2726 <flash_ready+0xa>
		descr->callbacks.cb_ready(descr);
    2724:	4798      	blx	r3
	}
}
    2726:	bd10      	pop	{r4, pc}

00002728 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    2728:	b510      	push	{r4, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    272a:	6983      	ldr	r3, [r0, #24]
    272c:	2b00      	cmp	r3, #0
    272e:	d000      	beq.n	2732 <flash_error+0xa>
		descr->callbacks.cb_error(descr);
    2730:	4798      	blx	r3
	}
}
    2732:	bd10      	pop	{r4, pc}

00002734 <flash_is_address_aligned>:
{
    2734:	b570      	push	{r4, r5, r6, lr}
    2736:	0004      	movs	r4, r0
    2738:	000d      	movs	r5, r1
	ASSERT(flash);
    273a:	1e43      	subs	r3, r0, #1
    273c:	4198      	sbcs	r0, r3
    273e:	b2c0      	uxtb	r0, r0
    2740:	2218      	movs	r2, #24
    2742:	32ff      	adds	r2, #255	; 0xff
    2744:	4906      	ldr	r1, [pc, #24]	; (2760 <flash_is_address_aligned+0x2c>)
    2746:	4b07      	ldr	r3, [pc, #28]	; (2764 <flash_is_address_aligned+0x30>)
    2748:	4798      	blx	r3
	uint32_t page_size = _flash_get_page_size(&flash->dev);
    274a:	0020      	movs	r0, r4
    274c:	4b06      	ldr	r3, [pc, #24]	; (2768 <flash_is_address_aligned+0x34>)
    274e:	4798      	blx	r3
	if (flash_addr & (page_size - 1)) {
    2750:	3801      	subs	r0, #1
    2752:	4205      	tst	r5, r0
    2754:	d101      	bne.n	275a <flash_is_address_aligned+0x26>
	return ERR_NONE;
    2756:	2000      	movs	r0, #0
}
    2758:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BAD_ADDRESS;
    275a:	200e      	movs	r0, #14
    275c:	4240      	negs	r0, r0
    275e:	e7fb      	b.n	2758 <flash_is_address_aligned+0x24>
    2760:	00008b34 	.word	0x00008b34
    2764:	00002d7d 	.word	0x00002d7d
    2768:	00003161 	.word	0x00003161

0000276c <flash_init>:
{
    276c:	b570      	push	{r4, r5, r6, lr}
    276e:	0004      	movs	r4, r0
    2770:	000d      	movs	r5, r1
	ASSERT(flash && hw);
    2772:	2800      	cmp	r0, #0
    2774:	d013      	beq.n	279e <flash_init+0x32>
    2776:	2900      	cmp	r1, #0
    2778:	d00f      	beq.n	279a <flash_init+0x2e>
    277a:	2001      	movs	r0, #1
    277c:	2238      	movs	r2, #56	; 0x38
    277e:	4909      	ldr	r1, [pc, #36]	; (27a4 <flash_init+0x38>)
    2780:	4b09      	ldr	r3, [pc, #36]	; (27a8 <flash_init+0x3c>)
    2782:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    2784:	0029      	movs	r1, r5
    2786:	0020      	movs	r0, r4
    2788:	4b08      	ldr	r3, [pc, #32]	; (27ac <flash_init+0x40>)
    278a:	4798      	blx	r3
	if (rc) {
    278c:	2800      	cmp	r0, #0
    278e:	d103      	bne.n	2798 <flash_init+0x2c>
	flash->dev.flash_cb.ready_cb = flash_ready;
    2790:	4b07      	ldr	r3, [pc, #28]	; (27b0 <flash_init+0x44>)
    2792:	6023      	str	r3, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    2794:	4b07      	ldr	r3, [pc, #28]	; (27b4 <flash_init+0x48>)
    2796:	6063      	str	r3, [r4, #4]
}
    2798:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(flash && hw);
    279a:	2000      	movs	r0, #0
    279c:	e7ee      	b.n	277c <flash_init+0x10>
    279e:	2000      	movs	r0, #0
    27a0:	e7ec      	b.n	277c <flash_init+0x10>
    27a2:	46c0      	nop			; (mov r8, r8)
    27a4:	00008b34 	.word	0x00008b34
    27a8:	00002d7d 	.word	0x00002d7d
    27ac:	00003101 	.word	0x00003101
    27b0:	0000271d 	.word	0x0000271d
    27b4:	00002729 	.word	0x00002729

000027b8 <flash_read>:
{
    27b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ba:	46c6      	mov	lr, r8
    27bc:	b500      	push	{lr}
    27be:	0004      	movs	r4, r0
    27c0:	000e      	movs	r6, r1
    27c2:	0015      	movs	r5, r2
    27c4:	001f      	movs	r7, r3
	ASSERT(flash && buffer && length);
    27c6:	2800      	cmp	r0, #0
    27c8:	d020      	beq.n	280c <flash_read+0x54>
    27ca:	2a00      	cmp	r2, #0
    27cc:	d020      	beq.n	2810 <flash_read+0x58>
    27ce:	2b00      	cmp	r3, #0
    27d0:	d120      	bne.n	2814 <flash_read+0x5c>
    27d2:	2000      	movs	r0, #0
    27d4:	2256      	movs	r2, #86	; 0x56
    27d6:	4913      	ldr	r1, [pc, #76]	; (2824 <flash_read+0x6c>)
    27d8:	4b13      	ldr	r3, [pc, #76]	; (2828 <flash_read+0x70>)
    27da:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    27dc:	0020      	movs	r0, r4
    27de:	4b13      	ldr	r3, [pc, #76]	; (282c <flash_read+0x74>)
    27e0:	4798      	blx	r3
    27e2:	4680      	mov	r8, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    27e4:	0020      	movs	r0, r4
    27e6:	4b12      	ldr	r3, [pc, #72]	; (2830 <flash_read+0x78>)
    27e8:	4798      	blx	r3
	if ((src_addr > page_size * total_pages) || (src_addr + length > page_size * total_pages)) {
    27ea:	4643      	mov	r3, r8
    27ec:	4358      	muls	r0, r3
    27ee:	42b0      	cmp	r0, r6
    27f0:	d312      	bcc.n	2818 <flash_read+0x60>
    27f2:	19bb      	adds	r3, r7, r6
    27f4:	4298      	cmp	r0, r3
    27f6:	d312      	bcc.n	281e <flash_read+0x66>
	_flash_read(&flash->dev, src_addr, buffer, length);
    27f8:	003b      	movs	r3, r7
    27fa:	002a      	movs	r2, r5
    27fc:	0031      	movs	r1, r6
    27fe:	0020      	movs	r0, r4
    2800:	4c0c      	ldr	r4, [pc, #48]	; (2834 <flash_read+0x7c>)
    2802:	47a0      	blx	r4
	return ERR_NONE;
    2804:	2000      	movs	r0, #0
}
    2806:	bc04      	pop	{r2}
    2808:	4690      	mov	r8, r2
    280a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(flash && buffer && length);
    280c:	2000      	movs	r0, #0
    280e:	e7e1      	b.n	27d4 <flash_read+0x1c>
    2810:	2000      	movs	r0, #0
    2812:	e7df      	b.n	27d4 <flash_read+0x1c>
    2814:	2001      	movs	r0, #1
    2816:	e7dd      	b.n	27d4 <flash_read+0x1c>
		return ERR_BAD_ADDRESS;
    2818:	200e      	movs	r0, #14
    281a:	4240      	negs	r0, r0
    281c:	e7f3      	b.n	2806 <flash_read+0x4e>
    281e:	200e      	movs	r0, #14
    2820:	4240      	negs	r0, r0
    2822:	e7f0      	b.n	2806 <flash_read+0x4e>
    2824:	00008b34 	.word	0x00008b34
    2828:	00002d7d 	.word	0x00002d7d
    282c:	00003161 	.word	0x00003161
    2830:	00003165 	.word	0x00003165
    2834:	0000316b 	.word	0x0000316b

00002838 <flash_write>:
{
    2838:	b5f0      	push	{r4, r5, r6, r7, lr}
    283a:	46c6      	mov	lr, r8
    283c:	b500      	push	{lr}
    283e:	0004      	movs	r4, r0
    2840:	000d      	movs	r5, r1
    2842:	0016      	movs	r6, r2
    2844:	001f      	movs	r7, r3
	ASSERT(flash && buffer && length);
    2846:	2800      	cmp	r0, #0
    2848:	d026      	beq.n	2898 <flash_write+0x60>
    284a:	2a00      	cmp	r2, #0
    284c:	d026      	beq.n	289c <flash_write+0x64>
    284e:	2b00      	cmp	r3, #0
    2850:	d126      	bne.n	28a0 <flash_write+0x68>
    2852:	2000      	movs	r0, #0
    2854:	226a      	movs	r2, #106	; 0x6a
    2856:	4918      	ldr	r1, [pc, #96]	; (28b8 <flash_write+0x80>)
    2858:	4b18      	ldr	r3, [pc, #96]	; (28bc <flash_write+0x84>)
    285a:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    285c:	0020      	movs	r0, r4
    285e:	4b18      	ldr	r3, [pc, #96]	; (28c0 <flash_write+0x88>)
    2860:	4798      	blx	r3
    2862:	4680      	mov	r8, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    2864:	0020      	movs	r0, r4
    2866:	4b17      	ldr	r3, [pc, #92]	; (28c4 <flash_write+0x8c>)
    2868:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
    286a:	4643      	mov	r3, r8
    286c:	4358      	muls	r0, r3
    286e:	42a8      	cmp	r0, r5
    2870:	d318      	bcc.n	28a4 <flash_write+0x6c>
    2872:	197b      	adds	r3, r7, r5
    2874:	4298      	cmp	r0, r3
    2876:	d318      	bcc.n	28aa <flash_write+0x72>
	if (_flash_is_locked(&flash->dev, dst_addr)) {
    2878:	0029      	movs	r1, r5
    287a:	0020      	movs	r0, r4
    287c:	4b12      	ldr	r3, [pc, #72]	; (28c8 <flash_write+0x90>)
    287e:	4798      	blx	r3
    2880:	2800      	cmp	r0, #0
    2882:	d115      	bne.n	28b0 <flash_write+0x78>
	_flash_write(&flash->dev, dst_addr, buffer, length);
    2884:	003b      	movs	r3, r7
    2886:	0032      	movs	r2, r6
    2888:	0029      	movs	r1, r5
    288a:	0020      	movs	r0, r4
    288c:	4c0f      	ldr	r4, [pc, #60]	; (28cc <flash_write+0x94>)
    288e:	47a0      	blx	r4
	return ERR_NONE;
    2890:	2000      	movs	r0, #0
}
    2892:	bc04      	pop	{r2}
    2894:	4690      	mov	r8, r2
    2896:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(flash && buffer && length);
    2898:	2000      	movs	r0, #0
    289a:	e7db      	b.n	2854 <flash_write+0x1c>
    289c:	2000      	movs	r0, #0
    289e:	e7d9      	b.n	2854 <flash_write+0x1c>
    28a0:	2001      	movs	r0, #1
    28a2:	e7d7      	b.n	2854 <flash_write+0x1c>
		return ERR_BAD_ADDRESS;
    28a4:	200e      	movs	r0, #14
    28a6:	4240      	negs	r0, r0
    28a8:	e7f3      	b.n	2892 <flash_write+0x5a>
    28aa:	200e      	movs	r0, #14
    28ac:	4240      	negs	r0, r0
    28ae:	e7f0      	b.n	2892 <flash_write+0x5a>
		return ERR_DENIED;
    28b0:	2011      	movs	r0, #17
    28b2:	4240      	negs	r0, r0
    28b4:	e7ed      	b.n	2892 <flash_write+0x5a>
    28b6:	46c0      	nop			; (mov r8, r8)
    28b8:	00008b34 	.word	0x00008b34
    28bc:	00002d7d 	.word	0x00002d7d
    28c0:	00003161 	.word	0x00003161
    28c4:	00003165 	.word	0x00003165
    28c8:	00003339 	.word	0x00003339
    28cc:	000031b9 	.word	0x000031b9

000028d0 <flash_erase>:
{
    28d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28d2:	b083      	sub	sp, #12
    28d4:	0004      	movs	r4, r0
    28d6:	9100      	str	r1, [sp, #0]
    28d8:	0017      	movs	r7, r2
	ASSERT(flash && page_nums);
    28da:	2800      	cmp	r0, #0
    28dc:	d025      	beq.n	292a <flash_erase+0x5a>
    28de:	2a00      	cmp	r2, #0
    28e0:	d125      	bne.n	292e <flash_erase+0x5e>
    28e2:	2000      	movs	r0, #0
    28e4:	229a      	movs	r2, #154	; 0x9a
    28e6:	4916      	ldr	r1, [pc, #88]	; (2940 <flash_erase+0x70>)
    28e8:	4b16      	ldr	r3, [pc, #88]	; (2944 <flash_erase+0x74>)
    28ea:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    28ec:	0020      	movs	r0, r4
    28ee:	4b16      	ldr	r3, [pc, #88]	; (2948 <flash_erase+0x78>)
    28f0:	4798      	blx	r3
    28f2:	9001      	str	r0, [sp, #4]
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    28f4:	0020      	movs	r0, r4
    28f6:	4b15      	ldr	r3, [pc, #84]	; (294c <flash_erase+0x7c>)
    28f8:	4798      	blx	r3
    28fa:	0005      	movs	r5, r0
	rc = flash_is_address_aligned(flash, dst_addr);
    28fc:	9900      	ldr	r1, [sp, #0]
    28fe:	0020      	movs	r0, r4
    2900:	4b13      	ldr	r3, [pc, #76]	; (2950 <flash_erase+0x80>)
    2902:	4798      	blx	r3
    2904:	1e06      	subs	r6, r0, #0
	if (rc) {
    2906:	d10d      	bne.n	2924 <flash_erase+0x54>
	if ((page_nums > total_pages) || (dst_addr / page_size + page_nums > total_pages)) {
    2908:	42af      	cmp	r7, r5
    290a:	d812      	bhi.n	2932 <flash_erase+0x62>
    290c:	9901      	ldr	r1, [sp, #4]
    290e:	9800      	ldr	r0, [sp, #0]
    2910:	4b10      	ldr	r3, [pc, #64]	; (2954 <flash_erase+0x84>)
    2912:	4798      	blx	r3
    2914:	1838      	adds	r0, r7, r0
    2916:	4285      	cmp	r5, r0
    2918:	d30e      	bcc.n	2938 <flash_erase+0x68>
	_flash_erase(&flash->dev, dst_addr, page_nums);
    291a:	003a      	movs	r2, r7
    291c:	9900      	ldr	r1, [sp, #0]
    291e:	0020      	movs	r0, r4
    2920:	4b0d      	ldr	r3, [pc, #52]	; (2958 <flash_erase+0x88>)
    2922:	4798      	blx	r3
}
    2924:	0030      	movs	r0, r6
    2926:	b003      	add	sp, #12
    2928:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(flash && page_nums);
    292a:	2000      	movs	r0, #0
    292c:	e7da      	b.n	28e4 <flash_erase+0x14>
    292e:	2001      	movs	r0, #1
    2930:	e7d8      	b.n	28e4 <flash_erase+0x14>
		return ERR_INVALID_ARG;
    2932:	260d      	movs	r6, #13
    2934:	4276      	negs	r6, r6
    2936:	e7f5      	b.n	2924 <flash_erase+0x54>
    2938:	260d      	movs	r6, #13
    293a:	4276      	negs	r6, r6
    293c:	e7f2      	b.n	2924 <flash_erase+0x54>
    293e:	46c0      	nop			; (mov r8, r8)
    2940:	00008b34 	.word	0x00008b34
    2944:	00002d7d 	.word	0x00002d7d
    2948:	00003161 	.word	0x00003161
    294c:	00003165 	.word	0x00003165
    2950:	00002735 	.word	0x00002735
    2954:	0000662d 	.word	0x0000662d
    2958:	00003291 	.word	0x00003291

0000295c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    295c:	b570      	push	{r4, r5, r6, lr}
    295e:	0004      	movs	r4, r0
    2960:	000d      	movs	r5, r1
    2962:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    2964:	2800      	cmp	r0, #0
    2966:	d00e      	beq.n	2986 <io_write+0x2a>
    2968:	2900      	cmp	r1, #0
    296a:	d00a      	beq.n	2982 <io_write+0x26>
    296c:	2001      	movs	r0, #1
    296e:	2234      	movs	r2, #52	; 0x34
    2970:	4906      	ldr	r1, [pc, #24]	; (298c <io_write+0x30>)
    2972:	4b07      	ldr	r3, [pc, #28]	; (2990 <io_write+0x34>)
    2974:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    2976:	6823      	ldr	r3, [r4, #0]
    2978:	0032      	movs	r2, r6
    297a:	0029      	movs	r1, r5
    297c:	0020      	movs	r0, r4
    297e:	4798      	blx	r3
}
    2980:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    2982:	2000      	movs	r0, #0
    2984:	e7f3      	b.n	296e <io_write+0x12>
    2986:	2000      	movs	r0, #0
    2988:	e7f1      	b.n	296e <io_write+0x12>
    298a:	46c0      	nop			; (mov r8, r8)
    298c:	00008b4c 	.word	0x00008b4c
    2990:	00002d7d 	.word	0x00002d7d

00002994 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    2994:	b570      	push	{r4, r5, r6, lr}
    2996:	0004      	movs	r4, r0
    2998:	000d      	movs	r5, r1
    299a:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    299c:	2800      	cmp	r0, #0
    299e:	d00e      	beq.n	29be <io_read+0x2a>
    29a0:	2900      	cmp	r1, #0
    29a2:	d00a      	beq.n	29ba <io_read+0x26>
    29a4:	2001      	movs	r0, #1
    29a6:	223d      	movs	r2, #61	; 0x3d
    29a8:	4906      	ldr	r1, [pc, #24]	; (29c4 <io_read+0x30>)
    29aa:	4b07      	ldr	r3, [pc, #28]	; (29c8 <io_read+0x34>)
    29ac:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    29ae:	6863      	ldr	r3, [r4, #4]
    29b0:	0032      	movs	r2, r6
    29b2:	0029      	movs	r1, r5
    29b4:	0020      	movs	r0, r4
    29b6:	4798      	blx	r3
}
    29b8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    29ba:	2000      	movs	r0, #0
    29bc:	e7f3      	b.n	29a6 <io_read+0x12>
    29be:	2000      	movs	r0, #0
    29c0:	e7f1      	b.n	29a6 <io_read+0x12>
    29c2:	46c0      	nop			; (mov r8, r8)
    29c4:	00008b4c 	.word	0x00008b4c
    29c8:	00002d7d 	.word	0x00002d7d

000029cc <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    29cc:	b570      	push	{r4, r5, r6, lr}
    29ce:	0004      	movs	r4, r0
    29d0:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    29d2:	2800      	cmp	r0, #0
    29d4:	d017      	beq.n	2a06 <spi_m_sync_init+0x3a>
    29d6:	2900      	cmp	r1, #0
    29d8:	d013      	beq.n	2a02 <spi_m_sync_init+0x36>
    29da:	2001      	movs	r0, #1
    29dc:	2240      	movs	r2, #64	; 0x40
    29de:	490b      	ldr	r1, [pc, #44]	; (2a0c <spi_m_sync_init+0x40>)
    29e0:	4b0b      	ldr	r3, [pc, #44]	; (2a10 <spi_m_sync_init+0x44>)
    29e2:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    29e4:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    29e6:	1d20      	adds	r0, r4, #4
    29e8:	0029      	movs	r1, r5
    29ea:	4b0a      	ldr	r3, [pc, #40]	; (2a14 <spi_m_sync_init+0x48>)
    29ec:	4798      	blx	r3

	if (rc < 0) {
    29ee:	2800      	cmp	r0, #0
    29f0:	db06      	blt.n	2a00 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    29f2:	4b09      	ldr	r3, [pc, #36]	; (2a18 <spi_m_sync_init+0x4c>)
    29f4:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    29f6:	4b09      	ldr	r3, [pc, #36]	; (2a1c <spi_m_sync_init+0x50>)
    29f8:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    29fa:	4b09      	ldr	r3, [pc, #36]	; (2a20 <spi_m_sync_init+0x54>)
    29fc:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    29fe:	2000      	movs	r0, #0
}
    2a00:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
    2a02:	2000      	movs	r0, #0
    2a04:	e7ea      	b.n	29dc <spi_m_sync_init+0x10>
    2a06:	2000      	movs	r0, #0
    2a08:	e7e8      	b.n	29dc <spi_m_sync_init+0x10>
    2a0a:	46c0      	nop			; (mov r8, r8)
    2a0c:	00008b60 	.word	0x00008b60
    2a10:	00002d7d 	.word	0x00002d7d
    2a14:	000033ed 	.word	0x000033ed
    2a18:	ffff8000 	.word	0xffff8000
    2a1c:	00002af9 	.word	0x00002af9
    2a20:	00002abd 	.word	0x00002abd

00002a24 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    2a24:	b510      	push	{r4, lr}
    2a26:	0004      	movs	r4, r0
	ASSERT(spi);
    2a28:	1e43      	subs	r3, r0, #1
    2a2a:	4198      	sbcs	r0, r3
    2a2c:	b2c0      	uxtb	r0, r0
    2a2e:	2257      	movs	r2, #87	; 0x57
    2a30:	4903      	ldr	r1, [pc, #12]	; (2a40 <spi_m_sync_enable+0x1c>)
    2a32:	4b04      	ldr	r3, [pc, #16]	; (2a44 <spi_m_sync_enable+0x20>)
    2a34:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    2a36:	1d20      	adds	r0, r4, #4
    2a38:	4b03      	ldr	r3, [pc, #12]	; (2a48 <spi_m_sync_enable+0x24>)
    2a3a:	4798      	blx	r3
}
    2a3c:	bd10      	pop	{r4, pc}
    2a3e:	46c0      	nop			; (mov r8, r8)
    2a40:	00008b60 	.word	0x00008b60
    2a44:	00002d7d 	.word	0x00002d7d
    2a48:	000035ad 	.word	0x000035ad

00002a4c <spi_m_sync_disable>:

void spi_m_sync_disable(struct spi_m_sync_descriptor *spi)
{
    2a4c:	b510      	push	{r4, lr}
    2a4e:	0004      	movs	r4, r0
	ASSERT(spi);
    2a50:	1e43      	subs	r3, r0, #1
    2a52:	4198      	sbcs	r0, r3
    2a54:	b2c0      	uxtb	r0, r0
    2a56:	225d      	movs	r2, #93	; 0x5d
    2a58:	4903      	ldr	r1, [pc, #12]	; (2a68 <spi_m_sync_disable+0x1c>)
    2a5a:	4b04      	ldr	r3, [pc, #16]	; (2a6c <spi_m_sync_disable+0x20>)
    2a5c:	4798      	blx	r3
	_spi_m_sync_disable(&spi->dev);
    2a5e:	1d20      	adds	r0, r4, #4
    2a60:	4b03      	ldr	r3, [pc, #12]	; (2a70 <spi_m_sync_disable+0x24>)
    2a62:	4798      	blx	r3
}
    2a64:	bd10      	pop	{r4, pc}
    2a66:	46c0      	nop			; (mov r8, r8)
    2a68:	00008b60 	.word	0x00008b60
    2a6c:	00002d7d 	.word	0x00002d7d
    2a70:	000035e5 	.word	0x000035e5

00002a74 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    2a74:	b530      	push	{r4, r5, lr}
    2a76:	b087      	sub	sp, #28
    2a78:	0004      	movs	r4, r0
    2a7a:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    2a7c:	2800      	cmp	r0, #0
    2a7e:	d015      	beq.n	2aac <spi_m_sync_transfer+0x38>
    2a80:	2900      	cmp	r1, #0
    2a82:	d011      	beq.n	2aa8 <spi_m_sync_transfer+0x34>
    2a84:	2001      	movs	r0, #1
    2a86:	22b3      	movs	r2, #179	; 0xb3
    2a88:	4909      	ldr	r1, [pc, #36]	; (2ab0 <spi_m_sync_transfer+0x3c>)
    2a8a:	4b0a      	ldr	r3, [pc, #40]	; (2ab4 <spi_m_sync_transfer+0x40>)
    2a8c:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    2a8e:	682b      	ldr	r3, [r5, #0]
    2a90:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    2a92:	686b      	ldr	r3, [r5, #4]
    2a94:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    2a96:	68ab      	ldr	r3, [r5, #8]
    2a98:	9301      	str	r3, [sp, #4]
    2a9a:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    2a9c:	1d20      	adds	r0, r4, #4
    2a9e:	a903      	add	r1, sp, #12
    2aa0:	4b05      	ldr	r3, [pc, #20]	; (2ab8 <spi_m_sync_transfer+0x44>)
    2aa2:	4798      	blx	r3
}
    2aa4:	b007      	add	sp, #28
    2aa6:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
    2aa8:	2000      	movs	r0, #0
    2aaa:	e7ec      	b.n	2a86 <spi_m_sync_transfer+0x12>
    2aac:	2000      	movs	r0, #0
    2aae:	e7ea      	b.n	2a86 <spi_m_sync_transfer+0x12>
    2ab0:	00008b60 	.word	0x00008b60
    2ab4:	00002d7d 	.word	0x00002d7d
    2ab8:	0000361d 	.word	0x0000361d

00002abc <_spi_m_sync_io_write>:
{
    2abc:	b570      	push	{r4, r5, r6, lr}
    2abe:	b084      	sub	sp, #16
    2ac0:	0004      	movs	r4, r0
    2ac2:	000e      	movs	r6, r1
    2ac4:	0015      	movs	r5, r2
	ASSERT(io);
    2ac6:	1e43      	subs	r3, r0, #1
    2ac8:	4198      	sbcs	r0, r3
    2aca:	b2c0      	uxtb	r0, r0
    2acc:	22a3      	movs	r2, #163	; 0xa3
    2ace:	4907      	ldr	r1, [pc, #28]	; (2aec <_spi_m_sync_io_write+0x30>)
    2ad0:	4b07      	ldr	r3, [pc, #28]	; (2af0 <_spi_m_sync_io_write+0x34>)
    2ad2:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2ad4:	0020      	movs	r0, r4
    2ad6:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
    2ad8:	2300      	movs	r3, #0
    2ada:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    2adc:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    2ade:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    2ae0:	a901      	add	r1, sp, #4
    2ae2:	4b04      	ldr	r3, [pc, #16]	; (2af4 <_spi_m_sync_io_write+0x38>)
    2ae4:	4798      	blx	r3
}
    2ae6:	b004      	add	sp, #16
    2ae8:	bd70      	pop	{r4, r5, r6, pc}
    2aea:	46c0      	nop			; (mov r8, r8)
    2aec:	00008b60 	.word	0x00008b60
    2af0:	00002d7d 	.word	0x00002d7d
    2af4:	00002a75 	.word	0x00002a75

00002af8 <_spi_m_sync_io_read>:
{
    2af8:	b570      	push	{r4, r5, r6, lr}
    2afa:	b084      	sub	sp, #16
    2afc:	0004      	movs	r4, r0
    2afe:	000e      	movs	r6, r1
    2b00:	0015      	movs	r5, r2
	ASSERT(io);
    2b02:	1e43      	subs	r3, r0, #1
    2b04:	4198      	sbcs	r0, r3
    2b06:	b2c0      	uxtb	r0, r0
    2b08:	2287      	movs	r2, #135	; 0x87
    2b0a:	4907      	ldr	r1, [pc, #28]	; (2b28 <_spi_m_sync_io_read+0x30>)
    2b0c:	4b07      	ldr	r3, [pc, #28]	; (2b2c <_spi_m_sync_io_read+0x34>)
    2b0e:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    2b10:	0020      	movs	r0, r4
    2b12:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
    2b14:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    2b16:	2300      	movs	r3, #0
    2b18:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    2b1a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    2b1c:	a901      	add	r1, sp, #4
    2b1e:	4b04      	ldr	r3, [pc, #16]	; (2b30 <_spi_m_sync_io_read+0x38>)
    2b20:	4798      	blx	r3
}
    2b22:	b004      	add	sp, #16
    2b24:	bd70      	pop	{r4, r5, r6, pc}
    2b26:	46c0      	nop			; (mov r8, r8)
    2b28:	00008b60 	.word	0x00008b60
    2b2c:	00002d7d 	.word	0x00002d7d
    2b30:	00002a75 	.word	0x00002a75

00002b34 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    2b34:	b570      	push	{r4, r5, r6, lr}
    2b36:	0004      	movs	r4, r0
    2b38:	000d      	movs	r5, r1
	ASSERT(spi && io);
    2b3a:	2800      	cmp	r0, #0
    2b3c:	d00c      	beq.n	2b58 <spi_m_sync_get_io_descriptor+0x24>
    2b3e:	2900      	cmp	r1, #0
    2b40:	d008      	beq.n	2b54 <spi_m_sync_get_io_descriptor+0x20>
    2b42:	2001      	movs	r0, #1
    2b44:	22bd      	movs	r2, #189	; 0xbd
    2b46:	4905      	ldr	r1, [pc, #20]	; (2b5c <spi_m_sync_get_io_descriptor+0x28>)
    2b48:	4b05      	ldr	r3, [pc, #20]	; (2b60 <spi_m_sync_get_io_descriptor+0x2c>)
    2b4a:	4798      	blx	r3
	*io = &spi->io;
    2b4c:	340c      	adds	r4, #12
    2b4e:	602c      	str	r4, [r5, #0]
	return 0;
}
    2b50:	2000      	movs	r0, #0
    2b52:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && io);
    2b54:	2000      	movs	r0, #0
    2b56:	e7f5      	b.n	2b44 <spi_m_sync_get_io_descriptor+0x10>
    2b58:	2000      	movs	r0, #0
    2b5a:	e7f3      	b.n	2b44 <spi_m_sync_get_io_descriptor+0x10>
    2b5c:	00008b60 	.word	0x00008b60
    2b60:	00002d7d 	.word	0x00002d7d

00002b64 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    2b66:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    2b68:	2e00      	cmp	r6, #0
    2b6a:	d002      	beq.n	2b72 <timer_add_timer_task+0xe>
    2b6c:	0033      	movs	r3, r6
    2b6e:	2500      	movs	r5, #0
    2b70:	e00c      	b.n	2b8c <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
    2b72:	4b10      	ldr	r3, [pc, #64]	; (2bb4 <timer_add_timer_task+0x50>)
    2b74:	4798      	blx	r3
		return;
    2b76:	e018      	b.n	2baa <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2b78:	689f      	ldr	r7, [r3, #8]
    2b7a:	46bc      	mov	ip, r7
    2b7c:	4464      	add	r4, ip
    2b7e:	1aa4      	subs	r4, r4, r2
    2b80:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
    2b82:	688f      	ldr	r7, [r1, #8]
    2b84:	42bc      	cmp	r4, r7
    2b86:	d20b      	bcs.n	2ba0 <timer_add_timer_task+0x3c>
			break;
		prev = it;
    2b88:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2b8a:	681b      	ldr	r3, [r3, #0]
    2b8c:	2b00      	cmp	r3, #0
    2b8e:	d007      	beq.n	2ba0 <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
    2b90:	685c      	ldr	r4, [r3, #4]
    2b92:	4294      	cmp	r4, r2
    2b94:	d8f0      	bhi.n	2b78 <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
    2b96:	1aa4      	subs	r4, r4, r2
    2b98:	689f      	ldr	r7, [r3, #8]
    2b9a:	46bc      	mov	ip, r7
    2b9c:	4464      	add	r4, ip
    2b9e:	e7f0      	b.n	2b82 <timer_add_timer_task+0x1e>
	}

	if (it == head) {
    2ba0:	42b3      	cmp	r3, r6
    2ba2:	d003      	beq.n	2bac <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    2ba4:	0028      	movs	r0, r5
    2ba6:	4b04      	ldr	r3, [pc, #16]	; (2bb8 <timer_add_timer_task+0x54>)
    2ba8:	4798      	blx	r3
	}
}
    2baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    2bac:	4b01      	ldr	r3, [pc, #4]	; (2bb4 <timer_add_timer_task+0x50>)
    2bae:	4798      	blx	r3
    2bb0:	e7fb      	b.n	2baa <timer_add_timer_task+0x46>
    2bb2:	46c0      	nop			; (mov r8, r8)
    2bb4:	00002d9d 	.word	0x00002d9d
    2bb8:	00002dc9 	.word	0x00002dc9

00002bbc <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bbe:	0005      	movs	r5, r0
    2bc0:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    2bc2:	6903      	ldr	r3, [r0, #16]
    2bc4:	1c5e      	adds	r6, r3, #1
    2bc6:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2bc8:	7e03      	ldrb	r3, [r0, #24]
    2bca:	07db      	lsls	r3, r3, #31
    2bcc:	d402      	bmi.n	2bd4 <timer_process_counted+0x18>
    2bce:	7e03      	ldrb	r3, [r0, #24]
    2bd0:	079b      	lsls	r3, r3, #30
    2bd2:	d50a      	bpl.n	2bea <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2bd4:	7e2b      	ldrb	r3, [r5, #24]
    2bd6:	2202      	movs	r2, #2
    2bd8:	4313      	orrs	r3, r2
    2bda:	b2db      	uxtb	r3, r3
    2bdc:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
    2bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2be0:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
    2be2:	68e3      	ldr	r3, [r4, #12]
    2be4:	0020      	movs	r0, r4
    2be6:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2be8:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
    2bea:	2c00      	cmp	r4, #0
    2bec:	d0f7      	beq.n	2bde <timer_process_counted+0x22>
    2bee:	6863      	ldr	r3, [r4, #4]
    2bf0:	1af3      	subs	r3, r6, r3
    2bf2:	68a2      	ldr	r2, [r4, #8]
    2bf4:	4293      	cmp	r3, r2
    2bf6:	d3f2      	bcc.n	2bde <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
    2bf8:	002f      	movs	r7, r5
    2bfa:	3714      	adds	r7, #20
    2bfc:	0038      	movs	r0, r7
    2bfe:	4b06      	ldr	r3, [pc, #24]	; (2c18 <timer_process_counted+0x5c>)
    2c00:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2c02:	7c23      	ldrb	r3, [r4, #16]
    2c04:	2b01      	cmp	r3, #1
    2c06:	d1eb      	bne.n	2be0 <timer_process_counted+0x24>
			tmp->time_label = time;
    2c08:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2c0a:	0032      	movs	r2, r6
    2c0c:	0021      	movs	r1, r4
    2c0e:	0038      	movs	r0, r7
    2c10:	4b02      	ldr	r3, [pc, #8]	; (2c1c <timer_process_counted+0x60>)
    2c12:	4798      	blx	r3
    2c14:	e7e4      	b.n	2be0 <timer_process_counted+0x24>
    2c16:	46c0      	nop			; (mov r8, r8)
    2c18:	00002dd1 	.word	0x00002dd1
    2c1c:	00002b65 	.word	0x00002b65

00002c20 <timer_init>:
{
    2c20:	b570      	push	{r4, r5, r6, lr}
    2c22:	0004      	movs	r4, r0
    2c24:	000d      	movs	r5, r1
	ASSERT(descr && hw);
    2c26:	2800      	cmp	r0, #0
    2c28:	d012      	beq.n	2c50 <timer_init+0x30>
    2c2a:	2900      	cmp	r1, #0
    2c2c:	d00e      	beq.n	2c4c <timer_init+0x2c>
    2c2e:	2001      	movs	r0, #1
    2c30:	223b      	movs	r2, #59	; 0x3b
    2c32:	4908      	ldr	r1, [pc, #32]	; (2c54 <timer_init+0x34>)
    2c34:	4b08      	ldr	r3, [pc, #32]	; (2c58 <timer_init+0x38>)
    2c36:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    2c38:	0029      	movs	r1, r5
    2c3a:	0020      	movs	r0, r4
    2c3c:	4b07      	ldr	r3, [pc, #28]	; (2c5c <timer_init+0x3c>)
    2c3e:	4798      	blx	r3
	descr->time                           = 0;
    2c40:	2300      	movs	r3, #0
    2c42:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2c44:	4b06      	ldr	r3, [pc, #24]	; (2c60 <timer_init+0x40>)
    2c46:	6023      	str	r3, [r4, #0]
}
    2c48:	2000      	movs	r0, #0
    2c4a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
    2c4c:	2000      	movs	r0, #0
    2c4e:	e7ef      	b.n	2c30 <timer_init+0x10>
    2c50:	2000      	movs	r0, #0
    2c52:	e7ed      	b.n	2c30 <timer_init+0x10>
    2c54:	00008b7c 	.word	0x00008b7c
    2c58:	00002d7d 	.word	0x00002d7d
    2c5c:	0000386d 	.word	0x0000386d
    2c60:	00002bbd 	.word	0x00002bbd

00002c64 <timer_start>:
{
    2c64:	b510      	push	{r4, lr}
    2c66:	0004      	movs	r4, r0
	ASSERT(descr);
    2c68:	1e43      	subs	r3, r0, #1
    2c6a:	4198      	sbcs	r0, r3
    2c6c:	b2c0      	uxtb	r0, r0
    2c6e:	2253      	movs	r2, #83	; 0x53
    2c70:	4907      	ldr	r1, [pc, #28]	; (2c90 <timer_start+0x2c>)
    2c72:	4b08      	ldr	r3, [pc, #32]	; (2c94 <timer_start+0x30>)
    2c74:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    2c76:	0020      	movs	r0, r4
    2c78:	4b07      	ldr	r3, [pc, #28]	; (2c98 <timer_start+0x34>)
    2c7a:	4798      	blx	r3
    2c7c:	2800      	cmp	r0, #0
    2c7e:	d104      	bne.n	2c8a <timer_start+0x26>
	_timer_start(&descr->device);
    2c80:	0020      	movs	r0, r4
    2c82:	4b06      	ldr	r3, [pc, #24]	; (2c9c <timer_start+0x38>)
    2c84:	4798      	blx	r3
	return ERR_NONE;
    2c86:	2000      	movs	r0, #0
}
    2c88:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2c8a:	2011      	movs	r0, #17
    2c8c:	4240      	negs	r0, r0
    2c8e:	e7fb      	b.n	2c88 <timer_start+0x24>
    2c90:	00008b7c 	.word	0x00008b7c
    2c94:	00002d7d 	.word	0x00002d7d
    2c98:	000039d1 	.word	0x000039d1
    2c9c:	00003991 	.word	0x00003991

00002ca0 <timer_set_clock_cycles_per_tick>:
{
    2ca0:	b570      	push	{r4, r5, r6, lr}
    2ca2:	0004      	movs	r4, r0
    2ca4:	000d      	movs	r5, r1
	ASSERT(descr);
    2ca6:	1e43      	subs	r3, r0, #1
    2ca8:	4198      	sbcs	r0, r3
    2caa:	b2c0      	uxtb	r0, r0
    2cac:	226f      	movs	r2, #111	; 0x6f
    2cae:	4904      	ldr	r1, [pc, #16]	; (2cc0 <timer_set_clock_cycles_per_tick+0x20>)
    2cb0:	4b04      	ldr	r3, [pc, #16]	; (2cc4 <timer_set_clock_cycles_per_tick+0x24>)
    2cb2:	4798      	blx	r3
	_timer_set_period(&descr->device, clock_cycles);
    2cb4:	0029      	movs	r1, r5
    2cb6:	0020      	movs	r0, r4
    2cb8:	4b03      	ldr	r3, [pc, #12]	; (2cc8 <timer_set_clock_cycles_per_tick+0x28>)
    2cba:	4798      	blx	r3
}
    2cbc:	2000      	movs	r0, #0
    2cbe:	bd70      	pop	{r4, r5, r6, pc}
    2cc0:	00008b7c 	.word	0x00008b7c
    2cc4:	00002d7d 	.word	0x00002d7d
    2cc8:	0000399f 	.word	0x0000399f

00002ccc <timer_add_task>:
{
    2ccc:	b570      	push	{r4, r5, r6, lr}
    2cce:	b082      	sub	sp, #8
    2cd0:	0004      	movs	r4, r0
    2cd2:	000d      	movs	r5, r1
	ASSERT(descr && task);
    2cd4:	2800      	cmp	r0, #0
    2cd6:	d026      	beq.n	2d26 <timer_add_task+0x5a>
    2cd8:	2900      	cmp	r1, #0
    2cda:	d022      	beq.n	2d22 <timer_add_task+0x56>
    2cdc:	2001      	movs	r0, #1
    2cde:	227a      	movs	r2, #122	; 0x7a
    2ce0:	491f      	ldr	r1, [pc, #124]	; (2d60 <timer_add_task+0x94>)
    2ce2:	4b20      	ldr	r3, [pc, #128]	; (2d64 <timer_add_task+0x98>)
    2ce4:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    2ce6:	7e23      	ldrb	r3, [r4, #24]
    2ce8:	2201      	movs	r2, #1
    2cea:	4313      	orrs	r3, r2
    2cec:	b2db      	uxtb	r3, r3
    2cee:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    2cf0:	0026      	movs	r6, r4
    2cf2:	3614      	adds	r6, #20
    2cf4:	0029      	movs	r1, r5
    2cf6:	0030      	movs	r0, r6
    2cf8:	4b1b      	ldr	r3, [pc, #108]	; (2d68 <timer_add_task+0x9c>)
    2cfa:	4798      	blx	r3
    2cfc:	2800      	cmp	r0, #0
    2cfe:	d114      	bne.n	2d2a <timer_add_task+0x5e>
	task->time_label = descr->time;
    2d00:	6923      	ldr	r3, [r4, #16]
    2d02:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    2d04:	6922      	ldr	r2, [r4, #16]
    2d06:	0029      	movs	r1, r5
    2d08:	0030      	movs	r0, r6
    2d0a:	4b18      	ldr	r3, [pc, #96]	; (2d6c <timer_add_task+0xa0>)
    2d0c:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2d0e:	7e23      	ldrb	r3, [r4, #24]
    2d10:	2201      	movs	r2, #1
    2d12:	4393      	bics	r3, r2
    2d14:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    2d16:	7e23      	ldrb	r3, [r4, #24]
    2d18:	079b      	lsls	r3, r3, #30
    2d1a:	d412      	bmi.n	2d42 <timer_add_task+0x76>
	return ERR_NONE;
    2d1c:	2000      	movs	r0, #0
}
    2d1e:	b002      	add	sp, #8
    2d20:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
    2d22:	2000      	movs	r0, #0
    2d24:	e7db      	b.n	2cde <timer_add_task+0x12>
    2d26:	2000      	movs	r0, #0
    2d28:	e7d9      	b.n	2cde <timer_add_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    2d2a:	7e23      	ldrb	r3, [r4, #24]
    2d2c:	2201      	movs	r2, #1
    2d2e:	4393      	bics	r3, r2
    2d30:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    2d32:	327e      	adds	r2, #126	; 0x7e
    2d34:	490a      	ldr	r1, [pc, #40]	; (2d60 <timer_add_task+0x94>)
    2d36:	2000      	movs	r0, #0
    2d38:	4b0a      	ldr	r3, [pc, #40]	; (2d64 <timer_add_task+0x98>)
    2d3a:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    2d3c:	2012      	movs	r0, #18
    2d3e:	4240      	negs	r0, r0
    2d40:	e7ed      	b.n	2d1e <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    2d42:	a801      	add	r0, sp, #4
    2d44:	4b0a      	ldr	r3, [pc, #40]	; (2d70 <timer_add_task+0xa4>)
    2d46:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    2d48:	7e23      	ldrb	r3, [r4, #24]
    2d4a:	2202      	movs	r2, #2
    2d4c:	4393      	bics	r3, r2
    2d4e:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    2d50:	0020      	movs	r0, r4
    2d52:	4b08      	ldr	r3, [pc, #32]	; (2d74 <timer_add_task+0xa8>)
    2d54:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    2d56:	a801      	add	r0, sp, #4
    2d58:	4b07      	ldr	r3, [pc, #28]	; (2d78 <timer_add_task+0xac>)
    2d5a:	4798      	blx	r3
	return ERR_NONE;
    2d5c:	2000      	movs	r0, #0
    2d5e:	e7de      	b.n	2d1e <timer_add_task+0x52>
    2d60:	00008b7c 	.word	0x00008b7c
    2d64:	00002d7d 	.word	0x00002d7d
    2d68:	00002d85 	.word	0x00002d85
    2d6c:	00002b65 	.word	0x00002b65
    2d70:	0000253d 	.word	0x0000253d
    2d74:	000039e1 	.word	0x000039e1
    2d78:	0000254b 	.word	0x0000254b

00002d7c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    2d7c:	2800      	cmp	r0, #0
    2d7e:	d100      	bne.n	2d82 <assert+0x6>
		__asm("BKPT #0");
    2d80:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    2d82:	4770      	bx	lr

00002d84 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    2d84:	6803      	ldr	r3, [r0, #0]
    2d86:	2b00      	cmp	r3, #0
    2d88:	d003      	beq.n	2d92 <is_list_element+0xe>
		if (it == element) {
    2d8a:	428b      	cmp	r3, r1
    2d8c:	d003      	beq.n	2d96 <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
    2d8e:	681b      	ldr	r3, [r3, #0]
    2d90:	e7f9      	b.n	2d86 <is_list_element+0x2>
			return true;
		}
	}

	return false;
    2d92:	2000      	movs	r0, #0
}
    2d94:	4770      	bx	lr
			return true;
    2d96:	2001      	movs	r0, #1
    2d98:	e7fc      	b.n	2d94 <is_list_element+0x10>
	...

00002d9c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    2d9c:	b570      	push	{r4, r5, r6, lr}
    2d9e:	0004      	movs	r4, r0
    2da0:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    2da2:	4b06      	ldr	r3, [pc, #24]	; (2dbc <list_insert_as_head+0x20>)
    2da4:	4798      	blx	r3
    2da6:	2301      	movs	r3, #1
    2da8:	4058      	eors	r0, r3
    2daa:	b2c0      	uxtb	r0, r0
    2dac:	2239      	movs	r2, #57	; 0x39
    2dae:	4904      	ldr	r1, [pc, #16]	; (2dc0 <list_insert_as_head+0x24>)
    2db0:	4b04      	ldr	r3, [pc, #16]	; (2dc4 <list_insert_as_head+0x28>)
    2db2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2db4:	6823      	ldr	r3, [r4, #0]
    2db6:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    2db8:	6025      	str	r5, [r4, #0]
}
    2dba:	bd70      	pop	{r4, r5, r6, pc}
    2dbc:	00002d85 	.word	0x00002d85
    2dc0:	00008b94 	.word	0x00008b94
    2dc4:	00002d7d 	.word	0x00002d7d

00002dc8 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2dc8:	6803      	ldr	r3, [r0, #0]
    2dca:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2dcc:	6001      	str	r1, [r0, #0]
}
    2dce:	4770      	bx	lr

00002dd0 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    2dd0:	6803      	ldr	r3, [r0, #0]
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	d003      	beq.n	2dde <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    2dd6:	681a      	ldr	r2, [r3, #0]
    2dd8:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
    2dda:	0018      	movs	r0, r3
	}

	return NULL;
}
    2ddc:	4770      	bx	lr
	return NULL;
    2dde:	2000      	movs	r0, #0
    2de0:	e7fc      	b.n	2ddc <list_remove_head+0xc>
	...

00002de4 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    2de4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    2de6:	4a06      	ldr	r2, [pc, #24]	; (2e00 <_sbrk+0x1c>)
    2de8:	6812      	ldr	r2, [r2, #0]
    2dea:	2a00      	cmp	r2, #0
    2dec:	d004      	beq.n	2df8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2dee:	4a04      	ldr	r2, [pc, #16]	; (2e00 <_sbrk+0x1c>)
    2df0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2df2:	18c3      	adds	r3, r0, r3
    2df4:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    2df6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2df8:	4902      	ldr	r1, [pc, #8]	; (2e04 <_sbrk+0x20>)
    2dfa:	4a01      	ldr	r2, [pc, #4]	; (2e00 <_sbrk+0x1c>)
    2dfc:	6011      	str	r1, [r2, #0]
    2dfe:	e7f6      	b.n	2dee <_sbrk+0xa>
    2e00:	20000888 	.word	0x20000888
    2e04:	200060c8 	.word	0x200060c8

00002e08 <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
    2e08:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2e0a:	2b00      	cmp	r3, #0
    2e0c:	db07      	blt.n	2e1e <_irq_set+0x16>
  {
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e0e:	231f      	movs	r3, #31
    2e10:	4018      	ands	r0, r3
    2e12:	3b1e      	subs	r3, #30
    2e14:	4083      	lsls	r3, r0
    2e16:	2280      	movs	r2, #128	; 0x80
    2e18:	0052      	lsls	r2, r2, #1
    2e1a:	4901      	ldr	r1, [pc, #4]	; (2e20 <_irq_set+0x18>)
    2e1c:	508b      	str	r3, [r1, r2]
}
    2e1e:	4770      	bx	lr
    2e20:	e000e100 	.word	0xe000e100

00002e24 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    2e24:	b510      	push	{r4, lr}
    2e26:	0003      	movs	r3, r0
		return (us * (freq / 10000) - 1) / 100 + 1;
    2e28:	20c8      	movs	r0, #200	; 0xc8
    2e2a:	0080      	lsls	r0, r0, #2
    2e2c:	4358      	muls	r0, r3
    2e2e:	3801      	subs	r0, #1
    2e30:	2164      	movs	r1, #100	; 0x64
    2e32:	4b02      	ldr	r3, [pc, #8]	; (2e3c <_get_cycles_for_us+0x18>)
    2e34:	4798      	blx	r3
    2e36:	3001      	adds	r0, #1
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2e38:	bd10      	pop	{r4, pc}
    2e3a:	46c0      	nop			; (mov r8, r8)
    2e3c:	0000662d 	.word	0x0000662d

00002e40 <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
    2e40:	23c8      	movs	r3, #200	; 0xc8
    2e42:	009b      	lsls	r3, r3, #2
    2e44:	4358      	muls	r0, r3
    2e46:	0083      	lsls	r3, r0, #2
    2e48:	181b      	adds	r3, r3, r0
    2e4a:	0058      	lsls	r0, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2e4c:	4770      	bx	lr
	...

00002e50 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2e50:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    2e52:	4b06      	ldr	r3, [pc, #24]	; (2e6c <_init_chip+0x1c>)
    2e54:	685a      	ldr	r2, [r3, #4]
    2e56:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    2e58:	4b05      	ldr	r3, [pc, #20]	; (2e70 <_init_chip+0x20>)
    2e5a:	4798      	blx	r3
	_sysctrl_init_sources();
    2e5c:	4b05      	ldr	r3, [pc, #20]	; (2e74 <_init_chip+0x24>)
    2e5e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    2e60:	4b05      	ldr	r3, [pc, #20]	; (2e78 <_init_chip+0x28>)
    2e62:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2e64:	20ff      	movs	r0, #255	; 0xff
    2e66:	4b05      	ldr	r3, [pc, #20]	; (2e7c <_init_chip+0x2c>)
    2e68:	4798      	blx	r3
}
    2e6a:	bd10      	pop	{r4, pc}
    2e6c:	41004000 	.word	0x41004000
    2e70:	00003381 	.word	0x00003381
    2e74:	00003705 	.word	0x00003705
    2e78:	00003761 	.word	0x00003761
    2e7c:	00003021 	.word	0x00003021

00002e80 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    2e80:	4b20      	ldr	r3, [pc, #128]	; (2f04 <_ext_irq_init+0x84>)
    2e82:	785b      	ldrb	r3, [r3, #1]
    2e84:	09db      	lsrs	r3, r3, #7
    2e86:	d1fb      	bne.n	2e80 <_ext_irq_init>
    2e88:	4b1e      	ldr	r3, [pc, #120]	; (2f04 <_ext_irq_init+0x84>)
    2e8a:	785b      	ldrb	r3, [r3, #1]
    2e8c:	09db      	lsrs	r3, r3, #7
    2e8e:	d1fb      	bne.n	2e88 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
    2e90:	4b1c      	ldr	r3, [pc, #112]	; (2f04 <_ext_irq_init+0x84>)
    2e92:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
    2e94:	079b      	lsls	r3, r3, #30
    2e96:	d50a      	bpl.n	2eae <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
    2e98:	2200      	movs	r2, #0
    2e9a:	4b1a      	ldr	r3, [pc, #104]	; (2f04 <_ext_irq_init+0x84>)
    2e9c:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    2e9e:	4b19      	ldr	r3, [pc, #100]	; (2f04 <_ext_irq_init+0x84>)
    2ea0:	785b      	ldrb	r3, [r3, #1]
    2ea2:	09db      	lsrs	r3, r3, #7
    2ea4:	d1fb      	bne.n	2e9e <_ext_irq_init+0x1e>
    2ea6:	4b17      	ldr	r3, [pc, #92]	; (2f04 <_ext_irq_init+0x84>)
    2ea8:	785b      	ldrb	r3, [r3, #1]
    2eaa:	09db      	lsrs	r3, r3, #7
    2eac:	d1fb      	bne.n	2ea6 <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
    2eae:	2201      	movs	r2, #1
    2eb0:	4b14      	ldr	r3, [pc, #80]	; (2f04 <_ext_irq_init+0x84>)
    2eb2:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    2eb4:	4b13      	ldr	r3, [pc, #76]	; (2f04 <_ext_irq_init+0x84>)
    2eb6:	785b      	ldrb	r3, [r3, #1]
    2eb8:	09db      	lsrs	r3, r3, #7
    2eba:	d1fb      	bne.n	2eb4 <_ext_irq_init+0x34>
    2ebc:	4b11      	ldr	r3, [pc, #68]	; (2f04 <_ext_irq_init+0x84>)
    2ebe:	785b      	ldrb	r3, [r3, #1]
    2ec0:	09db      	lsrs	r3, r3, #7
    2ec2:	d1fb      	bne.n	2ebc <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    2ec4:	4b0f      	ldr	r3, [pc, #60]	; (2f04 <_ext_irq_init+0x84>)
    2ec6:	2200      	movs	r2, #0
    2ec8:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    2eca:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
    2ecc:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    2ece:	619a      	str	r2, [r3, #24]
    2ed0:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
    2ed2:	781a      	ldrb	r2, [r3, #0]
    2ed4:	2102      	movs	r1, #2
    2ed6:	430a      	orrs	r2, r1
    2ed8:	b2d2      	uxtb	r2, r2
    2eda:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
    2edc:	4b09      	ldr	r3, [pc, #36]	; (2f04 <_ext_irq_init+0x84>)
    2ede:	785b      	ldrb	r3, [r3, #1]
    2ee0:	09db      	lsrs	r3, r3, #7
    2ee2:	d1fb      	bne.n	2edc <_ext_irq_init+0x5c>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ee4:	4b08      	ldr	r3, [pc, #32]	; (2f08 <_ext_irq_init+0x88>)
    2ee6:	2210      	movs	r2, #16
    2ee8:	2180      	movs	r1, #128	; 0x80
    2eea:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    2eec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ef0:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ef4:	3101      	adds	r1, #1
    2ef6:	31ff      	adds	r1, #255	; 0xff
    2ef8:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2efa:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
    2efc:	4b03      	ldr	r3, [pc, #12]	; (2f0c <_ext_irq_init+0x8c>)
    2efe:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    2f00:	2000      	movs	r0, #0
    2f02:	4770      	bx	lr
    2f04:	40001800 	.word	0x40001800
    2f08:	e000e100 	.word	0xe000e100
    2f0c:	2000088c 	.word	0x2000088c

00002f10 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    2f10:	b530      	push	{r4, r5, lr}
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;
    2f12:	2300      	movs	r3, #0

	for (; i < ARRAY_SIZE(_map); i++) {
    2f14:	2b03      	cmp	r3, #3
    2f16:	d80b      	bhi.n	2f30 <_ext_irq_enable+0x20>
		if (_map[i].pin == pin) {
    2f18:	00dc      	lsls	r4, r3, #3
    2f1a:	4a10      	ldr	r2, [pc, #64]	; (2f5c <_ext_irq_enable+0x4c>)
    2f1c:	1912      	adds	r2, r2, r4
    2f1e:	6852      	ldr	r2, [r2, #4]
    2f20:	4282      	cmp	r2, r0
    2f22:	d002      	beq.n	2f2a <_ext_irq_enable+0x1a>
	for (; i < ARRAY_SIZE(_map); i++) {
    2f24:	3301      	adds	r3, #1
    2f26:	b2db      	uxtb	r3, r3
    2f28:	e7f4      	b.n	2f14 <_ext_irq_enable+0x4>
			extint = _map[i].extint;
    2f2a:	4b0c      	ldr	r3, [pc, #48]	; (2f5c <_ext_irq_enable+0x4c>)
    2f2c:	5ce2      	ldrb	r2, [r4, r3]
			break;
    2f2e:	e000      	b.n	2f32 <_ext_irq_enable+0x22>
	uint8_t extint = INVALID_EXTINT_NUMBER;
    2f30:	22ff      	movs	r2, #255	; 0xff
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    2f32:	2aff      	cmp	r2, #255	; 0xff
    2f34:	d00e      	beq.n	2f54 <_ext_irq_enable+0x44>
		return ERR_INVALID_ARG;
	}

	if (enable) {
    2f36:	2900      	cmp	r1, #0
    2f38:	d106      	bne.n	2f48 <_ext_irq_enable+0x38>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    2f3a:	2301      	movs	r3, #1
    2f3c:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    2f3e:	4a08      	ldr	r2, [pc, #32]	; (2f60 <_ext_irq_enable+0x50>)
    2f40:	6093      	str	r3, [r2, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
    2f42:	6113      	str	r3, [r2, #16]
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
    2f44:	2000      	movs	r0, #0
}
    2f46:	bd30      	pop	{r4, r5, pc}
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    2f48:	2301      	movs	r3, #1
    2f4a:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    2f4c:	4a04      	ldr	r2, [pc, #16]	; (2f60 <_ext_irq_enable+0x50>)
    2f4e:	60d3      	str	r3, [r2, #12]
	return ERR_NONE;
    2f50:	2000      	movs	r0, #0
    2f52:	e7f8      	b.n	2f46 <_ext_irq_enable+0x36>
		return ERR_INVALID_ARG;
    2f54:	200d      	movs	r0, #13
    2f56:	4240      	negs	r0, r0
    2f58:	e7f5      	b.n	2f46 <_ext_irq_enable+0x36>
    2f5a:	46c0      	nop			; (mov r8, r8)
    2f5c:	00008bb4 	.word	0x00008bb4
    2f60:	40001800 	.word	0x40001800

00002f64 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
    2f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f66:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
    2f68:	4b27      	ldr	r3, [pc, #156]	; (3008 <EIC_Handler+0xa4>)
    2f6a:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    2f6c:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    2f6e:	400a      	ands	r2, r1
    2f70:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    2f72:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    2f74:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
    2f76:	4b25      	ldr	r3, [pc, #148]	; (300c <EIC_Handler+0xa8>)
    2f78:	6818      	ldr	r0, [r3, #0]
    2f7a:	1e43      	subs	r3, r0, #1
    2f7c:	4198      	sbcs	r0, r3
    2f7e:	b2c0      	uxtb	r0, r0
    2f80:	22d2      	movs	r2, #210	; 0xd2
    2f82:	4923      	ldr	r1, [pc, #140]	; (3010 <EIC_Handler+0xac>)
    2f84:	4b23      	ldr	r3, [pc, #140]	; (3014 <EIC_Handler+0xb0>)
    2f86:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    2f88:	2501      	movs	r5, #1
    2f8a:	426d      	negs	r5, r5

	while (flags) {
    2f8c:	e031      	b.n	2ff2 <EIC_Handler+0x8e>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    2f8e:	00db      	lsls	r3, r3, #3
    2f90:	4a21      	ldr	r2, [pc, #132]	; (3018 <EIC_Handler+0xb4>)
    2f92:	18d3      	adds	r3, r2, r3
    2f94:	685d      	ldr	r5, [r3, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    2f96:	1c6b      	adds	r3, r5, #1
    2f98:	d003      	beq.n	2fa2 <EIC_Handler+0x3e>
				callback(pin);
    2f9a:	4b1c      	ldr	r3, [pc, #112]	; (300c <EIC_Handler+0xa8>)
    2f9c:	681b      	ldr	r3, [r3, #0]
    2f9e:	0028      	movs	r0, r5
    2fa0:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    2fa2:	2201      	movs	r2, #1
    2fa4:	40a2      	lsls	r2, r4
    2fa6:	9b01      	ldr	r3, [sp, #4]
    2fa8:	4393      	bics	r3, r2
    2faa:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
    2fac:	9801      	ldr	r0, [sp, #4]
    2fae:	4b1b      	ldr	r3, [pc, #108]	; (301c <EIC_Handler+0xb8>)
    2fb0:	4798      	blx	r3
    2fb2:	3801      	subs	r0, #1
    2fb4:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    2fb6:	1c63      	adds	r3, r4, #1
    2fb8:	d014      	beq.n	2fe4 <EIC_Handler+0x80>
    2fba:	2604      	movs	r6, #4
    2fbc:	2000      	movs	r0, #0
    2fbe:	e001      	b.n	2fc4 <EIC_Handler+0x60>
					upper = middle - 1;
    2fc0:	3901      	subs	r1, #1
    2fc2:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
    2fc4:	42b0      	cmp	r0, r6
    2fc6:	d8e6      	bhi.n	2f96 <EIC_Handler+0x32>
				middle = (upper + lower) >> 1;
    2fc8:	1833      	adds	r3, r6, r0
    2fca:	105b      	asrs	r3, r3, #1
    2fcc:	b2d9      	uxtb	r1, r3
    2fce:	22ff      	movs	r2, #255	; 0xff
    2fd0:	4013      	ands	r3, r2
				if (_map[middle].extint == pos) {
    2fd2:	00df      	lsls	r7, r3, #3
    2fd4:	4a10      	ldr	r2, [pc, #64]	; (3018 <EIC_Handler+0xb4>)
    2fd6:	5cba      	ldrb	r2, [r7, r2]
    2fd8:	42a2      	cmp	r2, r4
    2fda:	d0d8      	beq.n	2f8e <EIC_Handler+0x2a>
				if (_map[middle].extint < pos) {
    2fdc:	daf0      	bge.n	2fc0 <EIC_Handler+0x5c>
					lower = middle + 1;
    2fde:	3101      	adds	r1, #1
    2fe0:	b2c8      	uxtb	r0, r1
    2fe2:	e7ef      	b.n	2fc4 <EIC_Handler+0x60>
	return ((Eic *)hw)->INTFLAG.reg;
    2fe4:	4b08      	ldr	r3, [pc, #32]	; (3008 <EIC_Handler+0xa4>)
    2fe6:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
    2fe8:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
    2fea:	400a      	ands	r2, r1
    2fec:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    2fee:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    2ff0:	611a      	str	r2, [r3, #16]
	while (flags) {
    2ff2:	9b01      	ldr	r3, [sp, #4]
    2ff4:	2b00      	cmp	r3, #0
    2ff6:	d005      	beq.n	3004 <EIC_Handler+0xa0>
		pos = ffs(flags) - 1;
    2ff8:	9801      	ldr	r0, [sp, #4]
    2ffa:	4b08      	ldr	r3, [pc, #32]	; (301c <EIC_Handler+0xb8>)
    2ffc:	4798      	blx	r3
    2ffe:	3801      	subs	r0, #1
    3000:	b244      	sxtb	r4, r0
		while (-1 != pos) {
    3002:	e7d8      	b.n	2fb6 <EIC_Handler+0x52>
	}
}
    3004:	b003      	add	sp, #12
    3006:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3008:	40001800 	.word	0x40001800
    300c:	2000088c 	.word	0x2000088c
    3010:	00008bd4 	.word	0x00008bd4
    3014:	00002d7d 	.word	0x00002d7d
    3018:	00008bb4 	.word	0x00008bb4
    301c:	00006799 	.word	0x00006799

00003020 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    3020:	07c3      	lsls	r3, r0, #31
    3022:	d50a      	bpl.n	303a <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    3024:	4b0b      	ldr	r3, [pc, #44]	; (3054 <_gclk_init_generators_by_fref+0x34>)
    3026:	2280      	movs	r2, #128	; 0x80
    3028:	0052      	lsls	r2, r2, #1
    302a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    302c:	2283      	movs	r2, #131	; 0x83
    302e:	0252      	lsls	r2, r2, #9
    3030:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    3032:	4b08      	ldr	r3, [pc, #32]	; (3054 <_gclk_init_generators_by_fref+0x34>)
    3034:	785b      	ldrb	r3, [r3, #1]
    3036:	09db      	lsrs	r3, r3, #7
    3038:	d1fb      	bne.n	3032 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    303a:	0783      	lsls	r3, r0, #30
    303c:	d508      	bpl.n	3050 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
    303e:	4b05      	ldr	r3, [pc, #20]	; (3054 <_gclk_init_generators_by_fref+0x34>)
    3040:	4a05      	ldr	r2, [pc, #20]	; (3058 <_gclk_init_generators_by_fref+0x38>)
    3042:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    3044:	4a05      	ldr	r2, [pc, #20]	; (305c <_gclk_init_generators_by_fref+0x3c>)
    3046:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    3048:	4b02      	ldr	r3, [pc, #8]	; (3054 <_gclk_init_generators_by_fref+0x34>)
    304a:	785b      	ldrb	r3, [r3, #1]
    304c:	09db      	lsrs	r3, r3, #7
    304e:	d1fb      	bne.n	3048 <_gclk_init_generators_by_fref+0x28>
		        | (CONF_GCLK_GEN_7_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_7_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_7_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_7_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SRC | GCLK_GENCTRL_ID(7));
	}
#endif
}
    3050:	4770      	bx	lr
    3052:	46c0      	nop			; (mov r8, r8)
    3054:	40000c00 	.word	0x40000c00
    3058:	00002001 	.word	0x00002001
    305c:	00010401 	.word	0x00010401

00003060 <_flash_erase_row>:
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    3060:	7d03      	ldrb	r3, [r0, #20]
 * \param[in]  hw            The pointer to hardware instance
 * \param[in]  dst_addr      Destination page address to erase
 */
static void _flash_erase_row(void *const hw, const uint32_t dst_addr, uint32_t nvmctrl_cmd)
{
	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    3062:	07db      	lsls	r3, r3, #31
    3064:	d5fc      	bpl.n	3060 <_flash_erase_row>
}

static inline void hri_nvmctrl_clear_STATUS_reg(const void *const hw, hri_nvmctrl_status_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->STATUS.reg = mask;
    3066:	2320      	movs	r3, #32
    3068:	33ff      	adds	r3, #255	; 0xff
    306a:	8303      	strh	r3, [r0, #24]

	/* Clear flags */
	hri_nvmctrl_clear_STATUS_reg(hw, NVMCTRL_STATUS_MASK);

	/* Set address and command */
	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
    306c:	0849      	lsrs	r1, r1, #1
	((Nvmctrl *)hw)->ADDR.reg = data;
    306e:	61c1      	str	r1, [r0, #28]
	hri_nvmctrl_write_CTRLA_reg(hw, nvmctrl_cmd | NVMCTRL_CTRLA_CMDEX_KEY);
    3070:	4b02      	ldr	r3, [pc, #8]	; (307c <_flash_erase_row+0x1c>)
    3072:	431a      	orrs	r2, r3
    3074:	b292      	uxth	r2, r2
	((Nvmctrl *)hw)->CTRLA.reg = data;
    3076:	8002      	strh	r2, [r0, #0]
}
    3078:	4770      	bx	lr
    307a:	46c0      	nop			; (mov r8, r8)
    307c:	ffffa500 	.word	0xffffa500

00003080 <_flash_program>:
 *                           write is stored
 * \param[in] size           The size of data to write to a page
 */
static void _flash_program(void *const hw, const uint32_t dst_addr, const uint8_t *buffer, const uint16_t size,
                           uint32_t nvmctrl_cmd)
{
    3080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3082:	0004      	movs	r4, r0
    3084:	000f      	movs	r7, r1
    3086:	0016      	movs	r6, r2
    3088:	001d      	movs	r5, r3
	ASSERT(!(dst_addr % 2));
    308a:	2001      	movs	r0, #1
    308c:	4008      	ands	r0, r1
    308e:	4243      	negs	r3, r0
    3090:	4158      	adcs	r0, r3
    3092:	b2c0      	uxtb	r0, r0
    3094:	22c5      	movs	r2, #197	; 0xc5
    3096:	0052      	lsls	r2, r2, #1
    3098:	4915      	ldr	r1, [pc, #84]	; (30f0 <_flash_program+0x70>)
    309a:	4b16      	ldr	r3, [pc, #88]	; (30f4 <_flash_program+0x74>)
    309c:	4798      	blx	r3

	uint32_t nvm_address = dst_addr / 2;
    309e:	0879      	lsrs	r1, r7, #1
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    30a0:	7d23      	ldrb	r3, [r4, #20]
	uint16_t i, data;

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    30a2:	07db      	lsls	r3, r3, #31
    30a4:	d5fc      	bpl.n	30a0 <_flash_program+0x20>
	((Nvmctrl *)hw)->CTRLA.reg = data;
    30a6:	4b14      	ldr	r3, [pc, #80]	; (30f8 <_flash_program+0x78>)
    30a8:	8023      	strh	r3, [r4, #0]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    30aa:	7d23      	ldrb	r3, [r4, #20]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_CTRLA_reg(hw, NVMCTRL_CTRLA_CMD_PBC | NVMCTRL_CTRLA_CMDEX_KEY);

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    30ac:	07db      	lsls	r3, r3, #31
    30ae:	d5fc      	bpl.n	30aa <_flash_program+0x2a>
	((Nvmctrl *)hw)->STATUS.reg = mask;
    30b0:	2320      	movs	r3, #32
    30b2:	33ff      	adds	r3, #255	; 0xff
    30b4:	8323      	strh	r3, [r4, #24]
	uint32_t nvm_address = dst_addr / 2;
    30b6:	000a      	movs	r2, r1
	}

	/* Clear flags */
	hri_nvmctrl_clear_STATUS_reg(hw, NVMCTRL_STATUS_MASK);

	for (i = 0; i < size; i += 2) {
    30b8:	2300      	movs	r3, #0
    30ba:	e004      	b.n	30c6 <_flash_program+0x46>
		data = buffer[i];
		if (i < NVMCTRL_PAGE_SIZE - 1) {
			data |= (buffer[i + 1] << 8);
		}
		NVM_MEMORY[nvm_address++] = data;
    30bc:	0057      	lsls	r7, r2, #1
    30be:	8038      	strh	r0, [r7, #0]
	for (i = 0; i < size; i += 2) {
    30c0:	3302      	adds	r3, #2
    30c2:	b29b      	uxth	r3, r3
		NVM_MEMORY[nvm_address++] = data;
    30c4:	3201      	adds	r2, #1
	for (i = 0; i < size; i += 2) {
    30c6:	42ab      	cmp	r3, r5
    30c8:	d208      	bcs.n	30dc <_flash_program+0x5c>
		data = buffer[i];
    30ca:	5cf7      	ldrb	r7, [r6, r3]
    30cc:	b2b8      	uxth	r0, r7
		if (i < NVMCTRL_PAGE_SIZE - 1) {
    30ce:	2b3e      	cmp	r3, #62	; 0x3e
    30d0:	d8f4      	bhi.n	30bc <_flash_program+0x3c>
			data |= (buffer[i + 1] << 8);
    30d2:	18f0      	adds	r0, r6, r3
    30d4:	7840      	ldrb	r0, [r0, #1]
    30d6:	0200      	lsls	r0, r0, #8
    30d8:	4338      	orrs	r0, r7
    30da:	e7ef      	b.n	30bc <_flash_program+0x3c>
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    30dc:	7d23      	ldrb	r3, [r4, #20]
	}

	while (!hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    30de:	07db      	lsls	r3, r3, #31
    30e0:	d5fc      	bpl.n	30dc <_flash_program+0x5c>
	((Nvmctrl *)hw)->ADDR.reg = data;
    30e2:	61e1      	str	r1, [r4, #28]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_ADDR_reg(hw, dst_addr / 2);
	hri_nvmctrl_write_CTRLA_reg(hw, nvmctrl_cmd | NVMCTRL_CTRLA_CMDEX_KEY);
    30e4:	4b05      	ldr	r3, [pc, #20]	; (30fc <_flash_program+0x7c>)
    30e6:	9a06      	ldr	r2, [sp, #24]
    30e8:	4313      	orrs	r3, r2
    30ea:	b29b      	uxth	r3, r3
	((Nvmctrl *)hw)->CTRLA.reg = data;
    30ec:	8023      	strh	r3, [r4, #0]
}
    30ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30f0:	00008bec 	.word	0x00008bec
    30f4:	00002d7d 	.word	0x00002d7d
    30f8:	ffffa544 	.word	0xffffa544
    30fc:	ffffa500 	.word	0xffffa500

00003100 <_flash_init>:
{
    3100:	b570      	push	{r4, r5, r6, lr}
    3102:	0005      	movs	r5, r0
    3104:	000c      	movs	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    3106:	2800      	cmp	r0, #0
    3108:	d01c      	beq.n	3144 <_flash_init+0x44>
    310a:	4b10      	ldr	r3, [pc, #64]	; (314c <_flash_init+0x4c>)
    310c:	4299      	cmp	r1, r3
    310e:	d01b      	beq.n	3148 <_flash_init+0x48>
    3110:	2000      	movs	r0, #0
    3112:	2246      	movs	r2, #70	; 0x46
    3114:	490e      	ldr	r1, [pc, #56]	; (3150 <_flash_init+0x50>)
    3116:	4b0f      	ldr	r3, [pc, #60]	; (3154 <_flash_init+0x54>)
    3118:	4798      	blx	r3
	device->hw = hw;
    311a:	612c      	str	r4, [r5, #16]
	tmp = ((Nvmctrl *)hw)->CTRLB.reg;
    311c:	6862      	ldr	r2, [r4, #4]
	tmp &= mask;
    311e:	239e      	movs	r3, #158	; 0x9e
    3120:	4013      	ands	r3, r2
	((Nvmctrl *)hw)->CTRLB.reg = data;
    3122:	6063      	str	r3, [r4, #4]
	_nvm_dev = device;
    3124:	4b0c      	ldr	r3, [pc, #48]	; (3158 <_flash_init+0x58>)
    3126:	601d      	str	r5, [r3, #0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3128:	4b0c      	ldr	r3, [pc, #48]	; (315c <_flash_init+0x5c>)
    312a:	2220      	movs	r2, #32
    312c:	2180      	movs	r1, #128	; 0x80
    312e:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    3130:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3134:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3138:	3101      	adds	r1, #1
    313a:	31ff      	adds	r1, #255	; 0xff
    313c:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    313e:	601a      	str	r2, [r3, #0]
}
    3140:	2000      	movs	r0, #0
    3142:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(device && (hw == NVMCTRL));
    3144:	2000      	movs	r0, #0
    3146:	e7e4      	b.n	3112 <_flash_init+0x12>
    3148:	2001      	movs	r0, #1
    314a:	e7e2      	b.n	3112 <_flash_init+0x12>
    314c:	41004000 	.word	0x41004000
    3150:	00008bec 	.word	0x00008bec
    3154:	00002d7d 	.word	0x00002d7d
    3158:	20000890 	.word	0x20000890
    315c:	e000e100 	.word	0xe000e100

00003160 <_flash_get_page_size>:
}
    3160:	2040      	movs	r0, #64	; 0x40
    3162:	4770      	bx	lr

00003164 <_flash_get_total_pages>:
}
    3164:	2080      	movs	r0, #128	; 0x80
    3166:	0140      	lsls	r0, r0, #5
    3168:	4770      	bx	lr

0000316a <_flash_read>:
{
    316a:	b570      	push	{r4, r5, r6, lr}
	uint32_t nvm_address = src_addr / 2;
    316c:	084c      	lsrs	r4, r1, #1
	while (!hri_nvmctrl_get_interrupt_READY_bit(device->hw)) {
    316e:	6905      	ldr	r5, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    3170:	7d2e      	ldrb	r6, [r5, #20]
    3172:	07f6      	lsls	r6, r6, #31
    3174:	d5fb      	bpl.n	316e <_flash_read+0x4>
	((Nvmctrl *)hw)->STATUS.reg = mask;
    3176:	2020      	movs	r0, #32
    3178:	30ff      	adds	r0, #255	; 0xff
    317a:	8328      	strh	r0, [r5, #24]
	if (src_addr % 2) {
    317c:	07c8      	lsls	r0, r1, #31
    317e:	d507      	bpl.n	3190 <_flash_read+0x26>
		data      = NVM_MEMORY[nvm_address++];
    3180:	3401      	adds	r4, #1
    3182:	2001      	movs	r0, #1
    3184:	4381      	bics	r1, r0
    3186:	8809      	ldrh	r1, [r1, #0]
		buffer[0] = data >> 8;
    3188:	0a09      	lsrs	r1, r1, #8
    318a:	7011      	strb	r1, [r2, #0]
		i         = 1;
    318c:	2101      	movs	r1, #1
    318e:	e003      	b.n	3198 <_flash_read+0x2e>
		i = 0;
    3190:	2100      	movs	r1, #0
    3192:	e001      	b.n	3198 <_flash_read+0x2e>
		i += 2;
    3194:	3102      	adds	r1, #2
		data      = NVM_MEMORY[nvm_address++];
    3196:	002c      	movs	r4, r5
	while (i < length) {
    3198:	4299      	cmp	r1, r3
    319a:	d20b      	bcs.n	31b4 <_flash_read+0x4a>
		data      = NVM_MEMORY[nvm_address++];
    319c:	1c65      	adds	r5, r4, #1
    319e:	0064      	lsls	r4, r4, #1
    31a0:	8820      	ldrh	r0, [r4, #0]
    31a2:	b280      	uxth	r0, r0
		buffer[i] = (data & 0xFF);
    31a4:	5450      	strb	r0, [r2, r1]
		if (i < (length - 1)) {
    31a6:	1e5c      	subs	r4, r3, #1
    31a8:	42a1      	cmp	r1, r4
    31aa:	d2f3      	bcs.n	3194 <_flash_read+0x2a>
			buffer[i + 1] = (data >> 8);
    31ac:	1c4c      	adds	r4, r1, #1
    31ae:	0a00      	lsrs	r0, r0, #8
    31b0:	5510      	strb	r0, [r2, r4]
    31b2:	e7ef      	b.n	3194 <_flash_read+0x2a>
}
    31b4:	bd70      	pop	{r4, r5, r6, pc}
	...

000031b8 <_flash_write>:
{
    31b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    31ba:	46de      	mov	lr, fp
    31bc:	4657      	mov	r7, sl
    31be:	464e      	mov	r6, r9
    31c0:	4645      	mov	r5, r8
    31c2:	b5e0      	push	{r5, r6, r7, lr}
    31c4:	b0c5      	sub	sp, #276	; 0x114
    31c6:	4681      	mov	r9, r0
    31c8:	0016      	movs	r6, r2
    31ca:	001d      	movs	r5, r3
	uint32_t wr_start_addr = dst_addr;
    31cc:	000c      	movs	r4, r1
    31ce:	e048      	b.n	3262 <_flash_write+0xaa>
			_flash_read(device, row_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    31d0:	4653      	mov	r3, sl
    31d2:	0199      	lsls	r1, r3, #6
    31d4:	ab04      	add	r3, sp, #16
    31d6:	185a      	adds	r2, r3, r1
    31d8:	4441      	add	r1, r8
    31da:	2340      	movs	r3, #64	; 0x40
    31dc:	4648      	mov	r0, r9
    31de:	4f29      	ldr	r7, [pc, #164]	; (3284 <_flash_write+0xcc>)
    31e0:	47b8      	blx	r7
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    31e2:	2301      	movs	r3, #1
    31e4:	469c      	mov	ip, r3
    31e6:	44e2      	add	sl, ip
    31e8:	4653      	mov	r3, sl
    31ea:	2b03      	cmp	r3, #3
    31ec:	d9f0      	bls.n	31d0 <_flash_write+0x18>
		j = (wr_start_addr - row_start_addr) / NVMCTRL_PAGE_SIZE;
    31ee:	4643      	mov	r3, r8
    31f0:	1ae3      	subs	r3, r4, r3
    31f2:	0999      	lsrs	r1, r3, #6
		k = wr_start_addr - row_start_addr - j * NVMCTRL_PAGE_SIZE;
    31f4:	223f      	movs	r2, #63	; 0x3f
    31f6:	4013      	ands	r3, r2
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
    31f8:	e002      	b.n	3200 <_flash_write+0x48>
			wr_start_addr++;
    31fa:	3401      	adds	r4, #1
			buffer++;
    31fc:	3601      	adds	r6, #1
			length--;
    31fe:	3d01      	subs	r5, #1
		while ((wr_start_addr <= row_end_addr) && (length > 0)) {
    3200:	9a03      	ldr	r2, [sp, #12]
    3202:	4294      	cmp	r4, r2
    3204:	d80d      	bhi.n	3222 <_flash_write+0x6a>
    3206:	2d00      	cmp	r5, #0
    3208:	d00b      	beq.n	3222 <_flash_write+0x6a>
			tmp_buffer[j][k] = *buffer;
    320a:	7830      	ldrb	r0, [r6, #0]
    320c:	018a      	lsls	r2, r1, #6
    320e:	af04      	add	r7, sp, #16
    3210:	46bc      	mov	ip, r7
    3212:	4462      	add	r2, ip
    3214:	54d0      	strb	r0, [r2, r3]
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
    3216:	3301      	adds	r3, #1
    3218:	223f      	movs	r2, #63	; 0x3f
    321a:	4013      	ands	r3, r2
			if (0 == k) {
    321c:	d1ed      	bne.n	31fa <_flash_write+0x42>
				j++;
    321e:	3101      	adds	r1, #1
    3220:	e7eb      	b.n	31fa <_flash_write+0x42>
		_flash_erase_row(device->hw, row_start_addr, NVMCTRL_CTRLA_CMD_ER);
    3222:	2202      	movs	r2, #2
    3224:	4641      	mov	r1, r8
    3226:	464b      	mov	r3, r9
    3228:	6918      	ldr	r0, [r3, #16]
    322a:	4b17      	ldr	r3, [pc, #92]	; (3288 <_flash_write+0xd0>)
    322c:	4798      	blx	r3
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    322e:	2300      	movs	r3, #0
    3230:	469a      	mov	sl, r3
    3232:	e00e      	b.n	3252 <_flash_write+0x9a>
			               row_start_addr + i * NVMCTRL_PAGE_SIZE,
    3234:	4653      	mov	r3, sl
    3236:	0199      	lsls	r1, r3, #6
			               tmp_buffer[i],
    3238:	ab04      	add	r3, sp, #16
    323a:	185a      	adds	r2, r3, r1
			_flash_program(device->hw,
    323c:	4441      	add	r1, r8
    323e:	2304      	movs	r3, #4
    3240:	9300      	str	r3, [sp, #0]
    3242:	333c      	adds	r3, #60	; 0x3c
    3244:	4648      	mov	r0, r9
    3246:	6900      	ldr	r0, [r0, #16]
    3248:	4f10      	ldr	r7, [pc, #64]	; (328c <_flash_write+0xd4>)
    324a:	47b8      	blx	r7
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    324c:	2301      	movs	r3, #1
    324e:	469c      	mov	ip, r3
    3250:	44e2      	add	sl, ip
    3252:	4653      	mov	r3, sl
    3254:	2b03      	cmp	r3, #3
    3256:	d9ed      	bls.n	3234 <_flash_write+0x7c>
	} while (row_end_addr < (wr_start_addr + length - 1));
    3258:	192b      	adds	r3, r5, r4
    325a:	3b01      	subs	r3, #1
    325c:	9a03      	ldr	r2, [sp, #12]
    325e:	429a      	cmp	r2, r3
    3260:	d209      	bcs.n	3276 <_flash_write+0xbe>
		row_start_addr = wr_start_addr & ~((NVMCTRL_PAGE_SIZE * NVMCTRL_ROW_PAGES) - 1);
    3262:	23ff      	movs	r3, #255	; 0xff
    3264:	0022      	movs	r2, r4
    3266:	439a      	bics	r2, r3
    3268:	4690      	mov	r8, r2
		row_end_addr   = row_start_addr + NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE - 1;
    326a:	0017      	movs	r7, r2
    326c:	37ff      	adds	r7, #255	; 0xff
    326e:	9703      	str	r7, [sp, #12]
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    3270:	2300      	movs	r3, #0
    3272:	469a      	mov	sl, r3
    3274:	e7b8      	b.n	31e8 <_flash_write+0x30>
}
    3276:	b045      	add	sp, #276	; 0x114
    3278:	bc3c      	pop	{r2, r3, r4, r5}
    327a:	4690      	mov	r8, r2
    327c:	4699      	mov	r9, r3
    327e:	46a2      	mov	sl, r4
    3280:	46ab      	mov	fp, r5
    3282:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3284:	0000316b 	.word	0x0000316b
    3288:	00003061 	.word	0x00003061
    328c:	00003081 	.word	0x00003081

00003290 <_flash_erase>:
{
    3290:	b5f0      	push	{r4, r5, r6, r7, lr}
    3292:	46d6      	mov	lr, sl
    3294:	464f      	mov	r7, r9
    3296:	4646      	mov	r6, r8
    3298:	b5c0      	push	{r6, r7, lr}
    329a:	b090      	sub	sp, #64	; 0x40
    329c:	0007      	movs	r7, r0
    329e:	468a      	mov	sl, r1
    32a0:	0015      	movs	r5, r2
	row_start_addr = dst_addr & ~((NVMCTRL_PAGE_SIZE * NVMCTRL_ROW_PAGES) - 1);
    32a2:	23ff      	movs	r3, #255	; 0xff
    32a4:	000c      	movs	r4, r1
    32a6:	439c      	bics	r4, r3
	memset(tmp_buffer, 0xFF, NVMCTRL_PAGE_SIZE);
    32a8:	2240      	movs	r2, #64	; 0x40
    32aa:	21ff      	movs	r1, #255	; 0xff
    32ac:	4668      	mov	r0, sp
    32ae:	4b1f      	ldr	r3, [pc, #124]	; (332c <_flash_erase+0x9c>)
    32b0:	4798      	blx	r3
	if (dst_addr != row_start_addr) {
    32b2:	45a2      	cmp	sl, r4
    32b4:	d020      	beq.n	32f8 <_flash_erase+0x68>
		row_start_addr += NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE;
    32b6:	3401      	adds	r4, #1
    32b8:	34ff      	adds	r4, #255	; 0xff
		for (i = 0; i < NVMCTRL_ROW_PAGES - 1; i++) {
    32ba:	2300      	movs	r3, #0
    32bc:	4698      	mov	r8, r3
    32be:	4643      	mov	r3, r8
    32c0:	2b02      	cmp	r3, #2
    32c2:	d819      	bhi.n	32f8 <_flash_erase+0x68>
			_flash_write(device, dst_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    32c4:	2340      	movs	r3, #64	; 0x40
    32c6:	466a      	mov	r2, sp
    32c8:	4651      	mov	r1, sl
    32ca:	0038      	movs	r0, r7
    32cc:	4e18      	ldr	r6, [pc, #96]	; (3330 <_flash_erase+0xa0>)
    32ce:	47b0      	blx	r6
			if (--page_nums == 0) {
    32d0:	3d01      	subs	r5, #1
    32d2:	2d00      	cmp	r5, #0
    32d4:	d023      	beq.n	331e <_flash_erase+0x8e>
			dst_addr += NVMCTRL_PAGE_SIZE;
    32d6:	2340      	movs	r3, #64	; 0x40
    32d8:	469c      	mov	ip, r3
    32da:	44e2      	add	sl, ip
			if (dst_addr == row_start_addr) {
    32dc:	4554      	cmp	r4, sl
    32de:	d00b      	beq.n	32f8 <_flash_erase+0x68>
		for (i = 0; i < NVMCTRL_ROW_PAGES - 1; i++) {
    32e0:	3b3f      	subs	r3, #63	; 0x3f
    32e2:	469c      	mov	ip, r3
    32e4:	44e0      	add	r8, ip
    32e6:	e7ea      	b.n	32be <_flash_erase+0x2e>
		_flash_erase_row(device->hw, row_start_addr, NVMCTRL_CTRLA_CMD_ER);
    32e8:	2202      	movs	r2, #2
    32ea:	0021      	movs	r1, r4
    32ec:	6938      	ldr	r0, [r7, #16]
    32ee:	4b11      	ldr	r3, [pc, #68]	; (3334 <_flash_erase+0xa4>)
    32f0:	4798      	blx	r3
		row_start_addr += NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE;
    32f2:	3401      	adds	r4, #1
    32f4:	34ff      	adds	r4, #255	; 0xff
		page_nums -= NVMCTRL_ROW_PAGES;
    32f6:	3d04      	subs	r5, #4
	while (page_nums >= NVMCTRL_ROW_PAGES) {
    32f8:	2d03      	cmp	r5, #3
    32fa:	d8f5      	bhi.n	32e8 <_flash_erase+0x58>
	if (page_nums != 0) {
    32fc:	2d00      	cmp	r5, #0
    32fe:	d00e      	beq.n	331e <_flash_erase+0x8e>
    3300:	2300      	movs	r3, #0
    3302:	4699      	mov	r9, r3
    3304:	e009      	b.n	331a <_flash_erase+0x8a>
			_flash_write(device, row_start_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    3306:	2340      	movs	r3, #64	; 0x40
    3308:	466a      	mov	r2, sp
    330a:	0021      	movs	r1, r4
    330c:	0038      	movs	r0, r7
    330e:	4e08      	ldr	r6, [pc, #32]	; (3330 <_flash_erase+0xa0>)
    3310:	47b0      	blx	r6
			row_start_addr += NVMCTRL_PAGE_SIZE;
    3312:	3440      	adds	r4, #64	; 0x40
		for (i = 0; i < page_nums; i++) {
    3314:	2301      	movs	r3, #1
    3316:	469c      	mov	ip, r3
    3318:	44e1      	add	r9, ip
    331a:	454d      	cmp	r5, r9
    331c:	d8f3      	bhi.n	3306 <_flash_erase+0x76>
}
    331e:	b010      	add	sp, #64	; 0x40
    3320:	bc1c      	pop	{r2, r3, r4}
    3322:	4690      	mov	r8, r2
    3324:	4699      	mov	r9, r3
    3326:	46a2      	mov	sl, r4
    3328:	bdf0      	pop	{r4, r5, r6, r7, pc}
    332a:	46c0      	nop			; (mov r8, r8)
    332c:	0000777d 	.word	0x0000777d
    3330:	000031b9 	.word	0x000031b9
    3334:	00003061 	.word	0x00003061

00003338 <_flash_is_locked>:
	region_id = dst_addr / (NVMCTRL_FLASH_SIZE / 16);
    3338:	0b89      	lsrs	r1, r1, #14
	return !(hri_nvmctrl_get_LOCK_reg(device->hw, 1 << region_id));
    333a:	6902      	ldr	r2, [r0, #16]
    333c:	0409      	lsls	r1, r1, #16
    333e:	0c09      	lsrs	r1, r1, #16
    3340:	2301      	movs	r3, #1
    3342:	408b      	lsls	r3, r1
	tmp = ((Nvmctrl *)hw)->LOCK.reg;
    3344:	8c10      	ldrh	r0, [r2, #32]
	tmp &= mask;
    3346:	4018      	ands	r0, r3
    3348:	4243      	negs	r3, r0
    334a:	4158      	adcs	r0, r3
    334c:	b2c0      	uxtb	r0, r0
}
    334e:	4770      	bx	lr

00003350 <NVMCTRL_Handler>:

/**
 * \internal NVM interrupt handler
 */
void NVMCTRL_Handler(void)
{
    3350:	b510      	push	{r4, lr}
	void *const hw = _nvm_dev->hw;
    3352:	4b0a      	ldr	r3, [pc, #40]	; (337c <NVMCTRL_Handler+0x2c>)
    3354:	6818      	ldr	r0, [r3, #0]
    3356:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_READY) >> NVMCTRL_INTFLAG_READY_Pos;
    3358:	7d1a      	ldrb	r2, [r3, #20]

	if (hri_nvmctrl_get_interrupt_READY_bit(hw)) {
    335a:	07d2      	lsls	r2, r2, #31
    335c:	d504      	bpl.n	3368 <NVMCTRL_Handler+0x18>
		if (NULL != _nvm_dev->flash_cb.ready_cb) {
    335e:	6803      	ldr	r3, [r0, #0]
    3360:	2b00      	cmp	r3, #0
    3362:	d000      	beq.n	3366 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.ready_cb(_nvm_dev);
    3364:	4798      	blx	r3
		hri_nvmctrl_clear_interrupt_ERROR_bit(hw);
		if (NULL != _nvm_dev->flash_cb.error_cb) {
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
		}
	}
}
    3366:	bd10      	pop	{r4, pc}
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_ERROR) >> NVMCTRL_INTFLAG_ERROR_Pos;
    3368:	7d1a      	ldrb	r2, [r3, #20]
	} else if (hri_nvmctrl_get_interrupt_ERROR_bit(hw)) {
    336a:	0792      	lsls	r2, r2, #30
    336c:	d5fb      	bpl.n	3366 <NVMCTRL_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_ERROR;
    336e:	2202      	movs	r2, #2
    3370:	751a      	strb	r2, [r3, #20]
		if (NULL != _nvm_dev->flash_cb.error_cb) {
    3372:	6843      	ldr	r3, [r0, #4]
    3374:	2b00      	cmp	r3, #0
    3376:	d0f6      	beq.n	3366 <NVMCTRL_Handler+0x16>
			_nvm_dev->flash_cb.error_cb(_nvm_dev);
    3378:	4798      	blx	r3
}
    337a:	e7f4      	b.n	3366 <NVMCTRL_Handler+0x16>
    337c:	20000890 	.word	0x20000890

00003380 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    3380:	4b06      	ldr	r3, [pc, #24]	; (339c <_pm_init+0x1c>)
    3382:	7a1a      	ldrb	r2, [r3, #8]
    3384:	b2d2      	uxtb	r2, r2
    3386:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    3388:	7a5a      	ldrb	r2, [r3, #9]
    338a:	b2d2      	uxtb	r2, r2
    338c:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    338e:	7a9a      	ldrb	r2, [r3, #10]
    3390:	b2d2      	uxtb	r2, r2
    3392:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    3394:	7ada      	ldrb	r2, [r3, #11]
    3396:	b2d2      	uxtb	r2, r2
    3398:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    339a:	4770      	bx	lr
    339c:	40000400 	.word	0x40000400

000033a0 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    33a0:	4b02      	ldr	r3, [pc, #8]	; (33ac <_sercom_get_hardware_index+0xc>)
    33a2:	469c      	mov	ip, r3
    33a4:	4460      	add	r0, ip
    33a6:	0a80      	lsrs	r0, r0, #10
    33a8:	b2c0      	uxtb	r0, r0
}
    33aa:	4770      	bx	lr
    33ac:	bdfff800 	.word	0xbdfff800

000033b0 <_spi_sync_enable>:
		;
}

static inline bool hri_sercomspi_is_syncing(const void *const hw)
{
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
    33b0:	8a03      	ldrh	r3, [r0, #16]
    33b2:	0bdb      	lsrs	r3, r3, #15
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw)) {
    33b4:	d108      	bne.n	33c8 <_spi_sync_enable+0x18>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    33b6:	6803      	ldr	r3, [r0, #0]
    33b8:	2202      	movs	r2, #2
    33ba:	4313      	orrs	r3, r2
    33bc:	6003      	str	r3, [r0, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    33be:	8a03      	ldrh	r3, [r0, #16]
    33c0:	0bdb      	lsrs	r3, r3, #15
    33c2:	d1fc      	bne.n	33be <_spi_sync_enable+0xe>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    33c4:	2000      	movs	r0, #0
}
    33c6:	4770      	bx	lr
		return ERR_BUSY;
    33c8:	2004      	movs	r0, #4
    33ca:	4240      	negs	r0, r0
    33cc:	e7fb      	b.n	33c6 <_spi_sync_enable+0x16>

000033ce <_spi_sync_disable>:
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
    33ce:	8a03      	ldrh	r3, [r0, #16]
    33d0:	0bdb      	lsrs	r3, r3, #15
 *
 * \return Disabling status
 */
static int32_t _spi_sync_disable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw)) {
    33d2:	d108      	bne.n	33e6 <_spi_sync_disable+0x18>
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    33d4:	6803      	ldr	r3, [r0, #0]
    33d6:	2202      	movs	r2, #2
    33d8:	4393      	bics	r3, r2
    33da:	6003      	str	r3, [r0, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    33dc:	8a03      	ldrh	r3, [r0, #16]
    33de:	0bdb      	lsrs	r3, r3, #15
    33e0:	d1fc      	bne.n	33dc <_spi_sync_disable+0xe>
		return ERR_BUSY;
	}
	hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    33e2:	2000      	movs	r0, #0
}
    33e4:	4770      	bx	lr
		return ERR_BUSY;
    33e6:	2004      	movs	r0, #4
    33e8:	4240      	negs	r0, r0
    33ea:	e7fb      	b.n	33e4 <_spi_sync_disable+0x16>

000033ec <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    33ec:	b570      	push	{r4, r5, r6, lr}
    33ee:	0006      	movs	r6, r0
    33f0:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    33f2:	0008      	movs	r0, r1
    33f4:	4b63      	ldr	r3, [pc, #396]	; (3584 <_spi_m_sync_init+0x198>)
    33f6:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    33f8:	2300      	movs	r3, #0
    33fa:	2b01      	cmp	r3, #1
    33fc:	d80d      	bhi.n	341a <_spi_m_sync_init+0x2e>
		if (sercomspi_regs[i].n == n) {
    33fe:	0119      	lsls	r1, r3, #4
    3400:	4a61      	ldr	r2, [pc, #388]	; (3588 <_spi_m_sync_init+0x19c>)
    3402:	3238      	adds	r2, #56	; 0x38
    3404:	1852      	adds	r2, r2, r1
    3406:	7bd2      	ldrb	r2, [r2, #15]
    3408:	4290      	cmp	r0, r2
    340a:	d002      	beq.n	3412 <_spi_m_sync_init+0x26>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    340c:	3301      	adds	r3, #1
    340e:	b2db      	uxtb	r3, r3
    3410:	e7f3      	b.n	33fa <_spi_m_sync_init+0xe>
			return &sercomspi_regs[i];
    3412:	4b5d      	ldr	r3, [pc, #372]	; (3588 <_spi_m_sync_init+0x19c>)
    3414:	3338      	adds	r3, #56	; 0x38
    3416:	185d      	adds	r5, r3, r1
    3418:	e000      	b.n	341c <_spi_m_sync_init+0x30>
	return NULL;
    341a:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    341c:	2e00      	cmp	r6, #0
    341e:	d100      	bne.n	3422 <_spi_m_sync_init+0x36>
    3420:	e06a      	b.n	34f8 <_spi_m_sync_init+0x10c>
    3422:	2c00      	cmp	r4, #0
    3424:	d100      	bne.n	3428 <_spi_m_sync_init+0x3c>
    3426:	e065      	b.n	34f4 <_spi_m_sync_init+0x108>
    3428:	2001      	movs	r0, #1
    342a:	4a58      	ldr	r2, [pc, #352]	; (358c <_spi_m_sync_init+0x1a0>)
    342c:	4958      	ldr	r1, [pc, #352]	; (3590 <_spi_m_sync_init+0x1a4>)
    342e:	4b59      	ldr	r3, [pc, #356]	; (3594 <_spi_m_sync_init+0x1a8>)
    3430:	4798      	blx	r3

	if (regs == NULL) {
    3432:	2d00      	cmp	r5, #0
    3434:	d100      	bne.n	3438 <_spi_m_sync_init+0x4c>
    3436:	e0a2      	b.n	357e <_spi_m_sync_init+0x192>
    3438:	8a23      	ldrh	r3, [r4, #16]
    343a:	0bdb      	lsrs	r3, r3, #15
    343c:	d1fc      	bne.n	3438 <_spi_m_sync_init+0x4c>
    343e:	8a23      	ldrh	r3, [r4, #16]
    3440:	0bdb      	lsrs	r3, r3, #15
    3442:	d1fc      	bne.n	343e <_spi_m_sync_init+0x52>
static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomspi_wait_for_sync(hw);
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3444:	6823      	ldr	r3, [r4, #0]
		return ERR_INVALID_ARG;
	}

	hri_sercomspi_wait_for_sync(hw);
	if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    3446:	079b      	lsls	r3, r3, #30
    3448:	d507      	bpl.n	345a <_spi_m_sync_init+0x6e>
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    344a:	2300      	movs	r3, #0
    344c:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    344e:	8a23      	ldrh	r3, [r4, #16]
    3450:	0bdb      	lsrs	r3, r3, #15
    3452:	d1fc      	bne.n	344e <_spi_m_sync_init+0x62>
    3454:	8a23      	ldrh	r3, [r4, #16]
    3456:	0bdb      	lsrs	r3, r3, #15
    3458:	d1fc      	bne.n	3454 <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    345a:	2301      	movs	r3, #1
    345c:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    345e:	8a23      	ldrh	r3, [r4, #16]
    3460:	0bdb      	lsrs	r3, r3, #15
    3462:	d1fc      	bne.n	345e <_spi_m_sync_init+0x72>
    3464:	8a23      	ldrh	r3, [r4, #16]
    3466:	0bdb      	lsrs	r3, r3, #15
    3468:	d1fc      	bne.n	3464 <_spi_m_sync_init+0x78>
		hri_sercomspi_wait_for_sync(hw);
	}
	hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST);
	hri_sercomspi_wait_for_sync(hw);

	dev->prvt = hw;
    346a:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    346c:	782b      	ldrb	r3, [r5, #0]
    346e:	786a      	ldrb	r2, [r5, #1]
    3470:	0212      	lsls	r2, r2, #8
    3472:	431a      	orrs	r2, r3
    3474:	78ab      	ldrb	r3, [r5, #2]
    3476:	041b      	lsls	r3, r3, #16
    3478:	431a      	orrs	r2, r3
    347a:	78eb      	ldrb	r3, [r5, #3]
    347c:	061b      	lsls	r3, r3, #24
    347e:	4313      	orrs	r3, r2
    3480:	221c      	movs	r2, #28
    3482:	4013      	ands	r3, r2
    3484:	2b08      	cmp	r3, #8
    3486:	d039      	beq.n	34fc <_spi_m_sync_init+0x110>
	ASSERT(hw && regs);
    3488:	2c00      	cmp	r4, #0
    348a:	d100      	bne.n	348e <_spi_m_sync_init+0xa2>
    348c:	e073      	b.n	3576 <_spi_m_sync_init+0x18a>
    348e:	2d00      	cmp	r5, #0
    3490:	d100      	bne.n	3494 <_spi_m_sync_init+0xa8>
    3492:	e06e      	b.n	3572 <_spi_m_sync_init+0x186>
    3494:	2001      	movs	r0, #1
    3496:	4a40      	ldr	r2, [pc, #256]	; (3598 <_spi_m_sync_init+0x1ac>)
    3498:	493d      	ldr	r1, [pc, #244]	; (3590 <_spi_m_sync_init+0x1a4>)
    349a:	4b3e      	ldr	r3, [pc, #248]	; (3594 <_spi_m_sync_init+0x1a8>)
    349c:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    349e:	782b      	ldrb	r3, [r5, #0]
    34a0:	786a      	ldrb	r2, [r5, #1]
    34a2:	0212      	lsls	r2, r2, #8
    34a4:	431a      	orrs	r2, r3
    34a6:	78ab      	ldrb	r3, [r5, #2]
    34a8:	041b      	lsls	r3, r3, #16
    34aa:	431a      	orrs	r2, r3
    34ac:	78eb      	ldrb	r3, [r5, #3]
    34ae:	061b      	lsls	r3, r3, #24
    34b0:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    34b2:	4a3a      	ldr	r2, [pc, #232]	; (359c <_spi_m_sync_init+0x1b0>)
    34b4:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    34b6:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    34b8:	8a23      	ldrh	r3, [r4, #16]
    34ba:	0bdb      	lsrs	r3, r3, #15
    34bc:	d1fc      	bne.n	34b8 <_spi_m_sync_init+0xcc>
	    hw, (regs->ctrlb & ~(SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_PLOADEN)) | (SERCOM_SPI_CTRLB_RXEN));
    34be:	792b      	ldrb	r3, [r5, #4]
    34c0:	796a      	ldrb	r2, [r5, #5]
    34c2:	0212      	lsls	r2, r2, #8
    34c4:	431a      	orrs	r2, r3
    34c6:	79ab      	ldrb	r3, [r5, #6]
    34c8:	041b      	lsls	r3, r3, #16
    34ca:	431a      	orrs	r2, r3
    34cc:	79eb      	ldrb	r3, [r5, #7]
    34ce:	061b      	lsls	r3, r3, #24
    34d0:	4313      	orrs	r3, r2
    34d2:	4a33      	ldr	r2, [pc, #204]	; (35a0 <_spi_m_sync_init+0x1b4>)
    34d4:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    34d6:	2280      	movs	r2, #128	; 0x80
    34d8:	0292      	lsls	r2, r2, #10
    34da:	4313      	orrs	r3, r2
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    34dc:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    34de:	7b2b      	ldrb	r3, [r5, #12]
}

static inline void hri_sercomspi_write_BAUD_reg(const void *const hw, hri_sercomspi_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.BAUD.reg = data;
    34e0:	72a3      	strb	r3, [r4, #10]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    34e2:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    34e4:	7223      	strb	r3, [r4, #8]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    34e6:	792b      	ldrb	r3, [r5, #4]
    34e8:	075b      	lsls	r3, r3, #29
    34ea:	d146      	bne.n	357a <_spi_m_sync_init+0x18e>
    34ec:	2301      	movs	r3, #1
    34ee:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
    34f0:	2000      	movs	r0, #0
}
    34f2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    34f4:	2000      	movs	r0, #0
    34f6:	e798      	b.n	342a <_spi_m_sync_init+0x3e>
    34f8:	2000      	movs	r0, #0
    34fa:	e796      	b.n	342a <_spi_m_sync_init+0x3e>
	ASSERT(hw && regs);
    34fc:	2c00      	cmp	r4, #0
    34fe:	d036      	beq.n	356e <_spi_m_sync_init+0x182>
    3500:	2d00      	cmp	r5, #0
    3502:	d032      	beq.n	356a <_spi_m_sync_init+0x17e>
    3504:	2001      	movs	r0, #1
    3506:	4a27      	ldr	r2, [pc, #156]	; (35a4 <_spi_m_sync_init+0x1b8>)
    3508:	4921      	ldr	r1, [pc, #132]	; (3590 <_spi_m_sync_init+0x1a4>)
    350a:	4b22      	ldr	r3, [pc, #136]	; (3594 <_spi_m_sync_init+0x1a8>)
    350c:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    350e:	782b      	ldrb	r3, [r5, #0]
    3510:	786a      	ldrb	r2, [r5, #1]
    3512:	0212      	lsls	r2, r2, #8
    3514:	431a      	orrs	r2, r3
    3516:	78ab      	ldrb	r3, [r5, #2]
    3518:	041b      	lsls	r3, r3, #16
    351a:	431a      	orrs	r2, r3
    351c:	78eb      	ldrb	r3, [r5, #3]
    351e:	061b      	lsls	r3, r3, #24
    3520:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    3522:	4a1e      	ldr	r2, [pc, #120]	; (359c <_spi_m_sync_init+0x1b0>)
    3524:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3526:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    3528:	8a23      	ldrh	r3, [r4, #16]
    352a:	0bdb      	lsrs	r3, r3, #15
    352c:	d1fc      	bne.n	3528 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_CTRLB_reg(hw, regs->ctrlb | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_PLOADEN));
    352e:	792b      	ldrb	r3, [r5, #4]
    3530:	796a      	ldrb	r2, [r5, #5]
    3532:	0212      	lsls	r2, r2, #8
    3534:	431a      	orrs	r2, r3
    3536:	79ab      	ldrb	r3, [r5, #6]
    3538:	041b      	lsls	r3, r3, #16
    353a:	431a      	orrs	r2, r3
    353c:	79eb      	ldrb	r3, [r5, #7]
    353e:	061b      	lsls	r3, r3, #24
    3540:	4313      	orrs	r3, r2
    3542:	4a19      	ldr	r2, [pc, #100]	; (35a8 <_spi_m_sync_init+0x1bc>)
    3544:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    3546:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    3548:	7a2b      	ldrb	r3, [r5, #8]
    354a:	7a6a      	ldrb	r2, [r5, #9]
    354c:	0212      	lsls	r2, r2, #8
    354e:	431a      	orrs	r2, r3
    3550:	7aab      	ldrb	r3, [r5, #10]
    3552:	041b      	lsls	r3, r3, #16
    3554:	431a      	orrs	r2, r3
    3556:	7aeb      	ldrb	r3, [r5, #11]
    3558:	061b      	lsls	r3, r3, #24
    355a:	4313      	orrs	r3, r2
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    355c:	6163      	str	r3, [r4, #20]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    355e:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    3560:	7223      	strb	r3, [r4, #8]
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
    3562:	8a23      	ldrh	r3, [r4, #16]
    3564:	0bdb      	lsrs	r3, r3, #15
	while (hri_sercomspi_is_syncing(hw))
    3566:	d1fc      	bne.n	3562 <_spi_m_sync_init+0x176>
    3568:	e7bd      	b.n	34e6 <_spi_m_sync_init+0xfa>
	ASSERT(hw && regs);
    356a:	2000      	movs	r0, #0
    356c:	e7cb      	b.n	3506 <_spi_m_sync_init+0x11a>
    356e:	2000      	movs	r0, #0
    3570:	e7c9      	b.n	3506 <_spi_m_sync_init+0x11a>
	ASSERT(hw && regs);
    3572:	2000      	movs	r0, #0
    3574:	e78f      	b.n	3496 <_spi_m_sync_init+0xaa>
    3576:	2000      	movs	r0, #0
    3578:	e78d      	b.n	3496 <_spi_m_sync_init+0xaa>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    357a:	2302      	movs	r3, #2
    357c:	e7b7      	b.n	34ee <_spi_m_sync_init+0x102>
		return ERR_INVALID_ARG;
    357e:	200d      	movs	r0, #13
    3580:	4240      	negs	r0, r0
    3582:	e7b6      	b.n	34f2 <_spi_m_sync_init+0x106>
    3584:	000033a1 	.word	0x000033a1
    3588:	00008c0c 	.word	0x00008c0c
    358c:	000008a3 	.word	0x000008a3
    3590:	00008c64 	.word	0x00008c64
    3594:	00002d7d 	.word	0x00002d7d
    3598:	00000872 	.word	0x00000872
    359c:	fffffefc 	.word	0xfffffefc
    35a0:	fffd3fbf 	.word	0xfffd3fbf
    35a4:	00000883 	.word	0x00000883
    35a8:	00020040 	.word	0x00020040

000035ac <_spi_m_sync_enable>:

	return _spi_deinit(hw);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    35ac:	b510      	push	{r4, lr}
    35ae:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    35b0:	d00d      	beq.n	35ce <_spi_m_sync_enable+0x22>
    35b2:	6803      	ldr	r3, [r0, #0]
    35b4:	2b00      	cmp	r3, #0
    35b6:	d008      	beq.n	35ca <_spi_m_sync_enable+0x1e>
    35b8:	2001      	movs	r0, #1
    35ba:	4a06      	ldr	r2, [pc, #24]	; (35d4 <_spi_m_sync_enable+0x28>)
    35bc:	4906      	ldr	r1, [pc, #24]	; (35d8 <_spi_m_sync_enable+0x2c>)
    35be:	4b07      	ldr	r3, [pc, #28]	; (35dc <_spi_m_sync_enable+0x30>)
    35c0:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    35c2:	6820      	ldr	r0, [r4, #0]
    35c4:	4b06      	ldr	r3, [pc, #24]	; (35e0 <_spi_m_sync_enable+0x34>)
    35c6:	4798      	blx	r3
}
    35c8:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    35ca:	2000      	movs	r0, #0
    35cc:	e7f5      	b.n	35ba <_spi_m_sync_enable+0xe>
    35ce:	2000      	movs	r0, #0
    35d0:	e7f3      	b.n	35ba <_spi_m_sync_enable+0xe>
    35d2:	46c0      	nop			; (mov r8, r8)
    35d4:	0000090a 	.word	0x0000090a
    35d8:	00008c64 	.word	0x00008c64
    35dc:	00002d7d 	.word	0x00002d7d
    35e0:	000033b1 	.word	0x000033b1

000035e4 <_spi_m_sync_disable>:

	return _spi_async_enable(dev->prvt);
}

int32_t _spi_m_sync_disable(struct _spi_m_sync_dev *dev)
{
    35e4:	b510      	push	{r4, lr}
    35e6:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    35e8:	d00d      	beq.n	3606 <_spi_m_sync_disable+0x22>
    35ea:	6803      	ldr	r3, [r0, #0]
    35ec:	2b00      	cmp	r3, #0
    35ee:	d008      	beq.n	3602 <_spi_m_sync_disable+0x1e>
    35f0:	2001      	movs	r0, #1
    35f2:	4a06      	ldr	r2, [pc, #24]	; (360c <_spi_m_sync_disable+0x28>)
    35f4:	4906      	ldr	r1, [pc, #24]	; (3610 <_spi_m_sync_disable+0x2c>)
    35f6:	4b07      	ldr	r3, [pc, #28]	; (3614 <_spi_m_sync_disable+0x30>)
    35f8:	4798      	blx	r3

	return _spi_sync_disable(dev->prvt);
    35fa:	6820      	ldr	r0, [r4, #0]
    35fc:	4b06      	ldr	r3, [pc, #24]	; (3618 <_spi_m_sync_disable+0x34>)
    35fe:	4798      	blx	r3
}
    3600:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    3602:	2000      	movs	r0, #0
    3604:	e7f5      	b.n	35f2 <_spi_m_sync_disable+0xe>
    3606:	2000      	movs	r0, #0
    3608:	e7f3      	b.n	35f2 <_spi_m_sync_disable+0xe>
    360a:	46c0      	nop			; (mov r8, r8)
    360c:	00000926 	.word	0x00000926
    3610:	00008c64 	.word	0x00008c64
    3614:	00002d7d 	.word	0x00002d7d
    3618:	000033cf 	.word	0x000033cf

0000361c <_spi_m_sync_trans>:
	ctrl->txcnt++;
	hri_sercomspi_write_DATA_reg(hw, data);
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    361c:	b570      	push	{r4, r5, r6, lr}
    361e:	b088      	sub	sp, #32
    3620:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    3622:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    3624:	680b      	ldr	r3, [r1, #0]
    3626:	9303      	str	r3, [sp, #12]
    3628:	684b      	ldr	r3, [r1, #4]
    362a:	9304      	str	r3, [sp, #16]
    362c:	2300      	movs	r3, #0
    362e:	9305      	str	r3, [sp, #20]
    3630:	9306      	str	r3, [sp, #24]
    3632:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    3634:	2800      	cmp	r0, #0
    3636:	d014      	beq.n	3662 <_spi_m_sync_trans+0x46>
    3638:	2c00      	cmp	r4, #0
    363a:	d010      	beq.n	365e <_spi_m_sync_trans+0x42>
    363c:	2001      	movs	r0, #1
    363e:	4a2d      	ldr	r2, [pc, #180]	; (36f4 <_spi_m_sync_trans+0xd8>)
    3640:	492d      	ldr	r1, [pc, #180]	; (36f8 <_spi_m_sync_trans+0xdc>)
    3642:	4b2e      	ldr	r3, [pc, #184]	; (36fc <_spi_m_sync_trans+0xe0>)
    3644:	4798      	blx	r3
    3646:	8a23      	ldrh	r3, [r4, #16]
    3648:	0bdb      	lsrs	r3, r3, #15

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(hw)) {
    364a:	d14f      	bne.n	36ec <_spi_m_sync_trans+0xd0>
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    364c:	8a23      	ldrh	r3, [r4, #16]
    364e:	0bdb      	lsrs	r3, r3, #15
    3650:	d1fc      	bne.n	364c <_spi_m_sync_trans+0x30>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3652:	6823      	ldr	r3, [r4, #0]
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    3654:	079b      	lsls	r3, r3, #30
    3656:	d418      	bmi.n	368a <_spi_m_sync_trans+0x6e>
		return ERR_NOT_INITIALIZED;
    3658:	2014      	movs	r0, #20
    365a:	4240      	negs	r0, r0
    365c:	e044      	b.n	36e8 <_spi_m_sync_trans+0xcc>
	ASSERT(dev && hw);
    365e:	2000      	movs	r0, #0
    3660:	e7ed      	b.n	363e <_spi_m_sync_trans+0x22>
    3662:	2000      	movs	r0, #0
    3664:	e7eb      	b.n	363e <_spi_m_sync_trans+0x22>
		return false;
    3666:	2200      	movs	r2, #0
    3668:	e026      	b.n	36b8 <_spi_m_sync_trans+0x9c>
			data |= (*ctrl->txbuf) << 8;
    366a:	7858      	ldrb	r0, [r3, #1]
    366c:	0200      	lsls	r0, r0, #8
    366e:	4301      	orrs	r1, r0
			ctrl->txbuf++;
    3670:	3302      	adds	r3, #2
    3672:	9303      	str	r3, [sp, #12]
	ctrl->txcnt++;
    3674:	3201      	adds	r2, #1
    3676:	9205      	str	r2, [sp, #20]
	hri_sercomspi_write_DATA_reg(hw, data);
    3678:	b289      	uxth	r1, r1
}

static inline void hri_sercomspi_write_DATA_reg(const void *const hw, hri_sercomspi_data_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DATA.reg = data;
    367a:	8321      	strh	r1, [r4, #24]
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check(hw, iflag, &ctrl);
			}
		}

		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    367c:	9805      	ldr	r0, [sp, #20]
    367e:	68ab      	ldr	r3, [r5, #8]
    3680:	4298      	cmp	r0, r3
    3682:	d302      	bcc.n	368a <_spi_m_sync_trans+0x6e>
    3684:	9a06      	ldr	r2, [sp, #24]
    3686:	4293      	cmp	r3, r2
    3688:	d929      	bls.n	36de <_spi_m_sync_trans+0xc2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    368a:	7ba3      	ldrb	r3, [r4, #14]
    368c:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    368e:	075a      	lsls	r2, r3, #29
    3690:	d5e9      	bpl.n	3666 <_spi_m_sync_trans+0x4a>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomspi_data_reg_t hri_sercomspi_read_DATA_reg(const void *const hw)
{
	return ((Sercom *)hw)->SPI.DATA.reg;
    3692:	8b22      	ldrh	r2, [r4, #24]
    3694:	b292      	uxth	r2, r2
	if (ctrl->rxbuf) {
    3696:	9904      	ldr	r1, [sp, #16]
    3698:	2900      	cmp	r1, #0
    369a:	d008      	beq.n	36ae <_spi_m_sync_trans+0x92>
		*ctrl->rxbuf++ = (uint8_t)data;
    369c:	1c48      	adds	r0, r1, #1
    369e:	9004      	str	r0, [sp, #16]
    36a0:	700a      	strb	r2, [r1, #0]
		if (ctrl->char_size > 1) {
    36a2:	2e01      	cmp	r6, #1
    36a4:	d903      	bls.n	36ae <_spi_m_sync_trans+0x92>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    36a6:	1c88      	adds	r0, r1, #2
    36a8:	9004      	str	r0, [sp, #16]
    36aa:	0a12      	lsrs	r2, r2, #8
    36ac:	704a      	strb	r2, [r1, #1]
	ctrl->rxcnt++;
    36ae:	9a06      	ldr	r2, [sp, #24]
    36b0:	9201      	str	r2, [sp, #4]
    36b2:	3201      	adds	r2, #1
    36b4:	9206      	str	r2, [sp, #24]
	return true;
    36b6:	2201      	movs	r2, #1
		if (!_spi_rx_check(hw, iflag, &ctrl)) {
    36b8:	2a00      	cmp	r2, #0
    36ba:	d1df      	bne.n	367c <_spi_m_sync_trans+0x60>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    36bc:	9906      	ldr	r1, [sp, #24]
    36be:	9a05      	ldr	r2, [sp, #20]
    36c0:	4291      	cmp	r1, r2
    36c2:	d3db      	bcc.n	367c <_spi_m_sync_trans+0x60>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    36c4:	07db      	lsls	r3, r3, #31
    36c6:	d5d9      	bpl.n	367c <_spi_m_sync_trans+0x60>
	if (ctrl->txbuf) {
    36c8:	9b03      	ldr	r3, [sp, #12]
    36ca:	2b00      	cmp	r3, #0
    36cc:	d005      	beq.n	36da <_spi_m_sync_trans+0xbe>
		data = *ctrl->txbuf++;
    36ce:	1c59      	adds	r1, r3, #1
    36d0:	9103      	str	r1, [sp, #12]
    36d2:	7819      	ldrb	r1, [r3, #0]
		if (ctrl->char_size > 1) {
    36d4:	2e01      	cmp	r6, #1
    36d6:	d8c8      	bhi.n	366a <_spi_m_sync_trans+0x4e>
    36d8:	e7cc      	b.n	3674 <_spi_m_sync_trans+0x58>
		data = SPI_DUMMY_CHAR;
    36da:	4909      	ldr	r1, [pc, #36]	; (3700 <_spi_m_sync_trans+0xe4>)
    36dc:	e7ca      	b.n	3674 <_spi_m_sync_trans+0x58>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    36de:	7ba3      	ldrb	r3, [r4, #14]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    36e0:	079b      	lsls	r3, r3, #30
    36e2:	d0fc      	beq.n	36de <_spi_m_sync_trans+0xc2>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    36e4:	2303      	movs	r3, #3
    36e6:	73a3      	strb	r3, [r4, #14]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    36e8:	b008      	add	sp, #32
    36ea:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BUSY;
    36ec:	2004      	movs	r0, #4
    36ee:	4240      	negs	r0, r0
    36f0:	e7fa      	b.n	36e8 <_spi_m_sync_trans+0xcc>
    36f2:	46c0      	nop			; (mov r8, r8)
    36f4:	00000a01 	.word	0x00000a01
    36f8:	00008c64 	.word	0x00008c64
    36fc:	00002d7d 	.word	0x00002d7d
    3700:	000001ff 	.word	0x000001ff

00003704 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    3704:	4a13      	ldr	r2, [pc, #76]	; (3754 <_sysctrl_init_sources+0x50>)
    3706:	6a11      	ldr	r1, [r2, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    3708:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    370a:	6a13      	ldr	r3, [r2, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    370c:	0f9b      	lsrs	r3, r3, #30
    370e:	079b      	lsls	r3, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    3710:	0409      	lsls	r1, r1, #16
    3712:	4811      	ldr	r0, [pc, #68]	; (3758 <_sysctrl_init_sources+0x54>)
    3714:	4001      	ands	r1, r0
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    3716:	430b      	orrs	r3, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    3718:	2102      	movs	r1, #2
    371a:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    371c:	6213      	str	r3, [r2, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    371e:	6993      	ldr	r3, [r2, #24]
	tmp = (tmp & SYSCTRL_OSC32K_CALIB_Msk) >> SYSCTRL_OSC32K_CALIB_Pos;
    3720:	0c1b      	lsrs	r3, r3, #16
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
    3722:	041b      	lsls	r3, r3, #16
    3724:	21fe      	movs	r1, #254	; 0xfe
    3726:	03c9      	lsls	r1, r1, #15
    3728:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    372a:	490c      	ldr	r1, [pc, #48]	; (375c <_sysctrl_init_sources+0x58>)
    372c:	430b      	orrs	r3, r1
	((Sysctrl *)hw)->OSC32K.reg = data;
    372e:	6193      	str	r3, [r2, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    3730:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    3732:	211f      	movs	r1, #31
    3734:	400b      	ands	r3, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    3736:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    3738:	4b06      	ldr	r3, [pc, #24]	; (3754 <_sysctrl_init_sources+0x50>)
    373a:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    373c:	075b      	lsls	r3, r3, #29
    373e:	d5fb      	bpl.n	3738 <_sysctrl_init_sources+0x34>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    3740:	4b04      	ldr	r3, [pc, #16]	; (3754 <_sysctrl_init_sources+0x50>)
    3742:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    3744:	071b      	lsls	r3, r3, #28
    3746:	d5fb      	bpl.n	3740 <_sysctrl_init_sources+0x3c>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    3748:	4a02      	ldr	r2, [pc, #8]	; (3754 <_sysctrl_init_sources+0x50>)
    374a:	6a13      	ldr	r3, [r2, #32]
    374c:	2180      	movs	r1, #128	; 0x80
    374e:	430b      	orrs	r3, r1
    3750:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    3752:	4770      	bx	lr
    3754:	40000800 	.word	0x40000800
    3758:	0fff0000 	.word	0x0fff0000
    375c:	00000706 	.word	0x00000706

00003760 <_sysctrl_init_referenced_generators>:
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    3760:	4770      	bx	lr
	...

00003764 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    3764:	4b02      	ldr	r3, [pc, #8]	; (3770 <_system_time_init+0xc>)
    3766:	4a03      	ldr	r2, [pc, #12]	; (3774 <_system_time_init+0x10>)
    3768:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    376a:	2205      	movs	r2, #5
    376c:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    376e:	4770      	bx	lr
    3770:	e000e010 	.word	0xe000e010
    3774:	00ffffff 	.word	0x00ffffff

00003778 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    3778:	b510      	push	{r4, lr}
	_system_time_init(hw);
    377a:	4b01      	ldr	r3, [pc, #4]	; (3780 <_delay_init+0x8>)
    377c:	4798      	blx	r3
}
    377e:	bd10      	pop	{r4, pc}
    3780:	00003765 	.word	0x00003765

00003784 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    3784:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    3786:	e00b      	b.n	37a0 <_delay_cycles+0x1c>
		SysTick->LOAD = 0xFFFFFF;
    3788:	4b0b      	ldr	r3, [pc, #44]	; (37b8 <_delay_cycles+0x34>)
    378a:	480c      	ldr	r0, [pc, #48]	; (37bc <_delay_cycles+0x38>)
    378c:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    378e:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3790:	4b09      	ldr	r3, [pc, #36]	; (37b8 <_delay_cycles+0x34>)
    3792:	681b      	ldr	r3, [r3, #0]
    3794:	03db      	lsls	r3, r3, #15
    3796:	d5fb      	bpl.n	3790 <_delay_cycles+0xc>
			;
		buf -= 0xFFFFFF;
    3798:	4b09      	ldr	r3, [pc, #36]	; (37c0 <_delay_cycles+0x3c>)
    379a:	469c      	mov	ip, r3
    379c:	4461      	add	r1, ip
	while (n--) {
    379e:	0010      	movs	r0, r2
    37a0:	1e42      	subs	r2, r0, #1
    37a2:	b2d2      	uxtb	r2, r2
    37a4:	2800      	cmp	r0, #0
    37a6:	d1ef      	bne.n	3788 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    37a8:	4b03      	ldr	r3, [pc, #12]	; (37b8 <_delay_cycles+0x34>)
    37aa:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    37ac:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    37ae:	4b02      	ldr	r3, [pc, #8]	; (37b8 <_delay_cycles+0x34>)
    37b0:	681b      	ldr	r3, [r3, #0]
    37b2:	03db      	lsls	r3, r3, #15
    37b4:	d5fb      	bpl.n	37ae <_delay_cycles+0x2a>
		;
}
    37b6:	4770      	bx	lr
    37b8:	e000e010 	.word	0xe000e010
    37bc:	00ffffff 	.word	0x00ffffff
    37c0:	ff000001 	.word	0xff000001

000037c4 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    37c4:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    37c6:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    37c8:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    37ca:	07d2      	lsls	r2, r2, #31
    37cc:	d400      	bmi.n	37d0 <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    37ce:	bd10      	pop	{r4, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    37d0:	2201      	movs	r2, #1
    37d2:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    37d4:	6803      	ldr	r3, [r0, #0]
    37d6:	4798      	blx	r3
}
    37d8:	e7f9      	b.n	37ce <tc_interrupt_handler+0xa>
	...

000037dc <tc_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    37dc:	4b02      	ldr	r3, [pc, #8]	; (37e8 <tc_get_hardware_index+0xc>)
    37de:	469c      	mov	ip, r3
    37e0:	4460      	add	r0, ip
    37e2:	0a80      	lsrs	r0, r0, #10
    37e4:	b2c0      	uxtb	r0, r0
#else
	return ((uint32_t)hw - TC_HW_BASE_ADDR) / sizeof(Tc);
#endif
}
    37e6:	4770      	bx	lr
    37e8:	bdffe000 	.word	0xbdffe000

000037ec <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    37ec:	4b09      	ldr	r3, [pc, #36]	; (3814 <_tc_init_irq_param+0x28>)
    37ee:	4298      	cmp	r0, r3
    37f0:	d006      	beq.n	3800 <_tc_init_irq_param+0x14>
		_tc0_dev = (struct _timer_device *)dev;
	}
	if (hw == TC2) {
    37f2:	4b09      	ldr	r3, [pc, #36]	; (3818 <_tc_init_irq_param+0x2c>)
    37f4:	4298      	cmp	r0, r3
    37f6:	d006      	beq.n	3806 <_tc_init_irq_param+0x1a>
		_tc2_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    37f8:	4b08      	ldr	r3, [pc, #32]	; (381c <_tc_init_irq_param+0x30>)
    37fa:	4298      	cmp	r0, r3
    37fc:	d006      	beq.n	380c <_tc_init_irq_param+0x20>
		_tc4_dev = (struct _timer_device *)dev;
	}
}
    37fe:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
    3800:	4b07      	ldr	r3, [pc, #28]	; (3820 <_tc_init_irq_param+0x34>)
    3802:	6019      	str	r1, [r3, #0]
    3804:	e7f5      	b.n	37f2 <_tc_init_irq_param+0x6>
		_tc2_dev = (struct _timer_device *)dev;
    3806:	4b06      	ldr	r3, [pc, #24]	; (3820 <_tc_init_irq_param+0x34>)
    3808:	6059      	str	r1, [r3, #4]
    380a:	e7f5      	b.n	37f8 <_tc_init_irq_param+0xc>
		_tc4_dev = (struct _timer_device *)dev;
    380c:	4b04      	ldr	r3, [pc, #16]	; (3820 <_tc_init_irq_param+0x34>)
    380e:	6099      	str	r1, [r3, #8]
}
    3810:	e7f5      	b.n	37fe <_tc_init_irq_param+0x12>
    3812:	46c0      	nop			; (mov r8, r8)
    3814:	42002000 	.word	0x42002000
    3818:	42002800 	.word	0x42002800
    381c:	42003000 	.word	0x42003000
    3820:	20000894 	.word	0x20000894

00003824 <get_tc_index>:
{
    3824:	b510      	push	{r4, lr}
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    3826:	4b0d      	ldr	r3, [pc, #52]	; (385c <get_tc_index+0x38>)
    3828:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    382a:	2300      	movs	r3, #0
    382c:	2b02      	cmp	r3, #2
    382e:	d80b      	bhi.n	3848 <get_tc_index+0x24>
		if (_tcs[i].number == tc_offset) {
    3830:	009a      	lsls	r2, r3, #2
    3832:	18d2      	adds	r2, r2, r3
    3834:	0091      	lsls	r1, r2, #2
    3836:	4a0a      	ldr	r2, [pc, #40]	; (3860 <get_tc_index+0x3c>)
    3838:	5c8a      	ldrb	r2, [r1, r2]
    383a:	4290      	cmp	r0, r2
    383c:	d002      	beq.n	3844 <get_tc_index+0x20>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    383e:	3301      	adds	r3, #1
    3840:	b2db      	uxtb	r3, r3
    3842:	e7f3      	b.n	382c <get_tc_index+0x8>
			return i;
    3844:	b258      	sxtb	r0, r3
    3846:	e007      	b.n	3858 <get_tc_index+0x34>
	ASSERT(false);
    3848:	22b2      	movs	r2, #178	; 0xb2
    384a:	0052      	lsls	r2, r2, #1
    384c:	4905      	ldr	r1, [pc, #20]	; (3864 <get_tc_index+0x40>)
    384e:	2000      	movs	r0, #0
    3850:	4b05      	ldr	r3, [pc, #20]	; (3868 <get_tc_index+0x44>)
    3852:	4798      	blx	r3
	return -1;
    3854:	2001      	movs	r0, #1
    3856:	4240      	negs	r0, r0
}
    3858:	bd10      	pop	{r4, pc}
    385a:	46c0      	nop			; (mov r8, r8)
    385c:	000037dd 	.word	0x000037dd
    3860:	00008c80 	.word	0x00008c80
    3864:	00008cbc 	.word	0x00008cbc
    3868:	00002d7d 	.word	0x00002d7d

0000386c <_timer_init>:
{
    386c:	b570      	push	{r4, r5, r6, lr}
    386e:	0006      	movs	r6, r0
    3870:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    3872:	0008      	movs	r0, r1
    3874:	4b3f      	ldr	r3, [pc, #252]	; (3974 <_timer_init+0x108>)
    3876:	4798      	blx	r3
    3878:	0005      	movs	r5, r0
	device->hw = hw;
    387a:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    387c:	22a1      	movs	r2, #161	; 0xa1
    387e:	493e      	ldr	r1, [pc, #248]	; (3978 <_timer_init+0x10c>)
    3880:	2001      	movs	r0, #1
    3882:	4b3e      	ldr	r3, [pc, #248]	; (397c <_timer_init+0x110>)
    3884:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    3886:	7be3      	ldrb	r3, [r4, #15]
    3888:	09db      	lsrs	r3, r3, #7
    388a:	d1fc      	bne.n	3886 <_timer_init+0x1a>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    388c:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    388e:	079b      	lsls	r3, r3, #30
    3890:	d504      	bpl.n	389c <_timer_init+0x30>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3892:	2300      	movs	r3, #0
    3894:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    3896:	7be3      	ldrb	r3, [r4, #15]
    3898:	09db      	lsrs	r3, r3, #7
    389a:	d1fc      	bne.n	3896 <_timer_init+0x2a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    389c:	2301      	movs	r3, #1
    389e:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    38a0:	7be3      	ldrb	r3, [r4, #15]
    38a2:	09db      	lsrs	r3, r3, #7
    38a4:	d1fc      	bne.n	38a0 <_timer_init+0x34>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    38a6:	00aa      	lsls	r2, r5, #2
    38a8:	1952      	adds	r2, r2, r5
    38aa:	0091      	lsls	r1, r2, #2
    38ac:	4b34      	ldr	r3, [pc, #208]	; (3980 <_timer_init+0x114>)
    38ae:	185b      	adds	r3, r3, r1
    38b0:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    38b2:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    38b4:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    38b6:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    38b8:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    38ba:	8163      	strh	r3, [r4, #10]
    38bc:	230c      	movs	r3, #12
    38be:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    38c0:	2b08      	cmp	r3, #8
    38c2:	d039      	beq.n	3938 <_timer_init+0xcc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    38c4:	2b00      	cmp	r3, #0
    38c6:	d143      	bne.n	3950 <_timer_init+0xe4>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    38c8:	4a2d      	ldr	r2, [pc, #180]	; (3980 <_timer_init+0x114>)
    38ca:	00ab      	lsls	r3, r5, #2
    38cc:	1958      	adds	r0, r3, r5
    38ce:	0081      	lsls	r1, r0, #2
    38d0:	0008      	movs	r0, r1
    38d2:	1851      	adds	r1, r2, r1
    38d4:	8989      	ldrh	r1, [r1, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    38d6:	8321      	strh	r1, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    38d8:	1812      	adds	r2, r2, r0
    38da:	8a13      	ldrh	r3, [r2, #16]
    38dc:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    38de:	2301      	movs	r3, #1
    38e0:	7363      	strb	r3, [r4, #13]
	_tc_init_irq_param(hw, (void *)device);
    38e2:	0031      	movs	r1, r6
    38e4:	0020      	movs	r0, r4
    38e6:	4b27      	ldr	r3, [pc, #156]	; (3984 <_timer_init+0x118>)
    38e8:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    38ea:	0020      	movs	r0, r4
    38ec:	4b26      	ldr	r3, [pc, #152]	; (3988 <_timer_init+0x11c>)
    38ee:	4798      	blx	r3
    38f0:	300d      	adds	r0, #13
    38f2:	b2c0      	uxtb	r0, r0
    38f4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    38f6:	2b00      	cmp	r3, #0
    38f8:	db0a      	blt.n	3910 <_timer_init+0xa4>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    38fa:	211f      	movs	r1, #31
    38fc:	4001      	ands	r1, r0
    38fe:	2201      	movs	r2, #1
    3900:	408a      	lsls	r2, r1
    3902:	2180      	movs	r1, #128	; 0x80
    3904:	4c21      	ldr	r4, [pc, #132]	; (398c <_timer_init+0x120>)
    3906:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    3908:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    390c:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    3910:	2b00      	cmp	r3, #0
    3912:	db07      	blt.n	3924 <_timer_init+0xb8>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3914:	211f      	movs	r1, #31
    3916:	4001      	ands	r1, r0
    3918:	2201      	movs	r2, #1
    391a:	408a      	lsls	r2, r1
    391c:	21c0      	movs	r1, #192	; 0xc0
    391e:	0049      	lsls	r1, r1, #1
    3920:	4c1a      	ldr	r4, [pc, #104]	; (398c <_timer_init+0x120>)
    3922:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    3924:	2b00      	cmp	r3, #0
    3926:	db05      	blt.n	3934 <_timer_init+0xc8>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3928:	231f      	movs	r3, #31
    392a:	4018      	ands	r0, r3
    392c:	3b1e      	subs	r3, #30
    392e:	4083      	lsls	r3, r0
    3930:	4a16      	ldr	r2, [pc, #88]	; (398c <_timer_init+0x120>)
    3932:	6013      	str	r3, [r2, #0]
}
    3934:	2000      	movs	r0, #0
    3936:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    3938:	4a11      	ldr	r2, [pc, #68]	; (3980 <_timer_init+0x114>)
    393a:	00ab      	lsls	r3, r5, #2
    393c:	1958      	adds	r0, r3, r5
    393e:	0081      	lsls	r1, r0, #2
    3940:	0008      	movs	r0, r1
    3942:	1851      	adds	r1, r2, r1
    3944:	68c9      	ldr	r1, [r1, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3946:	61a1      	str	r1, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    3948:	1812      	adds	r2, r2, r0
    394a:	6913      	ldr	r3, [r2, #16]
    394c:	61e3      	str	r3, [r4, #28]
    394e:	e7c6      	b.n	38de <_timer_init+0x72>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    3950:	2b04      	cmp	r3, #4
    3952:	d1c4      	bne.n	38de <_timer_init+0x72>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    3954:	490a      	ldr	r1, [pc, #40]	; (3980 <_timer_init+0x114>)
    3956:	00ab      	lsls	r3, r5, #2
    3958:	1958      	adds	r0, r3, r5
    395a:	0082      	lsls	r2, r0, #2
    395c:	188a      	adds	r2, r1, r2
    395e:	7b10      	ldrb	r0, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    3960:	7620      	strb	r0, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    3962:	7c12      	ldrb	r2, [r2, #16]
    3964:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    3966:	195d      	adds	r5, r3, r5
    3968:	00ab      	lsls	r3, r5, #2
    396a:	18c9      	adds	r1, r1, r3
    396c:	7a0b      	ldrb	r3, [r1, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    396e:	7523      	strb	r3, [r4, #20]
    3970:	e7b5      	b.n	38de <_timer_init+0x72>
    3972:	46c0      	nop			; (mov r8, r8)
    3974:	00003825 	.word	0x00003825
    3978:	00008cbc 	.word	0x00008cbc
    397c:	00002d7d 	.word	0x00002d7d
    3980:	00008c80 	.word	0x00008c80
    3984:	000037ed 	.word	0x000037ed
    3988:	000037dd 	.word	0x000037dd
    398c:	e000e100 	.word	0xe000e100

00003990 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    3990:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    3992:	8813      	ldrh	r3, [r2, #0]
    3994:	2102      	movs	r1, #2
    3996:	430b      	orrs	r3, r1
    3998:	b29b      	uxth	r3, r3
    399a:	8013      	strh	r3, [r2, #0]
}
    399c:	4770      	bx	lr

0000399e <_timer_set_period>:
	void *const hw = device->hw;
    399e:	68c0      	ldr	r0, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    39a0:	8802      	ldrh	r2, [r0, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    39a2:	0892      	lsrs	r2, r2, #2
    39a4:	2303      	movs	r3, #3
    39a6:	4013      	ands	r3, r2
	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    39a8:	2b02      	cmp	r3, #2
    39aa:	d00c      	beq.n	39c6 <_timer_set_period+0x28>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    39ac:	8803      	ldrh	r3, [r0, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    39ae:	089b      	lsrs	r3, r3, #2
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    39b0:	079b      	lsls	r3, r3, #30
    39b2:	d00a      	beq.n	39ca <_timer_set_period+0x2c>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    39b4:	8802      	ldrh	r2, [r0, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    39b6:	0892      	lsrs	r2, r2, #2
    39b8:	2303      	movs	r3, #3
    39ba:	4013      	ands	r3, r2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    39bc:	2b01      	cmp	r3, #1
    39be:	d106      	bne.n	39ce <_timer_set_period+0x30>
		hri_tccount8_write_PER_reg(hw, (hri_tccount8_per_reg_t)clock_cycles);
    39c0:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    39c2:	7501      	strb	r1, [r0, #20]
}
    39c4:	e003      	b.n	39ce <_timer_set_period+0x30>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    39c6:	6181      	str	r1, [r0, #24]
    39c8:	e001      	b.n	39ce <_timer_set_period+0x30>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)clock_cycles);
    39ca:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    39cc:	8301      	strh	r1, [r0, #24]
}
    39ce:	4770      	bx	lr

000039d0 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    39d0:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    39d2:	881b      	ldrh	r3, [r3, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    39d4:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
    39d6:	2001      	movs	r0, #1
    39d8:	4018      	ands	r0, r3
}
    39da:	4770      	bx	lr

000039dc <_tc_get_timer>:
}
    39dc:	2000      	movs	r0, #0
    39de:	4770      	bx	lr

000039e0 <_timer_set_irq>:
{
    39e0:	b510      	push	{r4, lr}
	_irq_set((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(device->hw)));
    39e2:	68c0      	ldr	r0, [r0, #12]
    39e4:	4b03      	ldr	r3, [pc, #12]	; (39f4 <_timer_set_irq+0x14>)
    39e6:	4798      	blx	r3
    39e8:	300d      	adds	r0, #13
    39ea:	b2c0      	uxtb	r0, r0
    39ec:	4b02      	ldr	r3, [pc, #8]	; (39f8 <_timer_set_irq+0x18>)
    39ee:	4798      	blx	r3
}
    39f0:	bd10      	pop	{r4, pc}
    39f2:	46c0      	nop			; (mov r8, r8)
    39f4:	000037dd 	.word	0x000037dd
    39f8:	00002e09 	.word	0x00002e09

000039fc <TC0_Handler>:
{
    39fc:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc0_dev);
    39fe:	4b02      	ldr	r3, [pc, #8]	; (3a08 <TC0_Handler+0xc>)
    3a00:	6818      	ldr	r0, [r3, #0]
    3a02:	4b02      	ldr	r3, [pc, #8]	; (3a0c <TC0_Handler+0x10>)
    3a04:	4798      	blx	r3
}
    3a06:	bd10      	pop	{r4, pc}
    3a08:	20000894 	.word	0x20000894
    3a0c:	000037c5 	.word	0x000037c5

00003a10 <TC2_Handler>:
{
    3a10:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc2_dev);
    3a12:	4b02      	ldr	r3, [pc, #8]	; (3a1c <TC2_Handler+0xc>)
    3a14:	6858      	ldr	r0, [r3, #4]
    3a16:	4b02      	ldr	r3, [pc, #8]	; (3a20 <TC2_Handler+0x10>)
    3a18:	4798      	blx	r3
}
    3a1a:	bd10      	pop	{r4, pc}
    3a1c:	20000894 	.word	0x20000894
    3a20:	000037c5 	.word	0x000037c5

00003a24 <TC4_Handler>:
{
    3a24:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc4_dev);
    3a26:	4b02      	ldr	r3, [pc, #8]	; (3a30 <TC4_Handler+0xc>)
    3a28:	6898      	ldr	r0, [r3, #8]
    3a2a:	4b02      	ldr	r3, [pc, #8]	; (3a34 <TC4_Handler+0x10>)
    3a2c:	4798      	blx	r3
}
    3a2e:	bd10      	pop	{r4, pc}
    3a30:	20000894 	.word	0x20000894
    3a34:	000037c5 	.word	0x000037c5

00003a38 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    3a38:	b510      	push	{r4, lr}
    3a3a:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    3a3c:	d02a      	beq.n	3a94 <_wdt_init+0x5c>
    3a3e:	6803      	ldr	r3, [r0, #0]
    3a40:	2b00      	cmp	r3, #0
    3a42:	d025      	beq.n	3a90 <_wdt_init+0x58>
    3a44:	2001      	movs	r0, #1
    3a46:	224f      	movs	r2, #79	; 0x4f
    3a48:	4916      	ldr	r1, [pc, #88]	; (3aa4 <_wdt_init+0x6c>)
    3a4a:	4b17      	ldr	r3, [pc, #92]	; (3aa8 <_wdt_init+0x70>)
    3a4c:	4798      	blx	r3

	if (hri_wdt_get_CTRL_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRL_ENABLE_bit(dev->hw)) {
    3a4e:	6822      	ldr	r2, [r4, #0]
typedef uint8_t hri_wdt_intflag_reg_t;
typedef uint8_t hri_wdt_status_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw)
{
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    3a50:	79d3      	ldrb	r3, [r2, #7]
    3a52:	09db      	lsrs	r3, r3, #7
    3a54:	d1fc      	bne.n	3a50 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRL_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw);
	tmp = ((Wdt *)hw)->CTRL.reg;
    3a56:	7813      	ldrb	r3, [r2, #0]
	tmp = (tmp & WDT_CTRL_ALWAYSON) >> WDT_CTRL_ALWAYSON_Pos;
    3a58:	09db      	lsrs	r3, r3, #7
    3a5a:	d11d      	bne.n	3a98 <_wdt_init+0x60>
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    3a5c:	79d3      	ldrb	r3, [r2, #7]
    3a5e:	09db      	lsrs	r3, r3, #7
    3a60:	d1fc      	bne.n	3a5c <_wdt_init+0x24>
	tmp = ((Wdt *)hw)->CTRL.reg;
    3a62:	7813      	ldrb	r3, [r2, #0]
    3a64:	079b      	lsls	r3, r3, #30
    3a66:	d41a      	bmi.n	3a9e <_wdt_init+0x66>
	((Wdt *)hw)->CTRL.reg &= ~WDT_CTRL_WEN;
    3a68:	7813      	ldrb	r3, [r2, #0]
    3a6a:	2104      	movs	r1, #4
    3a6c:	438b      	bics	r3, r1
    3a6e:	7013      	strb	r3, [r2, #0]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    3a70:	79d3      	ldrb	r3, [r2, #7]
    3a72:	09db      	lsrs	r3, r3, #7
    3a74:	d1fc      	bne.n	3a70 <_wdt_init+0x38>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRL_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    3a76:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    3a78:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    3a7a:	210f      	movs	r1, #15
    3a7c:	438b      	bics	r3, r1
	tmp |= WDT_CONFIG_PER(data);
    3a7e:	210b      	movs	r1, #11
    3a80:	430b      	orrs	r3, r1
    3a82:	b2db      	uxtb	r3, r3
	((Wdt *)hw)->CONFIG.reg = tmp;
    3a84:	7053      	strb	r3, [r2, #1]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    3a86:	79d3      	ldrb	r3, [r2, #7]
    3a88:	09db      	lsrs	r3, r3, #7
    3a8a:	d1fc      	bne.n	3a86 <_wdt_init+0x4e>
	}

	return ERR_NONE;
    3a8c:	2000      	movs	r0, #0
}
    3a8e:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
    3a90:	2000      	movs	r0, #0
    3a92:	e7d8      	b.n	3a46 <_wdt_init+0xe>
    3a94:	2000      	movs	r0, #0
    3a96:	e7d6      	b.n	3a46 <_wdt_init+0xe>
		return ERR_DENIED;
    3a98:	2011      	movs	r0, #17
    3a9a:	4240      	negs	r0, r0
    3a9c:	e7f7      	b.n	3a8e <_wdt_init+0x56>
    3a9e:	2011      	movs	r0, #17
    3aa0:	4240      	negs	r0, r0
    3aa2:	e7f4      	b.n	3a8e <_wdt_init+0x56>
    3aa4:	00008cd0 	.word	0x00008cd0
    3aa8:	00002d7d 	.word	0x00002d7d

00003aac <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    3aac:	b570      	push	{r4, r5, r6, lr}
    3aae:	0006      	movs	r6, r0
    3ab0:	000d      	movs	r5, r1
    3ab2:	0014      	movs	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    3ab4:	2800      	cmp	r0, #0
    3ab6:	d038      	beq.n	3b2a <_wdt_set_timeout_period+0x7e>
    3ab8:	6803      	ldr	r3, [r0, #0]
    3aba:	2b00      	cmp	r3, #0
    3abc:	d033      	beq.n	3b26 <_wdt_set_timeout_period+0x7a>
    3abe:	2001      	movs	r0, #1
    3ac0:	2279      	movs	r2, #121	; 0x79
    3ac2:	493e      	ldr	r1, [pc, #248]	; (3bbc <_wdt_set_timeout_period+0x110>)
    3ac4:	4b3e      	ldr	r3, [pc, #248]	; (3bc0 <_wdt_set_timeout_period+0x114>)
    3ac6:	4798      	blx	r3

	if (hri_wdt_get_CTRL_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRL_ENABLE_bit(dev->hw)) {
    3ac8:	6836      	ldr	r6, [r6, #0]
    3aca:	79f3      	ldrb	r3, [r6, #7]
    3acc:	09db      	lsrs	r3, r3, #7
    3ace:	d1fc      	bne.n	3aca <_wdt_set_timeout_period+0x1e>
	tmp = ((Wdt *)hw)->CTRL.reg;
    3ad0:	7833      	ldrb	r3, [r6, #0]
	tmp = (tmp & WDT_CTRL_ALWAYSON) >> WDT_CTRL_ALWAYSON_Pos;
    3ad2:	09db      	lsrs	r3, r3, #7
    3ad4:	d000      	beq.n	3ad8 <_wdt_set_timeout_period+0x2c>
    3ad6:	e068      	b.n	3baa <_wdt_set_timeout_period+0xfe>
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    3ad8:	79f3      	ldrb	r3, [r6, #7]
    3ada:	09db      	lsrs	r3, r3, #7
    3adc:	d1fc      	bne.n	3ad8 <_wdt_set_timeout_period+0x2c>
	tmp = ((Wdt *)hw)->CTRL.reg;
    3ade:	7833      	ldrb	r3, [r6, #0]
    3ae0:	079b      	lsls	r3, r3, #30
    3ae2:	d465      	bmi.n	3bb0 <_wdt_set_timeout_period+0x104>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    3ae4:	002a      	movs	r2, r5
    3ae6:	2300      	movs	r3, #0
    3ae8:	0020      	movs	r0, r4
    3aea:	2100      	movs	r1, #0
    3aec:	4c35      	ldr	r4, [pc, #212]	; (3bc4 <_wdt_set_timeout_period+0x118>)
    3aee:	47a0      	blx	r4

		/* check whether overflow*/
		if (tmp >> 32) {
    3af0:	2900      	cmp	r1, #0
    3af2:	d160      	bne.n	3bb6 <_wdt_set_timeout_period+0x10a>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    3af4:	23fa      	movs	r3, #250	; 0xfa
    3af6:	029b      	lsls	r3, r3, #10
    3af8:	4298      	cmp	r0, r3
    3afa:	d04a      	beq.n	3b92 <_wdt_set_timeout_period+0xe6>
    3afc:	d917      	bls.n	3b2e <_wdt_set_timeout_period+0x82>
    3afe:	23fa      	movs	r3, #250	; 0xfa
    3b00:	035b      	lsls	r3, r3, #13
    3b02:	4298      	cmp	r0, r3
    3b04:	d049      	beq.n	3b9a <_wdt_set_timeout_period+0xee>
    3b06:	d92b      	bls.n	3b60 <_wdt_set_timeout_period+0xb4>
    3b08:	23fa      	movs	r3, #250	; 0xfa
    3b0a:	03db      	lsls	r3, r3, #15
    3b0c:	4298      	cmp	r0, r3
    3b0e:	d048      	beq.n	3ba2 <_wdt_set_timeout_period+0xf6>
    3b10:	23fa      	movs	r3, #250	; 0xfa
    3b12:	041b      	lsls	r3, r3, #16
    3b14:	4298      	cmp	r0, r3
    3b16:	d046      	beq.n	3ba6 <_wdt_set_timeout_period+0xfa>
    3b18:	23fa      	movs	r3, #250	; 0xfa
    3b1a:	039b      	lsls	r3, r3, #14
    3b1c:	4298      	cmp	r0, r3
    3b1e:	d03e      	beq.n	3b9e <_wdt_set_timeout_period+0xf2>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    3b20:	200d      	movs	r0, #13
    3b22:	4240      	negs	r0, r0
    3b24:	e030      	b.n	3b88 <_wdt_set_timeout_period+0xdc>
	ASSERT(dev && dev->hw);
    3b26:	2000      	movs	r0, #0
    3b28:	e7ca      	b.n	3ac0 <_wdt_set_timeout_period+0x14>
    3b2a:	2000      	movs	r0, #0
    3b2c:	e7c8      	b.n	3ac0 <_wdt_set_timeout_period+0x14>
		switch (period_cycles) {
    3b2e:	23fa      	movs	r3, #250	; 0xfa
    3b30:	01db      	lsls	r3, r3, #7
    3b32:	4298      	cmp	r0, r3
    3b34:	d029      	beq.n	3b8a <_wdt_set_timeout_period+0xde>
    3b36:	d809      	bhi.n	3b4c <_wdt_set_timeout_period+0xa0>
    3b38:	23fa      	movs	r3, #250	; 0xfa
    3b3a:	015b      	lsls	r3, r3, #5
    3b3c:	4298      	cmp	r0, r3
    3b3e:	d019      	beq.n	3b74 <_wdt_set_timeout_period+0xc8>
    3b40:	23fa      	movs	r3, #250	; 0xfa
    3b42:	019b      	lsls	r3, r3, #6
    3b44:	4298      	cmp	r0, r3
    3b46:	d1eb      	bne.n	3b20 <_wdt_set_timeout_period+0x74>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    3b48:	2101      	movs	r1, #1
    3b4a:	e014      	b.n	3b76 <_wdt_set_timeout_period+0xca>
		switch (period_cycles) {
    3b4c:	23fa      	movs	r3, #250	; 0xfa
    3b4e:	021b      	lsls	r3, r3, #8
    3b50:	4298      	cmp	r0, r3
    3b52:	d01c      	beq.n	3b8e <_wdt_set_timeout_period+0xe2>
    3b54:	23fa      	movs	r3, #250	; 0xfa
    3b56:	025b      	lsls	r3, r3, #9
    3b58:	4298      	cmp	r0, r3
    3b5a:	d1e1      	bne.n	3b20 <_wdt_set_timeout_period+0x74>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    3b5c:	2104      	movs	r1, #4
			break;
    3b5e:	e00a      	b.n	3b76 <_wdt_set_timeout_period+0xca>
		switch (period_cycles) {
    3b60:	23fa      	movs	r3, #250	; 0xfa
    3b62:	02db      	lsls	r3, r3, #11
    3b64:	4298      	cmp	r0, r3
    3b66:	d016      	beq.n	3b96 <_wdt_set_timeout_period+0xea>
    3b68:	23fa      	movs	r3, #250	; 0xfa
    3b6a:	031b      	lsls	r3, r3, #12
    3b6c:	4298      	cmp	r0, r3
    3b6e:	d1d7      	bne.n	3b20 <_wdt_set_timeout_period+0x74>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    3b70:	2107      	movs	r1, #7
			break;
    3b72:	e000      	b.n	3b76 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    3b74:	2100      	movs	r1, #0
	tmp = ((Wdt *)hw)->CONFIG.reg;
    3b76:	7873      	ldrb	r3, [r6, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    3b78:	220f      	movs	r2, #15
    3b7a:	4393      	bics	r3, r2
	tmp |= WDT_CONFIG_PER(data);
    3b7c:	430b      	orrs	r3, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    3b7e:	7073      	strb	r3, [r6, #1]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    3b80:	79f3      	ldrb	r3, [r6, #7]
    3b82:	09db      	lsrs	r3, r3, #7
    3b84:	d1fc      	bne.n	3b80 <_wdt_set_timeout_period+0xd4>
		}
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
    3b86:	2000      	movs	r0, #0
}
    3b88:	bd70      	pop	{r4, r5, r6, pc}
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    3b8a:	2102      	movs	r1, #2
			break;
    3b8c:	e7f3      	b.n	3b76 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    3b8e:	2103      	movs	r1, #3
			break;
    3b90:	e7f1      	b.n	3b76 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    3b92:	2105      	movs	r1, #5
			break;
    3b94:	e7ef      	b.n	3b76 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    3b96:	2106      	movs	r1, #6
			break;
    3b98:	e7ed      	b.n	3b76 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    3b9a:	2108      	movs	r1, #8
			break;
    3b9c:	e7eb      	b.n	3b76 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    3b9e:	2109      	movs	r1, #9
			break;
    3ba0:	e7e9      	b.n	3b76 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    3ba2:	210a      	movs	r1, #10
			break;
    3ba4:	e7e7      	b.n	3b76 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    3ba6:	210b      	movs	r1, #11
			break;
    3ba8:	e7e5      	b.n	3b76 <_wdt_set_timeout_period+0xca>
		return ERR_DENIED;
    3baa:	2011      	movs	r0, #17
    3bac:	4240      	negs	r0, r0
    3bae:	e7eb      	b.n	3b88 <_wdt_set_timeout_period+0xdc>
    3bb0:	2011      	movs	r0, #17
    3bb2:	4240      	negs	r0, r0
    3bb4:	e7e8      	b.n	3b88 <_wdt_set_timeout_period+0xdc>
			return ERR_INVALID_ARG;
    3bb6:	200d      	movs	r0, #13
    3bb8:	4240      	negs	r0, r0
    3bba:	e7e5      	b.n	3b88 <_wdt_set_timeout_period+0xdc>
    3bbc:	00008cd0 	.word	0x00008cd0
    3bc0:	00002d7d 	.word	0x00002d7d
    3bc4:	00006745 	.word	0x00006745

00003bc8 <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    3bc8:	b510      	push	{r4, lr}
    3bca:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    3bcc:	d014      	beq.n	3bf8 <_wdt_enable+0x30>
    3bce:	6803      	ldr	r3, [r0, #0]
    3bd0:	2b00      	cmp	r3, #0
    3bd2:	d00f      	beq.n	3bf4 <_wdt_enable+0x2c>
    3bd4:	2001      	movs	r0, #1
    3bd6:	22fa      	movs	r2, #250	; 0xfa
    3bd8:	4908      	ldr	r1, [pc, #32]	; (3bfc <_wdt_enable+0x34>)
    3bda:	4b09      	ldr	r3, [pc, #36]	; (3c00 <_wdt_enable+0x38>)
    3bdc:	4798      	blx	r3

	hri_wdt_set_CTRL_ENABLE_bit(dev->hw);
    3bde:	6822      	ldr	r2, [r4, #0]
	((Wdt *)hw)->CTRL.reg |= WDT_CTRL_ENABLE;
    3be0:	7813      	ldrb	r3, [r2, #0]
    3be2:	2102      	movs	r1, #2
    3be4:	430b      	orrs	r3, r1
    3be6:	b2db      	uxtb	r3, r3
    3be8:	7013      	strb	r3, [r2, #0]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    3bea:	79d3      	ldrb	r3, [r2, #7]
    3bec:	09db      	lsrs	r3, r3, #7
    3bee:	d1fc      	bne.n	3bea <_wdt_enable+0x22>

	return ERR_NONE;
}
    3bf0:	2000      	movs	r0, #0
    3bf2:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
    3bf4:	2000      	movs	r0, #0
    3bf6:	e7ee      	b.n	3bd6 <_wdt_enable+0xe>
    3bf8:	2000      	movs	r0, #0
    3bfa:	e7ec      	b.n	3bd6 <_wdt_enable+0xe>
    3bfc:	00008cd0 	.word	0x00008cd0
    3c00:	00002d7d 	.word	0x00002d7d

00003c04 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    3c04:	b510      	push	{r4, lr}
    3c06:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    3c08:	d012      	beq.n	3c30 <_wdt_feed+0x2c>
    3c0a:	6803      	ldr	r3, [r0, #0]
    3c0c:	2b00      	cmp	r3, #0
    3c0e:	d00d      	beq.n	3c2c <_wdt_feed+0x28>
    3c10:	2001      	movs	r0, #1
    3c12:	228c      	movs	r2, #140	; 0x8c
    3c14:	0052      	lsls	r2, r2, #1
    3c16:	4907      	ldr	r1, [pc, #28]	; (3c34 <_wdt_feed+0x30>)
    3c18:	4b07      	ldr	r3, [pc, #28]	; (3c38 <_wdt_feed+0x34>)
    3c1a:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    3c1c:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_wdt_write_CLEAR_reg(const void *const hw, hri_wdt_clear_reg_t data)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CLEAR.reg = data;
    3c1e:	23a5      	movs	r3, #165	; 0xa5
    3c20:	7213      	strb	r3, [r2, #8]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    3c22:	79d3      	ldrb	r3, [r2, #7]
    3c24:	09db      	lsrs	r3, r3, #7
    3c26:	d1fc      	bne.n	3c22 <_wdt_feed+0x1e>

	return ERR_NONE;
}
    3c28:	2000      	movs	r0, #0
    3c2a:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
    3c2c:	2000      	movs	r0, #0
    3c2e:	e7f0      	b.n	3c12 <_wdt_feed+0xe>
    3c30:	2000      	movs	r0, #0
    3c32:	e7ee      	b.n	3c12 <_wdt_feed+0xe>
    3c34:	00008cd0 	.word	0x00008cd0
    3c38:	00002d7d 	.word	0x00002d7d

00003c3c <main>:
#include <atmel_start.h>
#include <sys/time.h>
#include <App/DcaApp.h>


int main(void) {
    3c3c:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    3c3e:	4b04      	ldr	r3, [pc, #16]	; (3c50 <main+0x14>)
    3c40:	4798      	blx	r3

	// Initialize specific functionality
	DcaApp_Init();
    3c42:	4b04      	ldr	r3, [pc, #16]	; (3c54 <main+0x18>)
    3c44:	4798      	blx	r3

	// Main processing loop
	DcaApp_Entry();
    3c46:	4b04      	ldr	r3, [pc, #16]	; (3c58 <main+0x1c>)
    3c48:	4798      	blx	r3
	
	// Return Success.
	return true;
}
    3c4a:	2001      	movs	r0, #1
    3c4c:	bd10      	pop	{r4, pc}
    3c4e:	46c0      	nop			; (mov r8, r8)
    3c50:	000007bd 	.word	0x000007bd
    3c54:	000005e1 	.word	0x000005e1
    3c58:	00000255 	.word	0x00000255

00003c5c <ENC28_BankSel>:
/**
 * Bank Select
 * @param r
 */
static void ENC28_BankSel(enc28j60_registers_t r)
{
    3c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t a = r & BANK_MASK;
    3c5e:	231f      	movs	r3, #31
    3c60:	4398      	bics	r0, r3
    3c62:	0004      	movs	r4, r0

	if (a != sfr_common && a != lastBank) {
    3c64:	28e0      	cmp	r0, #224	; 0xe0
    3c66:	d01c      	beq.n	3ca2 <ENC28_BankSel+0x46>
    3c68:	4b0e      	ldr	r3, [pc, #56]	; (3ca4 <ENC28_BankSel+0x48>)
    3c6a:	781b      	ldrb	r3, [r3, #0]
    3c6c:	4298      	cmp	r0, r3
    3c6e:	d018      	beq.n	3ca2 <ENC28_BankSel+0x46>
		lastBank = a;
    3c70:	4b0c      	ldr	r3, [pc, #48]	; (3ca4 <ENC28_BankSel+0x48>)
    3c72:	7018      	strb	r0, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3c74:	25c0      	movs	r5, #192	; 0xc0
    3c76:	05ed      	lsls	r5, r5, #23
    3c78:	2680      	movs	r6, #128	; 0x80
    3c7a:	0436      	lsls	r6, r6, #16
    3c7c:	616e      	str	r6, [r5, #20]
		// clear the bank bits
		ETH_NCS_LOW();
		ETH_SPI_WRITE8(bfc_inst | 0x1F);
    3c7e:	21bf      	movs	r1, #191	; 0xbf
    3c80:	2001      	movs	r0, #1
    3c82:	4f09      	ldr	r7, [pc, #36]	; (3ca8 <ENC28_BankSel+0x4c>)
    3c84:	47b8      	blx	r7
		ETH_SPI_WRITE8(0x03);
    3c86:	2103      	movs	r1, #3
    3c88:	2001      	movs	r0, #1
    3c8a:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3c8c:	61ae      	str	r6, [r5, #24]
		ETH_NCS_HIGH();
		NOP();
    3c8e:	46c0      	nop			; (mov r8, r8)
		NOP();
    3c90:	46c0      	nop			; (mov r8, r8)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3c92:	616e      	str	r6, [r5, #20]
		// set the needed bits
		ETH_NCS_LOW();
		ETH_SPI_WRITE8(bfs_inst | 0x1F);
    3c94:	219f      	movs	r1, #159	; 0x9f
    3c96:	2001      	movs	r0, #1
    3c98:	47b8      	blx	r7
		ETH_SPI_WRITE8(a >> 6);
    3c9a:	09a1      	lsrs	r1, r4, #6
    3c9c:	2001      	movs	r0, #1
    3c9e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3ca0:	61ae      	str	r6, [r5, #24]
		ETH_NCS_HIGH();
	}
}
    3ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ca4:	20004008 	.word	0x20004008
    3ca8:	00006599 	.word	0x00006599

00003cac <ENC28_Rcr8>:
 * Read 1 byte from SFRs
 * @param a
 * @return
 */
static uint8_t ENC28_Rcr8(enc28j60_registers_t a)
{
    3cac:	b570      	push	{r4, r5, r6, lr}
    3cae:	0006      	movs	r6, r0
	uint8_t v;

	ENC28_BankSel(a);
    3cb0:	4b08      	ldr	r3, [pc, #32]	; (3cd4 <ENC28_Rcr8+0x28>)
    3cb2:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3cb4:	24c0      	movs	r4, #192	; 0xc0
    3cb6:	05e4      	lsls	r4, r4, #23
    3cb8:	2580      	movs	r5, #128	; 0x80
    3cba:	042d      	lsls	r5, r5, #16
    3cbc:	6165      	str	r5, [r4, #20]
	ETH_NCS_LOW();
	ETH_SPI_WRITE8(rcr_inst | (a & SFR_MASK));
    3cbe:	211f      	movs	r1, #31
    3cc0:	4031      	ands	r1, r6
    3cc2:	2001      	movs	r0, #1
    3cc4:	4e04      	ldr	r6, [pc, #16]	; (3cd8 <ENC28_Rcr8+0x2c>)
    3cc6:	47b0      	blx	r6
	v = ETH_SPI_READ8();
    3cc8:	2100      	movs	r1, #0
    3cca:	2000      	movs	r0, #0
    3ccc:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3cce:	61a5      	str	r5, [r4, #24]
	ETH_NCS_HIGH();

	return v;
}
    3cd0:	bd70      	pop	{r4, r5, r6, pc}
    3cd2:	46c0      	nop			; (mov r8, r8)
    3cd4:	00003c5d 	.word	0x00003c5d
    3cd8:	00006599 	.word	0x00006599

00003cdc <ENC28_Bfs>:
 * SFR Bit Field Set
 * @param a
 * @param bits
 */
static void ENC28_Bfs(enc28j60_registers_t a, char bits) // can only be used for ETH Control Registers
{
    3cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cde:	0007      	movs	r7, r0
    3ce0:	000c      	movs	r4, r1
	ENC28_BankSel(a);
    3ce2:	4b0a      	ldr	r3, [pc, #40]	; (3d0c <ENC28_Bfs+0x30>)
    3ce4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3ce6:	25c0      	movs	r5, #192	; 0xc0
    3ce8:	05ed      	lsls	r5, r5, #23
    3cea:	2680      	movs	r6, #128	; 0x80
    3cec:	0436      	lsls	r6, r6, #16
    3cee:	616e      	str	r6, [r5, #20]
	ETH_NCS_LOW();
	ETH_SPI_WRITE8(bfs_inst | (a & SFR_MASK));
    3cf0:	211f      	movs	r1, #31
    3cf2:	400f      	ands	r7, r1
    3cf4:	399f      	subs	r1, #159	; 0x9f
    3cf6:	4339      	orrs	r1, r7
    3cf8:	b249      	sxtb	r1, r1
    3cfa:	b2c9      	uxtb	r1, r1
    3cfc:	2001      	movs	r0, #1
    3cfe:	4f04      	ldr	r7, [pc, #16]	; (3d10 <ENC28_Bfs+0x34>)
    3d00:	47b8      	blx	r7
	ETH_SPI_WRITE8(bits);
    3d02:	0021      	movs	r1, r4
    3d04:	2001      	movs	r0, #1
    3d06:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3d08:	61ae      	str	r6, [r5, #24]
	ETH_NCS_HIGH();
}
    3d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d0c:	00003c5d 	.word	0x00003c5d
    3d10:	00006599 	.word	0x00006599

00003d14 <ENC28_Wcr8>:
{
    3d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d16:	0007      	movs	r7, r0
    3d18:	000c      	movs	r4, r1
	ENC28_BankSel(a);
    3d1a:	4b0a      	ldr	r3, [pc, #40]	; (3d44 <ENC28_Wcr8+0x30>)
    3d1c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3d1e:	25c0      	movs	r5, #192	; 0xc0
    3d20:	05ed      	lsls	r5, r5, #23
    3d22:	2680      	movs	r6, #128	; 0x80
    3d24:	0436      	lsls	r6, r6, #16
    3d26:	616e      	str	r6, [r5, #20]
	ETH_SPI_WRITE8(wcr_inst | (a & SFR_MASK));
    3d28:	211f      	movs	r1, #31
    3d2a:	4039      	ands	r1, r7
    3d2c:	2340      	movs	r3, #64	; 0x40
    3d2e:	4319      	orrs	r1, r3
    3d30:	b249      	sxtb	r1, r1
    3d32:	b2c9      	uxtb	r1, r1
    3d34:	2001      	movs	r0, #1
    3d36:	4f04      	ldr	r7, [pc, #16]	; (3d48 <ENC28_Wcr8+0x34>)
    3d38:	47b8      	blx	r7
	ETH_SPI_WRITE8(v);
    3d3a:	0021      	movs	r1, r4
    3d3c:	2001      	movs	r0, #1
    3d3e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3d40:	61ae      	str	r6, [r5, #24]
}
    3d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d44:	00003c5d 	.word	0x00003c5d
    3d48:	00006599 	.word	0x00006599

00003d4c <ENC28_Wcr16>:
{
    3d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d4e:	46ce      	mov	lr, r9
    3d50:	4647      	mov	r7, r8
    3d52:	b580      	push	{r7, lr}
    3d54:	b083      	sub	sp, #12
    3d56:	0006      	movs	r6, r0
    3d58:	466b      	mov	r3, sp
    3d5a:	1d9d      	adds	r5, r3, #6
    3d5c:	8029      	strh	r1, [r5, #0]
	ENC28_BankSel(a);
    3d5e:	4b14      	ldr	r3, [pc, #80]	; (3db0 <ENC28_Wcr16+0x64>)
    3d60:	4798      	blx	r3
	a &= SFR_MASK;
    3d62:	241f      	movs	r4, #31
    3d64:	4034      	ands	r4, r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3d66:	26c0      	movs	r6, #192	; 0xc0
    3d68:	05f6      	lsls	r6, r6, #23
    3d6a:	2780      	movs	r7, #128	; 0x80
    3d6c:	043f      	lsls	r7, r7, #16
    3d6e:	6177      	str	r7, [r6, #20]
	ETH_SPI_WRITE8(wcr_inst | (a));
    3d70:	2340      	movs	r3, #64	; 0x40
    3d72:	4699      	mov	r9, r3
    3d74:	4649      	mov	r1, r9
    3d76:	4321      	orrs	r1, r4
    3d78:	b2c9      	uxtb	r1, r1
    3d7a:	2001      	movs	r0, #1
    3d7c:	4b0d      	ldr	r3, [pc, #52]	; (3db4 <ENC28_Wcr16+0x68>)
    3d7e:	4698      	mov	r8, r3
    3d80:	4798      	blx	r3
	ETH_SPI_WRITE8(((char *)&v)[0]);
    3d82:	7829      	ldrb	r1, [r5, #0]
    3d84:	2001      	movs	r0, #1
    3d86:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3d88:	61b7      	str	r7, [r6, #24]
	NOP();
    3d8a:	46c0      	nop			; (mov r8, r8)
	NOP();
    3d8c:	46c0      	nop			; (mov r8, r8)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3d8e:	6177      	str	r7, [r6, #20]
	ETH_SPI_WRITE8(wcr_inst | (a + 1));
    3d90:	3401      	adds	r4, #1
    3d92:	464b      	mov	r3, r9
    3d94:	431c      	orrs	r4, r3
    3d96:	b2e1      	uxtb	r1, r4
    3d98:	2001      	movs	r0, #1
    3d9a:	47c0      	blx	r8
	ETH_SPI_WRITE8(((char *)&v)[1]);
    3d9c:	7869      	ldrb	r1, [r5, #1]
    3d9e:	2001      	movs	r0, #1
    3da0:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3da2:	61b7      	str	r7, [r6, #24]
}
    3da4:	b003      	add	sp, #12
    3da6:	bc0c      	pop	{r2, r3}
    3da8:	4690      	mov	r8, r2
    3daa:	4699      	mov	r9, r3
    3dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3dae:	46c0      	nop			; (mov r8, r8)
    3db0:	00003c5d 	.word	0x00003c5d
    3db4:	00006599 	.word	0x00006599

00003db8 <ENC28_PhyWrite>:
 * Write PHY  register
 * @param a
 * @param d
 */
static void ENC28_PhyWrite(enc28j60_phy_registers_t a, uint16_t d)
{
    3db8:	b510      	push	{r4, lr}
    3dba:	000c      	movs	r4, r1
	uint8_t v = 1;

	ENC28_Wcr8(J60_MIREGADR, a);
    3dbc:	0001      	movs	r1, r0
    3dbe:	2094      	movs	r0, #148	; 0x94
    3dc0:	4b06      	ldr	r3, [pc, #24]	; (3ddc <ENC28_PhyWrite+0x24>)
    3dc2:	4798      	blx	r3
	ENC28_Wcr16(J60_MIWRL, d);
    3dc4:	0021      	movs	r1, r4
    3dc6:	2096      	movs	r0, #150	; 0x96
    3dc8:	4b05      	ldr	r3, [pc, #20]	; (3de0 <ENC28_PhyWrite+0x28>)
    3dca:	4798      	blx	r3
	uint8_t v = 1;
    3dcc:	2001      	movs	r0, #1
	while (v & 0x01) {
    3dce:	e002      	b.n	3dd6 <ENC28_PhyWrite+0x1e>
		v = ENC28_Rcr8(J60_MISTAT);
    3dd0:	20ca      	movs	r0, #202	; 0xca
    3dd2:	4b04      	ldr	r3, [pc, #16]	; (3de4 <ENC28_PhyWrite+0x2c>)
    3dd4:	4798      	blx	r3
	while (v & 0x01) {
    3dd6:	07c3      	lsls	r3, r0, #31
    3dd8:	d4fa      	bmi.n	3dd0 <ENC28_PhyWrite+0x18>
	}
}
    3dda:	bd10      	pop	{r4, pc}
    3ddc:	00003d15 	.word	0x00003d15
    3de0:	00003d4d 	.word	0x00003d4d
    3de4:	00003cad 	.word	0x00003cad

00003de8 <ENC28_Rcr16>:
{
    3de8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dea:	46c6      	mov	lr, r8
    3dec:	b500      	push	{lr}
    3dee:	b082      	sub	sp, #8
    3df0:	0005      	movs	r5, r0
	ENC28_BankSel(a);
    3df2:	4b13      	ldr	r3, [pc, #76]	; (3e40 <ENC28_Rcr16+0x58>)
    3df4:	4798      	blx	r3
	a &= SFR_MASK;
    3df6:	241f      	movs	r4, #31
    3df8:	402c      	ands	r4, r5
    3dfa:	46a0      	mov	r8, r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3dfc:	25c0      	movs	r5, #192	; 0xc0
    3dfe:	05ed      	lsls	r5, r5, #23
    3e00:	2780      	movs	r7, #128	; 0x80
    3e02:	043f      	lsls	r7, r7, #16
    3e04:	616f      	str	r7, [r5, #20]
	ETH_SPI_WRITE8(rcr_inst | (a));
    3e06:	0021      	movs	r1, r4
    3e08:	2001      	movs	r0, #1
    3e0a:	4c0e      	ldr	r4, [pc, #56]	; (3e44 <ENC28_Rcr16+0x5c>)
    3e0c:	47a0      	blx	r4
	((char *)&v)[0] = ETH_SPI_READ8();
    3e0e:	2100      	movs	r1, #0
    3e10:	2000      	movs	r0, #0
    3e12:	47a0      	blx	r4
    3e14:	466b      	mov	r3, sp
    3e16:	1d9e      	adds	r6, r3, #6
    3e18:	7030      	strb	r0, [r6, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3e1a:	61af      	str	r7, [r5, #24]
	NOP();
    3e1c:	46c0      	nop			; (mov r8, r8)
	NOP();
    3e1e:	46c0      	nop			; (mov r8, r8)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3e20:	616f      	str	r7, [r5, #20]
	ETH_SPI_WRITE8(rcr_inst | (a + 1));
    3e22:	4643      	mov	r3, r8
    3e24:	1c59      	adds	r1, r3, #1
    3e26:	2001      	movs	r0, #1
    3e28:	47a0      	blx	r4
	((char *)&v)[1] = ETH_SPI_READ8();
    3e2a:	2100      	movs	r1, #0
    3e2c:	2000      	movs	r0, #0
    3e2e:	47a0      	blx	r4
    3e30:	7070      	strb	r0, [r6, #1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3e32:	61af      	str	r7, [r5, #24]
	return v;
    3e34:	8830      	ldrh	r0, [r6, #0]
}
    3e36:	b002      	add	sp, #8
    3e38:	bc04      	pop	{r2}
    3e3a:	4690      	mov	r8, r2
    3e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e3e:	46c0      	nop			; (mov r8, r8)
    3e40:	00003c5d 	.word	0x00003c5d
    3e44:	00006599 	.word	0x00006599

00003e48 <ENC28_Bfc>:
{
    3e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e4a:	0007      	movs	r7, r0
    3e4c:	000c      	movs	r4, r1
	ENC28_BankSel(a);
    3e4e:	4b0a      	ldr	r3, [pc, #40]	; (3e78 <ENC28_Bfc+0x30>)
    3e50:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3e52:	25c0      	movs	r5, #192	; 0xc0
    3e54:	05ed      	lsls	r5, r5, #23
    3e56:	2680      	movs	r6, #128	; 0x80
    3e58:	0436      	lsls	r6, r6, #16
    3e5a:	616e      	str	r6, [r5, #20]
	ETH_SPI_WRITE8(bfc_inst | (a & SFR_MASK));
    3e5c:	211f      	movs	r1, #31
    3e5e:	400f      	ands	r7, r1
    3e60:	397f      	subs	r1, #127	; 0x7f
    3e62:	4339      	orrs	r1, r7
    3e64:	b249      	sxtb	r1, r1
    3e66:	b2c9      	uxtb	r1, r1
    3e68:	2001      	movs	r0, #1
    3e6a:	4f04      	ldr	r7, [pc, #16]	; (3e7c <ENC28_Bfc+0x34>)
    3e6c:	47b8      	blx	r7
	ETH_SPI_WRITE8(bits);
    3e6e:	0021      	movs	r1, r4
    3e70:	2001      	movs	r0, #1
    3e72:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3e74:	61ae      	str	r6, [r5, #24]
}
    3e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e78:	00003c5d 	.word	0x00003c5d
    3e7c:	00006599 	.word	0x00006599

00003e80 <ENC28_PhyRead>:
 * Read PHY register
 * @param a
 * @return
 */
static uint16_t ENC28_PhyRead(enc28j60_phy_registers_t a)
{
    3e80:	b510      	push	{r4, lr}
    3e82:	0001      	movs	r1, r0
	ENC28_Wcr8(J60_MIREGADR, a);
    3e84:	2094      	movs	r0, #148	; 0x94
    3e86:	4b09      	ldr	r3, [pc, #36]	; (3eac <ENC28_PhyRead+0x2c>)
    3e88:	4798      	blx	r3
	ENC28_Bfs(J60_MICMD, 0x01); // set the read flag
    3e8a:	2101      	movs	r1, #1
    3e8c:	2092      	movs	r0, #146	; 0x92
    3e8e:	4b08      	ldr	r3, [pc, #32]	; (3eb0 <ENC28_PhyRead+0x30>)
    3e90:	4798      	blx	r3
	while (ENC28_Rcr8(J60_MISTAT) & 0x01)
    3e92:	20ca      	movs	r0, #202	; 0xca
    3e94:	4b07      	ldr	r3, [pc, #28]	; (3eb4 <ENC28_PhyRead+0x34>)
    3e96:	4798      	blx	r3
    3e98:	07c3      	lsls	r3, r0, #31
    3e9a:	d4fa      	bmi.n	3e92 <ENC28_PhyRead+0x12>
		;                       // wait for the busy flag to clear
	ENC28_Bfc(J60_MICMD, 0x01); // clear the read flag
    3e9c:	2101      	movs	r1, #1
    3e9e:	2092      	movs	r0, #146	; 0x92
    3ea0:	4b05      	ldr	r3, [pc, #20]	; (3eb8 <ENC28_PhyRead+0x38>)
    3ea2:	4798      	blx	r3

	return ENC28_Rcr16(J60_MIRDL);
    3ea4:	2098      	movs	r0, #152	; 0x98
    3ea6:	4b05      	ldr	r3, [pc, #20]	; (3ebc <ENC28_PhyRead+0x3c>)
    3ea8:	4798      	blx	r3
}
    3eaa:	bd10      	pop	{r4, pc}
    3eac:	00003d15 	.word	0x00003d15
    3eb0:	00003cdd 	.word	0x00003cdd
    3eb4:	00003cad 	.word	0x00003cad
    3eb8:	00003e49 	.word	0x00003e49
    3ebc:	00003de9 	.word	0x00003de9

00003ec0 <ETH_NextPacketUpdate>:
{
    3ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (nextPacketPointer == RXSTART)
    3ec2:	4b1c      	ldr	r3, [pc, #112]	; (3f34 <ETH_NextPacketUpdate+0x74>)
    3ec4:	8819      	ldrh	r1, [r3, #0]
    3ec6:	2900      	cmp	r1, #0
    3ec8:	d02f      	beq.n	3f2a <ETH_NextPacketUpdate+0x6a>
		ENC28_Wcr16(J60_ERXRDPTL, nextPacketPointer - 1);
    3eca:	3901      	subs	r1, #1
    3ecc:	b289      	uxth	r1, r1
    3ece:	200c      	movs	r0, #12
    3ed0:	4b19      	ldr	r3, [pc, #100]	; (3f38 <ETH_NextPacketUpdate+0x78>)
    3ed2:	4798      	blx	r3
	ENC28_Wcr16(J60_ERDPTL, nextPacketPointer);
    3ed4:	4c17      	ldr	r4, [pc, #92]	; (3f34 <ETH_NextPacketUpdate+0x74>)
    3ed6:	8821      	ldrh	r1, [r4, #0]
    3ed8:	2000      	movs	r0, #0
    3eda:	4b17      	ldr	r3, [pc, #92]	; (3f38 <ETH_NextPacketUpdate+0x78>)
    3edc:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3ede:	26c0      	movs	r6, #192	; 0xc0
    3ee0:	05f6      	lsls	r6, r6, #23
    3ee2:	2780      	movs	r7, #128	; 0x80
    3ee4:	043f      	lsls	r7, r7, #16
    3ee6:	6177      	str	r7, [r6, #20]
	ETH_SPI_WRITE8(rbm_inst);
    3ee8:	213a      	movs	r1, #58	; 0x3a
    3eea:	2001      	movs	r0, #1
    3eec:	4d13      	ldr	r5, [pc, #76]	; (3f3c <ETH_NextPacketUpdate+0x7c>)
    3eee:	47a8      	blx	r5
	((char *)&nextPacketPointer)[0]    = ETH_SPI_READ8();
    3ef0:	2100      	movs	r1, #0
    3ef2:	2000      	movs	r0, #0
    3ef4:	47a8      	blx	r5
    3ef6:	7020      	strb	r0, [r4, #0]
	((char *)&nextPacketPointer)[1]    = ETH_SPI_READ8();
    3ef8:	2100      	movs	r1, #0
    3efa:	2000      	movs	r0, #0
    3efc:	47a8      	blx	r5
    3efe:	7060      	strb	r0, [r4, #1]
	((char *)&rxPacketStatusVector)[0] = ETH_SPI_READ8();
    3f00:	2100      	movs	r1, #0
    3f02:	2000      	movs	r0, #0
    3f04:	47a8      	blx	r5
    3f06:	7120      	strb	r0, [r4, #4]
	((char *)&rxPacketStatusVector)[1] = ETH_SPI_READ8();
    3f08:	2100      	movs	r1, #0
    3f0a:	2000      	movs	r0, #0
    3f0c:	47a8      	blx	r5
    3f0e:	7160      	strb	r0, [r4, #5]
	((char *)&rxPacketStatusVector)[2] = ETH_SPI_READ8();
    3f10:	2100      	movs	r1, #0
    3f12:	2000      	movs	r0, #0
    3f14:	47a8      	blx	r5
    3f16:	71a0      	strb	r0, [r4, #6]
	((char *)&rxPacketStatusVector)[3] = ETH_SPI_READ8();
    3f18:	2100      	movs	r1, #0
    3f1a:	2000      	movs	r0, #0
    3f1c:	47a8      	blx	r5
    3f1e:	71e0      	strb	r0, [r4, #7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3f20:	61b7      	str	r7, [r6, #24]
	rxPacketStatusVector.byteCount -= 4; // I don't care about the frame checksum at the end.
    3f22:	88a3      	ldrh	r3, [r4, #4]
    3f24:	3b04      	subs	r3, #4
    3f26:	80a3      	strh	r3, [r4, #4]
}
    3f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ENC28_Wcr16(J60_ERXRDPTL, RXEND);
    3f2a:	4905      	ldr	r1, [pc, #20]	; (3f40 <ETH_NextPacketUpdate+0x80>)
    3f2c:	200c      	movs	r0, #12
    3f2e:	4b02      	ldr	r3, [pc, #8]	; (3f38 <ETH_NextPacketUpdate+0x78>)
    3f30:	4798      	blx	r3
    3f32:	e7cf      	b.n	3ed4 <ETH_NextPacketUpdate+0x14>
    3f34:	200008a0 	.word	0x200008a0
    3f38:	00003d4d 	.word	0x00003d4d
    3f3c:	00006599 	.word	0x00006599
    3f40:	00001a21 	.word	0x00001a21

00003f44 <ETH_SendSystemReset>:

/**
 * System Software Reset
 */
void ETH_SendSystemReset(void)
{
    3f44:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3f46:	24c0      	movs	r4, #192	; 0xc0
    3f48:	05e4      	lsls	r4, r4, #23
    3f4a:	2580      	movs	r5, #128	; 0x80
    3f4c:	042d      	lsls	r5, r5, #16
    3f4e:	6165      	str	r5, [r4, #20]
	ETH_NCS_LOW();
	ETH_SPI_WRITE8(src_inst);
    3f50:	21ff      	movs	r1, #255	; 0xff
    3f52:	2001      	movs	r0, #1
    3f54:	4b01      	ldr	r3, [pc, #4]	; (3f5c <ETH_SendSystemReset+0x18>)
    3f56:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3f58:	61a5      	str	r5, [r4, #24]
	ETH_NCS_HIGH();
}
    3f5a:	bd70      	pop	{r4, r5, r6, pc}
    3f5c:	00006599 	.word	0x00006599

00003f60 <ETH_CheckLinkUp>:
/**
 * Check for the link presence
 * @return
 */
bool ETH_CheckLinkUp()
{
    3f60:	b510      	push	{r4, lr}
	uint16_t phstat2;

	phstat2 = ENC28_PhyRead(J60_PHSTAT2);
    3f62:	2011      	movs	r0, #17
    3f64:	4b06      	ldr	r3, [pc, #24]	; (3f80 <ETH_CheckLinkUp+0x20>)
    3f66:	4798      	blx	r3

	if (phstat2 & 0x0400) {
    3f68:	0543      	lsls	r3, r0, #21
    3f6a:	d506      	bpl.n	3f7a <ETH_CheckLinkUp+0x1a>
		ethData.up = true;
    3f6c:	4a05      	ldr	r2, [pc, #20]	; (3f84 <ETH_CheckLinkUp+0x24>)
    3f6e:	7813      	ldrb	r3, [r2, #0]
    3f70:	2104      	movs	r1, #4
    3f72:	430b      	orrs	r3, r1
    3f74:	7013      	strb	r3, [r2, #0]
		return true;
    3f76:	2001      	movs	r0, #1
	} else
		return false;
}
    3f78:	bd10      	pop	{r4, pc}
		return false;
    3f7a:	2000      	movs	r0, #0
    3f7c:	e7fc      	b.n	3f78 <ETH_CheckLinkUp+0x18>
    3f7e:	46c0      	nop			; (mov r8, r8)
    3f80:	00003e81 	.word	0x00003e81
    3f84:	20004000 	.word	0x20004000

00003f88 <ETH_Init>:
{
    3f88:	b570      	push	{r4, r5, r6, lr}
	ethData.error      = false; // no error
    3f8a:	4b41      	ldr	r3, [pc, #260]	; (4090 <ETH_Init+0x108>)
    3f8c:	781a      	ldrb	r2, [r3, #0]
    3f8e:	2101      	movs	r1, #1
    3f90:	438a      	bics	r2, r1
    3f92:	701a      	strb	r2, [r3, #0]
	ethData.up         = false; // no link
    3f94:	781a      	ldrb	r2, [r3, #0]
    3f96:	3103      	adds	r1, #3
    3f98:	438a      	bics	r2, r1
    3f9a:	701a      	strb	r2, [r3, #0]
	ethData.linkChange = false;
    3f9c:	781a      	ldrb	r2, [r3, #0]
    3f9e:	310c      	adds	r1, #12
    3fa0:	438a      	bics	r2, r1
    3fa2:	701a      	strb	r2, [r3, #0]
	ethData.bufferBusy = false; // transmit data buffer is free
    3fa4:	781a      	ldrb	r2, [r3, #0]
    3fa6:	3110      	adds	r1, #16
    3fa8:	438a      	bics	r2, r1
    3faa:	701a      	strb	r2, [r3, #0]
	ethData.saveRDPT   = 0;
    3fac:	2200      	movs	r2, #0
    3fae:	809a      	strh	r2, [r3, #4]
	lastBank = sfr_bank0;
    3fb0:	4b38      	ldr	r3, [pc, #224]	; (4094 <ETH_Init+0x10c>)
    3fb2:	701a      	strb	r2, [r3, #0]
	__delay_us(100);
    3fb4:	2064      	movs	r0, #100	; 0x64
    3fb6:	4b38      	ldr	r3, [pc, #224]	; (4098 <ETH_Init+0x110>)
    3fb8:	4798      	blx	r3
	ETH_SendSystemReset(); // software reset
    3fba:	4b38      	ldr	r3, [pc, #224]	; (409c <ETH_Init+0x114>)
    3fbc:	4798      	blx	r3
	__delay_ms(10);
    3fbe:	200a      	movs	r0, #10
    3fc0:	4b37      	ldr	r3, [pc, #220]	; (40a0 <ETH_Init+0x118>)
    3fc2:	4798      	blx	r3
	while (!(ENC28_Rcr8(J60_ESTAT) & 0x01))
    3fc4:	20fd      	movs	r0, #253	; 0xfd
    3fc6:	4b37      	ldr	r3, [pc, #220]	; (40a4 <ETH_Init+0x11c>)
    3fc8:	4798      	blx	r3
    3fca:	07c3      	lsls	r3, r0, #31
    3fcc:	d5fa      	bpl.n	3fc4 <ETH_Init+0x3c>
	nextPacketPointer = RXSTART;
    3fce:	4e36      	ldr	r6, [pc, #216]	; (40a8 <ETH_Init+0x120>)
    3fd0:	2300      	movs	r3, #0
    3fd2:	8033      	strh	r3, [r6, #0]
	ENC28_Bfs(J60_ECON2, 0x80); // enable AUTOINC
    3fd4:	2180      	movs	r1, #128	; 0x80
    3fd6:	20fe      	movs	r0, #254	; 0xfe
    3fd8:	4b34      	ldr	r3, [pc, #208]	; (40ac <ETH_Init+0x124>)
    3fda:	4798      	blx	r3
	ENC28_Wcr16(J60_ETXSTL, TXSTART);
    3fdc:	4c34      	ldr	r4, [pc, #208]	; (40b0 <ETH_Init+0x128>)
    3fde:	0021      	movs	r1, r4
    3fe0:	2004      	movs	r0, #4
    3fe2:	4d34      	ldr	r5, [pc, #208]	; (40b4 <ETH_Init+0x12c>)
    3fe4:	47a8      	blx	r5
	ENC28_Wcr16(J60_ETXNDL, TXEND);
    3fe6:	4934      	ldr	r1, [pc, #208]	; (40b8 <ETH_Init+0x130>)
    3fe8:	2006      	movs	r0, #6
    3fea:	47a8      	blx	r5
	ENC28_Wcr16(J60_ERXSTL, RXSTART);
    3fec:	2100      	movs	r1, #0
    3fee:	2008      	movs	r0, #8
    3ff0:	47a8      	blx	r5
	ENC28_Wcr16(J60_ERXNDL, RXEND);
    3ff2:	4932      	ldr	r1, [pc, #200]	; (40bc <ETH_Init+0x134>)
    3ff4:	200a      	movs	r0, #10
    3ff6:	47a8      	blx	r5
	ENC28_Wcr16(J60_ERDPTL, nextPacketPointer);
    3ff8:	8831      	ldrh	r1, [r6, #0]
    3ffa:	2000      	movs	r0, #0
    3ffc:	47a8      	blx	r5
	ENC28_Wcr16(J60_ERDPTL, RXSTART);
    3ffe:	2100      	movs	r1, #0
    4000:	2000      	movs	r0, #0
    4002:	47a8      	blx	r5
	ENC28_Wcr16(J60_EWRPTL, TXSTART);
    4004:	0021      	movs	r1, r4
    4006:	2002      	movs	r0, #2
    4008:	47a8      	blx	r5
	ENC28_Wcr8(J60_ERXFCON, 0b10101001); // UCEN,OR,CRCEN,MPEN,BCEN (unicast,crc,magic packet,broadcast)
    400a:	21a9      	movs	r1, #169	; 0xa9
    400c:	2058      	movs	r0, #88	; 0x58
    400e:	4c2c      	ldr	r4, [pc, #176]	; (40c0 <ETH_Init+0x138>)
    4010:	47a0      	blx	r4
	ENC28_Wcr8(J60_MACON1, 0x0D); // TXPAUS, RXPAUS, MARXEN
    4012:	210d      	movs	r1, #13
    4014:	2080      	movs	r0, #128	; 0x80
    4016:	47a0      	blx	r4
	ENC28_Wcr8(J60_MACON3, 0xB2); // VLAN padded to 64 bytes (others pad to 60 bytes), Enable CRC, Frame Check, Half Duplex
    4018:	21b2      	movs	r1, #178	; 0xb2
    401a:	2082      	movs	r0, #130	; 0x82
    401c:	47a0      	blx	r4
	ENC28_Wcr8(J60_MACON4, 0x40); // DEFER set
    401e:	2140      	movs	r1, #64	; 0x40
    4020:	2083      	movs	r0, #131	; 0x83
    4022:	47a0      	blx	r4
	ENC28_Wcr16(J60_MAIPGL, 0x0c12);
    4024:	4927      	ldr	r1, [pc, #156]	; (40c4 <ETH_Init+0x13c>)
    4026:	2086      	movs	r0, #134	; 0x86
    4028:	47a8      	blx	r5
	ENC28_Wcr8(J60_MABBIPG, 0x12);
    402a:	2112      	movs	r1, #18
    402c:	2084      	movs	r0, #132	; 0x84
    402e:	47a0      	blx	r4
	ENC28_Wcr16(J60_MAMXFLL, MAX_TX_PACKET);
    4030:	4925      	ldr	r1, [pc, #148]	; (40c8 <ETH_Init+0x140>)
    4032:	208a      	movs	r0, #138	; 0x8a
    4034:	47a8      	blx	r5
    ENC28_Wcr8(J60_ECOCON, 0x00); // RNG: Disable the clock out output to reduce EMI generation
    4036:	2100      	movs	r1, #0
    4038:	20d5      	movs	r0, #213	; 0xd5
    403a:	47a0      	blx	r4
	ENC28_Wcr8(J60_MAADR1, eth_MAC.mac_array[0]);
    403c:	7a31      	ldrb	r1, [r6, #8]
    403e:	20c4      	movs	r0, #196	; 0xc4
    4040:	47a0      	blx	r4
	ENC28_Wcr8(J60_MAADR2, eth_MAC.mac_array[1]);
    4042:	7a71      	ldrb	r1, [r6, #9]
    4044:	20c5      	movs	r0, #197	; 0xc5
    4046:	47a0      	blx	r4
	ENC28_Wcr8(J60_MAADR3, eth_MAC.mac_array[2]);
    4048:	7ab1      	ldrb	r1, [r6, #10]
    404a:	20c2      	movs	r0, #194	; 0xc2
    404c:	47a0      	blx	r4
	ENC28_Wcr8(J60_MAADR4, eth_MAC.mac_array[3]);
    404e:	7af1      	ldrb	r1, [r6, #11]
    4050:	20c3      	movs	r0, #195	; 0xc3
    4052:	47a0      	blx	r4
	ENC28_Wcr8(J60_MAADR5, eth_MAC.mac_array[4]);
    4054:	7b31      	ldrb	r1, [r6, #12]
    4056:	20c0      	movs	r0, #192	; 0xc0
    4058:	47a0      	blx	r4
	ENC28_Wcr8(J60_MAADR6, eth_MAC.mac_array[5]);
    405a:	7b71      	ldrb	r1, [r6, #13]
    405c:	20c1      	movs	r0, #193	; 0xc1
    405e:	47a0      	blx	r4
	ENC28_Wcr8(J60_ECON1, 0x04); // RXEN enabled
    4060:	2104      	movs	r1, #4
    4062:	20ff      	movs	r0, #255	; 0xff
    4064:	47a0      	blx	r4
	ENC28_PhyWrite(J60_PHCON1, 0x0000);
    4066:	2100      	movs	r1, #0
    4068:	2000      	movs	r0, #0
    406a:	4e18      	ldr	r6, [pc, #96]	; (40cc <ETH_Init+0x144>)
    406c:	47b0      	blx	r6
	ENC28_PhyWrite(J60_PHCON2, 0x0100); // Do not transmit loopback
    406e:	2180      	movs	r1, #128	; 0x80
    4070:	0049      	lsls	r1, r1, #1
    4072:	2010      	movs	r0, #16
    4074:	47b0      	blx	r6
	ENC28_PhyWrite(J60_PHLCON, 0x0472); // LED control - LEDA = Link, LEDB = TX/RX, Stretched LED
    4076:	4916      	ldr	r1, [pc, #88]	; (40d0 <ETH_Init+0x148>)
    4078:	2014      	movs	r0, #20
    407a:	47b0      	blx	r6
	ENC28_Wcr8(J60_EIE, 0xDB);   // Enable PKTIE,INTIE,LINKIE,TXIE,TXERIE,RXERIE
    407c:	21db      	movs	r1, #219	; 0xdb
    407e:	20fb      	movs	r0, #251	; 0xfb
    4080:	47a0      	blx	r4
	ENC28_Wcr16(J60_PHIE, 0x12); // Enable PLNKIE and PGEIE
    4082:	2112      	movs	r1, #18
    4084:	2012      	movs	r0, #18
    4086:	47a8      	blx	r5
	ETH_CheckLinkUp();
    4088:	4b12      	ldr	r3, [pc, #72]	; (40d4 <ETH_Init+0x14c>)
    408a:	4798      	blx	r3
}
    408c:	bd70      	pop	{r4, r5, r6, pc}
    408e:	46c0      	nop			; (mov r8, r8)
    4090:	20004000 	.word	0x20004000
    4094:	20004008 	.word	0x20004008
    4098:	0000256d 	.word	0x0000256d
    409c:	00003f45 	.word	0x00003f45
    40a0:	0000258d 	.word	0x0000258d
    40a4:	00003cad 	.word	0x00003cad
    40a8:	200008a0 	.word	0x200008a0
    40ac:	00003cdd 	.word	0x00003cdd
    40b0:	00001a23 	.word	0x00001a23
    40b4:	00003d4d 	.word	0x00003d4d
    40b8:	00001fff 	.word	0x00001fff
    40bc:	00001a21 	.word	0x00001a21
    40c0:	00003d15 	.word	0x00003d15
    40c4:	00000c12 	.word	0x00000c12
    40c8:	000005dc 	.word	0x000005dc
    40cc:	00003db9 	.word	0x00003db9
    40d0:	00000472 	.word	0x00000472
    40d4:	00003f61 	.word	0x00003f61

000040d8 <ETH_EventHandler>:
{
    40d8:	b570      	push	{r4, r5, r6, lr}
	eir_val.val     = ENC28_Rcr8(J60_EIR);
    40da:	20fc      	movs	r0, #252	; 0xfc
    40dc:	4b23      	ldr	r3, [pc, #140]	; (416c <ETH_EventHandler+0x94>)
    40de:	4798      	blx	r3
    40e0:	0004      	movs	r4, r0
    40e2:	0005      	movs	r5, r0
	phstat2_val.val = ENC28_Rcr16(J60_PHSTAT2);
    40e4:	2011      	movs	r0, #17
    40e6:	4b22      	ldr	r3, [pc, #136]	; (4170 <ETH_EventHandler+0x98>)
    40e8:	4798      	blx	r3
    40ea:	0006      	movs	r6, r0
	if (eir_val.LINKIF) // something about the link changed.... update the link parameters
    40ec:	06e3      	lsls	r3, r4, #27
    40ee:	d40d      	bmi.n	410c <ETH_EventHandler+0x34>
	if (eir_val.TXIF) // finished sending a packet
    40f0:	0723      	lsls	r3, r4, #28
    40f2:	d42a      	bmi.n	414a <ETH_EventHandler+0x72>
	if (eir_val.PKTIF || ENC28_Rcr8(J60_EPKTCNT)) // Packet receive buffer has at least 1 unprocessed packet
    40f4:	0663      	lsls	r3, r4, #25
    40f6:	d532      	bpl.n	415e <ETH_EventHandler+0x86>
		ethData.pktReady = true;
    40f8:	4a1e      	ldr	r2, [pc, #120]	; (4174 <ETH_EventHandler+0x9c>)
    40fa:	7813      	ldrb	r3, [r2, #0]
    40fc:	2102      	movs	r1, #2
    40fe:	430b      	orrs	r3, r1
    4100:	7013      	strb	r3, [r2, #0]
	ENC28_Wcr8(J60_EIR, eir_val.val); // write the eir value back to clear any of the interrupts
    4102:	b2e9      	uxtb	r1, r5
    4104:	20fc      	movs	r0, #252	; 0xfc
    4106:	4b1c      	ldr	r3, [pc, #112]	; (4178 <ETH_EventHandler+0xa0>)
    4108:	4798      	blx	r3
}
    410a:	bd70      	pop	{r4, r5, r6, pc}
		ethData.linkChange = true;
    410c:	4b19      	ldr	r3, [pc, #100]	; (4174 <ETH_EventHandler+0x9c>)
    410e:	781a      	ldrb	r2, [r3, #0]
    4110:	2110      	movs	r1, #16
    4112:	430a      	orrs	r2, r1
    4114:	701a      	strb	r2, [r3, #0]
		ethData.up         = false;
    4116:	781a      	ldrb	r2, [r3, #0]
    4118:	2104      	movs	r1, #4
    411a:	438a      	bics	r2, r1
    411c:	701a      	strb	r2, [r3, #0]
		if (ETH_CheckLinkUp()) {
    411e:	4b17      	ldr	r3, [pc, #92]	; (417c <ETH_EventHandler+0xa4>)
    4120:	4798      	blx	r3
		if (phstat2_val.DPXSTAT) // Update MAC duplex settings to match PHY duplex setting
    4122:	05b3      	lsls	r3, r6, #22
    4124:	d508      	bpl.n	4138 <ETH_EventHandler+0x60>
			ENC28_Wcr16(J60_MABBIPG, 0x15); // Switching to full duplex
    4126:	2115      	movs	r1, #21
    4128:	2084      	movs	r0, #132	; 0x84
    412a:	4b15      	ldr	r3, [pc, #84]	; (4180 <ETH_EventHandler+0xa8>)
    412c:	4798      	blx	r3
			ENC28_Bfs(J60_PHSTAT2, 0x01);
    412e:	2101      	movs	r1, #1
    4130:	2011      	movs	r0, #17
    4132:	4b14      	ldr	r3, [pc, #80]	; (4184 <ETH_EventHandler+0xac>)
    4134:	4798      	blx	r3
    4136:	e7db      	b.n	40f0 <ETH_EventHandler+0x18>
			ENC28_Wcr16(J60_MABBIPG, 0x12); // Switching to half duplex
    4138:	2112      	movs	r1, #18
    413a:	2084      	movs	r0, #132	; 0x84
    413c:	4b10      	ldr	r3, [pc, #64]	; (4180 <ETH_EventHandler+0xa8>)
    413e:	4798      	blx	r3
			ENC28_Bfc(J60_PHSTAT2, 0x01);
    4140:	2101      	movs	r1, #1
    4142:	2011      	movs	r0, #17
    4144:	4b10      	ldr	r3, [pc, #64]	; (4188 <ETH_EventHandler+0xb0>)
    4146:	4798      	blx	r3
    4148:	e7d2      	b.n	40f0 <ETH_EventHandler+0x18>
		ethData.bufferBusy = false;
    414a:	4a0a      	ldr	r2, [pc, #40]	; (4174 <ETH_EventHandler+0x9c>)
    414c:	7813      	ldrb	r3, [r2, #0]
    414e:	2120      	movs	r1, #32
    4150:	438b      	bics	r3, r1
    4152:	7013      	strb	r3, [r2, #0]
		ENC28_Bfc(J60_EIR, 0x08);
    4154:	3918      	subs	r1, #24
    4156:	20fc      	movs	r0, #252	; 0xfc
    4158:	4b0b      	ldr	r3, [pc, #44]	; (4188 <ETH_EventHandler+0xb0>)
    415a:	4798      	blx	r3
    415c:	e7ca      	b.n	40f4 <ETH_EventHandler+0x1c>
	if (eir_val.PKTIF || ENC28_Rcr8(J60_EPKTCNT)) // Packet receive buffer has at least 1 unprocessed packet
    415e:	2059      	movs	r0, #89	; 0x59
    4160:	4b02      	ldr	r3, [pc, #8]	; (416c <ETH_EventHandler+0x94>)
    4162:	4798      	blx	r3
    4164:	2800      	cmp	r0, #0
    4166:	d1c7      	bne.n	40f8 <ETH_EventHandler+0x20>
    4168:	e7cb      	b.n	4102 <ETH_EventHandler+0x2a>
    416a:	46c0      	nop			; (mov r8, r8)
    416c:	00003cad 	.word	0x00003cad
    4170:	00003de9 	.word	0x00003de9
    4174:	20004000 	.word	0x20004000
    4178:	00003d15 	.word	0x00003d15
    417c:	00003f61 	.word	0x00003f61
    4180:	00003d4d 	.word	0x00003d4d
    4184:	00003cdd 	.word	0x00003cdd
    4188:	00003e49 	.word	0x00003e49

0000418c <ETH_Read8>:
 * Read 1 byte of data from the RX Buffer
 * @return
 */

uint8_t ETH_Read8(void)
{
    418c:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    418e:	24c0      	movs	r4, #192	; 0xc0
    4190:	05e4      	lsls	r4, r4, #23
    4192:	2580      	movs	r5, #128	; 0x80
    4194:	042d      	lsls	r5, r5, #16
    4196:	6165      	str	r5, [r4, #20]
	uint8_t b;

	ETH_NCS_LOW();
	ETH_SPI_WRITE8(rbm_inst);
    4198:	213a      	movs	r1, #58	; 0x3a
    419a:	2001      	movs	r0, #1
    419c:	4e03      	ldr	r6, [pc, #12]	; (41ac <ETH_Read8+0x20>)
    419e:	47b0      	blx	r6
	b = ETH_SPI_READ8();
    41a0:	2100      	movs	r1, #0
    41a2:	2000      	movs	r0, #0
    41a4:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    41a6:	61a5      	str	r5, [r4, #24]
	ETH_NCS_HIGH();

	return b;
}
    41a8:	bd70      	pop	{r4, r5, r6, pc}
    41aa:	46c0      	nop			; (mov r8, r8)
    41ac:	00006599 	.word	0x00006599

000041b0 <ETH_ComputeChecksum>:
	// TODO: RESET(); // reboot for now
	return DMA_TIMEOUT;
}

static uint16_t ETH_ComputeChecksum(uint16_t len, uint16_t seed)
{
    41b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    41b2:	b083      	sub	sp, #12
    41b4:	0005      	movs	r5, r0
    41b6:	000c      	movs	r4, r1
	uint32_t cksm;
	uint16_t v;

	cksm = seed;

	while (len > 1) {
    41b8:	e00c      	b.n	41d4 <ETH_ComputeChecksum+0x24>
		v               = 0;
    41ba:	466b      	mov	r3, sp
    41bc:	1d9e      	adds	r6, r3, #6
    41be:	2300      	movs	r3, #0
    41c0:	8033      	strh	r3, [r6, #0]
		((char *)&v)[1] = ETH_Read8();
    41c2:	4f11      	ldr	r7, [pc, #68]	; (4208 <ETH_ComputeChecksum+0x58>)
    41c4:	47b8      	blx	r7
    41c6:	7070      	strb	r0, [r6, #1]
		((char *)&v)[0] = ETH_Read8();
    41c8:	47b8      	blx	r7
    41ca:	7030      	strb	r0, [r6, #0]
		cksm += v;
    41cc:	8833      	ldrh	r3, [r6, #0]
    41ce:	18e4      	adds	r4, r4, r3
		len -= 2;
    41d0:	3d02      	subs	r5, #2
    41d2:	b2ad      	uxth	r5, r5
	while (len > 1) {
    41d4:	2d01      	cmp	r5, #1
    41d6:	d8f0      	bhi.n	41ba <ETH_ComputeChecksum+0xa>
	}

	if (len) {
    41d8:	2d00      	cmp	r5, #0
    41da:	d00e      	beq.n	41fa <ETH_ComputeChecksum+0x4a>
		v               = 0;
    41dc:	466b      	mov	r3, sp
    41de:	1d9d      	adds	r5, r3, #6
    41e0:	2300      	movs	r3, #0
    41e2:	802b      	strh	r3, [r5, #0]
		((char *)&v)[1] = ETH_Read8();
    41e4:	4b08      	ldr	r3, [pc, #32]	; (4208 <ETH_ComputeChecksum+0x58>)
    41e6:	4798      	blx	r3
    41e8:	7068      	strb	r0, [r5, #1]
		((char *)&v)[0] = 0;
    41ea:	2300      	movs	r3, #0
    41ec:	702b      	strb	r3, [r5, #0]
		cksm += v;
    41ee:	882b      	ldrh	r3, [r5, #0]
    41f0:	18e4      	adds	r4, r4, r3
    41f2:	e002      	b.n	41fa <ETH_ComputeChecksum+0x4a>
	}

	// wrap the checksum
	while (cksm >> 16) {
		cksm = (cksm & 0x0FFFF) + (cksm >> 16);
    41f4:	0424      	lsls	r4, r4, #16
    41f6:	0c24      	lsrs	r4, r4, #16
    41f8:	191c      	adds	r4, r3, r4
	while (cksm >> 16) {
    41fa:	0c23      	lsrs	r3, r4, #16
    41fc:	d1fa      	bne.n	41f4 <ETH_ComputeChecksum+0x44>
	}

	// invert the number.
	cksm = ~cksm;
    41fe:	43e0      	mvns	r0, r4

	// Return the resulting checksum
	return cksm;
    4200:	b280      	uxth	r0, r0
}
    4202:	b003      	add	sp, #12
    4204:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4206:	46c0      	nop			; (mov r8, r8)
    4208:	0000418d 	.word	0x0000418d

0000420c <ETH_Read16>:
{
    420c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    420e:	25c0      	movs	r5, #192	; 0xc0
    4210:	05ed      	lsls	r5, r5, #23
    4212:	2680      	movs	r6, #128	; 0x80
    4214:	0436      	lsls	r6, r6, #16
    4216:	616e      	str	r6, [r5, #20]
	ETH_SPI_WRITE8(rbm_inst);
    4218:	213a      	movs	r1, #58	; 0x3a
    421a:	2001      	movs	r0, #1
    421c:	4f07      	ldr	r7, [pc, #28]	; (423c <ETH_Read16+0x30>)
    421e:	47b8      	blx	r7
	b = ETH_SPI_READ8() << 8;
    4220:	2100      	movs	r1, #0
    4222:	2000      	movs	r0, #0
    4224:	47b8      	blx	r7
    4226:	b280      	uxth	r0, r0
    4228:	0200      	lsls	r0, r0, #8
    422a:	b284      	uxth	r4, r0
	b |= ETH_SPI_READ8();
    422c:	2100      	movs	r1, #0
    422e:	2000      	movs	r0, #0
    4230:	47b8      	blx	r7
    4232:	b280      	uxth	r0, r0
    4234:	4320      	orrs	r0, r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4236:	61ae      	str	r6, [r5, #24]
}
    4238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    423a:	46c0      	nop			; (mov r8, r8)
    423c:	00006599 	.word	0x00006599

00004240 <ETH_Read32>:
{
    4240:	b5f0      	push	{r4, r5, r6, r7, lr}
    4242:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4244:	26c0      	movs	r6, #192	; 0xc0
    4246:	05f6      	lsls	r6, r6, #23
    4248:	2780      	movs	r7, #128	; 0x80
    424a:	043f      	lsls	r7, r7, #16
    424c:	6177      	str	r7, [r6, #20]
	ETH_SPI_WRITE8(rbm_inst);
    424e:	213a      	movs	r1, #58	; 0x3a
    4250:	2001      	movs	r0, #1
    4252:	4c0b      	ldr	r4, [pc, #44]	; (4280 <ETH_Read32+0x40>)
    4254:	47a0      	blx	r4
	((char *)&b)[3] = ETH_SPI_READ8();
    4256:	2100      	movs	r1, #0
    4258:	2000      	movs	r0, #0
    425a:	47a0      	blx	r4
    425c:	ad01      	add	r5, sp, #4
    425e:	70e8      	strb	r0, [r5, #3]
	((char *)&b)[2] = ETH_SPI_READ8();
    4260:	2100      	movs	r1, #0
    4262:	2000      	movs	r0, #0
    4264:	47a0      	blx	r4
    4266:	70a8      	strb	r0, [r5, #2]
	((char *)&b)[1] = ETH_SPI_READ8();
    4268:	2100      	movs	r1, #0
    426a:	2000      	movs	r0, #0
    426c:	47a0      	blx	r4
    426e:	7068      	strb	r0, [r5, #1]
	((char *)&b)[0] = ETH_SPI_READ8();
    4270:	2100      	movs	r1, #0
    4272:	2000      	movs	r0, #0
    4274:	47a0      	blx	r4
    4276:	7028      	strb	r0, [r5, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4278:	61b7      	str	r7, [r6, #24]
}
    427a:	9801      	ldr	r0, [sp, #4]
    427c:	b003      	add	sp, #12
    427e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4280:	00006599 	.word	0x00006599

00004284 <ETH_ReadBlock>:
{
    4284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4286:	0005      	movs	r5, r0
	if (rxPacketStatusVector.byteCount < length)
    4288:	4b11      	ldr	r3, [pc, #68]	; (42d0 <ETH_ReadBlock+0x4c>)
    428a:	889f      	ldrh	r7, [r3, #4]
    428c:	42b9      	cmp	r1, r7
    428e:	d800      	bhi.n	4292 <ETH_ReadBlock+0xe>
	uint16_t readCount = length;
    4290:	000f      	movs	r7, r1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4292:	2280      	movs	r2, #128	; 0x80
    4294:	0412      	lsls	r2, r2, #16
    4296:	23c0      	movs	r3, #192	; 0xc0
    4298:	05db      	lsls	r3, r3, #23
    429a:	615a      	str	r2, [r3, #20]
	ETH_SPI_WRITE8(rbm_inst);
    429c:	213a      	movs	r1, #58	; 0x3a
    429e:	2001      	movs	r0, #1
    42a0:	4b0c      	ldr	r3, [pc, #48]	; (42d4 <ETH_ReadBlock+0x50>)
    42a2:	4798      	blx	r3
	length = readCount;
    42a4:	003a      	movs	r2, r7
	while (length--)
    42a6:	e007      	b.n	42b8 <ETH_ReadBlock+0x34>
		*p++ = ETH_SPI_READ8();
    42a8:	1c6e      	adds	r6, r5, #1
    42aa:	2100      	movs	r1, #0
    42ac:	2000      	movs	r0, #0
    42ae:	4b09      	ldr	r3, [pc, #36]	; (42d4 <ETH_ReadBlock+0x50>)
    42b0:	4798      	blx	r3
    42b2:	7028      	strb	r0, [r5, #0]
    42b4:	0035      	movs	r5, r6
	while (length--)
    42b6:	0022      	movs	r2, r4
    42b8:	1e54      	subs	r4, r2, #1
    42ba:	b2a4      	uxth	r4, r4
    42bc:	2a00      	cmp	r2, #0
    42be:	d1f3      	bne.n	42a8 <ETH_ReadBlock+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    42c0:	2280      	movs	r2, #128	; 0x80
    42c2:	0412      	lsls	r2, r2, #16
    42c4:	23c0      	movs	r3, #192	; 0xc0
    42c6:	05db      	lsls	r3, r3, #23
    42c8:	619a      	str	r2, [r3, #24]
}
    42ca:	0038      	movs	r0, r7
    42cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42ce:	46c0      	nop			; (mov r8, r8)
    42d0:	200008a0 	.word	0x200008a0
    42d4:	00006599 	.word	0x00006599

000042d8 <ETH_Write8>:
{
    42d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42da:	0005      	movs	r5, r0
	TXPacketSize += 1;
    42dc:	4a08      	ldr	r2, [pc, #32]	; (4300 <ETH_Write8+0x28>)
    42de:	8813      	ldrh	r3, [r2, #0]
    42e0:	3301      	adds	r3, #1
    42e2:	8013      	strh	r3, [r2, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    42e4:	24c0      	movs	r4, #192	; 0xc0
    42e6:	05e4      	lsls	r4, r4, #23
    42e8:	2680      	movs	r6, #128	; 0x80
    42ea:	0436      	lsls	r6, r6, #16
    42ec:	6166      	str	r6, [r4, #20]
	ETH_SPI_WRITE8(wbm_inst);
    42ee:	217a      	movs	r1, #122	; 0x7a
    42f0:	2001      	movs	r0, #1
    42f2:	4f04      	ldr	r7, [pc, #16]	; (4304 <ETH_Write8+0x2c>)
    42f4:	47b8      	blx	r7
	ETH_SPI_WRITE8(data);
    42f6:	0029      	movs	r1, r5
    42f8:	2001      	movs	r0, #1
    42fa:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    42fc:	61a6      	str	r6, [r4, #24]
}
    42fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4300:	20003ffc 	.word	0x20003ffc
    4304:	00006599 	.word	0x00006599

00004308 <ETH_Write16>:
{
    4308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    430a:	0004      	movs	r4, r0
	TXPacketSize += 2;
    430c:	4a0a      	ldr	r2, [pc, #40]	; (4338 <ETH_Write16+0x30>)
    430e:	8813      	ldrh	r3, [r2, #0]
    4310:	3302      	adds	r3, #2
    4312:	8013      	strh	r3, [r2, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4314:	26c0      	movs	r6, #192	; 0xc0
    4316:	05f6      	lsls	r6, r6, #23
    4318:	2780      	movs	r7, #128	; 0x80
    431a:	043f      	lsls	r7, r7, #16
    431c:	6177      	str	r7, [r6, #20]
	ETH_SPI_WRITE8(wbm_inst);
    431e:	217a      	movs	r1, #122	; 0x7a
    4320:	2001      	movs	r0, #1
    4322:	4d06      	ldr	r5, [pc, #24]	; (433c <ETH_Write16+0x34>)
    4324:	47a8      	blx	r5
	ETH_SPI_WRITE8(data >> 8);
    4326:	0a21      	lsrs	r1, r4, #8
    4328:	2001      	movs	r0, #1
    432a:	47a8      	blx	r5
	ETH_SPI_WRITE8(data);
    432c:	b2e1      	uxtb	r1, r4
    432e:	2001      	movs	r0, #1
    4330:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4332:	61b7      	str	r7, [r6, #24]
}
    4334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4336:	46c0      	nop			; (mov r8, r8)
    4338:	20003ffc 	.word	0x20003ffc
    433c:	00006599 	.word	0x00006599

00004340 <ETH_Write32>:
{
    4340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4342:	0004      	movs	r4, r0
	TXPacketSize += 4;
    4344:	4a0e      	ldr	r2, [pc, #56]	; (4380 <ETH_Write32+0x40>)
    4346:	8813      	ldrh	r3, [r2, #0]
    4348:	3304      	adds	r3, #4
    434a:	8013      	strh	r3, [r2, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    434c:	26c0      	movs	r6, #192	; 0xc0
    434e:	05f6      	lsls	r6, r6, #23
    4350:	2780      	movs	r7, #128	; 0x80
    4352:	043f      	lsls	r7, r7, #16
    4354:	6177      	str	r7, [r6, #20]
	ETH_SPI_WRITE8(wbm_inst);
    4356:	217a      	movs	r1, #122	; 0x7a
    4358:	2001      	movs	r0, #1
    435a:	4d0a      	ldr	r5, [pc, #40]	; (4384 <ETH_Write32+0x44>)
    435c:	47a8      	blx	r5
	ETH_SPI_WRITE8(data >> 24);
    435e:	0e21      	lsrs	r1, r4, #24
    4360:	2001      	movs	r0, #1
    4362:	47a8      	blx	r5
	ETH_SPI_WRITE8(data >> 16);
    4364:	0c21      	lsrs	r1, r4, #16
    4366:	b2c9      	uxtb	r1, r1
    4368:	2001      	movs	r0, #1
    436a:	47a8      	blx	r5
	ETH_SPI_WRITE8(data >> 8);
    436c:	0a21      	lsrs	r1, r4, #8
    436e:	b2c9      	uxtb	r1, r1
    4370:	2001      	movs	r0, #1
    4372:	47a8      	blx	r5
	ETH_SPI_WRITE8(data);
    4374:	b2e1      	uxtb	r1, r4
    4376:	2001      	movs	r0, #1
    4378:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    437a:	61b7      	str	r7, [r6, #24]
}
    437c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    437e:	46c0      	nop			; (mov r8, r8)
    4380:	20003ffc 	.word	0x20003ffc
    4384:	00006599 	.word	0x00006599

00004388 <ETH_WriteBlock>:
{
    4388:	b570      	push	{r4, r5, r6, lr}
    438a:	0004      	movs	r4, r0
    438c:	000d      	movs	r5, r1
	TXPacketSize += length;
    438e:	4a10      	ldr	r2, [pc, #64]	; (43d0 <ETH_WriteBlock+0x48>)
    4390:	8813      	ldrh	r3, [r2, #0]
    4392:	18cb      	adds	r3, r1, r3
    4394:	8013      	strh	r3, [r2, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4396:	2280      	movs	r2, #128	; 0x80
    4398:	0412      	lsls	r2, r2, #16
    439a:	23c0      	movs	r3, #192	; 0xc0
    439c:	05db      	lsls	r3, r3, #23
    439e:	615a      	str	r2, [r3, #20]
	ETH_SPI_WRITE8(wbm_inst);
    43a0:	217a      	movs	r1, #122	; 0x7a
    43a2:	2001      	movs	r0, #1
    43a4:	4b0b      	ldr	r3, [pc, #44]	; (43d4 <ETH_WriteBlock+0x4c>)
    43a6:	4798      	blx	r3
	char *p = data;
    43a8:	0020      	movs	r0, r4
	while (length--) {
    43aa:	e006      	b.n	43ba <ETH_WriteBlock+0x32>
		ETH_SPI_WRITE8(*p++);
    43ac:	1c45      	adds	r5, r0, #1
    43ae:	7801      	ldrb	r1, [r0, #0]
    43b0:	2001      	movs	r0, #1
    43b2:	4b08      	ldr	r3, [pc, #32]	; (43d4 <ETH_WriteBlock+0x4c>)
    43b4:	4798      	blx	r3
    43b6:	0028      	movs	r0, r5
	while (length--) {
    43b8:	0025      	movs	r5, r4
    43ba:	1e6c      	subs	r4, r5, #1
    43bc:	b2a4      	uxth	r4, r4
    43be:	2d00      	cmp	r5, #0
    43c0:	d1f4      	bne.n	43ac <ETH_WriteBlock+0x24>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    43c2:	2280      	movs	r2, #128	; 0x80
    43c4:	0412      	lsls	r2, r2, #16
    43c6:	23c0      	movs	r3, #192	; 0xc0
    43c8:	05db      	lsls	r3, r3, #23
    43ca:	619a      	str	r2, [r3, #24]
}
    43cc:	0020      	movs	r0, r4
    43ce:	bd70      	pop	{r4, r5, r6, pc}
    43d0:	20003ffc 	.word	0x20003ffc
    43d4:	00006599 	.word	0x00006599

000043d8 <ETH_WriteStart>:
{
    43d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43da:	46ce      	mov	lr, r9
    43dc:	4647      	mov	r7, r8
    43de:	b580      	push	{r7, lr}
    43e0:	0004      	movs	r4, r0
    43e2:	000d      	movs	r5, r1
	if (ethData.bufferBusy) {
    43e4:	4b31      	ldr	r3, [pc, #196]	; (44ac <ETH_WriteStart+0xd4>)
    43e6:	681b      	ldr	r3, [r3, #0]
    43e8:	069b      	lsls	r3, r3, #26
    43ea:	d504      	bpl.n	43f6 <ETH_WriteStart+0x1e>
		return BUFFER_BUSY;
    43ec:	2003      	movs	r0, #3
}
    43ee:	bc0c      	pop	{r2, r3}
    43f0:	4690      	mov	r8, r2
    43f2:	4699      	mov	r9, r3
    43f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((ENC28_Rcr8(J60_ECON1) & 0x08)) {
    43f6:	20ff      	movs	r0, #255	; 0xff
    43f8:	4b2d      	ldr	r3, [pc, #180]	; (44b0 <ETH_WriteStart+0xd8>)
    43fa:	4798      	blx	r3
    43fc:	0703      	lsls	r3, r0, #28
    43fe:	d501      	bpl.n	4404 <ETH_WriteStart+0x2c>
		return TX_LOGIC_NOT_IDLE;
    4400:	2004      	movs	r0, #4
    4402:	e7f4      	b.n	43ee <ETH_WriteStart+0x16>
	ENC28_Wcr16(J60_ETXSTL, TXSTART);
    4404:	4f2b      	ldr	r7, [pc, #172]	; (44b4 <ETH_WriteStart+0xdc>)
    4406:	0039      	movs	r1, r7
    4408:	2004      	movs	r0, #4
    440a:	4e2b      	ldr	r6, [pc, #172]	; (44b8 <ETH_WriteStart+0xe0>)
    440c:	47b0      	blx	r6
	ENC28_Wcr16(J60_EWRPTL, TXSTART);
    440e:	0039      	movs	r1, r7
    4410:	2002      	movs	r0, #2
    4412:	47b0      	blx	r6
	TXPacketSize = 0;
    4414:	4f29      	ldr	r7, [pc, #164]	; (44bc <ETH_WriteStart+0xe4>)
    4416:	2300      	movs	r3, #0
    4418:	803b      	strh	r3, [r7, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    441a:	23c0      	movs	r3, #192	; 0xc0
    441c:	05db      	lsls	r3, r3, #23
    441e:	4698      	mov	r8, r3
    4420:	2380      	movs	r3, #128	; 0x80
    4422:	041b      	lsls	r3, r3, #16
    4424:	4699      	mov	r9, r3
    4426:	4643      	mov	r3, r8
    4428:	464a      	mov	r2, r9
    442a:	615a      	str	r2, [r3, #20]
	ETH_SPI_WRITE8(wbm_inst);
    442c:	217a      	movs	r1, #122	; 0x7a
    442e:	2001      	movs	r0, #1
    4430:	4e23      	ldr	r6, [pc, #140]	; (44c0 <ETH_WriteStart+0xe8>)
    4432:	47b0      	blx	r6
	ETH_SPI_WRITE8(Control_Byte);
    4434:	2100      	movs	r1, #0
    4436:	2001      	movs	r0, #1
    4438:	47b0      	blx	r6
	ETH_SPI_WRITE8(dest_mac->mac_array[0]);
    443a:	7821      	ldrb	r1, [r4, #0]
    443c:	2001      	movs	r0, #1
    443e:	47b0      	blx	r6
	ETH_SPI_WRITE8(dest_mac->mac_array[1]);
    4440:	7861      	ldrb	r1, [r4, #1]
    4442:	2001      	movs	r0, #1
    4444:	47b0      	blx	r6
	ETH_SPI_WRITE8(dest_mac->mac_array[2]);
    4446:	78a1      	ldrb	r1, [r4, #2]
    4448:	2001      	movs	r0, #1
    444a:	47b0      	blx	r6
	ETH_SPI_WRITE8(dest_mac->mac_array[3]);
    444c:	78e1      	ldrb	r1, [r4, #3]
    444e:	2001      	movs	r0, #1
    4450:	47b0      	blx	r6
	ETH_SPI_WRITE8(dest_mac->mac_array[4]);
    4452:	7921      	ldrb	r1, [r4, #4]
    4454:	2001      	movs	r0, #1
    4456:	47b0      	blx	r6
	ETH_SPI_WRITE8(dest_mac->mac_array[5]);
    4458:	7961      	ldrb	r1, [r4, #5]
    445a:	2001      	movs	r0, #1
    445c:	47b0      	blx	r6
	ETH_SPI_WRITE8(eth_MAC.mac_array[0]);
    445e:	4c19      	ldr	r4, [pc, #100]	; (44c4 <ETH_WriteStart+0xec>)
    4460:	7a21      	ldrb	r1, [r4, #8]
    4462:	2001      	movs	r0, #1
    4464:	47b0      	blx	r6
	ETH_SPI_WRITE8(eth_MAC.mac_array[1]);
    4466:	7a61      	ldrb	r1, [r4, #9]
    4468:	2001      	movs	r0, #1
    446a:	47b0      	blx	r6
	ETH_SPI_WRITE8(eth_MAC.mac_array[2]);
    446c:	7aa1      	ldrb	r1, [r4, #10]
    446e:	2001      	movs	r0, #1
    4470:	47b0      	blx	r6
	ETH_SPI_WRITE8(eth_MAC.mac_array[3]);
    4472:	7ae1      	ldrb	r1, [r4, #11]
    4474:	2001      	movs	r0, #1
    4476:	47b0      	blx	r6
	ETH_SPI_WRITE8(eth_MAC.mac_array[4]);
    4478:	7b21      	ldrb	r1, [r4, #12]
    447a:	2001      	movs	r0, #1
    447c:	47b0      	blx	r6
	ETH_SPI_WRITE8(eth_MAC.mac_array[5]);
    447e:	7b61      	ldrb	r1, [r4, #13]
    4480:	2001      	movs	r0, #1
    4482:	47b0      	blx	r6
	ETH_SPI_WRITE8(type >> 8);
    4484:	0a29      	lsrs	r1, r5, #8
    4486:	2001      	movs	r0, #1
    4488:	47b0      	blx	r6
	ETH_SPI_WRITE8(type & 0x0FF);
    448a:	b2e9      	uxtb	r1, r5
    448c:	2001      	movs	r0, #1
    448e:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4490:	4643      	mov	r3, r8
    4492:	464a      	mov	r2, r9
    4494:	619a      	str	r2, [r3, #24]
	TXPacketSize += 15;
    4496:	883b      	ldrh	r3, [r7, #0]
    4498:	330f      	adds	r3, #15
    449a:	803b      	strh	r3, [r7, #0]
	ethData.bufferBusy = true;
    449c:	4a03      	ldr	r2, [pc, #12]	; (44ac <ETH_WriteStart+0xd4>)
    449e:	7813      	ldrb	r3, [r2, #0]
    44a0:	2120      	movs	r1, #32
    44a2:	430b      	orrs	r3, r1
    44a4:	7013      	strb	r3, [r2, #0]
	return SUCCESS;
    44a6:	2001      	movs	r0, #1
    44a8:	e7a1      	b.n	43ee <ETH_WriteStart+0x16>
    44aa:	46c0      	nop			; (mov r8, r8)
    44ac:	20004000 	.word	0x20004000
    44b0:	00003cad 	.word	0x00003cad
    44b4:	00001a23 	.word	0x00001a23
    44b8:	00003d4d 	.word	0x00003d4d
    44bc:	20003ffc 	.word	0x20003ffc
    44c0:	00006599 	.word	0x00006599
    44c4:	200008a0 	.word	0x200008a0

000044c8 <ETH_Send>:
{
    44c8:	b510      	push	{r4, lr}
	ENC28_Wcr16(J60_ETXNDL, TXSTART + TXPacketSize);
    44ca:	4b10      	ldr	r3, [pc, #64]	; (450c <ETH_Send+0x44>)
    44cc:	8819      	ldrh	r1, [r3, #0]
    44ce:	4b10      	ldr	r3, [pc, #64]	; (4510 <ETH_Send+0x48>)
    44d0:	469c      	mov	ip, r3
    44d2:	4461      	add	r1, ip
    44d4:	b289      	uxth	r1, r1
    44d6:	2006      	movs	r0, #6
    44d8:	4b0e      	ldr	r3, [pc, #56]	; (4514 <ETH_Send+0x4c>)
    44da:	4798      	blx	r3
	if (!ethData.up) {
    44dc:	4b0e      	ldr	r3, [pc, #56]	; (4518 <ETH_Send+0x50>)
    44de:	681b      	ldr	r3, [r3, #0]
    44e0:	075b      	lsls	r3, r3, #29
    44e2:	d401      	bmi.n	44e8 <ETH_Send+0x20>
		return LINK_NOT_FOUND;
    44e4:	2002      	movs	r0, #2
}
    44e6:	bd10      	pop	{r4, pc}
	if (!ethData.bufferBusy) {
    44e8:	4b0b      	ldr	r3, [pc, #44]	; (4518 <ETH_Send+0x50>)
    44ea:	681b      	ldr	r3, [r3, #0]
    44ec:	069b      	lsls	r3, r3, #26
    44ee:	d401      	bmi.n	44f4 <ETH_Send+0x2c>
		return BUFFER_BUSY;
    44f0:	2003      	movs	r0, #3
    44f2:	e7f8      	b.n	44e6 <ETH_Send+0x1e>
	ENC28_Bfs(J60_ECON1, 0x08); // start the transmission
    44f4:	2108      	movs	r1, #8
    44f6:	20ff      	movs	r0, #255	; 0xff
    44f8:	4b08      	ldr	r3, [pc, #32]	; (451c <ETH_Send+0x54>)
    44fa:	4798      	blx	r3
	ethData.bufferBusy = false;
    44fc:	4a06      	ldr	r2, [pc, #24]	; (4518 <ETH_Send+0x50>)
    44fe:	7813      	ldrb	r3, [r2, #0]
    4500:	2120      	movs	r1, #32
    4502:	438b      	bics	r3, r1
    4504:	7013      	strb	r3, [r2, #0]
	return SUCCESS;
    4506:	2001      	movs	r0, #1
    4508:	e7ed      	b.n	44e6 <ETH_Send+0x1e>
    450a:	46c0      	nop			; (mov r8, r8)
    450c:	20003ffc 	.word	0x20003ffc
    4510:	00001a23 	.word	0x00001a23
    4514:	00003d4d 	.word	0x00003d4d
    4518:	20004000 	.word	0x20004000
    451c:	00003cdd 	.word	0x00003cdd

00004520 <ETH_Dump>:
{
    4520:	b510      	push	{r4, lr}
	length = (rxPacketStatusVector.byteCount <= length) ? rxPacketStatusVector.byteCount : length;
    4522:	4b0b      	ldr	r3, [pc, #44]	; (4550 <ETH_Dump+0x30>)
    4524:	889b      	ldrh	r3, [r3, #4]
    4526:	1c1c      	adds	r4, r3, #0
    4528:	4283      	cmp	r3, r0
    452a:	d900      	bls.n	452e <ETH_Dump+0xe>
    452c:	1c04      	adds	r4, r0, #0
    452e:	b2a4      	uxth	r4, r4
	if (length) {
    4530:	2c00      	cmp	r4, #0
    4532:	d100      	bne.n	4536 <ETH_Dump+0x16>
}
    4534:	bd10      	pop	{r4, pc}
		newRXTail = ENC28_Rcr16(J60_ERDPTL);
    4536:	2000      	movs	r0, #0
    4538:	4b06      	ldr	r3, [pc, #24]	; (4554 <ETH_Dump+0x34>)
    453a:	4798      	blx	r3
		newRXTail += length;
    453c:	1820      	adds	r0, r4, r0
    453e:	b281      	uxth	r1, r0
		ENC28_Wcr16(J60_ERDPTL, newRXTail);
    4540:	2000      	movs	r0, #0
    4542:	4b05      	ldr	r3, [pc, #20]	; (4558 <ETH_Dump+0x38>)
    4544:	4798      	blx	r3
		rxPacketStatusVector.byteCount -= length;
    4546:	4a02      	ldr	r2, [pc, #8]	; (4550 <ETH_Dump+0x30>)
    4548:	8893      	ldrh	r3, [r2, #4]
    454a:	1b1c      	subs	r4, r3, r4
    454c:	8094      	strh	r4, [r2, #4]
}
    454e:	e7f1      	b.n	4534 <ETH_Dump+0x14>
    4550:	200008a0 	.word	0x200008a0
    4554:	00003de9 	.word	0x00003de9
    4558:	00003d4d 	.word	0x00003d4d

0000455c <ETH_Flush>:
{
    455c:	b510      	push	{r4, lr}
	ethData.pktReady = false;
    455e:	4a0e      	ldr	r2, [pc, #56]	; (4598 <ETH_Flush+0x3c>)
    4560:	7813      	ldrb	r3, [r2, #0]
    4562:	2102      	movs	r1, #2
    4564:	438b      	bics	r3, r1
    4566:	7013      	strb	r3, [r2, #0]
	if (nextPacketPointer == RXSTART)
    4568:	4b0c      	ldr	r3, [pc, #48]	; (459c <ETH_Flush+0x40>)
    456a:	8819      	ldrh	r1, [r3, #0]
    456c:	2900      	cmp	r1, #0
    456e:	d00e      	beq.n	458e <ETH_Flush+0x32>
		ENC28_Wcr16(J60_ERXRDPTL, nextPacketPointer - 1);
    4570:	3901      	subs	r1, #1
    4572:	b289      	uxth	r1, r1
    4574:	200c      	movs	r0, #12
    4576:	4b0a      	ldr	r3, [pc, #40]	; (45a0 <ETH_Flush+0x44>)
    4578:	4798      	blx	r3
	ENC28_Wcr16(J60_ERDPTL, nextPacketPointer);
    457a:	4b08      	ldr	r3, [pc, #32]	; (459c <ETH_Flush+0x40>)
    457c:	8819      	ldrh	r1, [r3, #0]
    457e:	2000      	movs	r0, #0
    4580:	4b07      	ldr	r3, [pc, #28]	; (45a0 <ETH_Flush+0x44>)
    4582:	4798      	blx	r3
	ENC28_Bfs(J60_ECON2, 0x40);
    4584:	2140      	movs	r1, #64	; 0x40
    4586:	20fe      	movs	r0, #254	; 0xfe
    4588:	4b06      	ldr	r3, [pc, #24]	; (45a4 <ETH_Flush+0x48>)
    458a:	4798      	blx	r3
}
    458c:	bd10      	pop	{r4, pc}
		ENC28_Wcr16(J60_ERXRDPTL, RXEND);
    458e:	4906      	ldr	r1, [pc, #24]	; (45a8 <ETH_Flush+0x4c>)
    4590:	200c      	movs	r0, #12
    4592:	4b03      	ldr	r3, [pc, #12]	; (45a0 <ETH_Flush+0x44>)
    4594:	4798      	blx	r3
    4596:	e7f0      	b.n	457a <ETH_Flush+0x1e>
    4598:	20004000 	.word	0x20004000
    459c:	200008a0 	.word	0x200008a0
    45a0:	00003d4d 	.word	0x00003d4d
    45a4:	00003cdd 	.word	0x00003cdd
    45a8:	00001a21 	.word	0x00001a21

000045ac <ETH_Insert>:
{
    45ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    45ae:	46d6      	mov	lr, sl
    45b0:	4647      	mov	r7, r8
    45b2:	b580      	push	{r7, lr}
    45b4:	b083      	sub	sp, #12
    45b6:	0006      	movs	r6, r0
    45b8:	000c      	movs	r4, r1
    45ba:	0015      	movs	r5, r2
	current_tx_pointer = ENC28_Rcr16(J60_EWRPTL);
    45bc:	2002      	movs	r0, #2
    45be:	4b15      	ldr	r3, [pc, #84]	; (4614 <ETH_Insert+0x68>)
    45c0:	4798      	blx	r3
    45c2:	9001      	str	r0, [sp, #4]
	ENC28_Wcr16(J60_EWRPTL, TXSTART + offset);
    45c4:	4b14      	ldr	r3, [pc, #80]	; (4618 <ETH_Insert+0x6c>)
    45c6:	469c      	mov	ip, r3
    45c8:	4465      	add	r5, ip
    45ca:	b2a9      	uxth	r1, r5
    45cc:	2002      	movs	r0, #2
    45ce:	4b13      	ldr	r3, [pc, #76]	; (461c <ETH_Insert+0x70>)
    45d0:	4798      	blx	r3
	while (len--) {
    45d2:	e010      	b.n	45f6 <ETH_Insert+0x4a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    45d4:	24c0      	movs	r4, #192	; 0xc0
    45d6:	05e4      	lsls	r4, r4, #23
    45d8:	2580      	movs	r5, #128	; 0x80
    45da:	042d      	lsls	r5, r5, #16
    45dc:	6165      	str	r5, [r4, #20]
		ETH_SPI_WRITE8(wbm_inst); // WBM command
    45de:	217a      	movs	r1, #122	; 0x7a
    45e0:	2001      	movs	r0, #1
    45e2:	4f0f      	ldr	r7, [pc, #60]	; (4620 <ETH_Insert+0x74>)
    45e4:	47b8      	blx	r7
		ETH_SPI_WRITE8(*data++);
    45e6:	1c73      	adds	r3, r6, #1
    45e8:	469a      	mov	sl, r3
    45ea:	7831      	ldrb	r1, [r6, #0]
    45ec:	2001      	movs	r0, #1
    45ee:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    45f0:	61a5      	str	r5, [r4, #24]
	while (len--) {
    45f2:	4644      	mov	r4, r8
		ETH_SPI_WRITE8(*data++);
    45f4:	4656      	mov	r6, sl
	while (len--) {
    45f6:	1e63      	subs	r3, r4, #1
    45f8:	b29b      	uxth	r3, r3
    45fa:	4698      	mov	r8, r3
    45fc:	2c00      	cmp	r4, #0
    45fe:	d1e9      	bne.n	45d4 <ETH_Insert+0x28>
	ENC28_Wcr16(J60_EWRPTL, current_tx_pointer);
    4600:	9901      	ldr	r1, [sp, #4]
    4602:	2002      	movs	r0, #2
    4604:	4b05      	ldr	r3, [pc, #20]	; (461c <ETH_Insert+0x70>)
    4606:	4798      	blx	r3
}
    4608:	b003      	add	sp, #12
    460a:	bc0c      	pop	{r2, r3}
    460c:	4690      	mov	r8, r2
    460e:	469a      	mov	sl, r3
    4610:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4612:	46c0      	nop			; (mov r8, r8)
    4614:	00003de9 	.word	0x00003de9
    4618:	00001a24 	.word	0x00001a24
    461c:	00003d4d 	.word	0x00003d4d
    4620:	00006599 	.word	0x00006599

00004624 <ETH_Copy>:
{
    4624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4626:	1e05      	subs	r5, r0, #0
    if (len==0) return SUCCESS; // nothing to copy
    4628:	d05a      	beq.n	46e0 <ETH_Copy+0xbc>
	timer = 2 * len;
    462a:	0044      	lsls	r4, r0, #1
    462c:	b2a4      	uxth	r4, r4
	while ((ENC28_Rcr8(J60_ECON1) & 0x20) != 0 && --timer)
    462e:	e000      	b.n	4632 <ETH_Copy+0xe>
		NOP(); // sit here until the DMAST bit is clear
    4630:	46c0      	nop			; (mov r8, r8)
	while ((ENC28_Rcr8(J60_ECON1) & 0x20) != 0 && --timer)
    4632:	20ff      	movs	r0, #255	; 0xff
    4634:	4b2b      	ldr	r3, [pc, #172]	; (46e4 <ETH_Copy+0xc0>)
    4636:	4798      	blx	r3
    4638:	0683      	lsls	r3, r0, #26
    463a:	d503      	bpl.n	4644 <ETH_Copy+0x20>
    463c:	3c01      	subs	r4, #1
    463e:	b2a4      	uxth	r4, r4
    4640:	2c00      	cmp	r4, #0
    4642:	d1f5      	bne.n	4630 <ETH_Copy+0xc>
	if ((ENC28_Rcr8(J60_ECON1) & 0x20) == 0) {
    4644:	20ff      	movs	r0, #255	; 0xff
    4646:	4b27      	ldr	r3, [pc, #156]	; (46e4 <ETH_Copy+0xc0>)
    4648:	4798      	blx	r3
    464a:	0683      	lsls	r3, r0, #26
    464c:	d501      	bpl.n	4652 <ETH_Copy+0x2e>
	return DMA_TIMEOUT;
    464e:	200c      	movs	r0, #12
}
    4650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_buffer_address = ENC28_Rcr16(J60_EWRPTL); // Current TX Write Pointer
    4652:	2002      	movs	r0, #2
    4654:	4b24      	ldr	r3, [pc, #144]	; (46e8 <ETH_Copy+0xc4>)
    4656:	4798      	blx	r3
    4658:	0006      	movs	r6, r0
		ENC28_Wcr16(J60_EDMADSTL, tx_buffer_address);
    465a:	0001      	movs	r1, r0
    465c:	2014      	movs	r0, #20
    465e:	4f23      	ldr	r7, [pc, #140]	; (46ec <ETH_Copy+0xc8>)
    4660:	47b8      	blx	r7
		ENC28_Wcr16(J60_EDMASTL, ethData.saveRDPT);
    4662:	4c23      	ldr	r4, [pc, #140]	; (46f0 <ETH_Copy+0xcc>)
    4664:	88a1      	ldrh	r1, [r4, #4]
    4666:	b289      	uxth	r1, r1
    4668:	2010      	movs	r0, #16
    466a:	47b8      	blx	r7
		tx_buffer_address += len;
    466c:	19ae      	adds	r6, r5, r6
    466e:	b2b6      	uxth	r6, r6
		temp_len = ethData.saveRDPT + len;
    4670:	88a1      	ldrh	r1, [r4, #4]
    4672:	1949      	adds	r1, r1, r5
    4674:	b289      	uxth	r1, r1
		if (temp_len > RXEND) {
    4676:	4b1f      	ldr	r3, [pc, #124]	; (46f4 <ETH_Copy+0xd0>)
    4678:	4299      	cmp	r1, r3
    467a:	d912      	bls.n	46a2 <ETH_Copy+0x7e>
			temp_len = temp_len - (RXEND) + RXSTART;
    467c:	4b1e      	ldr	r3, [pc, #120]	; (46f8 <ETH_Copy+0xd4>)
    467e:	469c      	mov	ip, r3
    4680:	4461      	add	r1, ip
    4682:	b289      	uxth	r1, r1
			ENC28_Wcr16(J60_EDMANDL, temp_len);
    4684:	2012      	movs	r0, #18
    4686:	4b19      	ldr	r3, [pc, #100]	; (46ec <ETH_Copy+0xc8>)
    4688:	4798      	blx	r3
		ENC28_Bfc(J60_ECON1, 0x10);
    468a:	2110      	movs	r1, #16
    468c:	20ff      	movs	r0, #255	; 0xff
    468e:	4b1b      	ldr	r3, [pc, #108]	; (46fc <ETH_Copy+0xd8>)
    4690:	4798      	blx	r3
		ENC28_Bfs(J60_ECON1, 0x20);
    4692:	2120      	movs	r1, #32
    4694:	20ff      	movs	r0, #255	; 0xff
    4696:	4b1a      	ldr	r3, [pc, #104]	; (4700 <ETH_Copy+0xdc>)
    4698:	4798      	blx	r3
		timer = 40 * len;
    469a:	2428      	movs	r4, #40	; 0x28
    469c:	436c      	muls	r4, r5
    469e:	b2a4      	uxth	r4, r4
		while ((ENC28_Rcr8(J60_ECON1) & 0x20) != 0 && --timer)
    46a0:	e004      	b.n	46ac <ETH_Copy+0x88>
			ENC28_Wcr16(J60_EDMANDL, temp_len);
    46a2:	2012      	movs	r0, #18
    46a4:	4b11      	ldr	r3, [pc, #68]	; (46ec <ETH_Copy+0xc8>)
    46a6:	4798      	blx	r3
    46a8:	e7ef      	b.n	468a <ETH_Copy+0x66>
			NOP(); // sit here until the DMAST bit is clear
    46aa:	46c0      	nop			; (mov r8, r8)
		while ((ENC28_Rcr8(J60_ECON1) & 0x20) != 0 && --timer)
    46ac:	20ff      	movs	r0, #255	; 0xff
    46ae:	4b0d      	ldr	r3, [pc, #52]	; (46e4 <ETH_Copy+0xc0>)
    46b0:	4798      	blx	r3
    46b2:	0683      	lsls	r3, r0, #26
    46b4:	d503      	bpl.n	46be <ETH_Copy+0x9a>
    46b6:	3c01      	subs	r4, #1
    46b8:	b2a4      	uxth	r4, r4
    46ba:	2c00      	cmp	r4, #0
    46bc:	d1f5      	bne.n	46aa <ETH_Copy+0x86>
		if ((ENC28_Rcr8(J60_ECON1) & 0x20) == 0) {
    46be:	20ff      	movs	r0, #255	; 0xff
    46c0:	4b08      	ldr	r3, [pc, #32]	; (46e4 <ETH_Copy+0xc0>)
    46c2:	4798      	blx	r3
    46c4:	0683      	lsls	r3, r0, #26
    46c6:	d501      	bpl.n	46cc <ETH_Copy+0xa8>
	return DMA_TIMEOUT;
    46c8:	200c      	movs	r0, #12
    46ca:	e7c1      	b.n	4650 <ETH_Copy+0x2c>
			ENC28_Wcr16(J60_EWRPTL, tx_buffer_address);
    46cc:	0031      	movs	r1, r6
    46ce:	2002      	movs	r0, #2
    46d0:	4b06      	ldr	r3, [pc, #24]	; (46ec <ETH_Copy+0xc8>)
    46d2:	4798      	blx	r3
			TXPacketSize += len; // fix the packet length
    46d4:	4b0b      	ldr	r3, [pc, #44]	; (4704 <ETH_Copy+0xe0>)
    46d6:	881a      	ldrh	r2, [r3, #0]
    46d8:	18ad      	adds	r5, r5, r2
    46da:	801d      	strh	r5, [r3, #0]
			return SUCCESS;
    46dc:	2001      	movs	r0, #1
    46de:	e7b7      	b.n	4650 <ETH_Copy+0x2c>
    if (len==0) return SUCCESS; // nothing to copy
    46e0:	2001      	movs	r0, #1
    46e2:	e7b5      	b.n	4650 <ETH_Copy+0x2c>
    46e4:	00003cad 	.word	0x00003cad
    46e8:	00003de9 	.word	0x00003de9
    46ec:	00003d4d 	.word	0x00003d4d
    46f0:	20004000 	.word	0x20004000
    46f4:	00001a21 	.word	0x00001a21
    46f8:	ffffe5df 	.word	0xffffe5df
    46fc:	00003e49 	.word	0x00003e49
    4700:	00003cdd 	.word	0x00003cdd
    4704:	20003ffc 	.word	0x20003ffc

00004708 <ETH_TxComputeChecksum>:
 * @param position
 * @param length
 * @return
 */
uint16_t ETH_TxComputeChecksum(uint16_t position, uint16_t length, uint16_t seed)
{
    4708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    470a:	0006      	movs	r6, r0
    470c:	000f      	movs	r7, r1
    470e:	0014      	movs	r4, r2
	uint32_t cksm = 0;

	//    cksm = seed;
	position += 1; /* sizeof(Control_Byte) */
    4710:	1c45      	adds	r5, r0, #1
    4712:	b2ad      	uxth	r5, r5

	while ((ENC28_Rcr8(J60_ECON1) & 0x20) != 0)
    4714:	20ff      	movs	r0, #255	; 0xff
    4716:	4b1e      	ldr	r3, [pc, #120]	; (4790 <ETH_TxComputeChecksum+0x88>)
    4718:	4798      	blx	r3
    471a:	0683      	lsls	r3, r0, #26
    471c:	d4fa      	bmi.n	4714 <ETH_TxComputeChecksum+0xc>
		; // sit here until the DMAST bit is clear

	ENC28_Wcr16(J60_EDMASTL, (TXSTART + position));
    471e:	4b1d      	ldr	r3, [pc, #116]	; (4794 <ETH_TxComputeChecksum+0x8c>)
    4720:	469c      	mov	ip, r3
    4722:	4466      	add	r6, ip
    4724:	b2b1      	uxth	r1, r6
    4726:	2010      	movs	r0, #16
    4728:	4e1b      	ldr	r6, [pc, #108]	; (4798 <ETH_TxComputeChecksum+0x90>)
    472a:	47b0      	blx	r6
	ENC28_Wcr16(J60_EDMANDL, TXSTART + position + (length - 1));
    472c:	19ed      	adds	r5, r5, r7
    472e:	b2a9      	uxth	r1, r5
    4730:	4b1a      	ldr	r3, [pc, #104]	; (479c <ETH_TxComputeChecksum+0x94>)
    4732:	469c      	mov	ip, r3
    4734:	4461      	add	r1, ip
    4736:	b289      	uxth	r1, r1
    4738:	2012      	movs	r0, #18
    473a:	47b0      	blx	r6

	if (!(ENC28_Rcr8(J60_ECON1) & 0x10)) // Make sure CSUMEN is not set already
    473c:	20ff      	movs	r0, #255	; 0xff
    473e:	4b14      	ldr	r3, [pc, #80]	; (4790 <ETH_TxComputeChecksum+0x88>)
    4740:	4798      	blx	r3
    4742:	06c3      	lsls	r3, r0, #27
    4744:	d502      	bpl.n	474c <ETH_TxComputeChecksum+0x44>
	uint32_t cksm = 0;
    4746:	2300      	movs	r3, #0
				cksm = (cksm & 0x0FFFF) + (cksm >> 16);
			}
		}
		cksm = htons(cksm);
	}
	return cksm;
    4748:	b298      	uxth	r0, r3
}
    474a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ENC28_Bfs(J60_ECON1, 0x30);
    474c:	2130      	movs	r1, #48	; 0x30
    474e:	20ff      	movs	r0, #255	; 0xff
    4750:	4b13      	ldr	r3, [pc, #76]	; (47a0 <ETH_TxComputeChecksum+0x98>)
    4752:	4798      	blx	r3
		while ((ENC28_Rcr8(J60_ECON1) & 0x20) != 0)
    4754:	20ff      	movs	r0, #255	; 0xff
    4756:	4b0e      	ldr	r3, [pc, #56]	; (4790 <ETH_TxComputeChecksum+0x88>)
    4758:	4798      	blx	r3
    475a:	0683      	lsls	r3, r0, #26
    475c:	d4fa      	bmi.n	4754 <ETH_TxComputeChecksum+0x4c>
		ENC28_Bfc(J60_ECON1, 0x10);
    475e:	2110      	movs	r1, #16
    4760:	20ff      	movs	r0, #255	; 0xff
    4762:	4b10      	ldr	r3, [pc, #64]	; (47a4 <ETH_TxComputeChecksum+0x9c>)
    4764:	4798      	blx	r3
		cksm = ENC28_Rcr16(J60_EDMACSL);
    4766:	2016      	movs	r0, #22
    4768:	4b0f      	ldr	r3, [pc, #60]	; (47a8 <ETH_TxComputeChecksum+0xa0>)
    476a:	4798      	blx	r3
    476c:	0003      	movs	r3, r0
		if (seed) {
    476e:	2c00      	cmp	r4, #0
    4770:	d008      	beq.n	4784 <ETH_TxComputeChecksum+0x7c>
			seed = ~(seed);
    4772:	43e3      	mvns	r3, r4
    4774:	b29b      	uxth	r3, r3
			cksm += seed;
    4776:	18c3      	adds	r3, r0, r3
			while (cksm >> 16) {
    4778:	e002      	b.n	4780 <ETH_TxComputeChecksum+0x78>
				cksm = (cksm & 0x0FFFF) + (cksm >> 16);
    477a:	041b      	lsls	r3, r3, #16
    477c:	0c1b      	lsrs	r3, r3, #16
    477e:	18d3      	adds	r3, r2, r3
			while (cksm >> 16) {
    4780:	0c1a      	lsrs	r2, r3, #16
    4782:	d1fa      	bne.n	477a <ETH_TxComputeChecksum+0x72>
		cksm = htons(cksm);
    4784:	b298      	uxth	r0, r3
    4786:	0a00      	lsrs	r0, r0, #8
    4788:	061b      	lsls	r3, r3, #24
    478a:	0c1b      	lsrs	r3, r3, #16
    478c:	4303      	orrs	r3, r0
    478e:	e7db      	b.n	4748 <ETH_TxComputeChecksum+0x40>
    4790:	00003cad 	.word	0x00003cad
    4794:	00001a24 	.word	0x00001a24
    4798:	00003d4d 	.word	0x00003d4d
    479c:	00001a22 	.word	0x00001a22
    47a0:	00003cdd 	.word	0x00003cdd
    47a4:	00003e49 	.word	0x00003e49
    47a8:	00003de9 	.word	0x00003de9

000047ac <ETH_RxComputeChecksum>:
 * @param len
 * @param seed
 * @return
 */
uint16_t ETH_RxComputeChecksum(uint16_t len, uint16_t seed)
{
    47ac:	b570      	push	{r4, r5, r6, lr}
    47ae:	0004      	movs	r4, r0
    47b0:	000e      	movs	r6, r1
	uint16_t rxptr;
	uint32_t cksm;

	// Save the read pointer starting address
	rxptr = ENC28_Rcr16(J60_ERDPTL);
    47b2:	2000      	movs	r0, #0
    47b4:	4b09      	ldr	r3, [pc, #36]	; (47dc <ETH_RxComputeChecksum+0x30>)
    47b6:	4798      	blx	r3
    47b8:	0005      	movs	r5, r0
	;

	cksm = ETH_ComputeChecksum(len, seed);
    47ba:	0031      	movs	r1, r6
    47bc:	0020      	movs	r0, r4
    47be:	4b08      	ldr	r3, [pc, #32]	; (47e0 <ETH_RxComputeChecksum+0x34>)
    47c0:	4798      	blx	r3
    47c2:	0004      	movs	r4, r0

	// Restore old read pointer location
	ENC28_Wcr16(J60_ERDPTL, rxptr);
    47c4:	0029      	movs	r1, r5
    47c6:	2000      	movs	r0, #0
    47c8:	4b06      	ldr	r3, [pc, #24]	; (47e4 <ETH_RxComputeChecksum+0x38>)
    47ca:	4798      	blx	r3

	// Return the resulting checksum
	return ((cksm & 0xFF00) >> 8) | ((cksm & 0x00FF) << 8);
    47cc:	0a23      	lsrs	r3, r4, #8
    47ce:	20ff      	movs	r0, #255	; 0xff
    47d0:	4003      	ands	r3, r0
    47d2:	0224      	lsls	r4, r4, #8
    47d4:	b2a0      	uxth	r0, r4
    47d6:	4318      	orrs	r0, r3
}
    47d8:	bd70      	pop	{r4, r5, r6, pc}
    47da:	46c0      	nop			; (mov r8, r8)
    47dc:	00003de9 	.word	0x00003de9
    47e0:	000041b1 	.word	0x000041b1
    47e4:	00003d4d 	.word	0x00003d4d

000047e8 <ETH_GetMAC>:
/**
 * To get the MAC address
 * @param mac
 */
void ETH_GetMAC(uint8_t *macAddr)
{
    47e8:	b510      	push	{r4, lr}
#if 1

    // RNG: MAC registers are flakey when clocked < 8MHz... since MAC is tied to serial, over-ride with application set MAC
    memcpy(macAddr, (uint8_t*)&eth_MAC.mac_array[0], 6);
    47ea:	2206      	movs	r2, #6
    47ec:	4902      	ldr	r1, [pc, #8]	; (47f8 <ETH_GetMAC+0x10>)
    47ee:	3108      	adds	r1, #8
    47f0:	4b02      	ldr	r3, [pc, #8]	; (47fc <ETH_GetMAC+0x14>)
    47f2:	4798      	blx	r3
	*macAddr++ = ENC28_Rcr8(J60_MAADR4);
	*macAddr++ = ENC28_Rcr8(J60_MAADR5);
	*macAddr++ = ENC28_Rcr8(J60_MAADR6);

#endif
}
    47f4:	bd10      	pop	{r4, pc}
    47f6:	46c0      	nop			; (mov r8, r8)
    47f8:	200008a0 	.word	0x200008a0
    47fc:	0000776b 	.word	0x0000776b

00004800 <ETH_SaveRDPT>:
	ENC28_Wcr8(J60_MAADR5, *macAddr++);
	ENC28_Wcr8(J60_MAADR6, *macAddr++);
}

void ETH_SaveRDPT(void)
{
    4800:	b510      	push	{r4, lr}
	ethData.saveRDPT = ENC28_Rcr16(J60_ERDPTL);
    4802:	2000      	movs	r0, #0
    4804:	4b02      	ldr	r3, [pc, #8]	; (4810 <ETH_SaveRDPT+0x10>)
    4806:	4798      	blx	r3
    4808:	4b02      	ldr	r3, [pc, #8]	; (4814 <ETH_SaveRDPT+0x14>)
    480a:	8098      	strh	r0, [r3, #4]
}
    480c:	bd10      	pop	{r4, pc}
    480e:	46c0      	nop			; (mov r8, r8)
    4810:	00003de9 	.word	0x00003de9
    4814:	20004000 	.word	0x20004000

00004818 <ETH_ResetByteCount>:

void ETH_ResetByteCount(void)
{
    4818:	b510      	push	{r4, lr}
	ethData.saveWRPT = ENC28_Rcr16(J60_EWRPTL);
    481a:	2002      	movs	r0, #2
    481c:	4b02      	ldr	r3, [pc, #8]	; (4828 <ETH_ResetByteCount+0x10>)
    481e:	4798      	blx	r3
    4820:	4b02      	ldr	r3, [pc, #8]	; (482c <ETH_ResetByteCount+0x14>)
    4822:	80d8      	strh	r0, [r3, #6]
}
    4824:	bd10      	pop	{r4, pc}
    4826:	46c0      	nop			; (mov r8, r8)
    4828:	00003de9 	.word	0x00003de9
    482c:	20004000 	.word	0x20004000

00004830 <ETH_GetByteCount>:

uint16_t ETH_GetByteCount(void)
{
    4830:	b510      	push	{r4, lr}
	uint16_t wptr;

	wptr = ENC28_Rcr16(J60_EWRPTL);
    4832:	2002      	movs	r0, #2
    4834:	4b03      	ldr	r3, [pc, #12]	; (4844 <ETH_GetByteCount+0x14>)
    4836:	4798      	blx	r3

	return (wptr - ethData.saveWRPT);
    4838:	4b03      	ldr	r3, [pc, #12]	; (4848 <ETH_GetByteCount+0x18>)
    483a:	88db      	ldrh	r3, [r3, #6]
    483c:	1ac0      	subs	r0, r0, r3
    483e:	b280      	uxth	r0, r0
}
    4840:	bd10      	pop	{r4, pc}
    4842:	46c0      	nop			; (mov r8, r8)
    4844:	00003de9 	.word	0x00003de9
    4848:	20004000 	.word	0x20004000

0000484c <ETH_InitMAC>:
/**This function was added by Eyedro to set the MAC address BEFORE initializing the stack and performing DHCP requests
 *
 * @param pau8MAC
 *      MAC address to use
 */
void ETH_InitMAC(uint8_t *pau8MAC) {
    484c:	b510      	push	{r4, lr}
    484e:	0001      	movs	r1, r0
    memcpy((uint8_t*)&eth_MAC.mac_array[0], pau8MAC, 6);
    4850:	2206      	movs	r2, #6
    4852:	4802      	ldr	r0, [pc, #8]	; (485c <ETH_InitMAC+0x10>)
    4854:	3008      	adds	r0, #8
    4856:	4b02      	ldr	r3, [pc, #8]	; (4860 <ETH_InitMAC+0x14>)
    4858:	4798      	blx	r3
}
    485a:	bd10      	pop	{r4, pc}
    485c:	200008a0 	.word	0x200008a0
    4860:	0000776b 	.word	0x0000776b

00004864 <ARPV4_Init>:
 * ARP Initialization
 */

void ARPV4_Init(void)
{
	for (uint8_t x = 0; x < sizeof(arpMap); x++)
    4864:	2300      	movs	r3, #0
    4866:	e005      	b.n	4874 <ARPV4_Init+0x10>
		((char *)arpMap)[x] = 0;
    4868:	4a04      	ldr	r2, [pc, #16]	; (487c <ARPV4_Init+0x18>)
    486a:	189a      	adds	r2, r3, r2
    486c:	2100      	movs	r1, #0
    486e:	7011      	strb	r1, [r2, #0]
	for (uint8_t x = 0; x < sizeof(arpMap); x++)
    4870:	3301      	adds	r3, #1
    4872:	b2db      	uxtb	r3, r3
    4874:	2b67      	cmp	r3, #103	; 0x67
    4876:	d9f7      	bls.n	4868 <ARPV4_Init+0x4>
}
    4878:	4770      	bx	lr
    487a:	46c0      	nop			; (mov r8, r8)
    487c:	2000400c 	.word	0x2000400c

00004880 <ARPV4_Packet>:
 * ARP Packet received
 * @return
 */

error_msg ARPV4_Packet(void)
{
    4880:	b530      	push	{r4, r5, lr}
    4882:	b089      	sub	sp, #36	; 0x24
	uint16_t    length;
	error_msg   ret;

	ret = ERROR;

	length = ETH_ReadBlock((char *)&header, sizeof(arpHeader_t));
    4884:	211c      	movs	r1, #28
    4886:	a801      	add	r0, sp, #4
    4888:	4b5c      	ldr	r3, [pc, #368]	; (49fc <ARPV4_Packet+0x17c>)
    488a:	4798      	blx	r3
	if (length == sizeof(arpHeader_t)) {
    488c:	281c      	cmp	r0, #28
    488e:	d02d      	beq.n	48ec <ARPV4_Packet+0x6c>
	ret = ERROR;
    4890:	2000      	movs	r0, #0
		} else {
			ret = ARP_IP_NOT_MATCHED;
		}
	}
	return ret;
}
    4892:	b009      	add	sp, #36	; 0x24
    4894:	bd30      	pop	{r4, r5, pc}
			entryPointer++;
    4896:	300d      	adds	r0, #13
		for (uint8_t x = ARP_MAP_SIZE; x > 0; x--) {
    4898:	3c01      	subs	r4, #1
    489a:	b2e4      	uxtb	r4, r4
    489c:	2c00      	cmp	r4, #0
    489e:	d01f      	beq.n	48e0 <ARPV4_Packet+0x60>
			if ((header.spa == entryPointer->ipAddress) && (header.ptype == entryPointer->protocolType)) {
    48a0:	ab01      	add	r3, sp, #4
    48a2:	89d9      	ldrh	r1, [r3, #14]
    48a4:	8a1a      	ldrh	r2, [r3, #16]
    48a6:	0412      	lsls	r2, r2, #16
    48a8:	430a      	orrs	r2, r1
    48aa:	7983      	ldrb	r3, [r0, #6]
    48ac:	79c1      	ldrb	r1, [r0, #7]
    48ae:	0209      	lsls	r1, r1, #8
    48b0:	4319      	orrs	r1, r3
    48b2:	7a03      	ldrb	r3, [r0, #8]
    48b4:	041b      	lsls	r3, r3, #16
    48b6:	4319      	orrs	r1, r3
    48b8:	7a43      	ldrb	r3, [r0, #9]
    48ba:	061b      	lsls	r3, r3, #24
    48bc:	430b      	orrs	r3, r1
    48be:	429a      	cmp	r2, r3
    48c0:	d1e9      	bne.n	4896 <ARPV4_Packet+0x16>
    48c2:	ab01      	add	r3, sp, #4
    48c4:	885a      	ldrh	r2, [r3, #2]
    48c6:	7a81      	ldrb	r1, [r0, #10]
    48c8:	7ac3      	ldrb	r3, [r0, #11]
    48ca:	021b      	lsls	r3, r3, #8
    48cc:	430b      	orrs	r3, r1
    48ce:	429a      	cmp	r2, r3
    48d0:	d1e1      	bne.n	4896 <ARPV4_Packet+0x16>
				entryPointer->age          = 0; // reset the age
    48d2:	2300      	movs	r3, #0
    48d4:	7303      	strb	r3, [r0, #12]
				entryPointer->macAddress.s = header.sha.s;
    48d6:	2206      	movs	r2, #6
    48d8:	a903      	add	r1, sp, #12
    48da:	4b49      	ldr	r3, [pc, #292]	; (4a00 <ARPV4_Packet+0x180>)
    48dc:	4798      	blx	r3
				mergeFlag                  = true;
    48de:	2401      	movs	r4, #1
		if (ipv4Address
    48e0:	4b48      	ldr	r3, [pc, #288]	; (4a04 <ARPV4_Packet+0x184>)
    48e2:	681a      	ldr	r2, [r3, #0]
    48e4:	2a00      	cmp	r2, #0
    48e6:	d104      	bne.n	48f2 <ARPV4_Packet+0x72>
			ret = ARP_IP_NOT_MATCHED;
    48e8:	200e      	movs	r0, #14
    48ea:	e7d2      	b.n	4892 <ARPV4_Packet+0x12>
    48ec:	2408      	movs	r4, #8
    48ee:	4846      	ldr	r0, [pc, #280]	; (4a08 <ARPV4_Packet+0x188>)
    48f0:	e7d4      	b.n	489c <ARPV4_Packet+0x1c>
		        == (((header.tpa >> 24) & 0xff) | ((header.tpa << 8) & 0xff0000) | ((header.tpa >> 8) & 0xff00)
    48f2:	9907      	ldr	r1, [sp, #28]
    48f4:	0e0b      	lsrs	r3, r1, #24
    48f6:	0208      	lsls	r0, r1, #8
    48f8:	25ff      	movs	r5, #255	; 0xff
    48fa:	042d      	lsls	r5, r5, #16
    48fc:	4028      	ands	r0, r5
    48fe:	4303      	orrs	r3, r0
    4900:	0a08      	lsrs	r0, r1, #8
    4902:	25ff      	movs	r5, #255	; 0xff
    4904:	022d      	lsls	r5, r5, #8
    4906:	4028      	ands	r0, r5
    4908:	4303      	orrs	r3, r0
		            | ((header.tpa << 24) & 0xff000000)))) {
    490a:	0609      	lsls	r1, r1, #24
    490c:	430b      	orrs	r3, r1
		    && (ipv4Address
    490e:	429a      	cmp	r2, r3
    4910:	d001      	beq.n	4916 <ARPV4_Packet+0x96>
			ret = ARP_IP_NOT_MATCHED;
    4912:	200e      	movs	r0, #14
    4914:	e7bd      	b.n	4892 <ARPV4_Packet+0x12>
			if (!mergeFlag) {
    4916:	2c00      	cmp	r4, #0
    4918:	d131      	bne.n	497e <ARPV4_Packet+0xfe>
    491a:	2308      	movs	r3, #8
    491c:	4a3a      	ldr	r2, [pc, #232]	; (4a08 <ARPV4_Packet+0x188>)
    491e:	0014      	movs	r4, r2
    4920:	e002      	b.n	4928 <ARPV4_Packet+0xa8>
					arpPtr++;
    4922:	320d      	adds	r2, #13
				for (uint8_t x = ARP_MAP_SIZE; x != 0; x--) {
    4924:	3b01      	subs	r3, #1
    4926:	b2db      	uxtb	r3, r3
    4928:	2b00      	cmp	r3, #0
    492a:	d005      	beq.n	4938 <ARPV4_Packet+0xb8>
					if (entryPointer->age < arpPtr->age) {
    492c:	7b20      	ldrb	r0, [r4, #12]
    492e:	7b11      	ldrb	r1, [r2, #12]
    4930:	4288      	cmp	r0, r1
    4932:	d2f6      	bcs.n	4922 <ARPV4_Packet+0xa2>
						entryPointer = arpPtr;
    4934:	0014      	movs	r4, r2
    4936:	e7f4      	b.n	4922 <ARPV4_Packet+0xa2>
				entryPointer->age          = 0;
    4938:	7323      	strb	r3, [r4, #12]
				entryPointer->macAddress.s = header.sha.s;
    493a:	ad01      	add	r5, sp, #4
    493c:	2206      	movs	r2, #6
    493e:	a903      	add	r1, sp, #12
    4940:	0020      	movs	r0, r4
    4942:	4b2f      	ldr	r3, [pc, #188]	; (4a00 <ARPV4_Packet+0x180>)
    4944:	4798      	blx	r3
				entryPointer->ipAddress    = ntohl(header.spa);
    4946:	89eb      	ldrh	r3, [r5, #14]
    4948:	8a2a      	ldrh	r2, [r5, #16]
    494a:	0412      	lsls	r2, r2, #16
    494c:	431a      	orrs	r2, r3
    494e:	0e13      	lsrs	r3, r2, #24
    4950:	0a11      	lsrs	r1, r2, #8
    4952:	20ff      	movs	r0, #255	; 0xff
    4954:	0200      	lsls	r0, r0, #8
    4956:	4001      	ands	r1, r0
    4958:	430b      	orrs	r3, r1
    495a:	0211      	lsls	r1, r2, #8
    495c:	20ff      	movs	r0, #255	; 0xff
    495e:	0400      	lsls	r0, r0, #16
    4960:	4001      	ands	r1, r0
    4962:	430b      	orrs	r3, r1
    4964:	0612      	lsls	r2, r2, #24
    4966:	4313      	orrs	r3, r2
    4968:	71a3      	strb	r3, [r4, #6]
    496a:	0a19      	lsrs	r1, r3, #8
    496c:	71e1      	strb	r1, [r4, #7]
    496e:	0c19      	lsrs	r1, r3, #16
    4970:	7221      	strb	r1, [r4, #8]
    4972:	0e1b      	lsrs	r3, r3, #24
    4974:	7263      	strb	r3, [r4, #9]
				entryPointer->protocolType = header.ptype;
    4976:	886b      	ldrh	r3, [r5, #2]
    4978:	72a3      	strb	r3, [r4, #10]
    497a:	0a1b      	lsrs	r3, r3, #8
    497c:	72e3      	strb	r3, [r4, #11]
			if (header.oper == ntohs(ARP_REQUEST)) {
    497e:	ab01      	add	r3, sp, #4
    4980:	88da      	ldrh	r2, [r3, #6]
    4982:	2380      	movs	r3, #128	; 0x80
    4984:	005b      	lsls	r3, r3, #1
    4986:	429a      	cmp	r2, r3
    4988:	d001      	beq.n	498e <ARPV4_Packet+0x10e>
	ret = ERROR;
    498a:	2000      	movs	r0, #0
    498c:	e781      	b.n	4892 <ARPV4_Packet+0x12>
				ret = ETH_WriteStart(&header.sha, ETHERTYPE_ARP);
    498e:	491f      	ldr	r1, [pc, #124]	; (4a0c <ARPV4_Packet+0x18c>)
    4990:	a803      	add	r0, sp, #12
    4992:	4b1f      	ldr	r3, [pc, #124]	; (4a10 <ARPV4_Packet+0x190>)
    4994:	4798      	blx	r3
				if (ret == SUCCESS) {
    4996:	2801      	cmp	r0, #1
    4998:	d000      	beq.n	499c <ARPV4_Packet+0x11c>
    499a:	e77a      	b.n	4892 <ARPV4_Packet+0x12>
					header.tha.s = header.sha.s;
    499c:	ac01      	add	r4, sp, #4
    499e:	2206      	movs	r2, #6
    49a0:	a903      	add	r1, sp, #12
    49a2:	3015      	adds	r0, #21
    49a4:	4468      	add	r0, sp
    49a6:	4b16      	ldr	r3, [pc, #88]	; (4a00 <ARPV4_Packet+0x180>)
    49a8:	4798      	blx	r3
					ETH_GetMAC(header.sha.mac_array);
    49aa:	a803      	add	r0, sp, #12
    49ac:	4b19      	ldr	r3, [pc, #100]	; (4a14 <ARPV4_Packet+0x194>)
    49ae:	4798      	blx	r3
					header.tpa  = header.spa;
    49b0:	89e2      	ldrh	r2, [r4, #14]
    49b2:	8a23      	ldrh	r3, [r4, #16]
    49b4:	041b      	lsls	r3, r3, #16
    49b6:	4313      	orrs	r3, r2
    49b8:	61a3      	str	r3, [r4, #24]
					header.spa  = htonl(ipv4Address);
    49ba:	4b12      	ldr	r3, [pc, #72]	; (4a04 <ARPV4_Packet+0x184>)
    49bc:	681a      	ldr	r2, [r3, #0]
    49be:	0e13      	lsrs	r3, r2, #24
    49c0:	0a11      	lsrs	r1, r2, #8
    49c2:	20ff      	movs	r0, #255	; 0xff
    49c4:	0200      	lsls	r0, r0, #8
    49c6:	4001      	ands	r1, r0
    49c8:	430b      	orrs	r3, r1
    49ca:	0211      	lsls	r1, r2, #8
    49cc:	20ff      	movs	r0, #255	; 0xff
    49ce:	0400      	lsls	r0, r0, #16
    49d0:	4001      	ands	r1, r0
    49d2:	430b      	orrs	r3, r1
    49d4:	0612      	lsls	r2, r2, #24
    49d6:	4313      	orrs	r3, r2
    49d8:	2112      	movs	r1, #18
    49da:	4469      	add	r1, sp
    49dc:	041a      	lsls	r2, r3, #16
    49de:	0c12      	lsrs	r2, r2, #16
    49e0:	800a      	strh	r2, [r1, #0]
    49e2:	0c1b      	lsrs	r3, r3, #16
    49e4:	804b      	strh	r3, [r1, #2]
					header.oper = htons(ARP_REPLY);
    49e6:	2380      	movs	r3, #128	; 0x80
    49e8:	009b      	lsls	r3, r3, #2
    49ea:	80e3      	strh	r3, [r4, #6]
					ETH_WriteBlock((char *)&header, sizeof(header));
    49ec:	211c      	movs	r1, #28
    49ee:	0020      	movs	r0, r4
    49f0:	4b09      	ldr	r3, [pc, #36]	; (4a18 <ARPV4_Packet+0x198>)
    49f2:	4798      	blx	r3
					ret = ETH_Send(); // remember this could fail to send.
    49f4:	4b09      	ldr	r3, [pc, #36]	; (4a1c <ARPV4_Packet+0x19c>)
    49f6:	4798      	blx	r3
    49f8:	e74b      	b.n	4892 <ARPV4_Packet+0x12>
    49fa:	46c0      	nop			; (mov r8, r8)
    49fc:	00004285 	.word	0x00004285
    4a00:	0000776b 	.word	0x0000776b
    4a04:	20004094 	.word	0x20004094
    4a08:	2000400c 	.word	0x2000400c
    4a0c:	00000806 	.word	0x00000806
    4a10:	000043d9 	.word	0x000043d9
    4a14:	000047e9 	.word	0x000047e9
    4a18:	00004389 	.word	0x00004389
    4a1c:	000044c9 	.word	0x000044c9

00004a20 <ARPV4_Update>:
 */

void ARPV4_Update(void) // call me every 10 seconds or so and I will age the arp table.
{
	arpMap_t *entryPointer = arpMap;
	for (uint8_t x = 0; x < ARP_MAP_SIZE; x++) {
    4a20:	2300      	movs	r3, #0
	arpMap_t *entryPointer = arpMap;
    4a22:	4a05      	ldr	r2, [pc, #20]	; (4a38 <ARPV4_Update+0x18>)
	for (uint8_t x = 0; x < ARP_MAP_SIZE; x++) {
    4a24:	e005      	b.n	4a32 <ARPV4_Update+0x12>
		entryPointer->age++;
    4a26:	7b11      	ldrb	r1, [r2, #12]
    4a28:	3101      	adds	r1, #1
    4a2a:	7311      	strb	r1, [r2, #12]
		entryPointer++;
    4a2c:	320d      	adds	r2, #13
	for (uint8_t x = 0; x < ARP_MAP_SIZE; x++) {
    4a2e:	3301      	adds	r3, #1
    4a30:	b2db      	uxtb	r3, r3
    4a32:	2b07      	cmp	r3, #7
    4a34:	d9f7      	bls.n	4a26 <ARPV4_Update+0x6>
	}
}
    4a36:	4770      	bx	lr
    4a38:	2000400c 	.word	0x2000400c

00004a3c <ARPV4_Request>:
 * ARP send Request
 * @param dest_address
 * @return
 */
error_msg ARPV4_Request(uint32_t destAddress)
{
    4a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a3e:	b089      	sub	sp, #36	; 0x24
    4a40:	0005      	movs	r5, r0
	error_msg ret;

	ret = ERROR;

	arpHeader_t header;
	header.htype = htons(1);
    4a42:	ac01      	add	r4, sp, #4
    4a44:	2380      	movs	r3, #128	; 0x80
    4a46:	005b      	lsls	r3, r3, #1
    4a48:	8023      	strh	r3, [r4, #0]
	header.ptype = htons(0x0800);
    4a4a:	2208      	movs	r2, #8
    4a4c:	8062      	strh	r2, [r4, #2]
	header.hlen  = 6;
    4a4e:	3a02      	subs	r2, #2
    4a50:	7122      	strb	r2, [r4, #4]
	header.plen  = 4;
    4a52:	3a02      	subs	r2, #2
    4a54:	7162      	strb	r2, [r4, #5]
	header.oper  = htons(ARP_REQUEST);
    4a56:	80e3      	strh	r3, [r4, #6]
	ETH_GetMAC(header.sha.mac_array);
    4a58:	a803      	add	r0, sp, #12
    4a5a:	4b1d      	ldr	r3, [pc, #116]	; (4ad0 <ARPV4_Request+0x94>)
    4a5c:	4798      	blx	r3
	header.spa         = htonl(ipv4Address);
    4a5e:	4b1d      	ldr	r3, [pc, #116]	; (4ad4 <ARPV4_Request+0x98>)
    4a60:	681a      	ldr	r2, [r3, #0]
    4a62:	0e13      	lsrs	r3, r2, #24
    4a64:	0a11      	lsrs	r1, r2, #8
    4a66:	26ff      	movs	r6, #255	; 0xff
    4a68:	0236      	lsls	r6, r6, #8
    4a6a:	4031      	ands	r1, r6
    4a6c:	430b      	orrs	r3, r1
    4a6e:	0210      	lsls	r0, r2, #8
    4a70:	21ff      	movs	r1, #255	; 0xff
    4a72:	0409      	lsls	r1, r1, #16
    4a74:	4008      	ands	r0, r1
    4a76:	4303      	orrs	r3, r0
    4a78:	0612      	lsls	r2, r2, #24
    4a7a:	4313      	orrs	r3, r2
    4a7c:	2012      	movs	r0, #18
    4a7e:	4468      	add	r0, sp
    4a80:	041f      	lsls	r7, r3, #16
    4a82:	0c3f      	lsrs	r7, r7, #16
    4a84:	2200      	movs	r2, #0
    4a86:	8007      	strh	r7, [r0, #0]
    4a88:	0c1b      	lsrs	r3, r3, #16
    4a8a:	8043      	strh	r3, [r0, #2]
	header.tpa         = htonl(destAddress);
    4a8c:	0e28      	lsrs	r0, r5, #24
    4a8e:	0a2b      	lsrs	r3, r5, #8
    4a90:	4033      	ands	r3, r6
    4a92:	4318      	orrs	r0, r3
    4a94:	022b      	lsls	r3, r5, #8
    4a96:	400b      	ands	r3, r1
    4a98:	4318      	orrs	r0, r3
    4a9a:	062d      	lsls	r5, r5, #24
    4a9c:	4328      	orrs	r0, r5
    4a9e:	61a0      	str	r0, [r4, #24]
	header.tha.s.byte1 = 0;
    4aa0:	74a2      	strb	r2, [r4, #18]
	header.tha.s.byte2 = 0;
    4aa2:	74e2      	strb	r2, [r4, #19]
	header.tha.s.byte3 = 0;
    4aa4:	7522      	strb	r2, [r4, #20]
	header.tha.s.byte4 = 0;
    4aa6:	7562      	strb	r2, [r4, #21]
	header.tha.s.byte5 = 0;
    4aa8:	75a2      	strb	r2, [r4, #22]
	header.tha.s.byte6 = 0;
    4aaa:	75e2      	strb	r2, [r4, #23]

	ret = ETH_WriteStart(&broadcastMAC, ETHERTYPE_ARP);
    4aac:	490a      	ldr	r1, [pc, #40]	; (4ad8 <ARPV4_Request+0x9c>)
    4aae:	480b      	ldr	r0, [pc, #44]	; (4adc <ARPV4_Request+0xa0>)
    4ab0:	4b0b      	ldr	r3, [pc, #44]	; (4ae0 <ARPV4_Request+0xa4>)
    4ab2:	4798      	blx	r3
	if (ret == SUCCESS) {
    4ab4:	2801      	cmp	r0, #1
    4ab6:	d001      	beq.n	4abc <ARPV4_Request+0x80>
		if (ret == SUCCESS) {
			return MAC_NOT_FOUND;
		}
	}
	return ret;
}
    4ab8:	b009      	add	sp, #36	; 0x24
    4aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ETH_WriteBlock((char *)&header, sizeof(arpHeader_t));
    4abc:	211c      	movs	r1, #28
    4abe:	a801      	add	r0, sp, #4
    4ac0:	4b08      	ldr	r3, [pc, #32]	; (4ae4 <ARPV4_Request+0xa8>)
    4ac2:	4798      	blx	r3
		ret = ETH_Send();
    4ac4:	4b08      	ldr	r3, [pc, #32]	; (4ae8 <ARPV4_Request+0xac>)
    4ac6:	4798      	blx	r3
		if (ret == SUCCESS) {
    4ac8:	2801      	cmp	r0, #1
    4aca:	d1f5      	bne.n	4ab8 <ARPV4_Request+0x7c>
			return MAC_NOT_FOUND;
    4acc:	3004      	adds	r0, #4
    4ace:	e7f3      	b.n	4ab8 <ARPV4_Request+0x7c>
    4ad0:	000047e9 	.word	0x000047e9
    4ad4:	20004094 	.word	0x20004094
    4ad8:	00000806 	.word	0x00000806
    4adc:	00008e5c 	.word	0x00008e5c
    4ae0:	000043d9 	.word	0x000043d9
    4ae4:	00004389 	.word	0x00004389
    4ae8:	000044c9 	.word	0x000044c9

00004aec <ARPV4_Lookup>:
 * ARP Lookup Table
 * @param ip_address
 * @return
 */
mac48Address_t *ARPV4_Lookup(uint32_t ip_address)
{
    4aec:	b510      	push	{r4, lr}
	arpMap_t *entry_pointer = arpMap;
	uint8_t   x;

	for (x = 0; x < ARP_MAP_SIZE; x++) {
    4aee:	2400      	movs	r4, #0
	arpMap_t *entry_pointer = arpMap;
    4af0:	4b0b      	ldr	r3, [pc, #44]	; (4b20 <ARPV4_Lookup+0x34>)
	for (x = 0; x < ARP_MAP_SIZE; x++) {
    4af2:	2c07      	cmp	r4, #7
    4af4:	d811      	bhi.n	4b1a <ARPV4_Lookup+0x2e>
		if (entry_pointer->ipAddress == ip_address)
    4af6:	799a      	ldrb	r2, [r3, #6]
    4af8:	79d9      	ldrb	r1, [r3, #7]
    4afa:	0209      	lsls	r1, r1, #8
    4afc:	4311      	orrs	r1, r2
    4afe:	7a1a      	ldrb	r2, [r3, #8]
    4b00:	0412      	lsls	r2, r2, #16
    4b02:	4311      	orrs	r1, r2
    4b04:	7a5a      	ldrb	r2, [r3, #9]
    4b06:	0612      	lsls	r2, r2, #24
    4b08:	430a      	orrs	r2, r1
    4b0a:	4282      	cmp	r2, r0
    4b0c:	d003      	beq.n	4b16 <ARPV4_Lookup+0x2a>
			return &entry_pointer->macAddress;
		entry_pointer++;
    4b0e:	330d      	adds	r3, #13
	for (x = 0; x < ARP_MAP_SIZE; x++) {
    4b10:	3401      	adds	r4, #1
    4b12:	b2e4      	uxtb	r4, r4
    4b14:	e7ed      	b.n	4af2 <ARPV4_Lookup+0x6>
			return &entry_pointer->macAddress;
    4b16:	0018      	movs	r0, r3
    4b18:	e000      	b.n	4b1c <ARPV4_Lookup+0x30>
	}
	return 0;
    4b1a:	2000      	movs	r0, #0
}
    4b1c:	bd10      	pop	{r4, pc}
    4b1e:	46c0      	nop			; (mov r8, r8)
    4b20:	2000400c 	.word	0x2000400c

00004b24 <DHCP_WriteZeros>:
		}
	}
}

void DHCP_WriteZeros(uint16_t length)
{
    4b24:	b510      	push	{r4, lr}
	while (length--) {
    4b26:	e003      	b.n	4b30 <DHCP_WriteZeros+0xc>
		ETH_Write8(0);
    4b28:	2000      	movs	r0, #0
    4b2a:	4b04      	ldr	r3, [pc, #16]	; (4b3c <DHCP_WriteZeros+0x18>)
    4b2c:	4798      	blx	r3
	while (length--) {
    4b2e:	0020      	movs	r0, r4
    4b30:	1e44      	subs	r4, r0, #1
    4b32:	b2a4      	uxth	r4, r4
    4b34:	2800      	cmp	r0, #0
    4b36:	d1f7      	bne.n	4b28 <DHCP_WriteZeros+0x4>
	}
}
    4b38:	bd10      	pop	{r4, pc}
    4b3a:	46c0      	nop			; (mov r8, r8)
    4b3c:	000042d9 	.word	0x000042d9

00004b40 <DHCP_Request>:
{
    4b40:	b570      	push	{r4, r5, r6, lr}
    4b42:	b082      	sub	sp, #8
    4b44:	0005      	movs	r5, r0
	ETH_GetMAC(ethMAC.mac_array);
    4b46:	4668      	mov	r0, sp
    4b48:	4b3c      	ldr	r3, [pc, #240]	; (4c3c <DHCP_Request+0xfc>)
    4b4a:	4798      	blx	r3
	started = UDP_Start(0xFFFFFFFF, 68, 67);
    4b4c:	2243      	movs	r2, #67	; 0x43
    4b4e:	2144      	movs	r1, #68	; 0x44
    4b50:	2001      	movs	r0, #1
    4b52:	4240      	negs	r0, r0
    4b54:	4b3a      	ldr	r3, [pc, #232]	; (4c40 <DHCP_Request+0x100>)
    4b56:	4798      	blx	r3
	if (started == SUCCESS) {
    4b58:	2800      	cmp	r0, #0
    4b5a:	d101      	bne.n	4b60 <DHCP_Request+0x20>
}
    4b5c:	b002      	add	sp, #8
    4b5e:	bd70      	pop	{r4, r5, r6, pc}
		ETH_Write32(0x01010600); // OP, HTYPE, HLEN, HOPS
    4b60:	4838      	ldr	r0, [pc, #224]	; (4c44 <DHCP_Request+0x104>)
    4b62:	4c39      	ldr	r4, [pc, #228]	; (4c48 <DHCP_Request+0x108>)
    4b64:	47a0      	blx	r4
		ETH_Write32(xidValue);   // XID : made up number...
    4b66:	4839      	ldr	r0, [pc, #228]	; (4c4c <DHCP_Request+0x10c>)
    4b68:	47a0      	blx	r4
		ETH_Write32(0x00008000); // SECS, FLAGS (broadcast)
    4b6a:	2080      	movs	r0, #128	; 0x80
    4b6c:	0200      	lsls	r0, r0, #8
    4b6e:	47a0      	blx	r4
		if (type == DHCP_REQUEST) {
    4b70:	2d03      	cmp	r5, #3
    4b72:	d04e      	beq.n	4c12 <DHCP_Request+0xd2>
			ETH_Write32(ipv4Address); // CIADDR
    4b74:	4b36      	ldr	r3, [pc, #216]	; (4c50 <DHCP_Request+0x110>)
    4b76:	6818      	ldr	r0, [r3, #0]
    4b78:	4b33      	ldr	r3, [pc, #204]	; (4c48 <DHCP_Request+0x108>)
    4b7a:	4798      	blx	r3
		ETH_Write32(0);                     // YIADDR
    4b7c:	2000      	movs	r0, #0
    4b7e:	4c32      	ldr	r4, [pc, #200]	; (4c48 <DHCP_Request+0x108>)
    4b80:	47a0      	blx	r4
		ETH_Write32(0);                     // SIADDR
    4b82:	2000      	movs	r0, #0
    4b84:	47a0      	blx	r4
		ETH_Write32(0);                     // GIADDR
    4b86:	2000      	movs	r0, #0
    4b88:	47a0      	blx	r4
		ETH_WriteBlock((char *)&ethMAC, 6); // Hardware Address
    4b8a:	2106      	movs	r1, #6
    4b8c:	4668      	mov	r0, sp
    4b8e:	4b31      	ldr	r3, [pc, #196]	; (4c54 <DHCP_Request+0x114>)
    4b90:	4798      	blx	r3
		DHCP_WriteZeros(202);               // 0 padding  + 192 bytes of BOOTP padding
    4b92:	20ca      	movs	r0, #202	; 0xca
    4b94:	4b30      	ldr	r3, [pc, #192]	; (4c58 <DHCP_Request+0x118>)
    4b96:	4798      	blx	r3
		ETH_Write32(0x63825363);            // MAGIC COOKIE - Options to Follow
    4b98:	4830      	ldr	r0, [pc, #192]	; (4c5c <DHCP_Request+0x11c>)
    4b9a:	47a0      	blx	r4
		ETH_Write8(53);
    4b9c:	2035      	movs	r0, #53	; 0x35
    4b9e:	4c30      	ldr	r4, [pc, #192]	; (4c60 <DHCP_Request+0x120>)
    4ba0:	47a0      	blx	r4
		ETH_Write8(1);
    4ba2:	2001      	movs	r0, #1
    4ba4:	47a0      	blx	r4
		ETH_Write8(type); // option 53 - DHCP packet type
    4ba6:	0028      	movs	r0, r5
    4ba8:	47a0      	blx	r4
		if (type == DHCP_REQUEST) {
    4baa:	2d03      	cmp	r5, #3
    4bac:	d035      	beq.n	4c1a <DHCP_Request+0xda>
		ETH_Write8(55);
    4bae:	2037      	movs	r0, #55	; 0x37
    4bb0:	4c2b      	ldr	r4, [pc, #172]	; (4c60 <DHCP_Request+0x120>)
    4bb2:	47a0      	blx	r4
		ETH_Write8(4);
    4bb4:	2004      	movs	r0, #4
    4bb6:	47a0      	blx	r4
		ETH_Write8(1);
    4bb8:	2001      	movs	r0, #1
    4bba:	47a0      	blx	r4
		ETH_Write8(3);
    4bbc:	2003      	movs	r0, #3
    4bbe:	47a0      	blx	r4
		ETH_Write8(6);
    4bc0:	2006      	movs	r0, #6
    4bc2:	47a0      	blx	r4
		ETH_Write8(15);
    4bc4:	200f      	movs	r0, #15
    4bc6:	47a0      	blx	r4
		ETH_Write8(57);
    4bc8:	2039      	movs	r0, #57	; 0x39
    4bca:	47a0      	blx	r4
		ETH_Write8(2);
    4bcc:	2002      	movs	r0, #2
    4bce:	47a0      	blx	r4
		ETH_Write16(512); // option 57 - DHCP maximum packet length
    4bd0:	2080      	movs	r0, #128	; 0x80
    4bd2:	0080      	lsls	r0, r0, #2
    4bd4:	4b23      	ldr	r3, [pc, #140]	; (4c64 <DHCP_Request+0x124>)
    4bd6:	4798      	blx	r3
		ETH_Write8(12);
    4bd8:	200c      	movs	r0, #12
    4bda:	47a0      	blx	r4
		ETH_Write8(DHCP_NAME_SIZE);
    4bdc:	200c      	movs	r0, #12
    4bde:	47a0      	blx	r4
		ETH_WriteBlock((char *)dhcpName, DHCP_NAME_SIZE);
    4be0:	210c      	movs	r1, #12
    4be2:	4821      	ldr	r0, [pc, #132]	; (4c68 <DHCP_Request+0x128>)
    4be4:	4e1b      	ldr	r6, [pc, #108]	; (4c54 <DHCP_Request+0x114>)
    4be6:	47b0      	blx	r6
		ETH_Write8(61);
    4be8:	203d      	movs	r0, #61	; 0x3d
    4bea:	47a0      	blx	r4
		ETH_Write8(7);
    4bec:	2007      	movs	r0, #7
    4bee:	47a0      	blx	r4
		ETH_Write8(1);
    4bf0:	2001      	movs	r0, #1
    4bf2:	47a0      	blx	r4
		ETH_WriteBlock((char *)&ethMAC, 6);
    4bf4:	2106      	movs	r1, #6
    4bf6:	4668      	mov	r0, sp
    4bf8:	47b0      	blx	r6
		ETH_Write8(255); // finished
    4bfa:	20ff      	movs	r0, #255	; 0xff
    4bfc:	47a0      	blx	r4
		ETH_Write8(0); // add a byte of padding to make the total length even
    4bfe:	2000      	movs	r0, #0
    4c00:	47a0      	blx	r4
		UDP_Send();
    4c02:	4b1a      	ldr	r3, [pc, #104]	; (4c6c <DHCP_Request+0x12c>)
    4c04:	4798      	blx	r3
		if (type == DHCP_DISCOVER)
    4c06:	2d01      	cmp	r5, #1
    4c08:	d1a8      	bne.n	4b5c <DHCP_Request+0x1c>
			clientState = SELECTING;
    4c0a:	2203      	movs	r2, #3
    4c0c:	4b18      	ldr	r3, [pc, #96]	; (4c70 <DHCP_Request+0x130>)
    4c0e:	701a      	strb	r2, [r3, #0]
}
    4c10:	e7a4      	b.n	4b5c <DHCP_Request+0x1c>
			ETH_Write32(0);
    4c12:	2000      	movs	r0, #0
    4c14:	4b0c      	ldr	r3, [pc, #48]	; (4c48 <DHCP_Request+0x108>)
    4c16:	4798      	blx	r3
    4c18:	e7b0      	b.n	4b7c <DHCP_Request+0x3c>
			ETH_Write8(54);
    4c1a:	2036      	movs	r0, #54	; 0x36
    4c1c:	4c10      	ldr	r4, [pc, #64]	; (4c60 <DHCP_Request+0x120>)
    4c1e:	47a0      	blx	r4
			ETH_Write8(4);
    4c20:	2004      	movs	r0, #4
    4c22:	47a0      	blx	r4
			ETH_Write32(dhcpServerId);
    4c24:	4b13      	ldr	r3, [pc, #76]	; (4c74 <DHCP_Request+0x134>)
    4c26:	6818      	ldr	r0, [r3, #0]
    4c28:	4e07      	ldr	r6, [pc, #28]	; (4c48 <DHCP_Request+0x108>)
    4c2a:	47b0      	blx	r6
			ETH_Write8(50);
    4c2c:	2032      	movs	r0, #50	; 0x32
    4c2e:	47a0      	blx	r4
			ETH_Write8(4);
    4c30:	2004      	movs	r0, #4
    4c32:	47a0      	blx	r4
			ETH_Write32(ipv4Address);
    4c34:	4b06      	ldr	r3, [pc, #24]	; (4c50 <DHCP_Request+0x110>)
    4c36:	6818      	ldr	r0, [r3, #0]
    4c38:	47b0      	blx	r6
    4c3a:	e7b8      	b.n	4bae <DHCP_Request+0x6e>
    4c3c:	000047e9 	.word	0x000047e9
    4c40:	00006439 	.word	0x00006439
    4c44:	01010600 	.word	0x01010600
    4c48:	00004341 	.word	0x00004341
    4c4c:	4d434850 	.word	0x4d434850
    4c50:	20004094 	.word	0x20004094
    4c54:	00004389 	.word	0x00004389
    4c58:	00004b25 	.word	0x00004b25
    4c5c:	63825363 	.word	0x63825363
    4c60:	000042d9 	.word	0x000042d9
    4c64:	00004309 	.word	0x00004309
    4c68:	00008dc8 	.word	0x00008dc8
    4c6c:	00006475 	.word	0x00006475
    4c70:	20000003 	.word	0x20000003
    4c74:	200008b0 	.word	0x200008b0

00004c78 <DHCP_Manage>:
{
    4c78:	b510      	push	{r4, lr}
	if (ethData.linkChange) {
    4c7a:	4b22      	ldr	r3, [pc, #136]	; (4d04 <DHCP_Manage+0x8c>)
    4c7c:	681b      	ldr	r3, [r3, #0]
    4c7e:	06db      	lsls	r3, r3, #27
    4c80:	d51b      	bpl.n	4cba <DHCP_Manage+0x42>
		if (clientState == BOUND && dhcpLeaseTime) {
    4c82:	4b21      	ldr	r3, [pc, #132]	; (4d08 <DHCP_Manage+0x90>)
    4c84:	781b      	ldrb	r3, [r3, #0]
    4c86:	2b05      	cmp	r3, #5
    4c88:	d00b      	beq.n	4ca2 <DHCP_Manage+0x2a>
			clientState = INIT;
    4c8a:	2201      	movs	r2, #1
    4c8c:	4b1e      	ldr	r3, [pc, #120]	; (4d08 <DHCP_Manage+0x90>)
    4c8e:	701a      	strb	r2, [r3, #0]
			DHCP_Request(DHCP_DISCOVER);
    4c90:	2001      	movs	r0, #1
    4c92:	4b1e      	ldr	r3, [pc, #120]	; (4d0c <DHCP_Manage+0x94>)
    4c94:	4798      	blx	r3
		ethData.linkChange = false;
    4c96:	4a1b      	ldr	r2, [pc, #108]	; (4d04 <DHCP_Manage+0x8c>)
    4c98:	7813      	ldrb	r3, [r2, #0]
    4c9a:	2110      	movs	r1, #16
    4c9c:	438b      	bics	r3, r1
    4c9e:	7013      	strb	r3, [r2, #0]
}
    4ca0:	bd10      	pop	{r4, pc}
		if (clientState == BOUND && dhcpLeaseTime) {
    4ca2:	4b1b      	ldr	r3, [pc, #108]	; (4d10 <DHCP_Manage+0x98>)
    4ca4:	685b      	ldr	r3, [r3, #4]
    4ca6:	2b00      	cmp	r3, #0
    4ca8:	d0ef      	beq.n	4c8a <DHCP_Manage+0x12>
			dhcpServerId = 0xFFFFFFFF;
    4caa:	2201      	movs	r2, #1
    4cac:	4252      	negs	r2, r2
    4cae:	4b18      	ldr	r3, [pc, #96]	; (4d10 <DHCP_Manage+0x98>)
    4cb0:	601a      	str	r2, [r3, #0]
			DHCP_Request(DHCP_REQUEST);
    4cb2:	2003      	movs	r0, #3
    4cb4:	4b15      	ldr	r3, [pc, #84]	; (4d0c <DHCP_Manage+0x94>)
    4cb6:	4798      	blx	r3
    4cb8:	e7ed      	b.n	4c96 <DHCP_Manage+0x1e>
	} else if (clientState == INIT || clientState == INIT_REBOOT) {
    4cba:	4b13      	ldr	r3, [pc, #76]	; (4d08 <DHCP_Manage+0x90>)
    4cbc:	781a      	ldrb	r2, [r3, #0]
    4cbe:	1e53      	subs	r3, r2, #1
    4cc0:	b2db      	uxtb	r3, r3
    4cc2:	2b01      	cmp	r3, #1
    4cc4:	d90d      	bls.n	4ce2 <DHCP_Manage+0x6a>
	} else if ((dhcpLeaseTime < 100) && clientState == BOUND) // 100 seconds remaining on my dhcp lease
    4cc6:	4b12      	ldr	r3, [pc, #72]	; (4d10 <DHCP_Manage+0x98>)
    4cc8:	685b      	ldr	r3, [r3, #4]
    4cca:	2b63      	cmp	r3, #99	; 0x63
    4ccc:	d801      	bhi.n	4cd2 <DHCP_Manage+0x5a>
    4cce:	2a05      	cmp	r2, #5
    4cd0:	d00e      	beq.n	4cf0 <DHCP_Manage+0x78>
		if (clientState == BOUND && dhcpLeaseTime)
    4cd2:	2a05      	cmp	r2, #5
    4cd4:	d010      	beq.n	4cf8 <DHCP_Manage+0x80>
		else if (!dhcpLeaseTime)
    4cd6:	2b00      	cmp	r3, #0
    4cd8:	d1e2      	bne.n	4ca0 <DHCP_Manage+0x28>
			clientState = INIT_REBOOT;
    4cda:	2202      	movs	r2, #2
    4cdc:	4b0a      	ldr	r3, [pc, #40]	; (4d08 <DHCP_Manage+0x90>)
    4cde:	701a      	strb	r2, [r3, #0]
}
    4ce0:	e7de      	b.n	4ca0 <DHCP_Manage+0x28>
		clientState = INIT;
    4ce2:	2201      	movs	r2, #1
    4ce4:	4b08      	ldr	r3, [pc, #32]	; (4d08 <DHCP_Manage+0x90>)
    4ce6:	701a      	strb	r2, [r3, #0]
		DHCP_Request(DHCP_DISCOVER);
    4ce8:	2001      	movs	r0, #1
    4cea:	4b08      	ldr	r3, [pc, #32]	; (4d0c <DHCP_Manage+0x94>)
    4cec:	4798      	blx	r3
    4cee:	e7d7      	b.n	4ca0 <DHCP_Manage+0x28>
		DHCP_Request(DHCP_REQUEST);
    4cf0:	2003      	movs	r0, #3
    4cf2:	4b06      	ldr	r3, [pc, #24]	; (4d0c <DHCP_Manage+0x94>)
    4cf4:	4798      	blx	r3
    4cf6:	e7d3      	b.n	4ca0 <DHCP_Manage+0x28>
		if (clientState == BOUND && dhcpLeaseTime)
    4cf8:	2b00      	cmp	r3, #0
    4cfa:	d0ec      	beq.n	4cd6 <DHCP_Manage+0x5e>
			dhcpLeaseTime--;
    4cfc:	3b01      	subs	r3, #1
    4cfe:	4a04      	ldr	r2, [pc, #16]	; (4d10 <DHCP_Manage+0x98>)
    4d00:	6053      	str	r3, [r2, #4]
    4d02:	e7cd      	b.n	4ca0 <DHCP_Manage+0x28>
    4d04:	20004000 	.word	0x20004000
    4d08:	20000003 	.word	0x20000003
    4d0c:	00004b41 	.word	0x00004b41
    4d10:	200008b0 	.word	0x200008b0

00004d14 <DHCP_Handler>:
{
    4d14:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d16:	b087      	sub	sp, #28
    4d18:	0004      	movs	r4, r0
	ETH_GetMAC(ethMAC.mac_array);
    4d1a:	a802      	add	r0, sp, #8
    4d1c:	4b47      	ldr	r3, [pc, #284]	; (4e3c <DHCP_Handler+0x128>)
    4d1e:	4798      	blx	r3
	if (length > DHCP_HEADER_SIZE) {
    4d20:	2cf0      	cmp	r4, #240	; 0xf0
    4d22:	dc01      	bgt.n	4d28 <DHCP_Handler+0x14>
}
    4d24:	b007      	add	sp, #28
    4d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		v16 = ETH_Read16();
    4d28:	4b45      	ldr	r3, [pc, #276]	; (4e40 <DHCP_Handler+0x12c>)
    4d2a:	4798      	blx	r3
		if (v16 == 0x0201) {
    4d2c:	4b45      	ldr	r3, [pc, #276]	; (4e44 <DHCP_Handler+0x130>)
    4d2e:	4298      	cmp	r0, r3
    4d30:	d1f8      	bne.n	4d24 <DHCP_Handler+0x10>
			ETH_Dump(2);
    4d32:	2002      	movs	r0, #2
    4d34:	4b44      	ldr	r3, [pc, #272]	; (4e48 <DHCP_Handler+0x134>)
    4d36:	4798      	blx	r3
			v = ETH_Read32();
    4d38:	4b44      	ldr	r3, [pc, #272]	; (4e4c <DHCP_Handler+0x138>)
    4d3a:	4798      	blx	r3
			if (v == xidValue) {
    4d3c:	4b44      	ldr	r3, [pc, #272]	; (4e50 <DHCP_Handler+0x13c>)
    4d3e:	4298      	cmp	r0, r3
    4d40:	d1f0      	bne.n	4d24 <DHCP_Handler+0x10>
				ETH_Dump(8);          // dump SECS, FLAGS & CIADDR
    4d42:	2008      	movs	r0, #8
    4d44:	4d40      	ldr	r5, [pc, #256]	; (4e48 <DHCP_Handler+0x134>)
    4d46:	47a8      	blx	r5
				myip  = ETH_Read32(); // CIADDR
    4d48:	4b40      	ldr	r3, [pc, #256]	; (4e4c <DHCP_Handler+0x138>)
    4d4a:	4798      	blx	r3
    4d4c:	9001      	str	r0, [sp, #4]
				ETH_Dump(8);                                            // SIADDR, GIADDR, CHADDR
    4d4e:	2008      	movs	r0, #8
    4d50:	47a8      	blx	r5
				ETH_ReadBlock((char *)&ethPktMAC, sizeof(ethPktMAC.s)); // This is a DHCP for IPv4
    4d52:	2106      	movs	r1, #6
    4d54:	a804      	add	r0, sp, #16
    4d56:	4b3f      	ldr	r3, [pc, #252]	; (4e54 <DHCP_Handler+0x140>)
    4d58:	4798      	blx	r3
				if (memcmp(&ethPktMAC.s, &ethMAC.s, 6) == 0) // only compare 6 bytes of MAC address.
    4d5a:	2206      	movs	r2, #6
    4d5c:	a902      	add	r1, sp, #8
    4d5e:	a804      	add	r0, sp, #16
    4d60:	4b3d      	ldr	r3, [pc, #244]	; (4e58 <DHCP_Handler+0x144>)
    4d62:	4798      	blx	r3
    4d64:	2800      	cmp	r0, #0
    4d66:	d163      	bne.n	4e30 <DHCP_Handler+0x11c>
					ETH_Dump(202);
    4d68:	30ca      	adds	r0, #202	; 0xca
    4d6a:	4b37      	ldr	r3, [pc, #220]	; (4e48 <DHCP_Handler+0x134>)
    4d6c:	4798      	blx	r3
					if (ETH_Read32() == 0x63825363) {
    4d6e:	4b37      	ldr	r3, [pc, #220]	; (4e4c <DHCP_Handler+0x138>)
    4d70:	4798      	blx	r3
    4d72:	4b3a      	ldr	r3, [pc, #232]	; (4e5c <DHCP_Handler+0x148>)
    4d74:	4298      	cmp	r0, r3
    4d76:	d1d5      	bne.n	4d24 <DHCP_Handler+0x10>
						length -= 240;
    4d78:	3cf0      	subs	r4, #240	; 0xf0
						while (length > 0) {
    4d7a:	e003      	b.n	4d84 <DHCP_Handler+0x70>
								ipv4SubnetMask = ETH_Read32();
    4d7c:	4b33      	ldr	r3, [pc, #204]	; (4e4c <DHCP_Handler+0x138>)
    4d7e:	4798      	blx	r3
    4d80:	4b37      	ldr	r3, [pc, #220]	; (4e60 <DHCP_Handler+0x14c>)
    4d82:	6018      	str	r0, [r3, #0]
						while (length > 0) {
    4d84:	2c00      	cmp	r4, #0
    4d86:	dd4a      	ble.n	4e1e <DHCP_Handler+0x10a>
							option       = ETH_Read8();
    4d88:	4f36      	ldr	r7, [pc, #216]	; (4e64 <DHCP_Handler+0x150>)
    4d8a:	47b8      	blx	r7
    4d8c:	0005      	movs	r5, r0
							optionLength = ETH_Read8();
    4d8e:	47b8      	blx	r7
    4d90:	0007      	movs	r7, r0
							length -= 2 + optionLength;
    4d92:	1c83      	adds	r3, r0, #2
    4d94:	1ae4      	subs	r4, r4, r3
							switch (option) {
    4d96:	2d36      	cmp	r5, #54	; 0x36
    4d98:	d83d      	bhi.n	4e16 <DHCP_Handler+0x102>
    4d9a:	00ad      	lsls	r5, r5, #2
    4d9c:	4b32      	ldr	r3, [pc, #200]	; (4e68 <DHCP_Handler+0x154>)
    4d9e:	595b      	ldr	r3, [r3, r5]
    4da0:	469f      	mov	pc, r3
								ipv4Router = ETH_Read32(); // get MAC address of this router
    4da2:	4b2a      	ldr	r3, [pc, #168]	; (4e4c <DHCP_Handler+0x138>)
    4da4:	4798      	blx	r3
    4da6:	4b31      	ldr	r3, [pc, #196]	; (4e6c <DHCP_Handler+0x158>)
    4da8:	6018      	str	r0, [r3, #0]
								break;
    4daa:	e7eb      	b.n	4d84 <DHCP_Handler+0x70>
								if (optionLength >= 4) {
    4dac:	2803      	cmp	r0, #3
    4dae:	d9e9      	bls.n	4d84 <DHCP_Handler+0x70>
									ipv4DNS[0] = ETH_Read32();
    4db0:	4b26      	ldr	r3, [pc, #152]	; (4e4c <DHCP_Handler+0x138>)
    4db2:	4798      	blx	r3
    4db4:	4b2e      	ldr	r3, [pc, #184]	; (4e70 <DHCP_Handler+0x15c>)
    4db6:	6018      	str	r0, [r3, #0]
									optionLength -= 4;
    4db8:	3f04      	subs	r7, #4
    4dba:	b2ff      	uxtb	r7, r7
									if (optionLength >= 4) {
    4dbc:	2f03      	cmp	r7, #3
    4dbe:	d9e1      	bls.n	4d84 <DHCP_Handler+0x70>
										ipv4DNS[1] = ETH_Read32();
    4dc0:	4b22      	ldr	r3, [pc, #136]	; (4e4c <DHCP_Handler+0x138>)
    4dc2:	4798      	blx	r3
    4dc4:	4b2a      	ldr	r3, [pc, #168]	; (4e70 <DHCP_Handler+0x15c>)
    4dc6:	6058      	str	r0, [r3, #4]
    4dc8:	e7dc      	b.n	4d84 <DHCP_Handler+0x70>
								if (optionLength >= 4) {
    4dca:	2803      	cmp	r0, #3
    4dcc:	d9da      	bls.n	4d84 <DHCP_Handler+0x70>
									dhcpLeaseTime = ETH_Read32();
    4dce:	4b1f      	ldr	r3, [pc, #124]	; (4e4c <DHCP_Handler+0x138>)
    4dd0:	4798      	blx	r3
    4dd2:	4b28      	ldr	r3, [pc, #160]	; (4e74 <DHCP_Handler+0x160>)
    4dd4:	6058      	str	r0, [r3, #4]
    4dd6:	e7d5      	b.n	4d84 <DHCP_Handler+0x70>
								dhcpServerId = ETH_Read32();
    4dd8:	4b1c      	ldr	r3, [pc, #112]	; (4e4c <DHCP_Handler+0x138>)
    4dda:	4798      	blx	r3
    4ddc:	4b25      	ldr	r3, [pc, #148]	; (4e74 <DHCP_Handler+0x160>)
    4dde:	6018      	str	r0, [r3, #0]
								break;
    4de0:	e7d0      	b.n	4d84 <DHCP_Handler+0x70>
								switch (ETH_Read8()) {
    4de2:	4b20      	ldr	r3, [pc, #128]	; (4e64 <DHCP_Handler+0x150>)
    4de4:	4798      	blx	r3
    4de6:	2805      	cmp	r0, #5
    4de8:	d00a      	beq.n	4e00 <DHCP_Handler+0xec>
    4dea:	2806      	cmp	r0, #6
    4dec:	d00f      	beq.n	4e0e <DHCP_Handler+0xfa>
    4dee:	2802      	cmp	r0, #2
    4df0:	d1c8      	bne.n	4d84 <DHCP_Handler+0x70>
									ipv4Address = myip;
    4df2:	4b21      	ldr	r3, [pc, #132]	; (4e78 <DHCP_Handler+0x164>)
    4df4:	9a01      	ldr	r2, [sp, #4]
    4df6:	601a      	str	r2, [r3, #0]
									clientState = REQUESTING;
    4df8:	2204      	movs	r2, #4
    4dfa:	4b20      	ldr	r3, [pc, #128]	; (4e7c <DHCP_Handler+0x168>)
    4dfc:	701a      	strb	r2, [r3, #0]
									break;
    4dfe:	e7c1      	b.n	4d84 <DHCP_Handler+0x70>
									ipv4Address = myip;
    4e00:	4b1d      	ldr	r3, [pc, #116]	; (4e78 <DHCP_Handler+0x164>)
    4e02:	9a01      	ldr	r2, [sp, #4]
    4e04:	601a      	str	r2, [r3, #0]
									clientState = BOUND;
    4e06:	2205      	movs	r2, #5
    4e08:	4b1c      	ldr	r3, [pc, #112]	; (4e7c <DHCP_Handler+0x168>)
    4e0a:	701a      	strb	r2, [r3, #0]
									break;
    4e0c:	e7ba      	b.n	4d84 <DHCP_Handler+0x70>
									clientState = INIT;
    4e0e:	2201      	movs	r2, #1
    4e10:	4b1a      	ldr	r3, [pc, #104]	; (4e7c <DHCP_Handler+0x168>)
    4e12:	701a      	strb	r2, [r3, #0]
								break;
    4e14:	e7b6      	b.n	4d84 <DHCP_Handler+0x70>
								ETH_Dump(optionLength); // dump any unused bytes
    4e16:	b2b8      	uxth	r0, r7
    4e18:	4b0b      	ldr	r3, [pc, #44]	; (4e48 <DHCP_Handler+0x134>)
    4e1a:	4798      	blx	r3
								break;
    4e1c:	e7b2      	b.n	4d84 <DHCP_Handler+0x70>
						if (clientState == REQUESTING)
    4e1e:	4b17      	ldr	r3, [pc, #92]	; (4e7c <DHCP_Handler+0x168>)
    4e20:	781b      	ldrb	r3, [r3, #0]
    4e22:	2b04      	cmp	r3, #4
    4e24:	d000      	beq.n	4e28 <DHCP_Handler+0x114>
    4e26:	e77d      	b.n	4d24 <DHCP_Handler+0x10>
							DHCP_Request(DHCP_REQUEST);
    4e28:	2003      	movs	r0, #3
    4e2a:	4b15      	ldr	r3, [pc, #84]	; (4e80 <DHCP_Handler+0x16c>)
    4e2c:	4798      	blx	r3
    4e2e:	e779      	b.n	4d24 <DHCP_Handler+0x10>
					ETH_Dump(length - 34);
    4e30:	3c22      	subs	r4, #34	; 0x22
    4e32:	b2a0      	uxth	r0, r4
    4e34:	4b04      	ldr	r3, [pc, #16]	; (4e48 <DHCP_Handler+0x134>)
    4e36:	4798      	blx	r3
}
    4e38:	e774      	b.n	4d24 <DHCP_Handler+0x10>
    4e3a:	46c0      	nop			; (mov r8, r8)
    4e3c:	000047e9 	.word	0x000047e9
    4e40:	0000420d 	.word	0x0000420d
    4e44:	00000201 	.word	0x00000201
    4e48:	00004521 	.word	0x00004521
    4e4c:	00004241 	.word	0x00004241
    4e50:	4d434850 	.word	0x4d434850
    4e54:	00004285 	.word	0x00004285
    4e58:	0000774d 	.word	0x0000774d
    4e5c:	63825363 	.word	0x63825363
    4e60:	2000407c 	.word	0x2000407c
    4e64:	0000418d 	.word	0x0000418d
    4e68:	00008ce8 	.word	0x00008ce8
    4e6c:	20004074 	.word	0x20004074
    4e70:	20004098 	.word	0x20004098
    4e74:	200008b0 	.word	0x200008b0
    4e78:	20004094 	.word	0x20004094
    4e7c:	20000003 	.word	0x20000003
    4e80:	00004b41 	.word	0x00004b41

00004e84 <ICMP_EchoReply>:
 * @param payload_length
 * @return
 */

error_msg ICMP_EchoReply(icmpHeader_t *icmpHdr, ipv4Header_t *ipv4Hdr)
{
    4e84:	b570      	push	{r4, r5, r6, lr}
    4e86:	b082      	sub	sp, #8
    4e88:	0005      	movs	r5, r0
    4e8a:	000c      	movs	r4, r1
	uint16_t  cksm = 0;
    4e8c:	2200      	movs	r2, #0
    4e8e:	466b      	mov	r3, sp
    4e90:	80da      	strh	r2, [r3, #6]
	error_msg ret  = ERROR;

	ret = IPv4_Start(ipv4Hdr->srcIpAddress, ipv4Hdr->protocol);
    4e92:	7a49      	ldrb	r1, [r1, #9]
    4e94:	68e0      	ldr	r0, [r4, #12]
    4e96:	4b1c      	ldr	r3, [pc, #112]	; (4f08 <ICMP_EchoReply+0x84>)
    4e98:	4798      	blx	r3
	if (ret == SUCCESS) {
    4e9a:	2801      	cmp	r0, #1
    4e9c:	d001      	beq.n	4ea2 <ICMP_EchoReply+0x1e>
			           sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) + offsetof(icmpHeader_t, checksum));
			ret = IPV4_Send(ipv4PayloadLength);
		}
	}
	return ret;
}
    4e9e:	b002      	add	sp, #8
    4ea0:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t ipv4PayloadLength = ipv4Hdr->length - sizeof(ipv4Header_t);
    4ea2:	8863      	ldrh	r3, [r4, #2]
		ipv4PayloadLength = ipv4Hdr->length - (uint16_t)(ipv4Hdr->ihl << 2);
    4ea4:	7824      	ldrb	r4, [r4, #0]
    4ea6:	0724      	lsls	r4, r4, #28
    4ea8:	0ea4      	lsrs	r4, r4, #26
    4eaa:	1b1c      	subs	r4, r3, r4
    4eac:	b2a4      	uxth	r4, r4
		ETH_Write16(ECHO_REPLY);
    4eae:	2000      	movs	r0, #0
    4eb0:	4e16      	ldr	r6, [pc, #88]	; (4f0c <ICMP_EchoReply+0x88>)
    4eb2:	47b0      	blx	r6
		ETH_Write16(0); // checksum
    4eb4:	2000      	movs	r0, #0
    4eb6:	47b0      	blx	r6
		ETH_Write16(ntohs(icmpHdr->identifier));
    4eb8:	88ab      	ldrh	r3, [r5, #4]
    4eba:	0a18      	lsrs	r0, r3, #8
    4ebc:	021b      	lsls	r3, r3, #8
    4ebe:	4318      	orrs	r0, r3
    4ec0:	b280      	uxth	r0, r0
    4ec2:	47b0      	blx	r6
		ETH_Write16(ntohs(icmpHdr->sequence));
    4ec4:	88eb      	ldrh	r3, [r5, #6]
    4ec6:	0a18      	lsrs	r0, r3, #8
    4ec8:	021b      	lsls	r3, r3, #8
    4eca:	4318      	orrs	r0, r3
    4ecc:	b280      	uxth	r0, r0
    4ece:	47b0      	blx	r6
		ret = ETH_Copy(ipv4PayloadLength - sizeof(icmpHeader_t));
    4ed0:	0020      	movs	r0, r4
    4ed2:	3808      	subs	r0, #8
    4ed4:	b280      	uxth	r0, r0
    4ed6:	4b0e      	ldr	r3, [pc, #56]	; (4f10 <ICMP_EchoReply+0x8c>)
    4ed8:	4798      	blx	r3
		if (ret == SUCCESS) // copy can timeout in heavy network situations like flood ping
    4eda:	2801      	cmp	r0, #1
    4edc:	d1df      	bne.n	4e9e <ICMP_EchoReply+0x1a>
			ETH_SaveRDPT();
    4ede:	4b0d      	ldr	r3, [pc, #52]	; (4f14 <ICMP_EchoReply+0x90>)
    4ee0:	4798      	blx	r3
			cksm            = sizeof(ethernetFrame_t) + sizeof(ipv4Header_t);
    4ee2:	466b      	mov	r3, sp
    4ee4:	1d9d      	adds	r5, r3, #6
    4ee6:	2322      	movs	r3, #34	; 0x22
    4ee8:	802b      	strh	r3, [r5, #0]
			cksm            = ETH_TxComputeChecksum(icmp_cksm_start, ipv4PayloadLength, 0);
    4eea:	2200      	movs	r2, #0
    4eec:	0021      	movs	r1, r4
    4eee:	2022      	movs	r0, #34	; 0x22
    4ef0:	4b09      	ldr	r3, [pc, #36]	; (4f18 <ICMP_EchoReply+0x94>)
    4ef2:	4798      	blx	r3
    4ef4:	8028      	strh	r0, [r5, #0]
			ETH_Insert((char *)&cksm,
    4ef6:	2224      	movs	r2, #36	; 0x24
    4ef8:	2102      	movs	r1, #2
    4efa:	0028      	movs	r0, r5
    4efc:	4b07      	ldr	r3, [pc, #28]	; (4f1c <ICMP_EchoReply+0x98>)
    4efe:	4798      	blx	r3
			ret = IPV4_Send(ipv4PayloadLength);
    4f00:	0020      	movs	r0, r4
    4f02:	4b07      	ldr	r3, [pc, #28]	; (4f20 <ICMP_EchoReply+0x9c>)
    4f04:	4798      	blx	r3
    4f06:	e7ca      	b.n	4e9e <ICMP_EchoReply+0x1a>
    4f08:	00005169 	.word	0x00005169
    4f0c:	00004309 	.word	0x00004309
    4f10:	00004625 	.word	0x00004625
    4f14:	00004801 	.word	0x00004801
    4f18:	00004709 	.word	0x00004709
    4f1c:	000045ad 	.word	0x000045ad
    4f20:	00005249 	.word	0x00005249

00004f24 <ICMP_Receive>:
{
    4f24:	b510      	push	{r4, lr}
    4f26:	b082      	sub	sp, #8
    4f28:	0004      	movs	r4, r0
	ETH_ReadBlock((char *)&icmpHdr, sizeof(icmpHeader_t));
    4f2a:	2108      	movs	r1, #8
    4f2c:	4668      	mov	r0, sp
    4f2e:	4b0b      	ldr	r3, [pc, #44]	; (4f5c <ICMP_Receive+0x38>)
    4f30:	4798      	blx	r3
	ETH_SaveRDPT();
    4f32:	4b0b      	ldr	r3, [pc, #44]	; (4f60 <ICMP_Receive+0x3c>)
    4f34:	4798      	blx	r3
	switch (ntohs((icmpTypeCodes_t)icmpHdr.typeCode)) {
    4f36:	466b      	mov	r3, sp
    4f38:	881b      	ldrh	r3, [r3, #0]
    4f3a:	0a1a      	lsrs	r2, r3, #8
    4f3c:	061b      	lsls	r3, r3, #24
    4f3e:	0c1b      	lsrs	r3, r3, #16
    4f40:	4313      	orrs	r3, r2
    4f42:	2280      	movs	r2, #128	; 0x80
    4f44:	0112      	lsls	r2, r2, #4
    4f46:	4293      	cmp	r3, r2
    4f48:	d002      	beq.n	4f50 <ICMP_Receive+0x2c>
	error_msg    ret = ERROR;
    4f4a:	2000      	movs	r0, #0
}
    4f4c:	b002      	add	sp, #8
    4f4e:	bd10      	pop	{r4, pc}
		ret = ICMP_EchoReply(&icmpHdr, ipv4Hdr);
    4f50:	0021      	movs	r1, r4
    4f52:	4668      	mov	r0, sp
    4f54:	4b03      	ldr	r3, [pc, #12]	; (4f64 <ICMP_Receive+0x40>)
    4f56:	4798      	blx	r3
	} break;
    4f58:	e7f8      	b.n	4f4c <ICMP_Receive+0x28>
    4f5a:	46c0      	nop			; (mov r8, r8)
    4f5c:	00004285 	.word	0x00004285
    4f60:	00004801 	.word	0x00004801
    4f64:	00004e85 	.word	0x00004e85

00004f68 <IPV4_Init>:
 */
extern void TCP_Recv(uint32_t, uint16_t);

void IPV4_Init(void)
{
	ipv4Address = 0;
    4f68:	2200      	movs	r2, #0
    4f6a:	4b01      	ldr	r3, [pc, #4]	; (4f70 <IPV4_Init+0x8>)
    4f6c:	601a      	str	r2, [r3, #0]
}
    4f6e:	4770      	bx	lr
    4f70:	20004094 	.word	0x20004094

00004f74 <IPV4_PseudoHeaderChecksum>:

uint16_t IPV4_PseudoHeaderChecksum(uint16_t payloadLen)
{
    4f74:	b084      	sub	sp, #16
	ipv4_pseudo_header_t tmp;
	uint8_t              len;
	uint32_t             cksm = 0;
	uint16_t *           v;

	tmp.srcIpAddress = ipv4Header.srcIpAddress;
    4f76:	4b0e      	ldr	r3, [pc, #56]	; (4fb0 <IPV4_PseudoHeaderChecksum+0x3c>)
    4f78:	aa01      	add	r2, sp, #4
    4f7a:	68d9      	ldr	r1, [r3, #12]
    4f7c:	9101      	str	r1, [sp, #4]
	tmp.dstIpAddress = ipv4Header.dstIpAddress;
    4f7e:	6919      	ldr	r1, [r3, #16]
    4f80:	6051      	str	r1, [r2, #4]
	tmp.protocol     = ipv4Header.protocol;
    4f82:	7a5b      	ldrb	r3, [r3, #9]
    4f84:	7213      	strb	r3, [r2, #8]
	tmp.z            = 0;
    4f86:	2300      	movs	r3, #0
    4f88:	7253      	strb	r3, [r2, #9]
	tmp.length       = payloadLen;
    4f8a:	8150      	strh	r0, [r2, #10]
	uint32_t             cksm = 0;
    4f8c:	2100      	movs	r1, #0

	len = sizeof(tmp);
	len = len >> 1;
    4f8e:	3306      	adds	r3, #6

	v = (uint16_t *)&tmp;

	while (len) {
    4f90:	e004      	b.n	4f9c <IPV4_PseudoHeaderChecksum+0x28>
		cksm += *v;
    4f92:	8810      	ldrh	r0, [r2, #0]
    4f94:	1809      	adds	r1, r1, r0
		len--;
    4f96:	3b01      	subs	r3, #1
    4f98:	b2db      	uxtb	r3, r3
		v++;
    4f9a:	3202      	adds	r2, #2
	while (len) {
    4f9c:	2b00      	cmp	r3, #0
    4f9e:	d1f8      	bne.n	4f92 <IPV4_PseudoHeaderChecksum+0x1e>
	}

	// wrap the checksum
	cksm = (cksm & 0x0FFFF) + (cksm >> 16);
    4fa0:	0408      	lsls	r0, r1, #16
    4fa2:	0c00      	lsrs	r0, r0, #16
    4fa4:	0c09      	lsrs	r1, r1, #16
    4fa6:	1840      	adds	r0, r0, r1

	// Return the resulting checksum
	return cksm;
    4fa8:	b280      	uxth	r0, r0
}
    4faa:	b004      	add	sp, #16
    4fac:	4770      	bx	lr
    4fae:	46c0      	nop			; (mov r8, r8)
    4fb0:	20004080 	.word	0x20004080

00004fb4 <IPV4_Packet>:

error_msg IPV4_Packet(void)
{
    4fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fb6:	b08b      	sub	sp, #44	; 0x2c
	uint16_t length = 0;
	char     msg[40];
	uint8_t  hdrLen;

	// calculate the IPv4 checksum
	cksm = ETH_RxComputeChecksum(sizeof(ipv4Header_t), 0);
    4fb8:	2100      	movs	r1, #0
    4fba:	2014      	movs	r0, #20
    4fbc:	4b56      	ldr	r3, [pc, #344]	; (5118 <IPV4_Packet+0x164>)
    4fbe:	4798      	blx	r3
	if (cksm != 0) {
    4fc0:	2800      	cmp	r0, #0
    4fc2:	d005      	beq.n	4fd0 <IPV4_Packet+0x1c>
		IPV4_SyslogWrite("IP Header wrong cksm");
    4fc4:	4855      	ldr	r0, [pc, #340]	; (511c <IPV4_Packet+0x168>)
    4fc6:	4b56      	ldr	r3, [pc, #344]	; (5120 <IPV4_Packet+0x16c>)
    4fc8:	4798      	blx	r3
		return IPV4_CHECKSUM_FAILS;
    4fca:	2007      	movs	r0, #7
		IPV4_Sprintf(msg, "ip address : %X", (unsigned int)ipv4Header.dstIpAddress);
		IPV4_SyslogWrite(msg);
		IPV4_SyslogWrite("DEST IP NOT MATCHED");
		return DEST_IP_NOT_MATCHED;
	}
}
    4fcc:	b00b      	add	sp, #44	; 0x2c
    4fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ETH_ReadBlock((char *)&ipv4Header, sizeof(ipv4Header_t));
    4fd0:	4c54      	ldr	r4, [pc, #336]	; (5124 <IPV4_Packet+0x170>)
    4fd2:	2114      	movs	r1, #20
    4fd4:	0020      	movs	r0, r4
    4fd6:	4b54      	ldr	r3, [pc, #336]	; (5128 <IPV4_Packet+0x174>)
    4fd8:	4798      	blx	r3
	if (ipv4Header.version != 4) {
    4fda:	7823      	ldrb	r3, [r4, #0]
    4fdc:	220f      	movs	r2, #15
    4fde:	4393      	bics	r3, r2
    4fe0:	2b40      	cmp	r3, #64	; 0x40
    4fe2:	d001      	beq.n	4fe8 <IPV4_Packet+0x34>
		return IP_WRONG_VERSION; // Incorrect version number
    4fe4:	2006      	movs	r0, #6
    4fe6:	e7f1      	b.n	4fcc <IPV4_Packet+0x18>
	ipv4Header.dstIpAddress = ntohl(ipv4Header.dstIpAddress);
    4fe8:	484e      	ldr	r0, [pc, #312]	; (5124 <IPV4_Packet+0x170>)
    4fea:	6901      	ldr	r1, [r0, #16]
    4fec:	0e0a      	lsrs	r2, r1, #24
    4fee:	0a0b      	lsrs	r3, r1, #8
    4ff0:	27ff      	movs	r7, #255	; 0xff
    4ff2:	023f      	lsls	r7, r7, #8
    4ff4:	403b      	ands	r3, r7
    4ff6:	431a      	orrs	r2, r3
    4ff8:	020c      	lsls	r4, r1, #8
    4ffa:	26ff      	movs	r6, #255	; 0xff
    4ffc:	0436      	lsls	r6, r6, #16
    4ffe:	4034      	ands	r4, r6
    5000:	4322      	orrs	r2, r4
    5002:	0609      	lsls	r1, r1, #24
    5004:	430a      	orrs	r2, r1
    5006:	6102      	str	r2, [r0, #16]
	ipv4Header.srcIpAddress = ntohl(ipv4Header.srcIpAddress);
    5008:	68c1      	ldr	r1, [r0, #12]
    500a:	0e0b      	lsrs	r3, r1, #24
    500c:	0a0d      	lsrs	r5, r1, #8
    500e:	403d      	ands	r5, r7
    5010:	432b      	orrs	r3, r5
    5012:	020c      	lsls	r4, r1, #8
    5014:	4034      	ands	r4, r6
    5016:	4323      	orrs	r3, r4
    5018:	0609      	lsls	r1, r1, #24
    501a:	430b      	orrs	r3, r1
    501c:	60c3      	str	r3, [r0, #12]
	if ((ipv4Header.dstIpAddress == ipv4Address) || (ipv4Header.dstIpAddress == IPV4_BROADCAST)) {
    501e:	4b43      	ldr	r3, [pc, #268]	; (512c <IPV4_Packet+0x178>)
    5020:	681b      	ldr	r3, [r3, #0]
    5022:	429a      	cmp	r2, r3
    5024:	d00c      	beq.n	5040 <IPV4_Packet+0x8c>
    5026:	1c53      	adds	r3, r2, #1
    5028:	d00a      	beq.n	5040 <IPV4_Packet+0x8c>
		IPV4_Sprintf(msg, "ip address : %X", (unsigned int)ipv4Header.dstIpAddress);
    502a:	4941      	ldr	r1, [pc, #260]	; (5130 <IPV4_Packet+0x17c>)
    502c:	4668      	mov	r0, sp
    502e:	4b41      	ldr	r3, [pc, #260]	; (5134 <IPV4_Packet+0x180>)
    5030:	4798      	blx	r3
		IPV4_SyslogWrite(msg);
    5032:	4668      	mov	r0, sp
    5034:	4c3a      	ldr	r4, [pc, #232]	; (5120 <IPV4_Packet+0x16c>)
    5036:	47a0      	blx	r4
		IPV4_SyslogWrite("DEST IP NOT MATCHED");
    5038:	483f      	ldr	r0, [pc, #252]	; (5138 <IPV4_Packet+0x184>)
    503a:	47a0      	blx	r4
		return DEST_IP_NOT_MATCHED;
    503c:	2008      	movs	r0, #8
    503e:	e7c5      	b.n	4fcc <IPV4_Packet+0x18>
		ipv4Header.length = ntohs(ipv4Header.length);
    5040:	4a38      	ldr	r2, [pc, #224]	; (5124 <IPV4_Packet+0x170>)
    5042:	8853      	ldrh	r3, [r2, #2]
    5044:	0a19      	lsrs	r1, r3, #8
    5046:	021b      	lsls	r3, r3, #8
    5048:	430b      	orrs	r3, r1
    504a:	8053      	strh	r3, [r2, #2]
		hdrLen = (uint8_t)(ipv4Header.ihl << 2);
    504c:	7813      	ldrb	r3, [r2, #0]
    504e:	071b      	lsls	r3, r3, #28
    5050:	0f1b      	lsrs	r3, r3, #28
    5052:	009c      	lsls	r4, r3, #2
		if (ipv4Header.ihl > 5) {
    5054:	2b05      	cmp	r3, #5
    5056:	dc0d      	bgt.n	5074 <IPV4_Packet+0xc0>
		switch ((ipProtocolNumbers)ipv4Header.protocol) {
    5058:	4b32      	ldr	r3, [pc, #200]	; (5124 <IPV4_Packet+0x170>)
    505a:	7a5b      	ldrb	r3, [r3, #9]
    505c:	2b06      	cmp	r3, #6
    505e:	d03c      	beq.n	50da <IPV4_Packet+0x126>
    5060:	2b11      	cmp	r3, #17
    5062:	d028      	beq.n	50b6 <IPV4_Packet+0x102>
    5064:	2b01      	cmp	r3, #1
    5066:	d00b      	beq.n	5080 <IPV4_Packet+0xcc>
			ETH_Dump(ipv4Header.length);
    5068:	4b2e      	ldr	r3, [pc, #184]	; (5124 <IPV4_Packet+0x170>)
    506a:	8858      	ldrh	r0, [r3, #2]
    506c:	4b33      	ldr	r3, [pc, #204]	; (513c <IPV4_Packet+0x188>)
    506e:	4798      	blx	r3
		return SUCCESS;
    5070:	2001      	movs	r0, #1
			break;
    5072:	e7ab      	b.n	4fcc <IPV4_Packet+0x18>
			ETH_Dump((uint16_t)(hdrLen - sizeof(ipv4Header_t)));
    5074:	0020      	movs	r0, r4
    5076:	3814      	subs	r0, #20
    5078:	b280      	uxth	r0, r0
    507a:	4b30      	ldr	r3, [pc, #192]	; (513c <IPV4_Packet+0x188>)
    507c:	4798      	blx	r3
    507e:	e7eb      	b.n	5058 <IPV4_Packet+0xa4>
			IPV4_SyslogWrite("rx icmp");
    5080:	482f      	ldr	r0, [pc, #188]	; (5140 <IPV4_Packet+0x18c>)
    5082:	4b27      	ldr	r3, [pc, #156]	; (5120 <IPV4_Packet+0x16c>)
    5084:	4798      	blx	r3
			length = ipv4Header.length - hdrLen;
    5086:	4b27      	ldr	r3, [pc, #156]	; (5124 <IPV4_Packet+0x170>)
    5088:	8858      	ldrh	r0, [r3, #2]
    508a:	1b00      	subs	r0, r0, r4
    508c:	b280      	uxth	r0, r0
			cksm   = ETH_RxComputeChecksum(length, 0);
    508e:	2100      	movs	r1, #0
    5090:	4b21      	ldr	r3, [pc, #132]	; (5118 <IPV4_Packet+0x164>)
    5092:	4798      	blx	r3
			if (cksm == 0) {
    5094:	2800      	cmp	r0, #0
    5096:	d009      	beq.n	50ac <IPV4_Packet+0xf8>
				IPV4_Sprintf(msg, "icmp wrong cksm : %x", cksm);
    5098:	0002      	movs	r2, r0
    509a:	492a      	ldr	r1, [pc, #168]	; (5144 <IPV4_Packet+0x190>)
    509c:	4668      	mov	r0, sp
    509e:	4b25      	ldr	r3, [pc, #148]	; (5134 <IPV4_Packet+0x180>)
    50a0:	4798      	blx	r3
				IPV4_SyslogWrite(msg);
    50a2:	4668      	mov	r0, sp
    50a4:	4b1e      	ldr	r3, [pc, #120]	; (5120 <IPV4_Packet+0x16c>)
    50a6:	4798      	blx	r3
				return ICMP_CHECKSUM_FAILS;
    50a8:	2009      	movs	r0, #9
    50aa:	e78f      	b.n	4fcc <IPV4_Packet+0x18>
				ICMP_Receive(&ipv4Header);
    50ac:	481d      	ldr	r0, [pc, #116]	; (5124 <IPV4_Packet+0x170>)
    50ae:	4b26      	ldr	r3, [pc, #152]	; (5148 <IPV4_Packet+0x194>)
    50b0:	4798      	blx	r3
		return SUCCESS;
    50b2:	2001      	movs	r0, #1
		} break;
    50b4:	e78a      	b.n	4fcc <IPV4_Packet+0x18>
			IPV4_SyslogWrite("rx udp");
    50b6:	4825      	ldr	r0, [pc, #148]	; (514c <IPV4_Packet+0x198>)
    50b8:	4b19      	ldr	r3, [pc, #100]	; (5120 <IPV4_Packet+0x16c>)
    50ba:	4798      	blx	r3
			length = ipv4Header.length - hdrLen;
    50bc:	4b19      	ldr	r3, [pc, #100]	; (5124 <IPV4_Packet+0x170>)
    50be:	885b      	ldrh	r3, [r3, #2]
    50c0:	1b1c      	subs	r4, r3, r4
    50c2:	b2a4      	uxth	r4, r4
			cksm = IPV4_PseudoHeaderChecksum(length); // Calculate pseudo header checksum
    50c4:	0020      	movs	r0, r4
    50c6:	4b22      	ldr	r3, [pc, #136]	; (5150 <IPV4_Packet+0x19c>)
    50c8:	4798      	blx	r3
    50ca:	0001      	movs	r1, r0
			cksm = ETH_RxComputeChecksum(
    50cc:	0020      	movs	r0, r4
    50ce:	4b12      	ldr	r3, [pc, #72]	; (5118 <IPV4_Packet+0x164>)
    50d0:	4798      	blx	r3
			UDP_Receive(cksm);
    50d2:	4b20      	ldr	r3, [pc, #128]	; (5154 <IPV4_Packet+0x1a0>)
    50d4:	4798      	blx	r3
		return SUCCESS;
    50d6:	2001      	movs	r0, #1
			break;
    50d8:	e778      	b.n	4fcc <IPV4_Packet+0x18>
			IPV4_SyslogWrite("rx tcp");
    50da:	481f      	ldr	r0, [pc, #124]	; (5158 <IPV4_Packet+0x1a4>)
    50dc:	4b10      	ldr	r3, [pc, #64]	; (5120 <IPV4_Packet+0x16c>)
    50de:	4798      	blx	r3
			length = ipv4Header.length - hdrLen;
    50e0:	4b10      	ldr	r3, [pc, #64]	; (5124 <IPV4_Packet+0x170>)
    50e2:	885b      	ldrh	r3, [r3, #2]
    50e4:	1b1c      	subs	r4, r3, r4
    50e6:	b2a4      	uxth	r4, r4
			cksm   = IPV4_PseudoHeaderChecksum(length);
    50e8:	0020      	movs	r0, r4
    50ea:	4b19      	ldr	r3, [pc, #100]	; (5150 <IPV4_Packet+0x19c>)
    50ec:	4798      	blx	r3
    50ee:	0001      	movs	r1, r0
			cksm   = ETH_RxComputeChecksum(length, cksm);
    50f0:	0020      	movs	r0, r4
    50f2:	4b09      	ldr	r3, [pc, #36]	; (5118 <IPV4_Packet+0x164>)
    50f4:	4798      	blx	r3
			if (cksm == 0) {
    50f6:	2800      	cmp	r0, #0
    50f8:	d108      	bne.n	510c <IPV4_Packet+0x158>
				remoteIpv4Address = ipv4Header.srcIpAddress;
    50fa:	4b0a      	ldr	r3, [pc, #40]	; (5124 <IPV4_Packet+0x170>)
    50fc:	68d8      	ldr	r0, [r3, #12]
    50fe:	4b17      	ldr	r3, [pc, #92]	; (515c <IPV4_Packet+0x1a8>)
    5100:	6018      	str	r0, [r3, #0]
				TCP_Recv(remoteIpv4Address, length);
    5102:	0021      	movs	r1, r4
    5104:	4b16      	ldr	r3, [pc, #88]	; (5160 <IPV4_Packet+0x1ac>)
    5106:	4798      	blx	r3
		return SUCCESS;
    5108:	2001      	movs	r0, #1
    510a:	e75f      	b.n	4fcc <IPV4_Packet+0x18>
				IPV4_SyslogWrite("rx bad tcp cksm");
    510c:	4815      	ldr	r0, [pc, #84]	; (5164 <IPV4_Packet+0x1b0>)
    510e:	4b04      	ldr	r3, [pc, #16]	; (5120 <IPV4_Packet+0x16c>)
    5110:	4798      	blx	r3
		return SUCCESS;
    5112:	2001      	movs	r0, #1
    5114:	e75a      	b.n	4fcc <IPV4_Packet+0x18>
    5116:	46c0      	nop			; (mov r8, r8)
    5118:	000047ad 	.word	0x000047ad
    511c:	00008dd8 	.word	0x00008dd8
    5120:	00005403 	.word	0x00005403
    5124:	20004080 	.word	0x20004080
    5128:	00004285 	.word	0x00004285
    512c:	20004094 	.word	0x20004094
    5130:	00008e30 	.word	0x00008e30
    5134:	00007901 	.word	0x00007901
    5138:	00008e40 	.word	0x00008e40
    513c:	00004521 	.word	0x00004521
    5140:	00008df0 	.word	0x00008df0
    5144:	00008df8 	.word	0x00008df8
    5148:	00004f25 	.word	0x00004f25
    514c:	00008e10 	.word	0x00008e10
    5150:	00004f75 	.word	0x00004f75
    5154:	000064e9 	.word	0x000064e9
    5158:	00008e18 	.word	0x00008e18
    515c:	20004078 	.word	0x20004078
    5160:	00005f71 	.word	0x00005f71
    5164:	00008e20 	.word	0x00008e20

00005168 <IPv4_Start>:

error_msg IPv4_Start(uint32_t destAddress, ipProtocolNumbers protocol)
{
    5168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    516a:	46ce      	mov	lr, r9
    516c:	4647      	mov	r7, r8
    516e:	b580      	push	{r7, lr}
    5170:	0006      	movs	r6, r0
    5172:	000d      	movs	r5, r1
	// get the dest mac address
	const mac48Address_t *macAddress;
	uint32_t              targetAddress;

	// Check if we have a valid IPadress and if it's different then 127.0.0.1
	if (((ipv4Address != 0) || (protocol == UDP)) && (ipv4Address != 0x7F000001)) {
    5174:	4b27      	ldr	r3, [pc, #156]	; (5214 <IPv4_Start+0xac>)
    5176:	681b      	ldr	r3, [r3, #0]
    5178:	2b00      	cmp	r3, #0
    517a:	d103      	bne.n	5184 <IPv4_Start+0x1c>
    517c:	2911      	cmp	r1, #17
    517e:	d001      	beq.n	5184 <IPv4_Start+0x1c>
	error_msg ret = ERROR;
    5180:	2400      	movs	r4, #0
    5182:	e017      	b.n	51b4 <IPv4_Start+0x4c>
	if (((ipv4Address != 0) || (protocol == UDP)) && (ipv4Address != 0x7F000001)) {
    5184:	4a24      	ldr	r2, [pc, #144]	; (5218 <IPv4_Start+0xb0>)
    5186:	4293      	cmp	r3, r2
    5188:	d041      	beq.n	520e <IPv4_Start+0xa6>
		if (destAddress != 0xFFFFFFFF) {
    518a:	1c72      	adds	r2, r6, #1
    518c:	d01e      	beq.n	51cc <IPv4_Start+0x64>
			if ((ipv4SubnetMask & destAddress) == (ipv4SubnetMask & ipv4Address)) // check for subnet
    518e:	4073      	eors	r3, r6
    5190:	4a22      	ldr	r2, [pc, #136]	; (521c <IPv4_Start+0xb4>)
    5192:	6812      	ldr	r2, [r2, #0]
    5194:	421a      	tst	r2, r3
    5196:	d012      	beq.n	51be <IPv4_Start+0x56>
			{
				targetAddress = destAddress;
			} else {
				targetAddress = ipv4Router;
    5198:	4b21      	ldr	r3, [pc, #132]	; (5220 <IPv4_Start+0xb8>)
    519a:	681c      	ldr	r4, [r3, #0]
			}

			macAddress = ARPV4_Lookup(targetAddress);
    519c:	0020      	movs	r0, r4
    519e:	4b21      	ldr	r3, [pc, #132]	; (5224 <IPv4_Start+0xbc>)
    51a0:	4798      	blx	r3
			if (macAddress == 0) {
    51a2:	2800      	cmp	r0, #0
    51a4:	d00d      	beq.n	51c2 <IPv4_Start+0x5a>
				return ret;
			}
		} else {
			macAddress = &broadcastMAC;
		}
		ret = ETH_WriteStart(macAddress, ETHERTYPE_IPV4);
    51a6:	2180      	movs	r1, #128	; 0x80
    51a8:	0109      	lsls	r1, r1, #4
    51aa:	4b1f      	ldr	r3, [pc, #124]	; (5228 <IPv4_Start+0xc0>)
    51ac:	4798      	blx	r3
    51ae:	0004      	movs	r4, r0
		if (ret == SUCCESS) {
    51b0:	2801      	cmp	r0, #1
    51b2:	d00d      	beq.n	51d0 <IPv4_Start+0x68>
			ipv4Header.dstIpAddress = destAddress;
			ipv4Header.protocol     = protocol;
		}
	}
	return ret;
}
    51b4:	0020      	movs	r0, r4
    51b6:	bc0c      	pop	{r2, r3}
    51b8:	4690      	mov	r8, r2
    51ba:	4699      	mov	r9, r3
    51bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				targetAddress = destAddress;
    51be:	0034      	movs	r4, r6
    51c0:	e7ec      	b.n	519c <IPv4_Start+0x34>
				ret = ARPV4_Request(targetAddress); // schedule an arp request
    51c2:	0020      	movs	r0, r4
    51c4:	4b19      	ldr	r3, [pc, #100]	; (522c <IPv4_Start+0xc4>)
    51c6:	4798      	blx	r3
    51c8:	0004      	movs	r4, r0
				return ret;
    51ca:	e7f3      	b.n	51b4 <IPv4_Start+0x4c>
			macAddress = &broadcastMAC;
    51cc:	4818      	ldr	r0, [pc, #96]	; (5230 <IPv4_Start+0xc8>)
    51ce:	e7ea      	b.n	51a6 <IPv4_Start+0x3e>
			ETH_Write16(0x4500);     // VERSION, IHL, DSCP, ECN
    51d0:	208a      	movs	r0, #138	; 0x8a
    51d2:	01c0      	lsls	r0, r0, #7
    51d4:	4b17      	ldr	r3, [pc, #92]	; (5234 <IPv4_Start+0xcc>)
    51d6:	4698      	mov	r8, r3
    51d8:	4798      	blx	r3
			ETH_Write16(0);          // total packet length
    51da:	2000      	movs	r0, #0
    51dc:	47c0      	blx	r8
			ETH_Write32(0xAA554000); // My IPV4 magic Number..., FLAGS, Fragment Offset
    51de:	4816      	ldr	r0, [pc, #88]	; (5238 <IPv4_Start+0xd0>)
    51e0:	4f16      	ldr	r7, [pc, #88]	; (523c <IPv4_Start+0xd4>)
    51e2:	47b8      	blx	r7
			ETH_Write8(IPv4_TTL);    // TTL
    51e4:	2040      	movs	r0, #64	; 0x40
    51e6:	4b16      	ldr	r3, [pc, #88]	; (5240 <IPv4_Start+0xd8>)
    51e8:	4699      	mov	r9, r3
    51ea:	4798      	blx	r3
			ETH_Write8(protocol);    // protocol
    51ec:	0028      	movs	r0, r5
    51ee:	47c8      	blx	r9
			ETH_Write16(0);          // checksum. set to zero and overwrite with correct value
    51f0:	2000      	movs	r0, #0
    51f2:	47c0      	blx	r8
			ETH_Write32(ipv4Address);
    51f4:	4b07      	ldr	r3, [pc, #28]	; (5214 <IPv4_Start+0xac>)
    51f6:	4698      	mov	r8, r3
    51f8:	6818      	ldr	r0, [r3, #0]
    51fa:	47b8      	blx	r7
			ETH_Write32(destAddress);
    51fc:	0030      	movs	r0, r6
    51fe:	47b8      	blx	r7
			ipv4Header.srcIpAddress = ipv4Address;
    5200:	4b10      	ldr	r3, [pc, #64]	; (5244 <IPv4_Start+0xdc>)
    5202:	4642      	mov	r2, r8
    5204:	6812      	ldr	r2, [r2, #0]
    5206:	60da      	str	r2, [r3, #12]
			ipv4Header.dstIpAddress = destAddress;
    5208:	611e      	str	r6, [r3, #16]
			ipv4Header.protocol     = protocol;
    520a:	725d      	strb	r5, [r3, #9]
    520c:	e7d2      	b.n	51b4 <IPv4_Start+0x4c>
	error_msg ret = ERROR;
    520e:	2400      	movs	r4, #0
    5210:	e7d0      	b.n	51b4 <IPv4_Start+0x4c>
    5212:	46c0      	nop			; (mov r8, r8)
    5214:	20004094 	.word	0x20004094
    5218:	7f000001 	.word	0x7f000001
    521c:	2000407c 	.word	0x2000407c
    5220:	20004074 	.word	0x20004074
    5224:	00004aed 	.word	0x00004aed
    5228:	000043d9 	.word	0x000043d9
    522c:	00004a3d 	.word	0x00004a3d
    5230:	00008e5c 	.word	0x00008e5c
    5234:	00004309 	.word	0x00004309
    5238:	aa554000 	.word	0xaa554000
    523c:	00004341 	.word	0x00004341
    5240:	000042d9 	.word	0x000042d9
    5244:	20004080 	.word	0x20004080

00005248 <IPV4_Send>:

error_msg IPV4_Send(uint16_t payloadLength)
{
    5248:	b510      	push	{r4, lr}
    524a:	b082      	sub	sp, #8
	uint16_t  totalLength;
	uint16_t  cksm;
	error_msg ret;

	totalLength = 20 + payloadLength;
    524c:	3014      	adds	r0, #20
    524e:	b280      	uxth	r0, r0
	totalLength = ntohs(totalLength);
    5250:	0a03      	lsrs	r3, r0, #8
    5252:	0200      	lsls	r0, r0, #8
    5254:	4318      	orrs	r0, r3
    5256:	466b      	mov	r3, sp
    5258:	80d8      	strh	r0, [r3, #6]
    525a:	3306      	adds	r3, #6

	// Insert IPv4 Total Length
	ETH_Insert((char *)&totalLength, 2, sizeof(ethernetFrame_t) + offsetof(ipv4Header_t, length));
    525c:	2210      	movs	r2, #16
    525e:	2102      	movs	r1, #2
    5260:	0018      	movs	r0, r3
    5262:	4c08      	ldr	r4, [pc, #32]	; (5284 <IPV4_Send+0x3c>)
    5264:	47a0      	blx	r4

	cksm = ETH_TxComputeChecksum(sizeof(ethernetFrame_t), sizeof(ipv4Header_t), 0);
    5266:	2200      	movs	r2, #0
    5268:	2114      	movs	r1, #20
    526a:	200e      	movs	r0, #14
    526c:	4b06      	ldr	r3, [pc, #24]	; (5288 <IPV4_Send+0x40>)
    526e:	4798      	blx	r3
    5270:	ab01      	add	r3, sp, #4
    5272:	8018      	strh	r0, [r3, #0]
	// Insert Ipv4 Header Checksum
	ETH_Insert((char *)&cksm, 2, sizeof(ethernetFrame_t) + offsetof(ipv4Header_t, headerCksm));
    5274:	2218      	movs	r2, #24
    5276:	2102      	movs	r1, #2
    5278:	0018      	movs	r0, r3
    527a:	47a0      	blx	r4
	ret = ETH_Send();
    527c:	4b03      	ldr	r3, [pc, #12]	; (528c <IPV4_Send+0x44>)
    527e:	4798      	blx	r3

	return ret;
}
    5280:	b002      	add	sp, #8
    5282:	bd10      	pop	{r4, pc}
    5284:	000045ad 	.word	0x000045ad
    5288:	00004709 	.word	0x00004709
    528c:	000044c9 	.word	0x000044c9

00005290 <IPV4_GetMyIP>:

uint32_t IPV4_GetMyIP(void)
{
	return (ipv4Address);
    5290:	4b01      	ldr	r3, [pc, #4]	; (5298 <IPV4_GetMyIP+0x8>)
    5292:	6818      	ldr	r0, [r3, #0]
}
    5294:	4770      	bx	lr
    5296:	46c0      	nop			; (mov r8, r8)
    5298:	20004094 	.word	0x20004094

0000529c <Network_Init>:
#else
#define NET_SyslogWrite(x)
#endif

void Network_Init(void)
{
    529c:	b510      	push	{r4, lr}
	ETH_Init();
    529e:	4b08      	ldr	r3, [pc, #32]	; (52c0 <Network_Init+0x24>)
    52a0:	4798      	blx	r3
	ARPV4_Init();
    52a2:	4b08      	ldr	r3, [pc, #32]	; (52c4 <Network_Init+0x28>)
    52a4:	4798      	blx	r3
	IPV4_Init();
    52a6:	4b08      	ldr	r3, [pc, #32]	; (52c8 <Network_Init+0x2c>)
    52a8:	4798      	blx	r3
	TCP_Init();
    52aa:	4b08      	ldr	r3, [pc, #32]	; (52cc <Network_Init+0x30>)
    52ac:	4798      	blx	r3

	time(&arpTimer);
    52ae:	4c08      	ldr	r4, [pc, #32]	; (52d0 <Network_Init+0x34>)
    52b0:	0020      	movs	r0, r4
    52b2:	4b08      	ldr	r3, [pc, #32]	; (52d4 <Network_Init+0x38>)
    52b4:	4798      	blx	r3
	arpTimer += 10;
    52b6:	6823      	ldr	r3, [r4, #0]
    52b8:	330a      	adds	r3, #10
    52ba:	6023      	str	r3, [r4, #0]
}
    52bc:	bd10      	pop	{r4, pc}
    52be:	46c0      	nop			; (mov r8, r8)
    52c0:	00003f89 	.word	0x00003f89
    52c4:	00004865 	.word	0x00004865
    52c8:	00004f69 	.word	0x00004f69
    52cc:	0000612d 	.word	0x0000612d
    52d0:	200040a0 	.word	0x200040a0
    52d4:	00007ab9 	.word	0x00007ab9

000052d8 <Network_Read>:
	}
	nowPv = now;
}

void Network_Read(void)
{
    52d8:	b510      	push	{r4, lr}
    52da:	b098      	sub	sp, #96	; 0x60
	ethernetFrame_t header;
	char            debug_str[80];

	if (ETH_packetReady()) {
    52dc:	4b1f      	ldr	r3, [pc, #124]	; (535c <Network_Read+0x84>)
    52de:	681b      	ldr	r3, [r3, #0]
    52e0:	079b      	lsls	r3, r3, #30
    52e2:	d401      	bmi.n	52e8 <Network_Read+0x10>
			NET_SyslogWrite(debug_str);
			break;
		}
		ETH_Flush();
	}
}
    52e4:	b018      	add	sp, #96	; 0x60
    52e6:	bd10      	pop	{r4, pc}
		ETH_NextPacketUpdate();
    52e8:	4b1d      	ldr	r3, [pc, #116]	; (5360 <Network_Read+0x88>)
    52ea:	4798      	blx	r3
		ETH_ReadBlock((char *)&header, sizeof(header));
    52ec:	ac14      	add	r4, sp, #80	; 0x50
    52ee:	210e      	movs	r1, #14
    52f0:	0020      	movs	r0, r4
    52f2:	4b1c      	ldr	r3, [pc, #112]	; (5364 <Network_Read+0x8c>)
    52f4:	4798      	blx	r3
		header.id.type = ntohs(header.id.type); // reverse the type field
    52f6:	89a3      	ldrh	r3, [r4, #12]
    52f8:	0a1a      	lsrs	r2, r3, #8
    52fa:	021b      	lsls	r3, r3, #8
    52fc:	431a      	orrs	r2, r3
    52fe:	b292      	uxth	r2, r2
    5300:	81a2      	strh	r2, [r4, #12]
		switch (header.id.type) {
    5302:	4b19      	ldr	r3, [pc, #100]	; (5368 <Network_Read+0x90>)
    5304:	429a      	cmp	r2, r3
    5306:	d01a      	beq.n	533e <Network_Read+0x66>
    5308:	d90a      	bls.n	5320 <Network_Read+0x48>
    530a:	2381      	movs	r3, #129	; 0x81
    530c:	021b      	lsls	r3, r3, #8
    530e:	429a      	cmp	r2, r3
    5310:	d00f      	beq.n	5332 <Network_Read+0x5a>
    5312:	4b16      	ldr	r3, [pc, #88]	; (536c <Network_Read+0x94>)
    5314:	429a      	cmp	r2, r3
    5316:	d118      	bne.n	534a <Network_Read+0x72>
			NET_SyslogWrite("IPV6 Packet Dropped");
    5318:	4815      	ldr	r0, [pc, #84]	; (5370 <Network_Read+0x98>)
    531a:	4b16      	ldr	r3, [pc, #88]	; (5374 <Network_Read+0x9c>)
    531c:	4798      	blx	r3
			break;
    531e:	e00b      	b.n	5338 <Network_Read+0x60>
		switch (header.id.type) {
    5320:	3b06      	subs	r3, #6
    5322:	429a      	cmp	r2, r3
    5324:	d111      	bne.n	534a <Network_Read+0x72>
			NET_SyslogWrite("RX IPV4 Packet");
    5326:	4814      	ldr	r0, [pc, #80]	; (5378 <Network_Read+0xa0>)
    5328:	4b12      	ldr	r3, [pc, #72]	; (5374 <Network_Read+0x9c>)
    532a:	4798      	blx	r3
			IPV4_Packet();
    532c:	4b13      	ldr	r3, [pc, #76]	; (537c <Network_Read+0xa4>)
    532e:	4798      	blx	r3
			break;
    5330:	e002      	b.n	5338 <Network_Read+0x60>
			NET_SyslogWrite("VLAN Packet Dropped");
    5332:	4813      	ldr	r0, [pc, #76]	; (5380 <Network_Read+0xa8>)
    5334:	4b0f      	ldr	r3, [pc, #60]	; (5374 <Network_Read+0x9c>)
    5336:	4798      	blx	r3
		ETH_Flush();
    5338:	4b12      	ldr	r3, [pc, #72]	; (5384 <Network_Read+0xac>)
    533a:	4798      	blx	r3
}
    533c:	e7d2      	b.n	52e4 <Network_Read+0xc>
			NET_SyslogWrite("RX ARPV4 Packet");
    533e:	4812      	ldr	r0, [pc, #72]	; (5388 <Network_Read+0xb0>)
    5340:	4b0c      	ldr	r3, [pc, #48]	; (5374 <Network_Read+0x9c>)
    5342:	4798      	blx	r3
			ARPV4_Packet();
    5344:	4b11      	ldr	r3, [pc, #68]	; (538c <Network_Read+0xb4>)
    5346:	4798      	blx	r3
			break;
    5348:	e7f6      	b.n	5338 <Network_Read+0x60>
			sprintf(debug_str, "%x : %d", header.id.type, header.id.length);
    534a:	0013      	movs	r3, r2
    534c:	4910      	ldr	r1, [pc, #64]	; (5390 <Network_Read+0xb8>)
    534e:	4668      	mov	r0, sp
    5350:	4c10      	ldr	r4, [pc, #64]	; (5394 <Network_Read+0xbc>)
    5352:	47a0      	blx	r4
			NET_SyslogWrite(debug_str);
    5354:	4668      	mov	r0, sp
    5356:	4b07      	ldr	r3, [pc, #28]	; (5374 <Network_Read+0x9c>)
    5358:	4798      	blx	r3
			break;
    535a:	e7ed      	b.n	5338 <Network_Read+0x60>
    535c:	20004000 	.word	0x20004000
    5360:	00003ec1 	.word	0x00003ec1
    5364:	00004285 	.word	0x00004285
    5368:	00000806 	.word	0x00000806
    536c:	000086dd 	.word	0x000086dd
    5370:	00008e98 	.word	0x00008e98
    5374:	00005403 	.word	0x00005403
    5378:	00008e88 	.word	0x00008e88
    537c:	00004fb5 	.word	0x00004fb5
    5380:	00008e64 	.word	0x00008e64
    5384:	0000455d 	.word	0x0000455d
    5388:	00008e78 	.word	0x00008e78
    538c:	00004881 	.word	0x00004881
    5390:	00008eac 	.word	0x00008eac
    5394:	00007901 	.word	0x00007901

00005398 <Network_Manage>:
{
    5398:	b500      	push	{lr}
    539a:	b083      	sub	sp, #12
	ETH_EventHandler();
    539c:	4b10      	ldr	r3, [pc, #64]	; (53e0 <Network_Manage+0x48>)
    539e:	4798      	blx	r3
	Network_Read(); // handle any packets that have arrived...
    53a0:	4b10      	ldr	r3, [pc, #64]	; (53e4 <Network_Manage+0x4c>)
    53a2:	4798      	blx	r3
	time(&now);
    53a4:	a801      	add	r0, sp, #4
    53a6:	4b10      	ldr	r3, [pc, #64]	; (53e8 <Network_Manage+0x50>)
    53a8:	4798      	blx	r3
	if (now >= arpTimer) {
    53aa:	4b10      	ldr	r3, [pc, #64]	; (53ec <Network_Manage+0x54>)
    53ac:	681b      	ldr	r3, [r3, #0]
    53ae:	9a01      	ldr	r2, [sp, #4]
    53b0:	429a      	cmp	r2, r3
    53b2:	da09      	bge.n	53c8 <Network_Manage+0x30>
	if (now > nowPv) // at least 1 second has elapsed
    53b4:	4b0e      	ldr	r3, [pc, #56]	; (53f0 <Network_Manage+0x58>)
    53b6:	681b      	ldr	r3, [r3, #0]
    53b8:	9a01      	ldr	r2, [sp, #4]
    53ba:	429a      	cmp	r2, r3
    53bc:	dc0b      	bgt.n	53d6 <Network_Manage+0x3e>
	nowPv = now;
    53be:	4b0c      	ldr	r3, [pc, #48]	; (53f0 <Network_Manage+0x58>)
    53c0:	9a01      	ldr	r2, [sp, #4]
    53c2:	601a      	str	r2, [r3, #0]
}
    53c4:	b003      	add	sp, #12
    53c6:	bd00      	pop	{pc}
		ARPV4_Update();
    53c8:	4b0a      	ldr	r3, [pc, #40]	; (53f4 <Network_Manage+0x5c>)
    53ca:	4798      	blx	r3
		arpTimer += 10;
    53cc:	4a07      	ldr	r2, [pc, #28]	; (53ec <Network_Manage+0x54>)
    53ce:	6813      	ldr	r3, [r2, #0]
    53d0:	330a      	adds	r3, #10
    53d2:	6013      	str	r3, [r2, #0]
    53d4:	e7ee      	b.n	53b4 <Network_Manage+0x1c>
		DHCP_Manage(); // update the DHCP status every second
    53d6:	4b08      	ldr	r3, [pc, #32]	; (53f8 <Network_Manage+0x60>)
    53d8:	4798      	blx	r3
		TCP_Update(); // handle timeouts
    53da:	4b08      	ldr	r3, [pc, #32]	; (53fc <Network_Manage+0x64>)
    53dc:	4798      	blx	r3
    53de:	e7ee      	b.n	53be <Network_Manage+0x26>
    53e0:	000040d9 	.word	0x000040d9
    53e4:	000052d9 	.word	0x000052d9
    53e8:	00007ab9 	.word	0x00007ab9
    53ec:	200040a0 	.word	0x200040a0
    53f0:	200008b8 	.word	0x200008b8
    53f4:	00004a21 	.word	0x00004a21
    53f8:	00004c79 	.word	0x00004c79
    53fc:	00006395 	.word	0x00006395

00005400 <SYSLOG_Init>:
#if ENABLE_SYSLOG_DEBUG
	unsigned long t = time(0);

	printf("\r\n\r\nStarting Syslog at %lu\r\n", t);
#endif
}
    5400:	4770      	bx	lr

00005402 <SYSLOG_Write>:
{
#if ENABLE_SYSLOG_DEBUG
	unsigned int t = (unsigned int)time(0); // only printing the LSW of the time
	printf("%u : %s\r\n", t, message);
#endif
}
    5402:	4770      	bx	lr

00005404 <TCB_Insert>:
 */
static void TCB_Insert(tcpTCB_t *ptr)
{
	// Insert the new TCB at the head of the list.
	// This prevents a list traversal and saves time.
	if (tcbList != NULL) {
    5404:	4b07      	ldr	r3, [pc, #28]	; (5424 <TCB_Insert+0x20>)
    5406:	681b      	ldr	r3, [r3, #0]
    5408:	2b00      	cmp	r3, #0
    540a:	d000      	beq.n	540e <TCB_Insert+0xa>
		// link this TCB as the previous one for the top of the list
		tcbList->prevTCB = ptr;
    540c:	6458      	str	r0, [r3, #68]	; 0x44
	}
	ptr->nextTCB = tcbList; // put the existing list at the end of this tcb...
    540e:	6403      	str	r3, [r0, #64]	; 0x40
	tcbList      = ptr;     // put this tcb at the head of the list.
    5410:	4b04      	ldr	r3, [pc, #16]	; (5424 <TCB_Insert+0x20>)
    5412:	6018      	str	r0, [r3, #0]
	ptr->prevTCB = NULL;    // make sure that the upstream pointer is empty
    5414:	2300      	movs	r3, #0
    5416:	6443      	str	r3, [r0, #68]	; 0x44
	tcbListSize++;
    5418:	4a03      	ldr	r2, [pc, #12]	; (5428 <TCB_Insert+0x24>)
    541a:	7813      	ldrb	r3, [r2, #0]
    541c:	3301      	adds	r3, #1
    541e:	7013      	strb	r3, [r2, #0]
}
    5420:	4770      	bx	lr
    5422:	46c0      	nop			; (mov r8, r8)
    5424:	200040a8 	.word	0x200040a8
    5428:	200040ac 	.word	0x200040ac

0000542c <TCB_Remove>:
 * @return
 *      None
 */
static void TCB_Remove(tcpTCB_t *ptr)
{
	if (tcbListSize > 1) {
    542c:	4b0e      	ldr	r3, [pc, #56]	; (5468 <TCB_Remove+0x3c>)
    542e:	781b      	ldrb	r3, [r3, #0]
    5430:	b25b      	sxtb	r3, r3
    5432:	2b01      	cmp	r3, #1
    5434:	dd12      	ble.n	545c <TCB_Remove+0x30>
		// check if this is the first in list
		if (ptr->prevTCB == NULL) {
    5436:	6c43      	ldr	r3, [r0, #68]	; 0x44
    5438:	2b00      	cmp	r3, #0
    543a:	d009      	beq.n	5450 <TCB_Remove+0x24>
			tcbList                               = ptr->nextTCB;
			((tcpTCB_t *)(ptr->nextTCB))->prevTCB = NULL;
		} else {
			((tcpTCB_t *)(ptr->prevTCB))->nextTCB = ptr->nextTCB;
    543c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    543e:	641a      	str	r2, [r3, #64]	; 0x40
			((tcpTCB_t *)(ptr->nextTCB))->prevTCB = ptr->prevTCB;
    5440:	6c03      	ldr	r3, [r0, #64]	; 0x40
    5442:	6c42      	ldr	r2, [r0, #68]	; 0x44
    5444:	645a      	str	r2, [r3, #68]	; 0x44
		}
		tcbListSize--;
    5446:	4a08      	ldr	r2, [pc, #32]	; (5468 <TCB_Remove+0x3c>)
    5448:	7813      	ldrb	r3, [r2, #0]
    544a:	3b01      	subs	r3, #1
    544c:	7013      	strb	r3, [r2, #0]
	} else if (tcbListSize == 1) {
		tcbList = NULL;
	}
}
    544e:	4770      	bx	lr
			tcbList                               = ptr->nextTCB;
    5450:	6c03      	ldr	r3, [r0, #64]	; 0x40
    5452:	4a06      	ldr	r2, [pc, #24]	; (546c <TCB_Remove+0x40>)
    5454:	6013      	str	r3, [r2, #0]
			((tcpTCB_t *)(ptr->nextTCB))->prevTCB = NULL;
    5456:	2200      	movs	r2, #0
    5458:	645a      	str	r2, [r3, #68]	; 0x44
    545a:	e7f4      	b.n	5446 <TCB_Remove+0x1a>
	} else if (tcbListSize == 1) {
    545c:	2b01      	cmp	r3, #1
    545e:	d1f6      	bne.n	544e <TCB_Remove+0x22>
		tcbList = NULL;
    5460:	2200      	movs	r2, #0
    5462:	4b02      	ldr	r3, [pc, #8]	; (546c <TCB_Remove+0x40>)
    5464:	601a      	str	r2, [r3, #0]
}
    5466:	e7f2      	b.n	544e <TCB_Remove+0x22>
    5468:	200040ac 	.word	0x200040ac
    546c:	200040a8 	.word	0x200040a8

00005470 <TCB_Reset>:
 * @return
 *      None
 */
static void TCB_Reset(tcpTCB_t *tcbPtr)
{
	tcbPtr->destIP       = 0;
    5470:	2300      	movs	r3, #0
    5472:	6043      	str	r3, [r0, #4]
	tcbPtr->destPort     = 0;
    5474:	2200      	movs	r2, #0
    5476:	8103      	strh	r3, [r0, #8]
	tcbPtr->localSeqno   = 0;
    5478:	6143      	str	r3, [r0, #20]
	tcbPtr->localLastAck = 0;
    547a:	6183      	str	r3, [r0, #24]
	tcbPtr->remoteSeqno  = 0;
    547c:	60c3      	str	r3, [r0, #12]
	tcbPtr->remoteAck    = 0;
    547e:	6103      	str	r3, [r0, #16]
	tcbPtr->remoteWnd    = 0;
    5480:	8383      	strh	r3, [r0, #28]

	tcbPtr->timeout            = 0;
    5482:	2148      	movs	r1, #72	; 0x48
    5484:	5243      	strh	r3, [r0, r1]
	tcbPtr->timeoutReloadValue = 0;
    5486:	3102      	adds	r1, #2
    5488:	5243      	strh	r3, [r0, r1]
	tcbPtr->timeoutsCount      = 0;
    548a:	3102      	adds	r1, #2
    548c:	5442      	strb	r2, [r0, r1]
	tcbPtr->flags              = 0;
    548e:	3101      	adds	r1, #1
    5490:	5442      	strb	r2, [r0, r1]

	tcbPtr->localPort   = 0;
    5492:	8003      	strh	r3, [r0, #0]
	tcbPtr->socketState = SOCKET_CLOSED;
    5494:	2201      	movs	r2, #1
    5496:	334e      	adds	r3, #78	; 0x4e
    5498:	54c2      	strb	r2, [r0, r3]
}
    549a:	4770      	bx	lr

0000549c <TCB_Check>:
{
	tcpTCB_t *     tcbPtr;
	bool           ret   = false;
	socklistsize_t count = 0;

	if ((tcbList != NULL) && (ptr != NULL)) {
    549c:	4b0d      	ldr	r3, [pc, #52]	; (54d4 <TCB_Check+0x38>)
    549e:	681a      	ldr	r2, [r3, #0]
    54a0:	2a00      	cmp	r2, #0
    54a2:	d011      	beq.n	54c8 <TCB_Check+0x2c>
    54a4:	2800      	cmp	r0, #0
    54a6:	d014      	beq.n	54d2 <TCB_Check+0x36>
    54a8:	2300      	movs	r3, #0
		// search for ptr into the active TCB/sockets list
		tcbPtr = tcbList;
		while ((tcbPtr != NULL) && (count < tcbListSize)) {
    54aa:	2a00      	cmp	r2, #0
    54ac:	d010      	beq.n	54d0 <TCB_Check+0x34>
    54ae:	490a      	ldr	r1, [pc, #40]	; (54d8 <TCB_Check+0x3c>)
    54b0:	7809      	ldrb	r1, [r1, #0]
    54b2:	b249      	sxtb	r1, r1
    54b4:	428b      	cmp	r3, r1
    54b6:	da05      	bge.n	54c4 <TCB_Check+0x28>
			if (tcbPtr == ptr) {
    54b8:	4282      	cmp	r2, r0
    54ba:	d007      	beq.n	54cc <TCB_Check+0x30>
				ret = true;
				break;
			} else {
				tcbPtr = tcbPtr->nextTCB;
    54bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
				count++;
    54be:	3301      	adds	r3, #1
    54c0:	b25b      	sxtb	r3, r3
    54c2:	e7f2      	b.n	54aa <TCB_Check+0xe>
	bool           ret   = false;
    54c4:	2000      	movs	r0, #0
    54c6:	e004      	b.n	54d2 <TCB_Check+0x36>
    54c8:	2000      	movs	r0, #0
    54ca:	e002      	b.n	54d2 <TCB_Check+0x36>
				ret = true;
    54cc:	2001      	movs	r0, #1
    54ce:	e000      	b.n	54d2 <TCB_Check+0x36>
	bool           ret   = false;
    54d0:	2000      	movs	r0, #0
			}
		}
	}
	return ret;
}
    54d2:	4770      	bx	lr
    54d4:	200040a8 	.word	0x200040a8
    54d8:	200040ac 	.word	0x200040ac

000054dc <TCP_Snd>:
 *      true - The buffer was send successfully
 * @return
 *      false - Send buffer fails.
 */
static bool TCP_Snd(tcpTCB_t *tcbPtr)
{
    54dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    54de:	46c6      	mov	lr, r8
    54e0:	b500      	push	{lr}
    54e2:	b086      	sub	sp, #24
    54e4:	0004      	movs	r4, r0
	uint16_t    payloadLength;
	uint16_t    cksm;
	uint16_t    tcpDataLength;
	uint8_t *   data;

	txHeader.sourcePort = htons(tcbPtr->localPort);
    54e6:	8803      	ldrh	r3, [r0, #0]
    54e8:	0a1a      	lsrs	r2, r3, #8
    54ea:	021b      	lsls	r3, r3, #8
    54ec:	431a      	orrs	r2, r3
    54ee:	ab01      	add	r3, sp, #4
    54f0:	801a      	strh	r2, [r3, #0]
	txHeader.destPort   = htons(tcbPtr->destPort);
    54f2:	8902      	ldrh	r2, [r0, #8]
    54f4:	0a11      	lsrs	r1, r2, #8
    54f6:	0212      	lsls	r2, r2, #8
    54f8:	430a      	orrs	r2, r1
    54fa:	805a      	strh	r2, [r3, #2]

	txHeader.sequenceNumber = htonl(tcbPtr->localSeqno);
    54fc:	6940      	ldr	r0, [r0, #20]
    54fe:	0e01      	lsrs	r1, r0, #24
    5500:	0a02      	lsrs	r2, r0, #8
    5502:	27ff      	movs	r7, #255	; 0xff
    5504:	023f      	lsls	r7, r7, #8
    5506:	403a      	ands	r2, r7
    5508:	4311      	orrs	r1, r2
    550a:	0202      	lsls	r2, r0, #8
    550c:	26ff      	movs	r6, #255	; 0xff
    550e:	0436      	lsls	r6, r6, #16
    5510:	4032      	ands	r2, r6
    5512:	4311      	orrs	r1, r2
    5514:	0600      	lsls	r0, r0, #24
    5516:	4301      	orrs	r1, r0
    5518:	9102      	str	r1, [sp, #8]

	txHeader.ackNumber = htonl(tcbPtr->remoteAck); // ask for next packet
    551a:	6921      	ldr	r1, [r4, #16]
    551c:	0e0a      	lsrs	r2, r1, #24
    551e:	0a08      	lsrs	r0, r1, #8
    5520:	4038      	ands	r0, r7
    5522:	4302      	orrs	r2, r0
    5524:	0208      	lsls	r0, r1, #8
    5526:	4030      	ands	r0, r6
    5528:	4302      	orrs	r2, r0
    552a:	0609      	lsls	r1, r1, #24
    552c:	430a      	orrs	r2, r1
    552e:	9203      	str	r2, [sp, #12]

	txHeader.ns         = 0; // make sure we clean unused fields
    5530:	7b1a      	ldrb	r2, [r3, #12]
	txHeader.reserved   = 0; // make sure we clean unused fields
    5532:	2101      	movs	r1, #1
    5534:	438a      	bics	r2, r1
	txHeader.dataOffset = 5; // We don't support options for now
    5536:	310d      	adds	r1, #13
    5538:	438a      	bics	r2, r1
    553a:	0011      	movs	r1, r2
    553c:	220f      	movs	r2, #15
    553e:	400a      	ands	r2, r1
    5540:	2150      	movs	r1, #80	; 0x50
    5542:	430a      	orrs	r2, r1
    5544:	731a      	strb	r2, [r3, #12]
	txHeader.windowSize = htons(tcbPtr->localWnd);
    5546:	8be2      	ldrh	r2, [r4, #30]
    5548:	0a11      	lsrs	r1, r2, #8
    554a:	0212      	lsls	r2, r2, #8
    554c:	430a      	orrs	r2, r1
    554e:	81da      	strh	r2, [r3, #14]
	txHeader.checksum   = 0;
    5550:	2200      	movs	r2, #0
    5552:	821a      	strh	r2, [r3, #16]
	txHeader.urgentPtr  = 0;
    5554:	825a      	strh	r2, [r3, #18]

	if ((tcbPtr->flags) & (TCP_SYN_FLAG | TCP_RST_FLAG)) {
    5556:	234d      	movs	r3, #77	; 0x4d
    5558:	5ce3      	ldrb	r3, [r4, r3]
    555a:	3206      	adds	r2, #6
    555c:	421a      	tst	r2, r3
    555e:	d118      	bne.n	5592 <TCP_Snd+0xb6>
		tcpDataLength = 0; // SYN and RST packets doesn't have any payload
	} else {
		tcpDataLength = tcbPtr->bytesToSend;
    5560:	8f27      	ldrh	r7, [r4, #56]	; 0x38

		if (tcpDataLength != 0) {
    5562:	2f00      	cmp	r7, #0
    5564:	d016      	beq.n	5594 <TCP_Snd+0xb8>
			if (tcpDataLength > tcbPtr->remoteWnd) {
    5566:	8ba1      	ldrh	r1, [r4, #28]
    5568:	428f      	cmp	r7, r1
    556a:	d800      	bhi.n	556e <TCP_Snd+0x92>
		tcpDataLength = tcbPtr->bytesToSend;
    556c:	0039      	movs	r1, r7
				tcpDataLength = tcbPtr->remoteWnd;
			}

			if (tcpDataLength > tcbPtr->mss) {
    556e:	8c22      	ldrh	r2, [r4, #32]
    5570:	4291      	cmp	r1, r2
    5572:	d800      	bhi.n	5576 <TCP_Snd+0x9a>
    5574:	000a      	movs	r2, r1
				tcpDataLength = tcbPtr->mss;
			}
			data = tcbPtr->txBufferPtr;
    5576:	6b65      	ldr	r5, [r4, #52]	; 0x34

			// update the pointer to the next byte that needs to be sent
			tcbPtr->txBufferPtr = tcbPtr->txBufferPtr + tcpDataLength;
    5578:	18a9      	adds	r1, r5, r2
    557a:	6361      	str	r1, [r4, #52]	; 0x34
			tcbPtr->bytesToSend = tcbPtr->bytesToSend - tcpDataLength;
    557c:	1abf      	subs	r7, r7, r2
    557e:	b2bf      	uxth	r7, r7
    5580:	8727      	strh	r7, [r4, #56]	; 0x38

			if (tcbPtr->bytesToSend == 0) {
    5582:	2f00      	cmp	r7, #0
    5584:	d12a      	bne.n	55dc <TCP_Snd+0x100>
				tcbPtr->flags |= TCP_PSH_FLAG;
    5586:	2108      	movs	r1, #8
    5588:	430b      	orrs	r3, r1
    558a:	214d      	movs	r1, #77	; 0x4d
    558c:	5463      	strb	r3, [r4, r1]
    558e:	0017      	movs	r7, r2
    5590:	e000      	b.n	5594 <TCP_Snd+0xb8>
		tcpDataLength = 0; // SYN and RST packets doesn't have any payload
    5592:	2700      	movs	r7, #0
			}
		}
	}
	// update the TCP Flags
	txHeader.flags = tcbPtr->flags;
    5594:	234d      	movs	r3, #77	; 0x4d
    5596:	5ce2      	ldrb	r2, [r4, r3]
    5598:	ab01      	add	r3, sp, #4
    559a:	735a      	strb	r2, [r3, #13]
	payloadLength  = sizeof(tcpHeader_t) + tcpDataLength;
    559c:	0038      	movs	r0, r7
    559e:	3014      	adds	r0, #20
    55a0:	b283      	uxth	r3, r0
    55a2:	4698      	mov	r8, r3

	ret = IPv4_Start(tcbPtr->destIP, TCP);
    55a4:	2106      	movs	r1, #6
    55a6:	6860      	ldr	r0, [r4, #4]
    55a8:	4b23      	ldr	r3, [pc, #140]	; (5638 <TCP_Snd+0x15c>)
    55aa:	4798      	blx	r3
    55ac:	0006      	movs	r6, r0
    55ae:	1e73      	subs	r3, r6, #1
    55b0:	419e      	sbcs	r6, r3
    55b2:	b2f6      	uxtb	r6, r6
	if (ret) {
    55b4:	2800      	cmp	r0, #0
    55b6:	d113      	bne.n	55e0 <TCP_Snd+0x104>
		ret = IPV4_Send(payloadLength);
	}

	// The packet wasn't transmitted
	// Use the timeout to retry again later
	if (ret == false) {
    55b8:	2e00      	cmp	r6, #0
    55ba:	d135      	bne.n	5628 <TCP_Snd+0x14c>
		// make sure we keep the remaining timeouts and skip this send  that failed
		// try at least once
		tcbPtr->timeoutsCount = tcbPtr->timeoutsCount + 1;
    55bc:	224c      	movs	r2, #76	; 0x4c
    55be:	5ca3      	ldrb	r3, [r4, r2]
    55c0:	3301      	adds	r3, #1
    55c2:	54a3      	strb	r3, [r4, r2]

		if (tcbPtr->timeout == 0) {
    55c4:	2348      	movs	r3, #72	; 0x48
    55c6:	5ae3      	ldrh	r3, [r4, r3]
    55c8:	2b00      	cmp	r3, #0
    55ca:	d102      	bne.n	55d2 <TCP_Snd+0xf6>
			tcbPtr->timeout = TCP_START_TIMEOUT_VAL;
    55cc:	3a4a      	subs	r2, #74	; 0x4a
    55ce:	3348      	adds	r3, #72	; 0x48
    55d0:	52e2      	strh	r2, [r4, r3]
		tcbPtr->localSeqno = tcbPtr->localSeqno + tcpDataLength;
		TCP_SyslogWrite("tcp_packet sent");
	}

	return ret;
}
    55d2:	0030      	movs	r0, r6
    55d4:	b006      	add	sp, #24
    55d6:	bc04      	pop	{r2}
    55d8:	4690      	mov	r8, r2
    55da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55dc:	0017      	movs	r7, r2
    55de:	e7d9      	b.n	5594 <TCP_Snd+0xb8>
		ETH_WriteBlock((uint8_t *)&txHeader, sizeof(tcpHeader_t));
    55e0:	2114      	movs	r1, #20
    55e2:	a801      	add	r0, sp, #4
    55e4:	4b15      	ldr	r3, [pc, #84]	; (563c <TCP_Snd+0x160>)
    55e6:	4798      	blx	r3
		if (tcpDataLength > 0) {
    55e8:	2f00      	cmp	r7, #0
    55ea:	d118      	bne.n	561e <TCP_Snd+0x142>
		cksm = payloadLength + TCP;
    55ec:	003a      	movs	r2, r7
    55ee:	321a      	adds	r2, #26
    55f0:	b292      	uxth	r2, r2
    55f2:	466b      	mov	r3, sp
    55f4:	1c9d      	adds	r5, r3, #2
    55f6:	805a      	strh	r2, [r3, #2]
		cksm = ETH_TxComputeChecksum(sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) - 8, payloadLength + 8, cksm);
    55f8:	0039      	movs	r1, r7
    55fa:	311c      	adds	r1, #28
    55fc:	b289      	uxth	r1, r1
    55fe:	201a      	movs	r0, #26
    5600:	4b0f      	ldr	r3, [pc, #60]	; (5640 <TCP_Snd+0x164>)
    5602:	4798      	blx	r3
    5604:	8028      	strh	r0, [r5, #0]
		ETH_Insert((char *)&cksm, 2, sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) + offsetof(tcpHeader_t, checksum));
    5606:	2232      	movs	r2, #50	; 0x32
    5608:	2102      	movs	r1, #2
    560a:	0028      	movs	r0, r5
    560c:	4b0d      	ldr	r3, [pc, #52]	; (5644 <TCP_Snd+0x168>)
    560e:	4798      	blx	r3
		ret = IPV4_Send(payloadLength);
    5610:	4640      	mov	r0, r8
    5612:	4b0d      	ldr	r3, [pc, #52]	; (5648 <TCP_Snd+0x16c>)
    5614:	4798      	blx	r3
    5616:	1e46      	subs	r6, r0, #1
    5618:	41b0      	sbcs	r0, r6
    561a:	b2c6      	uxtb	r6, r0
    561c:	e7cc      	b.n	55b8 <TCP_Snd+0xdc>
			ETH_WriteBlock(data, tcpDataLength);
    561e:	0039      	movs	r1, r7
    5620:	0028      	movs	r0, r5
    5622:	4b06      	ldr	r3, [pc, #24]	; (563c <TCP_Snd+0x160>)
    5624:	4798      	blx	r3
    5626:	e7e1      	b.n	55ec <TCP_Snd+0x110>
		tcbPtr->localSeqno = tcbPtr->localSeqno + tcpDataLength;
    5628:	6963      	ldr	r3, [r4, #20]
    562a:	469c      	mov	ip, r3
    562c:	4467      	add	r7, ip
    562e:	6167      	str	r7, [r4, #20]
		TCP_SyslogWrite("tcp_packet sent");
    5630:	4806      	ldr	r0, [pc, #24]	; (564c <TCP_Snd+0x170>)
    5632:	4b07      	ldr	r3, [pc, #28]	; (5650 <TCP_Snd+0x174>)
    5634:	4798      	blx	r3
    5636:	e7cc      	b.n	55d2 <TCP_Snd+0xf6>
    5638:	00005169 	.word	0x00005169
    563c:	00004389 	.word	0x00004389
    5640:	00004709 	.word	0x00004709
    5644:	000045ad 	.word	0x000045ad
    5648:	00005249 	.word	0x00005249
    564c:	00008f7c 	.word	0x00008f7c
    5650:	00005403 	.word	0x00005403

00005654 <TCP_ParseTCPOptions>:
 *      true - parsing the options filed was successfully
 * @return
 *      false - parsing the options filed was failed.
 */
static bool TCP_ParseTCPOptions(void)
{
    5654:	b570      	push	{r4, r5, r6, lr}
	uint16_t tcpOptionsSize;
	bool     ret;

	ret = false;
	// Check for the option fields in TCP header
	tcpOptionsSize = (uint16_t)((tcpHeader.dataOffset << 2) - sizeof(tcpHeader_t));
    5656:	4b37      	ldr	r3, [pc, #220]	; (5734 <TCP_ParseTCPOptions+0xe0>)
    5658:	7b1c      	ldrb	r4, [r3, #12]
    565a:	0924      	lsrs	r4, r4, #4
    565c:	00a4      	lsls	r4, r4, #2
    565e:	3c14      	subs	r4, #20
    5660:	b2a4      	uxth	r4, r4

	if (tcpOptionsSize > 0) {
    5662:	2c00      	cmp	r4, #0
    5664:	d062      	beq.n	572c <TCP_ParseTCPOptions+0xd8>
		// RFC 1122, page 85, Section 4.2.2.6  Maximum Segment Size Option: RFC-793 Section 3.1
		// more explanations in RFC-6691
		tcpMss = 536;
    5666:	2286      	movs	r2, #134	; 0x86
    5668:	0092      	lsls	r2, r2, #2
    566a:	829a      	strh	r2, [r3, #20]
		// parse the option only for SYN segments
		if (tcpHeader.syn) {
    566c:	7b5b      	ldrb	r3, [r3, #13]
    566e:	079b      	lsls	r3, r3, #30
    5670:	d557      	bpl.n	5722 <TCP_ParseTCPOptions+0xce>
    5672:	2600      	movs	r6, #0
    5674:	e033      	b.n	56de <TCP_ParseTCPOptions+0x8a>
			while (tcpOptionsSize--) {
				opt = ETH_Read8();
				switch (opt) {
				case TCP_EOP:
					// End of options.
					if (tcpOptionsSize) {
    5676:	2d00      	cmp	r5, #0
    5678:	d102      	bne.n	5680 <TCP_ParseTCPOptions+0x2c>
			while (tcpOptionsSize--) {
    567a:	002c      	movs	r4, r5
						// dump remaining unused bytes
						ETH_Dump(tcpOptionsSize);
						tcpOptionsSize = 0;
					}
					ret = true;
    567c:	2601      	movs	r6, #1
    567e:	e02e      	b.n	56de <TCP_ParseTCPOptions+0x8a>
						ETH_Dump(tcpOptionsSize);
    5680:	0028      	movs	r0, r5
    5682:	4b2d      	ldr	r3, [pc, #180]	; (5738 <TCP_ParseTCPOptions+0xe4>)
    5684:	4798      	blx	r3
					ret = true;
    5686:	2601      	movs	r6, #1
						tcpOptionsSize = 0;
    5688:	2400      	movs	r4, #0
    568a:	e028      	b.n	56de <TCP_ParseTCPOptions+0x8a>
					break;
				case TCP_NOP:
					// NOP option.
					break;
				case TCP_MSS:
					if (tcpOptionsSize >= 3) // at least 3 more bytes
    568c:	2d02      	cmp	r5, #2
    568e:	d802      	bhi.n	5696 <TCP_ParseTCPOptions+0x42>
							tcpOptionsSize = 0;
						}
					} else {
						// unexpected error
						tcpOptionsSize = 0;
						ret            = false;
    5690:	2600      	movs	r6, #0
						tcpOptionsSize = 0;
    5692:	2400      	movs	r4, #0
    5694:	e023      	b.n	56de <TCP_ParseTCPOptions+0x8a>
						opt = ETH_Read8();
    5696:	4b29      	ldr	r3, [pc, #164]	; (573c <TCP_ParseTCPOptions+0xe8>)
    5698:	4798      	blx	r3
						if (opt == 0x04) {
    569a:	2804      	cmp	r0, #4
    569c:	d004      	beq.n	56a8 <TCP_ParseTCPOptions+0x54>
							TCP_SyslogWrite("tcp_parseopt: bad option size length");
    569e:	4828      	ldr	r0, [pc, #160]	; (5740 <TCP_ParseTCPOptions+0xec>)
    56a0:	4b28      	ldr	r3, [pc, #160]	; (5744 <TCP_ParseTCPOptions+0xf0>)
    56a2:	4798      	blx	r3
							tcpOptionsSize = 0;
    56a4:	2400      	movs	r4, #0
    56a6:	e01a      	b.n	56de <TCP_ParseTCPOptions+0x8a>
							tcpMss = ETH_Read16(); // value returned in host endianess
    56a8:	4b27      	ldr	r3, [pc, #156]	; (5748 <TCP_ParseTCPOptions+0xf4>)
    56aa:	4798      	blx	r3
    56ac:	4b21      	ldr	r3, [pc, #132]	; (5734 <TCP_ParseTCPOptions+0xe0>)
    56ae:	8298      	strh	r0, [r3, #20]
							tcpOptionsSize = tcpOptionsSize - 3;
    56b0:	3c04      	subs	r4, #4
    56b2:	b2a4      	uxth	r4, r4
							if (tcpMss > TCP_MAX_SEG_SIZE) {
    56b4:	4b25      	ldr	r3, [pc, #148]	; (574c <TCP_ParseTCPOptions+0xf8>)
    56b6:	4298      	cmp	r0, r3
    56b8:	d931      	bls.n	571e <TCP_ParseTCPOptions+0xca>
								tcpMss = TCP_MAX_SEG_SIZE;
    56ba:	001a      	movs	r2, r3
    56bc:	4b1d      	ldr	r3, [pc, #116]	; (5734 <TCP_ParseTCPOptions+0xe0>)
    56be:	829a      	strh	r2, [r3, #20]
							ret = true;
    56c0:	2601      	movs	r6, #1
    56c2:	e00c      	b.n	56de <TCP_ParseTCPOptions+0x8a>
							// All other options have a length field, so that we easily can skip them.
							ETH_Dump(opt);
							tcpOptionsSize = tcpOptionsSize - opt;
							ret            = true;
						} else {
							TCP_SyslogWrite("tcp_parseopt: bad option length");
    56c4:	4822      	ldr	r0, [pc, #136]	; (5750 <TCP_ParseTCPOptions+0xfc>)
    56c6:	4b1f      	ldr	r3, [pc, #124]	; (5744 <TCP_ParseTCPOptions+0xf0>)
    56c8:	4798      	blx	r3
							// the options are malformed and we don't process them further.
							tcpOptionsSize = 0;
							ret            = false;
    56ca:	2600      	movs	r6, #0
							tcpOptionsSize = 0;
    56cc:	2400      	movs	r4, #0
    56ce:	e006      	b.n	56de <TCP_ParseTCPOptions+0x8a>
						}
					} else {
						TCP_SyslogWrite("tcp_parseopt: bad length");
    56d0:	4820      	ldr	r0, [pc, #128]	; (5754 <TCP_ParseTCPOptions+0x100>)
    56d2:	4b1c      	ldr	r3, [pc, #112]	; (5744 <TCP_ParseTCPOptions+0xf0>)
    56d4:	4798      	blx	r3
						// If the length field is zero, the options are malformed
						// and we don't process them further.
						tcpOptionsSize = 0;
						ret            = false;
    56d6:	2600      	movs	r6, #0
						tcpOptionsSize = 0;
    56d8:	2400      	movs	r4, #0
    56da:	e000      	b.n	56de <TCP_ParseTCPOptions+0x8a>
			while (tcpOptionsSize--) {
    56dc:	002c      	movs	r4, r5
    56de:	1e65      	subs	r5, r4, #1
    56e0:	b2ad      	uxth	r5, r5
    56e2:	2c00      	cmp	r4, #0
    56e4:	d023      	beq.n	572e <TCP_ParseTCPOptions+0xda>
				opt = ETH_Read8();
    56e6:	4b15      	ldr	r3, [pc, #84]	; (573c <TCP_ParseTCPOptions+0xe8>)
    56e8:	4798      	blx	r3
				switch (opt) {
    56ea:	2801      	cmp	r0, #1
    56ec:	d0f6      	beq.n	56dc <TCP_ParseTCPOptions+0x88>
    56ee:	2800      	cmp	r0, #0
    56f0:	d0c1      	beq.n	5676 <TCP_ParseTCPOptions+0x22>
    56f2:	2802      	cmp	r0, #2
    56f4:	d0ca      	beq.n	568c <TCP_ParseTCPOptions+0x38>
					TCP_SyslogWrite("tcp_parseopt: other");
    56f6:	4818      	ldr	r0, [pc, #96]	; (5758 <TCP_ParseTCPOptions+0x104>)
    56f8:	4b12      	ldr	r3, [pc, #72]	; (5744 <TCP_ParseTCPOptions+0xf0>)
    56fa:	4798      	blx	r3
					opt = ETH_Read8();
    56fc:	4b0f      	ldr	r3, [pc, #60]	; (573c <TCP_ParseTCPOptions+0xe8>)
    56fe:	4798      	blx	r3
					tcpOptionsSize--;
    5700:	3c02      	subs	r4, #2
    5702:	b2a4      	uxth	r4, r4
					if (opt > 1) // this should be at least 2 to be valid
    5704:	2801      	cmp	r0, #1
    5706:	d9e3      	bls.n	56d0 <TCP_ParseTCPOptions+0x7c>
						opt = opt - 2;
    5708:	3802      	subs	r0, #2
						if (opt <= tcpOptionsSize) {
    570a:	b2c5      	uxtb	r5, r0
    570c:	42ac      	cmp	r4, r5
    570e:	d3d9      	bcc.n	56c4 <TCP_ParseTCPOptions+0x70>
							ETH_Dump(opt);
    5710:	0028      	movs	r0, r5
    5712:	4b09      	ldr	r3, [pc, #36]	; (5738 <TCP_ParseTCPOptions+0xe4>)
    5714:	4798      	blx	r3
							tcpOptionsSize = tcpOptionsSize - opt;
    5716:	1b64      	subs	r4, r4, r5
    5718:	b2a4      	uxth	r4, r4
							ret            = true;
    571a:	2601      	movs	r6, #1
    571c:	e7df      	b.n	56de <TCP_ParseTCPOptions+0x8a>
							ret = true;
    571e:	2601      	movs	r6, #1
    5720:	e7dd      	b.n	56de <TCP_ParseTCPOptions+0x8a>
					break;
				}
			}
		} else // jump over the Options from TCP header
		{
			ETH_Dump(tcpOptionsSize);
    5722:	0020      	movs	r0, r4
    5724:	4b04      	ldr	r3, [pc, #16]	; (5738 <TCP_ParseTCPOptions+0xe4>)
    5726:	4798      	blx	r3
			ret = true;
    5728:	2601      	movs	r6, #1
    572a:	e000      	b.n	572e <TCP_ParseTCPOptions+0xda>
		}
	} else {
		ret = true;
    572c:	2601      	movs	r6, #1
	}

	return ret;
}
    572e:	0030      	movs	r0, r6
    5730:	bd70      	pop	{r4, r5, r6, pc}
    5732:	46c0      	nop			; (mov r8, r8)
    5734:	200008bc 	.word	0x200008bc
    5738:	00004521 	.word	0x00004521
    573c:	0000418d 	.word	0x0000418d
    5740:	00008f8c 	.word	0x00008f8c
    5744:	00005403 	.word	0x00005403
    5748:	0000420d 	.word	0x0000420d
    574c:	000005b4 	.word	0x000005b4
    5750:	00008fc8 	.word	0x00008fc8
    5754:	00008fe8 	.word	0x00008fe8
    5758:	00008fb4 	.word	0x00008fb4

0000575c <TCP_PayloadSave>:
{
    575c:	b510      	push	{r4, lr}
	if (currentTCB->rxBufState == RX_BUFF_IN_USE) {
    575e:	4b11      	ldr	r3, [pc, #68]	; (57a4 <TCP_PayloadSave+0x48>)
    5760:	681b      	ldr	r3, [r3, #0]
    5762:	222c      	movs	r2, #44	; 0x2c
    5764:	5c9a      	ldrb	r2, [r3, r2]
    5766:	2a01      	cmp	r2, #1
    5768:	d001      	beq.n	576e <TCP_PayloadSave+0x12>
	bool     ret = false;
    576a:	2000      	movs	r0, #0
}
    576c:	bd10      	pop	{r4, pc}
		if (currentTCB->localWnd >= len) {
    576e:	8bdc      	ldrh	r4, [r3, #30]
    5770:	4284      	cmp	r4, r0
    5772:	d300      	bcc.n	5776 <TCP_PayloadSave+0x1a>
			buffer_size = len;
    5774:	0004      	movs	r4, r0
		ETH_ReadBlock(currentTCB->rxBufferPtr, buffer_size);
    5776:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5778:	0021      	movs	r1, r4
    577a:	4b0b      	ldr	r3, [pc, #44]	; (57a8 <TCP_PayloadSave+0x4c>)
    577c:	4798      	blx	r3
		currentTCB->rxBufferPtr = currentTCB->rxBufferPtr + buffer_size;
    577e:	4b09      	ldr	r3, [pc, #36]	; (57a4 <TCP_PayloadSave+0x48>)
    5780:	6818      	ldr	r0, [r3, #0]
    5782:	6a83      	ldr	r3, [r0, #40]	; 0x28
    5784:	191b      	adds	r3, r3, r4
    5786:	6283      	str	r3, [r0, #40]	; 0x28
		currentTCB->localWnd  = currentTCB->localWnd - buffer_size;
    5788:	8bc3      	ldrh	r3, [r0, #30]
    578a:	1b1b      	subs	r3, r3, r4
    578c:	83c3      	strh	r3, [r0, #30]
		currentTCB->remoteAck = currentTCB->remoteSeqno + buffer_size;
    578e:	68c3      	ldr	r3, [r0, #12]
    5790:	469c      	mov	ip, r3
    5792:	4464      	add	r4, ip
    5794:	6104      	str	r4, [r0, #16]
		currentTCB->flags = TCP_ACK_FLAG;
    5796:	2210      	movs	r2, #16
    5798:	234d      	movs	r3, #77	; 0x4d
    579a:	54c2      	strb	r2, [r0, r3]
		TCP_Snd(currentTCB);
    579c:	4b03      	ldr	r3, [pc, #12]	; (57ac <TCP_PayloadSave+0x50>)
    579e:	4798      	blx	r3
		ret = true;
    57a0:	2001      	movs	r0, #1
    57a2:	e7e3      	b.n	576c <TCP_PayloadSave+0x10>
    57a4:	200040a4 	.word	0x200040a4
    57a8:	00004285 	.word	0x00004285
    57ac:	000054dd 	.word	0x000054dd

000057b0 <TCP_FiniteStateMachine>:
 *
 * @return
 *      None
 */
static bool TCP_FiniteStateMachine(void)
{
    57b0:	b570      	push	{r4, r5, r6, lr}
	uint16_t notAckBytes;
	bool     ret = false;

	tcp_fsm_states_t nextState = currentTCB->fsmState; // default don't change states
    57b2:	4bd5      	ldr	r3, [pc, #852]	; (5b08 <TCP_FiniteStateMachine+0x358>)
    57b4:	6818      	ldr	r0, [r3, #0]
    57b6:	233b      	movs	r3, #59	; 0x3b
    57b8:	5cc4      	ldrb	r4, [r0, r3]
	tcpEvent_t       event     = currentTCB->connectionEvent;
    57ba:	3301      	adds	r3, #1
    57bc:	5cc2      	ldrb	r2, [r0, r3]

	switch (currentTCB->fsmState) {
    57be:	2c0a      	cmp	r4, #10
    57c0:	d900      	bls.n	57c4 <TCP_FiniteStateMachine+0x14>
    57c2:	e3b3      	b.n	5f2c <TCP_FiniteStateMachine+0x77c>
    57c4:	00a3      	lsls	r3, r4, #2
    57c6:	49d1      	ldr	r1, [pc, #836]	; (5b0c <TCP_FiniteStateMachine+0x35c>)
    57c8:	58cb      	ldr	r3, [r1, r3]
    57ca:	469f      	mov	pc, r3
	case LISTEN:
		switch (event) {
    57cc:	2a00      	cmp	r2, #0
    57ce:	d029      	beq.n	5824 <TCP_FiniteStateMachine+0x74>
    57d0:	2a03      	cmp	r2, #3
    57d2:	d000      	beq.n	57d6 <TCP_FiniteStateMachine+0x26>
    57d4:	e3b3      	b.n	5f3e <TCP_FiniteStateMachine+0x78e>
		case RCV_SYN:
			TCP_SyslogWrite("LISTEN: rx_syn");
    57d6:	48ce      	ldr	r0, [pc, #824]	; (5b10 <TCP_FiniteStateMachine+0x360>)
    57d8:	4bce      	ldr	r3, [pc, #824]	; (5b14 <TCP_FiniteStateMachine+0x364>)
    57da:	4798      	blx	r3
			// Start the connection on the TCB

			currentTCB->destIP   = receivedRemoteAddress;
    57dc:	4bca      	ldr	r3, [pc, #808]	; (5b08 <TCP_FiniteStateMachine+0x358>)
    57de:	6818      	ldr	r0, [r3, #0]
    57e0:	4bcd      	ldr	r3, [pc, #820]	; (5b18 <TCP_FiniteStateMachine+0x368>)
    57e2:	699a      	ldr	r2, [r3, #24]
    57e4:	6042      	str	r2, [r0, #4]
			currentTCB->destPort = tcpHeader.sourcePort;
    57e6:	881a      	ldrh	r2, [r3, #0]
    57e8:	8102      	strh	r2, [r0, #8]

			// TO DO modify the start seq no to be "random"
			currentTCB->localLastAck = 0;
    57ea:	2200      	movs	r2, #0
    57ec:	6182      	str	r2, [r0, #24]

			currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
    57ee:	685a      	ldr	r2, [r3, #4]
    57f0:	60c2      	str	r2, [r0, #12]
			currentTCB->remoteAck   = currentTCB->remoteSeqno + 1; // ask for next packet
    57f2:	3201      	adds	r2, #1
    57f4:	6102      	str	r2, [r0, #16]

			// save data from TCP header
			currentTCB->remoteWnd = ntohs(tcpHeader.windowSize);
    57f6:	89da      	ldrh	r2, [r3, #14]
    57f8:	0a11      	lsrs	r1, r2, #8
    57fa:	0212      	lsls	r2, r2, #8
    57fc:	430a      	orrs	r2, r1
    57fe:	8382      	strh	r2, [r0, #28]
			currentTCB->mss       = tcpMss;
    5800:	8a9b      	ldrh	r3, [r3, #20]
    5802:	8403      	strh	r3, [r0, #32]

			// create and send a SYN+ACK packet
			currentTCB->flags              = TCP_SYN_FLAG | TCP_ACK_FLAG;
    5804:	2212      	movs	r2, #18
    5806:	234d      	movs	r3, #77	; 0x4d
    5808:	54c2      	strb	r2, [r0, r3]
			currentTCB->timeout            = TCP_START_TIMEOUT_VAL;
    580a:	3b4b      	subs	r3, #75	; 0x4b
    580c:	3236      	adds	r2, #54	; 0x36
    580e:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutReloadValue = TCP_START_TIMEOUT_VAL;
    5810:	3202      	adds	r2, #2
    5812:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutsCount      = TCP_MAX_SYN_RETRIES;
    5814:	3a47      	subs	r2, #71	; 0x47
    5816:	334a      	adds	r3, #74	; 0x4a
    5818:	54c2      	strb	r2, [r0, r3]

			TCP_Snd(currentTCB);
    581a:	4bc0      	ldr	r3, [pc, #768]	; (5b1c <TCP_FiniteStateMachine+0x36c>)
    581c:	4798      	blx	r3
			nextState = SYN_RECEIVED;
    581e:	2403      	movs	r4, #3
	bool     ret = false;
    5820:	2000      	movs	r0, #0
			break;
    5822:	e384      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
		case CLOSE:
			TCP_SyslogWrite("LISTEN: close");
    5824:	48be      	ldr	r0, [pc, #760]	; (5b20 <TCP_FiniteStateMachine+0x370>)
    5826:	4bbb      	ldr	r3, [pc, #748]	; (5b14 <TCP_FiniteStateMachine+0x364>)
    5828:	4798      	blx	r3
			nextState = CLOSE;
			TCB_Reset(currentTCB);
    582a:	4bb7      	ldr	r3, [pc, #732]	; (5b08 <TCP_FiniteStateMachine+0x358>)
    582c:	6818      	ldr	r0, [r3, #0]
    582e:	4bbd      	ldr	r3, [pc, #756]	; (5b24 <TCP_FiniteStateMachine+0x374>)
    5830:	4798      	blx	r3
			nextState = CLOSE;
    5832:	2400      	movs	r4, #0
	bool     ret = false;
    5834:	2000      	movs	r0, #0
			break;
    5836:	e37a      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
			// for all other cases the packet is invalid and will be discarded
			break;
		}
		break;
	case SYN_SENT:
		switch (event) {
    5838:	2a0c      	cmp	r2, #12
    583a:	d900      	bls.n	583e <TCP_FiniteStateMachine+0x8e>
    583c:	e381      	b.n	5f42 <TCP_FiniteStateMachine+0x792>
    583e:	0092      	lsls	r2, r2, #2
    5840:	4bb9      	ldr	r3, [pc, #740]	; (5b28 <TCP_FiniteStateMachine+0x378>)
    5842:	589b      	ldr	r3, [r3, r2]
    5844:	469f      	mov	pc, r3
		case RCV_SYN:
			TCP_SyslogWrite("SYN_SENT: rx_syn");
    5846:	48b9      	ldr	r0, [pc, #740]	; (5b2c <TCP_FiniteStateMachine+0x37c>)
    5848:	4bb2      	ldr	r3, [pc, #712]	; (5b14 <TCP_FiniteStateMachine+0x364>)
    584a:	4798      	blx	r3
			// Simultaneous open
			currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
    584c:	4bae      	ldr	r3, [pc, #696]	; (5b08 <TCP_FiniteStateMachine+0x358>)
    584e:	6818      	ldr	r0, [r3, #0]
    5850:	4ab1      	ldr	r2, [pc, #708]	; (5b18 <TCP_FiniteStateMachine+0x368>)
    5852:	6853      	ldr	r3, [r2, #4]
    5854:	60c3      	str	r3, [r0, #12]
			currentTCB->remoteAck   = tcpHeader.sequenceNumber + 1; // ask for next packet
    5856:	3301      	adds	r3, #1
    5858:	6103      	str	r3, [r0, #16]

			// save data from TCP header
			currentTCB->remoteWnd = ntohs(tcpHeader.windowSize);
    585a:	89d3      	ldrh	r3, [r2, #14]
    585c:	0a19      	lsrs	r1, r3, #8
    585e:	021b      	lsls	r3, r3, #8
    5860:	430b      	orrs	r3, r1
    5862:	8383      	strh	r3, [r0, #28]
			currentTCB->mss       = tcpMss;
    5864:	8a93      	ldrh	r3, [r2, #20]
    5866:	8403      	strh	r3, [r0, #32]

			// create and send a ACK packet
			currentTCB->timeout            = TCP_START_TIMEOUT_VAL;
    5868:	2302      	movs	r3, #2
    586a:	2248      	movs	r2, #72	; 0x48
    586c:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutReloadValue = TCP_START_TIMEOUT_VAL;
    586e:	3202      	adds	r2, #2
    5870:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutsCount      = TCP_MAX_SYN_RETRIES;
    5872:	3a47      	subs	r2, #71	; 0x47
    5874:	334a      	adds	r3, #74	; 0x4a
    5876:	54c2      	strb	r2, [r0, r3]
			currentTCB->flags              = TCP_SYN_FLAG | TCP_ACK_FLAG;
    5878:	320f      	adds	r2, #15
    587a:	3301      	adds	r3, #1
    587c:	54c2      	strb	r2, [r0, r3]

			TCP_Snd(currentTCB);
    587e:	4ba7      	ldr	r3, [pc, #668]	; (5b1c <TCP_FiniteStateMachine+0x36c>)
    5880:	4798      	blx	r3

			// Go to SYN_RECEIVED and waiting for the ack
			nextState = SYN_RECEIVED;
    5882:	2403      	movs	r4, #3
	bool     ret = false;
    5884:	2000      	movs	r0, #0
			break;
    5886:	e352      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
		case RCV_SYNACK:
			TCP_SyslogWrite("SYN_SENT: rx_synack");
    5888:	48a9      	ldr	r0, [pc, #676]	; (5b30 <TCP_FiniteStateMachine+0x380>)
    588a:	4ba2      	ldr	r3, [pc, #648]	; (5b14 <TCP_FiniteStateMachine+0x364>)
    588c:	4798      	blx	r3

			currentTCB->timeout = 0;
    588e:	4b9e      	ldr	r3, [pc, #632]	; (5b08 <TCP_FiniteStateMachine+0x358>)
    5890:	6818      	ldr	r0, [r3, #0]
    5892:	2200      	movs	r2, #0
    5894:	2348      	movs	r3, #72	; 0x48
    5896:	52c2      	strh	r2, [r0, r3]

			if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber) {
    5898:	6943      	ldr	r3, [r0, #20]
    589a:	3301      	adds	r3, #1
    589c:	4a9e      	ldr	r2, [pc, #632]	; (5b18 <TCP_FiniteStateMachine+0x368>)
    589e:	6892      	ldr	r2, [r2, #8]
    58a0:	4293      	cmp	r3, r2
    58a2:	d00f      	beq.n	58c4 <TCP_FiniteStateMachine+0x114>
					nextState               = ESTABLISHED;
					currentTCB->socketState = SOCKET_CONNECTED;
				}
			} else {
				// send reset
				currentTCB->localSeqno = tcpHeader.ackNumber;
    58a4:	6142      	str	r2, [r0, #20]
				currentTCB->flags      = TCP_RST_FLAG | TCP_ACK_FLAG;
    58a6:	2214      	movs	r2, #20
    58a8:	234d      	movs	r3, #77	; 0x4d
    58aa:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    58ac:	4b9b      	ldr	r3, [pc, #620]	; (5b1c <TCP_FiniteStateMachine+0x36c>)
    58ae:	4798      	blx	r3
    58b0:	2800      	cmp	r0, #0
    58b2:	d100      	bne.n	58b6 <TCP_FiniteStateMachine+0x106>
    58b4:	e33b      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
					nextState = CLOSE;
					TCB_Reset(currentTCB);
    58b6:	4b94      	ldr	r3, [pc, #592]	; (5b08 <TCP_FiniteStateMachine+0x358>)
    58b8:	6818      	ldr	r0, [r3, #0]
    58ba:	4b9a      	ldr	r3, [pc, #616]	; (5b24 <TCP_FiniteStateMachine+0x374>)
    58bc:	4798      	blx	r3
					nextState = CLOSE;
    58be:	2400      	movs	r4, #0
	bool     ret = false;
    58c0:	2000      	movs	r0, #0
    58c2:	e334      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
				currentTCB->localSeqno = currentTCB->localSeqno + 1;
    58c4:	6143      	str	r3, [r0, #20]
				currentTCB->flags      = TCP_ACK_FLAG;
    58c6:	2210      	movs	r2, #16
    58c8:	234d      	movs	r3, #77	; 0x4d
    58ca:	54c2      	strb	r2, [r0, r3]
				currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
    58cc:	4a92      	ldr	r2, [pc, #584]	; (5b18 <TCP_FiniteStateMachine+0x368>)
    58ce:	6853      	ldr	r3, [r2, #4]
    58d0:	60c3      	str	r3, [r0, #12]
				currentTCB->remoteAck = tcpHeader.sequenceNumber + 1;
    58d2:	3301      	adds	r3, #1
    58d4:	6103      	str	r3, [r0, #16]
				currentTCB->remoteWnd = ntohs(tcpHeader.windowSize);
    58d6:	89d3      	ldrh	r3, [r2, #14]
    58d8:	0a19      	lsrs	r1, r3, #8
    58da:	021b      	lsls	r3, r3, #8
    58dc:	430b      	orrs	r3, r1
    58de:	8383      	strh	r3, [r0, #28]
				currentTCB->mss       = tcpMss;
    58e0:	8a93      	ldrh	r3, [r2, #20]
    58e2:	8403      	strh	r3, [r0, #32]
				if (TCP_Snd(currentTCB)) {
    58e4:	4b8d      	ldr	r3, [pc, #564]	; (5b1c <TCP_FiniteStateMachine+0x36c>)
    58e6:	4798      	blx	r3
    58e8:	2800      	cmp	r0, #0
    58ea:	d100      	bne.n	58ee <TCP_FiniteStateMachine+0x13e>
    58ec:	e31f      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
					currentTCB->socketState = SOCKET_CONNECTED;
    58ee:	4b86      	ldr	r3, [pc, #536]	; (5b08 <TCP_FiniteStateMachine+0x358>)
    58f0:	681a      	ldr	r2, [r3, #0]
    58f2:	2103      	movs	r1, #3
    58f4:	234e      	movs	r3, #78	; 0x4e
    58f6:	54d1      	strb	r1, [r2, r3]
					nextState               = ESTABLISHED;
    58f8:	2404      	movs	r4, #4
	bool     ret = false;
    58fa:	2000      	movs	r0, #0
    58fc:	e317      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
				}
			}
			break;
		case RCV_ACK:
			TCP_SyslogWrite("SYN_SENT: rx_ack");
    58fe:	488d      	ldr	r0, [pc, #564]	; (5b34 <TCP_FiniteStateMachine+0x384>)
    5900:	4b84      	ldr	r3, [pc, #528]	; (5b14 <TCP_FiniteStateMachine+0x364>)
    5902:	4798      	blx	r3

			currentTCB->timeout = 0;
    5904:	4b80      	ldr	r3, [pc, #512]	; (5b08 <TCP_FiniteStateMachine+0x358>)
    5906:	6818      	ldr	r0, [r3, #0]
    5908:	2200      	movs	r2, #0
    590a:	2348      	movs	r3, #72	; 0x48
    590c:	52c2      	strh	r2, [r0, r3]

			if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber) {
    590e:	6943      	ldr	r3, [r0, #20]
    5910:	3301      	adds	r3, #1
    5912:	4a81      	ldr	r2, [pc, #516]	; (5b18 <TCP_FiniteStateMachine+0x368>)
    5914:	6892      	ldr	r2, [r2, #8]
    5916:	4293      	cmp	r3, r2
    5918:	d00f      	beq.n	593a <TCP_FiniteStateMachine+0x18a>

				nextState               = ESTABLISHED;
				currentTCB->socketState = SOCKET_CONNECTED;
			} else {
				// send reset
				currentTCB->localSeqno = tcpHeader.ackNumber;
    591a:	6142      	str	r2, [r0, #20]
				currentTCB->flags      = TCP_RST_FLAG;
    591c:	2204      	movs	r2, #4
    591e:	234d      	movs	r3, #77	; 0x4d
    5920:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    5922:	4b7e      	ldr	r3, [pc, #504]	; (5b1c <TCP_FiniteStateMachine+0x36c>)
    5924:	4798      	blx	r3
    5926:	2800      	cmp	r0, #0
    5928:	d100      	bne.n	592c <TCP_FiniteStateMachine+0x17c>
    592a:	e300      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
					nextState = CLOSE;
					TCB_Reset(currentTCB);
    592c:	4b76      	ldr	r3, [pc, #472]	; (5b08 <TCP_FiniteStateMachine+0x358>)
    592e:	6818      	ldr	r0, [r3, #0]
    5930:	4b7c      	ldr	r3, [pc, #496]	; (5b24 <TCP_FiniteStateMachine+0x374>)
    5932:	4798      	blx	r3
					nextState = CLOSE;
    5934:	2400      	movs	r4, #0
	bool     ret = false;
    5936:	2000      	movs	r0, #0
    5938:	e2f9      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
				currentTCB->localSeqno = currentTCB->localSeqno + 1;
    593a:	6143      	str	r3, [r0, #20]
				currentTCB->flags      = TCP_ACK_FLAG;
    593c:	2210      	movs	r2, #16
    593e:	234d      	movs	r3, #77	; 0x4d
    5940:	54c2      	strb	r2, [r0, r3]
				currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
    5942:	4a75      	ldr	r2, [pc, #468]	; (5b18 <TCP_FiniteStateMachine+0x368>)
    5944:	6853      	ldr	r3, [r2, #4]
    5946:	60c3      	str	r3, [r0, #12]
				currentTCB->remoteAck   = tcpHeader.sequenceNumber + 1; // ask for next packet
    5948:	3301      	adds	r3, #1
    594a:	6103      	str	r3, [r0, #16]
				currentTCB->remoteWnd = ntohs(tcpHeader.windowSize);
    594c:	89d3      	ldrh	r3, [r2, #14]
    594e:	0a19      	lsrs	r1, r3, #8
    5950:	021b      	lsls	r3, r3, #8
    5952:	430b      	orrs	r3, r1
    5954:	8383      	strh	r3, [r0, #28]
				currentTCB->mss       = tcpMss;
    5956:	8a93      	ldrh	r3, [r2, #20]
    5958:	8403      	strh	r3, [r0, #32]
				currentTCB->socketState = SOCKET_CONNECTED;
    595a:	2203      	movs	r2, #3
    595c:	234e      	movs	r3, #78	; 0x4e
    595e:	54c2      	strb	r2, [r0, r3]
				nextState               = ESTABLISHED;
    5960:	2404      	movs	r4, #4
	bool     ret = false;
    5962:	2000      	movs	r0, #0
    5964:	e2e3      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
				}
			}
			break;
		case CLOSE:
			TCP_SyslogWrite("SYN_SENT: close");
    5966:	4874      	ldr	r0, [pc, #464]	; (5b38 <TCP_FiniteStateMachine+0x388>)
    5968:	4b6a      	ldr	r3, [pc, #424]	; (5b14 <TCP_FiniteStateMachine+0x364>)
    596a:	4798      	blx	r3
			// go to CLOSED state
			nextState = CLOSED;
			TCB_Reset(currentTCB);
    596c:	4b66      	ldr	r3, [pc, #408]	; (5b08 <TCP_FiniteStateMachine+0x358>)
    596e:	6818      	ldr	r0, [r3, #0]
    5970:	4b6c      	ldr	r3, [pc, #432]	; (5b24 <TCP_FiniteStateMachine+0x374>)
    5972:	4798      	blx	r3
			nextState = CLOSED;
    5974:	2400      	movs	r4, #0
	bool     ret = false;
    5976:	2000      	movs	r0, #0
			break;
    5978:	e2d9      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
		case TIMEOUT:
			TCP_SyslogWrite("SYN_SENT: timeout");
    597a:	4870      	ldr	r0, [pc, #448]	; (5b3c <TCP_FiniteStateMachine+0x38c>)
    597c:	4b65      	ldr	r3, [pc, #404]	; (5b14 <TCP_FiniteStateMachine+0x364>)
    597e:	4798      	blx	r3
			// looks like the the packet was lost
			// check inside the packet to see where to jump next
			if (currentTCB->timeoutsCount) {
    5980:	4b61      	ldr	r3, [pc, #388]	; (5b08 <TCP_FiniteStateMachine+0x358>)
    5982:	6818      	ldr	r0, [r3, #0]
    5984:	234c      	movs	r3, #76	; 0x4c
    5986:	5cc3      	ldrb	r3, [r0, r3]
    5988:	2b00      	cmp	r3, #0
    598a:	d018      	beq.n	59be <TCP_FiniteStateMachine+0x20e>
				if (TCP_Snd(currentTCB)) {
    598c:	4b63      	ldr	r3, [pc, #396]	; (5b1c <TCP_FiniteStateMachine+0x36c>)
    598e:	4798      	blx	r3
    5990:	2800      	cmp	r0, #0
    5992:	d100      	bne.n	5996 <TCP_FiniteStateMachine+0x1e6>
    5994:	e2cb      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
					if (currentTCB->flags & TCP_RST_FLAG) {
    5996:	4b5c      	ldr	r3, [pc, #368]	; (5b08 <TCP_FiniteStateMachine+0x358>)
    5998:	6818      	ldr	r0, [r3, #0]
    599a:	234d      	movs	r3, #77	; 0x4d
    599c:	5cc3      	ldrb	r3, [r0, r3]
    599e:	075a      	lsls	r2, r3, #29
    59a0:	d408      	bmi.n	59b4 <TCP_FiniteStateMachine+0x204>
						nextState = CLOSE;
						TCB_Reset(currentTCB);
					} else if (currentTCB->flags & TCP_ACK_FLAG) {
    59a2:	06db      	lsls	r3, r3, #27
    59a4:	d400      	bmi.n	59a8 <TCP_FiniteStateMachine+0x1f8>
    59a6:	e2ce      	b.n	5f46 <TCP_FiniteStateMachine+0x796>
						nextState               = ESTABLISHED;
						currentTCB->socketState = SOCKET_CONNECTED;
    59a8:	2203      	movs	r2, #3
    59aa:	234e      	movs	r3, #78	; 0x4e
    59ac:	54c2      	strb	r2, [r0, r3]
						nextState               = ESTABLISHED;
    59ae:	2404      	movs	r4, #4
	bool     ret = false;
    59b0:	2000      	movs	r0, #0
    59b2:	e2bc      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
						TCB_Reset(currentTCB);
    59b4:	4b5b      	ldr	r3, [pc, #364]	; (5b24 <TCP_FiniteStateMachine+0x374>)
    59b6:	4798      	blx	r3
						nextState = CLOSE;
    59b8:	2400      	movs	r4, #0
	bool     ret = false;
    59ba:	0020      	movs	r0, r4
    59bc:	e2b7      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
					}
				}
			} else {
				// just reset the connection if there is no reply
				currentTCB->flags = TCP_RST_FLAG;
    59be:	2204      	movs	r2, #4
    59c0:	234d      	movs	r3, #77	; 0x4d
    59c2:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    59c4:	4b55      	ldr	r3, [pc, #340]	; (5b1c <TCP_FiniteStateMachine+0x36c>)
    59c6:	4798      	blx	r3
    59c8:	2800      	cmp	r0, #0
    59ca:	d100      	bne.n	59ce <TCP_FiniteStateMachine+0x21e>
    59cc:	e2af      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
					nextState = CLOSE;
					TCB_Reset(currentTCB);
    59ce:	4b4e      	ldr	r3, [pc, #312]	; (5b08 <TCP_FiniteStateMachine+0x358>)
    59d0:	6818      	ldr	r0, [r3, #0]
    59d2:	4b54      	ldr	r3, [pc, #336]	; (5b24 <TCP_FiniteStateMachine+0x374>)
    59d4:	4798      	blx	r3
					nextState = CLOSE;
    59d6:	2400      	movs	r4, #0
	bool     ret = false;
    59d8:	2000      	movs	r0, #0
    59da:	e2a8      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
			break;
		case RCV_RST:
		case RCV_RSTACK:
			// port seems not to be opened
			nextState = CLOSED;
			TCB_Reset(currentTCB);
    59dc:	4b51      	ldr	r3, [pc, #324]	; (5b24 <TCP_FiniteStateMachine+0x374>)
    59de:	4798      	blx	r3
			nextState = CLOSED;
    59e0:	2400      	movs	r4, #0
	bool     ret = false;
    59e2:	2000      	movs	r0, #0
			break;
    59e4:	e2a3      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
			// for all other cases the packet is invalid and will be discarded
			break;
		}
		break;
	case SYN_RECEIVED:
		switch (event) {
    59e6:	2a0c      	cmp	r2, #12
    59e8:	d900      	bls.n	59ec <TCP_FiniteStateMachine+0x23c>
    59ea:	e2ae      	b.n	5f4a <TCP_FiniteStateMachine+0x79a>
    59ec:	0092      	lsls	r2, r2, #2
    59ee:	4b54      	ldr	r3, [pc, #336]	; (5b40 <TCP_FiniteStateMachine+0x390>)
    59f0:	589b      	ldr	r3, [r3, r2]
    59f2:	469f      	mov	pc, r3
		case RCV_SYNACK:
			TCP_SyslogWrite("SYN_RECEIVED: rx_synack");
    59f4:	4853      	ldr	r0, [pc, #332]	; (5b44 <TCP_FiniteStateMachine+0x394>)
    59f6:	4b47      	ldr	r3, [pc, #284]	; (5b14 <TCP_FiniteStateMachine+0x364>)
    59f8:	4798      	blx	r3
			if (currentTCB->localPort == tcpHeader.destPort) {
    59fa:	4b43      	ldr	r3, [pc, #268]	; (5b08 <TCP_FiniteStateMachine+0x358>)
    59fc:	681b      	ldr	r3, [r3, #0]
    59fe:	8819      	ldrh	r1, [r3, #0]
    5a00:	4a45      	ldr	r2, [pc, #276]	; (5b18 <TCP_FiniteStateMachine+0x368>)
    5a02:	8852      	ldrh	r2, [r2, #2]
    5a04:	4291      	cmp	r1, r2
    5a06:	d001      	beq.n	5a0c <TCP_FiniteStateMachine+0x25c>
	bool     ret = false;
    5a08:	2000      	movs	r0, #0
    5a0a:	e290      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
				// stop the current timeout
				currentTCB->timeout = 0;
    5a0c:	2100      	movs	r1, #0
    5a0e:	2248      	movs	r2, #72	; 0x48
    5a10:	5299      	strh	r1, [r3, r2]

				// This is part of simultaneous open
				// TO DO: Check if the received packet is the one that we expect
				if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPort == tcpHeader.sourcePort))
    5a12:	4a41      	ldr	r2, [pc, #260]	; (5b18 <TCP_FiniteStateMachine+0x368>)
    5a14:	6992      	ldr	r2, [r2, #24]
    5a16:	6859      	ldr	r1, [r3, #4]
    5a18:	4291      	cmp	r1, r2
    5a1a:	d004      	beq.n	5a26 <TCP_FiniteStateMachine+0x276>
					if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber)

						nextState = ESTABLISHED;
				currentTCB->socketState = SOCKET_CONNECTED;
    5a1c:	2103      	movs	r1, #3
    5a1e:	224e      	movs	r2, #78	; 0x4e
    5a20:	5499      	strb	r1, [r3, r2]
	bool     ret = false;
    5a22:	2000      	movs	r0, #0
    5a24:	e283      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
				if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPort == tcpHeader.sourcePort))
    5a26:	8919      	ldrh	r1, [r3, #8]
    5a28:	4a3b      	ldr	r2, [pc, #236]	; (5b18 <TCP_FiniteStateMachine+0x368>)
    5a2a:	8812      	ldrh	r2, [r2, #0]
    5a2c:	4291      	cmp	r1, r2
    5a2e:	d1f5      	bne.n	5a1c <TCP_FiniteStateMachine+0x26c>
					if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber)
    5a30:	695a      	ldr	r2, [r3, #20]
    5a32:	3201      	adds	r2, #1
    5a34:	4938      	ldr	r1, [pc, #224]	; (5b18 <TCP_FiniteStateMachine+0x368>)
    5a36:	6889      	ldr	r1, [r1, #8]
    5a38:	428a      	cmp	r2, r1
    5a3a:	d1ef      	bne.n	5a1c <TCP_FiniteStateMachine+0x26c>
						nextState = ESTABLISHED;
    5a3c:	2404      	movs	r4, #4
    5a3e:	e7ed      	b.n	5a1c <TCP_FiniteStateMachine+0x26c>
			}
			break;
		case RCV_ACK:
			TCP_SyslogWrite("SYN_RECEIVED: rx_ack");
    5a40:	4841      	ldr	r0, [pc, #260]	; (5b48 <TCP_FiniteStateMachine+0x398>)
    5a42:	4b34      	ldr	r3, [pc, #208]	; (5b14 <TCP_FiniteStateMachine+0x364>)
    5a44:	4798      	blx	r3

			// check if the packet is for the curent TCB
			// we need to check the remote IP adress and remote port
			if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPort == tcpHeader.sourcePort)) {
    5a46:	4b30      	ldr	r3, [pc, #192]	; (5b08 <TCP_FiniteStateMachine+0x358>)
    5a48:	681b      	ldr	r3, [r3, #0]
    5a4a:	4a33      	ldr	r2, [pc, #204]	; (5b18 <TCP_FiniteStateMachine+0x368>)
    5a4c:	6992      	ldr	r2, [r2, #24]
    5a4e:	6859      	ldr	r1, [r3, #4]
    5a50:	4291      	cmp	r1, r2
    5a52:	d001      	beq.n	5a58 <TCP_FiniteStateMachine+0x2a8>
	bool     ret = false;
    5a54:	2000      	movs	r0, #0
    5a56:	e26a      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
			if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPort == tcpHeader.sourcePort)) {
    5a58:	8919      	ldrh	r1, [r3, #8]
    5a5a:	4a2f      	ldr	r2, [pc, #188]	; (5b18 <TCP_FiniteStateMachine+0x368>)
    5a5c:	8812      	ldrh	r2, [r2, #0]
    5a5e:	4291      	cmp	r1, r2
    5a60:	d001      	beq.n	5a66 <TCP_FiniteStateMachine+0x2b6>
	bool     ret = false;
    5a62:	2000      	movs	r0, #0
    5a64:	e263      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
				// check the sequence numbers
				// is it the packet that I've ask for?
				if (currentTCB->remoteAck == tcpHeader.sequenceNumber) {
    5a66:	4a2c      	ldr	r2, [pc, #176]	; (5b18 <TCP_FiniteStateMachine+0x368>)
    5a68:	6852      	ldr	r2, [r2, #4]
    5a6a:	6919      	ldr	r1, [r3, #16]
    5a6c:	4291      	cmp	r1, r2
    5a6e:	d001      	beq.n	5a74 <TCP_FiniteStateMachine+0x2c4>
	bool     ret = false;
    5a70:	2000      	movs	r0, #0
    5a72:	e25c      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
					// is ACK OK?
					if ((currentTCB->localSeqno + 1) == tcpHeader.ackNumber) {
    5a74:	695a      	ldr	r2, [r3, #20]
    5a76:	3201      	adds	r2, #1
    5a78:	4927      	ldr	r1, [pc, #156]	; (5b18 <TCP_FiniteStateMachine+0x368>)
    5a7a:	6889      	ldr	r1, [r1, #8]
    5a7c:	428a      	cmp	r2, r1
    5a7e:	d001      	beq.n	5a84 <TCP_FiniteStateMachine+0x2d4>
	bool     ret = false;
    5a80:	2000      	movs	r0, #0
    5a82:	e254      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
						currentTCB->localSeqno = currentTCB->localSeqno + 1;
    5a84:	615a      	str	r2, [r3, #20]
						// stop the current timeout
						currentTCB->timeout = 0;
    5a86:	2000      	movs	r0, #0
    5a88:	2248      	movs	r2, #72	; 0x48
    5a8a:	5298      	strh	r0, [r3, r2]

						nextState               = ESTABLISHED;
						currentTCB->socketState = SOCKET_CONNECTED;
    5a8c:	2103      	movs	r1, #3
    5a8e:	3206      	adds	r2, #6
    5a90:	5499      	strb	r1, [r3, r2]
						nextState               = ESTABLISHED;
    5a92:	2404      	movs	r4, #4
    5a94:	e24b      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
					}
				}
			}
			break;
		case CLOSE:
			TCP_SyslogWrite("SYN_RECEIVED: close");
    5a96:	482d      	ldr	r0, [pc, #180]	; (5b4c <TCP_FiniteStateMachine+0x39c>)
    5a98:	4b1e      	ldr	r3, [pc, #120]	; (5b14 <TCP_FiniteStateMachine+0x364>)
    5a9a:	4798      	blx	r3
			// stop the current timeout
			currentTCB->timeout = 0;
    5a9c:	4b1a      	ldr	r3, [pc, #104]	; (5b08 <TCP_FiniteStateMachine+0x358>)
    5a9e:	6818      	ldr	r0, [r3, #0]
			// Need to send FIN and go to the FIN_WAIT_1
			currentTCB->flags              = TCP_FIN_FLAG;
    5aa0:	2201      	movs	r2, #1
    5aa2:	234d      	movs	r3, #77	; 0x4d
    5aa4:	54c2      	strb	r2, [r0, r3]
			currentTCB->timeout            = TCP_START_TIMEOUT_VAL;
    5aa6:	3b4b      	subs	r3, #75	; 0x4b
    5aa8:	3247      	adds	r2, #71	; 0x47
    5aaa:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutReloadValue = TCP_START_TIMEOUT_VAL;
    5aac:	3202      	adds	r2, #2
    5aae:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutsCount      = TCP_MAX_RETRIES;
    5ab0:	3a45      	subs	r2, #69	; 0x45
    5ab2:	334a      	adds	r3, #74	; 0x4a
    5ab4:	54c2      	strb	r2, [r0, r3]

			nextState = FIN_WAIT_1;
			TCP_Snd(currentTCB);
    5ab6:	4b19      	ldr	r3, [pc, #100]	; (5b1c <TCP_FiniteStateMachine+0x36c>)
    5ab8:	4798      	blx	r3
			nextState = FIN_WAIT_1;
    5aba:	2405      	movs	r4, #5
	bool     ret = false;
    5abc:	2000      	movs	r0, #0
			break;
    5abe:	e236      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
		case RCV_RSTACK:
		case RCV_RST:
			// Reset the connection
			TCP_SyslogWrite("SYN_RECEIVED:  rx_rst");
    5ac0:	4823      	ldr	r0, [pc, #140]	; (5b50 <TCP_FiniteStateMachine+0x3a0>)
    5ac2:	4b14      	ldr	r3, [pc, #80]	; (5b14 <TCP_FiniteStateMachine+0x364>)
    5ac4:	4798      	blx	r3
			// check if the local port match; else drop the pachet
			if (currentTCB->localPort == tcpHeader.destPort) {
    5ac6:	4b10      	ldr	r3, [pc, #64]	; (5b08 <TCP_FiniteStateMachine+0x358>)
    5ac8:	681b      	ldr	r3, [r3, #0]
    5aca:	8819      	ldrh	r1, [r3, #0]
    5acc:	4a12      	ldr	r2, [pc, #72]	; (5b18 <TCP_FiniteStateMachine+0x368>)
    5ace:	8852      	ldrh	r2, [r2, #2]
    5ad0:	4291      	cmp	r1, r2
    5ad2:	d001      	beq.n	5ad8 <TCP_FiniteStateMachine+0x328>
	bool     ret = false;
    5ad4:	2000      	movs	r0, #0
    5ad6:	e22a      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
				if (currentTCB->remoteAck == tcpHeader.sequenceNumber) {
    5ad8:	691a      	ldr	r2, [r3, #16]
    5ada:	4b0f      	ldr	r3, [pc, #60]	; (5b18 <TCP_FiniteStateMachine+0x368>)
    5adc:	685b      	ldr	r3, [r3, #4]
    5ade:	429a      	cmp	r2, r3
    5ae0:	d001      	beq.n	5ae6 <TCP_FiniteStateMachine+0x336>
	bool     ret = false;
    5ae2:	2000      	movs	r0, #0
    5ae4:	e223      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
					TCP_SyslogWrite("rst seq OK");
    5ae6:	481b      	ldr	r0, [pc, #108]	; (5b54 <TCP_FiniteStateMachine+0x3a4>)
    5ae8:	4b0a      	ldr	r3, [pc, #40]	; (5b14 <TCP_FiniteStateMachine+0x364>)
    5aea:	4798      	blx	r3
					currentTCB->destIP       = 0;
    5aec:	4b06      	ldr	r3, [pc, #24]	; (5b08 <TCP_FiniteStateMachine+0x358>)
    5aee:	681b      	ldr	r3, [r3, #0]
    5af0:	2000      	movs	r0, #0
    5af2:	6058      	str	r0, [r3, #4]
					currentTCB->destPort     = 0;
    5af4:	8118      	strh	r0, [r3, #8]
					currentTCB->localSeqno   = 0;
    5af6:	6158      	str	r0, [r3, #20]
					currentTCB->localLastAck = 0;
    5af8:	6198      	str	r0, [r3, #24]
					currentTCB->remoteSeqno  = 0;
    5afa:	60d8      	str	r0, [r3, #12]
					currentTCB->remoteAck    = 0;
    5afc:	6118      	str	r0, [r3, #16]
					currentTCB->remoteWnd    = 0;
    5afe:	8398      	strh	r0, [r3, #28]
					currentTCB->mss          = 0;
    5b00:	8418      	strh	r0, [r3, #32]

					nextState = LISTEN;
    5b02:	2401      	movs	r4, #1
    5b04:	e213      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
    5b06:	46c0      	nop			; (mov r8, r8)
    5b08:	200040a4 	.word	0x200040a4
    5b0c:	00008eb4 	.word	0x00008eb4
    5b10:	00009004 	.word	0x00009004
    5b14:	00005403 	.word	0x00005403
    5b18:	200008bc 	.word	0x200008bc
    5b1c:	000054dd 	.word	0x000054dd
    5b20:	00009014 	.word	0x00009014
    5b24:	00005471 	.word	0x00005471
    5b28:	00008ee0 	.word	0x00008ee0
    5b2c:	00009024 	.word	0x00009024
    5b30:	00009038 	.word	0x00009038
    5b34:	0000904c 	.word	0x0000904c
    5b38:	00009060 	.word	0x00009060
    5b3c:	00009070 	.word	0x00009070
    5b40:	00008f14 	.word	0x00008f14
    5b44:	00009084 	.word	0x00009084
    5b48:	0000909c 	.word	0x0000909c
    5b4c:	000090b4 	.word	0x000090b4
    5b50:	000090c8 	.word	0x000090c8
    5b54:	000090e0 	.word	0x000090e0
				}
			}
			break;
		case TIMEOUT:
			TCP_SyslogWrite("SYN_RECEIVED:  timeout");
    5b58:	48cb      	ldr	r0, [pc, #812]	; (5e88 <TCP_FiniteStateMachine+0x6d8>)
    5b5a:	4bcc      	ldr	r3, [pc, #816]	; (5e8c <TCP_FiniteStateMachine+0x6dc>)
    5b5c:	4798      	blx	r3
			if (currentTCB->timeoutsCount) {
    5b5e:	4bcc      	ldr	r3, [pc, #816]	; (5e90 <TCP_FiniteStateMachine+0x6e0>)
    5b60:	6818      	ldr	r0, [r3, #0]
    5b62:	234c      	movs	r3, #76	; 0x4c
    5b64:	5cc3      	ldrb	r3, [r0, r3]
    5b66:	2b00      	cmp	r3, #0
    5b68:	d115      	bne.n	5b96 <TCP_FiniteStateMachine+0x3e6>
				TCP_Snd(currentTCB);
			} else {
				// reseting the connection if there is no reply
				currentTCB->flags = TCP_RST_FLAG;
    5b6a:	2204      	movs	r2, #4
    5b6c:	234d      	movs	r3, #77	; 0x4d
    5b6e:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    5b70:	4bc8      	ldr	r3, [pc, #800]	; (5e94 <TCP_FiniteStateMachine+0x6e4>)
    5b72:	4798      	blx	r3
    5b74:	2800      	cmp	r0, #0
    5b76:	d100      	bne.n	5b7a <TCP_FiniteStateMachine+0x3ca>
    5b78:	e1d9      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
					currentTCB->destIP       = 0;
    5b7a:	4bc5      	ldr	r3, [pc, #788]	; (5e90 <TCP_FiniteStateMachine+0x6e0>)
    5b7c:	681b      	ldr	r3, [r3, #0]
    5b7e:	2200      	movs	r2, #0
    5b80:	605a      	str	r2, [r3, #4]
					currentTCB->destPort     = 0;
    5b82:	811a      	strh	r2, [r3, #8]
					currentTCB->localSeqno   = 0;
    5b84:	615a      	str	r2, [r3, #20]
					currentTCB->localLastAck = 0;
    5b86:	619a      	str	r2, [r3, #24]
					currentTCB->remoteSeqno  = 0;
    5b88:	60da      	str	r2, [r3, #12]
					currentTCB->remoteAck    = 0;
    5b8a:	611a      	str	r2, [r3, #16]
					currentTCB->remoteWnd    = 0;
    5b8c:	839a      	strh	r2, [r3, #28]
					currentTCB->mss          = 0;
    5b8e:	841a      	strh	r2, [r3, #32]
					nextState                = LISTEN;
    5b90:	2401      	movs	r4, #1
	bool     ret = false;
    5b92:	2000      	movs	r0, #0
    5b94:	e1cb      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
				TCP_Snd(currentTCB);
    5b96:	4bbf      	ldr	r3, [pc, #764]	; (5e94 <TCP_FiniteStateMachine+0x6e4>)
    5b98:	4798      	blx	r3
	bool     ret = false;
    5b9a:	2000      	movs	r0, #0
    5b9c:	e1c7      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
			// invalid packet so drop it
			break;
		}
		break;
	case ESTABLISHED:
		switch (event) {
    5b9e:	2a0c      	cmp	r2, #12
    5ba0:	d900      	bls.n	5ba4 <TCP_FiniteStateMachine+0x3f4>
    5ba2:	e1d4      	b.n	5f4e <TCP_FiniteStateMachine+0x79e>
    5ba4:	0092      	lsls	r2, r2, #2
    5ba6:	4bbc      	ldr	r3, [pc, #752]	; (5e98 <TCP_FiniteStateMachine+0x6e8>)
    5ba8:	589b      	ldr	r3, [r3, r2]
    5baa:	469f      	mov	pc, r3
		case RCV_ACK:
			TCP_SyslogWrite("ESTABLISHED: rx_ack");
    5bac:	48bb      	ldr	r0, [pc, #748]	; (5e9c <TCP_FiniteStateMachine+0x6ec>)
    5bae:	4bb7      	ldr	r3, [pc, #732]	; (5e8c <TCP_FiniteStateMachine+0x6dc>)
    5bb0:	4798      	blx	r3
			if (currentTCB->destIP == receivedRemoteAddress) {
    5bb2:	4bb7      	ldr	r3, [pc, #732]	; (5e90 <TCP_FiniteStateMachine+0x6e0>)
    5bb4:	681b      	ldr	r3, [r3, #0]
    5bb6:	4aba      	ldr	r2, [pc, #744]	; (5ea0 <TCP_FiniteStateMachine+0x6f0>)
    5bb8:	6992      	ldr	r2, [r2, #24]
    5bba:	6859      	ldr	r1, [r3, #4]
    5bbc:	4291      	cmp	r1, r2
    5bbe:	d001      	beq.n	5bc4 <TCP_FiniteStateMachine+0x414>
	bool     ret = false;
    5bc0:	2000      	movs	r0, #0
    5bc2:	e1b4      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
				// is sequence number OK?
				// remote ACK should be equal to header sequence number
				// we don't accept out of order packet (not enough memory)
				if (currentTCB->remoteAck == tcpHeader.sequenceNumber) {
    5bc4:	4ab6      	ldr	r2, [pc, #728]	; (5ea0 <TCP_FiniteStateMachine+0x6f0>)
    5bc6:	6851      	ldr	r1, [r2, #4]
    5bc8:	691a      	ldr	r2, [r3, #16]
    5bca:	428a      	cmp	r2, r1
    5bcc:	d001      	beq.n	5bd2 <TCP_FiniteStateMachine+0x422>
	bool     ret = false;
    5bce:	2000      	movs	r0, #0
    5bd0:	e1ad      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
					// This is a ACK packet only
					// check the ACK sequence
					// check if this is on already received Ack
					if (currentTCB->localLastAck < tcpHeader.ackNumber) {
    5bd2:	4ab3      	ldr	r2, [pc, #716]	; (5ea0 <TCP_FiniteStateMachine+0x6f0>)
    5bd4:	6890      	ldr	r0, [r2, #8]
    5bd6:	699a      	ldr	r2, [r3, #24]
    5bd8:	4282      	cmp	r2, r0
    5bda:	d300      	bcc.n	5bde <TCP_FiniteStateMachine+0x42e>
    5bdc:	e1b9      	b.n	5f52 <TCP_FiniteStateMachine+0x7a2>
						// check how many bytes sent was acknowledged
						if ((currentTCB->localSeqno + 1) >= tcpHeader.ackNumber) {
    5bde:	695a      	ldr	r2, [r3, #20]
    5be0:	1c55      	adds	r5, r2, #1
    5be2:	42a8      	cmp	r0, r5
    5be4:	d822      	bhi.n	5c2c <TCP_FiniteStateMachine+0x47c>
							notAckBytes = currentTCB->localSeqno - tcpHeader.ackNumber;
    5be6:	b292      	uxth	r2, r2
    5be8:	b285      	uxth	r5, r0
    5bea:	1b52      	subs	r2, r2, r5
    5bec:	b292      	uxth	r2, r2

							// update the pointer for next TX
							currentTCB->txBufferPtr = currentTCB->txBufferPtr - notAckBytes;
    5bee:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    5bf0:	1aad      	subs	r5, r5, r2
    5bf2:	635d      	str	r5, [r3, #52]	; 0x34
							currentTCB->bytesToSend = currentTCB->bytesToSend + notAckBytes;
    5bf4:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
    5bf6:	1952      	adds	r2, r2, r5
    5bf8:	b292      	uxth	r2, r2
    5bfa:	871a      	strh	r2, [r3, #56]	; 0x38

							// Check if all TX buffer/data was acknowledged
							if (currentTCB->bytesToSend == 0) {
    5bfc:	2a00      	cmp	r2, #0
    5bfe:	d103      	bne.n	5c08 <TCP_FiniteStateMachine+0x458>
								if (currentTCB->txBufState == TX_BUFF_IN_USE) {
    5c00:	323a      	adds	r2, #58	; 0x3a
    5c02:	5c9a      	ldrb	r2, [r3, r2]
    5c04:	2a02      	cmp	r2, #2
    5c06:	d008      	beq.n	5c1a <TCP_FiniteStateMachine+0x46a>
									currentTCB->txBufState = NO_BUFF;
								}
							}

							currentTCB->localLastAck = tcpHeader.ackNumber - 1;
    5c08:	1e42      	subs	r2, r0, #1
    5c0a:	619a      	str	r2, [r3, #24]
							currentTCB->localSeqno   = tcpHeader.ackNumber;
    5c0c:	6158      	str	r0, [r3, #20]

							// check if the packet has payload
							if (rcvPayloadLen > 0) {
    5c0e:	4aa4      	ldr	r2, [pc, #656]	; (5ea0 <TCP_FiniteStateMachine+0x6f0>)
    5c10:	8b90      	ldrh	r0, [r2, #28]
    5c12:	2800      	cmp	r0, #0
    5c14:	d105      	bne.n	5c22 <TCP_FiniteStateMachine+0x472>
	bool     ret = false;
    5c16:	2000      	movs	r0, #0
    5c18:	e189      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
									currentTCB->txBufState = NO_BUFF;
    5c1a:	2500      	movs	r5, #0
    5c1c:	3238      	adds	r2, #56	; 0x38
    5c1e:	549d      	strb	r5, [r3, r2]
    5c20:	e7f2      	b.n	5c08 <TCP_FiniteStateMachine+0x458>
								currentTCB->remoteSeqno = tcpHeader.sequenceNumber;
    5c22:	60d9      	str	r1, [r3, #12]

								// copy the payload to the local buffer
								TCP_PayloadSave(rcvPayloadLen);
    5c24:	4b9f      	ldr	r3, [pc, #636]	; (5ea4 <TCP_FiniteStateMachine+0x6f4>)
    5c26:	4798      	blx	r3
	bool     ret = false;
    5c28:	2000      	movs	r0, #0
    5c2a:	e180      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
							}
						} else {
							// this is a wrong Ack
							// ACK a packet that wasn't transmitted
							// send a reset
							currentTCB->flags = TCP_RST_FLAG | TCP_ACK_FLAG;
    5c2c:	2114      	movs	r1, #20
    5c2e:	224d      	movs	r2, #77	; 0x4d
    5c30:	5499      	strb	r1, [r3, r2]
							if (TCP_Snd(currentTCB)) {
    5c32:	0018      	movs	r0, r3
    5c34:	4b97      	ldr	r3, [pc, #604]	; (5e94 <TCP_FiniteStateMachine+0x6e4>)
    5c36:	4798      	blx	r3
    5c38:	2800      	cmp	r0, #0
    5c3a:	d100      	bne.n	5c3e <TCP_FiniteStateMachine+0x48e>
    5c3c:	e177      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
								nextState = CLOSED;
								TCB_Reset(currentTCB);
    5c3e:	4b94      	ldr	r3, [pc, #592]	; (5e90 <TCP_FiniteStateMachine+0x6e0>)
    5c40:	6818      	ldr	r0, [r3, #0]
    5c42:	4b99      	ldr	r3, [pc, #612]	; (5ea8 <TCP_FiniteStateMachine+0x6f8>)
    5c44:	4798      	blx	r3
								nextState = CLOSED;
    5c46:	2400      	movs	r4, #0
	bool     ret = false;
    5c48:	0020      	movs	r0, r4
    5c4a:	e170      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
					}
				}
			}
			break;
		case CLOSE:
			TCP_SyslogWrite("ESTABLISHED: close");
    5c4c:	4897      	ldr	r0, [pc, #604]	; (5eac <TCP_FiniteStateMachine+0x6fc>)
    5c4e:	4b8f      	ldr	r3, [pc, #572]	; (5e8c <TCP_FiniteStateMachine+0x6dc>)
    5c50:	4798      	blx	r3
			currentTCB->flags = TCP_FIN_FLAG;
    5c52:	4b8f      	ldr	r3, [pc, #572]	; (5e90 <TCP_FiniteStateMachine+0x6e0>)
    5c54:	6818      	ldr	r0, [r3, #0]
    5c56:	2201      	movs	r2, #1
    5c58:	234d      	movs	r3, #77	; 0x4d
    5c5a:	54c2      	strb	r2, [r0, r3]
			nextState         = FIN_WAIT_1;
			TCP_Snd(currentTCB);
    5c5c:	4b8d      	ldr	r3, [pc, #564]	; (5e94 <TCP_FiniteStateMachine+0x6e4>)
    5c5e:	4798      	blx	r3
			nextState         = FIN_WAIT_1;
    5c60:	2405      	movs	r4, #5
	bool     ret = false;
    5c62:	2000      	movs	r0, #0
			break;
    5c64:	e163      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
		case RCV_FINACK:
			TCP_SyslogWrite("ESTABLISHED: rx_finack");
    5c66:	4892      	ldr	r0, [pc, #584]	; (5eb0 <TCP_FiniteStateMachine+0x700>)
    5c68:	4b88      	ldr	r3, [pc, #544]	; (5e8c <TCP_FiniteStateMachine+0x6dc>)
    5c6a:	4798      	blx	r3
		case RCV_FIN:
			TCP_SyslogWrite("ESTABLISHED: rx_fin");
    5c6c:	4891      	ldr	r0, [pc, #580]	; (5eb4 <TCP_FiniteStateMachine+0x704>)
    5c6e:	4b87      	ldr	r3, [pc, #540]	; (5e8c <TCP_FiniteStateMachine+0x6dc>)
    5c70:	4798      	blx	r3
			// ACK the current packet
			// TO DO  check if it's a valid packet
			currentTCB->localSeqno = tcpHeader.ackNumber;
    5c72:	4b87      	ldr	r3, [pc, #540]	; (5e90 <TCP_FiniteStateMachine+0x6e0>)
    5c74:	6818      	ldr	r0, [r3, #0]
    5c76:	4b8a      	ldr	r3, [pc, #552]	; (5ea0 <TCP_FiniteStateMachine+0x6f0>)
    5c78:	689b      	ldr	r3, [r3, #8]
    5c7a:	6143      	str	r3, [r0, #20]
			currentTCB->remoteAck  = currentTCB->remoteAck + 1;
    5c7c:	6903      	ldr	r3, [r0, #16]
    5c7e:	3301      	adds	r3, #1
    5c80:	6103      	str	r3, [r0, #16]

			currentTCB->socketState        = SOCKET_CLOSING;
    5c82:	2204      	movs	r2, #4
    5c84:	234e      	movs	r3, #78	; 0x4e
    5c86:	54c2      	strb	r2, [r0, r3]
			currentTCB->timeout            = TCP_START_TIMEOUT_VAL;
    5c88:	3b4c      	subs	r3, #76	; 0x4c
    5c8a:	3244      	adds	r2, #68	; 0x44
    5c8c:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutReloadValue = TCP_START_TIMEOUT_VAL;
    5c8e:	3202      	adds	r2, #2
    5c90:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutsCount      = TCP_MAX_RETRIES;
    5c92:	3a45      	subs	r2, #69	; 0x45
    5c94:	334a      	adds	r3, #74	; 0x4a
    5c96:	54c2      	strb	r2, [r0, r3]
			// JUMP over CLOSE_WAIT state and send one packet with FIN + ACK
			currentTCB->flags = TCP_FIN_FLAG | TCP_ACK_FLAG;
    5c98:	320c      	adds	r2, #12
    5c9a:	3301      	adds	r3, #1
    5c9c:	54c2      	strb	r2, [r0, r3]

			nextState = LAST_ACK;
			TCP_Snd(currentTCB);
    5c9e:	4b7d      	ldr	r3, [pc, #500]	; (5e94 <TCP_FiniteStateMachine+0x6e4>)
    5ca0:	4798      	blx	r3
			nextState = LAST_ACK;
    5ca2:	2409      	movs	r4, #9
	bool     ret = false;
    5ca4:	2000      	movs	r0, #0
			break;
    5ca6:	e142      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
		case RCV_RST:
		case RCV_RSTACK:
			nextState = CLOSED;
			TCB_Reset(currentTCB);
    5ca8:	4b7f      	ldr	r3, [pc, #508]	; (5ea8 <TCP_FiniteStateMachine+0x6f8>)
    5caa:	4798      	blx	r3
			nextState = CLOSED;
    5cac:	2400      	movs	r4, #0
	bool     ret = false;
    5cae:	2000      	movs	r0, #0
			break;
    5cb0:	e13d      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
		case TIMEOUT:
			TCP_SyslogWrite("ESTABLISHED:  timeout");
    5cb2:	4881      	ldr	r0, [pc, #516]	; (5eb8 <TCP_FiniteStateMachine+0x708>)
    5cb4:	4b75      	ldr	r3, [pc, #468]	; (5e8c <TCP_FiniteStateMachine+0x6dc>)
    5cb6:	4798      	blx	r3
			if (currentTCB->timeoutsCount) {
    5cb8:	4b75      	ldr	r3, [pc, #468]	; (5e90 <TCP_FiniteStateMachine+0x6e0>)
    5cba:	6818      	ldr	r0, [r3, #0]
    5cbc:	234c      	movs	r3, #76	; 0x4c
    5cbe:	5cc3      	ldrb	r3, [r0, r3]
    5cc0:	2b00      	cmp	r3, #0
    5cc2:	d10e      	bne.n	5ce2 <TCP_FiniteStateMachine+0x532>
				TCP_Snd(currentTCB);
			} else {
				// reset the connection if there is no reply
				currentTCB->flags = TCP_RST_FLAG;
    5cc4:	2204      	movs	r2, #4
    5cc6:	234d      	movs	r3, #77	; 0x4d
    5cc8:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    5cca:	4b72      	ldr	r3, [pc, #456]	; (5e94 <TCP_FiniteStateMachine+0x6e4>)
    5ccc:	4798      	blx	r3
    5cce:	2800      	cmp	r0, #0
    5cd0:	d100      	bne.n	5cd4 <TCP_FiniteStateMachine+0x524>
    5cd2:	e12c      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
					nextState = CLOSE;
					TCB_Reset(currentTCB);
    5cd4:	4b6e      	ldr	r3, [pc, #440]	; (5e90 <TCP_FiniteStateMachine+0x6e0>)
    5cd6:	6818      	ldr	r0, [r3, #0]
    5cd8:	4b73      	ldr	r3, [pc, #460]	; (5ea8 <TCP_FiniteStateMachine+0x6f8>)
    5cda:	4798      	blx	r3
					nextState = CLOSE;
    5cdc:	2400      	movs	r4, #0
	bool     ret = false;
    5cde:	2000      	movs	r0, #0
    5ce0:	e125      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
				TCP_Snd(currentTCB);
    5ce2:	4b6c      	ldr	r3, [pc, #432]	; (5e94 <TCP_FiniteStateMachine+0x6e4>)
    5ce4:	4798      	blx	r3
	bool     ret = false;
    5ce6:	2000      	movs	r0, #0
    5ce8:	e121      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
		default:
			break;
		}
		break;
	case FIN_WAIT_1:
		switch (event) {
    5cea:	2a06      	cmp	r2, #6
    5cec:	d02e      	beq.n	5d4c <TCP_FiniteStateMachine+0x59c>
    5cee:	d91c      	bls.n	5d2a <TCP_FiniteStateMachine+0x57a>
    5cf0:	2a07      	cmp	r2, #7
    5cf2:	d03b      	beq.n	5d6c <TCP_FiniteStateMachine+0x5bc>
    5cf4:	2a0c      	cmp	r2, #12
    5cf6:	d000      	beq.n	5cfa <TCP_FiniteStateMachine+0x54a>
    5cf8:	e12d      	b.n	5f56 <TCP_FiniteStateMachine+0x7a6>
			if (TCP_Snd(currentTCB)) {
				nextState = TIME_WAIT;
			}
			break;
		case TIMEOUT:
			TCP_SyslogWrite("FIN_WAIT_1:  timeout");
    5cfa:	4870      	ldr	r0, [pc, #448]	; (5ebc <TCP_FiniteStateMachine+0x70c>)
    5cfc:	4b63      	ldr	r3, [pc, #396]	; (5e8c <TCP_FiniteStateMachine+0x6dc>)
    5cfe:	4798      	blx	r3
			if (currentTCB->timeoutsCount) {
    5d00:	4b63      	ldr	r3, [pc, #396]	; (5e90 <TCP_FiniteStateMachine+0x6e0>)
    5d02:	6818      	ldr	r0, [r3, #0]
    5d04:	234c      	movs	r3, #76	; 0x4c
    5d06:	5cc3      	ldrb	r3, [r0, r3]
    5d08:	2b00      	cmp	r3, #0
    5d0a:	d13f      	bne.n	5d8c <TCP_FiniteStateMachine+0x5dc>
				TCP_Snd(currentTCB);
			} else {
				// just reset the connection if there is no reply
				currentTCB->flags = TCP_RST_FLAG;
    5d0c:	2204      	movs	r2, #4
    5d0e:	234d      	movs	r3, #77	; 0x4d
    5d10:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    5d12:	4b60      	ldr	r3, [pc, #384]	; (5e94 <TCP_FiniteStateMachine+0x6e4>)
    5d14:	4798      	blx	r3
    5d16:	2800      	cmp	r0, #0
    5d18:	d100      	bne.n	5d1c <TCP_FiniteStateMachine+0x56c>
    5d1a:	e108      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
					nextState = CLOSE;
					TCB_Reset(currentTCB);
    5d1c:	4b5c      	ldr	r3, [pc, #368]	; (5e90 <TCP_FiniteStateMachine+0x6e0>)
    5d1e:	6818      	ldr	r0, [r3, #0]
    5d20:	4b61      	ldr	r3, [pc, #388]	; (5ea8 <TCP_FiniteStateMachine+0x6f8>)
    5d22:	4798      	blx	r3
					nextState = CLOSE;
    5d24:	2400      	movs	r4, #0
	bool     ret = false;
    5d26:	2000      	movs	r0, #0
    5d28:	e101      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
		switch (event) {
    5d2a:	2a04      	cmp	r2, #4
    5d2c:	d000      	beq.n	5d30 <TCP_FiniteStateMachine+0x580>
    5d2e:	e112      	b.n	5f56 <TCP_FiniteStateMachine+0x7a6>
			TCP_SyslogWrite("FIN_WAIT_1: rx_ack");
    5d30:	4863      	ldr	r0, [pc, #396]	; (5ec0 <TCP_FiniteStateMachine+0x710>)
    5d32:	4b56      	ldr	r3, [pc, #344]	; (5e8c <TCP_FiniteStateMachine+0x6dc>)
    5d34:	4798      	blx	r3
			currentTCB->timeout       = TCP_START_TIMEOUT_VAL;
    5d36:	4b56      	ldr	r3, [pc, #344]	; (5e90 <TCP_FiniteStateMachine+0x6e0>)
    5d38:	681b      	ldr	r3, [r3, #0]
    5d3a:	2102      	movs	r1, #2
    5d3c:	2248      	movs	r2, #72	; 0x48
    5d3e:	5299      	strh	r1, [r3, r2]
			currentTCB->timeoutsCount = 1;
    5d40:	3901      	subs	r1, #1
    5d42:	3204      	adds	r2, #4
    5d44:	5499      	strb	r1, [r3, r2]
			nextState                 = FIN_WAIT_2;
    5d46:	2406      	movs	r4, #6
	bool     ret = false;
    5d48:	2000      	movs	r0, #0
			break;
    5d4a:	e0f0      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
			TCP_SyslogWrite("FIN_WAIT_1: rx_fin");
    5d4c:	485d      	ldr	r0, [pc, #372]	; (5ec4 <TCP_FiniteStateMachine+0x714>)
    5d4e:	4b4f      	ldr	r3, [pc, #316]	; (5e8c <TCP_FiniteStateMachine+0x6dc>)
    5d50:	4798      	blx	r3
			currentTCB->flags = TCP_ACK_FLAG;
    5d52:	4b4f      	ldr	r3, [pc, #316]	; (5e90 <TCP_FiniteStateMachine+0x6e0>)
    5d54:	6818      	ldr	r0, [r3, #0]
    5d56:	2210      	movs	r2, #16
    5d58:	234d      	movs	r3, #77	; 0x4d
    5d5a:	54c2      	strb	r2, [r0, r3]
			if (TCP_Snd(currentTCB)) {
    5d5c:	4b4d      	ldr	r3, [pc, #308]	; (5e94 <TCP_FiniteStateMachine+0x6e4>)
    5d5e:	4798      	blx	r3
    5d60:	2800      	cmp	r0, #0
    5d62:	d100      	bne.n	5d66 <TCP_FiniteStateMachine+0x5b6>
    5d64:	e0e3      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
				nextState = CLOSING;
    5d66:	2408      	movs	r4, #8
	bool     ret = false;
    5d68:	2000      	movs	r0, #0
    5d6a:	e0e0      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
			TCP_SyslogWrite("FIN_WAIT_1: rx_finack");
    5d6c:	4856      	ldr	r0, [pc, #344]	; (5ec8 <TCP_FiniteStateMachine+0x718>)
    5d6e:	4b47      	ldr	r3, [pc, #284]	; (5e8c <TCP_FiniteStateMachine+0x6dc>)
    5d70:	4798      	blx	r3
			currentTCB->flags = TCP_ACK_FLAG;
    5d72:	4b47      	ldr	r3, [pc, #284]	; (5e90 <TCP_FiniteStateMachine+0x6e0>)
    5d74:	6818      	ldr	r0, [r3, #0]
    5d76:	2210      	movs	r2, #16
    5d78:	234d      	movs	r3, #77	; 0x4d
    5d7a:	54c2      	strb	r2, [r0, r3]
			if (TCP_Snd(currentTCB)) {
    5d7c:	4b45      	ldr	r3, [pc, #276]	; (5e94 <TCP_FiniteStateMachine+0x6e4>)
    5d7e:	4798      	blx	r3
    5d80:	2800      	cmp	r0, #0
    5d82:	d100      	bne.n	5d86 <TCP_FiniteStateMachine+0x5d6>
    5d84:	e0d3      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
				nextState = TIME_WAIT;
    5d86:	240a      	movs	r4, #10
	bool     ret = false;
    5d88:	2000      	movs	r0, #0
    5d8a:	e0d0      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
				TCP_Snd(currentTCB);
    5d8c:	4b41      	ldr	r3, [pc, #260]	; (5e94 <TCP_FiniteStateMachine+0x6e4>)
    5d8e:	4798      	blx	r3
	bool     ret = false;
    5d90:	2000      	movs	r0, #0
    5d92:	e0cc      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
		default:
			break;
		}
		break;
	case FIN_WAIT_2:
		switch (event) {
    5d94:	2a06      	cmp	r2, #6
    5d96:	d003      	beq.n	5da0 <TCP_FiniteStateMachine+0x5f0>
    5d98:	2a0c      	cmp	r2, #12
    5d9a:	d00e      	beq.n	5dba <TCP_FiniteStateMachine+0x60a>
	bool     ret = false;
    5d9c:	2000      	movs	r0, #0
    5d9e:	e0c6      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
		case RCV_FIN:
			TCP_SyslogWrite("FIN_WAIT_2: rx_fin");
    5da0:	484a      	ldr	r0, [pc, #296]	; (5ecc <TCP_FiniteStateMachine+0x71c>)
    5da2:	4b3a      	ldr	r3, [pc, #232]	; (5e8c <TCP_FiniteStateMachine+0x6dc>)
    5da4:	4798      	blx	r3
			if (TCP_Snd(currentTCB)) {
    5da6:	4b3a      	ldr	r3, [pc, #232]	; (5e90 <TCP_FiniteStateMachine+0x6e0>)
    5da8:	6818      	ldr	r0, [r3, #0]
    5daa:	4b3a      	ldr	r3, [pc, #232]	; (5e94 <TCP_FiniteStateMachine+0x6e4>)
    5dac:	4798      	blx	r3
    5dae:	2800      	cmp	r0, #0
    5db0:	d100      	bne.n	5db4 <TCP_FiniteStateMachine+0x604>
    5db2:	e0bc      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
				nextState = TIME_WAIT;
    5db4:	240a      	movs	r4, #10
	bool     ret = false;
    5db6:	2000      	movs	r0, #0
    5db8:	e0b9      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
			}
			break;
		case TIMEOUT:
			TCP_SyslogWrite("FIN_WAIT_2:  timeout");
    5dba:	4845      	ldr	r0, [pc, #276]	; (5ed0 <TCP_FiniteStateMachine+0x720>)
    5dbc:	4b33      	ldr	r3, [pc, #204]	; (5e8c <TCP_FiniteStateMachine+0x6dc>)
    5dbe:	4798      	blx	r3
			if (currentTCB->timeoutsCount) {
    5dc0:	4b33      	ldr	r3, [pc, #204]	; (5e90 <TCP_FiniteStateMachine+0x6e0>)
    5dc2:	6818      	ldr	r0, [r3, #0]
    5dc4:	234c      	movs	r3, #76	; 0x4c
    5dc6:	5cc3      	ldrb	r3, [r0, r3]
    5dc8:	2b00      	cmp	r3, #0
    5dca:	d10e      	bne.n	5dea <TCP_FiniteStateMachine+0x63a>
				TCP_Snd(currentTCB);
			} else {
				// just reset the connection if there is no reply
				currentTCB->flags = TCP_RST_FLAG;
    5dcc:	2204      	movs	r2, #4
    5dce:	234d      	movs	r3, #77	; 0x4d
    5dd0:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    5dd2:	4b30      	ldr	r3, [pc, #192]	; (5e94 <TCP_FiniteStateMachine+0x6e4>)
    5dd4:	4798      	blx	r3
    5dd6:	2800      	cmp	r0, #0
    5dd8:	d100      	bne.n	5ddc <TCP_FiniteStateMachine+0x62c>
    5dda:	e0a8      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
					nextState = CLOSE;
					TCB_Reset(currentTCB);
    5ddc:	4b2c      	ldr	r3, [pc, #176]	; (5e90 <TCP_FiniteStateMachine+0x6e0>)
    5dde:	6818      	ldr	r0, [r3, #0]
    5de0:	4b31      	ldr	r3, [pc, #196]	; (5ea8 <TCP_FiniteStateMachine+0x6f8>)
    5de2:	4798      	blx	r3
					nextState = CLOSE;
    5de4:	2400      	movs	r4, #0
	bool     ret = false;
    5de6:	2000      	movs	r0, #0
    5de8:	e0a1      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
				TCP_Snd(currentTCB);
    5dea:	4b2a      	ldr	r3, [pc, #168]	; (5e94 <TCP_FiniteStateMachine+0x6e4>)
    5dec:	4798      	blx	r3
	bool     ret = false;
    5dee:	2000      	movs	r0, #0
    5df0:	e09d      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
		break;
	case CLOSE_WAIT:
		// This state is defined in RFC, but is not used in the application
		break;
	case CLOSING:
		switch (event) {
    5df2:	2a04      	cmp	r2, #4
    5df4:	d001      	beq.n	5dfa <TCP_FiniteStateMachine+0x64a>
	bool     ret = false;
    5df6:	2000      	movs	r0, #0
    5df8:	e099      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
		case RCV_ACK:
			TCP_SyslogWrite("CLOSING: rx_ack");
    5dfa:	4836      	ldr	r0, [pc, #216]	; (5ed4 <TCP_FiniteStateMachine+0x724>)
    5dfc:	4b23      	ldr	r3, [pc, #140]	; (5e8c <TCP_FiniteStateMachine+0x6dc>)
    5dfe:	4798      	blx	r3
			nextState = TIME_WAIT;
    5e00:	240a      	movs	r4, #10
	bool     ret = false;
    5e02:	2000      	movs	r0, #0
			break;
    5e04:	e093      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
			break;
		}
		break;
	case LAST_ACK:
		// check if the packet belongs to the curent TCB
		switch (event) {
    5e06:	2a07      	cmp	r2, #7
    5e08:	d005      	beq.n	5e16 <TCP_FiniteStateMachine+0x666>
    5e0a:	2a0c      	cmp	r2, #12
    5e0c:	d01b      	beq.n	5e46 <TCP_FiniteStateMachine+0x696>
    5e0e:	2a04      	cmp	r2, #4
    5e10:	d001      	beq.n	5e16 <TCP_FiniteStateMachine+0x666>
	bool     ret = false;
    5e12:	2000      	movs	r0, #0
    5e14:	e08b      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
		case RCV_FINACK:
		case RCV_ACK:
			if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPort == tcpHeader.sourcePort)) {
    5e16:	4b22      	ldr	r3, [pc, #136]	; (5ea0 <TCP_FiniteStateMachine+0x6f0>)
    5e18:	699b      	ldr	r3, [r3, #24]
    5e1a:	6842      	ldr	r2, [r0, #4]
    5e1c:	429a      	cmp	r2, r3
    5e1e:	d001      	beq.n	5e24 <TCP_FiniteStateMachine+0x674>
	bool     ret = false;
    5e20:	2000      	movs	r0, #0
    5e22:	e084      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
			if ((currentTCB->destIP == receivedRemoteAddress) && (currentTCB->destPort == tcpHeader.sourcePort)) {
    5e24:	8902      	ldrh	r2, [r0, #8]
    5e26:	4b1e      	ldr	r3, [pc, #120]	; (5ea0 <TCP_FiniteStateMachine+0x6f0>)
    5e28:	881b      	ldrh	r3, [r3, #0]
    5e2a:	429a      	cmp	r2, r3
    5e2c:	d001      	beq.n	5e32 <TCP_FiniteStateMachine+0x682>
	bool     ret = false;
    5e2e:	2000      	movs	r0, #0
    5e30:	e07d      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
				TCP_SyslogWrite("LAST_ACK: rx_ack");
    5e32:	4829      	ldr	r0, [pc, #164]	; (5ed8 <TCP_FiniteStateMachine+0x728>)
    5e34:	4b15      	ldr	r3, [pc, #84]	; (5e8c <TCP_FiniteStateMachine+0x6dc>)
    5e36:	4798      	blx	r3
				nextState = CLOSED;
				TCB_Reset(currentTCB);
    5e38:	4b15      	ldr	r3, [pc, #84]	; (5e90 <TCP_FiniteStateMachine+0x6e0>)
    5e3a:	6818      	ldr	r0, [r3, #0]
    5e3c:	4b1a      	ldr	r3, [pc, #104]	; (5ea8 <TCP_FiniteStateMachine+0x6f8>)
    5e3e:	4798      	blx	r3
				nextState = CLOSED;
    5e40:	2400      	movs	r4, #0
	bool     ret = false;
    5e42:	2000      	movs	r0, #0
    5e44:	e073      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
			}
			break;
		case TIMEOUT:
			if (currentTCB->timeoutsCount) {
    5e46:	234c      	movs	r3, #76	; 0x4c
    5e48:	5cc3      	ldrb	r3, [r0, r3]
    5e4a:	2b00      	cmp	r3, #0
    5e4c:	d10d      	bne.n	5e6a <TCP_FiniteStateMachine+0x6ba>
				TCP_Snd(currentTCB);
			} else {
				// just reset the connection if there is no reply
				currentTCB->flags = TCP_RST_FLAG;
    5e4e:	2204      	movs	r2, #4
    5e50:	234d      	movs	r3, #77	; 0x4d
    5e52:	54c2      	strb	r2, [r0, r3]
				if (TCP_Snd(currentTCB)) {
    5e54:	4b0f      	ldr	r3, [pc, #60]	; (5e94 <TCP_FiniteStateMachine+0x6e4>)
    5e56:	4798      	blx	r3
    5e58:	2800      	cmp	r0, #0
    5e5a:	d068      	beq.n	5f2e <TCP_FiniteStateMachine+0x77e>
					nextState = CLOSE;
					TCB_Reset(currentTCB);
    5e5c:	4b0c      	ldr	r3, [pc, #48]	; (5e90 <TCP_FiniteStateMachine+0x6e0>)
    5e5e:	6818      	ldr	r0, [r3, #0]
    5e60:	4b11      	ldr	r3, [pc, #68]	; (5ea8 <TCP_FiniteStateMachine+0x6f8>)
    5e62:	4798      	blx	r3
					nextState = CLOSE;
    5e64:	2400      	movs	r4, #0
	bool     ret = false;
    5e66:	2000      	movs	r0, #0
    5e68:	e061      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
				TCP_Snd(currentTCB);
    5e6a:	4b0a      	ldr	r3, [pc, #40]	; (5e94 <TCP_FiniteStateMachine+0x6e4>)
    5e6c:	4798      	blx	r3
	bool     ret = false;
    5e6e:	2000      	movs	r0, #0
    5e70:	e05d      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
		default:
			break;
		}
		break;
	case TIME_WAIT:
		TCP_SyslogWrite("Time Wait");
    5e72:	481a      	ldr	r0, [pc, #104]	; (5edc <TCP_FiniteStateMachine+0x72c>)
    5e74:	4b05      	ldr	r3, [pc, #20]	; (5e8c <TCP_FiniteStateMachine+0x6dc>)
    5e76:	4798      	blx	r3
		nextState = CLOSED;
		TCB_Reset(currentTCB);
    5e78:	4b05      	ldr	r3, [pc, #20]	; (5e90 <TCP_FiniteStateMachine+0x6e0>)
    5e7a:	6818      	ldr	r0, [r3, #0]
    5e7c:	4b0a      	ldr	r3, [pc, #40]	; (5ea8 <TCP_FiniteStateMachine+0x6f8>)
    5e7e:	4798      	blx	r3
		nextState = CLOSED;
    5e80:	2400      	movs	r4, #0
	bool     ret = false;
    5e82:	2000      	movs	r0, #0
		break;
    5e84:	e053      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
    5e86:	46c0      	nop			; (mov r8, r8)
    5e88:	000090ec 	.word	0x000090ec
    5e8c:	00005403 	.word	0x00005403
    5e90:	200040a4 	.word	0x200040a4
    5e94:	000054dd 	.word	0x000054dd
    5e98:	00008f48 	.word	0x00008f48
    5e9c:	00009104 	.word	0x00009104
    5ea0:	200008bc 	.word	0x200008bc
    5ea4:	0000575d 	.word	0x0000575d
    5ea8:	00005471 	.word	0x00005471
    5eac:	00009118 	.word	0x00009118
    5eb0:	0000912c 	.word	0x0000912c
    5eb4:	00009144 	.word	0x00009144
    5eb8:	00009158 	.word	0x00009158
    5ebc:	000091b0 	.word	0x000091b0
    5ec0:	00009184 	.word	0x00009184
    5ec4:	00009170 	.word	0x00009170
    5ec8:	00009198 	.word	0x00009198
    5ecc:	000091c8 	.word	0x000091c8
    5ed0:	000091dc 	.word	0x000091dc
    5ed4:	000091f4 	.word	0x000091f4
    5ed8:	00009204 	.word	0x00009204
    5edc:	00009218 	.word	0x00009218
	case CLOSED:
		switch (event) {
    5ee0:	2a01      	cmp	r2, #1
    5ee2:	d003      	beq.n	5eec <TCP_FiniteStateMachine+0x73c>
    5ee4:	2a02      	cmp	r2, #2
    5ee6:	d016      	beq.n	5f16 <TCP_FiniteStateMachine+0x766>
	bool     ret = false;
    5ee8:	2000      	movs	r0, #0
    5eea:	e020      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
		case ACTIVE_OPEN:
			TCP_SyslogWrite("CLOSED: active_open");
    5eec:	481b      	ldr	r0, [pc, #108]	; (5f5c <TCP_FiniteStateMachine+0x7ac>)
    5eee:	4b1c      	ldr	r3, [pc, #112]	; (5f60 <TCP_FiniteStateMachine+0x7b0>)
    5ef0:	4798      	blx	r3
			// create and send a SYN packet
			currentTCB->timeout            = TCP_START_TIMEOUT_VAL;
    5ef2:	4b1c      	ldr	r3, [pc, #112]	; (5f64 <TCP_FiniteStateMachine+0x7b4>)
    5ef4:	6818      	ldr	r0, [r3, #0]
    5ef6:	2302      	movs	r3, #2
    5ef8:	2248      	movs	r2, #72	; 0x48
    5efa:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutReloadValue = TCP_START_TIMEOUT_VAL;
    5efc:	3202      	adds	r2, #2
    5efe:	5283      	strh	r3, [r0, r2]
			currentTCB->timeoutsCount      = TCP_MAX_SYN_RETRIES;
    5f00:	3a47      	subs	r2, #71	; 0x47
    5f02:	334a      	adds	r3, #74	; 0x4a
    5f04:	54c2      	strb	r2, [r0, r3]
			currentTCB->flags              = TCP_SYN_FLAG;
    5f06:	3301      	adds	r3, #1
    5f08:	2202      	movs	r2, #2
    5f0a:	54c2      	strb	r2, [r0, r3]
			TCP_Snd(currentTCB);
    5f0c:	4b16      	ldr	r3, [pc, #88]	; (5f68 <TCP_FiniteStateMachine+0x7b8>)
    5f0e:	4798      	blx	r3
			nextState = SYN_SENT;
    5f10:	2402      	movs	r4, #2
			ret       = true;
    5f12:	2001      	movs	r0, #1
			break;
    5f14:	e00b      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
		case PASIVE_OPEN:
			TCP_SyslogWrite("CLOSED: passive_open");
    5f16:	4815      	ldr	r0, [pc, #84]	; (5f6c <TCP_FiniteStateMachine+0x7bc>)
    5f18:	4b11      	ldr	r3, [pc, #68]	; (5f60 <TCP_FiniteStateMachine+0x7b0>)
    5f1a:	4798      	blx	r3
			currentTCB->destIP   = 0;
    5f1c:	4b11      	ldr	r3, [pc, #68]	; (5f64 <TCP_FiniteStateMachine+0x7b4>)
    5f1e:	681b      	ldr	r3, [r3, #0]
    5f20:	2200      	movs	r2, #0
    5f22:	605a      	str	r2, [r3, #4]
			currentTCB->destPort = 0;
    5f24:	811a      	strh	r2, [r3, #8]
			nextState            = LISTEN;
    5f26:	2401      	movs	r4, #1
			ret                  = true;
    5f28:	2001      	movs	r0, #1
			break;
    5f2a:	e000      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
	bool     ret = false;
    5f2c:	2000      	movs	r0, #0
		}
		break;
	default:
		break;
	}
	currentTCB->connectionEvent = DUMMY_NOP; // we are handling the event...
    5f2e:	4b0d      	ldr	r3, [pc, #52]	; (5f64 <TCP_FiniteStateMachine+0x7b4>)
    5f30:	681b      	ldr	r3, [r3, #0]
    5f32:	210d      	movs	r1, #13
    5f34:	223c      	movs	r2, #60	; 0x3c
    5f36:	5499      	strb	r1, [r3, r2]
	currentTCB->fsmState        = nextState;
    5f38:	3a01      	subs	r2, #1
    5f3a:	549c      	strb	r4, [r3, r2]
	return ret;
}
    5f3c:	bd70      	pop	{r4, r5, r6, pc}
	bool     ret = false;
    5f3e:	2000      	movs	r0, #0
    5f40:	e7f5      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
    5f42:	2000      	movs	r0, #0
    5f44:	e7f3      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
    5f46:	2000      	movs	r0, #0
    5f48:	e7f1      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
    5f4a:	2000      	movs	r0, #0
    5f4c:	e7ef      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
    5f4e:	2000      	movs	r0, #0
    5f50:	e7ed      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
    5f52:	2000      	movs	r0, #0
    5f54:	e7eb      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
    5f56:	2000      	movs	r0, #0
    5f58:	e7e9      	b.n	5f2e <TCP_FiniteStateMachine+0x77e>
    5f5a:	46c0      	nop			; (mov r8, r8)
    5f5c:	00009224 	.word	0x00009224
    5f60:	00005403 	.word	0x00005403
    5f64:	200040a4 	.word	0x200040a4
    5f68:	000054dd 	.word	0x000054dd
    5f6c:	00009238 	.word	0x00009238

00005f70 <TCP_Recv>:
{
    5f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f72:	0005      	movs	r5, r0
    5f74:	000c      	movs	r4, r1
	receivedRemoteAddress = 0;
    5f76:	4e5c      	ldr	r6, [pc, #368]	; (60e8 <TCP_Recv+0x178>)
    5f78:	2700      	movs	r7, #0
    5f7a:	61b7      	str	r7, [r6, #24]
	rcvPayloadLen         = 0;
    5f7c:	83b7      	strh	r7, [r6, #28]
	ETH_ReadBlock((char *)&tcpHeader, sizeof(tcpHeader_t));
    5f7e:	2114      	movs	r1, #20
    5f80:	0030      	movs	r0, r6
    5f82:	4b5a      	ldr	r3, [pc, #360]	; (60ec <TCP_Recv+0x17c>)
    5f84:	4798      	blx	r3
	currentTCB = NULL;
    5f86:	4b5a      	ldr	r3, [pc, #360]	; (60f0 <TCP_Recv+0x180>)
    5f88:	601f      	str	r7, [r3, #0]
	if ((tcpHeader.destPort != 0) && (tcpHeader.sourcePort != 0)) {
    5f8a:	8873      	ldrh	r3, [r6, #2]
    5f8c:	2b00      	cmp	r3, #0
    5f8e:	d062      	beq.n	6056 <TCP_Recv+0xe6>
    5f90:	4a55      	ldr	r2, [pc, #340]	; (60e8 <TCP_Recv+0x178>)
    5f92:	8812      	ldrh	r2, [r2, #0]
    5f94:	2a00      	cmp	r2, #0
    5f96:	d05e      	beq.n	6056 <TCP_Recv+0xe6>
		tcpHeader.sourcePort = ntohs(tcpHeader.sourcePort);
    5f98:	0a16      	lsrs	r6, r2, #8
    5f9a:	0212      	lsls	r2, r2, #8
    5f9c:	4316      	orrs	r6, r2
    5f9e:	b2b6      	uxth	r6, r6
    5fa0:	4a51      	ldr	r2, [pc, #324]	; (60e8 <TCP_Recv+0x178>)
    5fa2:	8016      	strh	r6, [r2, #0]
		tcpHeader.destPort   = ntohs(tcpHeader.destPort);
    5fa4:	0a18      	lsrs	r0, r3, #8
    5fa6:	021b      	lsls	r3, r3, #8
    5fa8:	4318      	orrs	r0, r3
    5faa:	b280      	uxth	r0, r0
    5fac:	8050      	strh	r0, [r2, #2]
		tcbPtr = tcbList;
    5fae:	4b51      	ldr	r3, [pc, #324]	; (60f4 <TCP_Recv+0x184>)
    5fb0:	681a      	ldr	r2, [r3, #0]
	socklistsize_t count = 0;
    5fb2:	2300      	movs	r3, #0
		while ((tcbPtr != NULL) && (count < tcbListSize)) {
    5fb4:	2a00      	cmp	r2, #0
    5fb6:	d00d      	beq.n	5fd4 <TCP_Recv+0x64>
    5fb8:	494f      	ldr	r1, [pc, #316]	; (60f8 <TCP_Recv+0x188>)
    5fba:	7809      	ldrb	r1, [r1, #0]
    5fbc:	b249      	sxtb	r1, r1
    5fbe:	428b      	cmp	r3, r1
    5fc0:	da08      	bge.n	5fd4 <TCP_Recv+0x64>
			if (tcpHeader.destPort == tcbPtr->localPort) {
    5fc2:	8811      	ldrh	r1, [r2, #0]
    5fc4:	4288      	cmp	r0, r1
    5fc6:	d003      	beq.n	5fd0 <TCP_Recv+0x60>
				tcbPtr = tcbPtr->nextTCB;
    5fc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
				count++;
    5fca:	3301      	adds	r3, #1
    5fcc:	b25b      	sxtb	r3, r3
    5fce:	e7f1      	b.n	5fb4 <TCP_Recv+0x44>
				currentTCB = tcbPtr;
    5fd0:	4b47      	ldr	r3, [pc, #284]	; (60f0 <TCP_Recv+0x180>)
    5fd2:	601a      	str	r2, [r3, #0]
		if (currentTCB != NULL) {
    5fd4:	4b46      	ldr	r3, [pc, #280]	; (60f0 <TCP_Recv+0x180>)
    5fd6:	681b      	ldr	r3, [r3, #0]
    5fd8:	2b00      	cmp	r3, #0
    5fda:	d03c      	beq.n	6056 <TCP_Recv+0xe6>
			if ((tcpHeader.sourcePort == currentTCB->destPort) || (currentTCB->destIP == 0)) {
    5fdc:	891a      	ldrh	r2, [r3, #8]
    5fde:	4296      	cmp	r6, r2
    5fe0:	d002      	beq.n	5fe8 <TCP_Recv+0x78>
    5fe2:	685b      	ldr	r3, [r3, #4]
    5fe4:	2b00      	cmp	r3, #0
    5fe6:	d136      	bne.n	6056 <TCP_Recv+0xe6>
				receivedRemoteAddress = remoteAddress;
    5fe8:	4a3f      	ldr	r2, [pc, #252]	; (60e8 <TCP_Recv+0x178>)
    5fea:	6195      	str	r5, [r2, #24]
				rcvPayloadLen         = length - (uint16_t)(tcpHeader.dataOffset << 2);
    5fec:	7b13      	ldrb	r3, [r2, #12]
    5fee:	091b      	lsrs	r3, r3, #4
    5ff0:	009b      	lsls	r3, r3, #2
    5ff2:	1ae4      	subs	r4, r4, r3
    5ff4:	8394      	strh	r4, [r2, #28]
				if (TCP_ParseTCPOptions() == true) {
    5ff6:	4b41      	ldr	r3, [pc, #260]	; (60fc <TCP_Recv+0x18c>)
    5ff8:	4798      	blx	r3
    5ffa:	2800      	cmp	r0, #0
    5ffc:	d100      	bne.n	6000 <TCP_Recv+0x90>
    5ffe:	e06f      	b.n	60e0 <TCP_Recv+0x170>
					if (tcpHeader.syn) {
    6000:	4b39      	ldr	r3, [pc, #228]	; (60e8 <TCP_Recv+0x178>)
    6002:	7b5b      	ldrb	r3, [r3, #13]
    6004:	079a      	lsls	r2, r3, #30
    6006:	d530      	bpl.n	606a <TCP_Recv+0xfa>
						if (tcpHeader.ack) {
    6008:	06db      	lsls	r3, r3, #27
    600a:	d525      	bpl.n	6058 <TCP_Recv+0xe8>
							TCP_SyslogWrite("found syn&ack");
    600c:	483c      	ldr	r0, [pc, #240]	; (6100 <TCP_Recv+0x190>)
    600e:	4b3d      	ldr	r3, [pc, #244]	; (6104 <TCP_Recv+0x194>)
    6010:	4798      	blx	r3
							currentTCB->connectionEvent = RCV_SYNACK;
    6012:	4b37      	ldr	r3, [pc, #220]	; (60f0 <TCP_Recv+0x180>)
    6014:	681a      	ldr	r2, [r3, #0]
    6016:	2105      	movs	r1, #5
    6018:	233c      	movs	r3, #60	; 0x3c
    601a:	54d1      	strb	r1, [r2, r3]
					tcpHeader.ackNumber      = ntohl(tcpHeader.ackNumber);
    601c:	4832      	ldr	r0, [pc, #200]	; (60e8 <TCP_Recv+0x178>)
    601e:	6881      	ldr	r1, [r0, #8]
    6020:	0e0a      	lsrs	r2, r1, #24
    6022:	0a0b      	lsrs	r3, r1, #8
    6024:	27ff      	movs	r7, #255	; 0xff
    6026:	023f      	lsls	r7, r7, #8
    6028:	403b      	ands	r3, r7
    602a:	431a      	orrs	r2, r3
    602c:	020e      	lsls	r6, r1, #8
    602e:	25ff      	movs	r5, #255	; 0xff
    6030:	042d      	lsls	r5, r5, #16
    6032:	402e      	ands	r6, r5
    6034:	4332      	orrs	r2, r6
    6036:	0609      	lsls	r1, r1, #24
    6038:	430a      	orrs	r2, r1
    603a:	6082      	str	r2, [r0, #8]
					tcpHeader.sequenceNumber = ntohl(tcpHeader.sequenceNumber);
    603c:	6842      	ldr	r2, [r0, #4]
    603e:	0e13      	lsrs	r3, r2, #24
    6040:	0a14      	lsrs	r4, r2, #8
    6042:	403c      	ands	r4, r7
    6044:	4323      	orrs	r3, r4
    6046:	0211      	lsls	r1, r2, #8
    6048:	4029      	ands	r1, r5
    604a:	430b      	orrs	r3, r1
    604c:	0612      	lsls	r2, r2, #24
    604e:	4313      	orrs	r3, r2
    6050:	6043      	str	r3, [r0, #4]
					TCP_FiniteStateMachine();
    6052:	4b2d      	ldr	r3, [pc, #180]	; (6108 <TCP_Recv+0x198>)
    6054:	4798      	blx	r3
}
    6056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
							TCP_SyslogWrite("found syn");
    6058:	482c      	ldr	r0, [pc, #176]	; (610c <TCP_Recv+0x19c>)
    605a:	4b2a      	ldr	r3, [pc, #168]	; (6104 <TCP_Recv+0x194>)
    605c:	4798      	blx	r3
							currentTCB->connectionEvent = RCV_SYN;
    605e:	4b24      	ldr	r3, [pc, #144]	; (60f0 <TCP_Recv+0x180>)
    6060:	681a      	ldr	r2, [r3, #0]
    6062:	2103      	movs	r1, #3
    6064:	233c      	movs	r3, #60	; 0x3c
    6066:	54d1      	strb	r1, [r2, r3]
    6068:	e7d8      	b.n	601c <TCP_Recv+0xac>
					} else if (tcpHeader.fin) {
    606a:	07da      	lsls	r2, r3, #31
    606c:	d513      	bpl.n	6096 <TCP_Recv+0x126>
						if (tcpHeader.ack) {
    606e:	06db      	lsls	r3, r3, #27
    6070:	d508      	bpl.n	6084 <TCP_Recv+0x114>
							TCP_SyslogWrite("found fin&ack");
    6072:	4827      	ldr	r0, [pc, #156]	; (6110 <TCP_Recv+0x1a0>)
    6074:	4b23      	ldr	r3, [pc, #140]	; (6104 <TCP_Recv+0x194>)
    6076:	4798      	blx	r3
							currentTCB->connectionEvent = RCV_FINACK;
    6078:	4b1d      	ldr	r3, [pc, #116]	; (60f0 <TCP_Recv+0x180>)
    607a:	681a      	ldr	r2, [r3, #0]
    607c:	2107      	movs	r1, #7
    607e:	233c      	movs	r3, #60	; 0x3c
    6080:	54d1      	strb	r1, [r2, r3]
    6082:	e7cb      	b.n	601c <TCP_Recv+0xac>
							TCP_SyslogWrite("found fin");
    6084:	4823      	ldr	r0, [pc, #140]	; (6114 <TCP_Recv+0x1a4>)
    6086:	4b1f      	ldr	r3, [pc, #124]	; (6104 <TCP_Recv+0x194>)
    6088:	4798      	blx	r3
							currentTCB->connectionEvent = RCV_FIN;
    608a:	4b19      	ldr	r3, [pc, #100]	; (60f0 <TCP_Recv+0x180>)
    608c:	681a      	ldr	r2, [r3, #0]
    608e:	2106      	movs	r1, #6
    6090:	233c      	movs	r3, #60	; 0x3c
    6092:	54d1      	strb	r1, [r2, r3]
    6094:	e7c2      	b.n	601c <TCP_Recv+0xac>
					} else if (tcpHeader.rst) {
    6096:	075a      	lsls	r2, r3, #29
    6098:	d513      	bpl.n	60c2 <TCP_Recv+0x152>
						if (tcpHeader.ack) {
    609a:	06db      	lsls	r3, r3, #27
    609c:	d508      	bpl.n	60b0 <TCP_Recv+0x140>
							TCP_SyslogWrite("found rst&ack");
    609e:	481e      	ldr	r0, [pc, #120]	; (6118 <TCP_Recv+0x1a8>)
    60a0:	4b18      	ldr	r3, [pc, #96]	; (6104 <TCP_Recv+0x194>)
    60a2:	4798      	blx	r3
							currentTCB->connectionEvent = RCV_RSTACK;
    60a4:	4b12      	ldr	r3, [pc, #72]	; (60f0 <TCP_Recv+0x180>)
    60a6:	681a      	ldr	r2, [r3, #0]
    60a8:	210a      	movs	r1, #10
    60aa:	233c      	movs	r3, #60	; 0x3c
    60ac:	54d1      	strb	r1, [r2, r3]
    60ae:	e7b5      	b.n	601c <TCP_Recv+0xac>
							TCP_SyslogWrite("found rst");
    60b0:	481a      	ldr	r0, [pc, #104]	; (611c <TCP_Recv+0x1ac>)
    60b2:	4b14      	ldr	r3, [pc, #80]	; (6104 <TCP_Recv+0x194>)
    60b4:	4798      	blx	r3
							currentTCB->connectionEvent = RCV_RST;
    60b6:	4b0e      	ldr	r3, [pc, #56]	; (60f0 <TCP_Recv+0x180>)
    60b8:	681a      	ldr	r2, [r3, #0]
    60ba:	2109      	movs	r1, #9
    60bc:	233c      	movs	r3, #60	; 0x3c
    60be:	54d1      	strb	r1, [r2, r3]
    60c0:	e7ac      	b.n	601c <TCP_Recv+0xac>
					} else if (tcpHeader.ack) {
    60c2:	06db      	lsls	r3, r3, #27
    60c4:	d508      	bpl.n	60d8 <TCP_Recv+0x168>
						TCP_SyslogWrite("found ack");
    60c6:	4816      	ldr	r0, [pc, #88]	; (6120 <TCP_Recv+0x1b0>)
    60c8:	4b0e      	ldr	r3, [pc, #56]	; (6104 <TCP_Recv+0x194>)
    60ca:	4798      	blx	r3
						currentTCB->connectionEvent = RCV_ACK;
    60cc:	4b08      	ldr	r3, [pc, #32]	; (60f0 <TCP_Recv+0x180>)
    60ce:	681a      	ldr	r2, [r3, #0]
    60d0:	2104      	movs	r1, #4
    60d2:	233c      	movs	r3, #60	; 0x3c
    60d4:	54d1      	strb	r1, [r2, r3]
    60d6:	e7a1      	b.n	601c <TCP_Recv+0xac>
						TCP_SyslogWrite("confused");
    60d8:	4812      	ldr	r0, [pc, #72]	; (6124 <TCP_Recv+0x1b4>)
    60da:	4b0a      	ldr	r3, [pc, #40]	; (6104 <TCP_Recv+0x194>)
    60dc:	4798      	blx	r3
    60de:	e79d      	b.n	601c <TCP_Recv+0xac>
					TCP_SyslogWrite("pkt dropped: bad options");
    60e0:	4811      	ldr	r0, [pc, #68]	; (6128 <TCP_Recv+0x1b8>)
    60e2:	4b08      	ldr	r3, [pc, #32]	; (6104 <TCP_Recv+0x194>)
    60e4:	4798      	blx	r3
}
    60e6:	e7b6      	b.n	6056 <TCP_Recv+0xe6>
    60e8:	200008bc 	.word	0x200008bc
    60ec:	00004285 	.word	0x00004285
    60f0:	200040a4 	.word	0x200040a4
    60f4:	200040a8 	.word	0x200040a8
    60f8:	200040ac 	.word	0x200040ac
    60fc:	00005655 	.word	0x00005655
    6100:	00009250 	.word	0x00009250
    6104:	00005403 	.word	0x00005403
    6108:	000057b1 	.word	0x000057b1
    610c:	00009260 	.word	0x00009260
    6110:	0000926c 	.word	0x0000926c
    6114:	0000927c 	.word	0x0000927c
    6118:	00009288 	.word	0x00009288
    611c:	00009298 	.word	0x00009298
    6120:	000092a4 	.word	0x000092a4
    6124:	000092b0 	.word	0x000092b0
    6128:	000092bc 	.word	0x000092bc

0000612c <TCP_Init>:

void TCP_Init(void)
{
	tcbList            = NULL;
    612c:	2300      	movs	r3, #0
    612e:	4a05      	ldr	r2, [pc, #20]	; (6144 <TCP_Init+0x18>)
    6130:	6013      	str	r3, [r2, #0]
	tcbListSize        = 0;
    6132:	4a05      	ldr	r2, [pc, #20]	; (6148 <TCP_Init+0x1c>)
    6134:	7013      	strb	r3, [r2, #0]
	nextAvailablePort  = LOCAL_TCP_PORT_START_NUMBER;
    6136:	4a05      	ldr	r2, [pc, #20]	; (614c <TCP_Init+0x20>)
    6138:	2180      	movs	r1, #128	; 0x80
    613a:	00c9      	lsls	r1, r1, #3
    613c:	83d1      	strh	r1, [r2, #30]
	nextSequenceNumber = 0;
    613e:	6213      	str	r3, [r2, #32]
}
    6140:	4770      	bx	lr
    6142:	46c0      	nop			; (mov r8, r8)
    6144:	200040a8 	.word	0x200040a8
    6148:	200040ac 	.word	0x200040ac
    614c:	200008bc 	.word	0x200008bc

00006150 <TCP_SocketInit>:

tcbError_t TCP_SocketInit(tcpTCB_t *tcbPtr)
{
    6150:	b510      	push	{r4, lr}
    6152:	0004      	movs	r4, r0
	tcbError_t ret = TCB_ERROR;

	// verify that this socket is not in the list
	if (TCB_Check(tcbPtr) == false) {
    6154:	4b10      	ldr	r3, [pc, #64]	; (6198 <TCP_SocketInit+0x48>)
    6156:	4798      	blx	r3
    6158:	2800      	cmp	r0, #0
    615a:	d11a      	bne.n	6192 <TCP_SocketInit+0x42>
		TCB_Reset(tcbPtr);
    615c:	0020      	movs	r0, r4
    615e:	4b0f      	ldr	r3, [pc, #60]	; (619c <TCP_SocketInit+0x4c>)
    6160:	4798      	blx	r3

		tcbPtr->localWnd        = 0; // here we should put the RX buffer size
    6162:	2300      	movs	r3, #0
    6164:	2200      	movs	r2, #0
    6166:	83e3      	strh	r3, [r4, #30]
		tcbPtr->mss             = TCP_MAX_SEG_SIZE;
    6168:	490d      	ldr	r1, [pc, #52]	; (61a0 <TCP_SocketInit+0x50>)
    616a:	8421      	strh	r1, [r4, #32]
		tcbPtr->fsmState        = CLOSED;
    616c:	213b      	movs	r1, #59	; 0x3b
    616e:	5462      	strb	r2, [r4, r1]
		tcbPtr->connectionEvent = DUMMY_NOP;
    6170:	200d      	movs	r0, #13
    6172:	3101      	adds	r1, #1
    6174:	5460      	strb	r0, [r4, r1]
		tcbPtr->rxBufferStart   = NULL;
    6176:	6263      	str	r3, [r4, #36]	; 0x24
		tcbPtr->rxBufState      = NO_BUFF;
    6178:	3910      	subs	r1, #16
    617a:	2000      	movs	r0, #0
    617c:	5460      	strb	r0, [r4, r1]
		tcbPtr->txBufferStart   = NULL;
    617e:	6323      	str	r3, [r4, #48]	; 0x30
		tcbPtr->txBufferPtr     = NULL;
    6180:	6363      	str	r3, [r4, #52]	; 0x34
		tcbPtr->bytesToSend     = 0;
    6182:	8723      	strh	r3, [r4, #56]	; 0x38
		tcbPtr->txBufState      = NO_BUFF;
    6184:	333a      	adds	r3, #58	; 0x3a
    6186:	54e2      	strb	r2, [r4, r3]

		TCB_Insert(tcbPtr);
    6188:	0020      	movs	r0, r4
    618a:	4b06      	ldr	r3, [pc, #24]	; (61a4 <TCP_SocketInit+0x54>)
    618c:	4798      	blx	r3
		ret = TCB_NO_ERROR;
    618e:	2000      	movs	r0, #0
	}
	return ret;
}
    6190:	bd10      	pop	{r4, pc}
	tcbError_t ret = TCB_ERROR;
    6192:	2001      	movs	r0, #1
    6194:	4240      	negs	r0, r0
    6196:	e7fb      	b.n	6190 <TCP_SocketInit+0x40>
    6198:	0000549d 	.word	0x0000549d
    619c:	00005471 	.word	0x00005471
    61a0:	000005b4 	.word	0x000005b4
    61a4:	00005405 	.word	0x00005405

000061a8 <TCP_SocketPoll>:
	}
	return ret;
}

socketState_t TCP_SocketPoll(tcpTCB_t *socket_ptr)
{
    61a8:	b510      	push	{r4, lr}
    61aa:	0004      	movs	r4, r0
	socketState_t tmpSocketState;

	tmpSocketState = NOT_A_SOCKET;

	if (TCB_Check(socket_ptr)) {
    61ac:	4b04      	ldr	r3, [pc, #16]	; (61c0 <TCP_SocketPoll+0x18>)
    61ae:	4798      	blx	r3
    61b0:	2800      	cmp	r0, #0
    61b2:	d002      	beq.n	61ba <TCP_SocketPoll+0x12>
		tmpSocketState = socket_ptr->socketState;
    61b4:	234e      	movs	r3, #78	; 0x4e
    61b6:	5ce0      	ldrb	r0, [r4, r3]
	}

	return tmpSocketState;
}
    61b8:	bd10      	pop	{r4, pc}
	tmpSocketState = NOT_A_SOCKET;
    61ba:	2000      	movs	r0, #0
    61bc:	e7fc      	b.n	61b8 <TCP_SocketPoll+0x10>
    61be:	46c0      	nop			; (mov r8, r8)
    61c0:	0000549d 	.word	0x0000549d

000061c4 <TCP_SocketRemove>:
{
    61c4:	b510      	push	{r4, lr}
    61c6:	0004      	movs	r4, r0
	if (TCP_SocketPoll(tcbPtr) == SOCKET_CLOSED) {
    61c8:	4b05      	ldr	r3, [pc, #20]	; (61e0 <TCP_SocketRemove+0x1c>)
    61ca:	4798      	blx	r3
    61cc:	2801      	cmp	r0, #1
    61ce:	d104      	bne.n	61da <TCP_SocketRemove+0x16>
		TCB_Remove(tcbPtr);
    61d0:	0020      	movs	r0, r4
    61d2:	4b04      	ldr	r3, [pc, #16]	; (61e4 <TCP_SocketRemove+0x20>)
    61d4:	4798      	blx	r3
		ret = TCB_NO_ERROR;
    61d6:	2000      	movs	r0, #0
}
    61d8:	bd10      	pop	{r4, pc}
	tcbError_t ret = TCB_ERROR;
    61da:	2001      	movs	r0, #1
    61dc:	4240      	negs	r0, r0
    61de:	e7fb      	b.n	61d8 <TCP_SocketRemove+0x14>
    61e0:	000061a9 	.word	0x000061a9
    61e4:	0000542d 	.word	0x0000542d

000061e8 <TCP_Connect>:
	}
	return ret;
}

bool TCP_Connect(tcpTCB_t *tcbPtr, sockaddr_in_t *srvaddr)
{
    61e8:	b570      	push	{r4, r5, r6, lr}
    61ea:	0004      	movs	r4, r0
    61ec:	000d      	movs	r5, r1
	bool ret = false;

	if (TCP_SocketPoll(tcbPtr) == SOCKET_CLOSED) {
    61ee:	4b10      	ldr	r3, [pc, #64]	; (6230 <TCP_Connect+0x48>)
    61f0:	4798      	blx	r3
    61f2:	2801      	cmp	r0, #1
    61f4:	d001      	beq.n	61fa <TCP_Connect+0x12>
	bool ret = false;
    61f6:	2000      	movs	r0, #0
		currentTCB = tcbPtr;
		ret        = TCP_FiniteStateMachine();
	}

	return ret;
}
    61f8:	bd70      	pop	{r4, r5, r6, pc}
		tcbPtr->destIP   = srvaddr->addr.s_addr;
    61fa:	686b      	ldr	r3, [r5, #4]
    61fc:	6063      	str	r3, [r4, #4]
		tcbPtr->destPort = srvaddr->port;
    61fe:	882b      	ldrh	r3, [r5, #0]
    6200:	8123      	strh	r3, [r4, #8]
		if (tcbPtr->localPort == 0) {
    6202:	8823      	ldrh	r3, [r4, #0]
    6204:	2b00      	cmp	r3, #0
    6206:	d104      	bne.n	6212 <TCP_Connect+0x2a>
			tcbPtr->localPort = nextAvailablePort++;
    6208:	4a0a      	ldr	r2, [pc, #40]	; (6234 <TCP_Connect+0x4c>)
    620a:	8bd3      	ldrh	r3, [r2, #30]
    620c:	1c59      	adds	r1, r3, #1
    620e:	83d1      	strh	r1, [r2, #30]
    6210:	8023      	strh	r3, [r4, #0]
		tcbPtr->socketState     = SOCKET_IN_PROGRESS;
    6212:	2202      	movs	r2, #2
    6214:	234e      	movs	r3, #78	; 0x4e
    6216:	54e2      	strb	r2, [r4, r3]
		tcbPtr->localSeqno      = nextSequenceNumber;
    6218:	4b06      	ldr	r3, [pc, #24]	; (6234 <TCP_Connect+0x4c>)
    621a:	6a1b      	ldr	r3, [r3, #32]
    621c:	6163      	str	r3, [r4, #20]
		tcbPtr->connectionEvent = ACTIVE_OPEN;
    621e:	3a01      	subs	r2, #1
    6220:	233c      	movs	r3, #60	; 0x3c
    6222:	54e2      	strb	r2, [r4, r3]
		currentTCB = tcbPtr;
    6224:	4b04      	ldr	r3, [pc, #16]	; (6238 <TCP_Connect+0x50>)
    6226:	601c      	str	r4, [r3, #0]
		ret        = TCP_FiniteStateMachine();
    6228:	4b04      	ldr	r3, [pc, #16]	; (623c <TCP_Connect+0x54>)
    622a:	4798      	blx	r3
    622c:	e7e4      	b.n	61f8 <TCP_Connect+0x10>
    622e:	46c0      	nop			; (mov r8, r8)
    6230:	000061a9 	.word	0x000061a9
    6234:	200008bc 	.word	0x200008bc
    6238:	200040a4 	.word	0x200040a4
    623c:	000057b1 	.word	0x000057b1

00006240 <TCP_Close>:

bool TCP_Close(tcpTCB_t *tcbPtr)
{
    6240:	b510      	push	{r4, lr}
    6242:	0004      	movs	r4, r0
	bool ret = false;

	TCP_SyslogWrite("tcp_close");
    6244:	4809      	ldr	r0, [pc, #36]	; (626c <TCP_Close+0x2c>)
    6246:	4b0a      	ldr	r3, [pc, #40]	; (6270 <TCP_Close+0x30>)
    6248:	4798      	blx	r3

	if (TCB_Check(tcbPtr)) {
    624a:	0020      	movs	r0, r4
    624c:	4b09      	ldr	r3, [pc, #36]	; (6274 <TCP_Close+0x34>)
    624e:	4798      	blx	r3
    6250:	2800      	cmp	r0, #0
    6252:	d100      	bne.n	6256 <TCP_Close+0x16>
		// likely to change this to a needs TX time queue
		currentTCB = tcbPtr;
		ret        = TCP_FiniteStateMachine();
	}
	return ret;
}
    6254:	bd10      	pop	{r4, pc}
		tcbPtr->connectionEvent = CLOSE;
    6256:	2200      	movs	r2, #0
    6258:	233c      	movs	r3, #60	; 0x3c
    625a:	54e2      	strb	r2, [r4, r3]
		tcbPtr->socketState = SOCKET_CLOSING;
    625c:	3204      	adds	r2, #4
    625e:	3312      	adds	r3, #18
    6260:	54e2      	strb	r2, [r4, r3]
		currentTCB = tcbPtr;
    6262:	4b05      	ldr	r3, [pc, #20]	; (6278 <TCP_Close+0x38>)
    6264:	601c      	str	r4, [r3, #0]
		ret        = TCP_FiniteStateMachine();
    6266:	4b05      	ldr	r3, [pc, #20]	; (627c <TCP_Close+0x3c>)
    6268:	4798      	blx	r3
    626a:	e7f3      	b.n	6254 <TCP_Close+0x14>
    626c:	000092f0 	.word	0x000092f0
    6270:	00005403 	.word	0x00005403
    6274:	0000549d 	.word	0x0000549d
    6278:	200040a4 	.word	0x200040a4
    627c:	000057b1 	.word	0x000057b1

00006280 <TCP_Send>:

bool TCP_Send(tcpTCB_t *tcbPtr, uint8_t *data, uint16_t dataLen)
{
    6280:	b570      	push	{r4, r5, r6, lr}
    6282:	0004      	movs	r4, r0
    6284:	000d      	movs	r5, r1
    6286:	0016      	movs	r6, r2
	bool ret = false;

	if (TCP_SocketPoll(tcbPtr) == SOCKET_CONNECTED) {
    6288:	4b11      	ldr	r3, [pc, #68]	; (62d0 <TCP_Send+0x50>)
    628a:	4798      	blx	r3
    628c:	2803      	cmp	r0, #3
    628e:	d001      	beq.n	6294 <TCP_Send+0x14>
	bool ret = false;
    6290:	2000      	movs	r0, #0
				ret = true;
			}
		}
	}
	return ret;
}
    6292:	bd70      	pop	{r4, r5, r6, pc}
		if (tcbPtr->txBufState == NO_BUFF) {
    6294:	233a      	movs	r3, #58	; 0x3a
    6296:	5ce3      	ldrb	r3, [r4, r3]
    6298:	2b00      	cmp	r3, #0
    629a:	d114      	bne.n	62c6 <TCP_Send+0x46>
			if (data != NULL) {
    629c:	2d00      	cmp	r5, #0
    629e:	d014      	beq.n	62ca <TCP_Send+0x4a>
				tcbPtr->txBufferStart = data;
    62a0:	6325      	str	r5, [r4, #48]	; 0x30
				tcbPtr->txBufferPtr   = tcbPtr->txBufferStart;
    62a2:	6365      	str	r5, [r4, #52]	; 0x34
				tcbPtr->bytesToSend   = dataLen;
    62a4:	8726      	strh	r6, [r4, #56]	; 0x38
				tcbPtr->txBufState    = TX_BUFF_IN_USE;
    62a6:	3302      	adds	r3, #2
    62a8:	223a      	movs	r2, #58	; 0x3a
    62aa:	54a3      	strb	r3, [r4, r2]
				tcbPtr->timeoutReloadValue = TCP_START_TIMEOUT_VAL;
    62ac:	3210      	adds	r2, #16
    62ae:	52a3      	strh	r3, [r4, r2]
				tcbPtr->timeoutsCount      = TCP_MAX_RETRIES;
    62b0:	3a45      	subs	r2, #69	; 0x45
    62b2:	334a      	adds	r3, #74	; 0x4a
    62b4:	54e2      	strb	r2, [r4, r3]
				tcbPtr->flags = TCP_ACK_FLAG;
    62b6:	320b      	adds	r2, #11
    62b8:	3301      	adds	r3, #1
    62ba:	54e2      	strb	r2, [r4, r3]
				TCP_Snd(tcbPtr);
    62bc:	0020      	movs	r0, r4
    62be:	4b05      	ldr	r3, [pc, #20]	; (62d4 <TCP_Send+0x54>)
    62c0:	4798      	blx	r3
				ret = true;
    62c2:	2001      	movs	r0, #1
    62c4:	e7e5      	b.n	6292 <TCP_Send+0x12>
	bool ret = false;
    62c6:	2000      	movs	r0, #0
    62c8:	e7e3      	b.n	6292 <TCP_Send+0x12>
    62ca:	2000      	movs	r0, #0
    62cc:	e7e1      	b.n	6292 <TCP_Send+0x12>
    62ce:	46c0      	nop			; (mov r8, r8)
    62d0:	000061a9 	.word	0x000061a9
    62d4:	000054dd 	.word	0x000054dd

000062d8 <TCP_SendDone>:

bool TCP_SendDone(tcpTCB_t *tcbPtr)
{
    62d8:	b510      	push	{r4, lr}
    62da:	0004      	movs	r4, r0
	bool ret = false;

	if (TCB_Check(tcbPtr)) {
    62dc:	4b05      	ldr	r3, [pc, #20]	; (62f4 <TCP_SendDone+0x1c>)
    62de:	4798      	blx	r3
    62e0:	2800      	cmp	r0, #0
    62e2:	d003      	beq.n	62ec <TCP_SendDone+0x14>
		if (tcbPtr->txBufState == NO_BUFF) {
    62e4:	233a      	movs	r3, #58	; 0x3a
    62e6:	5ce3      	ldrb	r3, [r4, r3]
    62e8:	2b00      	cmp	r3, #0
    62ea:	d100      	bne.n	62ee <TCP_SendDone+0x16>
			ret = true;
		}
	}
	return ret;
}
    62ec:	bd10      	pop	{r4, pc}
	bool ret = false;
    62ee:	2000      	movs	r0, #0
    62f0:	e7fc      	b.n	62ec <TCP_SendDone+0x14>
    62f2:	46c0      	nop			; (mov r8, r8)
    62f4:	0000549d 	.word	0x0000549d

000062f8 <TCP_InsertRxBuffer>:

bool TCP_InsertRxBuffer(tcpTCB_t *tcbPtr, uint8_t *data, uint16_t data_len)
{
    62f8:	b570      	push	{r4, r5, r6, lr}
    62fa:	0004      	movs	r4, r0
    62fc:	000e      	movs	r6, r1
    62fe:	0015      	movs	r5, r2
	bool ret = false;

	if (TCB_Check(tcbPtr)) {
    6300:	4b0a      	ldr	r3, [pc, #40]	; (632c <TCP_InsertRxBuffer+0x34>)
    6302:	4798      	blx	r3
    6304:	2800      	cmp	r0, #0
    6306:	d00b      	beq.n	6320 <TCP_InsertRxBuffer+0x28>
		if (tcbPtr->rxBufState == NO_BUFF) {
    6308:	232c      	movs	r3, #44	; 0x2c
    630a:	5ce3      	ldrb	r3, [r4, r3]
    630c:	2b00      	cmp	r3, #0
    630e:	d108      	bne.n	6322 <TCP_InsertRxBuffer+0x2a>
			if (data != NULL) {
    6310:	2e00      	cmp	r6, #0
    6312:	d008      	beq.n	6326 <TCP_InsertRxBuffer+0x2e>
				tcbPtr->rxBufferStart = data;
    6314:	6266      	str	r6, [r4, #36]	; 0x24
				tcbPtr->rxBufferPtr   = tcbPtr->rxBufferStart;
    6316:	62a6      	str	r6, [r4, #40]	; 0x28
				tcbPtr->localWnd      = data_len; // update the available receive windows
    6318:	83e5      	strh	r5, [r4, #30]
				tcbPtr->rxBufState    = RX_BUFF_IN_USE;
    631a:	2201      	movs	r2, #1
    631c:	332c      	adds	r3, #44	; 0x2c
    631e:	54e2      	strb	r2, [r4, r3]
				ret                   = true;
			}
		}
	}
	return ret;
}
    6320:	bd70      	pop	{r4, r5, r6, pc}
	bool ret = false;
    6322:	2000      	movs	r0, #0
    6324:	e7fc      	b.n	6320 <TCP_InsertRxBuffer+0x28>
    6326:	2000      	movs	r0, #0
    6328:	e7fa      	b.n	6320 <TCP_InsertRxBuffer+0x28>
    632a:	46c0      	nop			; (mov r8, r8)
    632c:	0000549d 	.word	0x0000549d

00006330 <TCP_GetReceivedData>:

int16_t TCP_GetReceivedData(tcpTCB_t *tcbPtr)
{
    6330:	b510      	push	{r4, lr}
    6332:	0004      	movs	r4, r0
	int16_t ret = 0;

	if (TCB_Check(tcbPtr)) {
    6334:	4b0b      	ldr	r3, [pc, #44]	; (6364 <TCP_GetReceivedData+0x34>)
    6336:	4798      	blx	r3
    6338:	2800      	cmp	r0, #0
    633a:	d011      	beq.n	6360 <TCP_GetReceivedData+0x30>
		if (tcbPtr->rxBufState == RX_BUFF_IN_USE) {
    633c:	232c      	movs	r3, #44	; 0x2c
    633e:	5ce3      	ldrb	r3, [r4, r3]
    6340:	2b01      	cmp	r3, #1
    6342:	d001      	beq.n	6348 <TCP_GetReceivedData+0x18>
	int16_t ret = 0;
    6344:	2000      	movs	r0, #0
    6346:	e00c      	b.n	6362 <TCP_GetReceivedData+0x32>
			ret = tcbPtr->rxBufferPtr - tcbPtr->rxBufferStart;
    6348:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    634a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    634c:	1a98      	subs	r0, r3, r2
    634e:	b200      	sxth	r0, r0

			if (ret != 0) {
    6350:	2800      	cmp	r0, #0
    6352:	d006      	beq.n	6362 <TCP_GetReceivedData+0x32>
				tcbPtr->localWnd   = 0;
    6354:	2300      	movs	r3, #0
    6356:	83e3      	strh	r3, [r4, #30]
				tcbPtr->rxBufState = NO_BUFF;
    6358:	332c      	adds	r3, #44	; 0x2c
    635a:	2200      	movs	r2, #0
    635c:	54e2      	strb	r2, [r4, r3]
    635e:	e000      	b.n	6362 <TCP_GetReceivedData+0x32>
	int16_t ret = 0;
    6360:	2000      	movs	r0, #0
			}
		}
	}
	return ret;
}
    6362:	bd10      	pop	{r4, pc}
    6364:	0000549d 	.word	0x0000549d

00006368 <TCP_GetRxLength>:

int16_t TCP_GetRxLength(tcpTCB_t *tcbPtr)
{
    6368:	b510      	push	{r4, lr}
    636a:	0004      	movs	r4, r0
	int16_t ret = 0;

	if (TCB_Check(tcbPtr)) {
    636c:	4b08      	ldr	r3, [pc, #32]	; (6390 <TCP_GetRxLength+0x28>)
    636e:	4798      	blx	r3
    6370:	2800      	cmp	r0, #0
    6372:	d00a      	beq.n	638a <TCP_GetRxLength+0x22>
		if (tcbPtr->rxBufState == RX_BUFF_IN_USE) {
    6374:	232c      	movs	r3, #44	; 0x2c
    6376:	5ce3      	ldrb	r3, [r4, r3]
    6378:	2b01      	cmp	r3, #1
    637a:	d001      	beq.n	6380 <TCP_GetRxLength+0x18>
	int16_t ret = 0;
    637c:	2000      	movs	r0, #0
    637e:	e005      	b.n	638c <TCP_GetRxLength+0x24>
			ret = tcbPtr->rxBufferPtr - tcbPtr->rxBufferStart;
    6380:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6382:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6384:	1ac0      	subs	r0, r0, r3
    6386:	b200      	sxth	r0, r0
    6388:	e000      	b.n	638c <TCP_GetRxLength+0x24>
	int16_t ret = 0;
    638a:	2000      	movs	r0, #0
		}
	}
	return ret;
}
    638c:	bd10      	pop	{r4, pc}
    638e:	46c0      	nop			; (mov r8, r8)
    6390:	0000549d 	.word	0x0000549d

00006394 <TCP_Update>:

void TCP_Update(void)
{
    6394:	b570      	push	{r4, r5, r6, lr}
	tcbPtr    = NULL;
	int count = 0;

	// update sequence number and local port number in order to be different
	// for each new connection
	nextSequenceNumber++;
    6396:	4a20      	ldr	r2, [pc, #128]	; (6418 <TCP_Update+0x84>)
    6398:	6a13      	ldr	r3, [r2, #32]
    639a:	3301      	adds	r3, #1
    639c:	6213      	str	r3, [r2, #32]

	// keep local port number in the general port range
	nextAvailablePort = nextAvailablePort + 1;
    639e:	8bd3      	ldrh	r3, [r2, #30]
    63a0:	3301      	adds	r3, #1
    63a2:	b29b      	uxth	r3, r3
    63a4:	83d3      	strh	r3, [r2, #30]
	if (nextAvailablePort < LOCAL_TCP_PORT_START_NUMBER) {
    63a6:	4a1d      	ldr	r2, [pc, #116]	; (641c <TCP_Update+0x88>)
    63a8:	4293      	cmp	r3, r2
    63aa:	d802      	bhi.n	63b2 <TCP_Update+0x1e>
		nextAvailablePort = LOCAL_TCP_PORT_START_NUMBER;
    63ac:	3201      	adds	r2, #1
    63ae:	4b1a      	ldr	r3, [pc, #104]	; (6418 <TCP_Update+0x84>)
    63b0:	83da      	strh	r2, [r3, #30]
	}
	// TO DO also local seq number should be "random"

	tcbPtr = tcbList;
    63b2:	4b1b      	ldr	r3, [pc, #108]	; (6420 <TCP_Update+0x8c>)
    63b4:	681c      	ldr	r4, [r3, #0]
	int count = 0;
    63b6:	2500      	movs	r5, #0
	while ((tcbPtr != NULL) && (count < tcbListSize)) {
    63b8:	e001      	b.n	63be <TCP_Update+0x2a>
						TCP_FiniteStateMachine();
					}
				}
			}
		}
		tcbPtr = tcbPtr->nextTCB;
    63ba:	6c24      	ldr	r4, [r4, #64]	; 0x40
		count++;
    63bc:	3501      	adds	r5, #1
	while ((tcbPtr != NULL) && (count < tcbListSize)) {
    63be:	2c00      	cmp	r4, #0
    63c0:	d029      	beq.n	6416 <TCP_Update+0x82>
    63c2:	4b18      	ldr	r3, [pc, #96]	; (6424 <TCP_Update+0x90>)
    63c4:	781b      	ldrb	r3, [r3, #0]
    63c6:	b25b      	sxtb	r3, r3
    63c8:	429d      	cmp	r5, r3
    63ca:	da24      	bge.n	6416 <TCP_Update+0x82>
		if (tcbPtr->timeout > 0) {
    63cc:	2348      	movs	r3, #72	; 0x48
    63ce:	5ae3      	ldrh	r3, [r4, r3]
    63d0:	2b00      	cmp	r3, #0
    63d2:	d0f2      	beq.n	63ba <TCP_Update+0x26>
			TCP_SyslogWrite("tcp timeout");
    63d4:	4814      	ldr	r0, [pc, #80]	; (6428 <TCP_Update+0x94>)
    63d6:	4b15      	ldr	r3, [pc, #84]	; (642c <TCP_Update+0x98>)
    63d8:	4798      	blx	r3
			tcbPtr->timeout = tcbPtr->timeout - 1;
    63da:	2248      	movs	r2, #72	; 0x48
    63dc:	5aa3      	ldrh	r3, [r4, r2]
    63de:	3b01      	subs	r3, #1
    63e0:	b29b      	uxth	r3, r3
    63e2:	52a3      	strh	r3, [r4, r2]
			if (tcbPtr->timeout == 0) {
    63e4:	2b00      	cmp	r3, #0
    63e6:	d1e8      	bne.n	63ba <TCP_Update+0x26>
				if (tcbPtr->timeoutsCount > 0) {
    63e8:	334c      	adds	r3, #76	; 0x4c
    63ea:	5ce3      	ldrb	r3, [r4, r3]
    63ec:	2b00      	cmp	r3, #0
    63ee:	d0e4      	beq.n	63ba <TCP_Update+0x26>
					if (tcbPtr->connectionEvent == DUMMY_NOP) {
    63f0:	3a0c      	subs	r2, #12
    63f2:	5ca2      	ldrb	r2, [r4, r2]
    63f4:	2a0d      	cmp	r2, #13
    63f6:	d1e0      	bne.n	63ba <TCP_Update+0x26>
						tcbPtr->timeout         = tcbPtr->timeoutReloadValue;
    63f8:	323d      	adds	r2, #61	; 0x3d
    63fa:	5aa1      	ldrh	r1, [r4, r2]
    63fc:	3a02      	subs	r2, #2
    63fe:	52a1      	strh	r1, [r4, r2]
						tcbPtr->timeoutsCount   = tcbPtr->timeoutsCount - 1;
    6400:	3b01      	subs	r3, #1
    6402:	3204      	adds	r2, #4
    6404:	54a3      	strb	r3, [r4, r2]
						tcbPtr->connectionEvent = TIMEOUT;
    6406:	3a40      	subs	r2, #64	; 0x40
    6408:	233c      	movs	r3, #60	; 0x3c
    640a:	54e2      	strb	r2, [r4, r3]
						currentTCB              = tcbPtr;
    640c:	4b08      	ldr	r3, [pc, #32]	; (6430 <TCP_Update+0x9c>)
    640e:	601c      	str	r4, [r3, #0]
						TCP_FiniteStateMachine();
    6410:	4b08      	ldr	r3, [pc, #32]	; (6434 <TCP_Update+0xa0>)
    6412:	4798      	blx	r3
    6414:	e7d1      	b.n	63ba <TCP_Update+0x26>
	}
}
    6416:	bd70      	pop	{r4, r5, r6, pc}
    6418:	200008bc 	.word	0x200008bc
    641c:	000003ff 	.word	0x000003ff
    6420:	200040a8 	.word	0x200040a8
    6424:	200040ac 	.word	0x200040ac
    6428:	000092fc 	.word	0x000092fc
    642c:	00005403 	.word	0x00005403
    6430:	200040a4 	.word	0x200040a4
    6434:	000057b1 	.word	0x000057b1

00006438 <UDP_Start>:

/**
  Section: UDP Library APIs
*/
error_msg UDP_Start(uint32_t destIP, uint16_t srcPort, uint16_t dstPort)
{
    6438:	b570      	push	{r4, r5, r6, lr}
    643a:	000e      	movs	r6, r1
    643c:	0015      	movs	r5, r2
	// Start a UDP Packet to Write UDP Header
	error_msg ret = ERROR;

	// Start IPv4 Packet to Write IPv4 Header
	ret = IPv4_Start(destIP, UDP);
    643e:	2111      	movs	r1, #17
    6440:	4b09      	ldr	r3, [pc, #36]	; (6468 <UDP_Start+0x30>)
    6442:	4798      	blx	r3
    6444:	0004      	movs	r4, r0
	
	if (ret == SUCCESS) {
    6446:	2801      	cmp	r0, #1
    6448:	d001      	beq.n	644e <UDP_Start+0x16>

		// Write UDP Checksum; Initially set to '0'
		ETH_Write16(0);
	}
	return ret;
}
    644a:	0020      	movs	r0, r4
    644c:	bd70      	pop	{r4, r5, r6, pc}
		ETH_ResetByteCount();
    644e:	4b07      	ldr	r3, [pc, #28]	; (646c <UDP_Start+0x34>)
    6450:	4798      	blx	r3
		ETH_Write16(srcPort);
    6452:	0030      	movs	r0, r6
    6454:	4e06      	ldr	r6, [pc, #24]	; (6470 <UDP_Start+0x38>)
    6456:	47b0      	blx	r6
		ETH_Write16(dstPort);
    6458:	0028      	movs	r0, r5
    645a:	47b0      	blx	r6
		ETH_Write16(0);
    645c:	2000      	movs	r0, #0
    645e:	47b0      	blx	r6
		ETH_Write16(0);
    6460:	2000      	movs	r0, #0
    6462:	47b0      	blx	r6
    6464:	e7f1      	b.n	644a <UDP_Start+0x12>
    6466:	46c0      	nop			; (mov r8, r8)
    6468:	00005169 	.word	0x00005169
    646c:	00004819 	.word	0x00004819
    6470:	00004309 	.word	0x00004309

00006474 <UDP_Send>:

error_msg UDP_Send()
{
    6474:	b510      	push	{r4, lr}
    6476:	b082      	sub	sp, #8
	uint16_t  udpLength;
	uint16_t  cksm;
	error_msg ret = ERROR;

	udpLength = ETH_GetByteCount();
    6478:	4b17      	ldr	r3, [pc, #92]	; (64d8 <UDP_Send+0x64>)
    647a:	4798      	blx	r3
	udpLength = ntohs(udpLength);
    647c:	0a03      	lsrs	r3, r0, #8
    647e:	b21b      	sxth	r3, r3
    6480:	0200      	lsls	r0, r0, #8
    6482:	4318      	orrs	r0, r3
    6484:	466b      	mov	r3, sp
    6486:	1d9c      	adds	r4, r3, #6
    6488:	80d8      	strh	r0, [r3, #6]
	ETH_Insert((char *)&udpLength, 2, sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) + offsetof(udpHeader_t, length));
    648a:	2226      	movs	r2, #38	; 0x26
    648c:	2102      	movs	r1, #2
    648e:	0020      	movs	r0, r4
    6490:	4b12      	ldr	r3, [pc, #72]	; (64dc <UDP_Send+0x68>)
    6492:	4798      	blx	r3
	udpLength = htons(udpLength);
    6494:	8823      	ldrh	r3, [r4, #0]
    6496:	0a19      	lsrs	r1, r3, #8
    6498:	021b      	lsls	r3, r3, #8
    649a:	4319      	orrs	r1, r3
    649c:	b289      	uxth	r1, r1
    649e:	8021      	strh	r1, [r4, #0]

	// add the UDP header checksum
	cksm = udpLength + UDP;
    64a0:	000a      	movs	r2, r1
    64a2:	3211      	adds	r2, #17
    64a4:	b292      	uxth	r2, r2
    64a6:	ac01      	add	r4, sp, #4
    64a8:	8022      	strh	r2, [r4, #0]
	cksm = ETH_TxComputeChecksum(sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) - 8, udpLength + 8, cksm);
    64aa:	3108      	adds	r1, #8
    64ac:	b289      	uxth	r1, r1
    64ae:	201a      	movs	r0, #26
    64b0:	4b0b      	ldr	r3, [pc, #44]	; (64e0 <UDP_Send+0x6c>)
    64b2:	4798      	blx	r3
    64b4:	8020      	strh	r0, [r4, #0]

	// if the computed checksum is "0" set it to 0xFFFF
	if (cksm == 0) {
    64b6:	2800      	cmp	r0, #0
    64b8:	d103      	bne.n	64c2 <UDP_Send+0x4e>
		cksm = 0xffff;
    64ba:	2201      	movs	r2, #1
    64bc:	4252      	negs	r2, r2
    64be:	ab01      	add	r3, sp, #4
    64c0:	801a      	strh	r2, [r3, #0]
	}

	ETH_Insert((char *)&cksm, 2, sizeof(ethernetFrame_t) + sizeof(ipv4Header_t) + offsetof(udpHeader_t, checksum));
    64c2:	2228      	movs	r2, #40	; 0x28
    64c4:	2102      	movs	r1, #2
    64c6:	a801      	add	r0, sp, #4
    64c8:	4b04      	ldr	r3, [pc, #16]	; (64dc <UDP_Send+0x68>)
    64ca:	4798      	blx	r3

	ret = IPV4_Send(udpLength);
    64cc:	466b      	mov	r3, sp
    64ce:	88d8      	ldrh	r0, [r3, #6]
    64d0:	4b04      	ldr	r3, [pc, #16]	; (64e4 <UDP_Send+0x70>)
    64d2:	4798      	blx	r3

	return ret;
}
    64d4:	b002      	add	sp, #8
    64d6:	bd10      	pop	{r4, pc}
    64d8:	00004831 	.word	0x00004831
    64dc:	000045ad 	.word	0x000045ad
    64e0:	00004709 	.word	0x00004709
    64e4:	00005249 	.word	0x00005249

000064e8 <UDP_Receive>:

error_msg UDP_Receive(uint16_t udpcksm) // catch all UDP packets and dispatch them to the appropriate callback
{
    64e8:	b570      	push	{r4, r5, r6, lr}
    64ea:	0005      	movs	r5, r0
	error_msg            ret = ERROR;
	const udp_handler_t *hptr;
	uint16_t             x;

	hptr = UDP_CallBackTable;
	ETH_ReadBlock((char *)&udpHeader, sizeof(udpHeader));
    64ec:	4c17      	ldr	r4, [pc, #92]	; (654c <UDP_Receive+0x64>)
    64ee:	2108      	movs	r1, #8
    64f0:	0020      	movs	r0, r4
    64f2:	4b17      	ldr	r3, [pc, #92]	; (6550 <UDP_Receive+0x68>)
    64f4:	4798      	blx	r3

	if ((udpHeader.checksum == 0) || (udpcksm == 0)) {
    64f6:	88e3      	ldrh	r3, [r4, #6]
    64f8:	2b00      	cmp	r3, #0
    64fa:	d003      	beq.n	6504 <UDP_Receive+0x1c>
    64fc:	2d00      	cmp	r5, #0
    64fe:	d001      	beq.n	6504 <UDP_Receive+0x1c>
				break;
			}
			hptr++;
		}
	} else {
		ret = UDP_CHECKSUM_FAILS;
    6500:	200a      	movs	r0, #10
    6502:	e022      	b.n	654a <UDP_Receive+0x62>
		udpHeader.dstPort = ntohs(udpHeader.dstPort); // reverse the port number
    6504:	4b11      	ldr	r3, [pc, #68]	; (654c <UDP_Receive+0x64>)
    6506:	8859      	ldrh	r1, [r3, #2]
    6508:	0a0a      	lsrs	r2, r1, #8
    650a:	0209      	lsls	r1, r1, #8
    650c:	430a      	orrs	r2, r1
    650e:	b292      	uxth	r2, r2
    6510:	805a      	strh	r2, [r3, #2]
		destPort          = ntohs(udpHeader.srcPort);
    6512:	8819      	ldrh	r1, [r3, #0]
    6514:	0a08      	lsrs	r0, r1, #8
    6516:	0209      	lsls	r1, r1, #8
    6518:	4301      	orrs	r1, r0
    651a:	8119      	strh	r1, [r3, #8]
		for (x = 0; x < ARRAYSIZE(UDP_CallBackTable); x++) {
    651c:	2300      	movs	r3, #0
	hptr = UDP_CallBackTable;
    651e:	490d      	ldr	r1, [pc, #52]	; (6554 <UDP_Receive+0x6c>)
		for (x = 0; x < ARRAYSIZE(UDP_CallBackTable); x++) {
    6520:	2b01      	cmp	r3, #1
    6522:	d811      	bhi.n	6548 <UDP_Receive+0x60>
			if (hptr->portNumber == udpHeader.dstPort) {
    6524:	8808      	ldrh	r0, [r1, #0]
    6526:	4282      	cmp	r2, r0
    6528:	d003      	beq.n	6532 <UDP_Receive+0x4a>
			hptr++;
    652a:	3108      	adds	r1, #8
		for (x = 0; x < ARRAYSIZE(UDP_CallBackTable); x++) {
    652c:	3301      	adds	r3, #1
    652e:	b29b      	uxth	r3, r3
    6530:	e7f6      	b.n	6520 <UDP_Receive+0x38>
				hptr->callBack(ntohs(udpHeader.length) - sizeof(udpHeader));
    6532:	684a      	ldr	r2, [r1, #4]
    6534:	4b05      	ldr	r3, [pc, #20]	; (654c <UDP_Receive+0x64>)
    6536:	889b      	ldrh	r3, [r3, #4]
    6538:	0a18      	lsrs	r0, r3, #8
    653a:	061b      	lsls	r3, r3, #24
    653c:	0c1b      	lsrs	r3, r3, #16
    653e:	4318      	orrs	r0, r3
    6540:	3808      	subs	r0, #8
    6542:	4790      	blx	r2
				ret = SUCCESS;
    6544:	2001      	movs	r0, #1
				break;
    6546:	e000      	b.n	654a <UDP_Receive+0x62>
		ret               = PORT_NOT_AVAILABLE;
    6548:	200d      	movs	r0, #13
	}
	return ret;
}
    654a:	bd70      	pop	{r4, r5, r6, pc}
    654c:	200008e0 	.word	0x200008e0
    6550:	00004285 	.word	0x00004285
    6554:	00009308 	.word	0x00009308

00006558 <tcpip_lite_timer_task_cb>:
struct timer_task ms_tick_task;

static void tcpip_lite_timer_task_cb(const struct timer_task *const t)
{
	(void)t;
	ms_tick++;
    6558:	4a02      	ldr	r2, [pc, #8]	; (6564 <tcpip_lite_timer_task_cb+0xc>)
    655a:	6813      	ldr	r3, [r2, #0]
    655c:	3301      	adds	r3, #1
    655e:	6013      	str	r3, [r2, #0]
}
    6560:	4770      	bx	lr
    6562:	46c0      	nop			; (mov r8, r8)
    6564:	200008ec 	.word	0x200008ec

00006568 <_gettimeofday>:

int _gettimeofday(struct timeval *tv, void *tzvp)
{
    6568:	b570      	push	{r4, r5, r6, lr}
    656a:	1e04      	subs	r4, r0, #0
	if (!tv)
    656c:	d00d      	beq.n	658a <_gettimeofday+0x22>
		return -1;

	tv->tv_sec  = ms_tick / 1000;
    656e:	4b08      	ldr	r3, [pc, #32]	; (6590 <_gettimeofday+0x28>)
    6570:	681d      	ldr	r5, [r3, #0]
    6572:	21fa      	movs	r1, #250	; 0xfa
    6574:	0089      	lsls	r1, r1, #2
    6576:	0028      	movs	r0, r5
    6578:	4b06      	ldr	r3, [pc, #24]	; (6594 <_gettimeofday+0x2c>)
    657a:	4798      	blx	r3
    657c:	6020      	str	r0, [r4, #0]
	tv->tv_usec = ms_tick * 1000;
    657e:	20fa      	movs	r0, #250	; 0xfa
    6580:	0080      	lsls	r0, r0, #2
    6582:	4368      	muls	r0, r5
    6584:	6060      	str	r0, [r4, #4]

	return 0;
    6586:	2000      	movs	r0, #0
}
    6588:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    658a:	2001      	movs	r0, #1
    658c:	4240      	negs	r0, r0
    658e:	e7fb      	b.n	6588 <_gettimeofday+0x20>
    6590:	200008ec 	.word	0x200008ec
    6594:	0000662d 	.word	0x0000662d

00006598 <SPI_ExchangeByte>:

char SPI_ExchangeByte(uint8_t dir, char v)
{
    6598:	b500      	push	{lr}
    659a:	b085      	sub	sp, #20

	struct spi_xfer xfer;
	uint8_t         buf = v;
    659c:	466b      	mov	r3, sp
    659e:	70d9      	strb	r1, [r3, #3]

	if (dir == 0) {
    65a0:	2800      	cmp	r0, #0
    65a2:	d00e      	beq.n	65c2 <SPI_ExchangeByte+0x2a>
		xfer.rxbuf = &buf;
		xfer.txbuf = 0;
		xfer.size  = 1;
	} else {
		xfer.rxbuf = 0;
    65a4:	2300      	movs	r3, #0
    65a6:	9302      	str	r3, [sp, #8]
		xfer.txbuf = &buf;
    65a8:	466b      	mov	r3, sp
    65aa:	3303      	adds	r3, #3
    65ac:	9301      	str	r3, [sp, #4]
		xfer.size  = 1;
    65ae:	2301      	movs	r3, #1
    65b0:	9303      	str	r3, [sp, #12]
	}

	spi_m_sync_transfer(&ETHERNET_SPI, &xfer);
    65b2:	a901      	add	r1, sp, #4
    65b4:	4807      	ldr	r0, [pc, #28]	; (65d4 <SPI_ExchangeByte+0x3c>)
    65b6:	4b08      	ldr	r3, [pc, #32]	; (65d8 <SPI_ExchangeByte+0x40>)
    65b8:	4798      	blx	r3
	return (char)buf;
    65ba:	466b      	mov	r3, sp
    65bc:	78d8      	ldrb	r0, [r3, #3]
}
    65be:	b005      	add	sp, #20
    65c0:	bd00      	pop	{pc}
		xfer.rxbuf = &buf;
    65c2:	466b      	mov	r3, sp
    65c4:	3303      	adds	r3, #3
    65c6:	9302      	str	r3, [sp, #8]
		xfer.txbuf = 0;
    65c8:	2300      	movs	r3, #0
    65ca:	9301      	str	r3, [sp, #4]
		xfer.size  = 1;
    65cc:	3301      	adds	r3, #1
    65ce:	9303      	str	r3, [sp, #12]
    65d0:	e7ef      	b.n	65b2 <SPI_ExchangeByte+0x1a>
    65d2:	46c0      	nop			; (mov r8, r8)
    65d4:	20003f58 	.word	0x20003f58
    65d8:	00002a75 	.word	0x00002a75

000065dc <tcpip_lite_stack_init>:

void tcpip_lite_stack_init(void)
{
    65dc:	b510      	push	{r4, lr}

	spi_m_sync_enable(&ETHERNET_SPI);
    65de:	480a      	ldr	r0, [pc, #40]	; (6608 <tcpip_lite_stack_init+0x2c>)
    65e0:	4b0a      	ldr	r3, [pc, #40]	; (660c <tcpip_lite_stack_init+0x30>)
    65e2:	4798      	blx	r3

	Network_Init();
    65e4:	4b0a      	ldr	r3, [pc, #40]	; (6610 <tcpip_lite_stack_init+0x34>)
    65e6:	4798      	blx	r3
	SYSLOG_Init();
    65e8:	4b0a      	ldr	r3, [pc, #40]	; (6614 <tcpip_lite_stack_init+0x38>)
    65ea:	4798      	blx	r3

	/* Start Timer Task */

	ms_tick_task.interval = 1;
    65ec:	490a      	ldr	r1, [pc, #40]	; (6618 <tcpip_lite_stack_init+0x3c>)
    65ee:	2301      	movs	r3, #1
    65f0:	608b      	str	r3, [r1, #8]
	ms_tick_task.cb       = tcpip_lite_timer_task_cb;
    65f2:	4a0a      	ldr	r2, [pc, #40]	; (661c <tcpip_lite_stack_init+0x40>)
    65f4:	60ca      	str	r2, [r1, #12]
	ms_tick_task.mode     = TIMER_TASK_REPEAT;
    65f6:	740b      	strb	r3, [r1, #16]
	timer_add_task(&TICK_TIMER, &ms_tick_task);
    65f8:	4c09      	ldr	r4, [pc, #36]	; (6620 <tcpip_lite_stack_init+0x44>)
    65fa:	0020      	movs	r0, r4
    65fc:	4b09      	ldr	r3, [pc, #36]	; (6624 <tcpip_lite_stack_init+0x48>)
    65fe:	4798      	blx	r3
	timer_start(&TICK_TIMER);
    6600:	0020      	movs	r0, r4
    6602:	4b09      	ldr	r3, [pc, #36]	; (6628 <tcpip_lite_stack_init+0x4c>)
    6604:	4798      	blx	r3
}
    6606:	bd10      	pop	{r4, pc}
    6608:	20003f58 	.word	0x20003f58
    660c:	00002a25 	.word	0x00002a25
    6610:	0000529d 	.word	0x0000529d
    6614:	00005401 	.word	0x00005401
    6618:	200040b0 	.word	0x200040b0
    661c:	00006559 	.word	0x00006559
    6620:	20003fac 	.word	0x20003fac
    6624:	00002ccd 	.word	0x00002ccd
    6628:	00002c65 	.word	0x00002c65

0000662c <__udivsi3>:
    662c:	2200      	movs	r2, #0
    662e:	0843      	lsrs	r3, r0, #1
    6630:	428b      	cmp	r3, r1
    6632:	d374      	bcc.n	671e <__udivsi3+0xf2>
    6634:	0903      	lsrs	r3, r0, #4
    6636:	428b      	cmp	r3, r1
    6638:	d35f      	bcc.n	66fa <__udivsi3+0xce>
    663a:	0a03      	lsrs	r3, r0, #8
    663c:	428b      	cmp	r3, r1
    663e:	d344      	bcc.n	66ca <__udivsi3+0x9e>
    6640:	0b03      	lsrs	r3, r0, #12
    6642:	428b      	cmp	r3, r1
    6644:	d328      	bcc.n	6698 <__udivsi3+0x6c>
    6646:	0c03      	lsrs	r3, r0, #16
    6648:	428b      	cmp	r3, r1
    664a:	d30d      	bcc.n	6668 <__udivsi3+0x3c>
    664c:	22ff      	movs	r2, #255	; 0xff
    664e:	0209      	lsls	r1, r1, #8
    6650:	ba12      	rev	r2, r2
    6652:	0c03      	lsrs	r3, r0, #16
    6654:	428b      	cmp	r3, r1
    6656:	d302      	bcc.n	665e <__udivsi3+0x32>
    6658:	1212      	asrs	r2, r2, #8
    665a:	0209      	lsls	r1, r1, #8
    665c:	d065      	beq.n	672a <__udivsi3+0xfe>
    665e:	0b03      	lsrs	r3, r0, #12
    6660:	428b      	cmp	r3, r1
    6662:	d319      	bcc.n	6698 <__udivsi3+0x6c>
    6664:	e000      	b.n	6668 <__udivsi3+0x3c>
    6666:	0a09      	lsrs	r1, r1, #8
    6668:	0bc3      	lsrs	r3, r0, #15
    666a:	428b      	cmp	r3, r1
    666c:	d301      	bcc.n	6672 <__udivsi3+0x46>
    666e:	03cb      	lsls	r3, r1, #15
    6670:	1ac0      	subs	r0, r0, r3
    6672:	4152      	adcs	r2, r2
    6674:	0b83      	lsrs	r3, r0, #14
    6676:	428b      	cmp	r3, r1
    6678:	d301      	bcc.n	667e <__udivsi3+0x52>
    667a:	038b      	lsls	r3, r1, #14
    667c:	1ac0      	subs	r0, r0, r3
    667e:	4152      	adcs	r2, r2
    6680:	0b43      	lsrs	r3, r0, #13
    6682:	428b      	cmp	r3, r1
    6684:	d301      	bcc.n	668a <__udivsi3+0x5e>
    6686:	034b      	lsls	r3, r1, #13
    6688:	1ac0      	subs	r0, r0, r3
    668a:	4152      	adcs	r2, r2
    668c:	0b03      	lsrs	r3, r0, #12
    668e:	428b      	cmp	r3, r1
    6690:	d301      	bcc.n	6696 <__udivsi3+0x6a>
    6692:	030b      	lsls	r3, r1, #12
    6694:	1ac0      	subs	r0, r0, r3
    6696:	4152      	adcs	r2, r2
    6698:	0ac3      	lsrs	r3, r0, #11
    669a:	428b      	cmp	r3, r1
    669c:	d301      	bcc.n	66a2 <__udivsi3+0x76>
    669e:	02cb      	lsls	r3, r1, #11
    66a0:	1ac0      	subs	r0, r0, r3
    66a2:	4152      	adcs	r2, r2
    66a4:	0a83      	lsrs	r3, r0, #10
    66a6:	428b      	cmp	r3, r1
    66a8:	d301      	bcc.n	66ae <__udivsi3+0x82>
    66aa:	028b      	lsls	r3, r1, #10
    66ac:	1ac0      	subs	r0, r0, r3
    66ae:	4152      	adcs	r2, r2
    66b0:	0a43      	lsrs	r3, r0, #9
    66b2:	428b      	cmp	r3, r1
    66b4:	d301      	bcc.n	66ba <__udivsi3+0x8e>
    66b6:	024b      	lsls	r3, r1, #9
    66b8:	1ac0      	subs	r0, r0, r3
    66ba:	4152      	adcs	r2, r2
    66bc:	0a03      	lsrs	r3, r0, #8
    66be:	428b      	cmp	r3, r1
    66c0:	d301      	bcc.n	66c6 <__udivsi3+0x9a>
    66c2:	020b      	lsls	r3, r1, #8
    66c4:	1ac0      	subs	r0, r0, r3
    66c6:	4152      	adcs	r2, r2
    66c8:	d2cd      	bcs.n	6666 <__udivsi3+0x3a>
    66ca:	09c3      	lsrs	r3, r0, #7
    66cc:	428b      	cmp	r3, r1
    66ce:	d301      	bcc.n	66d4 <__udivsi3+0xa8>
    66d0:	01cb      	lsls	r3, r1, #7
    66d2:	1ac0      	subs	r0, r0, r3
    66d4:	4152      	adcs	r2, r2
    66d6:	0983      	lsrs	r3, r0, #6
    66d8:	428b      	cmp	r3, r1
    66da:	d301      	bcc.n	66e0 <__udivsi3+0xb4>
    66dc:	018b      	lsls	r3, r1, #6
    66de:	1ac0      	subs	r0, r0, r3
    66e0:	4152      	adcs	r2, r2
    66e2:	0943      	lsrs	r3, r0, #5
    66e4:	428b      	cmp	r3, r1
    66e6:	d301      	bcc.n	66ec <__udivsi3+0xc0>
    66e8:	014b      	lsls	r3, r1, #5
    66ea:	1ac0      	subs	r0, r0, r3
    66ec:	4152      	adcs	r2, r2
    66ee:	0903      	lsrs	r3, r0, #4
    66f0:	428b      	cmp	r3, r1
    66f2:	d301      	bcc.n	66f8 <__udivsi3+0xcc>
    66f4:	010b      	lsls	r3, r1, #4
    66f6:	1ac0      	subs	r0, r0, r3
    66f8:	4152      	adcs	r2, r2
    66fa:	08c3      	lsrs	r3, r0, #3
    66fc:	428b      	cmp	r3, r1
    66fe:	d301      	bcc.n	6704 <__udivsi3+0xd8>
    6700:	00cb      	lsls	r3, r1, #3
    6702:	1ac0      	subs	r0, r0, r3
    6704:	4152      	adcs	r2, r2
    6706:	0883      	lsrs	r3, r0, #2
    6708:	428b      	cmp	r3, r1
    670a:	d301      	bcc.n	6710 <__udivsi3+0xe4>
    670c:	008b      	lsls	r3, r1, #2
    670e:	1ac0      	subs	r0, r0, r3
    6710:	4152      	adcs	r2, r2
    6712:	0843      	lsrs	r3, r0, #1
    6714:	428b      	cmp	r3, r1
    6716:	d301      	bcc.n	671c <__udivsi3+0xf0>
    6718:	004b      	lsls	r3, r1, #1
    671a:	1ac0      	subs	r0, r0, r3
    671c:	4152      	adcs	r2, r2
    671e:	1a41      	subs	r1, r0, r1
    6720:	d200      	bcs.n	6724 <__udivsi3+0xf8>
    6722:	4601      	mov	r1, r0
    6724:	4152      	adcs	r2, r2
    6726:	4610      	mov	r0, r2
    6728:	4770      	bx	lr
    672a:	e7ff      	b.n	672c <__udivsi3+0x100>
    672c:	b501      	push	{r0, lr}
    672e:	2000      	movs	r0, #0
    6730:	f000 f806 	bl	6740 <__aeabi_idiv0>
    6734:	bd02      	pop	{r1, pc}
    6736:	46c0      	nop			; (mov r8, r8)

00006738 <__aeabi_uidivmod>:
    6738:	2900      	cmp	r1, #0
    673a:	d0f7      	beq.n	672c <__udivsi3+0x100>
    673c:	e776      	b.n	662c <__udivsi3>
    673e:	4770      	bx	lr

00006740 <__aeabi_idiv0>:
    6740:	4770      	bx	lr
    6742:	46c0      	nop			; (mov r8, r8)

00006744 <__aeabi_lmul>:
    6744:	b5f0      	push	{r4, r5, r6, r7, lr}
    6746:	46ce      	mov	lr, r9
    6748:	4647      	mov	r7, r8
    674a:	0415      	lsls	r5, r2, #16
    674c:	0c2d      	lsrs	r5, r5, #16
    674e:	002e      	movs	r6, r5
    6750:	b580      	push	{r7, lr}
    6752:	0407      	lsls	r7, r0, #16
    6754:	0c14      	lsrs	r4, r2, #16
    6756:	0c3f      	lsrs	r7, r7, #16
    6758:	4699      	mov	r9, r3
    675a:	0c03      	lsrs	r3, r0, #16
    675c:	437e      	muls	r6, r7
    675e:	435d      	muls	r5, r3
    6760:	4367      	muls	r7, r4
    6762:	4363      	muls	r3, r4
    6764:	197f      	adds	r7, r7, r5
    6766:	0c34      	lsrs	r4, r6, #16
    6768:	19e4      	adds	r4, r4, r7
    676a:	469c      	mov	ip, r3
    676c:	42a5      	cmp	r5, r4
    676e:	d903      	bls.n	6778 <__aeabi_lmul+0x34>
    6770:	2380      	movs	r3, #128	; 0x80
    6772:	025b      	lsls	r3, r3, #9
    6774:	4698      	mov	r8, r3
    6776:	44c4      	add	ip, r8
    6778:	464b      	mov	r3, r9
    677a:	4351      	muls	r1, r2
    677c:	4343      	muls	r3, r0
    677e:	0436      	lsls	r6, r6, #16
    6780:	0c36      	lsrs	r6, r6, #16
    6782:	0c25      	lsrs	r5, r4, #16
    6784:	0424      	lsls	r4, r4, #16
    6786:	4465      	add	r5, ip
    6788:	19a4      	adds	r4, r4, r6
    678a:	1859      	adds	r1, r3, r1
    678c:	1949      	adds	r1, r1, r5
    678e:	0020      	movs	r0, r4
    6790:	bc0c      	pop	{r2, r3}
    6792:	4690      	mov	r8, r2
    6794:	4699      	mov	r9, r3
    6796:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006798 <__ffssi2>:
    6798:	b510      	push	{r4, lr}
    679a:	2300      	movs	r3, #0
    679c:	2800      	cmp	r0, #0
    679e:	d002      	beq.n	67a6 <__ffssi2+0xe>
    67a0:	f000 fe8a 	bl	74b8 <__ctzsi2>
    67a4:	1c43      	adds	r3, r0, #1
    67a6:	0018      	movs	r0, r3
    67a8:	bd10      	pop	{r4, pc}
    67aa:	46c0      	nop			; (mov r8, r8)

000067ac <__aeabi_d2uiz>:
    67ac:	b570      	push	{r4, r5, r6, lr}
    67ae:	2200      	movs	r2, #0
    67b0:	4b0c      	ldr	r3, [pc, #48]	; (67e4 <__aeabi_d2uiz+0x38>)
    67b2:	0004      	movs	r4, r0
    67b4:	000d      	movs	r5, r1
    67b6:	f000 fe57 	bl	7468 <__aeabi_dcmpge>
    67ba:	2800      	cmp	r0, #0
    67bc:	d104      	bne.n	67c8 <__aeabi_d2uiz+0x1c>
    67be:	0020      	movs	r0, r4
    67c0:	0029      	movs	r1, r5
    67c2:	f000 fda7 	bl	7314 <__aeabi_d2iz>
    67c6:	bd70      	pop	{r4, r5, r6, pc}
    67c8:	4b06      	ldr	r3, [pc, #24]	; (67e4 <__aeabi_d2uiz+0x38>)
    67ca:	2200      	movs	r2, #0
    67cc:	0020      	movs	r0, r4
    67ce:	0029      	movs	r1, r5
    67d0:	f000 fa8a 	bl	6ce8 <__aeabi_dsub>
    67d4:	f000 fd9e 	bl	7314 <__aeabi_d2iz>
    67d8:	2380      	movs	r3, #128	; 0x80
    67da:	061b      	lsls	r3, r3, #24
    67dc:	469c      	mov	ip, r3
    67de:	4460      	add	r0, ip
    67e0:	e7f1      	b.n	67c6 <__aeabi_d2uiz+0x1a>
    67e2:	46c0      	nop			; (mov r8, r8)
    67e4:	41e00000 	.word	0x41e00000

000067e8 <__aeabi_dmul>:
    67e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    67ea:	4657      	mov	r7, sl
    67ec:	4645      	mov	r5, r8
    67ee:	46de      	mov	lr, fp
    67f0:	464e      	mov	r6, r9
    67f2:	b5e0      	push	{r5, r6, r7, lr}
    67f4:	030c      	lsls	r4, r1, #12
    67f6:	4698      	mov	r8, r3
    67f8:	004e      	lsls	r6, r1, #1
    67fa:	0b23      	lsrs	r3, r4, #12
    67fc:	b087      	sub	sp, #28
    67fe:	0007      	movs	r7, r0
    6800:	4692      	mov	sl, r2
    6802:	469b      	mov	fp, r3
    6804:	0d76      	lsrs	r6, r6, #21
    6806:	0fcd      	lsrs	r5, r1, #31
    6808:	2e00      	cmp	r6, #0
    680a:	d06b      	beq.n	68e4 <__aeabi_dmul+0xfc>
    680c:	4b6d      	ldr	r3, [pc, #436]	; (69c4 <__aeabi_dmul+0x1dc>)
    680e:	429e      	cmp	r6, r3
    6810:	d035      	beq.n	687e <__aeabi_dmul+0x96>
    6812:	2480      	movs	r4, #128	; 0x80
    6814:	465b      	mov	r3, fp
    6816:	0f42      	lsrs	r2, r0, #29
    6818:	0424      	lsls	r4, r4, #16
    681a:	00db      	lsls	r3, r3, #3
    681c:	4314      	orrs	r4, r2
    681e:	431c      	orrs	r4, r3
    6820:	00c3      	lsls	r3, r0, #3
    6822:	4699      	mov	r9, r3
    6824:	4b68      	ldr	r3, [pc, #416]	; (69c8 <__aeabi_dmul+0x1e0>)
    6826:	46a3      	mov	fp, r4
    6828:	469c      	mov	ip, r3
    682a:	2300      	movs	r3, #0
    682c:	2700      	movs	r7, #0
    682e:	4466      	add	r6, ip
    6830:	9302      	str	r3, [sp, #8]
    6832:	4643      	mov	r3, r8
    6834:	031c      	lsls	r4, r3, #12
    6836:	005a      	lsls	r2, r3, #1
    6838:	0fdb      	lsrs	r3, r3, #31
    683a:	4650      	mov	r0, sl
    683c:	0b24      	lsrs	r4, r4, #12
    683e:	0d52      	lsrs	r2, r2, #21
    6840:	4698      	mov	r8, r3
    6842:	d100      	bne.n	6846 <__aeabi_dmul+0x5e>
    6844:	e076      	b.n	6934 <__aeabi_dmul+0x14c>
    6846:	4b5f      	ldr	r3, [pc, #380]	; (69c4 <__aeabi_dmul+0x1dc>)
    6848:	429a      	cmp	r2, r3
    684a:	d06d      	beq.n	6928 <__aeabi_dmul+0x140>
    684c:	2380      	movs	r3, #128	; 0x80
    684e:	0f41      	lsrs	r1, r0, #29
    6850:	041b      	lsls	r3, r3, #16
    6852:	430b      	orrs	r3, r1
    6854:	495c      	ldr	r1, [pc, #368]	; (69c8 <__aeabi_dmul+0x1e0>)
    6856:	00e4      	lsls	r4, r4, #3
    6858:	468c      	mov	ip, r1
    685a:	431c      	orrs	r4, r3
    685c:	00c3      	lsls	r3, r0, #3
    685e:	2000      	movs	r0, #0
    6860:	4462      	add	r2, ip
    6862:	4641      	mov	r1, r8
    6864:	18b6      	adds	r6, r6, r2
    6866:	4069      	eors	r1, r5
    6868:	1c72      	adds	r2, r6, #1
    686a:	9101      	str	r1, [sp, #4]
    686c:	4694      	mov	ip, r2
    686e:	4307      	orrs	r7, r0
    6870:	2f0f      	cmp	r7, #15
    6872:	d900      	bls.n	6876 <__aeabi_dmul+0x8e>
    6874:	e0b0      	b.n	69d8 <__aeabi_dmul+0x1f0>
    6876:	4a55      	ldr	r2, [pc, #340]	; (69cc <__aeabi_dmul+0x1e4>)
    6878:	00bf      	lsls	r7, r7, #2
    687a:	59d2      	ldr	r2, [r2, r7]
    687c:	4697      	mov	pc, r2
    687e:	465b      	mov	r3, fp
    6880:	4303      	orrs	r3, r0
    6882:	4699      	mov	r9, r3
    6884:	d000      	beq.n	6888 <__aeabi_dmul+0xa0>
    6886:	e087      	b.n	6998 <__aeabi_dmul+0x1b0>
    6888:	2300      	movs	r3, #0
    688a:	469b      	mov	fp, r3
    688c:	3302      	adds	r3, #2
    688e:	2708      	movs	r7, #8
    6890:	9302      	str	r3, [sp, #8]
    6892:	e7ce      	b.n	6832 <__aeabi_dmul+0x4a>
    6894:	4642      	mov	r2, r8
    6896:	9201      	str	r2, [sp, #4]
    6898:	2802      	cmp	r0, #2
    689a:	d067      	beq.n	696c <__aeabi_dmul+0x184>
    689c:	2803      	cmp	r0, #3
    689e:	d100      	bne.n	68a2 <__aeabi_dmul+0xba>
    68a0:	e20e      	b.n	6cc0 <__aeabi_dmul+0x4d8>
    68a2:	2801      	cmp	r0, #1
    68a4:	d000      	beq.n	68a8 <__aeabi_dmul+0xc0>
    68a6:	e162      	b.n	6b6e <__aeabi_dmul+0x386>
    68a8:	2300      	movs	r3, #0
    68aa:	2400      	movs	r4, #0
    68ac:	2200      	movs	r2, #0
    68ae:	4699      	mov	r9, r3
    68b0:	9901      	ldr	r1, [sp, #4]
    68b2:	4001      	ands	r1, r0
    68b4:	b2cd      	uxtb	r5, r1
    68b6:	2100      	movs	r1, #0
    68b8:	0312      	lsls	r2, r2, #12
    68ba:	0d0b      	lsrs	r3, r1, #20
    68bc:	0b12      	lsrs	r2, r2, #12
    68be:	051b      	lsls	r3, r3, #20
    68c0:	4313      	orrs	r3, r2
    68c2:	4a43      	ldr	r2, [pc, #268]	; (69d0 <__aeabi_dmul+0x1e8>)
    68c4:	0524      	lsls	r4, r4, #20
    68c6:	4013      	ands	r3, r2
    68c8:	431c      	orrs	r4, r3
    68ca:	0064      	lsls	r4, r4, #1
    68cc:	07ed      	lsls	r5, r5, #31
    68ce:	0864      	lsrs	r4, r4, #1
    68d0:	432c      	orrs	r4, r5
    68d2:	4648      	mov	r0, r9
    68d4:	0021      	movs	r1, r4
    68d6:	b007      	add	sp, #28
    68d8:	bc3c      	pop	{r2, r3, r4, r5}
    68da:	4690      	mov	r8, r2
    68dc:	4699      	mov	r9, r3
    68de:	46a2      	mov	sl, r4
    68e0:	46ab      	mov	fp, r5
    68e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68e4:	4303      	orrs	r3, r0
    68e6:	4699      	mov	r9, r3
    68e8:	d04f      	beq.n	698a <__aeabi_dmul+0x1a2>
    68ea:	465b      	mov	r3, fp
    68ec:	2b00      	cmp	r3, #0
    68ee:	d100      	bne.n	68f2 <__aeabi_dmul+0x10a>
    68f0:	e189      	b.n	6c06 <__aeabi_dmul+0x41e>
    68f2:	4658      	mov	r0, fp
    68f4:	f000 fdc2 	bl	747c <__clzsi2>
    68f8:	0003      	movs	r3, r0
    68fa:	3b0b      	subs	r3, #11
    68fc:	2b1c      	cmp	r3, #28
    68fe:	dd00      	ble.n	6902 <__aeabi_dmul+0x11a>
    6900:	e17a      	b.n	6bf8 <__aeabi_dmul+0x410>
    6902:	221d      	movs	r2, #29
    6904:	1ad3      	subs	r3, r2, r3
    6906:	003a      	movs	r2, r7
    6908:	0001      	movs	r1, r0
    690a:	465c      	mov	r4, fp
    690c:	40da      	lsrs	r2, r3
    690e:	3908      	subs	r1, #8
    6910:	408c      	lsls	r4, r1
    6912:	0013      	movs	r3, r2
    6914:	408f      	lsls	r7, r1
    6916:	4323      	orrs	r3, r4
    6918:	469b      	mov	fp, r3
    691a:	46b9      	mov	r9, r7
    691c:	2300      	movs	r3, #0
    691e:	4e2d      	ldr	r6, [pc, #180]	; (69d4 <__aeabi_dmul+0x1ec>)
    6920:	2700      	movs	r7, #0
    6922:	1a36      	subs	r6, r6, r0
    6924:	9302      	str	r3, [sp, #8]
    6926:	e784      	b.n	6832 <__aeabi_dmul+0x4a>
    6928:	4653      	mov	r3, sl
    692a:	4323      	orrs	r3, r4
    692c:	d12a      	bne.n	6984 <__aeabi_dmul+0x19c>
    692e:	2400      	movs	r4, #0
    6930:	2002      	movs	r0, #2
    6932:	e796      	b.n	6862 <__aeabi_dmul+0x7a>
    6934:	4653      	mov	r3, sl
    6936:	4323      	orrs	r3, r4
    6938:	d020      	beq.n	697c <__aeabi_dmul+0x194>
    693a:	2c00      	cmp	r4, #0
    693c:	d100      	bne.n	6940 <__aeabi_dmul+0x158>
    693e:	e157      	b.n	6bf0 <__aeabi_dmul+0x408>
    6940:	0020      	movs	r0, r4
    6942:	f000 fd9b 	bl	747c <__clzsi2>
    6946:	0003      	movs	r3, r0
    6948:	3b0b      	subs	r3, #11
    694a:	2b1c      	cmp	r3, #28
    694c:	dd00      	ble.n	6950 <__aeabi_dmul+0x168>
    694e:	e149      	b.n	6be4 <__aeabi_dmul+0x3fc>
    6950:	211d      	movs	r1, #29
    6952:	1acb      	subs	r3, r1, r3
    6954:	4651      	mov	r1, sl
    6956:	0002      	movs	r2, r0
    6958:	40d9      	lsrs	r1, r3
    695a:	4653      	mov	r3, sl
    695c:	3a08      	subs	r2, #8
    695e:	4094      	lsls	r4, r2
    6960:	4093      	lsls	r3, r2
    6962:	430c      	orrs	r4, r1
    6964:	4a1b      	ldr	r2, [pc, #108]	; (69d4 <__aeabi_dmul+0x1ec>)
    6966:	1a12      	subs	r2, r2, r0
    6968:	2000      	movs	r0, #0
    696a:	e77a      	b.n	6862 <__aeabi_dmul+0x7a>
    696c:	2501      	movs	r5, #1
    696e:	9b01      	ldr	r3, [sp, #4]
    6970:	4c14      	ldr	r4, [pc, #80]	; (69c4 <__aeabi_dmul+0x1dc>)
    6972:	401d      	ands	r5, r3
    6974:	2300      	movs	r3, #0
    6976:	2200      	movs	r2, #0
    6978:	4699      	mov	r9, r3
    697a:	e79c      	b.n	68b6 <__aeabi_dmul+0xce>
    697c:	2400      	movs	r4, #0
    697e:	2200      	movs	r2, #0
    6980:	2001      	movs	r0, #1
    6982:	e76e      	b.n	6862 <__aeabi_dmul+0x7a>
    6984:	4653      	mov	r3, sl
    6986:	2003      	movs	r0, #3
    6988:	e76b      	b.n	6862 <__aeabi_dmul+0x7a>
    698a:	2300      	movs	r3, #0
    698c:	469b      	mov	fp, r3
    698e:	3301      	adds	r3, #1
    6990:	2704      	movs	r7, #4
    6992:	2600      	movs	r6, #0
    6994:	9302      	str	r3, [sp, #8]
    6996:	e74c      	b.n	6832 <__aeabi_dmul+0x4a>
    6998:	2303      	movs	r3, #3
    699a:	4681      	mov	r9, r0
    699c:	270c      	movs	r7, #12
    699e:	9302      	str	r3, [sp, #8]
    69a0:	e747      	b.n	6832 <__aeabi_dmul+0x4a>
    69a2:	2280      	movs	r2, #128	; 0x80
    69a4:	2300      	movs	r3, #0
    69a6:	2500      	movs	r5, #0
    69a8:	0312      	lsls	r2, r2, #12
    69aa:	4699      	mov	r9, r3
    69ac:	4c05      	ldr	r4, [pc, #20]	; (69c4 <__aeabi_dmul+0x1dc>)
    69ae:	e782      	b.n	68b6 <__aeabi_dmul+0xce>
    69b0:	465c      	mov	r4, fp
    69b2:	464b      	mov	r3, r9
    69b4:	9802      	ldr	r0, [sp, #8]
    69b6:	e76f      	b.n	6898 <__aeabi_dmul+0xb0>
    69b8:	465c      	mov	r4, fp
    69ba:	464b      	mov	r3, r9
    69bc:	9501      	str	r5, [sp, #4]
    69be:	9802      	ldr	r0, [sp, #8]
    69c0:	e76a      	b.n	6898 <__aeabi_dmul+0xb0>
    69c2:	46c0      	nop			; (mov r8, r8)
    69c4:	000007ff 	.word	0x000007ff
    69c8:	fffffc01 	.word	0xfffffc01
    69cc:	00009318 	.word	0x00009318
    69d0:	800fffff 	.word	0x800fffff
    69d4:	fffffc0d 	.word	0xfffffc0d
    69d8:	464a      	mov	r2, r9
    69da:	4649      	mov	r1, r9
    69dc:	0c17      	lsrs	r7, r2, #16
    69de:	0c1a      	lsrs	r2, r3, #16
    69e0:	041b      	lsls	r3, r3, #16
    69e2:	0c1b      	lsrs	r3, r3, #16
    69e4:	0408      	lsls	r0, r1, #16
    69e6:	0019      	movs	r1, r3
    69e8:	0c00      	lsrs	r0, r0, #16
    69ea:	4341      	muls	r1, r0
    69ec:	0015      	movs	r5, r2
    69ee:	4688      	mov	r8, r1
    69f0:	0019      	movs	r1, r3
    69f2:	437d      	muls	r5, r7
    69f4:	4379      	muls	r1, r7
    69f6:	9503      	str	r5, [sp, #12]
    69f8:	4689      	mov	r9, r1
    69fa:	0029      	movs	r1, r5
    69fc:	0015      	movs	r5, r2
    69fe:	4345      	muls	r5, r0
    6a00:	444d      	add	r5, r9
    6a02:	9502      	str	r5, [sp, #8]
    6a04:	4645      	mov	r5, r8
    6a06:	0c2d      	lsrs	r5, r5, #16
    6a08:	46aa      	mov	sl, r5
    6a0a:	9d02      	ldr	r5, [sp, #8]
    6a0c:	4455      	add	r5, sl
    6a0e:	45a9      	cmp	r9, r5
    6a10:	d906      	bls.n	6a20 <__aeabi_dmul+0x238>
    6a12:	468a      	mov	sl, r1
    6a14:	2180      	movs	r1, #128	; 0x80
    6a16:	0249      	lsls	r1, r1, #9
    6a18:	4689      	mov	r9, r1
    6a1a:	44ca      	add	sl, r9
    6a1c:	4651      	mov	r1, sl
    6a1e:	9103      	str	r1, [sp, #12]
    6a20:	0c29      	lsrs	r1, r5, #16
    6a22:	9104      	str	r1, [sp, #16]
    6a24:	4641      	mov	r1, r8
    6a26:	0409      	lsls	r1, r1, #16
    6a28:	042d      	lsls	r5, r5, #16
    6a2a:	0c09      	lsrs	r1, r1, #16
    6a2c:	4688      	mov	r8, r1
    6a2e:	0029      	movs	r1, r5
    6a30:	0c25      	lsrs	r5, r4, #16
    6a32:	0424      	lsls	r4, r4, #16
    6a34:	4441      	add	r1, r8
    6a36:	0c24      	lsrs	r4, r4, #16
    6a38:	9105      	str	r1, [sp, #20]
    6a3a:	0021      	movs	r1, r4
    6a3c:	4341      	muls	r1, r0
    6a3e:	4688      	mov	r8, r1
    6a40:	0021      	movs	r1, r4
    6a42:	4379      	muls	r1, r7
    6a44:	468a      	mov	sl, r1
    6a46:	4368      	muls	r0, r5
    6a48:	4641      	mov	r1, r8
    6a4a:	4450      	add	r0, sl
    6a4c:	4681      	mov	r9, r0
    6a4e:	0c08      	lsrs	r0, r1, #16
    6a50:	4448      	add	r0, r9
    6a52:	436f      	muls	r7, r5
    6a54:	4582      	cmp	sl, r0
    6a56:	d903      	bls.n	6a60 <__aeabi_dmul+0x278>
    6a58:	2180      	movs	r1, #128	; 0x80
    6a5a:	0249      	lsls	r1, r1, #9
    6a5c:	4689      	mov	r9, r1
    6a5e:	444f      	add	r7, r9
    6a60:	0c01      	lsrs	r1, r0, #16
    6a62:	4689      	mov	r9, r1
    6a64:	0039      	movs	r1, r7
    6a66:	4449      	add	r1, r9
    6a68:	9102      	str	r1, [sp, #8]
    6a6a:	4641      	mov	r1, r8
    6a6c:	040f      	lsls	r7, r1, #16
    6a6e:	9904      	ldr	r1, [sp, #16]
    6a70:	0c3f      	lsrs	r7, r7, #16
    6a72:	4688      	mov	r8, r1
    6a74:	0400      	lsls	r0, r0, #16
    6a76:	19c0      	adds	r0, r0, r7
    6a78:	4480      	add	r8, r0
    6a7a:	4641      	mov	r1, r8
    6a7c:	9104      	str	r1, [sp, #16]
    6a7e:	4659      	mov	r1, fp
    6a80:	0c0f      	lsrs	r7, r1, #16
    6a82:	0409      	lsls	r1, r1, #16
    6a84:	0c09      	lsrs	r1, r1, #16
    6a86:	4688      	mov	r8, r1
    6a88:	4359      	muls	r1, r3
    6a8a:	468a      	mov	sl, r1
    6a8c:	0039      	movs	r1, r7
    6a8e:	4351      	muls	r1, r2
    6a90:	4689      	mov	r9, r1
    6a92:	4641      	mov	r1, r8
    6a94:	434a      	muls	r2, r1
    6a96:	4651      	mov	r1, sl
    6a98:	0c09      	lsrs	r1, r1, #16
    6a9a:	468b      	mov	fp, r1
    6a9c:	437b      	muls	r3, r7
    6a9e:	18d2      	adds	r2, r2, r3
    6aa0:	445a      	add	r2, fp
    6aa2:	4293      	cmp	r3, r2
    6aa4:	d903      	bls.n	6aae <__aeabi_dmul+0x2c6>
    6aa6:	2380      	movs	r3, #128	; 0x80
    6aa8:	025b      	lsls	r3, r3, #9
    6aaa:	469b      	mov	fp, r3
    6aac:	44d9      	add	r9, fp
    6aae:	4651      	mov	r1, sl
    6ab0:	0409      	lsls	r1, r1, #16
    6ab2:	0c09      	lsrs	r1, r1, #16
    6ab4:	468a      	mov	sl, r1
    6ab6:	4641      	mov	r1, r8
    6ab8:	4361      	muls	r1, r4
    6aba:	437c      	muls	r4, r7
    6abc:	0c13      	lsrs	r3, r2, #16
    6abe:	0412      	lsls	r2, r2, #16
    6ac0:	444b      	add	r3, r9
    6ac2:	4452      	add	r2, sl
    6ac4:	46a1      	mov	r9, r4
    6ac6:	468a      	mov	sl, r1
    6ac8:	003c      	movs	r4, r7
    6aca:	4641      	mov	r1, r8
    6acc:	436c      	muls	r4, r5
    6ace:	434d      	muls	r5, r1
    6ad0:	4651      	mov	r1, sl
    6ad2:	444d      	add	r5, r9
    6ad4:	0c0f      	lsrs	r7, r1, #16
    6ad6:	197d      	adds	r5, r7, r5
    6ad8:	45a9      	cmp	r9, r5
    6ada:	d903      	bls.n	6ae4 <__aeabi_dmul+0x2fc>
    6adc:	2180      	movs	r1, #128	; 0x80
    6ade:	0249      	lsls	r1, r1, #9
    6ae0:	4688      	mov	r8, r1
    6ae2:	4444      	add	r4, r8
    6ae4:	9f04      	ldr	r7, [sp, #16]
    6ae6:	9903      	ldr	r1, [sp, #12]
    6ae8:	46b8      	mov	r8, r7
    6aea:	4441      	add	r1, r8
    6aec:	468b      	mov	fp, r1
    6aee:	4583      	cmp	fp, r0
    6af0:	4180      	sbcs	r0, r0
    6af2:	4241      	negs	r1, r0
    6af4:	4688      	mov	r8, r1
    6af6:	4651      	mov	r1, sl
    6af8:	0408      	lsls	r0, r1, #16
    6afa:	042f      	lsls	r7, r5, #16
    6afc:	0c00      	lsrs	r0, r0, #16
    6afe:	183f      	adds	r7, r7, r0
    6b00:	4658      	mov	r0, fp
    6b02:	9902      	ldr	r1, [sp, #8]
    6b04:	1810      	adds	r0, r2, r0
    6b06:	4689      	mov	r9, r1
    6b08:	4290      	cmp	r0, r2
    6b0a:	4192      	sbcs	r2, r2
    6b0c:	444f      	add	r7, r9
    6b0e:	46ba      	mov	sl, r7
    6b10:	4252      	negs	r2, r2
    6b12:	4699      	mov	r9, r3
    6b14:	4693      	mov	fp, r2
    6b16:	44c2      	add	sl, r8
    6b18:	44d1      	add	r9, sl
    6b1a:	44cb      	add	fp, r9
    6b1c:	428f      	cmp	r7, r1
    6b1e:	41bf      	sbcs	r7, r7
    6b20:	45c2      	cmp	sl, r8
    6b22:	4189      	sbcs	r1, r1
    6b24:	4599      	cmp	r9, r3
    6b26:	419b      	sbcs	r3, r3
    6b28:	4593      	cmp	fp, r2
    6b2a:	4192      	sbcs	r2, r2
    6b2c:	427f      	negs	r7, r7
    6b2e:	4249      	negs	r1, r1
    6b30:	0c2d      	lsrs	r5, r5, #16
    6b32:	4252      	negs	r2, r2
    6b34:	430f      	orrs	r7, r1
    6b36:	425b      	negs	r3, r3
    6b38:	4313      	orrs	r3, r2
    6b3a:	197f      	adds	r7, r7, r5
    6b3c:	18ff      	adds	r7, r7, r3
    6b3e:	465b      	mov	r3, fp
    6b40:	193c      	adds	r4, r7, r4
    6b42:	0ddb      	lsrs	r3, r3, #23
    6b44:	9a05      	ldr	r2, [sp, #20]
    6b46:	0264      	lsls	r4, r4, #9
    6b48:	431c      	orrs	r4, r3
    6b4a:	0243      	lsls	r3, r0, #9
    6b4c:	4313      	orrs	r3, r2
    6b4e:	1e5d      	subs	r5, r3, #1
    6b50:	41ab      	sbcs	r3, r5
    6b52:	465a      	mov	r2, fp
    6b54:	0dc0      	lsrs	r0, r0, #23
    6b56:	4303      	orrs	r3, r0
    6b58:	0252      	lsls	r2, r2, #9
    6b5a:	4313      	orrs	r3, r2
    6b5c:	01e2      	lsls	r2, r4, #7
    6b5e:	d556      	bpl.n	6c0e <__aeabi_dmul+0x426>
    6b60:	2001      	movs	r0, #1
    6b62:	085a      	lsrs	r2, r3, #1
    6b64:	4003      	ands	r3, r0
    6b66:	4313      	orrs	r3, r2
    6b68:	07e2      	lsls	r2, r4, #31
    6b6a:	4313      	orrs	r3, r2
    6b6c:	0864      	lsrs	r4, r4, #1
    6b6e:	485a      	ldr	r0, [pc, #360]	; (6cd8 <__aeabi_dmul+0x4f0>)
    6b70:	4460      	add	r0, ip
    6b72:	2800      	cmp	r0, #0
    6b74:	dd4d      	ble.n	6c12 <__aeabi_dmul+0x42a>
    6b76:	075a      	lsls	r2, r3, #29
    6b78:	d009      	beq.n	6b8e <__aeabi_dmul+0x3a6>
    6b7a:	220f      	movs	r2, #15
    6b7c:	401a      	ands	r2, r3
    6b7e:	2a04      	cmp	r2, #4
    6b80:	d005      	beq.n	6b8e <__aeabi_dmul+0x3a6>
    6b82:	1d1a      	adds	r2, r3, #4
    6b84:	429a      	cmp	r2, r3
    6b86:	419b      	sbcs	r3, r3
    6b88:	425b      	negs	r3, r3
    6b8a:	18e4      	adds	r4, r4, r3
    6b8c:	0013      	movs	r3, r2
    6b8e:	01e2      	lsls	r2, r4, #7
    6b90:	d504      	bpl.n	6b9c <__aeabi_dmul+0x3b4>
    6b92:	2080      	movs	r0, #128	; 0x80
    6b94:	4a51      	ldr	r2, [pc, #324]	; (6cdc <__aeabi_dmul+0x4f4>)
    6b96:	00c0      	lsls	r0, r0, #3
    6b98:	4014      	ands	r4, r2
    6b9a:	4460      	add	r0, ip
    6b9c:	4a50      	ldr	r2, [pc, #320]	; (6ce0 <__aeabi_dmul+0x4f8>)
    6b9e:	4290      	cmp	r0, r2
    6ba0:	dd00      	ble.n	6ba4 <__aeabi_dmul+0x3bc>
    6ba2:	e6e3      	b.n	696c <__aeabi_dmul+0x184>
    6ba4:	2501      	movs	r5, #1
    6ba6:	08db      	lsrs	r3, r3, #3
    6ba8:	0762      	lsls	r2, r4, #29
    6baa:	431a      	orrs	r2, r3
    6bac:	0264      	lsls	r4, r4, #9
    6bae:	9b01      	ldr	r3, [sp, #4]
    6bb0:	4691      	mov	r9, r2
    6bb2:	0b22      	lsrs	r2, r4, #12
    6bb4:	0544      	lsls	r4, r0, #21
    6bb6:	0d64      	lsrs	r4, r4, #21
    6bb8:	401d      	ands	r5, r3
    6bba:	e67c      	b.n	68b6 <__aeabi_dmul+0xce>
    6bbc:	2280      	movs	r2, #128	; 0x80
    6bbe:	4659      	mov	r1, fp
    6bc0:	0312      	lsls	r2, r2, #12
    6bc2:	4211      	tst	r1, r2
    6bc4:	d008      	beq.n	6bd8 <__aeabi_dmul+0x3f0>
    6bc6:	4214      	tst	r4, r2
    6bc8:	d106      	bne.n	6bd8 <__aeabi_dmul+0x3f0>
    6bca:	4322      	orrs	r2, r4
    6bcc:	0312      	lsls	r2, r2, #12
    6bce:	0b12      	lsrs	r2, r2, #12
    6bd0:	4645      	mov	r5, r8
    6bd2:	4699      	mov	r9, r3
    6bd4:	4c43      	ldr	r4, [pc, #268]	; (6ce4 <__aeabi_dmul+0x4fc>)
    6bd6:	e66e      	b.n	68b6 <__aeabi_dmul+0xce>
    6bd8:	465b      	mov	r3, fp
    6bda:	431a      	orrs	r2, r3
    6bdc:	0312      	lsls	r2, r2, #12
    6bde:	0b12      	lsrs	r2, r2, #12
    6be0:	4c40      	ldr	r4, [pc, #256]	; (6ce4 <__aeabi_dmul+0x4fc>)
    6be2:	e668      	b.n	68b6 <__aeabi_dmul+0xce>
    6be4:	0003      	movs	r3, r0
    6be6:	4654      	mov	r4, sl
    6be8:	3b28      	subs	r3, #40	; 0x28
    6bea:	409c      	lsls	r4, r3
    6bec:	2300      	movs	r3, #0
    6bee:	e6b9      	b.n	6964 <__aeabi_dmul+0x17c>
    6bf0:	f000 fc44 	bl	747c <__clzsi2>
    6bf4:	3020      	adds	r0, #32
    6bf6:	e6a6      	b.n	6946 <__aeabi_dmul+0x15e>
    6bf8:	0003      	movs	r3, r0
    6bfa:	3b28      	subs	r3, #40	; 0x28
    6bfc:	409f      	lsls	r7, r3
    6bfe:	2300      	movs	r3, #0
    6c00:	46bb      	mov	fp, r7
    6c02:	4699      	mov	r9, r3
    6c04:	e68a      	b.n	691c <__aeabi_dmul+0x134>
    6c06:	f000 fc39 	bl	747c <__clzsi2>
    6c0a:	3020      	adds	r0, #32
    6c0c:	e674      	b.n	68f8 <__aeabi_dmul+0x110>
    6c0e:	46b4      	mov	ip, r6
    6c10:	e7ad      	b.n	6b6e <__aeabi_dmul+0x386>
    6c12:	2501      	movs	r5, #1
    6c14:	1a2a      	subs	r2, r5, r0
    6c16:	2a38      	cmp	r2, #56	; 0x38
    6c18:	dd06      	ble.n	6c28 <__aeabi_dmul+0x440>
    6c1a:	9b01      	ldr	r3, [sp, #4]
    6c1c:	2400      	movs	r4, #0
    6c1e:	401d      	ands	r5, r3
    6c20:	2300      	movs	r3, #0
    6c22:	2200      	movs	r2, #0
    6c24:	4699      	mov	r9, r3
    6c26:	e646      	b.n	68b6 <__aeabi_dmul+0xce>
    6c28:	2a1f      	cmp	r2, #31
    6c2a:	dc21      	bgt.n	6c70 <__aeabi_dmul+0x488>
    6c2c:	2520      	movs	r5, #32
    6c2e:	0020      	movs	r0, r4
    6c30:	1aad      	subs	r5, r5, r2
    6c32:	001e      	movs	r6, r3
    6c34:	40ab      	lsls	r3, r5
    6c36:	40a8      	lsls	r0, r5
    6c38:	40d6      	lsrs	r6, r2
    6c3a:	1e5d      	subs	r5, r3, #1
    6c3c:	41ab      	sbcs	r3, r5
    6c3e:	4330      	orrs	r0, r6
    6c40:	4318      	orrs	r0, r3
    6c42:	40d4      	lsrs	r4, r2
    6c44:	0743      	lsls	r3, r0, #29
    6c46:	d009      	beq.n	6c5c <__aeabi_dmul+0x474>
    6c48:	230f      	movs	r3, #15
    6c4a:	4003      	ands	r3, r0
    6c4c:	2b04      	cmp	r3, #4
    6c4e:	d005      	beq.n	6c5c <__aeabi_dmul+0x474>
    6c50:	0003      	movs	r3, r0
    6c52:	1d18      	adds	r0, r3, #4
    6c54:	4298      	cmp	r0, r3
    6c56:	419b      	sbcs	r3, r3
    6c58:	425b      	negs	r3, r3
    6c5a:	18e4      	adds	r4, r4, r3
    6c5c:	0223      	lsls	r3, r4, #8
    6c5e:	d521      	bpl.n	6ca4 <__aeabi_dmul+0x4bc>
    6c60:	2501      	movs	r5, #1
    6c62:	9b01      	ldr	r3, [sp, #4]
    6c64:	2401      	movs	r4, #1
    6c66:	401d      	ands	r5, r3
    6c68:	2300      	movs	r3, #0
    6c6a:	2200      	movs	r2, #0
    6c6c:	4699      	mov	r9, r3
    6c6e:	e622      	b.n	68b6 <__aeabi_dmul+0xce>
    6c70:	251f      	movs	r5, #31
    6c72:	0021      	movs	r1, r4
    6c74:	426d      	negs	r5, r5
    6c76:	1a28      	subs	r0, r5, r0
    6c78:	40c1      	lsrs	r1, r0
    6c7a:	0008      	movs	r0, r1
    6c7c:	2a20      	cmp	r2, #32
    6c7e:	d01d      	beq.n	6cbc <__aeabi_dmul+0x4d4>
    6c80:	355f      	adds	r5, #95	; 0x5f
    6c82:	1aaa      	subs	r2, r5, r2
    6c84:	4094      	lsls	r4, r2
    6c86:	4323      	orrs	r3, r4
    6c88:	1e5c      	subs	r4, r3, #1
    6c8a:	41a3      	sbcs	r3, r4
    6c8c:	2507      	movs	r5, #7
    6c8e:	4303      	orrs	r3, r0
    6c90:	401d      	ands	r5, r3
    6c92:	2200      	movs	r2, #0
    6c94:	2d00      	cmp	r5, #0
    6c96:	d009      	beq.n	6cac <__aeabi_dmul+0x4c4>
    6c98:	220f      	movs	r2, #15
    6c9a:	2400      	movs	r4, #0
    6c9c:	401a      	ands	r2, r3
    6c9e:	0018      	movs	r0, r3
    6ca0:	2a04      	cmp	r2, #4
    6ca2:	d1d6      	bne.n	6c52 <__aeabi_dmul+0x46a>
    6ca4:	0003      	movs	r3, r0
    6ca6:	0765      	lsls	r5, r4, #29
    6ca8:	0264      	lsls	r4, r4, #9
    6caa:	0b22      	lsrs	r2, r4, #12
    6cac:	08db      	lsrs	r3, r3, #3
    6cae:	432b      	orrs	r3, r5
    6cb0:	2501      	movs	r5, #1
    6cb2:	4699      	mov	r9, r3
    6cb4:	9b01      	ldr	r3, [sp, #4]
    6cb6:	2400      	movs	r4, #0
    6cb8:	401d      	ands	r5, r3
    6cba:	e5fc      	b.n	68b6 <__aeabi_dmul+0xce>
    6cbc:	2400      	movs	r4, #0
    6cbe:	e7e2      	b.n	6c86 <__aeabi_dmul+0x49e>
    6cc0:	2280      	movs	r2, #128	; 0x80
    6cc2:	2501      	movs	r5, #1
    6cc4:	0312      	lsls	r2, r2, #12
    6cc6:	4322      	orrs	r2, r4
    6cc8:	9901      	ldr	r1, [sp, #4]
    6cca:	0312      	lsls	r2, r2, #12
    6ccc:	0b12      	lsrs	r2, r2, #12
    6cce:	400d      	ands	r5, r1
    6cd0:	4699      	mov	r9, r3
    6cd2:	4c04      	ldr	r4, [pc, #16]	; (6ce4 <__aeabi_dmul+0x4fc>)
    6cd4:	e5ef      	b.n	68b6 <__aeabi_dmul+0xce>
    6cd6:	46c0      	nop			; (mov r8, r8)
    6cd8:	000003ff 	.word	0x000003ff
    6cdc:	feffffff 	.word	0xfeffffff
    6ce0:	000007fe 	.word	0x000007fe
    6ce4:	000007ff 	.word	0x000007ff

00006ce8 <__aeabi_dsub>:
    6ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6cea:	4646      	mov	r6, r8
    6cec:	46d6      	mov	lr, sl
    6cee:	464f      	mov	r7, r9
    6cf0:	030c      	lsls	r4, r1, #12
    6cf2:	b5c0      	push	{r6, r7, lr}
    6cf4:	0fcd      	lsrs	r5, r1, #31
    6cf6:	004e      	lsls	r6, r1, #1
    6cf8:	0a61      	lsrs	r1, r4, #9
    6cfa:	0f44      	lsrs	r4, r0, #29
    6cfc:	430c      	orrs	r4, r1
    6cfe:	00c1      	lsls	r1, r0, #3
    6d00:	0058      	lsls	r0, r3, #1
    6d02:	0d40      	lsrs	r0, r0, #21
    6d04:	4684      	mov	ip, r0
    6d06:	468a      	mov	sl, r1
    6d08:	000f      	movs	r7, r1
    6d0a:	0319      	lsls	r1, r3, #12
    6d0c:	0f50      	lsrs	r0, r2, #29
    6d0e:	0a49      	lsrs	r1, r1, #9
    6d10:	4301      	orrs	r1, r0
    6d12:	48c6      	ldr	r0, [pc, #792]	; (702c <__aeabi_dsub+0x344>)
    6d14:	0d76      	lsrs	r6, r6, #21
    6d16:	46a8      	mov	r8, r5
    6d18:	0fdb      	lsrs	r3, r3, #31
    6d1a:	00d2      	lsls	r2, r2, #3
    6d1c:	4584      	cmp	ip, r0
    6d1e:	d100      	bne.n	6d22 <__aeabi_dsub+0x3a>
    6d20:	e0d8      	b.n	6ed4 <__aeabi_dsub+0x1ec>
    6d22:	2001      	movs	r0, #1
    6d24:	4043      	eors	r3, r0
    6d26:	42ab      	cmp	r3, r5
    6d28:	d100      	bne.n	6d2c <__aeabi_dsub+0x44>
    6d2a:	e0a6      	b.n	6e7a <__aeabi_dsub+0x192>
    6d2c:	4660      	mov	r0, ip
    6d2e:	1a35      	subs	r5, r6, r0
    6d30:	2d00      	cmp	r5, #0
    6d32:	dc00      	bgt.n	6d36 <__aeabi_dsub+0x4e>
    6d34:	e105      	b.n	6f42 <__aeabi_dsub+0x25a>
    6d36:	2800      	cmp	r0, #0
    6d38:	d110      	bne.n	6d5c <__aeabi_dsub+0x74>
    6d3a:	000b      	movs	r3, r1
    6d3c:	4313      	orrs	r3, r2
    6d3e:	d100      	bne.n	6d42 <__aeabi_dsub+0x5a>
    6d40:	e0d7      	b.n	6ef2 <__aeabi_dsub+0x20a>
    6d42:	1e6b      	subs	r3, r5, #1
    6d44:	2b00      	cmp	r3, #0
    6d46:	d000      	beq.n	6d4a <__aeabi_dsub+0x62>
    6d48:	e14b      	b.n	6fe2 <__aeabi_dsub+0x2fa>
    6d4a:	4653      	mov	r3, sl
    6d4c:	1a9f      	subs	r7, r3, r2
    6d4e:	45ba      	cmp	sl, r7
    6d50:	4180      	sbcs	r0, r0
    6d52:	1a64      	subs	r4, r4, r1
    6d54:	4240      	negs	r0, r0
    6d56:	1a24      	subs	r4, r4, r0
    6d58:	2601      	movs	r6, #1
    6d5a:	e01e      	b.n	6d9a <__aeabi_dsub+0xb2>
    6d5c:	4bb3      	ldr	r3, [pc, #716]	; (702c <__aeabi_dsub+0x344>)
    6d5e:	429e      	cmp	r6, r3
    6d60:	d048      	beq.n	6df4 <__aeabi_dsub+0x10c>
    6d62:	2380      	movs	r3, #128	; 0x80
    6d64:	041b      	lsls	r3, r3, #16
    6d66:	4319      	orrs	r1, r3
    6d68:	2d38      	cmp	r5, #56	; 0x38
    6d6a:	dd00      	ble.n	6d6e <__aeabi_dsub+0x86>
    6d6c:	e119      	b.n	6fa2 <__aeabi_dsub+0x2ba>
    6d6e:	2d1f      	cmp	r5, #31
    6d70:	dd00      	ble.n	6d74 <__aeabi_dsub+0x8c>
    6d72:	e14c      	b.n	700e <__aeabi_dsub+0x326>
    6d74:	2320      	movs	r3, #32
    6d76:	000f      	movs	r7, r1
    6d78:	1b5b      	subs	r3, r3, r5
    6d7a:	0010      	movs	r0, r2
    6d7c:	409a      	lsls	r2, r3
    6d7e:	409f      	lsls	r7, r3
    6d80:	40e8      	lsrs	r0, r5
    6d82:	1e53      	subs	r3, r2, #1
    6d84:	419a      	sbcs	r2, r3
    6d86:	40e9      	lsrs	r1, r5
    6d88:	4307      	orrs	r7, r0
    6d8a:	4317      	orrs	r7, r2
    6d8c:	4653      	mov	r3, sl
    6d8e:	1bdf      	subs	r7, r3, r7
    6d90:	1a61      	subs	r1, r4, r1
    6d92:	45ba      	cmp	sl, r7
    6d94:	41a4      	sbcs	r4, r4
    6d96:	4264      	negs	r4, r4
    6d98:	1b0c      	subs	r4, r1, r4
    6d9a:	0223      	lsls	r3, r4, #8
    6d9c:	d400      	bmi.n	6da0 <__aeabi_dsub+0xb8>
    6d9e:	e0c5      	b.n	6f2c <__aeabi_dsub+0x244>
    6da0:	0264      	lsls	r4, r4, #9
    6da2:	0a65      	lsrs	r5, r4, #9
    6da4:	2d00      	cmp	r5, #0
    6da6:	d100      	bne.n	6daa <__aeabi_dsub+0xc2>
    6da8:	e0f6      	b.n	6f98 <__aeabi_dsub+0x2b0>
    6daa:	0028      	movs	r0, r5
    6dac:	f000 fb66 	bl	747c <__clzsi2>
    6db0:	0003      	movs	r3, r0
    6db2:	3b08      	subs	r3, #8
    6db4:	2b1f      	cmp	r3, #31
    6db6:	dd00      	ble.n	6dba <__aeabi_dsub+0xd2>
    6db8:	e0e9      	b.n	6f8e <__aeabi_dsub+0x2a6>
    6dba:	2220      	movs	r2, #32
    6dbc:	003c      	movs	r4, r7
    6dbe:	1ad2      	subs	r2, r2, r3
    6dc0:	409d      	lsls	r5, r3
    6dc2:	40d4      	lsrs	r4, r2
    6dc4:	409f      	lsls	r7, r3
    6dc6:	4325      	orrs	r5, r4
    6dc8:	429e      	cmp	r6, r3
    6dca:	dd00      	ble.n	6dce <__aeabi_dsub+0xe6>
    6dcc:	e0db      	b.n	6f86 <__aeabi_dsub+0x29e>
    6dce:	1b9e      	subs	r6, r3, r6
    6dd0:	1c73      	adds	r3, r6, #1
    6dd2:	2b1f      	cmp	r3, #31
    6dd4:	dd00      	ble.n	6dd8 <__aeabi_dsub+0xf0>
    6dd6:	e10a      	b.n	6fee <__aeabi_dsub+0x306>
    6dd8:	2220      	movs	r2, #32
    6dda:	0038      	movs	r0, r7
    6ddc:	1ad2      	subs	r2, r2, r3
    6dde:	0029      	movs	r1, r5
    6de0:	4097      	lsls	r7, r2
    6de2:	002c      	movs	r4, r5
    6de4:	4091      	lsls	r1, r2
    6de6:	40d8      	lsrs	r0, r3
    6de8:	1e7a      	subs	r2, r7, #1
    6dea:	4197      	sbcs	r7, r2
    6dec:	40dc      	lsrs	r4, r3
    6dee:	2600      	movs	r6, #0
    6df0:	4301      	orrs	r1, r0
    6df2:	430f      	orrs	r7, r1
    6df4:	077b      	lsls	r3, r7, #29
    6df6:	d009      	beq.n	6e0c <__aeabi_dsub+0x124>
    6df8:	230f      	movs	r3, #15
    6dfa:	403b      	ands	r3, r7
    6dfc:	2b04      	cmp	r3, #4
    6dfe:	d005      	beq.n	6e0c <__aeabi_dsub+0x124>
    6e00:	1d3b      	adds	r3, r7, #4
    6e02:	42bb      	cmp	r3, r7
    6e04:	41bf      	sbcs	r7, r7
    6e06:	427f      	negs	r7, r7
    6e08:	19e4      	adds	r4, r4, r7
    6e0a:	001f      	movs	r7, r3
    6e0c:	0223      	lsls	r3, r4, #8
    6e0e:	d525      	bpl.n	6e5c <__aeabi_dsub+0x174>
    6e10:	4b86      	ldr	r3, [pc, #536]	; (702c <__aeabi_dsub+0x344>)
    6e12:	3601      	adds	r6, #1
    6e14:	429e      	cmp	r6, r3
    6e16:	d100      	bne.n	6e1a <__aeabi_dsub+0x132>
    6e18:	e0af      	b.n	6f7a <__aeabi_dsub+0x292>
    6e1a:	4b85      	ldr	r3, [pc, #532]	; (7030 <__aeabi_dsub+0x348>)
    6e1c:	2501      	movs	r5, #1
    6e1e:	401c      	ands	r4, r3
    6e20:	4643      	mov	r3, r8
    6e22:	0762      	lsls	r2, r4, #29
    6e24:	08ff      	lsrs	r7, r7, #3
    6e26:	0264      	lsls	r4, r4, #9
    6e28:	0576      	lsls	r6, r6, #21
    6e2a:	4317      	orrs	r7, r2
    6e2c:	0b24      	lsrs	r4, r4, #12
    6e2e:	0d76      	lsrs	r6, r6, #21
    6e30:	401d      	ands	r5, r3
    6e32:	2100      	movs	r1, #0
    6e34:	0324      	lsls	r4, r4, #12
    6e36:	0b23      	lsrs	r3, r4, #12
    6e38:	0d0c      	lsrs	r4, r1, #20
    6e3a:	4a7e      	ldr	r2, [pc, #504]	; (7034 <__aeabi_dsub+0x34c>)
    6e3c:	0524      	lsls	r4, r4, #20
    6e3e:	431c      	orrs	r4, r3
    6e40:	4014      	ands	r4, r2
    6e42:	0533      	lsls	r3, r6, #20
    6e44:	4323      	orrs	r3, r4
    6e46:	005b      	lsls	r3, r3, #1
    6e48:	07ed      	lsls	r5, r5, #31
    6e4a:	085b      	lsrs	r3, r3, #1
    6e4c:	432b      	orrs	r3, r5
    6e4e:	0038      	movs	r0, r7
    6e50:	0019      	movs	r1, r3
    6e52:	bc1c      	pop	{r2, r3, r4}
    6e54:	4690      	mov	r8, r2
    6e56:	4699      	mov	r9, r3
    6e58:	46a2      	mov	sl, r4
    6e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e5c:	2501      	movs	r5, #1
    6e5e:	4643      	mov	r3, r8
    6e60:	0762      	lsls	r2, r4, #29
    6e62:	08ff      	lsrs	r7, r7, #3
    6e64:	4317      	orrs	r7, r2
    6e66:	08e4      	lsrs	r4, r4, #3
    6e68:	401d      	ands	r5, r3
    6e6a:	4b70      	ldr	r3, [pc, #448]	; (702c <__aeabi_dsub+0x344>)
    6e6c:	429e      	cmp	r6, r3
    6e6e:	d036      	beq.n	6ede <__aeabi_dsub+0x1f6>
    6e70:	0324      	lsls	r4, r4, #12
    6e72:	0576      	lsls	r6, r6, #21
    6e74:	0b24      	lsrs	r4, r4, #12
    6e76:	0d76      	lsrs	r6, r6, #21
    6e78:	e7db      	b.n	6e32 <__aeabi_dsub+0x14a>
    6e7a:	4663      	mov	r3, ip
    6e7c:	1af3      	subs	r3, r6, r3
    6e7e:	2b00      	cmp	r3, #0
    6e80:	dc00      	bgt.n	6e84 <__aeabi_dsub+0x19c>
    6e82:	e094      	b.n	6fae <__aeabi_dsub+0x2c6>
    6e84:	4660      	mov	r0, ip
    6e86:	2800      	cmp	r0, #0
    6e88:	d035      	beq.n	6ef6 <__aeabi_dsub+0x20e>
    6e8a:	4868      	ldr	r0, [pc, #416]	; (702c <__aeabi_dsub+0x344>)
    6e8c:	4286      	cmp	r6, r0
    6e8e:	d0b1      	beq.n	6df4 <__aeabi_dsub+0x10c>
    6e90:	2780      	movs	r7, #128	; 0x80
    6e92:	043f      	lsls	r7, r7, #16
    6e94:	4339      	orrs	r1, r7
    6e96:	2b38      	cmp	r3, #56	; 0x38
    6e98:	dc00      	bgt.n	6e9c <__aeabi_dsub+0x1b4>
    6e9a:	e0fd      	b.n	7098 <__aeabi_dsub+0x3b0>
    6e9c:	430a      	orrs	r2, r1
    6e9e:	0017      	movs	r7, r2
    6ea0:	2100      	movs	r1, #0
    6ea2:	1e7a      	subs	r2, r7, #1
    6ea4:	4197      	sbcs	r7, r2
    6ea6:	4457      	add	r7, sl
    6ea8:	4557      	cmp	r7, sl
    6eaa:	4180      	sbcs	r0, r0
    6eac:	1909      	adds	r1, r1, r4
    6eae:	4244      	negs	r4, r0
    6eb0:	190c      	adds	r4, r1, r4
    6eb2:	0223      	lsls	r3, r4, #8
    6eb4:	d53a      	bpl.n	6f2c <__aeabi_dsub+0x244>
    6eb6:	4b5d      	ldr	r3, [pc, #372]	; (702c <__aeabi_dsub+0x344>)
    6eb8:	3601      	adds	r6, #1
    6eba:	429e      	cmp	r6, r3
    6ebc:	d100      	bne.n	6ec0 <__aeabi_dsub+0x1d8>
    6ebe:	e14b      	b.n	7158 <__aeabi_dsub+0x470>
    6ec0:	2201      	movs	r2, #1
    6ec2:	4b5b      	ldr	r3, [pc, #364]	; (7030 <__aeabi_dsub+0x348>)
    6ec4:	401c      	ands	r4, r3
    6ec6:	087b      	lsrs	r3, r7, #1
    6ec8:	4017      	ands	r7, r2
    6eca:	431f      	orrs	r7, r3
    6ecc:	07e2      	lsls	r2, r4, #31
    6ece:	4317      	orrs	r7, r2
    6ed0:	0864      	lsrs	r4, r4, #1
    6ed2:	e78f      	b.n	6df4 <__aeabi_dsub+0x10c>
    6ed4:	0008      	movs	r0, r1
    6ed6:	4310      	orrs	r0, r2
    6ed8:	d000      	beq.n	6edc <__aeabi_dsub+0x1f4>
    6eda:	e724      	b.n	6d26 <__aeabi_dsub+0x3e>
    6edc:	e721      	b.n	6d22 <__aeabi_dsub+0x3a>
    6ede:	0023      	movs	r3, r4
    6ee0:	433b      	orrs	r3, r7
    6ee2:	d100      	bne.n	6ee6 <__aeabi_dsub+0x1fe>
    6ee4:	e1b9      	b.n	725a <__aeabi_dsub+0x572>
    6ee6:	2280      	movs	r2, #128	; 0x80
    6ee8:	0312      	lsls	r2, r2, #12
    6eea:	4314      	orrs	r4, r2
    6eec:	0324      	lsls	r4, r4, #12
    6eee:	0b24      	lsrs	r4, r4, #12
    6ef0:	e79f      	b.n	6e32 <__aeabi_dsub+0x14a>
    6ef2:	002e      	movs	r6, r5
    6ef4:	e77e      	b.n	6df4 <__aeabi_dsub+0x10c>
    6ef6:	0008      	movs	r0, r1
    6ef8:	4310      	orrs	r0, r2
    6efa:	d100      	bne.n	6efe <__aeabi_dsub+0x216>
    6efc:	e0ca      	b.n	7094 <__aeabi_dsub+0x3ac>
    6efe:	1e58      	subs	r0, r3, #1
    6f00:	4684      	mov	ip, r0
    6f02:	2800      	cmp	r0, #0
    6f04:	d000      	beq.n	6f08 <__aeabi_dsub+0x220>
    6f06:	e0e7      	b.n	70d8 <__aeabi_dsub+0x3f0>
    6f08:	4452      	add	r2, sl
    6f0a:	4552      	cmp	r2, sl
    6f0c:	4180      	sbcs	r0, r0
    6f0e:	1864      	adds	r4, r4, r1
    6f10:	4240      	negs	r0, r0
    6f12:	1824      	adds	r4, r4, r0
    6f14:	0017      	movs	r7, r2
    6f16:	2601      	movs	r6, #1
    6f18:	0223      	lsls	r3, r4, #8
    6f1a:	d507      	bpl.n	6f2c <__aeabi_dsub+0x244>
    6f1c:	2602      	movs	r6, #2
    6f1e:	e7cf      	b.n	6ec0 <__aeabi_dsub+0x1d8>
    6f20:	4664      	mov	r4, ip
    6f22:	432c      	orrs	r4, r5
    6f24:	d100      	bne.n	6f28 <__aeabi_dsub+0x240>
    6f26:	e1b3      	b.n	7290 <__aeabi_dsub+0x5a8>
    6f28:	002c      	movs	r4, r5
    6f2a:	4667      	mov	r7, ip
    6f2c:	077b      	lsls	r3, r7, #29
    6f2e:	d000      	beq.n	6f32 <__aeabi_dsub+0x24a>
    6f30:	e762      	b.n	6df8 <__aeabi_dsub+0x110>
    6f32:	0763      	lsls	r3, r4, #29
    6f34:	08ff      	lsrs	r7, r7, #3
    6f36:	431f      	orrs	r7, r3
    6f38:	2501      	movs	r5, #1
    6f3a:	4643      	mov	r3, r8
    6f3c:	08e4      	lsrs	r4, r4, #3
    6f3e:	401d      	ands	r5, r3
    6f40:	e793      	b.n	6e6a <__aeabi_dsub+0x182>
    6f42:	2d00      	cmp	r5, #0
    6f44:	d178      	bne.n	7038 <__aeabi_dsub+0x350>
    6f46:	1c75      	adds	r5, r6, #1
    6f48:	056d      	lsls	r5, r5, #21
    6f4a:	0d6d      	lsrs	r5, r5, #21
    6f4c:	2d01      	cmp	r5, #1
    6f4e:	dc00      	bgt.n	6f52 <__aeabi_dsub+0x26a>
    6f50:	e0f2      	b.n	7138 <__aeabi_dsub+0x450>
    6f52:	4650      	mov	r0, sl
    6f54:	1a80      	subs	r0, r0, r2
    6f56:	4582      	cmp	sl, r0
    6f58:	41bf      	sbcs	r7, r7
    6f5a:	1a65      	subs	r5, r4, r1
    6f5c:	427f      	negs	r7, r7
    6f5e:	1bed      	subs	r5, r5, r7
    6f60:	4684      	mov	ip, r0
    6f62:	0228      	lsls	r0, r5, #8
    6f64:	d400      	bmi.n	6f68 <__aeabi_dsub+0x280>
    6f66:	e08c      	b.n	7082 <__aeabi_dsub+0x39a>
    6f68:	4650      	mov	r0, sl
    6f6a:	1a17      	subs	r7, r2, r0
    6f6c:	42ba      	cmp	r2, r7
    6f6e:	4192      	sbcs	r2, r2
    6f70:	1b0c      	subs	r4, r1, r4
    6f72:	4255      	negs	r5, r2
    6f74:	1b65      	subs	r5, r4, r5
    6f76:	4698      	mov	r8, r3
    6f78:	e714      	b.n	6da4 <__aeabi_dsub+0xbc>
    6f7a:	2501      	movs	r5, #1
    6f7c:	4643      	mov	r3, r8
    6f7e:	2400      	movs	r4, #0
    6f80:	401d      	ands	r5, r3
    6f82:	2700      	movs	r7, #0
    6f84:	e755      	b.n	6e32 <__aeabi_dsub+0x14a>
    6f86:	4c2a      	ldr	r4, [pc, #168]	; (7030 <__aeabi_dsub+0x348>)
    6f88:	1af6      	subs	r6, r6, r3
    6f8a:	402c      	ands	r4, r5
    6f8c:	e732      	b.n	6df4 <__aeabi_dsub+0x10c>
    6f8e:	003d      	movs	r5, r7
    6f90:	3828      	subs	r0, #40	; 0x28
    6f92:	4085      	lsls	r5, r0
    6f94:	2700      	movs	r7, #0
    6f96:	e717      	b.n	6dc8 <__aeabi_dsub+0xe0>
    6f98:	0038      	movs	r0, r7
    6f9a:	f000 fa6f 	bl	747c <__clzsi2>
    6f9e:	3020      	adds	r0, #32
    6fa0:	e706      	b.n	6db0 <__aeabi_dsub+0xc8>
    6fa2:	430a      	orrs	r2, r1
    6fa4:	0017      	movs	r7, r2
    6fa6:	2100      	movs	r1, #0
    6fa8:	1e7a      	subs	r2, r7, #1
    6faa:	4197      	sbcs	r7, r2
    6fac:	e6ee      	b.n	6d8c <__aeabi_dsub+0xa4>
    6fae:	2b00      	cmp	r3, #0
    6fb0:	d000      	beq.n	6fb4 <__aeabi_dsub+0x2cc>
    6fb2:	e0e5      	b.n	7180 <__aeabi_dsub+0x498>
    6fb4:	1c73      	adds	r3, r6, #1
    6fb6:	469c      	mov	ip, r3
    6fb8:	055b      	lsls	r3, r3, #21
    6fba:	0d5b      	lsrs	r3, r3, #21
    6fbc:	2b01      	cmp	r3, #1
    6fbe:	dc00      	bgt.n	6fc2 <__aeabi_dsub+0x2da>
    6fc0:	e09f      	b.n	7102 <__aeabi_dsub+0x41a>
    6fc2:	4b1a      	ldr	r3, [pc, #104]	; (702c <__aeabi_dsub+0x344>)
    6fc4:	459c      	cmp	ip, r3
    6fc6:	d100      	bne.n	6fca <__aeabi_dsub+0x2e2>
    6fc8:	e0c5      	b.n	7156 <__aeabi_dsub+0x46e>
    6fca:	4452      	add	r2, sl
    6fcc:	4552      	cmp	r2, sl
    6fce:	4180      	sbcs	r0, r0
    6fd0:	1864      	adds	r4, r4, r1
    6fd2:	4240      	negs	r0, r0
    6fd4:	1824      	adds	r4, r4, r0
    6fd6:	07e7      	lsls	r7, r4, #31
    6fd8:	0852      	lsrs	r2, r2, #1
    6fda:	4317      	orrs	r7, r2
    6fdc:	0864      	lsrs	r4, r4, #1
    6fde:	4666      	mov	r6, ip
    6fe0:	e708      	b.n	6df4 <__aeabi_dsub+0x10c>
    6fe2:	4812      	ldr	r0, [pc, #72]	; (702c <__aeabi_dsub+0x344>)
    6fe4:	4285      	cmp	r5, r0
    6fe6:	d100      	bne.n	6fea <__aeabi_dsub+0x302>
    6fe8:	e085      	b.n	70f6 <__aeabi_dsub+0x40e>
    6fea:	001d      	movs	r5, r3
    6fec:	e6bc      	b.n	6d68 <__aeabi_dsub+0x80>
    6fee:	0029      	movs	r1, r5
    6ff0:	3e1f      	subs	r6, #31
    6ff2:	40f1      	lsrs	r1, r6
    6ff4:	2b20      	cmp	r3, #32
    6ff6:	d100      	bne.n	6ffa <__aeabi_dsub+0x312>
    6ff8:	e07f      	b.n	70fa <__aeabi_dsub+0x412>
    6ffa:	2240      	movs	r2, #64	; 0x40
    6ffc:	1ad3      	subs	r3, r2, r3
    6ffe:	409d      	lsls	r5, r3
    7000:	432f      	orrs	r7, r5
    7002:	1e7d      	subs	r5, r7, #1
    7004:	41af      	sbcs	r7, r5
    7006:	2400      	movs	r4, #0
    7008:	430f      	orrs	r7, r1
    700a:	2600      	movs	r6, #0
    700c:	e78e      	b.n	6f2c <__aeabi_dsub+0x244>
    700e:	002b      	movs	r3, r5
    7010:	000f      	movs	r7, r1
    7012:	3b20      	subs	r3, #32
    7014:	40df      	lsrs	r7, r3
    7016:	2d20      	cmp	r5, #32
    7018:	d071      	beq.n	70fe <__aeabi_dsub+0x416>
    701a:	2340      	movs	r3, #64	; 0x40
    701c:	1b5d      	subs	r5, r3, r5
    701e:	40a9      	lsls	r1, r5
    7020:	430a      	orrs	r2, r1
    7022:	1e51      	subs	r1, r2, #1
    7024:	418a      	sbcs	r2, r1
    7026:	2100      	movs	r1, #0
    7028:	4317      	orrs	r7, r2
    702a:	e6af      	b.n	6d8c <__aeabi_dsub+0xa4>
    702c:	000007ff 	.word	0x000007ff
    7030:	ff7fffff 	.word	0xff7fffff
    7034:	800fffff 	.word	0x800fffff
    7038:	2e00      	cmp	r6, #0
    703a:	d03e      	beq.n	70ba <__aeabi_dsub+0x3d2>
    703c:	4eb3      	ldr	r6, [pc, #716]	; (730c <__aeabi_dsub+0x624>)
    703e:	45b4      	cmp	ip, r6
    7040:	d045      	beq.n	70ce <__aeabi_dsub+0x3e6>
    7042:	2680      	movs	r6, #128	; 0x80
    7044:	0436      	lsls	r6, r6, #16
    7046:	426d      	negs	r5, r5
    7048:	4334      	orrs	r4, r6
    704a:	2d38      	cmp	r5, #56	; 0x38
    704c:	dd00      	ble.n	7050 <__aeabi_dsub+0x368>
    704e:	e0a8      	b.n	71a2 <__aeabi_dsub+0x4ba>
    7050:	2d1f      	cmp	r5, #31
    7052:	dd00      	ble.n	7056 <__aeabi_dsub+0x36e>
    7054:	e11f      	b.n	7296 <__aeabi_dsub+0x5ae>
    7056:	2620      	movs	r6, #32
    7058:	0027      	movs	r7, r4
    705a:	4650      	mov	r0, sl
    705c:	1b76      	subs	r6, r6, r5
    705e:	40b7      	lsls	r7, r6
    7060:	40e8      	lsrs	r0, r5
    7062:	4307      	orrs	r7, r0
    7064:	4650      	mov	r0, sl
    7066:	40b0      	lsls	r0, r6
    7068:	1e46      	subs	r6, r0, #1
    706a:	41b0      	sbcs	r0, r6
    706c:	40ec      	lsrs	r4, r5
    706e:	4338      	orrs	r0, r7
    7070:	1a17      	subs	r7, r2, r0
    7072:	42ba      	cmp	r2, r7
    7074:	4192      	sbcs	r2, r2
    7076:	1b0c      	subs	r4, r1, r4
    7078:	4252      	negs	r2, r2
    707a:	1aa4      	subs	r4, r4, r2
    707c:	4666      	mov	r6, ip
    707e:	4698      	mov	r8, r3
    7080:	e68b      	b.n	6d9a <__aeabi_dsub+0xb2>
    7082:	4664      	mov	r4, ip
    7084:	4667      	mov	r7, ip
    7086:	432c      	orrs	r4, r5
    7088:	d000      	beq.n	708c <__aeabi_dsub+0x3a4>
    708a:	e68b      	b.n	6da4 <__aeabi_dsub+0xbc>
    708c:	2500      	movs	r5, #0
    708e:	2600      	movs	r6, #0
    7090:	2700      	movs	r7, #0
    7092:	e6ea      	b.n	6e6a <__aeabi_dsub+0x182>
    7094:	001e      	movs	r6, r3
    7096:	e6ad      	b.n	6df4 <__aeabi_dsub+0x10c>
    7098:	2b1f      	cmp	r3, #31
    709a:	dc60      	bgt.n	715e <__aeabi_dsub+0x476>
    709c:	2720      	movs	r7, #32
    709e:	1af8      	subs	r0, r7, r3
    70a0:	000f      	movs	r7, r1
    70a2:	4684      	mov	ip, r0
    70a4:	4087      	lsls	r7, r0
    70a6:	0010      	movs	r0, r2
    70a8:	40d8      	lsrs	r0, r3
    70aa:	4307      	orrs	r7, r0
    70ac:	4660      	mov	r0, ip
    70ae:	4082      	lsls	r2, r0
    70b0:	1e50      	subs	r0, r2, #1
    70b2:	4182      	sbcs	r2, r0
    70b4:	40d9      	lsrs	r1, r3
    70b6:	4317      	orrs	r7, r2
    70b8:	e6f5      	b.n	6ea6 <__aeabi_dsub+0x1be>
    70ba:	0026      	movs	r6, r4
    70bc:	4650      	mov	r0, sl
    70be:	4306      	orrs	r6, r0
    70c0:	d005      	beq.n	70ce <__aeabi_dsub+0x3e6>
    70c2:	43ed      	mvns	r5, r5
    70c4:	2d00      	cmp	r5, #0
    70c6:	d0d3      	beq.n	7070 <__aeabi_dsub+0x388>
    70c8:	4e90      	ldr	r6, [pc, #576]	; (730c <__aeabi_dsub+0x624>)
    70ca:	45b4      	cmp	ip, r6
    70cc:	d1bd      	bne.n	704a <__aeabi_dsub+0x362>
    70ce:	000c      	movs	r4, r1
    70d0:	0017      	movs	r7, r2
    70d2:	4666      	mov	r6, ip
    70d4:	4698      	mov	r8, r3
    70d6:	e68d      	b.n	6df4 <__aeabi_dsub+0x10c>
    70d8:	488c      	ldr	r0, [pc, #560]	; (730c <__aeabi_dsub+0x624>)
    70da:	4283      	cmp	r3, r0
    70dc:	d00b      	beq.n	70f6 <__aeabi_dsub+0x40e>
    70de:	4663      	mov	r3, ip
    70e0:	e6d9      	b.n	6e96 <__aeabi_dsub+0x1ae>
    70e2:	2d00      	cmp	r5, #0
    70e4:	d000      	beq.n	70e8 <__aeabi_dsub+0x400>
    70e6:	e096      	b.n	7216 <__aeabi_dsub+0x52e>
    70e8:	0008      	movs	r0, r1
    70ea:	4310      	orrs	r0, r2
    70ec:	d100      	bne.n	70f0 <__aeabi_dsub+0x408>
    70ee:	e0e2      	b.n	72b6 <__aeabi_dsub+0x5ce>
    70f0:	000c      	movs	r4, r1
    70f2:	0017      	movs	r7, r2
    70f4:	4698      	mov	r8, r3
    70f6:	4e85      	ldr	r6, [pc, #532]	; (730c <__aeabi_dsub+0x624>)
    70f8:	e67c      	b.n	6df4 <__aeabi_dsub+0x10c>
    70fa:	2500      	movs	r5, #0
    70fc:	e780      	b.n	7000 <__aeabi_dsub+0x318>
    70fe:	2100      	movs	r1, #0
    7100:	e78e      	b.n	7020 <__aeabi_dsub+0x338>
    7102:	0023      	movs	r3, r4
    7104:	4650      	mov	r0, sl
    7106:	4303      	orrs	r3, r0
    7108:	2e00      	cmp	r6, #0
    710a:	d000      	beq.n	710e <__aeabi_dsub+0x426>
    710c:	e0a8      	b.n	7260 <__aeabi_dsub+0x578>
    710e:	2b00      	cmp	r3, #0
    7110:	d100      	bne.n	7114 <__aeabi_dsub+0x42c>
    7112:	e0de      	b.n	72d2 <__aeabi_dsub+0x5ea>
    7114:	000b      	movs	r3, r1
    7116:	4313      	orrs	r3, r2
    7118:	d100      	bne.n	711c <__aeabi_dsub+0x434>
    711a:	e66b      	b.n	6df4 <__aeabi_dsub+0x10c>
    711c:	4452      	add	r2, sl
    711e:	4552      	cmp	r2, sl
    7120:	4180      	sbcs	r0, r0
    7122:	1864      	adds	r4, r4, r1
    7124:	4240      	negs	r0, r0
    7126:	1824      	adds	r4, r4, r0
    7128:	0017      	movs	r7, r2
    712a:	0223      	lsls	r3, r4, #8
    712c:	d400      	bmi.n	7130 <__aeabi_dsub+0x448>
    712e:	e6fd      	b.n	6f2c <__aeabi_dsub+0x244>
    7130:	4b77      	ldr	r3, [pc, #476]	; (7310 <__aeabi_dsub+0x628>)
    7132:	4666      	mov	r6, ip
    7134:	401c      	ands	r4, r3
    7136:	e65d      	b.n	6df4 <__aeabi_dsub+0x10c>
    7138:	0025      	movs	r5, r4
    713a:	4650      	mov	r0, sl
    713c:	4305      	orrs	r5, r0
    713e:	2e00      	cmp	r6, #0
    7140:	d1cf      	bne.n	70e2 <__aeabi_dsub+0x3fa>
    7142:	2d00      	cmp	r5, #0
    7144:	d14f      	bne.n	71e6 <__aeabi_dsub+0x4fe>
    7146:	000c      	movs	r4, r1
    7148:	4314      	orrs	r4, r2
    714a:	d100      	bne.n	714e <__aeabi_dsub+0x466>
    714c:	e0a0      	b.n	7290 <__aeabi_dsub+0x5a8>
    714e:	000c      	movs	r4, r1
    7150:	0017      	movs	r7, r2
    7152:	4698      	mov	r8, r3
    7154:	e64e      	b.n	6df4 <__aeabi_dsub+0x10c>
    7156:	4666      	mov	r6, ip
    7158:	2400      	movs	r4, #0
    715a:	2700      	movs	r7, #0
    715c:	e685      	b.n	6e6a <__aeabi_dsub+0x182>
    715e:	001f      	movs	r7, r3
    7160:	0008      	movs	r0, r1
    7162:	3f20      	subs	r7, #32
    7164:	40f8      	lsrs	r0, r7
    7166:	0007      	movs	r7, r0
    7168:	2b20      	cmp	r3, #32
    716a:	d100      	bne.n	716e <__aeabi_dsub+0x486>
    716c:	e08e      	b.n	728c <__aeabi_dsub+0x5a4>
    716e:	2040      	movs	r0, #64	; 0x40
    7170:	1ac3      	subs	r3, r0, r3
    7172:	4099      	lsls	r1, r3
    7174:	430a      	orrs	r2, r1
    7176:	1e51      	subs	r1, r2, #1
    7178:	418a      	sbcs	r2, r1
    717a:	2100      	movs	r1, #0
    717c:	4317      	orrs	r7, r2
    717e:	e692      	b.n	6ea6 <__aeabi_dsub+0x1be>
    7180:	2e00      	cmp	r6, #0
    7182:	d114      	bne.n	71ae <__aeabi_dsub+0x4c6>
    7184:	0026      	movs	r6, r4
    7186:	4650      	mov	r0, sl
    7188:	4306      	orrs	r6, r0
    718a:	d062      	beq.n	7252 <__aeabi_dsub+0x56a>
    718c:	43db      	mvns	r3, r3
    718e:	2b00      	cmp	r3, #0
    7190:	d15c      	bne.n	724c <__aeabi_dsub+0x564>
    7192:	1887      	adds	r7, r0, r2
    7194:	4297      	cmp	r7, r2
    7196:	4192      	sbcs	r2, r2
    7198:	1864      	adds	r4, r4, r1
    719a:	4252      	negs	r2, r2
    719c:	18a4      	adds	r4, r4, r2
    719e:	4666      	mov	r6, ip
    71a0:	e687      	b.n	6eb2 <__aeabi_dsub+0x1ca>
    71a2:	4650      	mov	r0, sl
    71a4:	4320      	orrs	r0, r4
    71a6:	1e44      	subs	r4, r0, #1
    71a8:	41a0      	sbcs	r0, r4
    71aa:	2400      	movs	r4, #0
    71ac:	e760      	b.n	7070 <__aeabi_dsub+0x388>
    71ae:	4e57      	ldr	r6, [pc, #348]	; (730c <__aeabi_dsub+0x624>)
    71b0:	45b4      	cmp	ip, r6
    71b2:	d04e      	beq.n	7252 <__aeabi_dsub+0x56a>
    71b4:	2680      	movs	r6, #128	; 0x80
    71b6:	0436      	lsls	r6, r6, #16
    71b8:	425b      	negs	r3, r3
    71ba:	4334      	orrs	r4, r6
    71bc:	2b38      	cmp	r3, #56	; 0x38
    71be:	dd00      	ble.n	71c2 <__aeabi_dsub+0x4da>
    71c0:	e07f      	b.n	72c2 <__aeabi_dsub+0x5da>
    71c2:	2b1f      	cmp	r3, #31
    71c4:	dd00      	ble.n	71c8 <__aeabi_dsub+0x4e0>
    71c6:	e08b      	b.n	72e0 <__aeabi_dsub+0x5f8>
    71c8:	2620      	movs	r6, #32
    71ca:	0027      	movs	r7, r4
    71cc:	4650      	mov	r0, sl
    71ce:	1af6      	subs	r6, r6, r3
    71d0:	40b7      	lsls	r7, r6
    71d2:	40d8      	lsrs	r0, r3
    71d4:	4307      	orrs	r7, r0
    71d6:	4650      	mov	r0, sl
    71d8:	40b0      	lsls	r0, r6
    71da:	1e46      	subs	r6, r0, #1
    71dc:	41b0      	sbcs	r0, r6
    71de:	4307      	orrs	r7, r0
    71e0:	40dc      	lsrs	r4, r3
    71e2:	18bf      	adds	r7, r7, r2
    71e4:	e7d6      	b.n	7194 <__aeabi_dsub+0x4ac>
    71e6:	000d      	movs	r5, r1
    71e8:	4315      	orrs	r5, r2
    71ea:	d100      	bne.n	71ee <__aeabi_dsub+0x506>
    71ec:	e602      	b.n	6df4 <__aeabi_dsub+0x10c>
    71ee:	4650      	mov	r0, sl
    71f0:	1a80      	subs	r0, r0, r2
    71f2:	4582      	cmp	sl, r0
    71f4:	41bf      	sbcs	r7, r7
    71f6:	1a65      	subs	r5, r4, r1
    71f8:	427f      	negs	r7, r7
    71fa:	1bed      	subs	r5, r5, r7
    71fc:	4684      	mov	ip, r0
    71fe:	0228      	lsls	r0, r5, #8
    7200:	d400      	bmi.n	7204 <__aeabi_dsub+0x51c>
    7202:	e68d      	b.n	6f20 <__aeabi_dsub+0x238>
    7204:	4650      	mov	r0, sl
    7206:	1a17      	subs	r7, r2, r0
    7208:	42ba      	cmp	r2, r7
    720a:	4192      	sbcs	r2, r2
    720c:	1b0c      	subs	r4, r1, r4
    720e:	4252      	negs	r2, r2
    7210:	1aa4      	subs	r4, r4, r2
    7212:	4698      	mov	r8, r3
    7214:	e5ee      	b.n	6df4 <__aeabi_dsub+0x10c>
    7216:	000d      	movs	r5, r1
    7218:	4315      	orrs	r5, r2
    721a:	d100      	bne.n	721e <__aeabi_dsub+0x536>
    721c:	e76b      	b.n	70f6 <__aeabi_dsub+0x40e>
    721e:	4650      	mov	r0, sl
    7220:	0767      	lsls	r7, r4, #29
    7222:	08c0      	lsrs	r0, r0, #3
    7224:	4307      	orrs	r7, r0
    7226:	2080      	movs	r0, #128	; 0x80
    7228:	08e4      	lsrs	r4, r4, #3
    722a:	0300      	lsls	r0, r0, #12
    722c:	4204      	tst	r4, r0
    722e:	d007      	beq.n	7240 <__aeabi_dsub+0x558>
    7230:	08cd      	lsrs	r5, r1, #3
    7232:	4205      	tst	r5, r0
    7234:	d104      	bne.n	7240 <__aeabi_dsub+0x558>
    7236:	002c      	movs	r4, r5
    7238:	4698      	mov	r8, r3
    723a:	08d7      	lsrs	r7, r2, #3
    723c:	0749      	lsls	r1, r1, #29
    723e:	430f      	orrs	r7, r1
    7240:	0f7b      	lsrs	r3, r7, #29
    7242:	00e4      	lsls	r4, r4, #3
    7244:	431c      	orrs	r4, r3
    7246:	00ff      	lsls	r7, r7, #3
    7248:	4e30      	ldr	r6, [pc, #192]	; (730c <__aeabi_dsub+0x624>)
    724a:	e5d3      	b.n	6df4 <__aeabi_dsub+0x10c>
    724c:	4e2f      	ldr	r6, [pc, #188]	; (730c <__aeabi_dsub+0x624>)
    724e:	45b4      	cmp	ip, r6
    7250:	d1b4      	bne.n	71bc <__aeabi_dsub+0x4d4>
    7252:	000c      	movs	r4, r1
    7254:	0017      	movs	r7, r2
    7256:	4666      	mov	r6, ip
    7258:	e5cc      	b.n	6df4 <__aeabi_dsub+0x10c>
    725a:	2700      	movs	r7, #0
    725c:	2400      	movs	r4, #0
    725e:	e5e8      	b.n	6e32 <__aeabi_dsub+0x14a>
    7260:	2b00      	cmp	r3, #0
    7262:	d039      	beq.n	72d8 <__aeabi_dsub+0x5f0>
    7264:	000b      	movs	r3, r1
    7266:	4313      	orrs	r3, r2
    7268:	d100      	bne.n	726c <__aeabi_dsub+0x584>
    726a:	e744      	b.n	70f6 <__aeabi_dsub+0x40e>
    726c:	08c0      	lsrs	r0, r0, #3
    726e:	0767      	lsls	r7, r4, #29
    7270:	4307      	orrs	r7, r0
    7272:	2080      	movs	r0, #128	; 0x80
    7274:	08e4      	lsrs	r4, r4, #3
    7276:	0300      	lsls	r0, r0, #12
    7278:	4204      	tst	r4, r0
    727a:	d0e1      	beq.n	7240 <__aeabi_dsub+0x558>
    727c:	08cb      	lsrs	r3, r1, #3
    727e:	4203      	tst	r3, r0
    7280:	d1de      	bne.n	7240 <__aeabi_dsub+0x558>
    7282:	08d7      	lsrs	r7, r2, #3
    7284:	0749      	lsls	r1, r1, #29
    7286:	430f      	orrs	r7, r1
    7288:	001c      	movs	r4, r3
    728a:	e7d9      	b.n	7240 <__aeabi_dsub+0x558>
    728c:	2100      	movs	r1, #0
    728e:	e771      	b.n	7174 <__aeabi_dsub+0x48c>
    7290:	2500      	movs	r5, #0
    7292:	2700      	movs	r7, #0
    7294:	e5e9      	b.n	6e6a <__aeabi_dsub+0x182>
    7296:	002e      	movs	r6, r5
    7298:	0027      	movs	r7, r4
    729a:	3e20      	subs	r6, #32
    729c:	40f7      	lsrs	r7, r6
    729e:	2d20      	cmp	r5, #32
    72a0:	d02f      	beq.n	7302 <__aeabi_dsub+0x61a>
    72a2:	2640      	movs	r6, #64	; 0x40
    72a4:	1b75      	subs	r5, r6, r5
    72a6:	40ac      	lsls	r4, r5
    72a8:	4650      	mov	r0, sl
    72aa:	4320      	orrs	r0, r4
    72ac:	1e44      	subs	r4, r0, #1
    72ae:	41a0      	sbcs	r0, r4
    72b0:	2400      	movs	r4, #0
    72b2:	4338      	orrs	r0, r7
    72b4:	e6dc      	b.n	7070 <__aeabi_dsub+0x388>
    72b6:	2480      	movs	r4, #128	; 0x80
    72b8:	2500      	movs	r5, #0
    72ba:	0324      	lsls	r4, r4, #12
    72bc:	4e13      	ldr	r6, [pc, #76]	; (730c <__aeabi_dsub+0x624>)
    72be:	2700      	movs	r7, #0
    72c0:	e5d3      	b.n	6e6a <__aeabi_dsub+0x182>
    72c2:	4650      	mov	r0, sl
    72c4:	4320      	orrs	r0, r4
    72c6:	0007      	movs	r7, r0
    72c8:	1e78      	subs	r0, r7, #1
    72ca:	4187      	sbcs	r7, r0
    72cc:	2400      	movs	r4, #0
    72ce:	18bf      	adds	r7, r7, r2
    72d0:	e760      	b.n	7194 <__aeabi_dsub+0x4ac>
    72d2:	000c      	movs	r4, r1
    72d4:	0017      	movs	r7, r2
    72d6:	e58d      	b.n	6df4 <__aeabi_dsub+0x10c>
    72d8:	000c      	movs	r4, r1
    72da:	0017      	movs	r7, r2
    72dc:	4e0b      	ldr	r6, [pc, #44]	; (730c <__aeabi_dsub+0x624>)
    72de:	e589      	b.n	6df4 <__aeabi_dsub+0x10c>
    72e0:	001e      	movs	r6, r3
    72e2:	0027      	movs	r7, r4
    72e4:	3e20      	subs	r6, #32
    72e6:	40f7      	lsrs	r7, r6
    72e8:	2b20      	cmp	r3, #32
    72ea:	d00c      	beq.n	7306 <__aeabi_dsub+0x61e>
    72ec:	2640      	movs	r6, #64	; 0x40
    72ee:	1af3      	subs	r3, r6, r3
    72f0:	409c      	lsls	r4, r3
    72f2:	4650      	mov	r0, sl
    72f4:	4320      	orrs	r0, r4
    72f6:	1e44      	subs	r4, r0, #1
    72f8:	41a0      	sbcs	r0, r4
    72fa:	4307      	orrs	r7, r0
    72fc:	2400      	movs	r4, #0
    72fe:	18bf      	adds	r7, r7, r2
    7300:	e748      	b.n	7194 <__aeabi_dsub+0x4ac>
    7302:	2400      	movs	r4, #0
    7304:	e7d0      	b.n	72a8 <__aeabi_dsub+0x5c0>
    7306:	2400      	movs	r4, #0
    7308:	e7f3      	b.n	72f2 <__aeabi_dsub+0x60a>
    730a:	46c0      	nop			; (mov r8, r8)
    730c:	000007ff 	.word	0x000007ff
    7310:	ff7fffff 	.word	0xff7fffff

00007314 <__aeabi_d2iz>:
    7314:	b530      	push	{r4, r5, lr}
    7316:	4d13      	ldr	r5, [pc, #76]	; (7364 <__aeabi_d2iz+0x50>)
    7318:	030a      	lsls	r2, r1, #12
    731a:	004b      	lsls	r3, r1, #1
    731c:	0b12      	lsrs	r2, r2, #12
    731e:	0d5b      	lsrs	r3, r3, #21
    7320:	0fc9      	lsrs	r1, r1, #31
    7322:	2400      	movs	r4, #0
    7324:	42ab      	cmp	r3, r5
    7326:	dd10      	ble.n	734a <__aeabi_d2iz+0x36>
    7328:	4c0f      	ldr	r4, [pc, #60]	; (7368 <__aeabi_d2iz+0x54>)
    732a:	42a3      	cmp	r3, r4
    732c:	dc0f      	bgt.n	734e <__aeabi_d2iz+0x3a>
    732e:	2480      	movs	r4, #128	; 0x80
    7330:	4d0e      	ldr	r5, [pc, #56]	; (736c <__aeabi_d2iz+0x58>)
    7332:	0364      	lsls	r4, r4, #13
    7334:	4322      	orrs	r2, r4
    7336:	1aed      	subs	r5, r5, r3
    7338:	2d1f      	cmp	r5, #31
    733a:	dd0b      	ble.n	7354 <__aeabi_d2iz+0x40>
    733c:	480c      	ldr	r0, [pc, #48]	; (7370 <__aeabi_d2iz+0x5c>)
    733e:	1ac3      	subs	r3, r0, r3
    7340:	40da      	lsrs	r2, r3
    7342:	4254      	negs	r4, r2
    7344:	2900      	cmp	r1, #0
    7346:	d100      	bne.n	734a <__aeabi_d2iz+0x36>
    7348:	0014      	movs	r4, r2
    734a:	0020      	movs	r0, r4
    734c:	bd30      	pop	{r4, r5, pc}
    734e:	4b09      	ldr	r3, [pc, #36]	; (7374 <__aeabi_d2iz+0x60>)
    7350:	18cc      	adds	r4, r1, r3
    7352:	e7fa      	b.n	734a <__aeabi_d2iz+0x36>
    7354:	4c08      	ldr	r4, [pc, #32]	; (7378 <__aeabi_d2iz+0x64>)
    7356:	40e8      	lsrs	r0, r5
    7358:	46a4      	mov	ip, r4
    735a:	4463      	add	r3, ip
    735c:	409a      	lsls	r2, r3
    735e:	4302      	orrs	r2, r0
    7360:	e7ef      	b.n	7342 <__aeabi_d2iz+0x2e>
    7362:	46c0      	nop			; (mov r8, r8)
    7364:	000003fe 	.word	0x000003fe
    7368:	0000041d 	.word	0x0000041d
    736c:	00000433 	.word	0x00000433
    7370:	00000413 	.word	0x00000413
    7374:	7fffffff 	.word	0x7fffffff
    7378:	fffffbed 	.word	0xfffffbed

0000737c <__aeabi_i2d>:
    737c:	b570      	push	{r4, r5, r6, lr}
    737e:	2800      	cmp	r0, #0
    7380:	d030      	beq.n	73e4 <__aeabi_i2d+0x68>
    7382:	17c3      	asrs	r3, r0, #31
    7384:	18c4      	adds	r4, r0, r3
    7386:	405c      	eors	r4, r3
    7388:	0fc5      	lsrs	r5, r0, #31
    738a:	0020      	movs	r0, r4
    738c:	f000 f876 	bl	747c <__clzsi2>
    7390:	4b17      	ldr	r3, [pc, #92]	; (73f0 <__aeabi_i2d+0x74>)
    7392:	4a18      	ldr	r2, [pc, #96]	; (73f4 <__aeabi_i2d+0x78>)
    7394:	1a1b      	subs	r3, r3, r0
    7396:	1ad2      	subs	r2, r2, r3
    7398:	2a1f      	cmp	r2, #31
    739a:	dd18      	ble.n	73ce <__aeabi_i2d+0x52>
    739c:	4a16      	ldr	r2, [pc, #88]	; (73f8 <__aeabi_i2d+0x7c>)
    739e:	1ad2      	subs	r2, r2, r3
    73a0:	4094      	lsls	r4, r2
    73a2:	2200      	movs	r2, #0
    73a4:	0324      	lsls	r4, r4, #12
    73a6:	055b      	lsls	r3, r3, #21
    73a8:	0b24      	lsrs	r4, r4, #12
    73aa:	0d5b      	lsrs	r3, r3, #21
    73ac:	2100      	movs	r1, #0
    73ae:	0010      	movs	r0, r2
    73b0:	0324      	lsls	r4, r4, #12
    73b2:	0d0a      	lsrs	r2, r1, #20
    73b4:	0b24      	lsrs	r4, r4, #12
    73b6:	0512      	lsls	r2, r2, #20
    73b8:	4322      	orrs	r2, r4
    73ba:	4c10      	ldr	r4, [pc, #64]	; (73fc <__aeabi_i2d+0x80>)
    73bc:	051b      	lsls	r3, r3, #20
    73be:	4022      	ands	r2, r4
    73c0:	4313      	orrs	r3, r2
    73c2:	005b      	lsls	r3, r3, #1
    73c4:	07ed      	lsls	r5, r5, #31
    73c6:	085b      	lsrs	r3, r3, #1
    73c8:	432b      	orrs	r3, r5
    73ca:	0019      	movs	r1, r3
    73cc:	bd70      	pop	{r4, r5, r6, pc}
    73ce:	0021      	movs	r1, r4
    73d0:	4091      	lsls	r1, r2
    73d2:	000a      	movs	r2, r1
    73d4:	210b      	movs	r1, #11
    73d6:	1a08      	subs	r0, r1, r0
    73d8:	40c4      	lsrs	r4, r0
    73da:	055b      	lsls	r3, r3, #21
    73dc:	0324      	lsls	r4, r4, #12
    73de:	0b24      	lsrs	r4, r4, #12
    73e0:	0d5b      	lsrs	r3, r3, #21
    73e2:	e7e3      	b.n	73ac <__aeabi_i2d+0x30>
    73e4:	2500      	movs	r5, #0
    73e6:	2300      	movs	r3, #0
    73e8:	2400      	movs	r4, #0
    73ea:	2200      	movs	r2, #0
    73ec:	e7de      	b.n	73ac <__aeabi_i2d+0x30>
    73ee:	46c0      	nop			; (mov r8, r8)
    73f0:	0000041e 	.word	0x0000041e
    73f4:	00000433 	.word	0x00000433
    73f8:	00000413 	.word	0x00000413
    73fc:	800fffff 	.word	0x800fffff

00007400 <__aeabi_cdrcmple>:
    7400:	4684      	mov	ip, r0
    7402:	1c10      	adds	r0, r2, #0
    7404:	4662      	mov	r2, ip
    7406:	468c      	mov	ip, r1
    7408:	1c19      	adds	r1, r3, #0
    740a:	4663      	mov	r3, ip
    740c:	e000      	b.n	7410 <__aeabi_cdcmpeq>
    740e:	46c0      	nop			; (mov r8, r8)

00007410 <__aeabi_cdcmpeq>:
    7410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7412:	f000 f90f 	bl	7634 <__ledf2>
    7416:	2800      	cmp	r0, #0
    7418:	d401      	bmi.n	741e <__aeabi_cdcmpeq+0xe>
    741a:	2100      	movs	r1, #0
    741c:	42c8      	cmn	r0, r1
    741e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00007420 <__aeabi_dcmpeq>:
    7420:	b510      	push	{r4, lr}
    7422:	f000 f869 	bl	74f8 <__eqdf2>
    7426:	4240      	negs	r0, r0
    7428:	3001      	adds	r0, #1
    742a:	bd10      	pop	{r4, pc}

0000742c <__aeabi_dcmplt>:
    742c:	b510      	push	{r4, lr}
    742e:	f000 f901 	bl	7634 <__ledf2>
    7432:	2800      	cmp	r0, #0
    7434:	db01      	blt.n	743a <__aeabi_dcmplt+0xe>
    7436:	2000      	movs	r0, #0
    7438:	bd10      	pop	{r4, pc}
    743a:	2001      	movs	r0, #1
    743c:	bd10      	pop	{r4, pc}
    743e:	46c0      	nop			; (mov r8, r8)

00007440 <__aeabi_dcmple>:
    7440:	b510      	push	{r4, lr}
    7442:	f000 f8f7 	bl	7634 <__ledf2>
    7446:	2800      	cmp	r0, #0
    7448:	dd01      	ble.n	744e <__aeabi_dcmple+0xe>
    744a:	2000      	movs	r0, #0
    744c:	bd10      	pop	{r4, pc}
    744e:	2001      	movs	r0, #1
    7450:	bd10      	pop	{r4, pc}
    7452:	46c0      	nop			; (mov r8, r8)

00007454 <__aeabi_dcmpgt>:
    7454:	b510      	push	{r4, lr}
    7456:	f000 f889 	bl	756c <__gedf2>
    745a:	2800      	cmp	r0, #0
    745c:	dc01      	bgt.n	7462 <__aeabi_dcmpgt+0xe>
    745e:	2000      	movs	r0, #0
    7460:	bd10      	pop	{r4, pc}
    7462:	2001      	movs	r0, #1
    7464:	bd10      	pop	{r4, pc}
    7466:	46c0      	nop			; (mov r8, r8)

00007468 <__aeabi_dcmpge>:
    7468:	b510      	push	{r4, lr}
    746a:	f000 f87f 	bl	756c <__gedf2>
    746e:	2800      	cmp	r0, #0
    7470:	da01      	bge.n	7476 <__aeabi_dcmpge+0xe>
    7472:	2000      	movs	r0, #0
    7474:	bd10      	pop	{r4, pc}
    7476:	2001      	movs	r0, #1
    7478:	bd10      	pop	{r4, pc}
    747a:	46c0      	nop			; (mov r8, r8)

0000747c <__clzsi2>:
    747c:	211c      	movs	r1, #28
    747e:	2301      	movs	r3, #1
    7480:	041b      	lsls	r3, r3, #16
    7482:	4298      	cmp	r0, r3
    7484:	d301      	bcc.n	748a <__clzsi2+0xe>
    7486:	0c00      	lsrs	r0, r0, #16
    7488:	3910      	subs	r1, #16
    748a:	0a1b      	lsrs	r3, r3, #8
    748c:	4298      	cmp	r0, r3
    748e:	d301      	bcc.n	7494 <__clzsi2+0x18>
    7490:	0a00      	lsrs	r0, r0, #8
    7492:	3908      	subs	r1, #8
    7494:	091b      	lsrs	r3, r3, #4
    7496:	4298      	cmp	r0, r3
    7498:	d301      	bcc.n	749e <__clzsi2+0x22>
    749a:	0900      	lsrs	r0, r0, #4
    749c:	3904      	subs	r1, #4
    749e:	a202      	add	r2, pc, #8	; (adr r2, 74a8 <__clzsi2+0x2c>)
    74a0:	5c10      	ldrb	r0, [r2, r0]
    74a2:	1840      	adds	r0, r0, r1
    74a4:	4770      	bx	lr
    74a6:	46c0      	nop			; (mov r8, r8)
    74a8:	02020304 	.word	0x02020304
    74ac:	01010101 	.word	0x01010101
	...

000074b8 <__ctzsi2>:
    74b8:	4241      	negs	r1, r0
    74ba:	4008      	ands	r0, r1
    74bc:	211c      	movs	r1, #28
    74be:	2301      	movs	r3, #1
    74c0:	041b      	lsls	r3, r3, #16
    74c2:	4298      	cmp	r0, r3
    74c4:	d301      	bcc.n	74ca <__ctzsi2+0x12>
    74c6:	0c00      	lsrs	r0, r0, #16
    74c8:	3910      	subs	r1, #16
    74ca:	0a1b      	lsrs	r3, r3, #8
    74cc:	4298      	cmp	r0, r3
    74ce:	d301      	bcc.n	74d4 <__ctzsi2+0x1c>
    74d0:	0a00      	lsrs	r0, r0, #8
    74d2:	3908      	subs	r1, #8
    74d4:	091b      	lsrs	r3, r3, #4
    74d6:	4298      	cmp	r0, r3
    74d8:	d301      	bcc.n	74de <__ctzsi2+0x26>
    74da:	0900      	lsrs	r0, r0, #4
    74dc:	3904      	subs	r1, #4
    74de:	a202      	add	r2, pc, #8	; (adr r2, 74e8 <__ctzsi2+0x30>)
    74e0:	5c10      	ldrb	r0, [r2, r0]
    74e2:	1a40      	subs	r0, r0, r1
    74e4:	4770      	bx	lr
    74e6:	46c0      	nop			; (mov r8, r8)
    74e8:	1d1d1c1b 	.word	0x1d1d1c1b
    74ec:	1e1e1e1e 	.word	0x1e1e1e1e
    74f0:	1f1f1f1f 	.word	0x1f1f1f1f
    74f4:	1f1f1f1f 	.word	0x1f1f1f1f

000074f8 <__eqdf2>:
    74f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    74fa:	464f      	mov	r7, r9
    74fc:	4646      	mov	r6, r8
    74fe:	46d6      	mov	lr, sl
    7500:	005c      	lsls	r4, r3, #1
    7502:	b5c0      	push	{r6, r7, lr}
    7504:	031f      	lsls	r7, r3, #12
    7506:	0fdb      	lsrs	r3, r3, #31
    7508:	469a      	mov	sl, r3
    750a:	4b17      	ldr	r3, [pc, #92]	; (7568 <__eqdf2+0x70>)
    750c:	030e      	lsls	r6, r1, #12
    750e:	004d      	lsls	r5, r1, #1
    7510:	4684      	mov	ip, r0
    7512:	4680      	mov	r8, r0
    7514:	0b36      	lsrs	r6, r6, #12
    7516:	0d6d      	lsrs	r5, r5, #21
    7518:	0fc9      	lsrs	r1, r1, #31
    751a:	4691      	mov	r9, r2
    751c:	0b3f      	lsrs	r7, r7, #12
    751e:	0d64      	lsrs	r4, r4, #21
    7520:	2001      	movs	r0, #1
    7522:	429d      	cmp	r5, r3
    7524:	d008      	beq.n	7538 <__eqdf2+0x40>
    7526:	429c      	cmp	r4, r3
    7528:	d001      	beq.n	752e <__eqdf2+0x36>
    752a:	42a5      	cmp	r5, r4
    752c:	d00b      	beq.n	7546 <__eqdf2+0x4e>
    752e:	bc1c      	pop	{r2, r3, r4}
    7530:	4690      	mov	r8, r2
    7532:	4699      	mov	r9, r3
    7534:	46a2      	mov	sl, r4
    7536:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7538:	4663      	mov	r3, ip
    753a:	4333      	orrs	r3, r6
    753c:	d1f7      	bne.n	752e <__eqdf2+0x36>
    753e:	42ac      	cmp	r4, r5
    7540:	d1f5      	bne.n	752e <__eqdf2+0x36>
    7542:	433a      	orrs	r2, r7
    7544:	d1f3      	bne.n	752e <__eqdf2+0x36>
    7546:	2001      	movs	r0, #1
    7548:	42be      	cmp	r6, r7
    754a:	d1f0      	bne.n	752e <__eqdf2+0x36>
    754c:	45c8      	cmp	r8, r9
    754e:	d1ee      	bne.n	752e <__eqdf2+0x36>
    7550:	4551      	cmp	r1, sl
    7552:	d007      	beq.n	7564 <__eqdf2+0x6c>
    7554:	2d00      	cmp	r5, #0
    7556:	d1ea      	bne.n	752e <__eqdf2+0x36>
    7558:	4663      	mov	r3, ip
    755a:	431e      	orrs	r6, r3
    755c:	0030      	movs	r0, r6
    755e:	1e46      	subs	r6, r0, #1
    7560:	41b0      	sbcs	r0, r6
    7562:	e7e4      	b.n	752e <__eqdf2+0x36>
    7564:	2000      	movs	r0, #0
    7566:	e7e2      	b.n	752e <__eqdf2+0x36>
    7568:	000007ff 	.word	0x000007ff

0000756c <__gedf2>:
    756c:	b5f0      	push	{r4, r5, r6, r7, lr}
    756e:	4645      	mov	r5, r8
    7570:	46de      	mov	lr, fp
    7572:	4657      	mov	r7, sl
    7574:	464e      	mov	r6, r9
    7576:	b5e0      	push	{r5, r6, r7, lr}
    7578:	031f      	lsls	r7, r3, #12
    757a:	0b3d      	lsrs	r5, r7, #12
    757c:	4f2c      	ldr	r7, [pc, #176]	; (7630 <__gedf2+0xc4>)
    757e:	030e      	lsls	r6, r1, #12
    7580:	004c      	lsls	r4, r1, #1
    7582:	46ab      	mov	fp, r5
    7584:	005d      	lsls	r5, r3, #1
    7586:	4684      	mov	ip, r0
    7588:	0b36      	lsrs	r6, r6, #12
    758a:	0d64      	lsrs	r4, r4, #21
    758c:	0fc9      	lsrs	r1, r1, #31
    758e:	4690      	mov	r8, r2
    7590:	0d6d      	lsrs	r5, r5, #21
    7592:	0fdb      	lsrs	r3, r3, #31
    7594:	42bc      	cmp	r4, r7
    7596:	d02a      	beq.n	75ee <__gedf2+0x82>
    7598:	4f25      	ldr	r7, [pc, #148]	; (7630 <__gedf2+0xc4>)
    759a:	42bd      	cmp	r5, r7
    759c:	d02d      	beq.n	75fa <__gedf2+0x8e>
    759e:	2c00      	cmp	r4, #0
    75a0:	d10f      	bne.n	75c2 <__gedf2+0x56>
    75a2:	4330      	orrs	r0, r6
    75a4:	0007      	movs	r7, r0
    75a6:	4681      	mov	r9, r0
    75a8:	4278      	negs	r0, r7
    75aa:	4178      	adcs	r0, r7
    75ac:	b2c0      	uxtb	r0, r0
    75ae:	2d00      	cmp	r5, #0
    75b0:	d117      	bne.n	75e2 <__gedf2+0x76>
    75b2:	465f      	mov	r7, fp
    75b4:	433a      	orrs	r2, r7
    75b6:	d114      	bne.n	75e2 <__gedf2+0x76>
    75b8:	464b      	mov	r3, r9
    75ba:	2000      	movs	r0, #0
    75bc:	2b00      	cmp	r3, #0
    75be:	d00a      	beq.n	75d6 <__gedf2+0x6a>
    75c0:	e006      	b.n	75d0 <__gedf2+0x64>
    75c2:	2d00      	cmp	r5, #0
    75c4:	d102      	bne.n	75cc <__gedf2+0x60>
    75c6:	4658      	mov	r0, fp
    75c8:	4302      	orrs	r2, r0
    75ca:	d001      	beq.n	75d0 <__gedf2+0x64>
    75cc:	4299      	cmp	r1, r3
    75ce:	d018      	beq.n	7602 <__gedf2+0x96>
    75d0:	4248      	negs	r0, r1
    75d2:	2101      	movs	r1, #1
    75d4:	4308      	orrs	r0, r1
    75d6:	bc3c      	pop	{r2, r3, r4, r5}
    75d8:	4690      	mov	r8, r2
    75da:	4699      	mov	r9, r3
    75dc:	46a2      	mov	sl, r4
    75de:	46ab      	mov	fp, r5
    75e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75e2:	2800      	cmp	r0, #0
    75e4:	d0f2      	beq.n	75cc <__gedf2+0x60>
    75e6:	2001      	movs	r0, #1
    75e8:	3b01      	subs	r3, #1
    75ea:	4318      	orrs	r0, r3
    75ec:	e7f3      	b.n	75d6 <__gedf2+0x6a>
    75ee:	0037      	movs	r7, r6
    75f0:	4307      	orrs	r7, r0
    75f2:	d0d1      	beq.n	7598 <__gedf2+0x2c>
    75f4:	2002      	movs	r0, #2
    75f6:	4240      	negs	r0, r0
    75f8:	e7ed      	b.n	75d6 <__gedf2+0x6a>
    75fa:	465f      	mov	r7, fp
    75fc:	4317      	orrs	r7, r2
    75fe:	d0ce      	beq.n	759e <__gedf2+0x32>
    7600:	e7f8      	b.n	75f4 <__gedf2+0x88>
    7602:	42ac      	cmp	r4, r5
    7604:	dce4      	bgt.n	75d0 <__gedf2+0x64>
    7606:	da03      	bge.n	7610 <__gedf2+0xa4>
    7608:	1e48      	subs	r0, r1, #1
    760a:	2101      	movs	r1, #1
    760c:	4308      	orrs	r0, r1
    760e:	e7e2      	b.n	75d6 <__gedf2+0x6a>
    7610:	455e      	cmp	r6, fp
    7612:	d8dd      	bhi.n	75d0 <__gedf2+0x64>
    7614:	d006      	beq.n	7624 <__gedf2+0xb8>
    7616:	2000      	movs	r0, #0
    7618:	455e      	cmp	r6, fp
    761a:	d2dc      	bcs.n	75d6 <__gedf2+0x6a>
    761c:	2301      	movs	r3, #1
    761e:	1e48      	subs	r0, r1, #1
    7620:	4318      	orrs	r0, r3
    7622:	e7d8      	b.n	75d6 <__gedf2+0x6a>
    7624:	45c4      	cmp	ip, r8
    7626:	d8d3      	bhi.n	75d0 <__gedf2+0x64>
    7628:	2000      	movs	r0, #0
    762a:	45c4      	cmp	ip, r8
    762c:	d3f6      	bcc.n	761c <__gedf2+0xb0>
    762e:	e7d2      	b.n	75d6 <__gedf2+0x6a>
    7630:	000007ff 	.word	0x000007ff

00007634 <__ledf2>:
    7634:	b5f0      	push	{r4, r5, r6, r7, lr}
    7636:	464e      	mov	r6, r9
    7638:	4645      	mov	r5, r8
    763a:	46de      	mov	lr, fp
    763c:	4657      	mov	r7, sl
    763e:	005c      	lsls	r4, r3, #1
    7640:	b5e0      	push	{r5, r6, r7, lr}
    7642:	031f      	lsls	r7, r3, #12
    7644:	0fdb      	lsrs	r3, r3, #31
    7646:	4699      	mov	r9, r3
    7648:	4b2a      	ldr	r3, [pc, #168]	; (76f4 <__ledf2+0xc0>)
    764a:	030e      	lsls	r6, r1, #12
    764c:	004d      	lsls	r5, r1, #1
    764e:	0fc9      	lsrs	r1, r1, #31
    7650:	4684      	mov	ip, r0
    7652:	0b36      	lsrs	r6, r6, #12
    7654:	0d6d      	lsrs	r5, r5, #21
    7656:	468b      	mov	fp, r1
    7658:	4690      	mov	r8, r2
    765a:	0b3f      	lsrs	r7, r7, #12
    765c:	0d64      	lsrs	r4, r4, #21
    765e:	429d      	cmp	r5, r3
    7660:	d020      	beq.n	76a4 <__ledf2+0x70>
    7662:	4b24      	ldr	r3, [pc, #144]	; (76f4 <__ledf2+0xc0>)
    7664:	429c      	cmp	r4, r3
    7666:	d022      	beq.n	76ae <__ledf2+0x7a>
    7668:	2d00      	cmp	r5, #0
    766a:	d112      	bne.n	7692 <__ledf2+0x5e>
    766c:	4330      	orrs	r0, r6
    766e:	4243      	negs	r3, r0
    7670:	4143      	adcs	r3, r0
    7672:	b2db      	uxtb	r3, r3
    7674:	2c00      	cmp	r4, #0
    7676:	d01f      	beq.n	76b8 <__ledf2+0x84>
    7678:	2b00      	cmp	r3, #0
    767a:	d00c      	beq.n	7696 <__ledf2+0x62>
    767c:	464b      	mov	r3, r9
    767e:	2001      	movs	r0, #1
    7680:	3b01      	subs	r3, #1
    7682:	4303      	orrs	r3, r0
    7684:	0018      	movs	r0, r3
    7686:	bc3c      	pop	{r2, r3, r4, r5}
    7688:	4690      	mov	r8, r2
    768a:	4699      	mov	r9, r3
    768c:	46a2      	mov	sl, r4
    768e:	46ab      	mov	fp, r5
    7690:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7692:	2c00      	cmp	r4, #0
    7694:	d016      	beq.n	76c4 <__ledf2+0x90>
    7696:	45cb      	cmp	fp, r9
    7698:	d017      	beq.n	76ca <__ledf2+0x96>
    769a:	465b      	mov	r3, fp
    769c:	4259      	negs	r1, r3
    769e:	2301      	movs	r3, #1
    76a0:	430b      	orrs	r3, r1
    76a2:	e7ef      	b.n	7684 <__ledf2+0x50>
    76a4:	0031      	movs	r1, r6
    76a6:	2302      	movs	r3, #2
    76a8:	4301      	orrs	r1, r0
    76aa:	d1eb      	bne.n	7684 <__ledf2+0x50>
    76ac:	e7d9      	b.n	7662 <__ledf2+0x2e>
    76ae:	0039      	movs	r1, r7
    76b0:	2302      	movs	r3, #2
    76b2:	4311      	orrs	r1, r2
    76b4:	d1e6      	bne.n	7684 <__ledf2+0x50>
    76b6:	e7d7      	b.n	7668 <__ledf2+0x34>
    76b8:	433a      	orrs	r2, r7
    76ba:	d1dd      	bne.n	7678 <__ledf2+0x44>
    76bc:	2300      	movs	r3, #0
    76be:	2800      	cmp	r0, #0
    76c0:	d0e0      	beq.n	7684 <__ledf2+0x50>
    76c2:	e7ea      	b.n	769a <__ledf2+0x66>
    76c4:	433a      	orrs	r2, r7
    76c6:	d1e6      	bne.n	7696 <__ledf2+0x62>
    76c8:	e7e7      	b.n	769a <__ledf2+0x66>
    76ca:	42a5      	cmp	r5, r4
    76cc:	dce5      	bgt.n	769a <__ledf2+0x66>
    76ce:	db05      	blt.n	76dc <__ledf2+0xa8>
    76d0:	42be      	cmp	r6, r7
    76d2:	d8e2      	bhi.n	769a <__ledf2+0x66>
    76d4:	d007      	beq.n	76e6 <__ledf2+0xb2>
    76d6:	2300      	movs	r3, #0
    76d8:	42be      	cmp	r6, r7
    76da:	d2d3      	bcs.n	7684 <__ledf2+0x50>
    76dc:	4659      	mov	r1, fp
    76de:	2301      	movs	r3, #1
    76e0:	3901      	subs	r1, #1
    76e2:	430b      	orrs	r3, r1
    76e4:	e7ce      	b.n	7684 <__ledf2+0x50>
    76e6:	45c4      	cmp	ip, r8
    76e8:	d8d7      	bhi.n	769a <__ledf2+0x66>
    76ea:	2300      	movs	r3, #0
    76ec:	45c4      	cmp	ip, r8
    76ee:	d3f5      	bcc.n	76dc <__ledf2+0xa8>
    76f0:	e7c8      	b.n	7684 <__ledf2+0x50>
    76f2:	46c0      	nop			; (mov r8, r8)
    76f4:	000007ff 	.word	0x000007ff

000076f8 <atoi>:
    76f8:	b510      	push	{r4, lr}
    76fa:	220a      	movs	r2, #10
    76fc:	2100      	movs	r1, #0
    76fe:	f000 f9c7 	bl	7a90 <strtol>
    7702:	bd10      	pop	{r4, pc}

00007704 <__libc_init_array>:
    7704:	b570      	push	{r4, r5, r6, lr}
    7706:	2600      	movs	r6, #0
    7708:	4d0c      	ldr	r5, [pc, #48]	; (773c <__libc_init_array+0x38>)
    770a:	4c0d      	ldr	r4, [pc, #52]	; (7740 <__libc_init_array+0x3c>)
    770c:	1b64      	subs	r4, r4, r5
    770e:	10a4      	asrs	r4, r4, #2
    7710:	42a6      	cmp	r6, r4
    7712:	d109      	bne.n	7728 <__libc_init_array+0x24>
    7714:	2600      	movs	r6, #0
    7716:	f001 feef 	bl	94f8 <_init>
    771a:	4d0a      	ldr	r5, [pc, #40]	; (7744 <__libc_init_array+0x40>)
    771c:	4c0a      	ldr	r4, [pc, #40]	; (7748 <__libc_init_array+0x44>)
    771e:	1b64      	subs	r4, r4, r5
    7720:	10a4      	asrs	r4, r4, #2
    7722:	42a6      	cmp	r6, r4
    7724:	d105      	bne.n	7732 <__libc_init_array+0x2e>
    7726:	bd70      	pop	{r4, r5, r6, pc}
    7728:	00b3      	lsls	r3, r6, #2
    772a:	58eb      	ldr	r3, [r5, r3]
    772c:	4798      	blx	r3
    772e:	3601      	adds	r6, #1
    7730:	e7ee      	b.n	7710 <__libc_init_array+0xc>
    7732:	00b3      	lsls	r3, r6, #2
    7734:	58eb      	ldr	r3, [r5, r3]
    7736:	4798      	blx	r3
    7738:	3601      	adds	r6, #1
    773a:	e7f2      	b.n	7722 <__libc_init_array+0x1e>
    773c:	00009504 	.word	0x00009504
    7740:	00009504 	.word	0x00009504
    7744:	00009504 	.word	0x00009504
    7748:	00009508 	.word	0x00009508

0000774c <memcmp>:
    774c:	b530      	push	{r4, r5, lr}
    774e:	2400      	movs	r4, #0
    7750:	42a2      	cmp	r2, r4
    7752:	d101      	bne.n	7758 <memcmp+0xc>
    7754:	2000      	movs	r0, #0
    7756:	e005      	b.n	7764 <memcmp+0x18>
    7758:	5d03      	ldrb	r3, [r0, r4]
    775a:	1c65      	adds	r5, r4, #1
    775c:	5d0c      	ldrb	r4, [r1, r4]
    775e:	42a3      	cmp	r3, r4
    7760:	d001      	beq.n	7766 <memcmp+0x1a>
    7762:	1b18      	subs	r0, r3, r4
    7764:	bd30      	pop	{r4, r5, pc}
    7766:	002c      	movs	r4, r5
    7768:	e7f2      	b.n	7750 <memcmp+0x4>

0000776a <memcpy>:
    776a:	2300      	movs	r3, #0
    776c:	b510      	push	{r4, lr}
    776e:	429a      	cmp	r2, r3
    7770:	d100      	bne.n	7774 <memcpy+0xa>
    7772:	bd10      	pop	{r4, pc}
    7774:	5ccc      	ldrb	r4, [r1, r3]
    7776:	54c4      	strb	r4, [r0, r3]
    7778:	3301      	adds	r3, #1
    777a:	e7f8      	b.n	776e <memcpy+0x4>

0000777c <memset>:
    777c:	0003      	movs	r3, r0
    777e:	1882      	adds	r2, r0, r2
    7780:	4293      	cmp	r3, r2
    7782:	d100      	bne.n	7786 <memset+0xa>
    7784:	4770      	bx	lr
    7786:	7019      	strb	r1, [r3, #0]
    7788:	3301      	adds	r3, #1
    778a:	e7f9      	b.n	7780 <memset+0x4>

0000778c <_free_r>:
    778c:	b570      	push	{r4, r5, r6, lr}
    778e:	0005      	movs	r5, r0
    7790:	2900      	cmp	r1, #0
    7792:	d010      	beq.n	77b6 <_free_r+0x2a>
    7794:	1f0c      	subs	r4, r1, #4
    7796:	6823      	ldr	r3, [r4, #0]
    7798:	2b00      	cmp	r3, #0
    779a:	da00      	bge.n	779e <_free_r+0x12>
    779c:	18e4      	adds	r4, r4, r3
    779e:	0028      	movs	r0, r5
    77a0:	f000 f9e9 	bl	7b76 <__malloc_lock>
    77a4:	4a1d      	ldr	r2, [pc, #116]	; (781c <_free_r+0x90>)
    77a6:	6813      	ldr	r3, [r2, #0]
    77a8:	2b00      	cmp	r3, #0
    77aa:	d105      	bne.n	77b8 <_free_r+0x2c>
    77ac:	6063      	str	r3, [r4, #4]
    77ae:	6014      	str	r4, [r2, #0]
    77b0:	0028      	movs	r0, r5
    77b2:	f000 f9e1 	bl	7b78 <__malloc_unlock>
    77b6:	bd70      	pop	{r4, r5, r6, pc}
    77b8:	42a3      	cmp	r3, r4
    77ba:	d909      	bls.n	77d0 <_free_r+0x44>
    77bc:	6821      	ldr	r1, [r4, #0]
    77be:	1860      	adds	r0, r4, r1
    77c0:	4283      	cmp	r3, r0
    77c2:	d1f3      	bne.n	77ac <_free_r+0x20>
    77c4:	6818      	ldr	r0, [r3, #0]
    77c6:	685b      	ldr	r3, [r3, #4]
    77c8:	1841      	adds	r1, r0, r1
    77ca:	6021      	str	r1, [r4, #0]
    77cc:	e7ee      	b.n	77ac <_free_r+0x20>
    77ce:	0013      	movs	r3, r2
    77d0:	685a      	ldr	r2, [r3, #4]
    77d2:	2a00      	cmp	r2, #0
    77d4:	d001      	beq.n	77da <_free_r+0x4e>
    77d6:	42a2      	cmp	r2, r4
    77d8:	d9f9      	bls.n	77ce <_free_r+0x42>
    77da:	6819      	ldr	r1, [r3, #0]
    77dc:	1858      	adds	r0, r3, r1
    77de:	42a0      	cmp	r0, r4
    77e0:	d10b      	bne.n	77fa <_free_r+0x6e>
    77e2:	6820      	ldr	r0, [r4, #0]
    77e4:	1809      	adds	r1, r1, r0
    77e6:	1858      	adds	r0, r3, r1
    77e8:	6019      	str	r1, [r3, #0]
    77ea:	4282      	cmp	r2, r0
    77ec:	d1e0      	bne.n	77b0 <_free_r+0x24>
    77ee:	6810      	ldr	r0, [r2, #0]
    77f0:	6852      	ldr	r2, [r2, #4]
    77f2:	1841      	adds	r1, r0, r1
    77f4:	6019      	str	r1, [r3, #0]
    77f6:	605a      	str	r2, [r3, #4]
    77f8:	e7da      	b.n	77b0 <_free_r+0x24>
    77fa:	42a0      	cmp	r0, r4
    77fc:	d902      	bls.n	7804 <_free_r+0x78>
    77fe:	230c      	movs	r3, #12
    7800:	602b      	str	r3, [r5, #0]
    7802:	e7d5      	b.n	77b0 <_free_r+0x24>
    7804:	6821      	ldr	r1, [r4, #0]
    7806:	1860      	adds	r0, r4, r1
    7808:	4282      	cmp	r2, r0
    780a:	d103      	bne.n	7814 <_free_r+0x88>
    780c:	6810      	ldr	r0, [r2, #0]
    780e:	6852      	ldr	r2, [r2, #4]
    7810:	1841      	adds	r1, r0, r1
    7812:	6021      	str	r1, [r4, #0]
    7814:	6062      	str	r2, [r4, #4]
    7816:	605c      	str	r4, [r3, #4]
    7818:	e7ca      	b.n	77b0 <_free_r+0x24>
    781a:	46c0      	nop			; (mov r8, r8)
    781c:	200008f0 	.word	0x200008f0

00007820 <_malloc_r>:
    7820:	2303      	movs	r3, #3
    7822:	b570      	push	{r4, r5, r6, lr}
    7824:	1ccd      	adds	r5, r1, #3
    7826:	439d      	bics	r5, r3
    7828:	3508      	adds	r5, #8
    782a:	0006      	movs	r6, r0
    782c:	2d0c      	cmp	r5, #12
    782e:	d21e      	bcs.n	786e <_malloc_r+0x4e>
    7830:	250c      	movs	r5, #12
    7832:	42a9      	cmp	r1, r5
    7834:	d81d      	bhi.n	7872 <_malloc_r+0x52>
    7836:	0030      	movs	r0, r6
    7838:	f000 f99d 	bl	7b76 <__malloc_lock>
    783c:	4a25      	ldr	r2, [pc, #148]	; (78d4 <_malloc_r+0xb4>)
    783e:	6814      	ldr	r4, [r2, #0]
    7840:	0021      	movs	r1, r4
    7842:	2900      	cmp	r1, #0
    7844:	d119      	bne.n	787a <_malloc_r+0x5a>
    7846:	4c24      	ldr	r4, [pc, #144]	; (78d8 <_malloc_r+0xb8>)
    7848:	6823      	ldr	r3, [r4, #0]
    784a:	2b00      	cmp	r3, #0
    784c:	d103      	bne.n	7856 <_malloc_r+0x36>
    784e:	0030      	movs	r0, r6
    7850:	f000 f844 	bl	78dc <_sbrk_r>
    7854:	6020      	str	r0, [r4, #0]
    7856:	0029      	movs	r1, r5
    7858:	0030      	movs	r0, r6
    785a:	f000 f83f 	bl	78dc <_sbrk_r>
    785e:	1c43      	adds	r3, r0, #1
    7860:	d12c      	bne.n	78bc <_malloc_r+0x9c>
    7862:	230c      	movs	r3, #12
    7864:	0030      	movs	r0, r6
    7866:	6033      	str	r3, [r6, #0]
    7868:	f000 f986 	bl	7b78 <__malloc_unlock>
    786c:	e003      	b.n	7876 <_malloc_r+0x56>
    786e:	2d00      	cmp	r5, #0
    7870:	dadf      	bge.n	7832 <_malloc_r+0x12>
    7872:	230c      	movs	r3, #12
    7874:	6033      	str	r3, [r6, #0]
    7876:	2000      	movs	r0, #0
    7878:	bd70      	pop	{r4, r5, r6, pc}
    787a:	680b      	ldr	r3, [r1, #0]
    787c:	1b5b      	subs	r3, r3, r5
    787e:	d41a      	bmi.n	78b6 <_malloc_r+0x96>
    7880:	2b0b      	cmp	r3, #11
    7882:	d903      	bls.n	788c <_malloc_r+0x6c>
    7884:	600b      	str	r3, [r1, #0]
    7886:	18cc      	adds	r4, r1, r3
    7888:	6025      	str	r5, [r4, #0]
    788a:	e003      	b.n	7894 <_malloc_r+0x74>
    788c:	428c      	cmp	r4, r1
    788e:	d10e      	bne.n	78ae <_malloc_r+0x8e>
    7890:	6863      	ldr	r3, [r4, #4]
    7892:	6013      	str	r3, [r2, #0]
    7894:	0030      	movs	r0, r6
    7896:	f000 f96f 	bl	7b78 <__malloc_unlock>
    789a:	0020      	movs	r0, r4
    789c:	2207      	movs	r2, #7
    789e:	300b      	adds	r0, #11
    78a0:	1d23      	adds	r3, r4, #4
    78a2:	4390      	bics	r0, r2
    78a4:	1ac3      	subs	r3, r0, r3
    78a6:	d0e7      	beq.n	7878 <_malloc_r+0x58>
    78a8:	425a      	negs	r2, r3
    78aa:	50e2      	str	r2, [r4, r3]
    78ac:	e7e4      	b.n	7878 <_malloc_r+0x58>
    78ae:	684b      	ldr	r3, [r1, #4]
    78b0:	6063      	str	r3, [r4, #4]
    78b2:	000c      	movs	r4, r1
    78b4:	e7ee      	b.n	7894 <_malloc_r+0x74>
    78b6:	000c      	movs	r4, r1
    78b8:	6849      	ldr	r1, [r1, #4]
    78ba:	e7c2      	b.n	7842 <_malloc_r+0x22>
    78bc:	2303      	movs	r3, #3
    78be:	1cc4      	adds	r4, r0, #3
    78c0:	439c      	bics	r4, r3
    78c2:	42a0      	cmp	r0, r4
    78c4:	d0e0      	beq.n	7888 <_malloc_r+0x68>
    78c6:	1a21      	subs	r1, r4, r0
    78c8:	0030      	movs	r0, r6
    78ca:	f000 f807 	bl	78dc <_sbrk_r>
    78ce:	1c43      	adds	r3, r0, #1
    78d0:	d1da      	bne.n	7888 <_malloc_r+0x68>
    78d2:	e7c6      	b.n	7862 <_malloc_r+0x42>
    78d4:	200008f0 	.word	0x200008f0
    78d8:	200008f4 	.word	0x200008f4

000078dc <_sbrk_r>:
    78dc:	2300      	movs	r3, #0
    78de:	b570      	push	{r4, r5, r6, lr}
    78e0:	4c06      	ldr	r4, [pc, #24]	; (78fc <_sbrk_r+0x20>)
    78e2:	0005      	movs	r5, r0
    78e4:	0008      	movs	r0, r1
    78e6:	6023      	str	r3, [r4, #0]
    78e8:	f7fb fa7c 	bl	2de4 <_sbrk>
    78ec:	1c43      	adds	r3, r0, #1
    78ee:	d103      	bne.n	78f8 <_sbrk_r+0x1c>
    78f0:	6823      	ldr	r3, [r4, #0]
    78f2:	2b00      	cmp	r3, #0
    78f4:	d000      	beq.n	78f8 <_sbrk_r+0x1c>
    78f6:	602b      	str	r3, [r5, #0]
    78f8:	bd70      	pop	{r4, r5, r6, pc}
    78fa:	46c0      	nop			; (mov r8, r8)
    78fc:	200040c4 	.word	0x200040c4

00007900 <siprintf>:
    7900:	b40e      	push	{r1, r2, r3}
    7902:	b510      	push	{r4, lr}
    7904:	b09d      	sub	sp, #116	; 0x74
    7906:	a902      	add	r1, sp, #8
    7908:	9002      	str	r0, [sp, #8]
    790a:	6108      	str	r0, [r1, #16]
    790c:	480b      	ldr	r0, [pc, #44]	; (793c <siprintf+0x3c>)
    790e:	2482      	movs	r4, #130	; 0x82
    7910:	6088      	str	r0, [r1, #8]
    7912:	6148      	str	r0, [r1, #20]
    7914:	2001      	movs	r0, #1
    7916:	4240      	negs	r0, r0
    7918:	ab1f      	add	r3, sp, #124	; 0x7c
    791a:	81c8      	strh	r0, [r1, #14]
    791c:	4808      	ldr	r0, [pc, #32]	; (7940 <siprintf+0x40>)
    791e:	cb04      	ldmia	r3!, {r2}
    7920:	00a4      	lsls	r4, r4, #2
    7922:	6800      	ldr	r0, [r0, #0]
    7924:	9301      	str	r3, [sp, #4]
    7926:	818c      	strh	r4, [r1, #12]
    7928:	f000 f98a 	bl	7c40 <_svfiprintf_r>
    792c:	2300      	movs	r3, #0
    792e:	9a02      	ldr	r2, [sp, #8]
    7930:	7013      	strb	r3, [r2, #0]
    7932:	b01d      	add	sp, #116	; 0x74
    7934:	bc10      	pop	{r4}
    7936:	bc08      	pop	{r3}
    7938:	b003      	add	sp, #12
    793a:	4718      	bx	r3
    793c:	7fffffff 	.word	0x7fffffff
    7940:	20000004 	.word	0x20000004

00007944 <strlen>:
    7944:	2300      	movs	r3, #0
    7946:	5cc2      	ldrb	r2, [r0, r3]
    7948:	3301      	adds	r3, #1
    794a:	2a00      	cmp	r2, #0
    794c:	d1fb      	bne.n	7946 <strlen+0x2>
    794e:	1e58      	subs	r0, r3, #1
    7950:	4770      	bx	lr

00007952 <strstr>:
    7952:	b510      	push	{r4, lr}
    7954:	0002      	movs	r2, r0
    7956:	7800      	ldrb	r0, [r0, #0]
    7958:	2800      	cmp	r0, #0
    795a:	d104      	bne.n	7966 <strstr+0x14>
    795c:	7809      	ldrb	r1, [r1, #0]
    795e:	2900      	cmp	r1, #0
    7960:	d00d      	beq.n	797e <strstr+0x2c>
    7962:	bd10      	pop	{r4, pc}
    7964:	3201      	adds	r2, #1
    7966:	7810      	ldrb	r0, [r2, #0]
    7968:	2800      	cmp	r0, #0
    796a:	d0fa      	beq.n	7962 <strstr+0x10>
    796c:	2300      	movs	r3, #0
    796e:	5cc8      	ldrb	r0, [r1, r3]
    7970:	2800      	cmp	r0, #0
    7972:	d004      	beq.n	797e <strstr+0x2c>
    7974:	5cd4      	ldrb	r4, [r2, r3]
    7976:	4284      	cmp	r4, r0
    7978:	d1f4      	bne.n	7964 <strstr+0x12>
    797a:	3301      	adds	r3, #1
    797c:	e7f7      	b.n	796e <strstr+0x1c>
    797e:	0010      	movs	r0, r2
    7980:	e7ef      	b.n	7962 <strstr+0x10>
	...

00007984 <_strtol_l.isra.0>:
    7984:	b5f0      	push	{r4, r5, r6, r7, lr}
    7986:	001f      	movs	r7, r3
    7988:	000e      	movs	r6, r1
    798a:	b087      	sub	sp, #28
    798c:	9005      	str	r0, [sp, #20]
    798e:	9103      	str	r1, [sp, #12]
    7990:	9202      	str	r2, [sp, #8]
    7992:	980c      	ldr	r0, [sp, #48]	; 0x30
    7994:	7834      	ldrb	r4, [r6, #0]
    7996:	f000 f8d9 	bl	7b4c <__locale_ctype_ptr_l>
    799a:	2208      	movs	r2, #8
    799c:	1900      	adds	r0, r0, r4
    799e:	7843      	ldrb	r3, [r0, #1]
    79a0:	1c75      	adds	r5, r6, #1
    79a2:	4013      	ands	r3, r2
    79a4:	d10c      	bne.n	79c0 <_strtol_l.isra.0+0x3c>
    79a6:	2c2d      	cmp	r4, #45	; 0x2d
    79a8:	d10c      	bne.n	79c4 <_strtol_l.isra.0+0x40>
    79aa:	3301      	adds	r3, #1
    79ac:	782c      	ldrb	r4, [r5, #0]
    79ae:	9301      	str	r3, [sp, #4]
    79b0:	1cb5      	adds	r5, r6, #2
    79b2:	2f00      	cmp	r7, #0
    79b4:	d00c      	beq.n	79d0 <_strtol_l.isra.0+0x4c>
    79b6:	2f10      	cmp	r7, #16
    79b8:	d114      	bne.n	79e4 <_strtol_l.isra.0+0x60>
    79ba:	2c30      	cmp	r4, #48	; 0x30
    79bc:	d00a      	beq.n	79d4 <_strtol_l.isra.0+0x50>
    79be:	e011      	b.n	79e4 <_strtol_l.isra.0+0x60>
    79c0:	002e      	movs	r6, r5
    79c2:	e7e6      	b.n	7992 <_strtol_l.isra.0+0xe>
    79c4:	9301      	str	r3, [sp, #4]
    79c6:	2c2b      	cmp	r4, #43	; 0x2b
    79c8:	d1f3      	bne.n	79b2 <_strtol_l.isra.0+0x2e>
    79ca:	782c      	ldrb	r4, [r5, #0]
    79cc:	1cb5      	adds	r5, r6, #2
    79ce:	e7f0      	b.n	79b2 <_strtol_l.isra.0+0x2e>
    79d0:	2c30      	cmp	r4, #48	; 0x30
    79d2:	d12f      	bne.n	7a34 <_strtol_l.isra.0+0xb0>
    79d4:	2220      	movs	r2, #32
    79d6:	782b      	ldrb	r3, [r5, #0]
    79d8:	4393      	bics	r3, r2
    79da:	2b58      	cmp	r3, #88	; 0x58
    79dc:	d151      	bne.n	7a82 <_strtol_l.isra.0+0xfe>
    79de:	2710      	movs	r7, #16
    79e0:	786c      	ldrb	r4, [r5, #1]
    79e2:	3502      	adds	r5, #2
    79e4:	9b01      	ldr	r3, [sp, #4]
    79e6:	4a29      	ldr	r2, [pc, #164]	; (7a8c <_strtol_l.isra.0+0x108>)
    79e8:	0039      	movs	r1, r7
    79ea:	189e      	adds	r6, r3, r2
    79ec:	0030      	movs	r0, r6
    79ee:	f7fe fea3 	bl	6738 <__aeabi_uidivmod>
    79f2:	0030      	movs	r0, r6
    79f4:	9104      	str	r1, [sp, #16]
    79f6:	0039      	movs	r1, r7
    79f8:	f7fe fe18 	bl	662c <__udivsi3>
    79fc:	2101      	movs	r1, #1
    79fe:	2300      	movs	r3, #0
    7a00:	4249      	negs	r1, r1
    7a02:	0002      	movs	r2, r0
    7a04:	468c      	mov	ip, r1
    7a06:	0018      	movs	r0, r3
    7a08:	0021      	movs	r1, r4
    7a0a:	3930      	subs	r1, #48	; 0x30
    7a0c:	2909      	cmp	r1, #9
    7a0e:	d813      	bhi.n	7a38 <_strtol_l.isra.0+0xb4>
    7a10:	000c      	movs	r4, r1
    7a12:	42a7      	cmp	r7, r4
    7a14:	dd1c      	ble.n	7a50 <_strtol_l.isra.0+0xcc>
    7a16:	1c59      	adds	r1, r3, #1
    7a18:	d009      	beq.n	7a2e <_strtol_l.isra.0+0xaa>
    7a1a:	4663      	mov	r3, ip
    7a1c:	4282      	cmp	r2, r0
    7a1e:	d306      	bcc.n	7a2e <_strtol_l.isra.0+0xaa>
    7a20:	d102      	bne.n	7a28 <_strtol_l.isra.0+0xa4>
    7a22:	9904      	ldr	r1, [sp, #16]
    7a24:	42a1      	cmp	r1, r4
    7a26:	db02      	blt.n	7a2e <_strtol_l.isra.0+0xaa>
    7a28:	2301      	movs	r3, #1
    7a2a:	4378      	muls	r0, r7
    7a2c:	1820      	adds	r0, r4, r0
    7a2e:	782c      	ldrb	r4, [r5, #0]
    7a30:	3501      	adds	r5, #1
    7a32:	e7e9      	b.n	7a08 <_strtol_l.isra.0+0x84>
    7a34:	270a      	movs	r7, #10
    7a36:	e7d5      	b.n	79e4 <_strtol_l.isra.0+0x60>
    7a38:	0021      	movs	r1, r4
    7a3a:	3941      	subs	r1, #65	; 0x41
    7a3c:	2919      	cmp	r1, #25
    7a3e:	d801      	bhi.n	7a44 <_strtol_l.isra.0+0xc0>
    7a40:	3c37      	subs	r4, #55	; 0x37
    7a42:	e7e6      	b.n	7a12 <_strtol_l.isra.0+0x8e>
    7a44:	0021      	movs	r1, r4
    7a46:	3961      	subs	r1, #97	; 0x61
    7a48:	2919      	cmp	r1, #25
    7a4a:	d801      	bhi.n	7a50 <_strtol_l.isra.0+0xcc>
    7a4c:	3c57      	subs	r4, #87	; 0x57
    7a4e:	e7e0      	b.n	7a12 <_strtol_l.isra.0+0x8e>
    7a50:	1c5a      	adds	r2, r3, #1
    7a52:	d108      	bne.n	7a66 <_strtol_l.isra.0+0xe2>
    7a54:	9a05      	ldr	r2, [sp, #20]
    7a56:	3323      	adds	r3, #35	; 0x23
    7a58:	6013      	str	r3, [r2, #0]
    7a5a:	9b02      	ldr	r3, [sp, #8]
    7a5c:	0030      	movs	r0, r6
    7a5e:	2b00      	cmp	r3, #0
    7a60:	d10b      	bne.n	7a7a <_strtol_l.isra.0+0xf6>
    7a62:	b007      	add	sp, #28
    7a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a66:	9a01      	ldr	r2, [sp, #4]
    7a68:	2a00      	cmp	r2, #0
    7a6a:	d000      	beq.n	7a6e <_strtol_l.isra.0+0xea>
    7a6c:	4240      	negs	r0, r0
    7a6e:	9a02      	ldr	r2, [sp, #8]
    7a70:	2a00      	cmp	r2, #0
    7a72:	d0f6      	beq.n	7a62 <_strtol_l.isra.0+0xde>
    7a74:	9a03      	ldr	r2, [sp, #12]
    7a76:	2b00      	cmp	r3, #0
    7a78:	d000      	beq.n	7a7c <_strtol_l.isra.0+0xf8>
    7a7a:	1e6a      	subs	r2, r5, #1
    7a7c:	9b02      	ldr	r3, [sp, #8]
    7a7e:	601a      	str	r2, [r3, #0]
    7a80:	e7ef      	b.n	7a62 <_strtol_l.isra.0+0xde>
    7a82:	2430      	movs	r4, #48	; 0x30
    7a84:	2f00      	cmp	r7, #0
    7a86:	d1ad      	bne.n	79e4 <_strtol_l.isra.0+0x60>
    7a88:	3708      	adds	r7, #8
    7a8a:	e7ab      	b.n	79e4 <_strtol_l.isra.0+0x60>
    7a8c:	7fffffff 	.word	0x7fffffff

00007a90 <strtol>:
    7a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7a92:	0013      	movs	r3, r2
    7a94:	4a06      	ldr	r2, [pc, #24]	; (7ab0 <strtol+0x20>)
    7a96:	0005      	movs	r5, r0
    7a98:	6810      	ldr	r0, [r2, #0]
    7a9a:	6a04      	ldr	r4, [r0, #32]
    7a9c:	2c00      	cmp	r4, #0
    7a9e:	d100      	bne.n	7aa2 <strtol+0x12>
    7aa0:	4c04      	ldr	r4, [pc, #16]	; (7ab4 <strtol+0x24>)
    7aa2:	000a      	movs	r2, r1
    7aa4:	9400      	str	r4, [sp, #0]
    7aa6:	0029      	movs	r1, r5
    7aa8:	f7ff ff6c 	bl	7984 <_strtol_l.isra.0>
    7aac:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7aae:	46c0      	nop			; (mov r8, r8)
    7ab0:	20000004 	.word	0x20000004
    7ab4:	20000068 	.word	0x20000068

00007ab8 <time>:
    7ab8:	b513      	push	{r0, r1, r4, lr}
    7aba:	4b08      	ldr	r3, [pc, #32]	; (7adc <time+0x24>)
    7abc:	0004      	movs	r4, r0
    7abe:	2200      	movs	r2, #0
    7ac0:	4669      	mov	r1, sp
    7ac2:	6818      	ldr	r0, [r3, #0]
    7ac4:	f000 f830 	bl	7b28 <_gettimeofday_r>
    7ac8:	2800      	cmp	r0, #0
    7aca:	da02      	bge.n	7ad2 <time+0x1a>
    7acc:	2301      	movs	r3, #1
    7ace:	425b      	negs	r3, r3
    7ad0:	9300      	str	r3, [sp, #0]
    7ad2:	9800      	ldr	r0, [sp, #0]
    7ad4:	2c00      	cmp	r4, #0
    7ad6:	d000      	beq.n	7ada <time+0x22>
    7ad8:	6020      	str	r0, [r4, #0]
    7ada:	bd16      	pop	{r1, r2, r4, pc}
    7adc:	20000004 	.word	0x20000004

00007ae0 <_vsiprintf_r>:
    7ae0:	b530      	push	{r4, r5, lr}
    7ae2:	b09b      	sub	sp, #108	; 0x6c
    7ae4:	9100      	str	r1, [sp, #0]
    7ae6:	9104      	str	r1, [sp, #16]
    7ae8:	4908      	ldr	r1, [pc, #32]	; (7b0c <_vsiprintf_r+0x2c>)
    7aea:	466d      	mov	r5, sp
    7aec:	9102      	str	r1, [sp, #8]
    7aee:	9105      	str	r1, [sp, #20]
    7af0:	2101      	movs	r1, #1
    7af2:	2482      	movs	r4, #130	; 0x82
    7af4:	4249      	negs	r1, r1
    7af6:	81e9      	strh	r1, [r5, #14]
    7af8:	00a4      	lsls	r4, r4, #2
    7afa:	4669      	mov	r1, sp
    7afc:	81ac      	strh	r4, [r5, #12]
    7afe:	f000 f89f 	bl	7c40 <_svfiprintf_r>
    7b02:	2300      	movs	r3, #0
    7b04:	9a00      	ldr	r2, [sp, #0]
    7b06:	7013      	strb	r3, [r2, #0]
    7b08:	b01b      	add	sp, #108	; 0x6c
    7b0a:	bd30      	pop	{r4, r5, pc}
    7b0c:	7fffffff 	.word	0x7fffffff

00007b10 <vsiprintf>:
    7b10:	b510      	push	{r4, lr}
    7b12:	0013      	movs	r3, r2
    7b14:	000a      	movs	r2, r1
    7b16:	0001      	movs	r1, r0
    7b18:	4802      	ldr	r0, [pc, #8]	; (7b24 <vsiprintf+0x14>)
    7b1a:	6800      	ldr	r0, [r0, #0]
    7b1c:	f7ff ffe0 	bl	7ae0 <_vsiprintf_r>
    7b20:	bd10      	pop	{r4, pc}
    7b22:	46c0      	nop			; (mov r8, r8)
    7b24:	20000004 	.word	0x20000004

00007b28 <_gettimeofday_r>:
    7b28:	2300      	movs	r3, #0
    7b2a:	b570      	push	{r4, r5, r6, lr}
    7b2c:	4c06      	ldr	r4, [pc, #24]	; (7b48 <_gettimeofday_r+0x20>)
    7b2e:	0005      	movs	r5, r0
    7b30:	0008      	movs	r0, r1
    7b32:	0011      	movs	r1, r2
    7b34:	6023      	str	r3, [r4, #0]
    7b36:	f7fe fd17 	bl	6568 <_gettimeofday>
    7b3a:	1c43      	adds	r3, r0, #1
    7b3c:	d103      	bne.n	7b46 <_gettimeofday_r+0x1e>
    7b3e:	6823      	ldr	r3, [r4, #0]
    7b40:	2b00      	cmp	r3, #0
    7b42:	d000      	beq.n	7b46 <_gettimeofday_r+0x1e>
    7b44:	602b      	str	r3, [r5, #0]
    7b46:	bd70      	pop	{r4, r5, r6, pc}
    7b48:	200040c4 	.word	0x200040c4

00007b4c <__locale_ctype_ptr_l>:
    7b4c:	30ec      	adds	r0, #236	; 0xec
    7b4e:	6800      	ldr	r0, [r0, #0]
    7b50:	4770      	bx	lr

00007b52 <__ascii_mbtowc>:
    7b52:	b082      	sub	sp, #8
    7b54:	2900      	cmp	r1, #0
    7b56:	d100      	bne.n	7b5a <__ascii_mbtowc+0x8>
    7b58:	a901      	add	r1, sp, #4
    7b5a:	1e10      	subs	r0, r2, #0
    7b5c:	d006      	beq.n	7b6c <__ascii_mbtowc+0x1a>
    7b5e:	2b00      	cmp	r3, #0
    7b60:	d006      	beq.n	7b70 <__ascii_mbtowc+0x1e>
    7b62:	7813      	ldrb	r3, [r2, #0]
    7b64:	600b      	str	r3, [r1, #0]
    7b66:	7810      	ldrb	r0, [r2, #0]
    7b68:	1e43      	subs	r3, r0, #1
    7b6a:	4198      	sbcs	r0, r3
    7b6c:	b002      	add	sp, #8
    7b6e:	4770      	bx	lr
    7b70:	2002      	movs	r0, #2
    7b72:	4240      	negs	r0, r0
    7b74:	e7fa      	b.n	7b6c <__ascii_mbtowc+0x1a>

00007b76 <__malloc_lock>:
    7b76:	4770      	bx	lr

00007b78 <__malloc_unlock>:
    7b78:	4770      	bx	lr
	...

00007b7c <__ssputs_r>:
    7b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b7e:	688e      	ldr	r6, [r1, #8]
    7b80:	b085      	sub	sp, #20
    7b82:	0007      	movs	r7, r0
    7b84:	000c      	movs	r4, r1
    7b86:	9203      	str	r2, [sp, #12]
    7b88:	9301      	str	r3, [sp, #4]
    7b8a:	429e      	cmp	r6, r3
    7b8c:	d839      	bhi.n	7c02 <__ssputs_r+0x86>
    7b8e:	2390      	movs	r3, #144	; 0x90
    7b90:	898a      	ldrh	r2, [r1, #12]
    7b92:	00db      	lsls	r3, r3, #3
    7b94:	421a      	tst	r2, r3
    7b96:	d034      	beq.n	7c02 <__ssputs_r+0x86>
    7b98:	2503      	movs	r5, #3
    7b9a:	6909      	ldr	r1, [r1, #16]
    7b9c:	6823      	ldr	r3, [r4, #0]
    7b9e:	1a5b      	subs	r3, r3, r1
    7ba0:	9302      	str	r3, [sp, #8]
    7ba2:	6963      	ldr	r3, [r4, #20]
    7ba4:	9802      	ldr	r0, [sp, #8]
    7ba6:	435d      	muls	r5, r3
    7ba8:	0feb      	lsrs	r3, r5, #31
    7baa:	195d      	adds	r5, r3, r5
    7bac:	9b01      	ldr	r3, [sp, #4]
    7bae:	106d      	asrs	r5, r5, #1
    7bb0:	3301      	adds	r3, #1
    7bb2:	181b      	adds	r3, r3, r0
    7bb4:	42ab      	cmp	r3, r5
    7bb6:	d900      	bls.n	7bba <__ssputs_r+0x3e>
    7bb8:	001d      	movs	r5, r3
    7bba:	0553      	lsls	r3, r2, #21
    7bbc:	d532      	bpl.n	7c24 <__ssputs_r+0xa8>
    7bbe:	0029      	movs	r1, r5
    7bc0:	0038      	movs	r0, r7
    7bc2:	f7ff fe2d 	bl	7820 <_malloc_r>
    7bc6:	1e06      	subs	r6, r0, #0
    7bc8:	d109      	bne.n	7bde <__ssputs_r+0x62>
    7bca:	230c      	movs	r3, #12
    7bcc:	603b      	str	r3, [r7, #0]
    7bce:	2340      	movs	r3, #64	; 0x40
    7bd0:	2001      	movs	r0, #1
    7bd2:	89a2      	ldrh	r2, [r4, #12]
    7bd4:	4240      	negs	r0, r0
    7bd6:	4313      	orrs	r3, r2
    7bd8:	81a3      	strh	r3, [r4, #12]
    7bda:	b005      	add	sp, #20
    7bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7bde:	9a02      	ldr	r2, [sp, #8]
    7be0:	6921      	ldr	r1, [r4, #16]
    7be2:	f7ff fdc2 	bl	776a <memcpy>
    7be6:	89a3      	ldrh	r3, [r4, #12]
    7be8:	4a14      	ldr	r2, [pc, #80]	; (7c3c <__ssputs_r+0xc0>)
    7bea:	401a      	ands	r2, r3
    7bec:	2380      	movs	r3, #128	; 0x80
    7bee:	4313      	orrs	r3, r2
    7bf0:	81a3      	strh	r3, [r4, #12]
    7bf2:	9b02      	ldr	r3, [sp, #8]
    7bf4:	6126      	str	r6, [r4, #16]
    7bf6:	18f6      	adds	r6, r6, r3
    7bf8:	6026      	str	r6, [r4, #0]
    7bfa:	6165      	str	r5, [r4, #20]
    7bfc:	9e01      	ldr	r6, [sp, #4]
    7bfe:	1aed      	subs	r5, r5, r3
    7c00:	60a5      	str	r5, [r4, #8]
    7c02:	9b01      	ldr	r3, [sp, #4]
    7c04:	42b3      	cmp	r3, r6
    7c06:	d200      	bcs.n	7c0a <__ssputs_r+0x8e>
    7c08:	001e      	movs	r6, r3
    7c0a:	0032      	movs	r2, r6
    7c0c:	9903      	ldr	r1, [sp, #12]
    7c0e:	6820      	ldr	r0, [r4, #0]
    7c10:	f000 fab9 	bl	8186 <memmove>
    7c14:	68a3      	ldr	r3, [r4, #8]
    7c16:	2000      	movs	r0, #0
    7c18:	1b9b      	subs	r3, r3, r6
    7c1a:	60a3      	str	r3, [r4, #8]
    7c1c:	6823      	ldr	r3, [r4, #0]
    7c1e:	199e      	adds	r6, r3, r6
    7c20:	6026      	str	r6, [r4, #0]
    7c22:	e7da      	b.n	7bda <__ssputs_r+0x5e>
    7c24:	002a      	movs	r2, r5
    7c26:	0038      	movs	r0, r7
    7c28:	f000 fabf 	bl	81aa <_realloc_r>
    7c2c:	1e06      	subs	r6, r0, #0
    7c2e:	d1e0      	bne.n	7bf2 <__ssputs_r+0x76>
    7c30:	6921      	ldr	r1, [r4, #16]
    7c32:	0038      	movs	r0, r7
    7c34:	f7ff fdaa 	bl	778c <_free_r>
    7c38:	e7c7      	b.n	7bca <__ssputs_r+0x4e>
    7c3a:	46c0      	nop			; (mov r8, r8)
    7c3c:	fffffb7f 	.word	0xfffffb7f

00007c40 <_svfiprintf_r>:
    7c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c42:	b09f      	sub	sp, #124	; 0x7c
    7c44:	9002      	str	r0, [sp, #8]
    7c46:	9305      	str	r3, [sp, #20]
    7c48:	898b      	ldrh	r3, [r1, #12]
    7c4a:	000f      	movs	r7, r1
    7c4c:	0016      	movs	r6, r2
    7c4e:	061b      	lsls	r3, r3, #24
    7c50:	d511      	bpl.n	7c76 <_svfiprintf_r+0x36>
    7c52:	690b      	ldr	r3, [r1, #16]
    7c54:	2b00      	cmp	r3, #0
    7c56:	d10e      	bne.n	7c76 <_svfiprintf_r+0x36>
    7c58:	2140      	movs	r1, #64	; 0x40
    7c5a:	f7ff fde1 	bl	7820 <_malloc_r>
    7c5e:	6038      	str	r0, [r7, #0]
    7c60:	6138      	str	r0, [r7, #16]
    7c62:	2800      	cmp	r0, #0
    7c64:	d105      	bne.n	7c72 <_svfiprintf_r+0x32>
    7c66:	230c      	movs	r3, #12
    7c68:	9a02      	ldr	r2, [sp, #8]
    7c6a:	3801      	subs	r0, #1
    7c6c:	6013      	str	r3, [r2, #0]
    7c6e:	b01f      	add	sp, #124	; 0x7c
    7c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c72:	2340      	movs	r3, #64	; 0x40
    7c74:	617b      	str	r3, [r7, #20]
    7c76:	2300      	movs	r3, #0
    7c78:	ad06      	add	r5, sp, #24
    7c7a:	616b      	str	r3, [r5, #20]
    7c7c:	3320      	adds	r3, #32
    7c7e:	766b      	strb	r3, [r5, #25]
    7c80:	3310      	adds	r3, #16
    7c82:	76ab      	strb	r3, [r5, #26]
    7c84:	0034      	movs	r4, r6
    7c86:	7823      	ldrb	r3, [r4, #0]
    7c88:	2b00      	cmp	r3, #0
    7c8a:	d147      	bne.n	7d1c <_svfiprintf_r+0xdc>
    7c8c:	1ba3      	subs	r3, r4, r6
    7c8e:	9304      	str	r3, [sp, #16]
    7c90:	d00d      	beq.n	7cae <_svfiprintf_r+0x6e>
    7c92:	1ba3      	subs	r3, r4, r6
    7c94:	0032      	movs	r2, r6
    7c96:	0039      	movs	r1, r7
    7c98:	9802      	ldr	r0, [sp, #8]
    7c9a:	f7ff ff6f 	bl	7b7c <__ssputs_r>
    7c9e:	1c43      	adds	r3, r0, #1
    7ca0:	d100      	bne.n	7ca4 <_svfiprintf_r+0x64>
    7ca2:	e0b5      	b.n	7e10 <_svfiprintf_r+0x1d0>
    7ca4:	696a      	ldr	r2, [r5, #20]
    7ca6:	9b04      	ldr	r3, [sp, #16]
    7ca8:	4694      	mov	ip, r2
    7caa:	4463      	add	r3, ip
    7cac:	616b      	str	r3, [r5, #20]
    7cae:	7823      	ldrb	r3, [r4, #0]
    7cb0:	2b00      	cmp	r3, #0
    7cb2:	d100      	bne.n	7cb6 <_svfiprintf_r+0x76>
    7cb4:	e0ac      	b.n	7e10 <_svfiprintf_r+0x1d0>
    7cb6:	2201      	movs	r2, #1
    7cb8:	2300      	movs	r3, #0
    7cba:	4252      	negs	r2, r2
    7cbc:	606a      	str	r2, [r5, #4]
    7cbe:	a902      	add	r1, sp, #8
    7cc0:	3254      	adds	r2, #84	; 0x54
    7cc2:	1852      	adds	r2, r2, r1
    7cc4:	3401      	adds	r4, #1
    7cc6:	602b      	str	r3, [r5, #0]
    7cc8:	60eb      	str	r3, [r5, #12]
    7cca:	60ab      	str	r3, [r5, #8]
    7ccc:	7013      	strb	r3, [r2, #0]
    7cce:	65ab      	str	r3, [r5, #88]	; 0x58
    7cd0:	4e58      	ldr	r6, [pc, #352]	; (7e34 <_svfiprintf_r+0x1f4>)
    7cd2:	2205      	movs	r2, #5
    7cd4:	7821      	ldrb	r1, [r4, #0]
    7cd6:	0030      	movs	r0, r6
    7cd8:	f000 fa4a 	bl	8170 <memchr>
    7cdc:	1c62      	adds	r2, r4, #1
    7cde:	2800      	cmp	r0, #0
    7ce0:	d120      	bne.n	7d24 <_svfiprintf_r+0xe4>
    7ce2:	6829      	ldr	r1, [r5, #0]
    7ce4:	06cb      	lsls	r3, r1, #27
    7ce6:	d504      	bpl.n	7cf2 <_svfiprintf_r+0xb2>
    7ce8:	2353      	movs	r3, #83	; 0x53
    7cea:	ae02      	add	r6, sp, #8
    7cec:	3020      	adds	r0, #32
    7cee:	199b      	adds	r3, r3, r6
    7cf0:	7018      	strb	r0, [r3, #0]
    7cf2:	070b      	lsls	r3, r1, #28
    7cf4:	d504      	bpl.n	7d00 <_svfiprintf_r+0xc0>
    7cf6:	2353      	movs	r3, #83	; 0x53
    7cf8:	202b      	movs	r0, #43	; 0x2b
    7cfa:	ae02      	add	r6, sp, #8
    7cfc:	199b      	adds	r3, r3, r6
    7cfe:	7018      	strb	r0, [r3, #0]
    7d00:	7823      	ldrb	r3, [r4, #0]
    7d02:	2b2a      	cmp	r3, #42	; 0x2a
    7d04:	d016      	beq.n	7d34 <_svfiprintf_r+0xf4>
    7d06:	2000      	movs	r0, #0
    7d08:	210a      	movs	r1, #10
    7d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7d0c:	7822      	ldrb	r2, [r4, #0]
    7d0e:	3a30      	subs	r2, #48	; 0x30
    7d10:	2a09      	cmp	r2, #9
    7d12:	d955      	bls.n	7dc0 <_svfiprintf_r+0x180>
    7d14:	2800      	cmp	r0, #0
    7d16:	d015      	beq.n	7d44 <_svfiprintf_r+0x104>
    7d18:	9309      	str	r3, [sp, #36]	; 0x24
    7d1a:	e013      	b.n	7d44 <_svfiprintf_r+0x104>
    7d1c:	2b25      	cmp	r3, #37	; 0x25
    7d1e:	d0b5      	beq.n	7c8c <_svfiprintf_r+0x4c>
    7d20:	3401      	adds	r4, #1
    7d22:	e7b0      	b.n	7c86 <_svfiprintf_r+0x46>
    7d24:	2301      	movs	r3, #1
    7d26:	1b80      	subs	r0, r0, r6
    7d28:	4083      	lsls	r3, r0
    7d2a:	6829      	ldr	r1, [r5, #0]
    7d2c:	0014      	movs	r4, r2
    7d2e:	430b      	orrs	r3, r1
    7d30:	602b      	str	r3, [r5, #0]
    7d32:	e7cd      	b.n	7cd0 <_svfiprintf_r+0x90>
    7d34:	9b05      	ldr	r3, [sp, #20]
    7d36:	1d18      	adds	r0, r3, #4
    7d38:	681b      	ldr	r3, [r3, #0]
    7d3a:	9005      	str	r0, [sp, #20]
    7d3c:	2b00      	cmp	r3, #0
    7d3e:	db39      	blt.n	7db4 <_svfiprintf_r+0x174>
    7d40:	9309      	str	r3, [sp, #36]	; 0x24
    7d42:	0014      	movs	r4, r2
    7d44:	7823      	ldrb	r3, [r4, #0]
    7d46:	2b2e      	cmp	r3, #46	; 0x2e
    7d48:	d10b      	bne.n	7d62 <_svfiprintf_r+0x122>
    7d4a:	7863      	ldrb	r3, [r4, #1]
    7d4c:	1c62      	adds	r2, r4, #1
    7d4e:	2b2a      	cmp	r3, #42	; 0x2a
    7d50:	d13e      	bne.n	7dd0 <_svfiprintf_r+0x190>
    7d52:	9b05      	ldr	r3, [sp, #20]
    7d54:	3402      	adds	r4, #2
    7d56:	1d1a      	adds	r2, r3, #4
    7d58:	681b      	ldr	r3, [r3, #0]
    7d5a:	9205      	str	r2, [sp, #20]
    7d5c:	2b00      	cmp	r3, #0
    7d5e:	db34      	blt.n	7dca <_svfiprintf_r+0x18a>
    7d60:	9307      	str	r3, [sp, #28]
    7d62:	4e35      	ldr	r6, [pc, #212]	; (7e38 <_svfiprintf_r+0x1f8>)
    7d64:	7821      	ldrb	r1, [r4, #0]
    7d66:	2203      	movs	r2, #3
    7d68:	0030      	movs	r0, r6
    7d6a:	f000 fa01 	bl	8170 <memchr>
    7d6e:	2800      	cmp	r0, #0
    7d70:	d006      	beq.n	7d80 <_svfiprintf_r+0x140>
    7d72:	2340      	movs	r3, #64	; 0x40
    7d74:	1b80      	subs	r0, r0, r6
    7d76:	4083      	lsls	r3, r0
    7d78:	682a      	ldr	r2, [r5, #0]
    7d7a:	3401      	adds	r4, #1
    7d7c:	4313      	orrs	r3, r2
    7d7e:	602b      	str	r3, [r5, #0]
    7d80:	7821      	ldrb	r1, [r4, #0]
    7d82:	2206      	movs	r2, #6
    7d84:	482d      	ldr	r0, [pc, #180]	; (7e3c <_svfiprintf_r+0x1fc>)
    7d86:	1c66      	adds	r6, r4, #1
    7d88:	7629      	strb	r1, [r5, #24]
    7d8a:	f000 f9f1 	bl	8170 <memchr>
    7d8e:	2800      	cmp	r0, #0
    7d90:	d046      	beq.n	7e20 <_svfiprintf_r+0x1e0>
    7d92:	4b2b      	ldr	r3, [pc, #172]	; (7e40 <_svfiprintf_r+0x200>)
    7d94:	2b00      	cmp	r3, #0
    7d96:	d12f      	bne.n	7df8 <_svfiprintf_r+0x1b8>
    7d98:	6829      	ldr	r1, [r5, #0]
    7d9a:	9b05      	ldr	r3, [sp, #20]
    7d9c:	2207      	movs	r2, #7
    7d9e:	05c9      	lsls	r1, r1, #23
    7da0:	d528      	bpl.n	7df4 <_svfiprintf_r+0x1b4>
    7da2:	189b      	adds	r3, r3, r2
    7da4:	4393      	bics	r3, r2
    7da6:	3308      	adds	r3, #8
    7da8:	9305      	str	r3, [sp, #20]
    7daa:	696b      	ldr	r3, [r5, #20]
    7dac:	9a03      	ldr	r2, [sp, #12]
    7dae:	189b      	adds	r3, r3, r2
    7db0:	616b      	str	r3, [r5, #20]
    7db2:	e767      	b.n	7c84 <_svfiprintf_r+0x44>
    7db4:	425b      	negs	r3, r3
    7db6:	60eb      	str	r3, [r5, #12]
    7db8:	2302      	movs	r3, #2
    7dba:	430b      	orrs	r3, r1
    7dbc:	602b      	str	r3, [r5, #0]
    7dbe:	e7c0      	b.n	7d42 <_svfiprintf_r+0x102>
    7dc0:	434b      	muls	r3, r1
    7dc2:	3401      	adds	r4, #1
    7dc4:	189b      	adds	r3, r3, r2
    7dc6:	2001      	movs	r0, #1
    7dc8:	e7a0      	b.n	7d0c <_svfiprintf_r+0xcc>
    7dca:	2301      	movs	r3, #1
    7dcc:	425b      	negs	r3, r3
    7dce:	e7c7      	b.n	7d60 <_svfiprintf_r+0x120>
    7dd0:	2300      	movs	r3, #0
    7dd2:	0014      	movs	r4, r2
    7dd4:	200a      	movs	r0, #10
    7dd6:	001a      	movs	r2, r3
    7dd8:	606b      	str	r3, [r5, #4]
    7dda:	7821      	ldrb	r1, [r4, #0]
    7ddc:	3930      	subs	r1, #48	; 0x30
    7dde:	2909      	cmp	r1, #9
    7de0:	d903      	bls.n	7dea <_svfiprintf_r+0x1aa>
    7de2:	2b00      	cmp	r3, #0
    7de4:	d0bd      	beq.n	7d62 <_svfiprintf_r+0x122>
    7de6:	9207      	str	r2, [sp, #28]
    7de8:	e7bb      	b.n	7d62 <_svfiprintf_r+0x122>
    7dea:	4342      	muls	r2, r0
    7dec:	3401      	adds	r4, #1
    7dee:	1852      	adds	r2, r2, r1
    7df0:	2301      	movs	r3, #1
    7df2:	e7f2      	b.n	7dda <_svfiprintf_r+0x19a>
    7df4:	3307      	adds	r3, #7
    7df6:	e7d5      	b.n	7da4 <_svfiprintf_r+0x164>
    7df8:	ab05      	add	r3, sp, #20
    7dfa:	9300      	str	r3, [sp, #0]
    7dfc:	003a      	movs	r2, r7
    7dfe:	4b11      	ldr	r3, [pc, #68]	; (7e44 <_svfiprintf_r+0x204>)
    7e00:	0029      	movs	r1, r5
    7e02:	9802      	ldr	r0, [sp, #8]
    7e04:	e000      	b.n	7e08 <_svfiprintf_r+0x1c8>
    7e06:	bf00      	nop
    7e08:	9003      	str	r0, [sp, #12]
    7e0a:	9b03      	ldr	r3, [sp, #12]
    7e0c:	3301      	adds	r3, #1
    7e0e:	d1cc      	bne.n	7daa <_svfiprintf_r+0x16a>
    7e10:	89bb      	ldrh	r3, [r7, #12]
    7e12:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7e14:	065b      	lsls	r3, r3, #25
    7e16:	d400      	bmi.n	7e1a <_svfiprintf_r+0x1da>
    7e18:	e729      	b.n	7c6e <_svfiprintf_r+0x2e>
    7e1a:	2001      	movs	r0, #1
    7e1c:	4240      	negs	r0, r0
    7e1e:	e726      	b.n	7c6e <_svfiprintf_r+0x2e>
    7e20:	ab05      	add	r3, sp, #20
    7e22:	9300      	str	r3, [sp, #0]
    7e24:	003a      	movs	r2, r7
    7e26:	4b07      	ldr	r3, [pc, #28]	; (7e44 <_svfiprintf_r+0x204>)
    7e28:	0029      	movs	r1, r5
    7e2a:	9802      	ldr	r0, [sp, #8]
    7e2c:	f000 f87a 	bl	7f24 <_printf_i>
    7e30:	e7ea      	b.n	7e08 <_svfiprintf_r+0x1c8>
    7e32:	46c0      	nop			; (mov r8, r8)
    7e34:	000093c2 	.word	0x000093c2
    7e38:	000093c8 	.word	0x000093c8
    7e3c:	000093cc 	.word	0x000093cc
    7e40:	00000000 	.word	0x00000000
    7e44:	00007b7d 	.word	0x00007b7d

00007e48 <_printf_common>:
    7e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7e4a:	0015      	movs	r5, r2
    7e4c:	9301      	str	r3, [sp, #4]
    7e4e:	688a      	ldr	r2, [r1, #8]
    7e50:	690b      	ldr	r3, [r1, #16]
    7e52:	9000      	str	r0, [sp, #0]
    7e54:	000c      	movs	r4, r1
    7e56:	4293      	cmp	r3, r2
    7e58:	da00      	bge.n	7e5c <_printf_common+0x14>
    7e5a:	0013      	movs	r3, r2
    7e5c:	0022      	movs	r2, r4
    7e5e:	602b      	str	r3, [r5, #0]
    7e60:	3243      	adds	r2, #67	; 0x43
    7e62:	7812      	ldrb	r2, [r2, #0]
    7e64:	2a00      	cmp	r2, #0
    7e66:	d001      	beq.n	7e6c <_printf_common+0x24>
    7e68:	3301      	adds	r3, #1
    7e6a:	602b      	str	r3, [r5, #0]
    7e6c:	6823      	ldr	r3, [r4, #0]
    7e6e:	069b      	lsls	r3, r3, #26
    7e70:	d502      	bpl.n	7e78 <_printf_common+0x30>
    7e72:	682b      	ldr	r3, [r5, #0]
    7e74:	3302      	adds	r3, #2
    7e76:	602b      	str	r3, [r5, #0]
    7e78:	2706      	movs	r7, #6
    7e7a:	6823      	ldr	r3, [r4, #0]
    7e7c:	401f      	ands	r7, r3
    7e7e:	d027      	beq.n	7ed0 <_printf_common+0x88>
    7e80:	0023      	movs	r3, r4
    7e82:	3343      	adds	r3, #67	; 0x43
    7e84:	781b      	ldrb	r3, [r3, #0]
    7e86:	1e5a      	subs	r2, r3, #1
    7e88:	4193      	sbcs	r3, r2
    7e8a:	6822      	ldr	r2, [r4, #0]
    7e8c:	0692      	lsls	r2, r2, #26
    7e8e:	d430      	bmi.n	7ef2 <_printf_common+0xaa>
    7e90:	0022      	movs	r2, r4
    7e92:	9901      	ldr	r1, [sp, #4]
    7e94:	3243      	adds	r2, #67	; 0x43
    7e96:	9800      	ldr	r0, [sp, #0]
    7e98:	9e08      	ldr	r6, [sp, #32]
    7e9a:	47b0      	blx	r6
    7e9c:	1c43      	adds	r3, r0, #1
    7e9e:	d025      	beq.n	7eec <_printf_common+0xa4>
    7ea0:	2306      	movs	r3, #6
    7ea2:	6820      	ldr	r0, [r4, #0]
    7ea4:	682a      	ldr	r2, [r5, #0]
    7ea6:	68e1      	ldr	r1, [r4, #12]
    7ea8:	4003      	ands	r3, r0
    7eaa:	2500      	movs	r5, #0
    7eac:	2b04      	cmp	r3, #4
    7eae:	d103      	bne.n	7eb8 <_printf_common+0x70>
    7eb0:	1a8d      	subs	r5, r1, r2
    7eb2:	43eb      	mvns	r3, r5
    7eb4:	17db      	asrs	r3, r3, #31
    7eb6:	401d      	ands	r5, r3
    7eb8:	68a3      	ldr	r3, [r4, #8]
    7eba:	6922      	ldr	r2, [r4, #16]
    7ebc:	4293      	cmp	r3, r2
    7ebe:	dd01      	ble.n	7ec4 <_printf_common+0x7c>
    7ec0:	1a9b      	subs	r3, r3, r2
    7ec2:	18ed      	adds	r5, r5, r3
    7ec4:	2700      	movs	r7, #0
    7ec6:	42bd      	cmp	r5, r7
    7ec8:	d120      	bne.n	7f0c <_printf_common+0xc4>
    7eca:	2000      	movs	r0, #0
    7ecc:	e010      	b.n	7ef0 <_printf_common+0xa8>
    7ece:	3701      	adds	r7, #1
    7ed0:	68e3      	ldr	r3, [r4, #12]
    7ed2:	682a      	ldr	r2, [r5, #0]
    7ed4:	1a9b      	subs	r3, r3, r2
    7ed6:	429f      	cmp	r7, r3
    7ed8:	dad2      	bge.n	7e80 <_printf_common+0x38>
    7eda:	0022      	movs	r2, r4
    7edc:	2301      	movs	r3, #1
    7ede:	3219      	adds	r2, #25
    7ee0:	9901      	ldr	r1, [sp, #4]
    7ee2:	9800      	ldr	r0, [sp, #0]
    7ee4:	9e08      	ldr	r6, [sp, #32]
    7ee6:	47b0      	blx	r6
    7ee8:	1c43      	adds	r3, r0, #1
    7eea:	d1f0      	bne.n	7ece <_printf_common+0x86>
    7eec:	2001      	movs	r0, #1
    7eee:	4240      	negs	r0, r0
    7ef0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7ef2:	2030      	movs	r0, #48	; 0x30
    7ef4:	18e1      	adds	r1, r4, r3
    7ef6:	3143      	adds	r1, #67	; 0x43
    7ef8:	7008      	strb	r0, [r1, #0]
    7efa:	0021      	movs	r1, r4
    7efc:	1c5a      	adds	r2, r3, #1
    7efe:	3145      	adds	r1, #69	; 0x45
    7f00:	7809      	ldrb	r1, [r1, #0]
    7f02:	18a2      	adds	r2, r4, r2
    7f04:	3243      	adds	r2, #67	; 0x43
    7f06:	3302      	adds	r3, #2
    7f08:	7011      	strb	r1, [r2, #0]
    7f0a:	e7c1      	b.n	7e90 <_printf_common+0x48>
    7f0c:	0022      	movs	r2, r4
    7f0e:	2301      	movs	r3, #1
    7f10:	321a      	adds	r2, #26
    7f12:	9901      	ldr	r1, [sp, #4]
    7f14:	9800      	ldr	r0, [sp, #0]
    7f16:	9e08      	ldr	r6, [sp, #32]
    7f18:	47b0      	blx	r6
    7f1a:	1c43      	adds	r3, r0, #1
    7f1c:	d0e6      	beq.n	7eec <_printf_common+0xa4>
    7f1e:	3701      	adds	r7, #1
    7f20:	e7d1      	b.n	7ec6 <_printf_common+0x7e>
	...

00007f24 <_printf_i>:
    7f24:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f26:	b08b      	sub	sp, #44	; 0x2c
    7f28:	9206      	str	r2, [sp, #24]
    7f2a:	000a      	movs	r2, r1
    7f2c:	3243      	adds	r2, #67	; 0x43
    7f2e:	9307      	str	r3, [sp, #28]
    7f30:	9005      	str	r0, [sp, #20]
    7f32:	9204      	str	r2, [sp, #16]
    7f34:	7e0a      	ldrb	r2, [r1, #24]
    7f36:	000c      	movs	r4, r1
    7f38:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7f3a:	2a6e      	cmp	r2, #110	; 0x6e
    7f3c:	d100      	bne.n	7f40 <_printf_i+0x1c>
    7f3e:	e08f      	b.n	8060 <_printf_i+0x13c>
    7f40:	d817      	bhi.n	7f72 <_printf_i+0x4e>
    7f42:	2a63      	cmp	r2, #99	; 0x63
    7f44:	d02c      	beq.n	7fa0 <_printf_i+0x7c>
    7f46:	d808      	bhi.n	7f5a <_printf_i+0x36>
    7f48:	2a00      	cmp	r2, #0
    7f4a:	d100      	bne.n	7f4e <_printf_i+0x2a>
    7f4c:	e099      	b.n	8082 <_printf_i+0x15e>
    7f4e:	2a58      	cmp	r2, #88	; 0x58
    7f50:	d054      	beq.n	7ffc <_printf_i+0xd8>
    7f52:	0026      	movs	r6, r4
    7f54:	3642      	adds	r6, #66	; 0x42
    7f56:	7032      	strb	r2, [r6, #0]
    7f58:	e029      	b.n	7fae <_printf_i+0x8a>
    7f5a:	2a64      	cmp	r2, #100	; 0x64
    7f5c:	d001      	beq.n	7f62 <_printf_i+0x3e>
    7f5e:	2a69      	cmp	r2, #105	; 0x69
    7f60:	d1f7      	bne.n	7f52 <_printf_i+0x2e>
    7f62:	6821      	ldr	r1, [r4, #0]
    7f64:	681a      	ldr	r2, [r3, #0]
    7f66:	0608      	lsls	r0, r1, #24
    7f68:	d523      	bpl.n	7fb2 <_printf_i+0x8e>
    7f6a:	1d11      	adds	r1, r2, #4
    7f6c:	6019      	str	r1, [r3, #0]
    7f6e:	6815      	ldr	r5, [r2, #0]
    7f70:	e025      	b.n	7fbe <_printf_i+0x9a>
    7f72:	2a73      	cmp	r2, #115	; 0x73
    7f74:	d100      	bne.n	7f78 <_printf_i+0x54>
    7f76:	e088      	b.n	808a <_printf_i+0x166>
    7f78:	d808      	bhi.n	7f8c <_printf_i+0x68>
    7f7a:	2a6f      	cmp	r2, #111	; 0x6f
    7f7c:	d029      	beq.n	7fd2 <_printf_i+0xae>
    7f7e:	2a70      	cmp	r2, #112	; 0x70
    7f80:	d1e7      	bne.n	7f52 <_printf_i+0x2e>
    7f82:	2220      	movs	r2, #32
    7f84:	6809      	ldr	r1, [r1, #0]
    7f86:	430a      	orrs	r2, r1
    7f88:	6022      	str	r2, [r4, #0]
    7f8a:	e003      	b.n	7f94 <_printf_i+0x70>
    7f8c:	2a75      	cmp	r2, #117	; 0x75
    7f8e:	d020      	beq.n	7fd2 <_printf_i+0xae>
    7f90:	2a78      	cmp	r2, #120	; 0x78
    7f92:	d1de      	bne.n	7f52 <_printf_i+0x2e>
    7f94:	0022      	movs	r2, r4
    7f96:	2178      	movs	r1, #120	; 0x78
    7f98:	3245      	adds	r2, #69	; 0x45
    7f9a:	7011      	strb	r1, [r2, #0]
    7f9c:	4a6c      	ldr	r2, [pc, #432]	; (8150 <_printf_i+0x22c>)
    7f9e:	e030      	b.n	8002 <_printf_i+0xde>
    7fa0:	000e      	movs	r6, r1
    7fa2:	681a      	ldr	r2, [r3, #0]
    7fa4:	3642      	adds	r6, #66	; 0x42
    7fa6:	1d11      	adds	r1, r2, #4
    7fa8:	6019      	str	r1, [r3, #0]
    7faa:	6813      	ldr	r3, [r2, #0]
    7fac:	7033      	strb	r3, [r6, #0]
    7fae:	2301      	movs	r3, #1
    7fb0:	e079      	b.n	80a6 <_printf_i+0x182>
    7fb2:	0649      	lsls	r1, r1, #25
    7fb4:	d5d9      	bpl.n	7f6a <_printf_i+0x46>
    7fb6:	1d11      	adds	r1, r2, #4
    7fb8:	6019      	str	r1, [r3, #0]
    7fba:	2300      	movs	r3, #0
    7fbc:	5ed5      	ldrsh	r5, [r2, r3]
    7fbe:	2d00      	cmp	r5, #0
    7fc0:	da03      	bge.n	7fca <_printf_i+0xa6>
    7fc2:	232d      	movs	r3, #45	; 0x2d
    7fc4:	9a04      	ldr	r2, [sp, #16]
    7fc6:	426d      	negs	r5, r5
    7fc8:	7013      	strb	r3, [r2, #0]
    7fca:	4b62      	ldr	r3, [pc, #392]	; (8154 <_printf_i+0x230>)
    7fcc:	270a      	movs	r7, #10
    7fce:	9303      	str	r3, [sp, #12]
    7fd0:	e02f      	b.n	8032 <_printf_i+0x10e>
    7fd2:	6820      	ldr	r0, [r4, #0]
    7fd4:	6819      	ldr	r1, [r3, #0]
    7fd6:	0605      	lsls	r5, r0, #24
    7fd8:	d503      	bpl.n	7fe2 <_printf_i+0xbe>
    7fda:	1d08      	adds	r0, r1, #4
    7fdc:	6018      	str	r0, [r3, #0]
    7fde:	680d      	ldr	r5, [r1, #0]
    7fe0:	e005      	b.n	7fee <_printf_i+0xca>
    7fe2:	0640      	lsls	r0, r0, #25
    7fe4:	d5f9      	bpl.n	7fda <_printf_i+0xb6>
    7fe6:	680d      	ldr	r5, [r1, #0]
    7fe8:	1d08      	adds	r0, r1, #4
    7fea:	6018      	str	r0, [r3, #0]
    7fec:	b2ad      	uxth	r5, r5
    7fee:	4b59      	ldr	r3, [pc, #356]	; (8154 <_printf_i+0x230>)
    7ff0:	2708      	movs	r7, #8
    7ff2:	9303      	str	r3, [sp, #12]
    7ff4:	2a6f      	cmp	r2, #111	; 0x6f
    7ff6:	d018      	beq.n	802a <_printf_i+0x106>
    7ff8:	270a      	movs	r7, #10
    7ffa:	e016      	b.n	802a <_printf_i+0x106>
    7ffc:	3145      	adds	r1, #69	; 0x45
    7ffe:	700a      	strb	r2, [r1, #0]
    8000:	4a54      	ldr	r2, [pc, #336]	; (8154 <_printf_i+0x230>)
    8002:	9203      	str	r2, [sp, #12]
    8004:	681a      	ldr	r2, [r3, #0]
    8006:	6821      	ldr	r1, [r4, #0]
    8008:	1d10      	adds	r0, r2, #4
    800a:	6018      	str	r0, [r3, #0]
    800c:	6815      	ldr	r5, [r2, #0]
    800e:	0608      	lsls	r0, r1, #24
    8010:	d522      	bpl.n	8058 <_printf_i+0x134>
    8012:	07cb      	lsls	r3, r1, #31
    8014:	d502      	bpl.n	801c <_printf_i+0xf8>
    8016:	2320      	movs	r3, #32
    8018:	4319      	orrs	r1, r3
    801a:	6021      	str	r1, [r4, #0]
    801c:	2710      	movs	r7, #16
    801e:	2d00      	cmp	r5, #0
    8020:	d103      	bne.n	802a <_printf_i+0x106>
    8022:	2320      	movs	r3, #32
    8024:	6822      	ldr	r2, [r4, #0]
    8026:	439a      	bics	r2, r3
    8028:	6022      	str	r2, [r4, #0]
    802a:	0023      	movs	r3, r4
    802c:	2200      	movs	r2, #0
    802e:	3343      	adds	r3, #67	; 0x43
    8030:	701a      	strb	r2, [r3, #0]
    8032:	6863      	ldr	r3, [r4, #4]
    8034:	60a3      	str	r3, [r4, #8]
    8036:	2b00      	cmp	r3, #0
    8038:	db5c      	blt.n	80f4 <_printf_i+0x1d0>
    803a:	2204      	movs	r2, #4
    803c:	6821      	ldr	r1, [r4, #0]
    803e:	4391      	bics	r1, r2
    8040:	6021      	str	r1, [r4, #0]
    8042:	2d00      	cmp	r5, #0
    8044:	d158      	bne.n	80f8 <_printf_i+0x1d4>
    8046:	9e04      	ldr	r6, [sp, #16]
    8048:	2b00      	cmp	r3, #0
    804a:	d064      	beq.n	8116 <_printf_i+0x1f2>
    804c:	0026      	movs	r6, r4
    804e:	9b03      	ldr	r3, [sp, #12]
    8050:	3642      	adds	r6, #66	; 0x42
    8052:	781b      	ldrb	r3, [r3, #0]
    8054:	7033      	strb	r3, [r6, #0]
    8056:	e05e      	b.n	8116 <_printf_i+0x1f2>
    8058:	0648      	lsls	r0, r1, #25
    805a:	d5da      	bpl.n	8012 <_printf_i+0xee>
    805c:	b2ad      	uxth	r5, r5
    805e:	e7d8      	b.n	8012 <_printf_i+0xee>
    8060:	6809      	ldr	r1, [r1, #0]
    8062:	681a      	ldr	r2, [r3, #0]
    8064:	0608      	lsls	r0, r1, #24
    8066:	d505      	bpl.n	8074 <_printf_i+0x150>
    8068:	1d11      	adds	r1, r2, #4
    806a:	6019      	str	r1, [r3, #0]
    806c:	6813      	ldr	r3, [r2, #0]
    806e:	6962      	ldr	r2, [r4, #20]
    8070:	601a      	str	r2, [r3, #0]
    8072:	e006      	b.n	8082 <_printf_i+0x15e>
    8074:	0649      	lsls	r1, r1, #25
    8076:	d5f7      	bpl.n	8068 <_printf_i+0x144>
    8078:	1d11      	adds	r1, r2, #4
    807a:	6019      	str	r1, [r3, #0]
    807c:	6813      	ldr	r3, [r2, #0]
    807e:	8aa2      	ldrh	r2, [r4, #20]
    8080:	801a      	strh	r2, [r3, #0]
    8082:	2300      	movs	r3, #0
    8084:	9e04      	ldr	r6, [sp, #16]
    8086:	6123      	str	r3, [r4, #16]
    8088:	e054      	b.n	8134 <_printf_i+0x210>
    808a:	681a      	ldr	r2, [r3, #0]
    808c:	1d11      	adds	r1, r2, #4
    808e:	6019      	str	r1, [r3, #0]
    8090:	6816      	ldr	r6, [r2, #0]
    8092:	2100      	movs	r1, #0
    8094:	6862      	ldr	r2, [r4, #4]
    8096:	0030      	movs	r0, r6
    8098:	f000 f86a 	bl	8170 <memchr>
    809c:	2800      	cmp	r0, #0
    809e:	d001      	beq.n	80a4 <_printf_i+0x180>
    80a0:	1b80      	subs	r0, r0, r6
    80a2:	6060      	str	r0, [r4, #4]
    80a4:	6863      	ldr	r3, [r4, #4]
    80a6:	6123      	str	r3, [r4, #16]
    80a8:	2300      	movs	r3, #0
    80aa:	9a04      	ldr	r2, [sp, #16]
    80ac:	7013      	strb	r3, [r2, #0]
    80ae:	e041      	b.n	8134 <_printf_i+0x210>
    80b0:	6923      	ldr	r3, [r4, #16]
    80b2:	0032      	movs	r2, r6
    80b4:	9906      	ldr	r1, [sp, #24]
    80b6:	9805      	ldr	r0, [sp, #20]
    80b8:	9d07      	ldr	r5, [sp, #28]
    80ba:	47a8      	blx	r5
    80bc:	1c43      	adds	r3, r0, #1
    80be:	d043      	beq.n	8148 <_printf_i+0x224>
    80c0:	6823      	ldr	r3, [r4, #0]
    80c2:	2500      	movs	r5, #0
    80c4:	079b      	lsls	r3, r3, #30
    80c6:	d40f      	bmi.n	80e8 <_printf_i+0x1c4>
    80c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    80ca:	68e0      	ldr	r0, [r4, #12]
    80cc:	4298      	cmp	r0, r3
    80ce:	da3d      	bge.n	814c <_printf_i+0x228>
    80d0:	0018      	movs	r0, r3
    80d2:	e03b      	b.n	814c <_printf_i+0x228>
    80d4:	0022      	movs	r2, r4
    80d6:	2301      	movs	r3, #1
    80d8:	3219      	adds	r2, #25
    80da:	9906      	ldr	r1, [sp, #24]
    80dc:	9805      	ldr	r0, [sp, #20]
    80de:	9e07      	ldr	r6, [sp, #28]
    80e0:	47b0      	blx	r6
    80e2:	1c43      	adds	r3, r0, #1
    80e4:	d030      	beq.n	8148 <_printf_i+0x224>
    80e6:	3501      	adds	r5, #1
    80e8:	68e3      	ldr	r3, [r4, #12]
    80ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
    80ec:	1a9b      	subs	r3, r3, r2
    80ee:	429d      	cmp	r5, r3
    80f0:	dbf0      	blt.n	80d4 <_printf_i+0x1b0>
    80f2:	e7e9      	b.n	80c8 <_printf_i+0x1a4>
    80f4:	2d00      	cmp	r5, #0
    80f6:	d0a9      	beq.n	804c <_printf_i+0x128>
    80f8:	9e04      	ldr	r6, [sp, #16]
    80fa:	0028      	movs	r0, r5
    80fc:	0039      	movs	r1, r7
    80fe:	f7fe fb1b 	bl	6738 <__aeabi_uidivmod>
    8102:	9b03      	ldr	r3, [sp, #12]
    8104:	3e01      	subs	r6, #1
    8106:	5c5b      	ldrb	r3, [r3, r1]
    8108:	0028      	movs	r0, r5
    810a:	7033      	strb	r3, [r6, #0]
    810c:	0039      	movs	r1, r7
    810e:	f7fe fa8d 	bl	662c <__udivsi3>
    8112:	1e05      	subs	r5, r0, #0
    8114:	d1f1      	bne.n	80fa <_printf_i+0x1d6>
    8116:	2f08      	cmp	r7, #8
    8118:	d109      	bne.n	812e <_printf_i+0x20a>
    811a:	6823      	ldr	r3, [r4, #0]
    811c:	07db      	lsls	r3, r3, #31
    811e:	d506      	bpl.n	812e <_printf_i+0x20a>
    8120:	6863      	ldr	r3, [r4, #4]
    8122:	6922      	ldr	r2, [r4, #16]
    8124:	4293      	cmp	r3, r2
    8126:	dc02      	bgt.n	812e <_printf_i+0x20a>
    8128:	2330      	movs	r3, #48	; 0x30
    812a:	3e01      	subs	r6, #1
    812c:	7033      	strb	r3, [r6, #0]
    812e:	9b04      	ldr	r3, [sp, #16]
    8130:	1b9b      	subs	r3, r3, r6
    8132:	6123      	str	r3, [r4, #16]
    8134:	9b07      	ldr	r3, [sp, #28]
    8136:	aa09      	add	r2, sp, #36	; 0x24
    8138:	9300      	str	r3, [sp, #0]
    813a:	0021      	movs	r1, r4
    813c:	9b06      	ldr	r3, [sp, #24]
    813e:	9805      	ldr	r0, [sp, #20]
    8140:	f7ff fe82 	bl	7e48 <_printf_common>
    8144:	1c43      	adds	r3, r0, #1
    8146:	d1b3      	bne.n	80b0 <_printf_i+0x18c>
    8148:	2001      	movs	r0, #1
    814a:	4240      	negs	r0, r0
    814c:	b00b      	add	sp, #44	; 0x2c
    814e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8150:	000093e4 	.word	0x000093e4
    8154:	000093d3 	.word	0x000093d3

00008158 <__ascii_wctomb>:
    8158:	1e0b      	subs	r3, r1, #0
    815a:	d004      	beq.n	8166 <__ascii_wctomb+0xe>
    815c:	2aff      	cmp	r2, #255	; 0xff
    815e:	d904      	bls.n	816a <__ascii_wctomb+0x12>
    8160:	238a      	movs	r3, #138	; 0x8a
    8162:	6003      	str	r3, [r0, #0]
    8164:	3b8b      	subs	r3, #139	; 0x8b
    8166:	0018      	movs	r0, r3
    8168:	4770      	bx	lr
    816a:	700a      	strb	r2, [r1, #0]
    816c:	2301      	movs	r3, #1
    816e:	e7fa      	b.n	8166 <__ascii_wctomb+0xe>

00008170 <memchr>:
    8170:	b2c9      	uxtb	r1, r1
    8172:	1882      	adds	r2, r0, r2
    8174:	4290      	cmp	r0, r2
    8176:	d101      	bne.n	817c <memchr+0xc>
    8178:	2000      	movs	r0, #0
    817a:	4770      	bx	lr
    817c:	7803      	ldrb	r3, [r0, #0]
    817e:	428b      	cmp	r3, r1
    8180:	d0fb      	beq.n	817a <memchr+0xa>
    8182:	3001      	adds	r0, #1
    8184:	e7f6      	b.n	8174 <memchr+0x4>

00008186 <memmove>:
    8186:	b510      	push	{r4, lr}
    8188:	4288      	cmp	r0, r1
    818a:	d902      	bls.n	8192 <memmove+0xc>
    818c:	188b      	adds	r3, r1, r2
    818e:	4298      	cmp	r0, r3
    8190:	d308      	bcc.n	81a4 <memmove+0x1e>
    8192:	2300      	movs	r3, #0
    8194:	429a      	cmp	r2, r3
    8196:	d007      	beq.n	81a8 <memmove+0x22>
    8198:	5ccc      	ldrb	r4, [r1, r3]
    819a:	54c4      	strb	r4, [r0, r3]
    819c:	3301      	adds	r3, #1
    819e:	e7f9      	b.n	8194 <memmove+0xe>
    81a0:	5c8b      	ldrb	r3, [r1, r2]
    81a2:	5483      	strb	r3, [r0, r2]
    81a4:	3a01      	subs	r2, #1
    81a6:	d2fb      	bcs.n	81a0 <memmove+0x1a>
    81a8:	bd10      	pop	{r4, pc}

000081aa <_realloc_r>:
    81aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81ac:	0007      	movs	r7, r0
    81ae:	000d      	movs	r5, r1
    81b0:	0016      	movs	r6, r2
    81b2:	2900      	cmp	r1, #0
    81b4:	d105      	bne.n	81c2 <_realloc_r+0x18>
    81b6:	0011      	movs	r1, r2
    81b8:	f7ff fb32 	bl	7820 <_malloc_r>
    81bc:	0004      	movs	r4, r0
    81be:	0020      	movs	r0, r4
    81c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    81c2:	2a00      	cmp	r2, #0
    81c4:	d103      	bne.n	81ce <_realloc_r+0x24>
    81c6:	f7ff fae1 	bl	778c <_free_r>
    81ca:	0034      	movs	r4, r6
    81cc:	e7f7      	b.n	81be <_realloc_r+0x14>
    81ce:	f000 f812 	bl	81f6 <_malloc_usable_size_r>
    81d2:	002c      	movs	r4, r5
    81d4:	4286      	cmp	r6, r0
    81d6:	d9f2      	bls.n	81be <_realloc_r+0x14>
    81d8:	0031      	movs	r1, r6
    81da:	0038      	movs	r0, r7
    81dc:	f7ff fb20 	bl	7820 <_malloc_r>
    81e0:	1e04      	subs	r4, r0, #0
    81e2:	d0ec      	beq.n	81be <_realloc_r+0x14>
    81e4:	0029      	movs	r1, r5
    81e6:	0032      	movs	r2, r6
    81e8:	f7ff fabf 	bl	776a <memcpy>
    81ec:	0029      	movs	r1, r5
    81ee:	0038      	movs	r0, r7
    81f0:	f7ff facc 	bl	778c <_free_r>
    81f4:	e7e3      	b.n	81be <_realloc_r+0x14>

000081f6 <_malloc_usable_size_r>:
    81f6:	1f0b      	subs	r3, r1, #4
    81f8:	681b      	ldr	r3, [r3, #0]
    81fa:	1f18      	subs	r0, r3, #4
    81fc:	2b00      	cmp	r3, #0
    81fe:	da01      	bge.n	8204 <_malloc_usable_size_r+0xe>
    8200:	580b      	ldr	r3, [r1, r0]
    8202:	18c0      	adds	r0, r0, r3
    8204:	4770      	bx	lr
	...

00008208 <STATUS_LED>:
    8208:	0202 0202 0101 0000 0102 0102 7645 6e65     ............Even
    8218:	3a74 7953 7473 6d65 533a 6174 7472 7075     t:System:Startup
    8228:	253a 0064 7645 6e65 3a74 7953 7473 6d65     :%d.Event:System
    8238:	483a 6165 7472 6562 7461 253a 0064 0000     :Heartbeat:%d...
    8248:	6e45 6574 6972 676e 6d20 6961 206e 7473     Entering main st
    8258:	7461 2065 616d 6863 6e69 2e65 2e2e 0020     ate machine... .
    8268:	6f50 6577 2072 7075 4520 6874 7265 656e     Power up Etherne
    8278:	2e74 0020 7445 6568 6e72 7465 6c20 6e69     t. .Ethernet lin
    8288:	206b 7075 202e 0000 6f50 6577 2072 6f64     k up. ..Power do
    8298:	6e77 5720 6669 2e69 0020 0000 7445 6568     wn Wifi. ...Ethe
    82a8:	6e72 7465 6c20 6e69 206b 6f64 6e77 202e     rnet link down. 
    82b8:	0000 0000 6f50 6577 2072 6f64 6e77 4520     ....Power down E
    82c8:	6874 7265 656e 2e74 0020 0000 6f50 6577     thernet. ...Powe
    82d8:	2072 7075 5720 4669 2e69 0020 7645 6e65     r up WiFi. .Even
    82e8:	3a74 6552 6573 4374 7561 6573 573a 5444     t:ResetCause:WDT
    82f8:	253a 0064 7645 6e65 3a74 6552 6573 4374     :%d.Event:ResetC
    8308:	7561 6573 333a 332e 2056 7242 776f 6f6e     ause:3.3V Browno
    8318:	7475 253a 0064 0000 7645 6e65 3a74 6552     ut:%d...Event:Re
    8328:	6573 4374 7561 6573 313a 322e 2056 7242     setCause:1.2V Br
    8338:	776f 6f6e 7475 253a 0064 0000 7645 6e65     ownout:%d...Even
    8348:	3a74 6552 6573 4374 7561 6573 553a 6b6e     t:ResetCause:Unk
    8358:	6f6e 6e77 253a 0064 7645 6e65 3a74 6144     nown:%d.Event:Da
    8368:	6174 543a 3a31 6425 0000 0000 7645 6e65     ta:T1:%d....Even
    8378:	3a74 6144 6174 543a 3a32 6425 0000 0000     t:Data:T2:%d....
    8388:	7355 7265 7257 7469 0065 0000 7645 6e65     UserWrite...Even
    8398:	3a74 7953 636e 253a 3a64 6425 0000 0000     t:Sync:%d:%d....
    83a8:	7355 7265 6e49 7469 0000 0000 6e49 7469     UserInit....Init
    83b8:	6169 696c 697a 676e 7420 6568 7520 6573     ializing the use
    83c8:	2072 6f63 666e 6769 7275 7461 6f69 2e6e     r configuration.
    83d8:	0020 0000 7355 7265 6552 6461 0000 0000      ...UserRead....
    83e8:	6544 7562 2067 6f6c 2067 6e69 7469 6169     Debug log initia
    83f8:	696c 657a 2e64 0020 6157 6374 6468 676f     lized. .Watchdog
    8408:	6920 696e 6974 6c61 7a69 6465 202e 0000      initialized. ..
    8418:	6954 656d 7372 6920 696e 6974 6c61 7a69     Timers initializ
    8428:	6465 202e 0000 0000 5452 2043 6e69 7469     ed. ....RTC init
    8438:	6169 696c 657a 2e64 0020 0000 6d43 4664     ialized. ...CmdF
    8448:	4649 204f 6e69 7469 6169 696c 657a 2e64     IFO initialized.
    8458:	0020 0000 6144 6174 4946 4f46 6920 696e      ...DataFIFO ini
    8468:	6974 6c61 7a69 6465 202e 0000 6c46 7361     tialized. ..Flas
    8478:	2068 6e69 7469 6169 696c 657a 2e64 0020     h initialized. .
    8488:	7355 7265 6320 6e6f 6966 7567 6172 6974     User configurati
    8498:	6e6f 7220 7465 6972 7665 6465 202e 0000     on retrieved. ..
    84a8:	6954 656d 7473 6d61 2070 6e69 7469 6169     Timestamp initia
    84b8:	696c 657a 2e64 0020 7445 6568 6e72 7465     lized. .Ethernet
    84c8:	6920 696e 6974 6c61 7a69 6465 202e 0000      initialized. ..
    84d8:	6957 6946 6920 696e 6974 6c61 7a69 6465     WiFi initialized
    84e8:	202e 0000 6553 736e 726f 2073 6e49 7469     . ..Sensors Init
    84f8:	202e 0000 7041 6c70 6369 7461 6f69 206e     . ..Application 
    8508:	6e69 7469 6320 6d6f 6c70 7465 2e65 0020     init complete. .
    8518:	0d5c 0000 0cd4 0000 0cfa 0000 0d14 0000     \...............
    8528:	0d7a 0000 0db0 0000 0de6 0000 0f60 0000     z...........`...
    8538:	0f6e 0000 1038 0000 1050 0000 1312 0000     n...8...P.......
    8548:	4344 2d41 3030 3030 0031 0000 4e44 2053     DCA-00001...DNS 
    8558:	5453 5441 2045 5328 4154 5452 0029 0000     STATE (START)...
    8568:	4e44 2053 5453 5441 2045 4f28 4550 294e     DNS STATE (OPEN)
    8578:	0000 0000 4e44 2053 5453 5441 2045 5128     ....DNS STATE (Q
    8588:	4555 5952 0029 0000 4e44 2053 5453 5441     UERY)...DNS STAT
    8598:	2045 4728 5445 462d 4941 294c 0000 0000     E (GET-FAIL)....
    85a8:	4e44 2053 5453 5441 2045 4728 5445 442d     DNS STATE (GET-D
    85b8:	4e4f 2945 0000 0000 4e44 2053 5453 5441     ONE)....DNS STAT
    85c8:	2045 4628 4941 294c 0000 0000 4e44 2053     E (FAIL)....DNS 
    85d8:	5453 5441 2045 4428 4e4f 2945 0000 0000     STATE (DONE)....
    85e8:	7525 002d 4e44 2053 6552 6f6d 6576 4820     %u-.DNS Remove H
    85f8:	736f 2074 4243 0000 7325 7220 7365 6c6f     ost CB..%s resol
    8608:	6576 2064 6f74 4920 2050 6441 7264 7365     ved to IP Addres
    8618:	2073 7830 5825 202e 0000 0000 6146 6c69     s 0x%X. ....Fail
    8628:	6465 7220 7365 6c6f 6976 676e 2520 2e73     ed resolving %s.
    8638:	0020 0000 7768 642e 7261 6f6d 6772 6d61      ...hw.darmorgam
    8648:	2e7a 6163 0000 0000 6e55 6261 656c 7420     z.ca....Unable t
    8658:	206f 6572 6f73 766c 2e65 0020 7542 6c69     o resolve. .Buil
    8668:	2064 6f63 6d6d 6e6f 6820 6165 6564 2e72     d common header.
    8678:	0020 0000 704f 6e65 7220 6d65 746f 2065      ...Open remote 
    8688:	6f73 6b63 7465 202e 0000 0000 7525 0000     socket. ....%u..
    8698:	6425 0000 0a0d 0a0d 0000 0000 6d45 7470     %d..........Empt
    86a8:	2079 6170 6c79 616f 2e64 0020 6f53 6b63     y payload. .Sock
    86b8:	7465 6320 6f6c 6573 0064 0000 6553 646e     et closed...Send
    86c8:	6e69 2067 6425 6220 7479 7365 6f20 2066     ing %d bytes of 
    86d8:	6164 6174 7420 206f 6573 7672 7265 202e     data to server. 
    86e8:	0000 0000 6146 6c69 6465 7320 6e65 6964     ....Failed sendi
    86f8:	676e 7320 6765 656d 746e 202e 0000 0000     ng segment. ....
    8708:	6146 6c69 6465 7320 6e65 6964 676e 202e     Failed sending. 
    8718:	0000 0000 6552 6563 7669 6465 2520 2064     ....Received %d 
    8728:	7962 6574 2073 666f 6420 7461 2061 7266     bytes of data fr
    8738:	6d6f 7320 7265 6576 2e72 0020 5245 4f52     om server. .ERRO
    8748:	2052 202d 6e69 6176 696c 2064 6572 7073     R - invalid resp
    8758:	6e6f 6573 2021 0000 5245 4f52 2052 202d     onse! ..ERROR - 
    8768:	6146 6c69 6465 7220 6d65 746f 2065 6f73     Failed remote so
    8778:	6b63 7465 6320 656c 6e61 7075 2021 0000     cket cleanup! ..
    8788:	6e49 6176 696c 2064 6572 6f6d 6574 7320     Invalid remote s
    8798:	636f 656b 2074 7473 7461 2165 0020 0000     ocket state! ...
    87a8:	6f48 7473 614e 656d 252d 0073 5445 4548     HostName-%s.ETHE
    87b8:	4e52 5445 5320 4154 4554 4320 4e4f 4946     RNET STATE CONFI
    87c8:	2047 4928 2050 4843 4e41 4547 2944 0000     G (IP CHANGED)..
    87d8:	5049 4120 7373 6769 656e 2e64 0020 0000     IP Assigned. ...
    87e8:	252c 2d75 0000 0000 5445 4548 4e52 5445     ,%u-....ETHERNET
    87f8:	5320 4154 4554 4920 4c44 2045 4928 2050      STATE IDLE (IP 
    8808:	4843 4e41 4547 2944 0000 0000 5049 6120     CHANGED)....IP a
    8818:	6464 6572 7373 6320 6168 676e 6465 202e     ddress changed. 
    8828:	0000 0000 5445 4548 4e52 5445 5320 4154     ....ETHERNET STA
    8838:	4554 4520 5252 524f 0000 0000 6553 7672     TE ERROR....Serv
    8848:	7265 6e20 746f 7220 7365 6f70 646e 6e69     er not respondin
    8858:	2e67 0020 7250 636f 7365 2073 4e44 2053     g. .Process DNS 
    8868:	7571 7265 2079 6572 7073 6e6f 6573 202e     query response. 
    8878:	0000 0000 6e55 7865 6570 7463 6465 7420     ....Unexpected t
    8888:	6172 736e 6361 6974 6e6f 4920 2e44 0020     ransaction ID. .
    8898:	5448 5054 312f 312e 3320 3230 4620 756f     HTTP/1.1 302 Fou
    88a8:	646e 0a0d 0000 0000 5448 5054 312f 312e     nd......HTTP/1.1
    88b8:	3320 3130 4d20 766f 6465 5020 7265 616d      301 Moved Perma
    88c8:	656e 746e 796c 0a0d 0000 0000 6f4c 6163     nently......Loca
    88d8:	6974 6e6f 203a 0000 6f43 746e 6e65 2d74     tion: ..Content-
    88e8:	654c 676e 6874 203a 0d30 000a 6f43 6e6e     Length: 0...Conn
    88f8:	6365 6974 6e6f 203a 6c63 736f 0d65 000a     ection: close...
    8908:	5448 5054 312f 312e 3420 3430 4e20 746f     HTTP/1.1 404 Not
    8918:	4620 756f 646e 0a0d 0000 0000 5448 5054      Found......HTTP
    8928:	312f 312e 3220 3030 4f20 0d4b 000a 0000     /1.1 200 OK.....
    8938:	6341 6563 7373 432d 6e6f 7274 6c6f 412d     Access-Control-A
    8948:	6c6c 776f 4f2d 6972 6967 3a6e 2a20 0a0d     llow-Origin: *..
    8958:	0000 0000 6f43 746e 6e65 2d74 7954 6570     ....Content-Type
    8968:	203a 6574 7478 702f 616c 6e69 0a0d 0000     : text/plain....
    8978:	6f43 746e 6e65 2d74 654c 676e 6874 203a     Content-Length: 
    8988:	2020 2020 0a0d 0000 257b 7d73 0000 0000         ....{%s}....
    8998:	6341 6563 7373 432d 6e6f 7274 6c6f 412d     Access-Control-A
    89a8:	6c6c 776f 4f2d 6972 6967 3a6e 2a20 0a0d     llow-Origin: *..
    89b8:	6341 6563 7373 432d 6e6f 7274 6c6f 412d     Access-Control-A
    89c8:	6c6c 776f 4d2d 7465 6f68 7364 203a 4f50     llow-Methods: PO
    89d8:	5453 202c 4547 0d54 410a 6363 7365 2d73     ST, GET..Access-
    89e8:	6f43 746e 6f72 2d6c 6c41 6f6c 2d77 6548     Control-Allow-He
    89f8:	6461 7265 3a73 6320 6e6f 6574 746e 542d     aders: content-T
    8a08:	7079 2c65 6f20 6972 6967 2c6e 7820 722d     ype, origin, x-r
    8a18:	7165 6575 7473 6465 772d 7469 0d68 000a     equested-with...
    8a28:	6e69 6564 2e78 6870 0070 0000 4f50 5453     index.php...POST
    8a38:	2f20 7325 4820 5454 2f50 2e31 0d31 000a      /%s HTTP/1.1...
    8a48:	6f48 7473 203a 7325 0a0d 0000 6f43 746e     Host: %s....Cont
    8a58:	6e65 2d74 7954 6570 203a 6574 7478 702f     ent-Type: text/p
    8a68:	616c 6e69 203b 6863 7261 6573 3d74 7475     lain; charset=ut
    8a78:	2d66 0d38 000a 0000 7551 7565 3165 4920     f-8.....Queue1 I
    8a88:	6574 206d 6441 6564 3a64 2520 756c 7375     tem Added: %luus
    8a98:	0020 0000 7551 7565 3265 4920 6574 206d      ...Queue2 Item 
    8aa8:	6441 6564 3a64 2520 756c 7375 0020 0000     Added: %luus ...
    8ab8:	3032 2030 4b4f 0000 6f43 746e 6e65 2d74     200 OK..Content-
    8ac8:	654c 676e 6874 203a 0000 0000 6e55 6261     Length: ....Unab
    8ad8:	656c 7420 206f 6966 646e 7320 6174 7472     le to find start
    8ae8:	6f20 2066 6f63 746e 6e65 2e74 0020 0000      of content. ...
    8af8:	6f43 746e 6e65 2074 696d 7373 6e69 2067     Content missing 
    8b08:	726f 6920 636e 6d6f 6c70 7465 2e65 0020     or incomplete. .
    8b18:	2e2e 682f 6c61 692f 636e 756c 6564 682f     ../hal/include/h
    8b28:	6c61 775f 7464 682e 0000 0000 2e2e 682f     al_wdt.h....../h
    8b38:	6c61 732f 6372 682f 6c61 665f 616c 6873     al/src/hal_flash
    8b48:	632e 0000 2e2e 682f 6c61 732f 6372 682f     .c..../hal/src/h
    8b58:	6c61 695f 2e6f 0063 2e2e 682f 6c61 732f     al_io.c.../hal/s
    8b68:	6372 682f 6c61 735f 6970 6d5f 735f 6e79     rc/hal_spi_m_syn
    8b78:	2e63 0063 2e2e 682f 6c61 732f 6372 682f     c.c.../hal/src/h
    8b88:	6c61 745f 6d69 7265 632e 0000 2e2e 682f     al_timer.c..../h
    8b98:	6c61 752f 6974 736c 732f 6372 752f 6974     al/utils/src/uti
    8ba8:	736c 6c5f 7369 2e74 0063 0000               ls_list.c...

00008bb4 <_map>:
    8bb4:	0004 0000 0004 0000 0006 0000 0006 0000     ................
    8bc4:	0008 0000 001c 0000 000b 0000 000b 0000     ................
    8bd4:	2e2e 682f 6c70 652f 6369 682f 6c70 655f     ../hpl/eic/hpl_e
    8be4:	6369 632e 0000 0000 2e2e 682f 6c70 6e2f     ic.c....../hpl/n
    8bf4:	6d76 7463 6c72 682f 6c70 6e5f 6d76 7463     vmctrl/hpl_nvmct
    8c04:	6c72 632e 0000 0000                         rl.c....

00008c0c <_usarts>:
	...

00008c1c <_i2cms>:
	...

00008c34 <_i2css>:
	...

00008c44 <sercomspi_regs>:
    8c44:	000c 0013 0000 0002 0000 0000 0000 0100     ................
    8c54:	000c 0001 0000 0002 0000 0000 0000 0300     ................
    8c64:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
    8c74:	5f6c 6573 6372 6d6f 632e 0000               l_sercom.c..

00008c80 <_tcs>:
    8c80:	0000 0768 0000 0000 0000 0000 0000 0000     ..h.............
    8c90:	0000 0000 0002 0068 0000 0000 0000 0000     ......h.........
	...
    8ca8:	0004 0368 0000 0000 0000 0000 03e8 0000     ..h.............
    8cb8:	0000 0000 2e2e 682f 6c70 742f 2f63 7068     ....../hpl/tc/hp
    8cc8:	5f6c 6374 632e 0000 2e2e 682f 6c70 772f     l_tc.c..../hpl/w
    8cd8:	7464 682f 6c70 775f 7464 632e 0000 0000     dt/hpl_wdt.c....
    8ce8:	4e16 0000 4d7c 0000 4e16 0000 4da2 0000     .N..|M...N...M..
    8cf8:	4e16 0000 4e16 0000 4dac 0000 4e16 0000     .N...N...M...N..
    8d08:	4e16 0000 4e16 0000 4e16 0000 4e16 0000     .N...N...N...N..
    8d18:	4e16 0000 4e16 0000 4e16 0000 4e16 0000     .N...N...N...N..
    8d28:	4e16 0000 4e16 0000 4e16 0000 4e16 0000     .N...N...N...N..
    8d38:	4e16 0000 4e16 0000 4e16 0000 4e16 0000     .N...N...N...N..
    8d48:	4e16 0000 4e16 0000 4e16 0000 4e16 0000     .N...N...N...N..
    8d58:	4e16 0000 4e16 0000 4e16 0000 4e16 0000     .N...N...N...N..
    8d68:	4e16 0000 4e16 0000 4e16 0000 4e16 0000     .N...N...N...N..
    8d78:	4e16 0000 4e16 0000 4e16 0000 4e16 0000     .N...N...N...N..
    8d88:	4e16 0000 4e16 0000 4e16 0000 4e16 0000     .N...N...N...N..
    8d98:	4e16 0000 4e16 0000 4e16 0000 4e16 0000     .N...N...N...N..
    8da8:	4e16 0000 4e16 0000 4e16 0000 4dca 0000     .N...N...N...M..
    8db8:	4e16 0000 4de2 0000 4dd8 0000               .N...M...M..

00008dc4 <xidValue>:
    8dc4:	4850 4d43                                   PHCM

00008dc8 <dhcpName>:
    8dc8:	4344 2d41 5858 5958 5959 5959 0000 0000     DCA-XXXYYYYY....
    8dd8:	5049 4820 6165 6564 2072 7277 6e6f 2067     IP Header wrong 
    8de8:	6b63 6d73 0000 0000 7872 6920 6d63 0070     cksm....rx icmp.
    8df8:	6369 706d 7720 6f72 676e 6320 736b 206d     icmp wrong cksm 
    8e08:	203a 7825 0000 0000 7872 7520 7064 0000     : %x....rx udp..
    8e18:	7872 7420 7063 0000 7872 6220 6461 7420     rx tcp..rx bad t
    8e28:	7063 6320 736b 006d 7069 6120 6464 6572     cp cksm.ip addre
    8e38:	7373 3a20 2520 0058 4544 5453 4920 2050     ss : %X.DEST IP 
    8e48:	4f4e 2054 414d 4354 4548 0044               NOT MATCHED.

00008e54 <macAddress>:
    8e54:	de00 00ad efbe 0000                         ........

00008e5c <broadcastMAC>:
    8e5c:	ffff ffff ffff 0000 4c56 4e41 5020 6361     ........VLAN Pac
    8e6c:	656b 2074 7244 706f 6570 0064 5852 4120     ket Dropped.RX A
    8e7c:	5052 3456 5020 6361 656b 0074 5852 4920     RPV4 Packet.RX I
    8e8c:	5650 2034 6150 6b63 7465 0000 5049 3656     PV4 Packet..IPV6
    8e9c:	5020 6361 656b 2074 7244 706f 6570 0064      Packet Dropped.
    8eac:	7825 3a20 2520 0064 5ee0 0000 57cc 0000     %x : %d..^...W..
    8ebc:	5838 0000 59e6 0000 5b9e 0000 5cea 0000     8X...Y...[...\..
    8ecc:	5d94 0000 5f2c 0000 5df2 0000 5e06 0000     .]..,_...]...^..
    8edc:	5e72 0000 5966 0000 5f42 0000 5f42 0000     r^..fY..B_..B_..
    8eec:	5846 0000 58fe 0000 5888 0000 5f42 0000     FX...X...X..B_..
    8efc:	5f42 0000 5f42 0000 59dc 0000 59dc 0000     B_..B_...Y...Y..
    8f0c:	5f42 0000 597a 0000 5a96 0000 5f4a 0000     B_..zY...Z..J_..
    8f1c:	5f4a 0000 5f4a 0000 5a40 0000 59f4 0000     J_..J_..@Z...Y..
    8f2c:	5f4a 0000 5f4a 0000 5f4a 0000 5ac0 0000     J_..J_..J_...Z..
    8f3c:	5ac0 0000 5f4a 0000 5b58 0000 5c4c 0000     .Z..J_..X[..L\..
    8f4c:	5f4e 0000 5f4e 0000 5f4e 0000 5bac 0000     N_..N_..N_...[..
    8f5c:	5f4e 0000 5c6c 0000 5c66 0000 5f4e 0000     N_..l\..f\..N_..
    8f6c:	5ca8 0000 5ca8 0000 5f4e 0000 5cb2 0000     .\...\..N_...\..
    8f7c:	6374 5f70 6170 6b63 7465 7320 6e65 0074     tcp_packet sent.
    8f8c:	6374 5f70 6170 7372 6f65 7470 203a 6162     tcp_parseopt: ba
    8f9c:	2064 706f 6974 6e6f 7320 7a69 2065 656c     d option size le
    8fac:	676e 6874 0000 0000 6374 5f70 6170 7372     ngth....tcp_pars
    8fbc:	6f65 7470 203a 746f 6568 0072 6374 5f70     eopt: other.tcp_
    8fcc:	6170 7372 6f65 7470 203a 6162 2064 706f     parseopt: bad op
    8fdc:	6974 6e6f 6c20 6e65 7467 0068 6374 5f70     tion length.tcp_
    8fec:	6170 7372 6f65 7470 203a 6162 2064 656c     parseopt: bad le
    8ffc:	676e 6874 0000 0000 494c 5453 4e45 203a     ngth....LISTEN: 
    900c:	7872 735f 6e79 0000 494c 5453 4e45 203a     rx_syn..LISTEN: 
    901c:	6c63 736f 0065 0000 5953 5f4e 4553 544e     close...SYN_SENT
    902c:	203a 7872 735f 6e79 0000 0000 5953 5f4e     : rx_syn....SYN_
    903c:	4553 544e 203a 7872 735f 6e79 6361 006b     SENT: rx_synack.
    904c:	5953 5f4e 4553 544e 203a 7872 615f 6b63     SYN_SENT: rx_ack
    905c:	0000 0000 5953 5f4e 4553 544e 203a 6c63     ....SYN_SENT: cl
    906c:	736f 0065 5953 5f4e 4553 544e 203a 6974     ose.SYN_SENT: ti
    907c:	656d 756f 0074 0000 5953 5f4e 4552 4543     meout...SYN_RECE
    908c:	5649 4445 203a 7872 735f 6e79 6361 006b     IVED: rx_synack.
    909c:	5953 5f4e 4552 4543 5649 4445 203a 7872     SYN_RECEIVED: rx
    90ac:	615f 6b63 0000 0000 5953 5f4e 4552 4543     _ack....SYN_RECE
    90bc:	5649 4445 203a 6c63 736f 0065 5953 5f4e     IVED: close.SYN_
    90cc:	4552 4543 5649 4445 203a 7220 5f78 7372     RECEIVED:  rx_rs
    90dc:	0074 0000 7372 2074 6573 2071 4b4f 0000     t...rst seq OK..
    90ec:	5953 5f4e 4552 4543 5649 4445 203a 7420     SYN_RECEIVED:  t
    90fc:	6d69 6f65 7475 0000 5345 4154 4c42 5349     imeout..ESTABLIS
    910c:	4548 3a44 7220 5f78 6361 006b 5345 4154     HED: rx_ack.ESTA
    911c:	4c42 5349 4548 3a44 6320 6f6c 6573 0000     BLISHED: close..
    912c:	5345 4154 4c42 5349 4548 3a44 7220 5f78     ESTABLISHED: rx_
    913c:	6966 616e 6b63 0000 5345 4154 4c42 5349     finack..ESTABLIS
    914c:	4548 3a44 7220 5f78 6966 006e 5345 4154     HED: rx_fin.ESTA
    915c:	4c42 5349 4548 3a44 2020 6974 656d 756f     BLISHED:  timeou
    916c:	0074 0000 4946 5f4e 4157 5449 315f 203a     t...FIN_WAIT_1: 
    917c:	7872 665f 6e69 0000 4946 5f4e 4157 5449     rx_fin..FIN_WAIT
    918c:	315f 203a 7872 615f 6b63 0000 4946 5f4e     _1: rx_ack..FIN_
    919c:	4157 5449 315f 203a 7872 665f 6e69 6361     WAIT_1: rx_finac
    91ac:	006b 0000 4946 5f4e 4157 5449 315f 203a     k...FIN_WAIT_1: 
    91bc:	7420 6d69 6f65 7475 0000 0000 4946 5f4e      timeout....FIN_
    91cc:	4157 5449 325f 203a 7872 665f 6e69 0000     WAIT_2: rx_fin..
    91dc:	4946 5f4e 4157 5449 325f 203a 7420 6d69     FIN_WAIT_2:  tim
    91ec:	6f65 7475 0000 0000 4c43 534f 4e49 3a47     eout....CLOSING:
    91fc:	7220 5f78 6361 006b 414c 5453 415f 4b43      rx_ack.LAST_ACK
    920c:	203a 7872 615f 6b63 0000 0000 6954 656d     : rx_ack....Time
    921c:	5720 6961 0074 0000 4c43 534f 4445 203a      Wait...CLOSED: 
    922c:	6361 6974 6576 6f5f 6570 006e 4c43 534f     active_open.CLOS
    923c:	4445 203a 6170 7373 7669 5f65 706f 6e65     ED: passive_open
    924c:	0000 0000 6f66 6e75 2064 7973 266e 6361     ....found syn&ac
    925c:	006b 0000 6f66 6e75 2064 7973 006e 0000     k...found syn...
    926c:	6f66 6e75 2064 6966 266e 6361 006b 0000     found fin&ack...
    927c:	6f66 6e75 2064 6966 006e 0000 6f66 6e75     found fin...foun
    928c:	2064 7372 2674 6361 006b 0000 6f66 6e75     d rst&ack...foun
    929c:	2064 7372 0074 0000 6f66 6e75 2064 6361     d rst...found ac
    92ac:	006b 0000 6f63 666e 7375 6465 0000 0000     k...confused....
    92bc:	6b70 2074 7264 706f 6570 3a64 6220 6461     pkt dropped: bad
    92cc:	6f20 7470 6f69 736e 0000 0000 6374 5f70      options....tcp_
    92dc:	6962 646e 0000 0000 6374 5f70 696c 7473     bind....tcp_list
    92ec:	6e65 0000 6374 5f70 6c63 736f 0065 0000     en..tcp_close...
    92fc:	6374 2070 6974 656d 756f 0074               tcp timeout.

00009308 <UDP_CallBackTable>:
    9308:	1000 0000 176d 0000 0044 0000 4d15 0000     ....m...D....M..
    9318:	69d8 0000 6898 0000 6898 0000 6894 0000     .i...h...h...h..
    9328:	69b0 0000 69b0 0000 69a2 0000 6894 0000     .i...i...i...h..
    9338:	69b0 0000 69a2 0000 69b0 0000 6894 0000     .i...i...i...h..
    9348:	69b8 0000 69b8 0000 69b8 0000 6bbc 0000     .i...i...i...k..

00009358 <__sf_fake_stderr>:
	...

00009378 <__sf_fake_stdin>:
	...

00009398 <__sf_fake_stdout>:
	...
    93b8:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
    93c8:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
    93d8:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
    93e8:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

000093f5 <_ctype_>:
    93f5:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    9405:	2020 2020 2020 2020 2020 2020 2020 2020                     
    9415:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    9425:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    9435:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    9445:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    9455:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    9465:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    9475:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000094f8 <_init>:
    94f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    94fa:	46c0      	nop			; (mov r8, r8)
    94fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    94fe:	bc08      	pop	{r3}
    9500:	469e      	mov	lr, r3
    9502:	4770      	bx	lr

00009504 <__init_array_start>:
    9504:	000000cd 	.word	0x000000cd

00009508 <_fini>:
    9508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    950a:	46c0      	nop			; (mov r8, r8)
    950c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    950e:	bc08      	pop	{r3}
    9510:	469e      	mov	lr, r3
    9512:	4770      	bx	lr

00009514 <__fini_array_start>:
    9514:	000000a5 	.word	0x000000a5
