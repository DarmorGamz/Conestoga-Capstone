
DCA_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f98  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  00002f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c8  20000064  00002ffc  00020064  2**2
                  ALLOC
  3 .stack        00002004  2000012c  000030c4  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002c04b  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004034  00000000  00000000  0004c130  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000e241  00000000  00000000  00050164  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c90  00000000  00000000  0005e3a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d08  00000000  00000000  0005f035  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e19a  00000000  00000000  0005fd3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001585a  00000000  00000000  0007ded7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008c454  00000000  00000000  00093731  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000026dc  00000000  00000000  0011fb88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 21 00 20 29 02 00 00 25 02 00 00 25 02 00 00     0!. )...%...%...
	...
      2c:	25 02 00 00 00 00 00 00 00 00 00 00 25 02 00 00     %...........%...
      3c:	25 02 00 00 25 02 00 00 25 02 00 00 25 02 00 00     %...%...%...%...
      4c:	25 02 00 00 19 0e 00 00 25 02 00 00 25 02 00 00     %.......%...%...
      5c:	25 02 00 00 25 02 00 00 25 02 00 00 25 02 00 00     %...%...%...%...
      6c:	25 02 00 00 25 02 00 00 25 02 00 00 25 02 00 00     %...%...%...%...
      7c:	25 02 00 00 25 02 00 00 25 02 00 00 a1 16 00 00     %...%...%.......
      8c:	b5 16 00 00 25 02 00 00 25 02 00 00 25 02 00 00     ....%...%...%...
      9c:	25 02 00 00 25 02 00 00 25 02 00 00 25 02 00 00     %...%...%...%...
      ac:	25 02 00 00 00 00 00 00                             %.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000064 	.word	0x20000064
      d4:	00000000 	.word	0x00000000
      d8:	00002f98 	.word	0x00002f98

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000068 	.word	0x20000068
     108:	00002f98 	.word	0x00002f98
     10c:	00002f98 	.word	0x00002f98
     110:	00000000 	.word	0x00000000

00000114 <DcaApp_Init>:
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "DcaApp.h"
	
void DcaApp_Init(void) {
     114:	b510      	push	{r4, lr}
	// Init Watchdog.
	Watchdog_Init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <DcaApp_Init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	0000019d 	.word	0x0000019d

00000120 <DcaApp_Entry>:

void DcaApp_Entry(void) {
     120:	b570      	push	{r4, r5, r6, lr}
	while(1) {
		delay_ms(1000);
     122:	20fa      	movs	r0, #250	; 0xfa
     124:	0080      	lsls	r0, r0, #2
     126:	4e0f      	ldr	r6, [pc, #60]	; (164 <DcaApp_Entry+0x44>)
     128:	47b0      	blx	r6
		printf("\nWatchdog Timer 1 second");
     12a:	480f      	ldr	r0, [pc, #60]	; (168 <DcaApp_Entry+0x48>)
     12c:	4d0f      	ldr	r5, [pc, #60]	; (16c <DcaApp_Entry+0x4c>)
     12e:	47a8      	blx	r5
		Watchdog_Feed();
     130:	4c0f      	ldr	r4, [pc, #60]	; (170 <DcaApp_Entry+0x50>)
     132:	47a0      	blx	r4
		
		delay_ms(2000);
     134:	20fa      	movs	r0, #250	; 0xfa
     136:	00c0      	lsls	r0, r0, #3
     138:	47b0      	blx	r6
		printf("\nWatchdog Timer 2 second");
     13a:	480e      	ldr	r0, [pc, #56]	; (174 <DcaApp_Entry+0x54>)
     13c:	47a8      	blx	r5
		Watchdog_Feed();
     13e:	47a0      	blx	r4
		
		delay_ms(4000);
     140:	20fa      	movs	r0, #250	; 0xfa
     142:	0100      	lsls	r0, r0, #4
     144:	47b0      	blx	r6
		printf("\nWatchdog Timer 4 second");
     146:	480c      	ldr	r0, [pc, #48]	; (178 <DcaApp_Entry+0x58>)
     148:	47a8      	blx	r5
		Watchdog_Feed();
     14a:	47a0      	blx	r4
		
		delay_ms(8000);
     14c:	20fa      	movs	r0, #250	; 0xfa
     14e:	0140      	lsls	r0, r0, #5
     150:	47b0      	blx	r6
		printf("\nWatchdog Timer 8 second");
     152:	480a      	ldr	r0, [pc, #40]	; (17c <DcaApp_Entry+0x5c>)
     154:	47a8      	blx	r5
		Watchdog_Feed();
     156:	47a0      	blx	r4
		
		delay_ms(9000);
     158:	4809      	ldr	r0, [pc, #36]	; (180 <DcaApp_Entry+0x60>)
     15a:	47b0      	blx	r6
		printf("\nWatchdog Timer 9 second");
     15c:	4809      	ldr	r0, [pc, #36]	; (184 <DcaApp_Entry+0x64>)
     15e:	47a8      	blx	r5
		Watchdog_Feed();
     160:	47a0      	blx	r4
     162:	e7de      	b.n	122 <DcaApp_Entry+0x2>
     164:	00000825 	.word	0x00000825
     168:	00002cac 	.word	0x00002cac
     16c:	00001bf5 	.word	0x00001bf5
     170:	000001f5 	.word	0x000001f5
     174:	00002cc8 	.word	0x00002cc8
     178:	00002ce4 	.word	0x00002ce4
     17c:	00002d00 	.word	0x00002d00
     180:	00002328 	.word	0x00002328
     184:	00002d1c 	.word	0x00002d1c

00000188 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     188:	b510      	push	{r4, lr}
	system_init();
     18a:	4b02      	ldr	r3, [pc, #8]	; (194 <atmel_start_init+0xc>)
     18c:	4798      	blx	r3
	//tcpip_lite_stack_init();
	stdio_redirect_init();
     18e:	4b02      	ldr	r3, [pc, #8]	; (198 <atmel_start_init+0x10>)
     190:	4798      	blx	r3
}
     192:	bd10      	pop	{r4, pc}
     194:	0000071d 	.word	0x0000071d
     198:	000019bd 	.word	0x000019bd

0000019c <Watchdog_Init>:
/** INCLUDES ******************************************************************/
#include "driver_init.h"
#include "Watchdog.h"
#include <App/DcaApp.h>

void Watchdog_Init() {
     19c:	b510      	push	{r4, lr}
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
     19e:	4b10      	ldr	r3, [pc, #64]	; (1e0 <Watchdog_Init+0x44>)
     1a0:	681b      	ldr	r3, [r3, #0]
     1a2:	2b00      	cmp	r3, #0
     1a4:	d018      	beq.n	1d8 <Watchdog_Init+0x3c>
     1a6:	2001      	movs	r0, #1
     1a8:	226f      	movs	r2, #111	; 0x6f
     1aa:	490e      	ldr	r1, [pc, #56]	; (1e4 <Watchdog_Init+0x48>)
     1ac:	4b0e      	ldr	r3, [pc, #56]	; (1e8 <Watchdog_Init+0x4c>)
     1ae:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
     1b0:	4c0b      	ldr	r4, [pc, #44]	; (1e0 <Watchdog_Init+0x44>)
     1b2:	22fa      	movs	r2, #250	; 0xfa
     1b4:	0152      	lsls	r2, r2, #5
     1b6:	2180      	movs	r1, #128	; 0x80
     1b8:	00c9      	lsls	r1, r1, #3
     1ba:	0020      	movs	r0, r4
     1bc:	4b0b      	ldr	r3, [pc, #44]	; (1ec <Watchdog_Init+0x50>)
     1be:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
     1c0:	6823      	ldr	r3, [r4, #0]
     1c2:	2b00      	cmp	r3, #0
     1c4:	d00a      	beq.n	1dc <Watchdog_Init+0x40>
     1c6:	2001      	movs	r0, #1
     1c8:	228c      	movs	r2, #140	; 0x8c
     1ca:	4906      	ldr	r1, [pc, #24]	; (1e4 <Watchdog_Init+0x48>)
     1cc:	4b06      	ldr	r3, [pc, #24]	; (1e8 <Watchdog_Init+0x4c>)
     1ce:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
     1d0:	4803      	ldr	r0, [pc, #12]	; (1e0 <Watchdog_Init+0x44>)
     1d2:	4b07      	ldr	r3, [pc, #28]	; (1f0 <Watchdog_Init+0x54>)
     1d4:	4798      	blx	r3
    timeout_period = WATCHDOG_TIMEOUT_MS; // 8s
    wdt_set_timeout_period(&WDT_0, RT_CLOCK_FREQUENCY_HZ, timeout_period);

	// Enable the dog.
    wdt_enable(&WDT_0);
}
     1d6:	bd10      	pop	{r4, pc}
	ASSERT(wdt && wdt->dev.hw);
     1d8:	2000      	movs	r0, #0
     1da:	e7e5      	b.n	1a8 <Watchdog_Init+0xc>
	ASSERT(wdt && wdt->dev.hw);
     1dc:	2000      	movs	r0, #0
     1de:	e7f3      	b.n	1c8 <Watchdog_Init+0x2c>
     1e0:	200000d4 	.word	0x200000d4
     1e4:	00002d38 	.word	0x00002d38
     1e8:	00000c9d 	.word	0x00000c9d
     1ec:	0000173d 	.word	0x0000173d
     1f0:	00001859 	.word	0x00001859

000001f4 <Watchdog_Feed>:

void Watchdog_Feed(void) {
     1f4:	b510      	push	{r4, lr}
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
     1f6:	4b07      	ldr	r3, [pc, #28]	; (214 <Watchdog_Feed+0x20>)
     1f8:	681b      	ldr	r3, [r3, #0]
     1fa:	2b00      	cmp	r3, #0
     1fc:	d008      	beq.n	210 <Watchdog_Feed+0x1c>
     1fe:	2001      	movs	r0, #1
     200:	22a9      	movs	r2, #169	; 0xa9
     202:	4905      	ldr	r1, [pc, #20]	; (218 <Watchdog_Feed+0x24>)
     204:	4b05      	ldr	r3, [pc, #20]	; (21c <Watchdog_Feed+0x28>)
     206:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
     208:	4802      	ldr	r0, [pc, #8]	; (214 <Watchdog_Feed+0x20>)
     20a:	4b05      	ldr	r3, [pc, #20]	; (220 <Watchdog_Feed+0x2c>)
     20c:	4798      	blx	r3
    wdt_feed(&WDT_0);
     20e:	bd10      	pop	{r4, pc}
	ASSERT(wdt && wdt->dev.hw);
     210:	2000      	movs	r0, #0
     212:	e7f5      	b.n	200 <Watchdog_Feed+0xc>
     214:	200000d4 	.word	0x200000d4
     218:	00002d38 	.word	0x00002d38
     21c:	00000c9d 	.word	0x00000c9d
     220:	00001895 	.word	0x00001895

00000224 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     224:	e7fe      	b.n	224 <Dummy_Handler>
	...

00000228 <Reset_Handler>:
{
     228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     22a:	4a23      	ldr	r2, [pc, #140]	; (2b8 <Reset_Handler+0x90>)
     22c:	4b23      	ldr	r3, [pc, #140]	; (2bc <Reset_Handler+0x94>)
     22e:	429a      	cmp	r2, r3
     230:	d009      	beq.n	246 <Reset_Handler+0x1e>
     232:	4b22      	ldr	r3, [pc, #136]	; (2bc <Reset_Handler+0x94>)
     234:	4a20      	ldr	r2, [pc, #128]	; (2b8 <Reset_Handler+0x90>)
     236:	e003      	b.n	240 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     238:	6811      	ldr	r1, [r2, #0]
     23a:	6019      	str	r1, [r3, #0]
     23c:	3304      	adds	r3, #4
     23e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     240:	491f      	ldr	r1, [pc, #124]	; (2c0 <Reset_Handler+0x98>)
     242:	428b      	cmp	r3, r1
     244:	d3f8      	bcc.n	238 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     246:	4b1f      	ldr	r3, [pc, #124]	; (2c4 <Reset_Handler+0x9c>)
     248:	e002      	b.n	250 <Reset_Handler+0x28>
                *pDest++ = 0;
     24a:	2200      	movs	r2, #0
     24c:	601a      	str	r2, [r3, #0]
     24e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     250:	4a1d      	ldr	r2, [pc, #116]	; (2c8 <Reset_Handler+0xa0>)
     252:	4293      	cmp	r3, r2
     254:	d3f9      	bcc.n	24a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     256:	4a1d      	ldr	r2, [pc, #116]	; (2cc <Reset_Handler+0xa4>)
     258:	21ff      	movs	r1, #255	; 0xff
     25a:	4b1d      	ldr	r3, [pc, #116]	; (2d0 <Reset_Handler+0xa8>)
     25c:	438b      	bics	r3, r1
     25e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     260:	39fd      	subs	r1, #253	; 0xfd
     262:	2390      	movs	r3, #144	; 0x90
     264:	005b      	lsls	r3, r3, #1
     266:	4a1b      	ldr	r2, [pc, #108]	; (2d4 <Reset_Handler+0xac>)
     268:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     26a:	4a1b      	ldr	r2, [pc, #108]	; (2d8 <Reset_Handler+0xb0>)
     26c:	78d3      	ldrb	r3, [r2, #3]
     26e:	2503      	movs	r5, #3
     270:	43ab      	bics	r3, r5
     272:	2402      	movs	r4, #2
     274:	4323      	orrs	r3, r4
     276:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     278:	78d3      	ldrb	r3, [r2, #3]
     27a:	270c      	movs	r7, #12
     27c:	43bb      	bics	r3, r7
     27e:	2608      	movs	r6, #8
     280:	4333      	orrs	r3, r6
     282:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     284:	4b15      	ldr	r3, [pc, #84]	; (2dc <Reset_Handler+0xb4>)
     286:	7b98      	ldrb	r0, [r3, #14]
     288:	2230      	movs	r2, #48	; 0x30
     28a:	4390      	bics	r0, r2
     28c:	2220      	movs	r2, #32
     28e:	4310      	orrs	r0, r2
     290:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     292:	7b99      	ldrb	r1, [r3, #14]
     294:	43b9      	bics	r1, r7
     296:	4331      	orrs	r1, r6
     298:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     29a:	7b9a      	ldrb	r2, [r3, #14]
     29c:	43aa      	bics	r2, r5
     29e:	4322      	orrs	r2, r4
     2a0:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     2a2:	4a0f      	ldr	r2, [pc, #60]	; (2e0 <Reset_Handler+0xb8>)
     2a4:	6851      	ldr	r1, [r2, #4]
     2a6:	2380      	movs	r3, #128	; 0x80
     2a8:	430b      	orrs	r3, r1
     2aa:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     2ac:	4b0d      	ldr	r3, [pc, #52]	; (2e4 <Reset_Handler+0xbc>)
     2ae:	4798      	blx	r3
        main();
     2b0:	4b0d      	ldr	r3, [pc, #52]	; (2e8 <Reset_Handler+0xc0>)
     2b2:	4798      	blx	r3
     2b4:	e7fe      	b.n	2b4 <Reset_Handler+0x8c>
     2b6:	46c0      	nop			; (mov r8, r8)
     2b8:	00002f98 	.word	0x00002f98
     2bc:	20000000 	.word	0x20000000
     2c0:	20000064 	.word	0x20000064
     2c4:	20000064 	.word	0x20000064
     2c8:	2000012c 	.word	0x2000012c
     2cc:	e000ed00 	.word	0xe000ed00
     2d0:	00000000 	.word	0x00000000
     2d4:	41007000 	.word	0x41007000
     2d8:	41005000 	.word	0x41005000
     2dc:	41004800 	.word	0x41004800
     2e0:	41004000 	.word	0x41004000
     2e4:	00001b9d 	.word	0x00001b9d
     2e8:	000018cd 	.word	0x000018cd

000002ec <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     2ec:	b510      	push	{r4, lr}
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     2ee:	4a08      	ldr	r2, [pc, #32]	; (310 <TIMER_0_init+0x24>)
     2f0:	6a11      	ldr	r1, [r2, #32]
     2f2:	2380      	movs	r3, #128	; 0x80
     2f4:	011b      	lsls	r3, r3, #4
     2f6:	430b      	orrs	r3, r1
     2f8:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     2fa:	4a06      	ldr	r2, [pc, #24]	; (314 <TIMER_0_init+0x28>)
     2fc:	4b06      	ldr	r3, [pc, #24]	; (318 <TIMER_0_init+0x2c>)
     2fe:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC3);
	_gclk_enable_channel(TC3_GCLK_ID, CONF_GCLK_TC3_SRC);

	timer_init(&TIMER_0, TC3, _tc_get_timer());
     300:	4b06      	ldr	r3, [pc, #24]	; (31c <TIMER_0_init+0x30>)
     302:	4798      	blx	r3
     304:	0002      	movs	r2, r0
     306:	4906      	ldr	r1, [pc, #24]	; (320 <TIMER_0_init+0x34>)
     308:	4806      	ldr	r0, [pc, #24]	; (324 <TIMER_0_init+0x38>)
     30a:	4b07      	ldr	r3, [pc, #28]	; (328 <TIMER_0_init+0x3c>)
     30c:	4798      	blx	r3
}
     30e:	bd10      	pop	{r4, pc}
     310:	40000400 	.word	0x40000400
     314:	0000401b 	.word	0x0000401b
     318:	40000c00 	.word	0x40000c00
     31c:	0000169d 	.word	0x0000169d
     320:	42002c00 	.word	0x42002c00
     324:	2000010c 	.word	0x2000010c
     328:	00000b01 	.word	0x00000b01

0000032c <TICK_TIMER_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TICK_TIMER_init(void)
{
     32c:	b510      	push	{r4, lr}
     32e:	4a08      	ldr	r2, [pc, #32]	; (350 <TICK_TIMER_init+0x24>)
     330:	6a11      	ldr	r1, [r2, #32]
     332:	2380      	movs	r3, #128	; 0x80
     334:	015b      	lsls	r3, r3, #5
     336:	430b      	orrs	r3, r1
     338:	6213      	str	r3, [r2, #32]
     33a:	4a06      	ldr	r2, [pc, #24]	; (354 <TICK_TIMER_init+0x28>)
     33c:	4b06      	ldr	r3, [pc, #24]	; (358 <TICK_TIMER_init+0x2c>)
     33e:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC4);
	_gclk_enable_channel(TC4_GCLK_ID, CONF_GCLK_TC4_SRC);

	timer_init(&TICK_TIMER, TC4, _tc_get_timer());
     340:	4b06      	ldr	r3, [pc, #24]	; (35c <TICK_TIMER_init+0x30>)
     342:	4798      	blx	r3
     344:	0002      	movs	r2, r0
     346:	4906      	ldr	r1, [pc, #24]	; (360 <TICK_TIMER_init+0x34>)
     348:	4806      	ldr	r0, [pc, #24]	; (364 <TICK_TIMER_init+0x38>)
     34a:	4b07      	ldr	r3, [pc, #28]	; (368 <TICK_TIMER_init+0x3c>)
     34c:	4798      	blx	r3
}
     34e:	bd10      	pop	{r4, pc}
     350:	40000400 	.word	0x40000400
     354:	0000401c 	.word	0x0000401c
     358:	40000c00 	.word	0x40000c00
     35c:	0000169d 	.word	0x0000169d
     360:	42003000 	.word	0x42003000
     364:	200000d8 	.word	0x200000d8
     368:	00000b01 	.word	0x00000b01

0000036c <EXTERNAL_IRQ_0_init>:
{
     36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     36e:	46de      	mov	lr, fp
     370:	4657      	mov	r7, sl
     372:	464e      	mov	r6, r9
     374:	4645      	mov	r5, r8
     376:	b5e0      	push	{r5, r6, r7, lr}
     378:	4a22      	ldr	r2, [pc, #136]	; (404 <EXTERNAL_IRQ_0_init+0x98>)
     37a:	4b23      	ldr	r3, [pc, #140]	; (408 <EXTERNAL_IRQ_0_init+0x9c>)
     37c:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     37e:	23c0      	movs	r3, #192	; 0xc0
     380:	05db      	lsls	r3, r3, #23
     382:	4698      	mov	r8, r3
     384:	2384      	movs	r3, #132	; 0x84
     386:	469c      	mov	ip, r3
     388:	3b74      	subs	r3, #116	; 0x74
     38a:	4642      	mov	r2, r8
     38c:	4661      	mov	r1, ip
     38e:	5053      	str	r3, [r2, r1]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     390:	4b1e      	ldr	r3, [pc, #120]	; (40c <EXTERNAL_IRQ_0_init+0xa0>)
     392:	20a8      	movs	r0, #168	; 0xa8
     394:	4a1e      	ldr	r2, [pc, #120]	; (410 <EXTERNAL_IRQ_0_init+0xa4>)
     396:	501a      	str	r2, [r3, r0]
     398:	4f1e      	ldr	r7, [pc, #120]	; (414 <EXTERNAL_IRQ_0_init+0xa8>)
     39a:	501f      	str	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     39c:	24c4      	movs	r4, #196	; 0xc4
     39e:	5d19      	ldrb	r1, [r3, r4]
     3a0:	2204      	movs	r2, #4
     3a2:	4692      	mov	sl, r2
     3a4:	4391      	bics	r1, r2
     3a6:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3a8:	5d19      	ldrb	r1, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3aa:	2601      	movs	r6, #1
     3ac:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ae:	2501      	movs	r5, #1
     3b0:	4329      	orrs	r1, r5
     3b2:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3b4:	5519      	strb	r1, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3b6:	21b2      	movs	r1, #178	; 0xb2
     3b8:	4689      	mov	r9, r1
     3ba:	5c59      	ldrb	r1, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3bc:	320b      	adds	r2, #11
     3be:	4693      	mov	fp, r2
     3c0:	4391      	bics	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3c2:	464a      	mov	r2, r9
     3c4:	5499      	strb	r1, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3c6:	2180      	movs	r1, #128	; 0x80
     3c8:	01c9      	lsls	r1, r1, #7
     3ca:	4642      	mov	r2, r8
     3cc:	4664      	mov	r4, ip
     3ce:	5111      	str	r1, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3d0:	4911      	ldr	r1, [pc, #68]	; (418 <EXTERNAL_IRQ_0_init+0xac>)
     3d2:	5019      	str	r1, [r3, r0]
     3d4:	501f      	str	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3d6:	21ce      	movs	r1, #206	; 0xce
     3d8:	5c58      	ldrb	r0, [r3, r1]
     3da:	4652      	mov	r2, sl
     3dc:	4390      	bics	r0, r2
     3de:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3e0:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3e2:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e4:	432a      	orrs	r2, r5
     3e6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e8:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ea:	3917      	subs	r1, #23
     3ec:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3ee:	4658      	mov	r0, fp
     3f0:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f2:	545a      	strb	r2, [r3, r1]
	ext_irq_init();
     3f4:	4b09      	ldr	r3, [pc, #36]	; (41c <EXTERNAL_IRQ_0_init+0xb0>)
     3f6:	4798      	blx	r3
}
     3f8:	bc3c      	pop	{r2, r3, r4, r5}
     3fa:	4690      	mov	r8, r2
     3fc:	4699      	mov	r9, r3
     3fe:	46a2      	mov	sl, r4
     400:	46ab      	mov	fp, r5
     402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     404:	00004005 	.word	0x00004005
     408:	40000c00 	.word	0x40000c00
     40c:	41004400 	.word	0x41004400
     410:	40020010 	.word	0x40020010
     414:	c0020000 	.word	0xc0020000
     418:	40024000 	.word	0x40024000
     41c:	00000889 	.word	0x00000889

00000420 <WIRELESS_SPI_PORT_init>:
{
     420:	b5f0      	push	{r4, r5, r6, r7, lr}
     422:	46c6      	mov	lr, r8
     424:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     426:	21c0      	movs	r1, #192	; 0xc0
     428:	05c9      	lsls	r1, r1, #23
     42a:	2410      	movs	r4, #16
     42c:	604c      	str	r4, [r1, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     42e:	4b25      	ldr	r3, [pc, #148]	; (4c4 <WIRELESS_SPI_PORT_init+0xa4>)
     430:	4a25      	ldr	r2, [pc, #148]	; (4c8 <WIRELESS_SPI_PORT_init+0xa8>)
     432:	629a      	str	r2, [r3, #40]	; 0x28
     434:	4a25      	ldr	r2, [pc, #148]	; (4cc <WIRELESS_SPI_PORT_init+0xac>)
     436:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     438:	604c      	str	r4, [r1, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     43a:	2044      	movs	r0, #68	; 0x44
     43c:	5c1a      	ldrb	r2, [r3, r0]
     43e:	2504      	movs	r5, #4
     440:	432a      	orrs	r2, r5
     442:	b2d2      	uxtb	r2, r2
     444:	541a      	strb	r2, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     446:	618c      	str	r4, [r1, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     448:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     44a:	2601      	movs	r6, #1
     44c:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     44e:	2501      	movs	r5, #1
     450:	432a      	orrs	r2, r5
     452:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     454:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     456:	3812      	subs	r0, #18
     458:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     45a:	3c01      	subs	r4, #1
     45c:	46a4      	mov	ip, r4
     45e:	43a2      	bics	r2, r4
	tmp |= PORT_PMUX_PMUXE(data);
     460:	2703      	movs	r7, #3
     462:	433a      	orrs	r2, r7
     464:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     466:	541a      	strb	r2, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     468:	2240      	movs	r2, #64	; 0x40
     46a:	618a      	str	r2, [r1, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     46c:	608a      	str	r2, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     46e:	4a18      	ldr	r2, [pc, #96]	; (4d0 <WIRELESS_SPI_PORT_init+0xb0>)
     470:	629a      	str	r2, [r3, #40]	; 0x28
     472:	22c0      	movs	r2, #192	; 0xc0
     474:	0612      	lsls	r2, r2, #24
     476:	4690      	mov	r8, r2
     478:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47a:	3014      	adds	r0, #20
     47c:	5c1c      	ldrb	r4, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     47e:	43b4      	bics	r4, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     480:	432c      	orrs	r4, r5
     482:	b2e4      	uxtb	r4, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     484:	541c      	strb	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     486:	2433      	movs	r4, #51	; 0x33
     488:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     48a:	4662      	mov	r2, ip
     48c:	4390      	bics	r0, r2
	tmp |= PORT_PMUX_PMUXE(data);
     48e:	4338      	orrs	r0, r7
     490:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     492:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     494:	2080      	movs	r0, #128	; 0x80
     496:	6148      	str	r0, [r1, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     498:	6088      	str	r0, [r1, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     49a:	490e      	ldr	r1, [pc, #56]	; (4d4 <WIRELESS_SPI_PORT_init+0xb4>)
     49c:	6299      	str	r1, [r3, #40]	; 0x28
     49e:	4642      	mov	r2, r8
     4a0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4a2:	2147      	movs	r1, #71	; 0x47
     4a4:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4a6:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4a8:	432a      	orrs	r2, r5
     4aa:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ac:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4ae:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4b0:	3938      	subs	r1, #56	; 0x38
     4b2:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     4b4:	2130      	movs	r1, #48	; 0x30
     4b6:	430a      	orrs	r2, r1
     4b8:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ba:	551a      	strb	r2, [r3, r4]
}
     4bc:	bc04      	pop	{r2}
     4be:	4690      	mov	r8, r2
     4c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	41004400 	.word	0x41004400
     4c8:	40020010 	.word	0x40020010
     4cc:	c0020000 	.word	0xc0020000
     4d0:	40000040 	.word	0x40000040
     4d4:	40000080 	.word	0x40000080

000004d8 <WIRELESS_SPI_CLOCK_init>:
     4d8:	4a04      	ldr	r2, [pc, #16]	; (4ec <WIRELESS_SPI_CLOCK_init+0x14>)
     4da:	6a13      	ldr	r3, [r2, #32]
     4dc:	2104      	movs	r1, #4
     4de:	430b      	orrs	r3, r1
     4e0:	6213      	str	r3, [r2, #32]
     4e2:	4a03      	ldr	r2, [pc, #12]	; (4f0 <WIRELESS_SPI_CLOCK_init+0x18>)
     4e4:	4b03      	ldr	r3, [pc, #12]	; (4f4 <WIRELESS_SPI_CLOCK_init+0x1c>)
     4e6:	805a      	strh	r2, [r3, #2]
}
     4e8:	4770      	bx	lr
     4ea:	46c0      	nop			; (mov r8, r8)
     4ec:	40000400 	.word	0x40000400
     4f0:	00004014 	.word	0x00004014
     4f4:	40000c00 	.word	0x40000c00

000004f8 <WIRELESS_SPI_init>:
{
     4f8:	b510      	push	{r4, lr}
	WIRELESS_SPI_CLOCK_init();
     4fa:	4b04      	ldr	r3, [pc, #16]	; (50c <WIRELESS_SPI_init+0x14>)
     4fc:	4798      	blx	r3
	spi_m_sync_init(&WIRELESS_SPI, SERCOM0);
     4fe:	4904      	ldr	r1, [pc, #16]	; (510 <WIRELESS_SPI_init+0x18>)
     500:	4804      	ldr	r0, [pc, #16]	; (514 <WIRELESS_SPI_init+0x1c>)
     502:	4b05      	ldr	r3, [pc, #20]	; (518 <WIRELESS_SPI_init+0x20>)
     504:	4798      	blx	r3
	WIRELESS_SPI_PORT_init();
     506:	4b05      	ldr	r3, [pc, #20]	; (51c <WIRELESS_SPI_init+0x24>)
     508:	4798      	blx	r3
}
     50a:	bd10      	pop	{r4, pc}
     50c:	000004d9 	.word	0x000004d9
     510:	42000800 	.word	0x42000800
     514:	200000f4 	.word	0x200000f4
     518:	0000092d 	.word	0x0000092d
     51c:	00000421 	.word	0x00000421

00000520 <ETHERNET_SPI_PORT_init>:
{
     520:	b5f0      	push	{r4, r5, r6, r7, lr}
     522:	46ce      	mov	lr, r9
     524:	4647      	mov	r7, r8
     526:	b580      	push	{r7, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     528:	24c0      	movs	r4, #192	; 0xc0
     52a:	05e4      	lsls	r4, r4, #23
     52c:	2380      	movs	r3, #128	; 0x80
     52e:	025b      	lsls	r3, r3, #9
     530:	6163      	str	r3, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     532:	60a3      	str	r3, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     534:	4b24      	ldr	r3, [pc, #144]	; (5c8 <ETHERNET_SPI_PORT_init+0xa8>)
     536:	2280      	movs	r2, #128	; 0x80
     538:	05d2      	lsls	r2, r2, #23
     53a:	4691      	mov	r9, r2
     53c:	629a      	str	r2, [r3, #40]	; 0x28
     53e:	4923      	ldr	r1, [pc, #140]	; (5cc <ETHERNET_SPI_PORT_init+0xac>)
     540:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     542:	2050      	movs	r0, #80	; 0x50
     544:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     546:	2601      	movs	r6, #1
     548:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     54a:	2501      	movs	r5, #1
     54c:	4329      	orrs	r1, r5
     54e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     550:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     552:	3818      	subs	r0, #24
     554:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     556:	270f      	movs	r7, #15
     558:	46bc      	mov	ip, r7
     55a:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
     55c:	2702      	movs	r7, #2
     55e:	4339      	orrs	r1, r7
     560:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     562:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     564:	2180      	movs	r1, #128	; 0x80
     566:	02c9      	lsls	r1, r1, #11
     568:	6061      	str	r1, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     56a:	4919      	ldr	r1, [pc, #100]	; (5d0 <ETHERNET_SPI_PORT_init+0xb0>)
     56c:	6299      	str	r1, [r3, #40]	; 0x28
     56e:	4919      	ldr	r1, [pc, #100]	; (5d4 <ETHERNET_SPI_PORT_init+0xb4>)
     570:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     572:	2152      	movs	r1, #82	; 0x52
     574:	5c58      	ldrb	r0, [r3, r1]
     576:	2204      	movs	r2, #4
     578:	4390      	bics	r0, r2
     57a:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     57c:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     57e:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     580:	4328      	orrs	r0, r5
     582:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     584:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     586:	2039      	movs	r0, #57	; 0x39
     588:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     58a:	4662      	mov	r2, ip
     58c:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     58e:	4339      	orrs	r1, r7
     590:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     592:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     594:	2180      	movs	r1, #128	; 0x80
     596:	0309      	lsls	r1, r1, #12
     598:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     59a:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     59c:	464a      	mov	r2, r9
     59e:	629a      	str	r2, [r3, #40]	; 0x28
     5a0:	4a0d      	ldr	r2, [pc, #52]	; (5d8 <ETHERNET_SPI_PORT_init+0xb8>)
     5a2:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5a4:	2153      	movs	r1, #83	; 0x53
     5a6:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5a8:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5aa:	432a      	orrs	r2, r5
     5ac:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ae:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5b0:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5b2:	3944      	subs	r1, #68	; 0x44
     5b4:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     5b6:	2120      	movs	r1, #32
     5b8:	430a      	orrs	r2, r1
     5ba:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5bc:	541a      	strb	r2, [r3, r0]
}
     5be:	bc0c      	pop	{r2, r3}
     5c0:	4690      	mov	r8, r2
     5c2:	4699      	mov	r9, r3
     5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5c6:	46c0      	nop			; (mov r8, r8)
     5c8:	41004400 	.word	0x41004400
     5cc:	c0000001 	.word	0xc0000001
     5d0:	40020000 	.word	0x40020000
     5d4:	c0020004 	.word	0xc0020004
     5d8:	c0000008 	.word	0xc0000008

000005dc <ETHERNET_SPI_CLOCK_init>:
     5dc:	4a04      	ldr	r2, [pc, #16]	; (5f0 <ETHERNET_SPI_CLOCK_init+0x14>)
     5de:	6a13      	ldr	r3, [r2, #32]
     5e0:	2108      	movs	r1, #8
     5e2:	430b      	orrs	r3, r1
     5e4:	6213      	str	r3, [r2, #32]
     5e6:	4a03      	ldr	r2, [pc, #12]	; (5f4 <ETHERNET_SPI_CLOCK_init+0x18>)
     5e8:	4b03      	ldr	r3, [pc, #12]	; (5f8 <ETHERNET_SPI_CLOCK_init+0x1c>)
     5ea:	805a      	strh	r2, [r3, #2]
}
     5ec:	4770      	bx	lr
     5ee:	46c0      	nop			; (mov r8, r8)
     5f0:	40000400 	.word	0x40000400
     5f4:	00004015 	.word	0x00004015
     5f8:	40000c00 	.word	0x40000c00

000005fc <ETHERNET_SPI_init>:
{
     5fc:	b510      	push	{r4, lr}
	ETHERNET_SPI_CLOCK_init();
     5fe:	4b04      	ldr	r3, [pc, #16]	; (610 <ETHERNET_SPI_init+0x14>)
     600:	4798      	blx	r3
	spi_m_sync_init(&ETHERNET_SPI, SERCOM1);
     602:	4904      	ldr	r1, [pc, #16]	; (614 <ETHERNET_SPI_init+0x18>)
     604:	4804      	ldr	r0, [pc, #16]	; (618 <ETHERNET_SPI_init+0x1c>)
     606:	4b05      	ldr	r3, [pc, #20]	; (61c <ETHERNET_SPI_init+0x20>)
     608:	4798      	blx	r3
	ETHERNET_SPI_PORT_init();
     60a:	4b05      	ldr	r3, [pc, #20]	; (620 <ETHERNET_SPI_init+0x24>)
     60c:	4798      	blx	r3
}
     60e:	bd10      	pop	{r4, pc}
     610:	000005dd 	.word	0x000005dd
     614:	42000c00 	.word	0x42000c00
     618:	200000b0 	.word	0x200000b0
     61c:	0000092d 	.word	0x0000092d
     620:	00000521 	.word	0x00000521

00000624 <DEBUG_0_PORT_init>:
{
     624:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     626:	4b0f      	ldr	r3, [pc, #60]	; (664 <DEBUG_0_PORT_init+0x40>)
     628:	2256      	movs	r2, #86	; 0x56
     62a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     62c:	2501      	movs	r5, #1
     62e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     630:	2401      	movs	r4, #1
     632:	4321      	orrs	r1, r4
     634:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     636:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     638:	203b      	movs	r0, #59	; 0x3b
     63a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     63c:	3a47      	subs	r2, #71	; 0x47
     63e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     640:	2202      	movs	r2, #2
     642:	4311      	orrs	r1, r2
     644:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     646:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     648:	2157      	movs	r1, #87	; 0x57
     64a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     64c:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     64e:	4322      	orrs	r2, r4
     650:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     652:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     654:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     656:	3948      	subs	r1, #72	; 0x48
     658:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     65a:	2120      	movs	r1, #32
     65c:	430a      	orrs	r2, r1
     65e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     660:	541a      	strb	r2, [r3, r0]
}
     662:	bd30      	pop	{r4, r5, pc}
     664:	41004400 	.word	0x41004400

00000668 <DEBUG_0_CLOCK_init>:
     668:	4a04      	ldr	r2, [pc, #16]	; (67c <DEBUG_0_CLOCK_init+0x14>)
     66a:	6a13      	ldr	r3, [r2, #32]
     66c:	2120      	movs	r1, #32
     66e:	430b      	orrs	r3, r1
     670:	6213      	str	r3, [r2, #32]
     672:	4a03      	ldr	r2, [pc, #12]	; (680 <DEBUG_0_CLOCK_init+0x18>)
     674:	4b03      	ldr	r3, [pc, #12]	; (684 <DEBUG_0_CLOCK_init+0x1c>)
     676:	805a      	strh	r2, [r3, #2]
}
     678:	4770      	bx	lr
     67a:	46c0      	nop			; (mov r8, r8)
     67c:	40000400 	.word	0x40000400
     680:	00004317 	.word	0x00004317
     684:	40000c00 	.word	0x40000c00

00000688 <DEBUG_0_init>:
{
     688:	b510      	push	{r4, lr}
	DEBUG_0_CLOCK_init();
     68a:	4b05      	ldr	r3, [pc, #20]	; (6a0 <DEBUG_0_init+0x18>)
     68c:	4798      	blx	r3
	usart_sync_init(&DEBUG_0, SERCOM3, (void *)NULL);
     68e:	2200      	movs	r2, #0
     690:	4904      	ldr	r1, [pc, #16]	; (6a4 <DEBUG_0_init+0x1c>)
     692:	4805      	ldr	r0, [pc, #20]	; (6a8 <DEBUG_0_init+0x20>)
     694:	4b05      	ldr	r3, [pc, #20]	; (6ac <DEBUG_0_init+0x24>)
     696:	4798      	blx	r3
	DEBUG_0_PORT_init();
     698:	4b05      	ldr	r3, [pc, #20]	; (6b0 <DEBUG_0_init+0x28>)
     69a:	4798      	blx	r3
}
     69c:	bd10      	pop	{r4, pc}
     69e:	46c0      	nop			; (mov r8, r8)
     6a0:	00000669 	.word	0x00000669
     6a4:	42001400 	.word	0x42001400
     6a8:	200000c8 	.word	0x200000c8
     6ac:	00000c25 	.word	0x00000c25
     6b0:	00000625 	.word	0x00000625

000006b4 <delay_driver_init>:
{
     6b4:	b510      	push	{r4, lr}
	delay_init(SysTick);
     6b6:	4802      	ldr	r0, [pc, #8]	; (6c0 <delay_driver_init+0xc>)
     6b8:	4b02      	ldr	r3, [pc, #8]	; (6c4 <delay_driver_init+0x10>)
     6ba:	4798      	blx	r3
}
     6bc:	bd10      	pop	{r4, pc}
     6be:	46c0      	nop			; (mov r8, r8)
     6c0:	e000e010 	.word	0xe000e010
     6c4:	00000811 	.word	0x00000811

000006c8 <WDT_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
     6c8:	4a04      	ldr	r2, [pc, #16]	; (6dc <WDT_0_CLOCK_init+0x14>)
     6ca:	6993      	ldr	r3, [r2, #24]
     6cc:	2110      	movs	r1, #16
     6ce:	430b      	orrs	r3, r1
     6d0:	6193      	str	r3, [r2, #24]
     6d2:	4a03      	ldr	r2, [pc, #12]	; (6e0 <WDT_0_CLOCK_init+0x18>)
     6d4:	4b03      	ldr	r3, [pc, #12]	; (6e4 <WDT_0_CLOCK_init+0x1c>)
     6d6:	805a      	strh	r2, [r3, #2]

void WDT_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, WDT);
	_gclk_enable_channel(WDT_GCLK_ID, CONF_GCLK_WDT_SRC);
}
     6d8:	4770      	bx	lr
     6da:	46c0      	nop			; (mov r8, r8)
     6dc:	40000400 	.word	0x40000400
     6e0:	00004103 	.word	0x00004103
     6e4:	40000c00 	.word	0x40000c00

000006e8 <WDT_0_init>:

void WDT_0_init(void)
{
     6e8:	b510      	push	{r4, lr}
	WDT_0_CLOCK_init();
     6ea:	4b06      	ldr	r3, [pc, #24]	; (704 <WDT_0_init+0x1c>)
     6ec:	4798      	blx	r3
	ASSERT(wdt && hw);
     6ee:	2248      	movs	r2, #72	; 0x48
     6f0:	4905      	ldr	r1, [pc, #20]	; (708 <WDT_0_init+0x20>)
     6f2:	2001      	movs	r0, #1
     6f4:	4b05      	ldr	r3, [pc, #20]	; (70c <WDT_0_init+0x24>)
     6f6:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
     6f8:	4805      	ldr	r0, [pc, #20]	; (710 <WDT_0_init+0x28>)
     6fa:	4b06      	ldr	r3, [pc, #24]	; (714 <WDT_0_init+0x2c>)
     6fc:	6003      	str	r3, [r0, #0]
	return _wdt_init(&wdt->dev);
     6fe:	4b06      	ldr	r3, [pc, #24]	; (718 <WDT_0_init+0x30>)
     700:	4798      	blx	r3
	wdt_init(&WDT_0, WDT);
}
     702:	bd10      	pop	{r4, pc}
     704:	000006c9 	.word	0x000006c9
     708:	00002d38 	.word	0x00002d38
     70c:	00000c9d 	.word	0x00000c9d
     710:	200000d4 	.word	0x200000d4
     714:	40001000 	.word	0x40001000
     718:	000016c9 	.word	0x000016c9

0000071c <system_init>:

void system_init(void)
{
     71c:	b5f0      	push	{r4, r5, r6, r7, lr}
     71e:	46c6      	mov	lr, r8
     720:	b500      	push	{lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     722:	4b2c      	ldr	r3, [pc, #176]	; (7d4 <system_init+0xb8>)
     724:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     726:	22c0      	movs	r2, #192	; 0xc0
     728:	05d2      	lsls	r2, r2, #23
     72a:	2304      	movs	r3, #4
     72c:	6193      	str	r3, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     72e:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     730:	4b29      	ldr	r3, [pc, #164]	; (7d8 <system_init+0xbc>)
     732:	492a      	ldr	r1, [pc, #168]	; (7dc <system_init+0xc0>)
     734:	6299      	str	r1, [r3, #40]	; 0x28
     736:	24c0      	movs	r4, #192	; 0xc0
     738:	0624      	lsls	r4, r4, #24
     73a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     73c:	2542      	movs	r5, #66	; 0x42
     73e:	5d59      	ldrb	r1, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     740:	2001      	movs	r0, #1
     742:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     744:	5559      	strb	r1, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     746:	2180      	movs	r1, #128	; 0x80
     748:	0349      	lsls	r1, r1, #13
     74a:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     74c:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     74e:	2180      	movs	r1, #128	; 0x80
     750:	05c9      	lsls	r1, r1, #23
     752:	6299      	str	r1, [r3, #40]	; 0x28
     754:	4922      	ldr	r1, [pc, #136]	; (7e0 <system_init+0xc4>)
     756:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     758:	3512      	adds	r5, #18
     75a:	5d59      	ldrb	r1, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     75c:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     75e:	5559      	strb	r1, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     760:	2194      	movs	r1, #148	; 0x94
     762:	4688      	mov	r8, r1
     764:	3974      	subs	r1, #116	; 0x74
     766:	4645      	mov	r5, r8
     768:	5151      	str	r1, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     76a:	3d0c      	subs	r5, #12
     76c:	5151      	str	r1, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     76e:	3188      	adds	r1, #136	; 0x88
     770:	4e1c      	ldr	r6, [pc, #112]	; (7e4 <system_init+0xc8>)
     772:	505e      	str	r6, [r3, r1]
     774:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     776:	26c5      	movs	r6, #197	; 0xc5
     778:	46b4      	mov	ip, r6
     77a:	5d9e      	ldrb	r6, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     77c:	4386      	bics	r6, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     77e:	4667      	mov	r7, ip
     780:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     782:	2640      	movs	r6, #64	; 0x40
     784:	4647      	mov	r7, r8
     786:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     788:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     78a:	4e17      	ldr	r6, [pc, #92]	; (7e8 <system_init+0xcc>)
     78c:	505e      	str	r6, [r3, r1]
     78e:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     790:	3732      	adds	r7, #50	; 0x32
     792:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     794:	4386      	bics	r6, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     796:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     798:	2680      	movs	r6, #128	; 0x80
     79a:	3f2e      	subs	r7, #46	; 0x2e
     79c:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     79e:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7a0:	4a12      	ldr	r2, [pc, #72]	; (7ec <system_init+0xd0>)
     7a2:	505a      	str	r2, [r3, r1]
     7a4:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7a6:	311f      	adds	r1, #31
     7a8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     7aa:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7ac:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(WIRELESS_CS, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(WIRELESS_CS, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     7ae:	4b10      	ldr	r3, [pc, #64]	; (7f0 <system_init+0xd4>)
     7b0:	4798      	blx	r3

	WIRELESS_SPI_init();
     7b2:	4b10      	ldr	r3, [pc, #64]	; (7f4 <system_init+0xd8>)
     7b4:	4798      	blx	r3

	ETHERNET_SPI_init();
     7b6:	4b10      	ldr	r3, [pc, #64]	; (7f8 <system_init+0xdc>)
     7b8:	4798      	blx	r3

	DEBUG_0_init();
     7ba:	4b10      	ldr	r3, [pc, #64]	; (7fc <system_init+0xe0>)
     7bc:	4798      	blx	r3

	delay_driver_init();
     7be:	4b10      	ldr	r3, [pc, #64]	; (800 <system_init+0xe4>)
     7c0:	4798      	blx	r3

	TIMER_0_init();
     7c2:	4b10      	ldr	r3, [pc, #64]	; (804 <system_init+0xe8>)
     7c4:	4798      	blx	r3
	TICK_TIMER_init();
     7c6:	4b10      	ldr	r3, [pc, #64]	; (808 <system_init+0xec>)
     7c8:	4798      	blx	r3

	WDT_0_init();
     7ca:	4b10      	ldr	r3, [pc, #64]	; (80c <system_init+0xf0>)
     7cc:	4798      	blx	r3
}
     7ce:	bc04      	pop	{r2}
     7d0:	4690      	mov	r8, r2
     7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7d4:	00000d51 	.word	0x00000d51
     7d8:	41004400 	.word	0x41004400
     7dc:	40000004 	.word	0x40000004
     7e0:	c0000010 	.word	0xc0000010
     7e4:	40000020 	.word	0x40000020
     7e8:	40000040 	.word	0x40000040
     7ec:	40000080 	.word	0x40000080
     7f0:	0000036d 	.word	0x0000036d
     7f4:	000004f9 	.word	0x000004f9
     7f8:	000005fd 	.word	0x000005fd
     7fc:	00000689 	.word	0x00000689
     800:	000006b5 	.word	0x000006b5
     804:	000002ed 	.word	0x000002ed
     808:	0000032d 	.word	0x0000032d
     80c:	000006e9 	.word	0x000006e9

00000810 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     810:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     812:	4b02      	ldr	r3, [pc, #8]	; (81c <delay_init+0xc>)
     814:	6018      	str	r0, [r3, #0]
     816:	4b02      	ldr	r3, [pc, #8]	; (820 <delay_init+0x10>)
     818:	4798      	blx	r3
}
     81a:	bd10      	pop	{r4, pc}
     81c:	20000080 	.word	0x20000080
     820:	00001491 	.word	0x00001491

00000824 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     824:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     826:	4b04      	ldr	r3, [pc, #16]	; (838 <delay_ms+0x14>)
     828:	681c      	ldr	r4, [r3, #0]
     82a:	4b04      	ldr	r3, [pc, #16]	; (83c <delay_ms+0x18>)
     82c:	4798      	blx	r3
     82e:	0001      	movs	r1, r0
     830:	0020      	movs	r0, r4
     832:	4b03      	ldr	r3, [pc, #12]	; (840 <delay_ms+0x1c>)
     834:	4798      	blx	r3
}
     836:	bd10      	pop	{r4, pc}
     838:	20000080 	.word	0x20000080
     83c:	00000d41 	.word	0x00000d41
     840:	0000149d 	.word	0x0000149d

00000844 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     844:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     846:	2502      	movs	r5, #2
     848:	2400      	movs	r4, #0

	while (upper >= lower) {
     84a:	e007      	b.n	85c <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     84c:	4a0d      	ldr	r2, [pc, #52]	; (884 <process_ext_irq+0x40>)
     84e:	58b3      	ldr	r3, [r6, r2]
     850:	2b00      	cmp	r3, #0
     852:	d000      	beq.n	856 <process_ext_irq+0x12>
				ext_irqs[middle].cb();
     854:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
     856:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
     858:	3a01      	subs	r2, #1
     85a:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     85c:	42ac      	cmp	r4, r5
     85e:	d8fa      	bhi.n	856 <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
     860:	192b      	adds	r3, r5, r4
     862:	105b      	asrs	r3, r3, #1
     864:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     866:	2a01      	cmp	r2, #1
     868:	d8f5      	bhi.n	856 <process_ext_irq+0x12>
     86a:	21ff      	movs	r1, #255	; 0xff
     86c:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
     86e:	00de      	lsls	r6, r3, #3
     870:	4904      	ldr	r1, [pc, #16]	; (884 <process_ext_irq+0x40>)
     872:	1989      	adds	r1, r1, r6
     874:	6849      	ldr	r1, [r1, #4]
     876:	4281      	cmp	r1, r0
     878:	d0e8      	beq.n	84c <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     87a:	d2ed      	bcs.n	858 <process_ext_irq+0x14>
			lower = middle + 1;
     87c:	3201      	adds	r2, #1
     87e:	b2d4      	uxtb	r4, r2
     880:	e7ec      	b.n	85c <process_ext_irq+0x18>
     882:	46c0      	nop			; (mov r8, r8)
     884:	20000084 	.word	0x20000084

00000888 <ext_irq_init>:
{
     888:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     88a:	2300      	movs	r3, #0
     88c:	e009      	b.n	8a2 <ext_irq_init+0x1a>
		ext_irqs[i].pin = 0xFFFFFFFF;
     88e:	4a08      	ldr	r2, [pc, #32]	; (8b0 <ext_irq_init+0x28>)
     890:	00d9      	lsls	r1, r3, #3
     892:	1850      	adds	r0, r2, r1
     894:	2401      	movs	r4, #1
     896:	4264      	negs	r4, r4
     898:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
     89a:	2000      	movs	r0, #0
     89c:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     89e:	3301      	adds	r3, #1
     8a0:	b29b      	uxth	r3, r3
     8a2:	2b01      	cmp	r3, #1
     8a4:	d9f3      	bls.n	88e <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
     8a6:	4803      	ldr	r0, [pc, #12]	; (8b4 <ext_irq_init+0x2c>)
     8a8:	4b03      	ldr	r3, [pc, #12]	; (8b8 <ext_irq_init+0x30>)
     8aa:	4798      	blx	r3
}
     8ac:	bd10      	pop	{r4, pc}
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	20000084 	.word	0x20000084
     8b4:	00000845 	.word	0x00000845
     8b8:	00000d81 	.word	0x00000d81

000008bc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     8bc:	b570      	push	{r4, r5, r6, lr}
     8be:	0004      	movs	r4, r0
     8c0:	000d      	movs	r5, r1
     8c2:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     8c4:	2800      	cmp	r0, #0
     8c6:	d00e      	beq.n	8e6 <io_write+0x2a>
     8c8:	2900      	cmp	r1, #0
     8ca:	d00a      	beq.n	8e2 <io_write+0x26>
     8cc:	2001      	movs	r0, #1
     8ce:	2234      	movs	r2, #52	; 0x34
     8d0:	4906      	ldr	r1, [pc, #24]	; (8ec <io_write+0x30>)
     8d2:	4b07      	ldr	r3, [pc, #28]	; (8f0 <io_write+0x34>)
     8d4:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     8d6:	6823      	ldr	r3, [r4, #0]
     8d8:	0032      	movs	r2, r6
     8da:	0029      	movs	r1, r5
     8dc:	0020      	movs	r0, r4
     8de:	4798      	blx	r3
}
     8e0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     8e2:	2000      	movs	r0, #0
     8e4:	e7f3      	b.n	8ce <io_write+0x12>
     8e6:	2000      	movs	r0, #0
     8e8:	e7f1      	b.n	8ce <io_write+0x12>
     8ea:	46c0      	nop			; (mov r8, r8)
     8ec:	00002d54 	.word	0x00002d54
     8f0:	00000c9d 	.word	0x00000c9d

000008f4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     8f4:	b570      	push	{r4, r5, r6, lr}
     8f6:	0004      	movs	r4, r0
     8f8:	000d      	movs	r5, r1
     8fa:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     8fc:	2800      	cmp	r0, #0
     8fe:	d00e      	beq.n	91e <io_read+0x2a>
     900:	2900      	cmp	r1, #0
     902:	d00a      	beq.n	91a <io_read+0x26>
     904:	2001      	movs	r0, #1
     906:	223d      	movs	r2, #61	; 0x3d
     908:	4906      	ldr	r1, [pc, #24]	; (924 <io_read+0x30>)
     90a:	4b07      	ldr	r3, [pc, #28]	; (928 <io_read+0x34>)
     90c:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     90e:	6863      	ldr	r3, [r4, #4]
     910:	0032      	movs	r2, r6
     912:	0029      	movs	r1, r5
     914:	0020      	movs	r0, r4
     916:	4798      	blx	r3
}
     918:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     91a:	2000      	movs	r0, #0
     91c:	e7f3      	b.n	906 <io_read+0x12>
     91e:	2000      	movs	r0, #0
     920:	e7f1      	b.n	906 <io_read+0x12>
     922:	46c0      	nop			; (mov r8, r8)
     924:	00002d54 	.word	0x00002d54
     928:	00000c9d 	.word	0x00000c9d

0000092c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     92c:	b570      	push	{r4, r5, r6, lr}
     92e:	0004      	movs	r4, r0
     930:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     932:	2800      	cmp	r0, #0
     934:	d017      	beq.n	966 <spi_m_sync_init+0x3a>
     936:	2900      	cmp	r1, #0
     938:	d013      	beq.n	962 <spi_m_sync_init+0x36>
     93a:	2001      	movs	r0, #1
     93c:	2240      	movs	r2, #64	; 0x40
     93e:	490b      	ldr	r1, [pc, #44]	; (96c <spi_m_sync_init+0x40>)
     940:	4b0b      	ldr	r3, [pc, #44]	; (970 <spi_m_sync_init+0x44>)
     942:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     944:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     946:	1d20      	adds	r0, r4, #4
     948:	0029      	movs	r1, r5
     94a:	4b0a      	ldr	r3, [pc, #40]	; (974 <spi_m_sync_init+0x48>)
     94c:	4798      	blx	r3

	if (rc < 0) {
     94e:	2800      	cmp	r0, #0
     950:	db06      	blt.n	960 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     952:	4b09      	ldr	r3, [pc, #36]	; (978 <spi_m_sync_init+0x4c>)
     954:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     956:	4b09      	ldr	r3, [pc, #36]	; (97c <spi_m_sync_init+0x50>)
     958:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     95a:	4b09      	ldr	r3, [pc, #36]	; (980 <spi_m_sync_init+0x54>)
     95c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     95e:	2000      	movs	r0, #0
}
     960:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
     962:	2000      	movs	r0, #0
     964:	e7ea      	b.n	93c <spi_m_sync_init+0x10>
     966:	2000      	movs	r0, #0
     968:	e7e8      	b.n	93c <spi_m_sync_init+0x10>
     96a:	46c0      	nop			; (mov r8, r8)
     96c:	00002d68 	.word	0x00002d68
     970:	00000c9d 	.word	0x00000c9d
     974:	00001105 	.word	0x00001105
     978:	ffff8000 	.word	0xffff8000
     97c:	00000a09 	.word	0x00000a09
     980:	000009cd 	.word	0x000009cd

00000984 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     984:	b530      	push	{r4, r5, lr}
     986:	b087      	sub	sp, #28
     988:	0004      	movs	r4, r0
     98a:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     98c:	2800      	cmp	r0, #0
     98e:	d015      	beq.n	9bc <spi_m_sync_transfer+0x38>
     990:	2900      	cmp	r1, #0
     992:	d011      	beq.n	9b8 <spi_m_sync_transfer+0x34>
     994:	2001      	movs	r0, #1
     996:	22b3      	movs	r2, #179	; 0xb3
     998:	4909      	ldr	r1, [pc, #36]	; (9c0 <spi_m_sync_transfer+0x3c>)
     99a:	4b0a      	ldr	r3, [pc, #40]	; (9c4 <spi_m_sync_transfer+0x40>)
     99c:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     99e:	682b      	ldr	r3, [r5, #0]
     9a0:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     9a2:	686b      	ldr	r3, [r5, #4]
     9a4:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     9a6:	68ab      	ldr	r3, [r5, #8]
     9a8:	9301      	str	r3, [sp, #4]
     9aa:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     9ac:	1d20      	adds	r0, r4, #4
     9ae:	a903      	add	r1, sp, #12
     9b0:	4b05      	ldr	r3, [pc, #20]	; (9c8 <spi_m_sync_transfer+0x44>)
     9b2:	4798      	blx	r3
}
     9b4:	b007      	add	sp, #28
     9b6:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
     9b8:	2000      	movs	r0, #0
     9ba:	e7ec      	b.n	996 <spi_m_sync_transfer+0x12>
     9bc:	2000      	movs	r0, #0
     9be:	e7ea      	b.n	996 <spi_m_sync_transfer+0x12>
     9c0:	00002d68 	.word	0x00002d68
     9c4:	00000c9d 	.word	0x00000c9d
     9c8:	00001309 	.word	0x00001309

000009cc <_spi_m_sync_io_write>:
{
     9cc:	b570      	push	{r4, r5, r6, lr}
     9ce:	b084      	sub	sp, #16
     9d0:	0004      	movs	r4, r0
     9d2:	000e      	movs	r6, r1
     9d4:	0015      	movs	r5, r2
	ASSERT(io);
     9d6:	1e43      	subs	r3, r0, #1
     9d8:	4198      	sbcs	r0, r3
     9da:	b2c0      	uxtb	r0, r0
     9dc:	22a3      	movs	r2, #163	; 0xa3
     9de:	4907      	ldr	r1, [pc, #28]	; (9fc <_spi_m_sync_io_write+0x30>)
     9e0:	4b07      	ldr	r3, [pc, #28]	; (a00 <_spi_m_sync_io_write+0x34>)
     9e2:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     9e4:	0020      	movs	r0, r4
     9e6:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
     9e8:	2300      	movs	r3, #0
     9ea:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     9ec:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     9ee:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     9f0:	a901      	add	r1, sp, #4
     9f2:	4b04      	ldr	r3, [pc, #16]	; (a04 <_spi_m_sync_io_write+0x38>)
     9f4:	4798      	blx	r3
}
     9f6:	b004      	add	sp, #16
     9f8:	bd70      	pop	{r4, r5, r6, pc}
     9fa:	46c0      	nop			; (mov r8, r8)
     9fc:	00002d68 	.word	0x00002d68
     a00:	00000c9d 	.word	0x00000c9d
     a04:	00000985 	.word	0x00000985

00000a08 <_spi_m_sync_io_read>:
{
     a08:	b570      	push	{r4, r5, r6, lr}
     a0a:	b084      	sub	sp, #16
     a0c:	0004      	movs	r4, r0
     a0e:	000e      	movs	r6, r1
     a10:	0015      	movs	r5, r2
	ASSERT(io);
     a12:	1e43      	subs	r3, r0, #1
     a14:	4198      	sbcs	r0, r3
     a16:	b2c0      	uxtb	r0, r0
     a18:	2287      	movs	r2, #135	; 0x87
     a1a:	4907      	ldr	r1, [pc, #28]	; (a38 <_spi_m_sync_io_read+0x30>)
     a1c:	4b07      	ldr	r3, [pc, #28]	; (a3c <_spi_m_sync_io_read+0x34>)
     a1e:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     a20:	0020      	movs	r0, r4
     a22:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
     a24:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     a26:	2300      	movs	r3, #0
     a28:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     a2a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     a2c:	a901      	add	r1, sp, #4
     a2e:	4b04      	ldr	r3, [pc, #16]	; (a40 <_spi_m_sync_io_read+0x38>)
     a30:	4798      	blx	r3
}
     a32:	b004      	add	sp, #16
     a34:	bd70      	pop	{r4, r5, r6, pc}
     a36:	46c0      	nop			; (mov r8, r8)
     a38:	00002d68 	.word	0x00002d68
     a3c:	00000c9d 	.word	0x00000c9d
     a40:	00000985 	.word	0x00000985

00000a44 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     a46:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     a48:	2e00      	cmp	r6, #0
     a4a:	d002      	beq.n	a52 <timer_add_timer_task+0xe>
     a4c:	0033      	movs	r3, r6
     a4e:	2500      	movs	r5, #0
     a50:	e00c      	b.n	a6c <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
     a52:	4b10      	ldr	r3, [pc, #64]	; (a94 <timer_add_timer_task+0x50>)
     a54:	4798      	blx	r3
		return;
     a56:	e018      	b.n	a8a <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     a58:	689f      	ldr	r7, [r3, #8]
     a5a:	46bc      	mov	ip, r7
     a5c:	4464      	add	r4, ip
     a5e:	1aa4      	subs	r4, r4, r2
     a60:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
     a62:	688f      	ldr	r7, [r1, #8]
     a64:	42bc      	cmp	r4, r7
     a66:	d20b      	bcs.n	a80 <timer_add_timer_task+0x3c>
			break;
		prev = it;
     a68:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     a6a:	681b      	ldr	r3, [r3, #0]
     a6c:	2b00      	cmp	r3, #0
     a6e:	d007      	beq.n	a80 <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
     a70:	685c      	ldr	r4, [r3, #4]
     a72:	4294      	cmp	r4, r2
     a74:	d8f0      	bhi.n	a58 <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
     a76:	1aa4      	subs	r4, r4, r2
     a78:	689f      	ldr	r7, [r3, #8]
     a7a:	46bc      	mov	ip, r7
     a7c:	4464      	add	r4, ip
     a7e:	e7f0      	b.n	a62 <timer_add_timer_task+0x1e>
	}

	if (it == head) {
     a80:	42b3      	cmp	r3, r6
     a82:	d003      	beq.n	a8c <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     a84:	0028      	movs	r0, r5
     a86:	4b04      	ldr	r3, [pc, #16]	; (a98 <timer_add_timer_task+0x54>)
     a88:	4798      	blx	r3
	}
}
     a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     a8c:	4b01      	ldr	r3, [pc, #4]	; (a94 <timer_add_timer_task+0x50>)
     a8e:	4798      	blx	r3
     a90:	e7fb      	b.n	a8a <timer_add_timer_task+0x46>
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	00000cbd 	.word	0x00000cbd
     a98:	00000ce9 	.word	0x00000ce9

00000a9c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a9e:	0005      	movs	r5, r0
     aa0:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     aa2:	6903      	ldr	r3, [r0, #16]
     aa4:	1c5e      	adds	r6, r3, #1
     aa6:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     aa8:	7e03      	ldrb	r3, [r0, #24]
     aaa:	07db      	lsls	r3, r3, #31
     aac:	d402      	bmi.n	ab4 <timer_process_counted+0x18>
     aae:	7e03      	ldrb	r3, [r0, #24]
     ab0:	079b      	lsls	r3, r3, #30
     ab2:	d50a      	bpl.n	aca <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     ab4:	7e2b      	ldrb	r3, [r5, #24]
     ab6:	2202      	movs	r2, #2
     ab8:	4313      	orrs	r3, r2
     aba:	b2db      	uxtb	r3, r3
     abc:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ac0:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
     ac2:	68e3      	ldr	r3, [r4, #12]
     ac4:	0020      	movs	r0, r4
     ac6:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
     ac8:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
     aca:	2c00      	cmp	r4, #0
     acc:	d0f7      	beq.n	abe <timer_process_counted+0x22>
     ace:	6863      	ldr	r3, [r4, #4]
     ad0:	1af3      	subs	r3, r6, r3
     ad2:	68a2      	ldr	r2, [r4, #8]
     ad4:	4293      	cmp	r3, r2
     ad6:	d3f2      	bcc.n	abe <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
     ad8:	002f      	movs	r7, r5
     ada:	3714      	adds	r7, #20
     adc:	0038      	movs	r0, r7
     ade:	4b06      	ldr	r3, [pc, #24]	; (af8 <timer_process_counted+0x5c>)
     ae0:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     ae2:	7c23      	ldrb	r3, [r4, #16]
     ae4:	2b01      	cmp	r3, #1
     ae6:	d1eb      	bne.n	ac0 <timer_process_counted+0x24>
			tmp->time_label = time;
     ae8:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     aea:	0032      	movs	r2, r6
     aec:	0021      	movs	r1, r4
     aee:	0038      	movs	r0, r7
     af0:	4b02      	ldr	r3, [pc, #8]	; (afc <timer_process_counted+0x60>)
     af2:	4798      	blx	r3
     af4:	e7e4      	b.n	ac0 <timer_process_counted+0x24>
     af6:	46c0      	nop			; (mov r8, r8)
     af8:	00000cf1 	.word	0x00000cf1
     afc:	00000a45 	.word	0x00000a45

00000b00 <timer_init>:
{
     b00:	b570      	push	{r4, r5, r6, lr}
     b02:	0004      	movs	r4, r0
     b04:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     b06:	2800      	cmp	r0, #0
     b08:	d012      	beq.n	b30 <timer_init+0x30>
     b0a:	2900      	cmp	r1, #0
     b0c:	d00e      	beq.n	b2c <timer_init+0x2c>
     b0e:	2001      	movs	r0, #1
     b10:	223b      	movs	r2, #59	; 0x3b
     b12:	4908      	ldr	r1, [pc, #32]	; (b34 <timer_init+0x34>)
     b14:	4b08      	ldr	r3, [pc, #32]	; (b38 <timer_init+0x38>)
     b16:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     b18:	0029      	movs	r1, r5
     b1a:	0020      	movs	r0, r4
     b1c:	4b07      	ldr	r3, [pc, #28]	; (b3c <timer_init+0x3c>)
     b1e:	4798      	blx	r3
	descr->time                           = 0;
     b20:	2300      	movs	r3, #0
     b22:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     b24:	4b06      	ldr	r3, [pc, #24]	; (b40 <timer_init+0x40>)
     b26:	6023      	str	r3, [r4, #0]
}
     b28:	2000      	movs	r0, #0
     b2a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     b2c:	2000      	movs	r0, #0
     b2e:	e7ef      	b.n	b10 <timer_init+0x10>
     b30:	2000      	movs	r0, #0
     b32:	e7ed      	b.n	b10 <timer_init+0x10>
     b34:	00002d84 	.word	0x00002d84
     b38:	00000c9d 	.word	0x00000c9d
     b3c:	00001579 	.word	0x00001579
     b40:	00000a9d 	.word	0x00000a9d

00000b44 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b46:	0005      	movs	r5, r0
     b48:	000e      	movs	r6, r1
     b4a:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     b4c:	2800      	cmp	r0, #0
     b4e:	d023      	beq.n	b98 <usart_sync_write+0x54>
     b50:	2900      	cmp	r1, #0
     b52:	d023      	beq.n	b9c <usart_sync_write+0x58>
     b54:	2a00      	cmp	r2, #0
     b56:	d123      	bne.n	ba0 <usart_sync_write+0x5c>
     b58:	2000      	movs	r0, #0
     b5a:	22f1      	movs	r2, #241	; 0xf1
     b5c:	4911      	ldr	r1, [pc, #68]	; (ba4 <usart_sync_write+0x60>)
     b5e:	4b12      	ldr	r3, [pc, #72]	; (ba8 <usart_sync_write+0x64>)
     b60:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     b62:	002c      	movs	r4, r5
     b64:	3408      	adds	r4, #8
     b66:	0020      	movs	r0, r4
     b68:	4b10      	ldr	r3, [pc, #64]	; (bac <usart_sync_write+0x68>)
     b6a:	4798      	blx	r3
     b6c:	2800      	cmp	r0, #0
     b6e:	d0f8      	beq.n	b62 <usart_sync_write+0x1e>
     b70:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     b72:	5d71      	ldrb	r1, [r6, r5]
     b74:	0020      	movs	r0, r4
     b76:	4b0e      	ldr	r3, [pc, #56]	; (bb0 <usart_sync_write+0x6c>)
     b78:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     b7a:	0020      	movs	r0, r4
     b7c:	4b0b      	ldr	r3, [pc, #44]	; (bac <usart_sync_write+0x68>)
     b7e:	4798      	blx	r3
     b80:	2800      	cmp	r0, #0
     b82:	d0fa      	beq.n	b7a <usart_sync_write+0x36>
			;
	} while (++offset < length);
     b84:	3501      	adds	r5, #1
     b86:	42bd      	cmp	r5, r7
     b88:	d3f3      	bcc.n	b72 <usart_sync_write+0x2e>
	while (!_usart_sync_is_transmit_done(&descr->device))
     b8a:	0020      	movs	r0, r4
     b8c:	4b09      	ldr	r3, [pc, #36]	; (bb4 <usart_sync_write+0x70>)
     b8e:	4798      	blx	r3
     b90:	2800      	cmp	r0, #0
     b92:	d0fa      	beq.n	b8a <usart_sync_write+0x46>
		;
	return (int32_t)offset;
}
     b94:	0028      	movs	r0, r5
     b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     b98:	2000      	movs	r0, #0
     b9a:	e7de      	b.n	b5a <usart_sync_write+0x16>
     b9c:	2000      	movs	r0, #0
     b9e:	e7dc      	b.n	b5a <usart_sync_write+0x16>
     ba0:	2001      	movs	r0, #1
     ba2:	e7da      	b.n	b5a <usart_sync_write+0x16>
     ba4:	00002d9c 	.word	0x00002d9c
     ba8:	00000c9d 	.word	0x00000c9d
     bac:	000010e3 	.word	0x000010e3
     bb0:	000010d3 	.word	0x000010d3
     bb4:	000010ed 	.word	0x000010ed

00000bb8 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bba:	46ce      	mov	lr, r9
     bbc:	4647      	mov	r7, r8
     bbe:	b580      	push	{r7, lr}
     bc0:	1e05      	subs	r5, r0, #0
     bc2:	4688      	mov	r8, r1
     bc4:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     bc6:	d01f      	beq.n	c08 <usart_sync_read+0x50>
     bc8:	2900      	cmp	r1, #0
     bca:	d01f      	beq.n	c0c <usart_sync_read+0x54>
     bcc:	2a00      	cmp	r2, #0
     bce:	d11f      	bne.n	c10 <usart_sync_read+0x58>
     bd0:	2000      	movs	r0, #0
     bd2:	2286      	movs	r2, #134	; 0x86
     bd4:	0052      	lsls	r2, r2, #1
     bd6:	490f      	ldr	r1, [pc, #60]	; (c14 <usart_sync_read+0x5c>)
     bd8:	4b0f      	ldr	r3, [pc, #60]	; (c18 <usart_sync_read+0x60>)
     bda:	4798      	blx	r3
	uint32_t                      offset = 0;
     bdc:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     bde:	002c      	movs	r4, r5
     be0:	3408      	adds	r4, #8
     be2:	0020      	movs	r0, r4
     be4:	4b0d      	ldr	r3, [pc, #52]	; (c1c <usart_sync_read+0x64>)
     be6:	4798      	blx	r3
     be8:	2800      	cmp	r0, #0
     bea:	d0f8      	beq.n	bde <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     bec:	4643      	mov	r3, r8
     bee:	199f      	adds	r7, r3, r6
     bf0:	0020      	movs	r0, r4
     bf2:	4b0b      	ldr	r3, [pc, #44]	; (c20 <usart_sync_read+0x68>)
     bf4:	4798      	blx	r3
     bf6:	7038      	strb	r0, [r7, #0]
	} while (++offset < length);
     bf8:	3601      	adds	r6, #1
     bfa:	454e      	cmp	r6, r9
     bfc:	d3ef      	bcc.n	bde <usart_sync_read+0x26>

	return (int32_t)offset;
}
     bfe:	0030      	movs	r0, r6
     c00:	bc0c      	pop	{r2, r3}
     c02:	4690      	mov	r8, r2
     c04:	4699      	mov	r9, r3
     c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     c08:	2000      	movs	r0, #0
     c0a:	e7e2      	b.n	bd2 <usart_sync_read+0x1a>
     c0c:	2000      	movs	r0, #0
     c0e:	e7e0      	b.n	bd2 <usart_sync_read+0x1a>
     c10:	2001      	movs	r0, #1
     c12:	e7de      	b.n	bd2 <usart_sync_read+0x1a>
     c14:	00002d9c 	.word	0x00002d9c
     c18:	00000c9d 	.word	0x00000c9d
     c1c:	000010f9 	.word	0x000010f9
     c20:	000010db 	.word	0x000010db

00000c24 <usart_sync_init>:
{
     c24:	b570      	push	{r4, r5, r6, lr}
     c26:	0004      	movs	r4, r0
     c28:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     c2a:	2800      	cmp	r0, #0
     c2c:	d014      	beq.n	c58 <usart_sync_init+0x34>
     c2e:	2900      	cmp	r1, #0
     c30:	d010      	beq.n	c54 <usart_sync_init+0x30>
     c32:	2001      	movs	r0, #1
     c34:	2234      	movs	r2, #52	; 0x34
     c36:	4909      	ldr	r1, [pc, #36]	; (c5c <usart_sync_init+0x38>)
     c38:	4b09      	ldr	r3, [pc, #36]	; (c60 <usart_sync_init+0x3c>)
     c3a:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     c3c:	0020      	movs	r0, r4
     c3e:	3008      	adds	r0, #8
     c40:	0029      	movs	r1, r5
     c42:	4b08      	ldr	r3, [pc, #32]	; (c64 <usart_sync_init+0x40>)
     c44:	4798      	blx	r3
	if (init_status) {
     c46:	2800      	cmp	r0, #0
     c48:	d103      	bne.n	c52 <usart_sync_init+0x2e>
	descr->io.read  = usart_sync_read;
     c4a:	4b07      	ldr	r3, [pc, #28]	; (c68 <usart_sync_init+0x44>)
     c4c:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
     c4e:	4b07      	ldr	r3, [pc, #28]	; (c6c <usart_sync_init+0x48>)
     c50:	6023      	str	r3, [r4, #0]
}
     c52:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     c54:	2000      	movs	r0, #0
     c56:	e7ed      	b.n	c34 <usart_sync_init+0x10>
     c58:	2000      	movs	r0, #0
     c5a:	e7eb      	b.n	c34 <usart_sync_init+0x10>
     c5c:	00002d9c 	.word	0x00002d9c
     c60:	00000c9d 	.word	0x00000c9d
     c64:	00001095 	.word	0x00001095
     c68:	00000bb9 	.word	0x00000bb9
     c6c:	00000b45 	.word	0x00000b45

00000c70 <usart_sync_enable>:
{
     c70:	b510      	push	{r4, lr}
     c72:	0004      	movs	r4, r0
	ASSERT(descr);
     c74:	1e43      	subs	r3, r0, #1
     c76:	4198      	sbcs	r0, r3
     c78:	b2c0      	uxtb	r0, r0
     c7a:	2253      	movs	r2, #83	; 0x53
     c7c:	4904      	ldr	r1, [pc, #16]	; (c90 <usart_sync_enable+0x20>)
     c7e:	4b05      	ldr	r3, [pc, #20]	; (c94 <usart_sync_enable+0x24>)
     c80:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     c82:	0020      	movs	r0, r4
     c84:	3008      	adds	r0, #8
     c86:	4b04      	ldr	r3, [pc, #16]	; (c98 <usart_sync_enable+0x28>)
     c88:	4798      	blx	r3
}
     c8a:	2000      	movs	r0, #0
     c8c:	bd10      	pop	{r4, pc}
     c8e:	46c0      	nop			; (mov r8, r8)
     c90:	00002d9c 	.word	0x00002d9c
     c94:	00000c9d 	.word	0x00000c9d
     c98:	000010c1 	.word	0x000010c1

00000c9c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     c9c:	2800      	cmp	r0, #0
     c9e:	d100      	bne.n	ca2 <assert+0x6>
		__asm("BKPT #0");
     ca0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     ca2:	4770      	bx	lr

00000ca4 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     ca4:	6803      	ldr	r3, [r0, #0]
     ca6:	2b00      	cmp	r3, #0
     ca8:	d003      	beq.n	cb2 <is_list_element+0xe>
		if (it == element) {
     caa:	428b      	cmp	r3, r1
     cac:	d003      	beq.n	cb6 <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
     cae:	681b      	ldr	r3, [r3, #0]
     cb0:	e7f9      	b.n	ca6 <is_list_element+0x2>
			return true;
		}
	}

	return false;
     cb2:	2000      	movs	r0, #0
}
     cb4:	4770      	bx	lr
			return true;
     cb6:	2001      	movs	r0, #1
     cb8:	e7fc      	b.n	cb4 <is_list_element+0x10>
	...

00000cbc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     cbc:	b570      	push	{r4, r5, r6, lr}
     cbe:	0004      	movs	r4, r0
     cc0:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     cc2:	4b06      	ldr	r3, [pc, #24]	; (cdc <list_insert_as_head+0x20>)
     cc4:	4798      	blx	r3
     cc6:	2301      	movs	r3, #1
     cc8:	4058      	eors	r0, r3
     cca:	b2c0      	uxtb	r0, r0
     ccc:	2239      	movs	r2, #57	; 0x39
     cce:	4904      	ldr	r1, [pc, #16]	; (ce0 <list_insert_as_head+0x24>)
     cd0:	4b04      	ldr	r3, [pc, #16]	; (ce4 <list_insert_as_head+0x28>)
     cd2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     cd4:	6823      	ldr	r3, [r4, #0]
     cd6:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     cd8:	6025      	str	r5, [r4, #0]
}
     cda:	bd70      	pop	{r4, r5, r6, pc}
     cdc:	00000ca5 	.word	0x00000ca5
     ce0:	00002db8 	.word	0x00002db8
     ce4:	00000c9d 	.word	0x00000c9d

00000ce8 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     ce8:	6803      	ldr	r3, [r0, #0]
     cea:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     cec:	6001      	str	r1, [r0, #0]
}
     cee:	4770      	bx	lr

00000cf0 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     cf0:	6803      	ldr	r3, [r0, #0]
     cf2:	2b00      	cmp	r3, #0
     cf4:	d003      	beq.n	cfe <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     cf6:	681a      	ldr	r2, [r3, #0]
     cf8:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
     cfa:	0018      	movs	r0, r3
	}

	return NULL;
}
     cfc:	4770      	bx	lr
	return NULL;
     cfe:	2000      	movs	r0, #0
     d00:	e7fc      	b.n	cfc <list_remove_head+0xc>
	...

00000d04 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     d04:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     d06:	4a06      	ldr	r2, [pc, #24]	; (d20 <_sbrk+0x1c>)
     d08:	6812      	ldr	r2, [r2, #0]
     d0a:	2a00      	cmp	r2, #0
     d0c:	d004      	beq.n	d18 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     d0e:	4a04      	ldr	r2, [pc, #16]	; (d20 <_sbrk+0x1c>)
     d10:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     d12:	18c3      	adds	r3, r0, r3
     d14:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     d16:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     d18:	4902      	ldr	r1, [pc, #8]	; (d24 <_sbrk+0x20>)
     d1a:	4a01      	ldr	r2, [pc, #4]	; (d20 <_sbrk+0x1c>)
     d1c:	6011      	str	r1, [r2, #0]
     d1e:	e7f6      	b.n	d0e <_sbrk+0xa>
     d20:	20000094 	.word	0x20000094
     d24:	20002130 	.word	0x20002130

00000d28 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     d28:	2001      	movs	r0, #1
     d2a:	4240      	negs	r0, r0
     d2c:	4770      	bx	lr

00000d2e <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     d2e:	2380      	movs	r3, #128	; 0x80
     d30:	019b      	lsls	r3, r3, #6
     d32:	604b      	str	r3, [r1, #4]

	return 0;
}
     d34:	2000      	movs	r0, #0
     d36:	4770      	bx	lr

00000d38 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     d38:	2001      	movs	r0, #1
     d3a:	4770      	bx	lr

00000d3c <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     d3c:	2000      	movs	r0, #0
     d3e:	4770      	bx	lr

00000d40 <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
     d40:	23c8      	movs	r3, #200	; 0xc8
     d42:	009b      	lsls	r3, r3, #2
     d44:	4358      	muls	r0, r3
     d46:	0083      	lsls	r3, r0, #2
     d48:	181b      	adds	r3, r3, r0
     d4a:	0058      	lsls	r0, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     d4c:	4770      	bx	lr
	...

00000d50 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     d50:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     d52:	4b06      	ldr	r3, [pc, #24]	; (d6c <_init_chip+0x1c>)
     d54:	685a      	ldr	r2, [r3, #4]
     d56:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     d58:	4b05      	ldr	r3, [pc, #20]	; (d70 <_init_chip+0x20>)
     d5a:	4798      	blx	r3
	_sysctrl_init_sources();
     d5c:	4b05      	ldr	r3, [pc, #20]	; (d74 <_init_chip+0x24>)
     d5e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     d60:	4b05      	ldr	r3, [pc, #20]	; (d78 <_init_chip+0x28>)
     d62:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     d64:	20ff      	movs	r0, #255	; 0xff
     d66:	4b05      	ldr	r3, [pc, #20]	; (d7c <_init_chip+0x2c>)
     d68:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     d6a:	bd10      	pop	{r4, pc}
     d6c:	41004000 	.word	0x41004000
     d70:	00000f31 	.word	0x00000f31
     d74:	0000141d 	.word	0x0000141d
     d78:	00001479 	.word	0x00001479
     d7c:	00000ed5 	.word	0x00000ed5

00000d80 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     d80:	4b22      	ldr	r3, [pc, #136]	; (e0c <_ext_irq_init+0x8c>)
     d82:	785b      	ldrb	r3, [r3, #1]
     d84:	09db      	lsrs	r3, r3, #7
     d86:	d1fb      	bne.n	d80 <_ext_irq_init>
     d88:	4b20      	ldr	r3, [pc, #128]	; (e0c <_ext_irq_init+0x8c>)
     d8a:	785b      	ldrb	r3, [r3, #1]
     d8c:	09db      	lsrs	r3, r3, #7
     d8e:	d1fb      	bne.n	d88 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     d90:	4b1e      	ldr	r3, [pc, #120]	; (e0c <_ext_irq_init+0x8c>)
     d92:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     d94:	079b      	lsls	r3, r3, #30
     d96:	d50a      	bpl.n	dae <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     d98:	2200      	movs	r2, #0
     d9a:	4b1c      	ldr	r3, [pc, #112]	; (e0c <_ext_irq_init+0x8c>)
     d9c:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     d9e:	4b1b      	ldr	r3, [pc, #108]	; (e0c <_ext_irq_init+0x8c>)
     da0:	785b      	ldrb	r3, [r3, #1]
     da2:	09db      	lsrs	r3, r3, #7
     da4:	d1fb      	bne.n	d9e <_ext_irq_init+0x1e>
     da6:	4b19      	ldr	r3, [pc, #100]	; (e0c <_ext_irq_init+0x8c>)
     da8:	785b      	ldrb	r3, [r3, #1]
     daa:	09db      	lsrs	r3, r3, #7
     dac:	d1fb      	bne.n	da6 <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
     dae:	2201      	movs	r2, #1
     db0:	4b16      	ldr	r3, [pc, #88]	; (e0c <_ext_irq_init+0x8c>)
     db2:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     db4:	4b15      	ldr	r3, [pc, #84]	; (e0c <_ext_irq_init+0x8c>)
     db6:	785b      	ldrb	r3, [r3, #1]
     db8:	09db      	lsrs	r3, r3, #7
     dba:	d1fb      	bne.n	db4 <_ext_irq_init+0x34>
     dbc:	4b13      	ldr	r3, [pc, #76]	; (e0c <_ext_irq_init+0x8c>)
     dbe:	785b      	ldrb	r3, [r3, #1]
     dc0:	09db      	lsrs	r3, r3, #7
     dc2:	d1fb      	bne.n	dbc <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     dc4:	4b11      	ldr	r3, [pc, #68]	; (e0c <_ext_irq_init+0x8c>)
     dc6:	2200      	movs	r2, #0
     dc8:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     dca:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     dcc:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     dce:	2280      	movs	r2, #128	; 0x80
     dd0:	0292      	lsls	r2, r2, #10
     dd2:	619a      	str	r2, [r3, #24]
     dd4:	2280      	movs	r2, #128	; 0x80
     dd6:	0492      	lsls	r2, r2, #18
     dd8:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     dda:	781a      	ldrb	r2, [r3, #0]
     ddc:	2102      	movs	r1, #2
     dde:	430a      	orrs	r2, r1
     de0:	b2d2      	uxtb	r2, r2
     de2:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     de4:	4b09      	ldr	r3, [pc, #36]	; (e0c <_ext_irq_init+0x8c>)
     de6:	785b      	ldrb	r3, [r3, #1]
     de8:	09db      	lsrs	r3, r3, #7
     dea:	d1fb      	bne.n	de4 <_ext_irq_init+0x64>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     dec:	4b08      	ldr	r3, [pc, #32]	; (e10 <_ext_irq_init+0x90>)
     dee:	2210      	movs	r2, #16
     df0:	2180      	movs	r1, #128	; 0x80
     df2:	505a      	str	r2, [r3, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     df4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     df8:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     dfc:	3101      	adds	r1, #1
     dfe:	31ff      	adds	r1, #255	; 0xff
     e00:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e02:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     e04:	4b03      	ldr	r3, [pc, #12]	; (e14 <_ext_irq_init+0x94>)
     e06:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     e08:	2000      	movs	r0, #0
     e0a:	4770      	bx	lr
     e0c:	40001800 	.word	0x40001800
     e10:	e000e100 	.word	0xe000e100
     e14:	20000098 	.word	0x20000098

00000e18 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     e18:	b5f0      	push	{r4, r5, r6, r7, lr}
     e1a:	b083      	sub	sp, #12
	return ((Eic *)hw)->INTFLAG.reg;
     e1c:	4b27      	ldr	r3, [pc, #156]	; (ebc <EIC_Handler+0xa4>)
     e1e:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     e20:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     e22:	400a      	ands	r2, r1
     e24:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     e26:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     e28:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     e2a:	4b25      	ldr	r3, [pc, #148]	; (ec0 <EIC_Handler+0xa8>)
     e2c:	6818      	ldr	r0, [r3, #0]
     e2e:	1e43      	subs	r3, r0, #1
     e30:	4198      	sbcs	r0, r3
     e32:	b2c0      	uxtb	r0, r0
     e34:	22d2      	movs	r2, #210	; 0xd2
     e36:	4923      	ldr	r1, [pc, #140]	; (ec4 <EIC_Handler+0xac>)
     e38:	4b23      	ldr	r3, [pc, #140]	; (ec8 <EIC_Handler+0xb0>)
     e3a:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
     e3c:	2501      	movs	r5, #1
     e3e:	426d      	negs	r5, r5

	while (flags) {
     e40:	e031      	b.n	ea6 <EIC_Handler+0x8e>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
     e42:	00db      	lsls	r3, r3, #3
     e44:	4a21      	ldr	r2, [pc, #132]	; (ecc <EIC_Handler+0xb4>)
     e46:	18d3      	adds	r3, r2, r3
     e48:	685d      	ldr	r5, [r3, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
     e4a:	1c6b      	adds	r3, r5, #1
     e4c:	d003      	beq.n	e56 <EIC_Handler+0x3e>
				callback(pin);
     e4e:	4b1c      	ldr	r3, [pc, #112]	; (ec0 <EIC_Handler+0xa8>)
     e50:	681b      	ldr	r3, [r3, #0]
     e52:	0028      	movs	r0, r5
     e54:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     e56:	2201      	movs	r2, #1
     e58:	40a2      	lsls	r2, r4
     e5a:	9b01      	ldr	r3, [sp, #4]
     e5c:	4393      	bics	r3, r2
     e5e:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     e60:	9801      	ldr	r0, [sp, #4]
     e62:	4b1b      	ldr	r3, [pc, #108]	; (ed0 <EIC_Handler+0xb8>)
     e64:	4798      	blx	r3
     e66:	3801      	subs	r0, #1
     e68:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     e6a:	1c63      	adds	r3, r4, #1
     e6c:	d014      	beq.n	e98 <EIC_Handler+0x80>
     e6e:	2602      	movs	r6, #2
     e70:	2000      	movs	r0, #0
     e72:	e001      	b.n	e78 <EIC_Handler+0x60>
					upper = middle - 1;
     e74:	3901      	subs	r1, #1
     e76:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
     e78:	42b0      	cmp	r0, r6
     e7a:	d8e6      	bhi.n	e4a <EIC_Handler+0x32>
				middle = (upper + lower) >> 1;
     e7c:	1833      	adds	r3, r6, r0
     e7e:	105b      	asrs	r3, r3, #1
     e80:	b2d9      	uxtb	r1, r3
     e82:	22ff      	movs	r2, #255	; 0xff
     e84:	4013      	ands	r3, r2
				if (_map[middle].extint == pos) {
     e86:	00df      	lsls	r7, r3, #3
     e88:	4a10      	ldr	r2, [pc, #64]	; (ecc <EIC_Handler+0xb4>)
     e8a:	5cba      	ldrb	r2, [r7, r2]
     e8c:	42a2      	cmp	r2, r4
     e8e:	d0d8      	beq.n	e42 <EIC_Handler+0x2a>
				if (_map[middle].extint < pos) {
     e90:	daf0      	bge.n	e74 <EIC_Handler+0x5c>
					lower = middle + 1;
     e92:	3101      	adds	r1, #1
     e94:	b2c8      	uxtb	r0, r1
     e96:	e7ef      	b.n	e78 <EIC_Handler+0x60>
	return ((Eic *)hw)->INTFLAG.reg;
     e98:	4b08      	ldr	r3, [pc, #32]	; (ebc <EIC_Handler+0xa4>)
     e9a:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     e9c:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     e9e:	400a      	ands	r2, r1
     ea0:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     ea2:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     ea4:	611a      	str	r2, [r3, #16]
	while (flags) {
     ea6:	9b01      	ldr	r3, [sp, #4]
     ea8:	2b00      	cmp	r3, #0
     eaa:	d005      	beq.n	eb8 <EIC_Handler+0xa0>
		pos = ffs(flags) - 1;
     eac:	9801      	ldr	r0, [sp, #4]
     eae:	4b08      	ldr	r3, [pc, #32]	; (ed0 <EIC_Handler+0xb8>)
     eb0:	4798      	blx	r3
     eb2:	3801      	subs	r0, #1
     eb4:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     eb6:	e7d8      	b.n	e6a <EIC_Handler+0x52>
	}
}
     eb8:	b003      	add	sp, #12
     eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ebc:	40001800 	.word	0x40001800
     ec0:	20000098 	.word	0x20000098
     ec4:	00002de8 	.word	0x00002de8
     ec8:	00000c9d 	.word	0x00000c9d
     ecc:	00002dd8 	.word	0x00002dd8
     ed0:	00001b49 	.word	0x00001b49

00000ed4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     ed4:	07c3      	lsls	r3, r0, #31
     ed6:	d50a      	bpl.n	eee <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     ed8:	4b10      	ldr	r3, [pc, #64]	; (f1c <_gclk_init_generators_by_fref+0x48>)
     eda:	2280      	movs	r2, #128	; 0x80
     edc:	0052      	lsls	r2, r2, #1
     ede:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     ee0:	2283      	movs	r2, #131	; 0x83
     ee2:	0252      	lsls	r2, r2, #9
     ee4:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     ee6:	4b0d      	ldr	r3, [pc, #52]	; (f1c <_gclk_init_generators_by_fref+0x48>)
     ee8:	785b      	ldrb	r3, [r3, #1]
     eea:	09db      	lsrs	r3, r3, #7
     eec:	d1fb      	bne.n	ee6 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     eee:	0783      	lsls	r3, r0, #30
     ef0:	d508      	bpl.n	f04 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     ef2:	4b0a      	ldr	r3, [pc, #40]	; (f1c <_gclk_init_generators_by_fref+0x48>)
     ef4:	4a0a      	ldr	r2, [pc, #40]	; (f20 <_gclk_init_generators_by_fref+0x4c>)
     ef6:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     ef8:	4a0a      	ldr	r2, [pc, #40]	; (f24 <_gclk_init_generators_by_fref+0x50>)
     efa:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     efc:	4b07      	ldr	r3, [pc, #28]	; (f1c <_gclk_init_generators_by_fref+0x48>)
     efe:	785b      	ldrb	r3, [r3, #1]
     f00:	09db      	lsrs	r3, r3, #7
     f02:	d1fb      	bne.n	efc <_gclk_init_generators_by_fref+0x28>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     f04:	0703      	lsls	r3, r0, #28
     f06:	d508      	bpl.n	f1a <_gclk_init_generators_by_fref+0x46>
	((Gclk *)hw)->GENDIV.reg = data;
     f08:	4b04      	ldr	r3, [pc, #16]	; (f1c <_gclk_init_generators_by_fref+0x48>)
     f0a:	4a07      	ldr	r2, [pc, #28]	; (f28 <_gclk_init_generators_by_fref+0x54>)
     f0c:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     f0e:	4a07      	ldr	r2, [pc, #28]	; (f2c <_gclk_init_generators_by_fref+0x58>)
     f10:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     f12:	4b02      	ldr	r3, [pc, #8]	; (f1c <_gclk_init_generators_by_fref+0x48>)
     f14:	785b      	ldrb	r3, [r3, #1]
     f16:	09db      	lsrs	r3, r3, #7
     f18:	d1fb      	bne.n	f12 <_gclk_init_generators_by_fref+0x3e>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     f1a:	4770      	bx	lr
     f1c:	40000c00 	.word	0x40000c00
     f20:	00002001 	.word	0x00002001
     f24:	00010401 	.word	0x00010401
     f28:	00000803 	.word	0x00000803
     f2c:	00010603 	.word	0x00010603

00000f30 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     f30:	4b06      	ldr	r3, [pc, #24]	; (f4c <_pm_init+0x1c>)
     f32:	7a1a      	ldrb	r2, [r3, #8]
     f34:	b2d2      	uxtb	r2, r2
     f36:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     f38:	7a5a      	ldrb	r2, [r3, #9]
     f3a:	b2d2      	uxtb	r2, r2
     f3c:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     f3e:	7a9a      	ldrb	r2, [r3, #10]
     f40:	b2d2      	uxtb	r2, r2
     f42:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     f44:	7ada      	ldrb	r2, [r3, #11]
     f46:	b2d2      	uxtb	r2, r2
     f48:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     f4a:	4770      	bx	lr
     f4c:	40000400 	.word	0x40000400

00000f50 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     f50:	4b02      	ldr	r3, [pc, #8]	; (f5c <_sercom_get_hardware_index+0xc>)
     f52:	469c      	mov	ip, r3
     f54:	4460      	add	r0, ip
     f56:	0a80      	lsrs	r0, r0, #10
     f58:	b2c0      	uxtb	r0, r0
}
     f5a:	4770      	bx	lr
     f5c:	bdfff800 	.word	0xbdfff800

00000f60 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
     f60:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     f62:	4b0b      	ldr	r3, [pc, #44]	; (f90 <_get_sercom_index+0x30>)
     f64:	4798      	blx	r3
     f66:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     f68:	2000      	movs	r0, #0
     f6a:	2800      	cmp	r0, #0
     f6c:	d006      	beq.n	f7c <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
     f6e:	4a09      	ldr	r2, [pc, #36]	; (f94 <_get_sercom_index+0x34>)
     f70:	4909      	ldr	r1, [pc, #36]	; (f98 <_get_sercom_index+0x38>)
     f72:	2000      	movs	r0, #0
     f74:	4b09      	ldr	r3, [pc, #36]	; (f9c <_get_sercom_index+0x3c>)
     f76:	4798      	blx	r3
	return 0;
     f78:	2000      	movs	r0, #0
}
     f7a:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
     f7c:	0083      	lsls	r3, r0, #2
     f7e:	181b      	adds	r3, r3, r0
     f80:	0099      	lsls	r1, r3, #2
     f82:	4b07      	ldr	r3, [pc, #28]	; (fa0 <_get_sercom_index+0x40>)
     f84:	5ccb      	ldrb	r3, [r1, r3]
     f86:	429a      	cmp	r2, r3
     f88:	d0f7      	beq.n	f7a <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     f8a:	3001      	adds	r0, #1
     f8c:	b2c0      	uxtb	r0, r0
     f8e:	e7ec      	b.n	f6a <_get_sercom_index+0xa>
     f90:	00000f51 	.word	0x00000f51
     f94:	0000023a 	.word	0x0000023a
     f98:	00002e60 	.word	0x00002e60
     f9c:	00000c9d 	.word	0x00000c9d
     fa0:	00002e00 	.word	0x00002e00

00000fa4 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     fa4:	b570      	push	{r4, r5, r6, lr}
     fa6:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
     fa8:	4b38      	ldr	r3, [pc, #224]	; (108c <_usart_init+0xe8>)
     faa:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     fac:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     fae:	07db      	lsls	r3, r3, #31
     fb0:	d41d      	bmi.n	fee <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     fb2:	0083      	lsls	r3, r0, #2
     fb4:	181b      	adds	r3, r3, r0
     fb6:	009a      	lsls	r2, r3, #2
     fb8:	4b35      	ldr	r3, [pc, #212]	; (1090 <_usart_init+0xec>)
     fba:	189b      	adds	r3, r3, r2
     fbc:	685a      	ldr	r2, [r3, #4]
     fbe:	231c      	movs	r3, #28
     fc0:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     fc2:	69e3      	ldr	r3, [r4, #28]
     fc4:	079b      	lsls	r3, r3, #30
     fc6:	d1fc      	bne.n	fc2 <_usart_init+0x1e>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     fc8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     fca:	079b      	lsls	r3, r3, #30
     fcc:	d509      	bpl.n	fe2 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     fce:	6823      	ldr	r3, [r4, #0]
     fd0:	2102      	movs	r1, #2
     fd2:	438b      	bics	r3, r1
     fd4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     fd6:	69e3      	ldr	r3, [r4, #28]
     fd8:	079b      	lsls	r3, r3, #30
     fda:	d1fc      	bne.n	fd6 <_usart_init+0x32>
     fdc:	69e3      	ldr	r3, [r4, #28]
     fde:	079b      	lsls	r3, r3, #30
     fe0:	d4fc      	bmi.n	fdc <_usart_init+0x38>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     fe2:	2301      	movs	r3, #1
     fe4:	4313      	orrs	r3, r2
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     fe6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     fe8:	69e3      	ldr	r3, [r4, #28]
     fea:	079b      	lsls	r3, r3, #30
     fec:	d1fc      	bne.n	fe8 <_usart_init+0x44>
     fee:	69e3      	ldr	r3, [r4, #28]
     ff0:	07db      	lsls	r3, r3, #31
     ff2:	d4fc      	bmi.n	fee <_usart_init+0x4a>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     ff4:	0083      	lsls	r3, r0, #2
     ff6:	181b      	adds	r3, r3, r0
     ff8:	009a      	lsls	r2, r3, #2
     ffa:	4b25      	ldr	r3, [pc, #148]	; (1090 <_usart_init+0xec>)
     ffc:	189b      	adds	r3, r3, r2
     ffe:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1000:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1002:	69e3      	ldr	r3, [r4, #28]
    1004:	079b      	lsls	r3, r3, #30
    1006:	d1fc      	bne.n	1002 <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1008:	0083      	lsls	r3, r0, #2
    100a:	181b      	adds	r3, r3, r0
    100c:	009a      	lsls	r2, r3, #2
    100e:	4b20      	ldr	r3, [pc, #128]	; (1090 <_usart_init+0xec>)
    1010:	189b      	adds	r3, r3, r2
    1012:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1014:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1016:	69e3      	ldr	r3, [r4, #28]
    1018:	075b      	lsls	r3, r3, #29
    101a:	d1fc      	bne.n	1016 <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    101c:	0083      	lsls	r3, r0, #2
    101e:	181b      	adds	r3, r3, r0
    1020:	009a      	lsls	r2, r3, #2
    1022:	4b1b      	ldr	r3, [pc, #108]	; (1090 <_usart_init+0xec>)
    1024:	189b      	adds	r3, r3, r2
    1026:	685b      	ldr	r3, [r3, #4]
    1028:	049a      	lsls	r2, r3, #18
    102a:	d40b      	bmi.n	1044 <_usart_init+0xa0>
    102c:	22c0      	movs	r2, #192	; 0xc0
    102e:	01d2      	lsls	r2, r2, #7
    1030:	4213      	tst	r3, r2
    1032:	d107      	bne.n	1044 <_usart_init+0xa0>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1034:	0083      	lsls	r3, r0, #2
    1036:	181b      	adds	r3, r3, r0
    1038:	009a      	lsls	r2, r3, #2
    103a:	4b15      	ldr	r3, [pc, #84]	; (1090 <_usart_init+0xec>)
    103c:	189b      	adds	r3, r3, r2
    103e:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1040:	81a3      	strh	r3, [r4, #12]
    1042:	e015      	b.n	1070 <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1044:	0083      	lsls	r3, r0, #2
    1046:	181b      	adds	r3, r3, r0
    1048:	009a      	lsls	r2, r3, #2
    104a:	4911      	ldr	r1, [pc, #68]	; (1090 <_usart_init+0xec>)
    104c:	1889      	adds	r1, r1, r2
    104e:	898a      	ldrh	r2, [r1, #12]
    1050:	89a3      	ldrh	r3, [r4, #12]
    1052:	04d2      	lsls	r2, r2, #19
    1054:	0cd2      	lsrs	r2, r2, #19
    1056:	0b5b      	lsrs	r3, r3, #13
    1058:	035b      	lsls	r3, r3, #13
    105a:	4313      	orrs	r3, r2
    105c:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    105e:	7b8b      	ldrb	r3, [r1, #14]
    1060:	2207      	movs	r2, #7
    1062:	401a      	ands	r2, r3
    1064:	89a3      	ldrh	r3, [r4, #12]
    1066:	0352      	lsls	r2, r2, #13
    1068:	04db      	lsls	r3, r3, #19
    106a:	0cdb      	lsrs	r3, r3, #19
    106c:	4313      	orrs	r3, r2
    106e:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1070:	4a07      	ldr	r2, [pc, #28]	; (1090 <_usart_init+0xec>)
    1072:	0083      	lsls	r3, r0, #2
    1074:	181d      	adds	r5, r3, r0
    1076:	00a9      	lsls	r1, r5, #2
    1078:	000d      	movs	r5, r1
    107a:	1851      	adds	r1, r2, r1
    107c:	7bc9      	ldrb	r1, [r1, #15]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    107e:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1080:	1952      	adds	r2, r2, r5
    1082:	7c12      	ldrb	r2, [r2, #16]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1084:	2330      	movs	r3, #48	; 0x30
    1086:	54e2      	strb	r2, [r4, r3]

	return ERR_NONE;
}
    1088:	2000      	movs	r0, #0
    108a:	bd70      	pop	{r4, r5, r6, pc}
    108c:	00000f61 	.word	0x00000f61
    1090:	00002e00 	.word	0x00002e00

00001094 <_usart_sync_init>:
{
    1094:	b570      	push	{r4, r5, r6, lr}
    1096:	0005      	movs	r5, r0
    1098:	000c      	movs	r4, r1
	ASSERT(device);
    109a:	1e43      	subs	r3, r0, #1
    109c:	4198      	sbcs	r0, r3
    109e:	b2c0      	uxtb	r0, r0
    10a0:	22b4      	movs	r2, #180	; 0xb4
    10a2:	4904      	ldr	r1, [pc, #16]	; (10b4 <_usart_sync_init+0x20>)
    10a4:	4b04      	ldr	r3, [pc, #16]	; (10b8 <_usart_sync_init+0x24>)
    10a6:	4798      	blx	r3
	device->hw = hw;
    10a8:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    10aa:	0020      	movs	r0, r4
    10ac:	4b03      	ldr	r3, [pc, #12]	; (10bc <_usart_sync_init+0x28>)
    10ae:	4798      	blx	r3
}
    10b0:	bd70      	pop	{r4, r5, r6, pc}
    10b2:	46c0      	nop			; (mov r8, r8)
    10b4:	00002e60 	.word	0x00002e60
    10b8:	00000c9d 	.word	0x00000c9d
    10bc:	00000fa5 	.word	0x00000fa5

000010c0 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    10c0:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    10c2:	6813      	ldr	r3, [r2, #0]
    10c4:	2102      	movs	r1, #2
    10c6:	430b      	orrs	r3, r1
    10c8:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10ca:	69d3      	ldr	r3, [r2, #28]
    10cc:	079b      	lsls	r3, r3, #30
    10ce:	d1fc      	bne.n	10ca <_usart_sync_enable+0xa>
}
    10d0:	4770      	bx	lr

000010d2 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    10d2:	6803      	ldr	r3, [r0, #0]
    10d4:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    10d6:	8519      	strh	r1, [r3, #40]	; 0x28
}
    10d8:	4770      	bx	lr

000010da <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    10da:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    10dc:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    10de:	b2c0      	uxtb	r0, r0
}
    10e0:	4770      	bx	lr

000010e2 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    10e2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    10e4:	7e18      	ldrb	r0, [r3, #24]
    10e6:	2301      	movs	r3, #1
    10e8:	4018      	ands	r0, r3
}
    10ea:	4770      	bx	lr

000010ec <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    10ec:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    10ee:	7e1b      	ldrb	r3, [r3, #24]
    10f0:	085b      	lsrs	r3, r3, #1
    10f2:	2001      	movs	r0, #1
    10f4:	4018      	ands	r0, r3
}
    10f6:	4770      	bx	lr

000010f8 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    10f8:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    10fa:	7e1b      	ldrb	r3, [r3, #24]
    10fc:	089b      	lsrs	r3, r3, #2
    10fe:	2001      	movs	r0, #1
    1100:	4018      	ands	r0, r3
}
    1102:	4770      	bx	lr

00001104 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1106:	0006      	movs	r6, r0
    1108:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    110a:	0008      	movs	r0, r1
    110c:	4b73      	ldr	r3, [pc, #460]	; (12dc <_spi_m_sync_init+0x1d8>)
    110e:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1110:	2300      	movs	r3, #0
    1112:	2b01      	cmp	r3, #1
    1114:	d80e      	bhi.n	1134 <_spi_m_sync_init+0x30>
		if (sercomspi_regs[i].n == n) {
    1116:	0119      	lsls	r1, r3, #4
    1118:	18c9      	adds	r1, r1, r3
    111a:	4a71      	ldr	r2, [pc, #452]	; (12e0 <_spi_m_sync_init+0x1dc>)
    111c:	1852      	adds	r2, r2, r1
    111e:	324c      	adds	r2, #76	; 0x4c
    1120:	7812      	ldrb	r2, [r2, #0]
    1122:	4290      	cmp	r0, r2
    1124:	d002      	beq.n	112c <_spi_m_sync_init+0x28>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1126:	3301      	adds	r3, #1
    1128:	b2db      	uxtb	r3, r3
    112a:	e7f2      	b.n	1112 <_spi_m_sync_init+0xe>
			return &sercomspi_regs[i];
    112c:	4d6c      	ldr	r5, [pc, #432]	; (12e0 <_spi_m_sync_init+0x1dc>)
    112e:	353c      	adds	r5, #60	; 0x3c
    1130:	186d      	adds	r5, r5, r1
    1132:	e000      	b.n	1136 <_spi_m_sync_init+0x32>
	return NULL;
    1134:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1136:	2e00      	cmp	r6, #0
    1138:	d100      	bne.n	113c <_spi_m_sync_init+0x38>
    113a:	e082      	b.n	1242 <_spi_m_sync_init+0x13e>
    113c:	2c00      	cmp	r4, #0
    113e:	d100      	bne.n	1142 <_spi_m_sync_init+0x3e>
    1140:	e07d      	b.n	123e <_spi_m_sync_init+0x13a>
    1142:	2001      	movs	r0, #1
    1144:	4a67      	ldr	r2, [pc, #412]	; (12e4 <_spi_m_sync_init+0x1e0>)
    1146:	4968      	ldr	r1, [pc, #416]	; (12e8 <_spi_m_sync_init+0x1e4>)
    1148:	4b68      	ldr	r3, [pc, #416]	; (12ec <_spi_m_sync_init+0x1e8>)
    114a:	4798      	blx	r3

	if (regs == NULL) {
    114c:	2d00      	cmp	r5, #0
    114e:	d100      	bne.n	1152 <_spi_m_sync_init+0x4e>
    1150:	e0c0      	b.n	12d4 <_spi_m_sync_init+0x1d0>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1152:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1154:	07db      	lsls	r3, r3, #31
    1156:	d421      	bmi.n	119c <_spi_m_sync_init+0x98>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    1158:	782a      	ldrb	r2, [r5, #0]
    115a:	786b      	ldrb	r3, [r5, #1]
    115c:	021b      	lsls	r3, r3, #8
    115e:	4313      	orrs	r3, r2
    1160:	78aa      	ldrb	r2, [r5, #2]
    1162:	0412      	lsls	r2, r2, #16
    1164:	4313      	orrs	r3, r2
    1166:	78ea      	ldrb	r2, [r5, #3]
    1168:	0612      	lsls	r2, r2, #24
    116a:	431a      	orrs	r2, r3
    116c:	231c      	movs	r3, #28
    116e:	401a      	ands	r2, r3
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1170:	69e3      	ldr	r3, [r4, #28]
    1172:	079b      	lsls	r3, r3, #30
    1174:	d1fc      	bne.n	1170 <_spi_m_sync_init+0x6c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1176:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1178:	079b      	lsls	r3, r3, #30
    117a:	d509      	bpl.n	1190 <_spi_m_sync_init+0x8c>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    117c:	6823      	ldr	r3, [r4, #0]
    117e:	2102      	movs	r1, #2
    1180:	438b      	bics	r3, r1
    1182:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1184:	69e3      	ldr	r3, [r4, #28]
    1186:	079b      	lsls	r3, r3, #30
    1188:	d1fc      	bne.n	1184 <_spi_m_sync_init+0x80>
    118a:	69e3      	ldr	r3, [r4, #28]
    118c:	079b      	lsls	r3, r3, #30
    118e:	d4fc      	bmi.n	118a <_spi_m_sync_init+0x86>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    1190:	2301      	movs	r3, #1
    1192:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1194:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1196:	69e3      	ldr	r3, [r4, #28]
    1198:	079b      	lsls	r3, r3, #30
    119a:	d1fc      	bne.n	1196 <_spi_m_sync_init+0x92>
    119c:	69e3      	ldr	r3, [r4, #28]
    119e:	07db      	lsls	r3, r3, #31
    11a0:	d4fc      	bmi.n	119c <_spi_m_sync_init+0x98>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    11a2:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    11a4:	782b      	ldrb	r3, [r5, #0]
    11a6:	786a      	ldrb	r2, [r5, #1]
    11a8:	0212      	lsls	r2, r2, #8
    11aa:	431a      	orrs	r2, r3
    11ac:	78ab      	ldrb	r3, [r5, #2]
    11ae:	041b      	lsls	r3, r3, #16
    11b0:	431a      	orrs	r2, r3
    11b2:	78eb      	ldrb	r3, [r5, #3]
    11b4:	061b      	lsls	r3, r3, #24
    11b6:	4313      	orrs	r3, r2
    11b8:	221c      	movs	r2, #28
    11ba:	4013      	ands	r3, r2
    11bc:	2b08      	cmp	r3, #8
    11be:	d042      	beq.n	1246 <_spi_m_sync_init+0x142>
	ASSERT(hw && regs);
    11c0:	2c00      	cmp	r4, #0
    11c2:	d100      	bne.n	11c6 <_spi_m_sync_init+0xc2>
    11c4:	e082      	b.n	12cc <_spi_m_sync_init+0x1c8>
    11c6:	2d00      	cmp	r5, #0
    11c8:	d100      	bne.n	11cc <_spi_m_sync_init+0xc8>
    11ca:	e07d      	b.n	12c8 <_spi_m_sync_init+0x1c4>
    11cc:	2001      	movs	r0, #1
    11ce:	4a48      	ldr	r2, [pc, #288]	; (12f0 <_spi_m_sync_init+0x1ec>)
    11d0:	4945      	ldr	r1, [pc, #276]	; (12e8 <_spi_m_sync_init+0x1e4>)
    11d2:	4b46      	ldr	r3, [pc, #280]	; (12ec <_spi_m_sync_init+0x1e8>)
    11d4:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    11d6:	782b      	ldrb	r3, [r5, #0]
    11d8:	786a      	ldrb	r2, [r5, #1]
    11da:	0212      	lsls	r2, r2, #8
    11dc:	431a      	orrs	r2, r3
    11de:	78ab      	ldrb	r3, [r5, #2]
    11e0:	041b      	lsls	r3, r3, #16
    11e2:	431a      	orrs	r2, r3
    11e4:	78eb      	ldrb	r3, [r5, #3]
    11e6:	061b      	lsls	r3, r3, #24
    11e8:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    11ea:	4a42      	ldr	r2, [pc, #264]	; (12f4 <_spi_m_sync_init+0x1f0>)
    11ec:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    11ee:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    11f0:	69e3      	ldr	r3, [r4, #28]
    11f2:	079b      	lsls	r3, r3, #30
    11f4:	d1fc      	bne.n	11f0 <_spi_m_sync_init+0xec>
	    (regs->ctrlb
    11f6:	792b      	ldrb	r3, [r5, #4]
    11f8:	796a      	ldrb	r2, [r5, #5]
    11fa:	0212      	lsls	r2, r2, #8
    11fc:	431a      	orrs	r2, r3
    11fe:	79ab      	ldrb	r3, [r5, #6]
    1200:	041b      	lsls	r3, r3, #16
    1202:	431a      	orrs	r2, r3
    1204:	79eb      	ldrb	r3, [r5, #7]
    1206:	061b      	lsls	r3, r3, #24
    1208:	4313      	orrs	r3, r2
	        | (SERCOM_SPI_CTRLB_RXEN));
    120a:	4a3b      	ldr	r2, [pc, #236]	; (12f8 <_spi_m_sync_init+0x1f4>)
    120c:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    120e:	2280      	movs	r2, #128	; 0x80
    1210:	0292      	lsls	r2, r2, #10
    1212:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1214:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1216:	69e3      	ldr	r3, [r4, #28]
    1218:	075b      	lsls	r3, r3, #29
    121a:	d1fc      	bne.n	1216 <_spi_m_sync_init+0x112>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    121c:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    121e:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1220:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1222:	2330      	movs	r3, #48	; 0x30
    1224:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1226:	792b      	ldrb	r3, [r5, #4]
    1228:	075b      	lsls	r3, r3, #29
    122a:	d151      	bne.n	12d0 <_spi_m_sync_init+0x1cc>
    122c:	2301      	movs	r3, #1
    122e:	7133      	strb	r3, [r6, #4]

	dev->dummy_byte = regs->dummy_byte;
    1230:	7baa      	ldrb	r2, [r5, #14]
    1232:	7beb      	ldrb	r3, [r5, #15]
    1234:	021b      	lsls	r3, r3, #8
    1236:	4313      	orrs	r3, r2
    1238:	80f3      	strh	r3, [r6, #6]

	return ERR_NONE;
    123a:	2000      	movs	r0, #0
}
    123c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(dev && hw);
    123e:	2000      	movs	r0, #0
    1240:	e780      	b.n	1144 <_spi_m_sync_init+0x40>
    1242:	2000      	movs	r0, #0
    1244:	e77e      	b.n	1144 <_spi_m_sync_init+0x40>
	ASSERT(hw && regs);
    1246:	2c00      	cmp	r4, #0
    1248:	d03c      	beq.n	12c4 <_spi_m_sync_init+0x1c0>
    124a:	2d00      	cmp	r5, #0
    124c:	d038      	beq.n	12c0 <_spi_m_sync_init+0x1bc>
    124e:	2001      	movs	r0, #1
    1250:	4a2a      	ldr	r2, [pc, #168]	; (12fc <_spi_m_sync_init+0x1f8>)
    1252:	4925      	ldr	r1, [pc, #148]	; (12e8 <_spi_m_sync_init+0x1e4>)
    1254:	4b25      	ldr	r3, [pc, #148]	; (12ec <_spi_m_sync_init+0x1e8>)
    1256:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1258:	782b      	ldrb	r3, [r5, #0]
    125a:	786a      	ldrb	r2, [r5, #1]
    125c:	0212      	lsls	r2, r2, #8
    125e:	431a      	orrs	r2, r3
    1260:	78ab      	ldrb	r3, [r5, #2]
    1262:	041b      	lsls	r3, r3, #16
    1264:	431a      	orrs	r2, r3
    1266:	78eb      	ldrb	r3, [r5, #3]
    1268:	061b      	lsls	r3, r3, #24
    126a:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    126c:	4a21      	ldr	r2, [pc, #132]	; (12f4 <_spi_m_sync_init+0x1f0>)
    126e:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1270:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1272:	69e3      	ldr	r3, [r4, #28]
    1274:	079b      	lsls	r3, r3, #30
    1276:	d1fc      	bne.n	1272 <_spi_m_sync_init+0x16e>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    1278:	792b      	ldrb	r3, [r5, #4]
    127a:	796a      	ldrb	r2, [r5, #5]
    127c:	0212      	lsls	r2, r2, #8
    127e:	431a      	orrs	r2, r3
    1280:	79ab      	ldrb	r3, [r5, #6]
    1282:	041b      	lsls	r3, r3, #16
    1284:	431a      	orrs	r2, r3
    1286:	79eb      	ldrb	r3, [r5, #7]
    1288:	061b      	lsls	r3, r3, #24
    128a:	4313      	orrs	r3, r2
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    128c:	4a1c      	ldr	r2, [pc, #112]	; (1300 <_spi_m_sync_init+0x1fc>)
    128e:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    1290:	4a1c      	ldr	r2, [pc, #112]	; (1304 <_spi_m_sync_init+0x200>)
    1292:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1294:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1296:	69e3      	ldr	r3, [r4, #28]
    1298:	075b      	lsls	r3, r3, #29
    129a:	d1fc      	bne.n	1296 <_spi_m_sync_init+0x192>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    129c:	7a2b      	ldrb	r3, [r5, #8]
    129e:	7a6a      	ldrb	r2, [r5, #9]
    12a0:	0212      	lsls	r2, r2, #8
    12a2:	431a      	orrs	r2, r3
    12a4:	7aab      	ldrb	r3, [r5, #10]
    12a6:	041b      	lsls	r3, r3, #16
    12a8:	431a      	orrs	r2, r3
    12aa:	7aeb      	ldrb	r3, [r5, #11]
    12ac:	061b      	lsls	r3, r3, #24
    12ae:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    12b0:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    12b2:	7b6a      	ldrb	r2, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    12b4:	2330      	movs	r3, #48	; 0x30
    12b6:	54e2      	strb	r2, [r4, r3]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    12b8:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    12ba:	2b00      	cmp	r3, #0
    12bc:	d1fc      	bne.n	12b8 <_spi_m_sync_init+0x1b4>
    12be:	e7b2      	b.n	1226 <_spi_m_sync_init+0x122>
	ASSERT(hw && regs);
    12c0:	2000      	movs	r0, #0
    12c2:	e7c5      	b.n	1250 <_spi_m_sync_init+0x14c>
    12c4:	2000      	movs	r0, #0
    12c6:	e7c3      	b.n	1250 <_spi_m_sync_init+0x14c>
	ASSERT(hw && regs);
    12c8:	2000      	movs	r0, #0
    12ca:	e780      	b.n	11ce <_spi_m_sync_init+0xca>
    12cc:	2000      	movs	r0, #0
    12ce:	e77e      	b.n	11ce <_spi_m_sync_init+0xca>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    12d0:	2302      	movs	r3, #2
    12d2:	e7ac      	b.n	122e <_spi_m_sync_init+0x12a>
		return ERR_INVALID_ARG;
    12d4:	200d      	movs	r0, #13
    12d6:	4240      	negs	r0, r0
    12d8:	e7b0      	b.n	123c <_spi_m_sync_init+0x138>
    12da:	46c0      	nop			; (mov r8, r8)
    12dc:	00000f51 	.word	0x00000f51
    12e0:	00002e00 	.word	0x00002e00
    12e4:	00000925 	.word	0x00000925
    12e8:	00002e60 	.word	0x00002e60
    12ec:	00000c9d 	.word	0x00000c9d
    12f0:	000008ef 	.word	0x000008ef
    12f4:	fffffefc 	.word	0xfffffefc
    12f8:	fffd1dbf 	.word	0xfffd1dbf
    12fc:	00000903 	.word	0x00000903
    1300:	fffdddbf 	.word	0xfffdddbf
    1304:	00020240 	.word	0x00020240

00001308 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1308:	b5f0      	push	{r4, r5, r6, r7, lr}
    130a:	46ce      	mov	lr, r9
    130c:	4647      	mov	r7, r8
    130e:	b580      	push	{r7, lr}
    1310:	b089      	sub	sp, #36	; 0x24
    1312:	4681      	mov	r9, r0
    1314:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    1316:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1318:	680b      	ldr	r3, [r1, #0]
    131a:	9303      	str	r3, [sp, #12]
    131c:	684b      	ldr	r3, [r1, #4]
    131e:	9304      	str	r3, [sp, #16]
    1320:	2300      	movs	r3, #0
    1322:	9305      	str	r3, [sp, #20]
    1324:	9306      	str	r3, [sp, #24]
    1326:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    1328:	2800      	cmp	r0, #0
    132a:	d014      	beq.n	1356 <_spi_m_sync_trans+0x4e>
    132c:	2c00      	cmp	r4, #0
    132e:	d010      	beq.n	1352 <_spi_m_sync_trans+0x4a>
    1330:	2001      	movs	r0, #1
    1332:	4a37      	ldr	r2, [pc, #220]	; (1410 <_spi_m_sync_trans+0x108>)
    1334:	4937      	ldr	r1, [pc, #220]	; (1414 <_spi_m_sync_trans+0x10c>)
    1336:	4b38      	ldr	r3, [pc, #224]	; (1418 <_spi_m_sync_trans+0x110>)
    1338:	4798      	blx	r3
    133a:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    133c:	075b      	lsls	r3, r3, #29
    133e:	d164      	bne.n	140a <_spi_m_sync_trans+0x102>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1340:	69e3      	ldr	r3, [r4, #28]
    1342:	079b      	lsls	r3, r3, #30
    1344:	d1fc      	bne.n	1340 <_spi_m_sync_trans+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1346:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1348:	079b      	lsls	r3, r3, #30
    134a:	d420      	bmi.n	138e <_spi_m_sync_trans+0x86>
		return ERR_NOT_INITIALIZED;
    134c:	2014      	movs	r0, #20
    134e:	4240      	negs	r0, r0
    1350:	e056      	b.n	1400 <_spi_m_sync_trans+0xf8>
	ASSERT(dev && hw);
    1352:	2000      	movs	r0, #0
    1354:	e7ed      	b.n	1332 <_spi_m_sync_trans+0x2a>
    1356:	2000      	movs	r0, #0
    1358:	e7eb      	b.n	1332 <_spi_m_sync_trans+0x2a>
		return false;
    135a:	2200      	movs	r2, #0
    135c:	e02d      	b.n	13ba <_spi_m_sync_trans+0xb2>
			data |= (*ctrl->txbuf) << 8;
    135e:	7848      	ldrb	r0, [r1, #1]
    1360:	0200      	lsls	r0, r0, #8
    1362:	4647      	mov	r7, r8
    1364:	4307      	orrs	r7, r0
    1366:	46b8      	mov	r8, r7
			ctrl->txbuf++;
    1368:	3102      	adds	r1, #2
    136a:	9103      	str	r1, [sp, #12]
	ctrl->txcnt++;
    136c:	3201      	adds	r2, #1
    136e:	9205      	str	r2, [sp, #20]
	((Sercom *)hw)->SPI.DATA.reg = data;
    1370:	4642      	mov	r2, r8
    1372:	62a2      	str	r2, [r4, #40]	; 0x28
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    1374:	b25b      	sxtb	r3, r3
    1376:	2b00      	cmp	r3, #0
    1378:	db35      	blt.n	13e6 <_spi_m_sync_trans+0xde>
	return ERR_NONE;
    137a:	2000      	movs	r0, #0
			}
		}

		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
    137c:	2800      	cmp	r0, #0
    137e:	db3a      	blt.n	13f6 <_spi_m_sync_trans+0xee>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1380:	9805      	ldr	r0, [sp, #20]
    1382:	68ab      	ldr	r3, [r5, #8]
    1384:	4298      	cmp	r0, r3
    1386:	d302      	bcc.n	138e <_spi_m_sync_trans+0x86>
    1388:	9a06      	ldr	r2, [sp, #24]
    138a:	4293      	cmp	r3, r2
    138c:	d933      	bls.n	13f6 <_spi_m_sync_trans+0xee>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    138e:	7e23      	ldrb	r3, [r4, #24]
    1390:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1392:	075a      	lsls	r2, r3, #29
    1394:	d5e1      	bpl.n	135a <_spi_m_sync_trans+0x52>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1396:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1398:	9a04      	ldr	r2, [sp, #16]
    139a:	2a00      	cmp	r2, #0
    139c:	d008      	beq.n	13b0 <_spi_m_sync_trans+0xa8>
		*ctrl->rxbuf++ = (uint8_t)data;
    139e:	1c50      	adds	r0, r2, #1
    13a0:	9004      	str	r0, [sp, #16]
    13a2:	7011      	strb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
    13a4:	2e01      	cmp	r6, #1
    13a6:	d903      	bls.n	13b0 <_spi_m_sync_trans+0xa8>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    13a8:	1c90      	adds	r0, r2, #2
    13aa:	9004      	str	r0, [sp, #16]
    13ac:	0a09      	lsrs	r1, r1, #8
    13ae:	7051      	strb	r1, [r2, #1]
	ctrl->rxcnt++;
    13b0:	9a06      	ldr	r2, [sp, #24]
    13b2:	9201      	str	r2, [sp, #4]
    13b4:	3201      	adds	r2, #1
    13b6:	9206      	str	r2, [sp, #24]
	return true;
    13b8:	2201      	movs	r2, #1
		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
    13ba:	2a00      	cmp	r2, #0
    13bc:	d1da      	bne.n	1374 <_spi_m_sync_trans+0x6c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    13be:	9906      	ldr	r1, [sp, #24]
    13c0:	9a05      	ldr	r2, [sp, #20]
    13c2:	4291      	cmp	r1, r2
    13c4:	d3d6      	bcc.n	1374 <_spi_m_sync_trans+0x6c>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    13c6:	4649      	mov	r1, r9
    13c8:	88c8      	ldrh	r0, [r1, #6]
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    13ca:	07d9      	lsls	r1, r3, #31
    13cc:	d5d2      	bpl.n	1374 <_spi_m_sync_trans+0x6c>
	if (ctrl->txbuf) {
    13ce:	9903      	ldr	r1, [sp, #12]
    13d0:	2900      	cmp	r1, #0
    13d2:	d006      	beq.n	13e2 <_spi_m_sync_trans+0xda>
		data = *ctrl->txbuf++;
    13d4:	1c48      	adds	r0, r1, #1
    13d6:	9003      	str	r0, [sp, #12]
    13d8:	7808      	ldrb	r0, [r1, #0]
    13da:	4680      	mov	r8, r0
		if (ctrl->char_size > 1) {
    13dc:	2e01      	cmp	r6, #1
    13de:	d8be      	bhi.n	135e <_spi_m_sync_trans+0x56>
    13e0:	e7c4      	b.n	136c <_spi_m_sync_trans+0x64>
		data = dummy;
    13e2:	4680      	mov	r8, r0
    13e4:	e7c2      	b.n	136c <_spi_m_sync_trans+0x64>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    13e6:	2301      	movs	r3, #1
    13e8:	425b      	negs	r3, r3
    13ea:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    13ec:	3381      	adds	r3, #129	; 0x81
    13ee:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    13f0:	2013      	movs	r0, #19
    13f2:	4240      	negs	r0, r0
    13f4:	e7c2      	b.n	137c <_spi_m_sync_trans+0x74>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    13f6:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    13f8:	079b      	lsls	r3, r3, #30
    13fa:	d0fc      	beq.n	13f6 <_spi_m_sync_trans+0xee>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    13fc:	2303      	movs	r3, #3
    13fe:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1400:	b009      	add	sp, #36	; 0x24
    1402:	bc0c      	pop	{r2, r3}
    1404:	4690      	mov	r8, r2
    1406:	4699      	mov	r9, r3
    1408:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BUSY;
    140a:	2004      	movs	r0, #4
    140c:	4240      	negs	r0, r0
    140e:	e7f7      	b.n	1400 <_spi_m_sync_trans+0xf8>
    1410:	00000a85 	.word	0x00000a85
    1414:	00002e60 	.word	0x00002e60
    1418:	00000c9d 	.word	0x00000c9d

0000141c <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    141c:	4a13      	ldr	r2, [pc, #76]	; (146c <_sysctrl_init_sources+0x50>)
    141e:	6a11      	ldr	r1, [r2, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    1420:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1422:	6a13      	ldr	r3, [r2, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1424:	0f9b      	lsrs	r3, r3, #30
    1426:	079b      	lsls	r3, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1428:	0409      	lsls	r1, r1, #16
    142a:	4811      	ldr	r0, [pc, #68]	; (1470 <_sysctrl_init_sources+0x54>)
    142c:	4001      	ands	r1, r0
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    142e:	430b      	orrs	r3, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    1430:	2102      	movs	r1, #2
    1432:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1434:	6213      	str	r3, [r2, #32]
	tmp = ((Sysctrl *)hw)->OSC32K.reg;
    1436:	6993      	ldr	r3, [r2, #24]
	tmp = (tmp & SYSCTRL_OSC32K_CALIB_Msk) >> SYSCTRL_OSC32K_CALIB_Pos;
    1438:	0c1b      	lsrs	r3, r3, #16
	hri_sysctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_OVERWRITE_CALIBRATION == 1
	    SYSCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    SYSCTRL_OSC32K_CALIB(calib) |
    143a:	041b      	lsls	r3, r3, #16
    143c:	21fe      	movs	r1, #254	; 0xfe
    143e:	03c9      	lsls	r1, r1, #15
    1440:	400b      	ands	r3, r1
#endif
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
    1442:	490c      	ldr	r1, [pc, #48]	; (1474 <_sysctrl_init_sources+0x58>)
    1444:	430b      	orrs	r3, r1
	((Sysctrl *)hw)->OSC32K.reg = data;
    1446:	6193      	str	r3, [r2, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1448:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    144a:	211f      	movs	r1, #31
    144c:	400b      	ands	r3, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    144e:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
    1450:	4b06      	ldr	r3, [pc, #24]	; (146c <_sysctrl_init_sources+0x50>)
    1452:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC32KRDY_bit(hw))
    1454:	075b      	lsls	r3, r3, #29
    1456:	d5fb      	bpl.n	1450 <_sysctrl_init_sources+0x34>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1458:	4b04      	ldr	r3, [pc, #16]	; (146c <_sysctrl_init_sources+0x50>)
    145a:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    145c:	071b      	lsls	r3, r3, #28
    145e:	d5fb      	bpl.n	1458 <_sysctrl_init_sources+0x3c>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1460:	4a02      	ldr	r2, [pc, #8]	; (146c <_sysctrl_init_sources+0x50>)
    1462:	6a13      	ldr	r3, [r2, #32]
    1464:	2180      	movs	r1, #128	; 0x80
    1466:	430b      	orrs	r3, r1
    1468:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    146a:	4770      	bx	lr
    146c:	40000800 	.word	0x40000800
    1470:	0fff0000 	.word	0x0fff0000
    1474:	00000706 	.word	0x00000706

00001478 <_sysctrl_init_referenced_generators>:
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    1478:	4770      	bx	lr
	...

0000147c <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    147c:	4b02      	ldr	r3, [pc, #8]	; (1488 <_system_time_init+0xc>)
    147e:	4a03      	ldr	r2, [pc, #12]	; (148c <_system_time_init+0x10>)
    1480:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1482:	2205      	movs	r2, #5
    1484:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    1486:	4770      	bx	lr
    1488:	e000e010 	.word	0xe000e010
    148c:	00ffffff 	.word	0x00ffffff

00001490 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    1490:	b510      	push	{r4, lr}
	_system_time_init(hw);
    1492:	4b01      	ldr	r3, [pc, #4]	; (1498 <_delay_init+0x8>)
    1494:	4798      	blx	r3
}
    1496:	bd10      	pop	{r4, pc}
    1498:	0000147d 	.word	0x0000147d

0000149c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    149c:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    149e:	e00b      	b.n	14b8 <_delay_cycles+0x1c>
		SysTick->LOAD = 0xFFFFFF;
    14a0:	4b0b      	ldr	r3, [pc, #44]	; (14d0 <_delay_cycles+0x34>)
    14a2:	480c      	ldr	r0, [pc, #48]	; (14d4 <_delay_cycles+0x38>)
    14a4:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    14a6:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    14a8:	4b09      	ldr	r3, [pc, #36]	; (14d0 <_delay_cycles+0x34>)
    14aa:	681b      	ldr	r3, [r3, #0]
    14ac:	03db      	lsls	r3, r3, #15
    14ae:	d5fb      	bpl.n	14a8 <_delay_cycles+0xc>
			;
		buf -= 0xFFFFFF;
    14b0:	4b09      	ldr	r3, [pc, #36]	; (14d8 <_delay_cycles+0x3c>)
    14b2:	469c      	mov	ip, r3
    14b4:	4461      	add	r1, ip
	while (n--) {
    14b6:	0010      	movs	r0, r2
    14b8:	1e42      	subs	r2, r0, #1
    14ba:	b2d2      	uxtb	r2, r2
    14bc:	2800      	cmp	r0, #0
    14be:	d1ef      	bne.n	14a0 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    14c0:	4b03      	ldr	r3, [pc, #12]	; (14d0 <_delay_cycles+0x34>)
    14c2:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    14c4:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    14c6:	4b02      	ldr	r3, [pc, #8]	; (14d0 <_delay_cycles+0x34>)
    14c8:	681b      	ldr	r3, [r3, #0]
    14ca:	03db      	lsls	r3, r3, #15
    14cc:	d5fb      	bpl.n	14c6 <_delay_cycles+0x2a>
		;
}
    14ce:	4770      	bx	lr
    14d0:	e000e010 	.word	0xe000e010
    14d4:	00ffffff 	.word	0x00ffffff
    14d8:	ff000001 	.word	0xff000001

000014dc <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    14dc:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    14de:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    14e0:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    14e2:	07d2      	lsls	r2, r2, #31
    14e4:	d400      	bmi.n	14e8 <tc_interrupt_handler+0xc>
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
	}
}
    14e6:	bd10      	pop	{r4, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    14e8:	2201      	movs	r2, #1
    14ea:	739a      	strb	r2, [r3, #14]
		device->timer_cb.period_expired(device);
    14ec:	6803      	ldr	r3, [r0, #0]
    14ee:	4798      	blx	r3
}
    14f0:	e7f9      	b.n	14e6 <tc_interrupt_handler+0xa>
	...

000014f4 <tc_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    14f4:	4b02      	ldr	r3, [pc, #8]	; (1500 <tc_get_hardware_index+0xc>)
    14f6:	469c      	mov	ip, r3
    14f8:	4460      	add	r0, ip
    14fa:	0a80      	lsrs	r0, r0, #10
    14fc:	b2c0      	uxtb	r0, r0
#else
	return ((uint32_t)hw - TC_HW_BASE_ADDR) / sizeof(Tc);
#endif
}
    14fe:	4770      	bx	lr
    1500:	bdffd400 	.word	0xbdffd400

00001504 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC3) {
    1504:	4b06      	ldr	r3, [pc, #24]	; (1520 <_tc_init_irq_param+0x1c>)
    1506:	4298      	cmp	r0, r3
    1508:	d003      	beq.n	1512 <_tc_init_irq_param+0xe>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    150a:	4b06      	ldr	r3, [pc, #24]	; (1524 <_tc_init_irq_param+0x20>)
    150c:	4298      	cmp	r0, r3
    150e:	d003      	beq.n	1518 <_tc_init_irq_param+0x14>
		_tc4_dev = (struct _timer_device *)dev;
	}
}
    1510:	4770      	bx	lr
		_tc3_dev = (struct _timer_device *)dev;
    1512:	4b05      	ldr	r3, [pc, #20]	; (1528 <_tc_init_irq_param+0x24>)
    1514:	6019      	str	r1, [r3, #0]
    1516:	e7f8      	b.n	150a <_tc_init_irq_param+0x6>
		_tc4_dev = (struct _timer_device *)dev;
    1518:	4b03      	ldr	r3, [pc, #12]	; (1528 <_tc_init_irq_param+0x24>)
    151a:	6059      	str	r1, [r3, #4]
}
    151c:	e7f8      	b.n	1510 <_tc_init_irq_param+0xc>
    151e:	46c0      	nop			; (mov r8, r8)
    1520:	42002c00 	.word	0x42002c00
    1524:	42003000 	.word	0x42003000
    1528:	2000009c 	.word	0x2000009c

0000152c <get_tc_index>:
{
    152c:	b510      	push	{r4, lr}
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    152e:	4b0e      	ldr	r3, [pc, #56]	; (1568 <get_tc_index+0x3c>)
    1530:	4798      	blx	r3
    1532:	3003      	adds	r0, #3
    1534:	b2c0      	uxtb	r0, r0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1536:	2300      	movs	r3, #0
    1538:	2b01      	cmp	r3, #1
    153a:	d80b      	bhi.n	1554 <get_tc_index+0x28>
		if (_tcs[i].number == tc_offset) {
    153c:	009a      	lsls	r2, r3, #2
    153e:	18d2      	adds	r2, r2, r3
    1540:	0091      	lsls	r1, r2, #2
    1542:	4a0a      	ldr	r2, [pc, #40]	; (156c <get_tc_index+0x40>)
    1544:	5c8a      	ldrb	r2, [r1, r2]
    1546:	4290      	cmp	r0, r2
    1548:	d002      	beq.n	1550 <get_tc_index+0x24>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    154a:	3301      	adds	r3, #1
    154c:	b2db      	uxtb	r3, r3
    154e:	e7f3      	b.n	1538 <get_tc_index+0xc>
			return i;
    1550:	b258      	sxtb	r0, r3
    1552:	e007      	b.n	1564 <get_tc_index+0x38>
	ASSERT(false);
    1554:	22a4      	movs	r2, #164	; 0xa4
    1556:	0052      	lsls	r2, r2, #1
    1558:	4905      	ldr	r1, [pc, #20]	; (1570 <get_tc_index+0x44>)
    155a:	2000      	movs	r0, #0
    155c:	4b05      	ldr	r3, [pc, #20]	; (1574 <get_tc_index+0x48>)
    155e:	4798      	blx	r3
	return -1;
    1560:	2001      	movs	r0, #1
    1562:	4240      	negs	r0, r0
}
    1564:	bd10      	pop	{r4, pc}
    1566:	46c0      	nop			; (mov r8, r8)
    1568:	000014f5 	.word	0x000014f5
    156c:	00002e7c 	.word	0x00002e7c
    1570:	00002ea4 	.word	0x00002ea4
    1574:	00000c9d 	.word	0x00000c9d

00001578 <_timer_init>:
{
    1578:	b570      	push	{r4, r5, r6, lr}
    157a:	0006      	movs	r6, r0
    157c:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    157e:	0008      	movs	r0, r1
    1580:	4b3f      	ldr	r3, [pc, #252]	; (1680 <_timer_init+0x108>)
    1582:	4798      	blx	r3
    1584:	0005      	movs	r5, r0
	device->hw = hw;
    1586:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    1588:	228d      	movs	r2, #141	; 0x8d
    158a:	493e      	ldr	r1, [pc, #248]	; (1684 <_timer_init+0x10c>)
    158c:	2001      	movs	r0, #1
    158e:	4b3e      	ldr	r3, [pc, #248]	; (1688 <_timer_init+0x110>)
    1590:	4798      	blx	r3
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1592:	7be3      	ldrb	r3, [r4, #15]
    1594:	09db      	lsrs	r3, r3, #7
    1596:	d1fc      	bne.n	1592 <_timer_init+0x1a>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1598:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    159a:	079b      	lsls	r3, r3, #30
    159c:	d504      	bpl.n	15a8 <_timer_init+0x30>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    159e:	2300      	movs	r3, #0
    15a0:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    15a2:	7be3      	ldrb	r3, [r4, #15]
    15a4:	09db      	lsrs	r3, r3, #7
    15a6:	d1fc      	bne.n	15a2 <_timer_init+0x2a>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    15a8:	2301      	movs	r3, #1
    15aa:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    15ac:	7be3      	ldrb	r3, [r4, #15]
    15ae:	09db      	lsrs	r3, r3, #7
    15b0:	d1fc      	bne.n	15ac <_timer_init+0x34>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    15b2:	00aa      	lsls	r2, r5, #2
    15b4:	1952      	adds	r2, r2, r5
    15b6:	0091      	lsls	r1, r2, #2
    15b8:	4b34      	ldr	r3, [pc, #208]	; (168c <_timer_init+0x114>)
    15ba:	185b      	adds	r3, r3, r1
    15bc:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    15be:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    15c0:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    15c2:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    15c4:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    15c6:	8163      	strh	r3, [r4, #10]
    15c8:	230c      	movs	r3, #12
    15ca:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    15cc:	2b08      	cmp	r3, #8
    15ce:	d039      	beq.n	1644 <_timer_init+0xcc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    15d0:	2b00      	cmp	r3, #0
    15d2:	d143      	bne.n	165c <_timer_init+0xe4>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    15d4:	4a2d      	ldr	r2, [pc, #180]	; (168c <_timer_init+0x114>)
    15d6:	00ab      	lsls	r3, r5, #2
    15d8:	1958      	adds	r0, r3, r5
    15da:	0081      	lsls	r1, r0, #2
    15dc:	0008      	movs	r0, r1
    15de:	1851      	adds	r1, r2, r1
    15e0:	8989      	ldrh	r1, [r1, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    15e2:	8321      	strh	r1, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    15e4:	1812      	adds	r2, r2, r0
    15e6:	8a13      	ldrh	r3, [r2, #16]
    15e8:	8363      	strh	r3, [r4, #26]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    15ea:	2301      	movs	r3, #1
    15ec:	7363      	strb	r3, [r4, #13]
	_tc_init_irq_param(hw, (void *)device);
    15ee:	0031      	movs	r1, r6
    15f0:	0020      	movs	r0, r4
    15f2:	4b27      	ldr	r3, [pc, #156]	; (1690 <_timer_init+0x118>)
    15f4:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    15f6:	0020      	movs	r0, r4
    15f8:	4b26      	ldr	r3, [pc, #152]	; (1694 <_timer_init+0x11c>)
    15fa:	4798      	blx	r3
    15fc:	3012      	adds	r0, #18
    15fe:	b2c0      	uxtb	r0, r0
    1600:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1602:	2b00      	cmp	r3, #0
    1604:	db0a      	blt.n	161c <_timer_init+0xa4>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1606:	211f      	movs	r1, #31
    1608:	4001      	ands	r1, r0
    160a:	2201      	movs	r2, #1
    160c:	408a      	lsls	r2, r1
    160e:	2180      	movs	r1, #128	; 0x80
    1610:	4c21      	ldr	r4, [pc, #132]	; (1698 <_timer_init+0x120>)
    1612:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1614:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1618:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    161c:	2b00      	cmp	r3, #0
    161e:	db07      	blt.n	1630 <_timer_init+0xb8>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1620:	211f      	movs	r1, #31
    1622:	4001      	ands	r1, r0
    1624:	2201      	movs	r2, #1
    1626:	408a      	lsls	r2, r1
    1628:	21c0      	movs	r1, #192	; 0xc0
    162a:	0049      	lsls	r1, r1, #1
    162c:	4c1a      	ldr	r4, [pc, #104]	; (1698 <_timer_init+0x120>)
    162e:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    1630:	2b00      	cmp	r3, #0
    1632:	db05      	blt.n	1640 <_timer_init+0xc8>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1634:	231f      	movs	r3, #31
    1636:	4018      	ands	r0, r3
    1638:	3b1e      	subs	r3, #30
    163a:	4083      	lsls	r3, r0
    163c:	4a16      	ldr	r2, [pc, #88]	; (1698 <_timer_init+0x120>)
    163e:	6013      	str	r3, [r2, #0]
}
    1640:	2000      	movs	r0, #0
    1642:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1644:	4a11      	ldr	r2, [pc, #68]	; (168c <_timer_init+0x114>)
    1646:	00ab      	lsls	r3, r5, #2
    1648:	1958      	adds	r0, r3, r5
    164a:	0081      	lsls	r1, r0, #2
    164c:	0008      	movs	r0, r1
    164e:	1851      	adds	r1, r2, r1
    1650:	68c9      	ldr	r1, [r1, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1652:	61a1      	str	r1, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1654:	1812      	adds	r2, r2, r0
    1656:	6913      	ldr	r3, [r2, #16]
    1658:	61e3      	str	r3, [r4, #28]
    165a:	e7c6      	b.n	15ea <_timer_init+0x72>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    165c:	2b04      	cmp	r3, #4
    165e:	d1c4      	bne.n	15ea <_timer_init+0x72>
		hri_tccount8_write_CC_reg(hw, 0, (hri_tccount8_cc_reg_t)_tcs[i].cc0);
    1660:	490a      	ldr	r1, [pc, #40]	; (168c <_timer_init+0x114>)
    1662:	00ab      	lsls	r3, r5, #2
    1664:	1958      	adds	r0, r3, r5
    1666:	0082      	lsls	r2, r0, #2
    1668:	188a      	adds	r2, r1, r2
    166a:	7b10      	ldrb	r0, [r2, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    166c:	7620      	strb	r0, [r4, #24]
		hri_tccount8_write_CC_reg(hw, 1, (hri_tccount8_cc_reg_t)_tcs[i].cc1);
    166e:	7c12      	ldrb	r2, [r2, #16]
    1670:	7662      	strb	r2, [r4, #25]
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    1672:	195d      	adds	r5, r3, r5
    1674:	00ab      	lsls	r3, r5, #2
    1676:	18c9      	adds	r1, r1, r3
    1678:	7a0b      	ldrb	r3, [r1, #8]
	((Tc *)hw)->COUNT8.PER.reg = data;
    167a:	7523      	strb	r3, [r4, #20]
    167c:	e7b5      	b.n	15ea <_timer_init+0x72>
    167e:	46c0      	nop			; (mov r8, r8)
    1680:	0000152d 	.word	0x0000152d
    1684:	00002ea4 	.word	0x00002ea4
    1688:	00000c9d 	.word	0x00000c9d
    168c:	00002e7c 	.word	0x00002e7c
    1690:	00001505 	.word	0x00001505
    1694:	000014f5 	.word	0x000014f5
    1698:	e000e100 	.word	0xe000e100

0000169c <_tc_get_timer>:
}
    169c:	2000      	movs	r0, #0
    169e:	4770      	bx	lr

000016a0 <TC3_Handler>:
{
    16a0:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc3_dev);
    16a2:	4b02      	ldr	r3, [pc, #8]	; (16ac <TC3_Handler+0xc>)
    16a4:	6818      	ldr	r0, [r3, #0]
    16a6:	4b02      	ldr	r3, [pc, #8]	; (16b0 <TC3_Handler+0x10>)
    16a8:	4798      	blx	r3
}
    16aa:	bd10      	pop	{r4, pc}
    16ac:	2000009c 	.word	0x2000009c
    16b0:	000014dd 	.word	0x000014dd

000016b4 <TC4_Handler>:
{
    16b4:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc4_dev);
    16b6:	4b02      	ldr	r3, [pc, #8]	; (16c0 <TC4_Handler+0xc>)
    16b8:	6858      	ldr	r0, [r3, #4]
    16ba:	4b02      	ldr	r3, [pc, #8]	; (16c4 <TC4_Handler+0x10>)
    16bc:	4798      	blx	r3
}
    16be:	bd10      	pop	{r4, pc}
    16c0:	2000009c 	.word	0x2000009c
    16c4:	000014dd 	.word	0x000014dd

000016c8 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    16c8:	b510      	push	{r4, lr}
    16ca:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    16cc:	d02a      	beq.n	1724 <_wdt_init+0x5c>
    16ce:	6803      	ldr	r3, [r0, #0]
    16d0:	2b00      	cmp	r3, #0
    16d2:	d025      	beq.n	1720 <_wdt_init+0x58>
    16d4:	2001      	movs	r0, #1
    16d6:	224f      	movs	r2, #79	; 0x4f
    16d8:	4916      	ldr	r1, [pc, #88]	; (1734 <_wdt_init+0x6c>)
    16da:	4b17      	ldr	r3, [pc, #92]	; (1738 <_wdt_init+0x70>)
    16dc:	4798      	blx	r3

	if (hri_wdt_get_CTRL_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRL_ENABLE_bit(dev->hw)) {
    16de:	6822      	ldr	r2, [r4, #0]
typedef uint8_t hri_wdt_intflag_reg_t;
typedef uint8_t hri_wdt_status_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw)
{
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    16e0:	79d3      	ldrb	r3, [r2, #7]
    16e2:	09db      	lsrs	r3, r3, #7
    16e4:	d1fc      	bne.n	16e0 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRL_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw);
	tmp = ((Wdt *)hw)->CTRL.reg;
    16e6:	7813      	ldrb	r3, [r2, #0]
	tmp = (tmp & WDT_CTRL_ALWAYSON) >> WDT_CTRL_ALWAYSON_Pos;
    16e8:	09db      	lsrs	r3, r3, #7
    16ea:	d11d      	bne.n	1728 <_wdt_init+0x60>
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    16ec:	79d3      	ldrb	r3, [r2, #7]
    16ee:	09db      	lsrs	r3, r3, #7
    16f0:	d1fc      	bne.n	16ec <_wdt_init+0x24>
	tmp = ((Wdt *)hw)->CTRL.reg;
    16f2:	7813      	ldrb	r3, [r2, #0]
    16f4:	079b      	lsls	r3, r3, #30
    16f6:	d41a      	bmi.n	172e <_wdt_init+0x66>
	((Wdt *)hw)->CTRL.reg &= ~WDT_CTRL_WEN;
    16f8:	7813      	ldrb	r3, [r2, #0]
    16fa:	2104      	movs	r1, #4
    16fc:	438b      	bics	r3, r1
    16fe:	7013      	strb	r3, [r2, #0]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    1700:	79d3      	ldrb	r3, [r2, #7]
    1702:	09db      	lsrs	r3, r3, #7
    1704:	d1fc      	bne.n	1700 <_wdt_init+0x38>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRL_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    1706:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    1708:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    170a:	210f      	movs	r1, #15
    170c:	438b      	bics	r3, r1
	tmp |= WDT_CONFIG_PER(data);
    170e:	2107      	movs	r1, #7
    1710:	430b      	orrs	r3, r1
    1712:	b2db      	uxtb	r3, r3
	((Wdt *)hw)->CONFIG.reg = tmp;
    1714:	7053      	strb	r3, [r2, #1]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    1716:	79d3      	ldrb	r3, [r2, #7]
    1718:	09db      	lsrs	r3, r3, #7
    171a:	d1fc      	bne.n	1716 <_wdt_init+0x4e>
	}

	return ERR_NONE;
    171c:	2000      	movs	r0, #0
}
    171e:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
    1720:	2000      	movs	r0, #0
    1722:	e7d8      	b.n	16d6 <_wdt_init+0xe>
    1724:	2000      	movs	r0, #0
    1726:	e7d6      	b.n	16d6 <_wdt_init+0xe>
		return ERR_DENIED;
    1728:	2011      	movs	r0, #17
    172a:	4240      	negs	r0, r0
    172c:	e7f7      	b.n	171e <_wdt_init+0x56>
    172e:	2011      	movs	r0, #17
    1730:	4240      	negs	r0, r0
    1732:	e7f4      	b.n	171e <_wdt_init+0x56>
    1734:	00002eb8 	.word	0x00002eb8
    1738:	00000c9d 	.word	0x00000c9d

0000173c <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    173c:	b570      	push	{r4, r5, r6, lr}
    173e:	0006      	movs	r6, r0
    1740:	000d      	movs	r5, r1
    1742:	0014      	movs	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    1744:	2800      	cmp	r0, #0
    1746:	d038      	beq.n	17ba <_wdt_set_timeout_period+0x7e>
    1748:	6803      	ldr	r3, [r0, #0]
    174a:	2b00      	cmp	r3, #0
    174c:	d033      	beq.n	17b6 <_wdt_set_timeout_period+0x7a>
    174e:	2001      	movs	r0, #1
    1750:	2279      	movs	r2, #121	; 0x79
    1752:	493e      	ldr	r1, [pc, #248]	; (184c <_wdt_set_timeout_period+0x110>)
    1754:	4b3e      	ldr	r3, [pc, #248]	; (1850 <_wdt_set_timeout_period+0x114>)
    1756:	4798      	blx	r3

	if (hri_wdt_get_CTRL_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRL_ENABLE_bit(dev->hw)) {
    1758:	6836      	ldr	r6, [r6, #0]
    175a:	79f3      	ldrb	r3, [r6, #7]
    175c:	09db      	lsrs	r3, r3, #7
    175e:	d1fc      	bne.n	175a <_wdt_set_timeout_period+0x1e>
	tmp = ((Wdt *)hw)->CTRL.reg;
    1760:	7833      	ldrb	r3, [r6, #0]
	tmp = (tmp & WDT_CTRL_ALWAYSON) >> WDT_CTRL_ALWAYSON_Pos;
    1762:	09db      	lsrs	r3, r3, #7
    1764:	d000      	beq.n	1768 <_wdt_set_timeout_period+0x2c>
    1766:	e068      	b.n	183a <_wdt_set_timeout_period+0xfe>
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    1768:	79f3      	ldrb	r3, [r6, #7]
    176a:	09db      	lsrs	r3, r3, #7
    176c:	d1fc      	bne.n	1768 <_wdt_set_timeout_period+0x2c>
	tmp = ((Wdt *)hw)->CTRL.reg;
    176e:	7833      	ldrb	r3, [r6, #0]
    1770:	079b      	lsls	r3, r3, #30
    1772:	d465      	bmi.n	1840 <_wdt_set_timeout_period+0x104>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    1774:	002a      	movs	r2, r5
    1776:	2300      	movs	r3, #0
    1778:	0020      	movs	r0, r4
    177a:	2100      	movs	r1, #0
    177c:	4c35      	ldr	r4, [pc, #212]	; (1854 <_wdt_set_timeout_period+0x118>)
    177e:	47a0      	blx	r4

		/* check whether overflow*/
		if (tmp >> 32) {
    1780:	2900      	cmp	r1, #0
    1782:	d160      	bne.n	1846 <_wdt_set_timeout_period+0x10a>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    1784:	23fa      	movs	r3, #250	; 0xfa
    1786:	029b      	lsls	r3, r3, #10
    1788:	4298      	cmp	r0, r3
    178a:	d04a      	beq.n	1822 <_wdt_set_timeout_period+0xe6>
    178c:	d917      	bls.n	17be <_wdt_set_timeout_period+0x82>
    178e:	23fa      	movs	r3, #250	; 0xfa
    1790:	035b      	lsls	r3, r3, #13
    1792:	4298      	cmp	r0, r3
    1794:	d049      	beq.n	182a <_wdt_set_timeout_period+0xee>
    1796:	d92b      	bls.n	17f0 <_wdt_set_timeout_period+0xb4>
    1798:	23fa      	movs	r3, #250	; 0xfa
    179a:	03db      	lsls	r3, r3, #15
    179c:	4298      	cmp	r0, r3
    179e:	d048      	beq.n	1832 <_wdt_set_timeout_period+0xf6>
    17a0:	23fa      	movs	r3, #250	; 0xfa
    17a2:	041b      	lsls	r3, r3, #16
    17a4:	4298      	cmp	r0, r3
    17a6:	d046      	beq.n	1836 <_wdt_set_timeout_period+0xfa>
    17a8:	23fa      	movs	r3, #250	; 0xfa
    17aa:	039b      	lsls	r3, r3, #14
    17ac:	4298      	cmp	r0, r3
    17ae:	d03e      	beq.n	182e <_wdt_set_timeout_period+0xf2>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    17b0:	200d      	movs	r0, #13
    17b2:	4240      	negs	r0, r0
    17b4:	e030      	b.n	1818 <_wdt_set_timeout_period+0xdc>
	ASSERT(dev && dev->hw);
    17b6:	2000      	movs	r0, #0
    17b8:	e7ca      	b.n	1750 <_wdt_set_timeout_period+0x14>
    17ba:	2000      	movs	r0, #0
    17bc:	e7c8      	b.n	1750 <_wdt_set_timeout_period+0x14>
		switch (period_cycles) {
    17be:	23fa      	movs	r3, #250	; 0xfa
    17c0:	01db      	lsls	r3, r3, #7
    17c2:	4298      	cmp	r0, r3
    17c4:	d029      	beq.n	181a <_wdt_set_timeout_period+0xde>
    17c6:	d809      	bhi.n	17dc <_wdt_set_timeout_period+0xa0>
    17c8:	23fa      	movs	r3, #250	; 0xfa
    17ca:	015b      	lsls	r3, r3, #5
    17cc:	4298      	cmp	r0, r3
    17ce:	d019      	beq.n	1804 <_wdt_set_timeout_period+0xc8>
    17d0:	23fa      	movs	r3, #250	; 0xfa
    17d2:	019b      	lsls	r3, r3, #6
    17d4:	4298      	cmp	r0, r3
    17d6:	d1eb      	bne.n	17b0 <_wdt_set_timeout_period+0x74>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    17d8:	2101      	movs	r1, #1
    17da:	e014      	b.n	1806 <_wdt_set_timeout_period+0xca>
		switch (period_cycles) {
    17dc:	23fa      	movs	r3, #250	; 0xfa
    17de:	021b      	lsls	r3, r3, #8
    17e0:	4298      	cmp	r0, r3
    17e2:	d01c      	beq.n	181e <_wdt_set_timeout_period+0xe2>
    17e4:	23fa      	movs	r3, #250	; 0xfa
    17e6:	025b      	lsls	r3, r3, #9
    17e8:	4298      	cmp	r0, r3
    17ea:	d1e1      	bne.n	17b0 <_wdt_set_timeout_period+0x74>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    17ec:	2104      	movs	r1, #4
			break;
    17ee:	e00a      	b.n	1806 <_wdt_set_timeout_period+0xca>
		switch (period_cycles) {
    17f0:	23fa      	movs	r3, #250	; 0xfa
    17f2:	02db      	lsls	r3, r3, #11
    17f4:	4298      	cmp	r0, r3
    17f6:	d016      	beq.n	1826 <_wdt_set_timeout_period+0xea>
    17f8:	23fa      	movs	r3, #250	; 0xfa
    17fa:	031b      	lsls	r3, r3, #12
    17fc:	4298      	cmp	r0, r3
    17fe:	d1d7      	bne.n	17b0 <_wdt_set_timeout_period+0x74>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    1800:	2107      	movs	r1, #7
			break;
    1802:	e000      	b.n	1806 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    1804:	2100      	movs	r1, #0
	tmp = ((Wdt *)hw)->CONFIG.reg;
    1806:	7873      	ldrb	r3, [r6, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    1808:	220f      	movs	r2, #15
    180a:	4393      	bics	r3, r2
	tmp |= WDT_CONFIG_PER(data);
    180c:	430b      	orrs	r3, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    180e:	7073      	strb	r3, [r6, #1]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    1810:	79f3      	ldrb	r3, [r6, #7]
    1812:	09db      	lsrs	r3, r3, #7
    1814:	d1fc      	bne.n	1810 <_wdt_set_timeout_period+0xd4>
		}
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
    1816:	2000      	movs	r0, #0
}
    1818:	bd70      	pop	{r4, r5, r6, pc}
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    181a:	2102      	movs	r1, #2
			break;
    181c:	e7f3      	b.n	1806 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    181e:	2103      	movs	r1, #3
			break;
    1820:	e7f1      	b.n	1806 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    1822:	2105      	movs	r1, #5
			break;
    1824:	e7ef      	b.n	1806 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    1826:	2106      	movs	r1, #6
			break;
    1828:	e7ed      	b.n	1806 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    182a:	2108      	movs	r1, #8
			break;
    182c:	e7eb      	b.n	1806 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    182e:	2109      	movs	r1, #9
			break;
    1830:	e7e9      	b.n	1806 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    1832:	210a      	movs	r1, #10
			break;
    1834:	e7e7      	b.n	1806 <_wdt_set_timeout_period+0xca>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    1836:	210b      	movs	r1, #11
			break;
    1838:	e7e5      	b.n	1806 <_wdt_set_timeout_period+0xca>
		return ERR_DENIED;
    183a:	2011      	movs	r0, #17
    183c:	4240      	negs	r0, r0
    183e:	e7eb      	b.n	1818 <_wdt_set_timeout_period+0xdc>
    1840:	2011      	movs	r0, #17
    1842:	4240      	negs	r0, r0
    1844:	e7e8      	b.n	1818 <_wdt_set_timeout_period+0xdc>
			return ERR_INVALID_ARG;
    1846:	200d      	movs	r0, #13
    1848:	4240      	negs	r0, r0
    184a:	e7e5      	b.n	1818 <_wdt_set_timeout_period+0xdc>
    184c:	00002eb8 	.word	0x00002eb8
    1850:	00000c9d 	.word	0x00000c9d
    1854:	00001af5 	.word	0x00001af5

00001858 <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    1858:	b510      	push	{r4, lr}
    185a:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    185c:	d014      	beq.n	1888 <_wdt_enable+0x30>
    185e:	6803      	ldr	r3, [r0, #0]
    1860:	2b00      	cmp	r3, #0
    1862:	d00f      	beq.n	1884 <_wdt_enable+0x2c>
    1864:	2001      	movs	r0, #1
    1866:	22fa      	movs	r2, #250	; 0xfa
    1868:	4908      	ldr	r1, [pc, #32]	; (188c <_wdt_enable+0x34>)
    186a:	4b09      	ldr	r3, [pc, #36]	; (1890 <_wdt_enable+0x38>)
    186c:	4798      	blx	r3

	hri_wdt_set_CTRL_ENABLE_bit(dev->hw);
    186e:	6822      	ldr	r2, [r4, #0]
	((Wdt *)hw)->CTRL.reg |= WDT_CTRL_ENABLE;
    1870:	7813      	ldrb	r3, [r2, #0]
    1872:	2102      	movs	r1, #2
    1874:	430b      	orrs	r3, r1
    1876:	b2db      	uxtb	r3, r3
    1878:	7013      	strb	r3, [r2, #0]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    187a:	79d3      	ldrb	r3, [r2, #7]
    187c:	09db      	lsrs	r3, r3, #7
    187e:	d1fc      	bne.n	187a <_wdt_enable+0x22>

	return ERR_NONE;
}
    1880:	2000      	movs	r0, #0
    1882:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
    1884:	2000      	movs	r0, #0
    1886:	e7ee      	b.n	1866 <_wdt_enable+0xe>
    1888:	2000      	movs	r0, #0
    188a:	e7ec      	b.n	1866 <_wdt_enable+0xe>
    188c:	00002eb8 	.word	0x00002eb8
    1890:	00000c9d 	.word	0x00000c9d

00001894 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    1894:	b510      	push	{r4, lr}
    1896:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    1898:	d012      	beq.n	18c0 <_wdt_feed+0x2c>
    189a:	6803      	ldr	r3, [r0, #0]
    189c:	2b00      	cmp	r3, #0
    189e:	d00d      	beq.n	18bc <_wdt_feed+0x28>
    18a0:	2001      	movs	r0, #1
    18a2:	228c      	movs	r2, #140	; 0x8c
    18a4:	0052      	lsls	r2, r2, #1
    18a6:	4907      	ldr	r1, [pc, #28]	; (18c4 <_wdt_feed+0x30>)
    18a8:	4b07      	ldr	r3, [pc, #28]	; (18c8 <_wdt_feed+0x34>)
    18aa:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    18ac:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_wdt_write_CLEAR_reg(const void *const hw, hri_wdt_clear_reg_t data)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->CLEAR.reg = data;
    18ae:	23a5      	movs	r3, #165	; 0xa5
    18b0:	7213      	strb	r3, [r2, #8]
	while (((const Wdt *)hw)->STATUS.bit.SYNCBUSY)
    18b2:	79d3      	ldrb	r3, [r2, #7]
    18b4:	09db      	lsrs	r3, r3, #7
    18b6:	d1fc      	bne.n	18b2 <_wdt_feed+0x1e>

	return ERR_NONE;
}
    18b8:	2000      	movs	r0, #0
    18ba:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
    18bc:	2000      	movs	r0, #0
    18be:	e7f0      	b.n	18a2 <_wdt_feed+0xe>
    18c0:	2000      	movs	r0, #0
    18c2:	e7ee      	b.n	18a2 <_wdt_feed+0xe>
    18c4:	00002eb8 	.word	0x00002eb8
    18c8:	00000c9d 	.word	0x00000c9d

000018cc <main>:
#include <atmel_start.h>
#include <sys/time.h>
#include <App/DcaApp.h>

int main(void)
{
    18cc:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middle ware */
	atmel_start_init();
    18ce:	4b05      	ldr	r3, [pc, #20]	; (18e4 <main+0x18>)
    18d0:	4798      	blx	r3
	
	printf("\r\nSystem Boot\n");
    18d2:	4805      	ldr	r0, [pc, #20]	; (18e8 <main+0x1c>)
    18d4:	4b05      	ldr	r3, [pc, #20]	; (18ec <main+0x20>)
    18d6:	4798      	blx	r3

	// Initialize the DCA specific functionality
	DcaApp_Init();
    18d8:	4b05      	ldr	r3, [pc, #20]	; (18f0 <main+0x24>)
    18da:	4798      	blx	r3

	// Main processing loop
	DcaApp_Entry();
    18dc:	4b05      	ldr	r3, [pc, #20]	; (18f4 <main+0x28>)
    18de:	4798      	blx	r3
	
	// Return Success.
	return true;
}
    18e0:	2001      	movs	r0, #1
    18e2:	bd10      	pop	{r4, pc}
    18e4:	00000189 	.word	0x00000189
    18e8:	00002ed0 	.word	0x00002ed0
    18ec:	00001ce9 	.word	0x00001ce9
    18f0:	00000115 	.word	0x00000115
    18f4:	00000121 	.word	0x00000121

000018f8 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    18f8:	b510      	push	{r4, lr}
    18fa:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    18fc:	2800      	cmp	r0, #0
    18fe:	d109      	bne.n	1914 <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    1900:	0011      	movs	r1, r2
    1902:	0018      	movs	r0, r3
    1904:	4b05      	ldr	r3, [pc, #20]	; (191c <_read+0x24>)
    1906:	4798      	blx	r3
	if (n < 0) {
    1908:	2800      	cmp	r0, #0
    190a:	db00      	blt.n	190e <_read+0x16>
		return -1;
	}

	return n;
}
    190c:	bd10      	pop	{r4, pc}
		return -1;
    190e:	2001      	movs	r0, #1
    1910:	4240      	negs	r0, r0
    1912:	e7fb      	b.n	190c <_read+0x14>
		return -1;
    1914:	2001      	movs	r0, #1
    1916:	4240      	negs	r0, r0
    1918:	e7f8      	b.n	190c <_read+0x14>
    191a:	46c0      	nop			; (mov r8, r8)
    191c:	00001975 	.word	0x00001975

00001920 <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    1920:	b510      	push	{r4, lr}
    1922:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    1924:	3801      	subs	r0, #1
    1926:	2802      	cmp	r0, #2
    1928:	d809      	bhi.n	193e <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    192a:	0011      	movs	r1, r2
    192c:	0018      	movs	r0, r3
    192e:	4b05      	ldr	r3, [pc, #20]	; (1944 <_write+0x24>)
    1930:	4798      	blx	r3
	if (n < 0) {
    1932:	2800      	cmp	r0, #0
    1934:	db00      	blt.n	1938 <_write+0x18>
		return -1;
	}

	return n;
}
    1936:	bd10      	pop	{r4, pc}
		return -1;
    1938:	2001      	movs	r0, #1
    193a:	4240      	negs	r0, r0
    193c:	e7fb      	b.n	1936 <_write+0x16>
		return -1;
    193e:	2001      	movs	r0, #1
    1940:	4240      	negs	r0, r0
    1942:	e7f8      	b.n	1936 <_write+0x16>
    1944:	00001999 	.word	0x00001999

00001948 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    1948:	b570      	push	{r4, r5, r6, lr}
    194a:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    194c:	4d06      	ldr	r5, [pc, #24]	; (1968 <stdio_io_init+0x20>)
    194e:	682b      	ldr	r3, [r5, #0]
    1950:	6898      	ldr	r0, [r3, #8]
    1952:	2100      	movs	r1, #0
    1954:	4c05      	ldr	r4, [pc, #20]	; (196c <stdio_io_init+0x24>)
    1956:	47a0      	blx	r4
	setbuf(stdin, NULL);
    1958:	682b      	ldr	r3, [r5, #0]
    195a:	6858      	ldr	r0, [r3, #4]
    195c:	2100      	movs	r1, #0
    195e:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    1960:	4b03      	ldr	r3, [pc, #12]	; (1970 <stdio_io_init+0x28>)
    1962:	601e      	str	r6, [r3, #0]
}
    1964:	bd70      	pop	{r4, r5, r6, pc}
    1966:	46c0      	nop			; (mov r8, r8)
    1968:	20000000 	.word	0x20000000
    196c:	00001cfd 	.word	0x00001cfd
    1970:	200000a4 	.word	0x200000a4

00001974 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    1974:	b510      	push	{r4, lr}
    1976:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    1978:	4b05      	ldr	r3, [pc, #20]	; (1990 <stdio_io_read+0x1c>)
    197a:	6818      	ldr	r0, [r3, #0]
    197c:	2800      	cmp	r0, #0
    197e:	d004      	beq.n	198a <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    1980:	b28a      	uxth	r2, r1
    1982:	0021      	movs	r1, r4
    1984:	4b03      	ldr	r3, [pc, #12]	; (1994 <stdio_io_read+0x20>)
    1986:	4798      	blx	r3
}
    1988:	bd10      	pop	{r4, pc}
		return 0;
    198a:	2000      	movs	r0, #0
    198c:	e7fc      	b.n	1988 <stdio_io_read+0x14>
    198e:	46c0      	nop			; (mov r8, r8)
    1990:	200000a4 	.word	0x200000a4
    1994:	000008f5 	.word	0x000008f5

00001998 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    1998:	b510      	push	{r4, lr}
    199a:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    199c:	4b05      	ldr	r3, [pc, #20]	; (19b4 <stdio_io_write+0x1c>)
    199e:	6818      	ldr	r0, [r3, #0]
    19a0:	2800      	cmp	r0, #0
    19a2:	d004      	beq.n	19ae <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    19a4:	b28a      	uxth	r2, r1
    19a6:	0021      	movs	r1, r4
    19a8:	4b03      	ldr	r3, [pc, #12]	; (19b8 <stdio_io_write+0x20>)
    19aa:	4798      	blx	r3
}
    19ac:	bd10      	pop	{r4, pc}
		return 0;
    19ae:	2000      	movs	r0, #0
    19b0:	e7fc      	b.n	19ac <stdio_io_write+0x14>
    19b2:	46c0      	nop			; (mov r8, r8)
    19b4:	200000a4 	.word	0x200000a4
    19b8:	000008bd 	.word	0x000008bd

000019bc <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    19bc:	b510      	push	{r4, lr}

	usart_sync_enable(&DEBUG_0);
    19be:	4c04      	ldr	r4, [pc, #16]	; (19d0 <stdio_redirect_init+0x14>)
    19c0:	0020      	movs	r0, r4
    19c2:	4b04      	ldr	r3, [pc, #16]	; (19d4 <stdio_redirect_init+0x18>)
    19c4:	4798      	blx	r3
	stdio_io_init(&DEBUG_0.io);
    19c6:	0020      	movs	r0, r4
    19c8:	4b03      	ldr	r3, [pc, #12]	; (19d8 <stdio_redirect_init+0x1c>)
    19ca:	4798      	blx	r3
}
    19cc:	bd10      	pop	{r4, pc}
    19ce:	46c0      	nop			; (mov r8, r8)
    19d0:	200000c8 	.word	0x200000c8
    19d4:	00000c71 	.word	0x00000c71
    19d8:	00001949 	.word	0x00001949

000019dc <__udivsi3>:
    19dc:	2200      	movs	r2, #0
    19de:	0843      	lsrs	r3, r0, #1
    19e0:	428b      	cmp	r3, r1
    19e2:	d374      	bcc.n	1ace <__udivsi3+0xf2>
    19e4:	0903      	lsrs	r3, r0, #4
    19e6:	428b      	cmp	r3, r1
    19e8:	d35f      	bcc.n	1aaa <__udivsi3+0xce>
    19ea:	0a03      	lsrs	r3, r0, #8
    19ec:	428b      	cmp	r3, r1
    19ee:	d344      	bcc.n	1a7a <__udivsi3+0x9e>
    19f0:	0b03      	lsrs	r3, r0, #12
    19f2:	428b      	cmp	r3, r1
    19f4:	d328      	bcc.n	1a48 <__udivsi3+0x6c>
    19f6:	0c03      	lsrs	r3, r0, #16
    19f8:	428b      	cmp	r3, r1
    19fa:	d30d      	bcc.n	1a18 <__udivsi3+0x3c>
    19fc:	22ff      	movs	r2, #255	; 0xff
    19fe:	0209      	lsls	r1, r1, #8
    1a00:	ba12      	rev	r2, r2
    1a02:	0c03      	lsrs	r3, r0, #16
    1a04:	428b      	cmp	r3, r1
    1a06:	d302      	bcc.n	1a0e <__udivsi3+0x32>
    1a08:	1212      	asrs	r2, r2, #8
    1a0a:	0209      	lsls	r1, r1, #8
    1a0c:	d065      	beq.n	1ada <__udivsi3+0xfe>
    1a0e:	0b03      	lsrs	r3, r0, #12
    1a10:	428b      	cmp	r3, r1
    1a12:	d319      	bcc.n	1a48 <__udivsi3+0x6c>
    1a14:	e000      	b.n	1a18 <__udivsi3+0x3c>
    1a16:	0a09      	lsrs	r1, r1, #8
    1a18:	0bc3      	lsrs	r3, r0, #15
    1a1a:	428b      	cmp	r3, r1
    1a1c:	d301      	bcc.n	1a22 <__udivsi3+0x46>
    1a1e:	03cb      	lsls	r3, r1, #15
    1a20:	1ac0      	subs	r0, r0, r3
    1a22:	4152      	adcs	r2, r2
    1a24:	0b83      	lsrs	r3, r0, #14
    1a26:	428b      	cmp	r3, r1
    1a28:	d301      	bcc.n	1a2e <__udivsi3+0x52>
    1a2a:	038b      	lsls	r3, r1, #14
    1a2c:	1ac0      	subs	r0, r0, r3
    1a2e:	4152      	adcs	r2, r2
    1a30:	0b43      	lsrs	r3, r0, #13
    1a32:	428b      	cmp	r3, r1
    1a34:	d301      	bcc.n	1a3a <__udivsi3+0x5e>
    1a36:	034b      	lsls	r3, r1, #13
    1a38:	1ac0      	subs	r0, r0, r3
    1a3a:	4152      	adcs	r2, r2
    1a3c:	0b03      	lsrs	r3, r0, #12
    1a3e:	428b      	cmp	r3, r1
    1a40:	d301      	bcc.n	1a46 <__udivsi3+0x6a>
    1a42:	030b      	lsls	r3, r1, #12
    1a44:	1ac0      	subs	r0, r0, r3
    1a46:	4152      	adcs	r2, r2
    1a48:	0ac3      	lsrs	r3, r0, #11
    1a4a:	428b      	cmp	r3, r1
    1a4c:	d301      	bcc.n	1a52 <__udivsi3+0x76>
    1a4e:	02cb      	lsls	r3, r1, #11
    1a50:	1ac0      	subs	r0, r0, r3
    1a52:	4152      	adcs	r2, r2
    1a54:	0a83      	lsrs	r3, r0, #10
    1a56:	428b      	cmp	r3, r1
    1a58:	d301      	bcc.n	1a5e <__udivsi3+0x82>
    1a5a:	028b      	lsls	r3, r1, #10
    1a5c:	1ac0      	subs	r0, r0, r3
    1a5e:	4152      	adcs	r2, r2
    1a60:	0a43      	lsrs	r3, r0, #9
    1a62:	428b      	cmp	r3, r1
    1a64:	d301      	bcc.n	1a6a <__udivsi3+0x8e>
    1a66:	024b      	lsls	r3, r1, #9
    1a68:	1ac0      	subs	r0, r0, r3
    1a6a:	4152      	adcs	r2, r2
    1a6c:	0a03      	lsrs	r3, r0, #8
    1a6e:	428b      	cmp	r3, r1
    1a70:	d301      	bcc.n	1a76 <__udivsi3+0x9a>
    1a72:	020b      	lsls	r3, r1, #8
    1a74:	1ac0      	subs	r0, r0, r3
    1a76:	4152      	adcs	r2, r2
    1a78:	d2cd      	bcs.n	1a16 <__udivsi3+0x3a>
    1a7a:	09c3      	lsrs	r3, r0, #7
    1a7c:	428b      	cmp	r3, r1
    1a7e:	d301      	bcc.n	1a84 <__udivsi3+0xa8>
    1a80:	01cb      	lsls	r3, r1, #7
    1a82:	1ac0      	subs	r0, r0, r3
    1a84:	4152      	adcs	r2, r2
    1a86:	0983      	lsrs	r3, r0, #6
    1a88:	428b      	cmp	r3, r1
    1a8a:	d301      	bcc.n	1a90 <__udivsi3+0xb4>
    1a8c:	018b      	lsls	r3, r1, #6
    1a8e:	1ac0      	subs	r0, r0, r3
    1a90:	4152      	adcs	r2, r2
    1a92:	0943      	lsrs	r3, r0, #5
    1a94:	428b      	cmp	r3, r1
    1a96:	d301      	bcc.n	1a9c <__udivsi3+0xc0>
    1a98:	014b      	lsls	r3, r1, #5
    1a9a:	1ac0      	subs	r0, r0, r3
    1a9c:	4152      	adcs	r2, r2
    1a9e:	0903      	lsrs	r3, r0, #4
    1aa0:	428b      	cmp	r3, r1
    1aa2:	d301      	bcc.n	1aa8 <__udivsi3+0xcc>
    1aa4:	010b      	lsls	r3, r1, #4
    1aa6:	1ac0      	subs	r0, r0, r3
    1aa8:	4152      	adcs	r2, r2
    1aaa:	08c3      	lsrs	r3, r0, #3
    1aac:	428b      	cmp	r3, r1
    1aae:	d301      	bcc.n	1ab4 <__udivsi3+0xd8>
    1ab0:	00cb      	lsls	r3, r1, #3
    1ab2:	1ac0      	subs	r0, r0, r3
    1ab4:	4152      	adcs	r2, r2
    1ab6:	0883      	lsrs	r3, r0, #2
    1ab8:	428b      	cmp	r3, r1
    1aba:	d301      	bcc.n	1ac0 <__udivsi3+0xe4>
    1abc:	008b      	lsls	r3, r1, #2
    1abe:	1ac0      	subs	r0, r0, r3
    1ac0:	4152      	adcs	r2, r2
    1ac2:	0843      	lsrs	r3, r0, #1
    1ac4:	428b      	cmp	r3, r1
    1ac6:	d301      	bcc.n	1acc <__udivsi3+0xf0>
    1ac8:	004b      	lsls	r3, r1, #1
    1aca:	1ac0      	subs	r0, r0, r3
    1acc:	4152      	adcs	r2, r2
    1ace:	1a41      	subs	r1, r0, r1
    1ad0:	d200      	bcs.n	1ad4 <__udivsi3+0xf8>
    1ad2:	4601      	mov	r1, r0
    1ad4:	4152      	adcs	r2, r2
    1ad6:	4610      	mov	r0, r2
    1ad8:	4770      	bx	lr
    1ada:	e7ff      	b.n	1adc <__udivsi3+0x100>
    1adc:	b501      	push	{r0, lr}
    1ade:	2000      	movs	r0, #0
    1ae0:	f000 f806 	bl	1af0 <__aeabi_idiv0>
    1ae4:	bd02      	pop	{r1, pc}
    1ae6:	46c0      	nop			; (mov r8, r8)

00001ae8 <__aeabi_uidivmod>:
    1ae8:	2900      	cmp	r1, #0
    1aea:	d0f7      	beq.n	1adc <__udivsi3+0x100>
    1aec:	e776      	b.n	19dc <__udivsi3>
    1aee:	4770      	bx	lr

00001af0 <__aeabi_idiv0>:
    1af0:	4770      	bx	lr
    1af2:	46c0      	nop			; (mov r8, r8)

00001af4 <__aeabi_lmul>:
    1af4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1af6:	46ce      	mov	lr, r9
    1af8:	4647      	mov	r7, r8
    1afa:	0415      	lsls	r5, r2, #16
    1afc:	0c2d      	lsrs	r5, r5, #16
    1afe:	002e      	movs	r6, r5
    1b00:	b580      	push	{r7, lr}
    1b02:	0407      	lsls	r7, r0, #16
    1b04:	0c14      	lsrs	r4, r2, #16
    1b06:	0c3f      	lsrs	r7, r7, #16
    1b08:	4699      	mov	r9, r3
    1b0a:	0c03      	lsrs	r3, r0, #16
    1b0c:	437e      	muls	r6, r7
    1b0e:	435d      	muls	r5, r3
    1b10:	4367      	muls	r7, r4
    1b12:	4363      	muls	r3, r4
    1b14:	197f      	adds	r7, r7, r5
    1b16:	0c34      	lsrs	r4, r6, #16
    1b18:	19e4      	adds	r4, r4, r7
    1b1a:	469c      	mov	ip, r3
    1b1c:	42a5      	cmp	r5, r4
    1b1e:	d903      	bls.n	1b28 <__aeabi_lmul+0x34>
    1b20:	2380      	movs	r3, #128	; 0x80
    1b22:	025b      	lsls	r3, r3, #9
    1b24:	4698      	mov	r8, r3
    1b26:	44c4      	add	ip, r8
    1b28:	464b      	mov	r3, r9
    1b2a:	4351      	muls	r1, r2
    1b2c:	4343      	muls	r3, r0
    1b2e:	0436      	lsls	r6, r6, #16
    1b30:	0c36      	lsrs	r6, r6, #16
    1b32:	0c25      	lsrs	r5, r4, #16
    1b34:	0424      	lsls	r4, r4, #16
    1b36:	4465      	add	r5, ip
    1b38:	19a4      	adds	r4, r4, r6
    1b3a:	1859      	adds	r1, r3, r1
    1b3c:	1949      	adds	r1, r1, r5
    1b3e:	0020      	movs	r0, r4
    1b40:	bc0c      	pop	{r2, r3}
    1b42:	4690      	mov	r8, r2
    1b44:	4699      	mov	r9, r3
    1b46:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001b48 <__ffssi2>:
    1b48:	b510      	push	{r4, lr}
    1b4a:	2300      	movs	r3, #0
    1b4c:	2800      	cmp	r0, #0
    1b4e:	d002      	beq.n	1b56 <__ffssi2+0xe>
    1b50:	f000 f804 	bl	1b5c <__ctzsi2>
    1b54:	1c43      	adds	r3, r0, #1
    1b56:	0018      	movs	r0, r3
    1b58:	bd10      	pop	{r4, pc}
    1b5a:	46c0      	nop			; (mov r8, r8)

00001b5c <__ctzsi2>:
    1b5c:	4241      	negs	r1, r0
    1b5e:	4008      	ands	r0, r1
    1b60:	211c      	movs	r1, #28
    1b62:	2301      	movs	r3, #1
    1b64:	041b      	lsls	r3, r3, #16
    1b66:	4298      	cmp	r0, r3
    1b68:	d301      	bcc.n	1b6e <__ctzsi2+0x12>
    1b6a:	0c00      	lsrs	r0, r0, #16
    1b6c:	3910      	subs	r1, #16
    1b6e:	0a1b      	lsrs	r3, r3, #8
    1b70:	4298      	cmp	r0, r3
    1b72:	d301      	bcc.n	1b78 <__ctzsi2+0x1c>
    1b74:	0a00      	lsrs	r0, r0, #8
    1b76:	3908      	subs	r1, #8
    1b78:	091b      	lsrs	r3, r3, #4
    1b7a:	4298      	cmp	r0, r3
    1b7c:	d301      	bcc.n	1b82 <__ctzsi2+0x26>
    1b7e:	0900      	lsrs	r0, r0, #4
    1b80:	3904      	subs	r1, #4
    1b82:	a202      	add	r2, pc, #8	; (adr r2, 1b8c <__ctzsi2+0x30>)
    1b84:	5c10      	ldrb	r0, [r2, r0]
    1b86:	1a40      	subs	r0, r0, r1
    1b88:	4770      	bx	lr
    1b8a:	46c0      	nop			; (mov r8, r8)
    1b8c:	1d1d1c1b 	.word	0x1d1d1c1b
    1b90:	1e1e1e1e 	.word	0x1e1e1e1e
    1b94:	1f1f1f1f 	.word	0x1f1f1f1f
    1b98:	1f1f1f1f 	.word	0x1f1f1f1f

00001b9c <__libc_init_array>:
    1b9c:	b570      	push	{r4, r5, r6, lr}
    1b9e:	2600      	movs	r6, #0
    1ba0:	4d0c      	ldr	r5, [pc, #48]	; (1bd4 <__libc_init_array+0x38>)
    1ba2:	4c0d      	ldr	r4, [pc, #52]	; (1bd8 <__libc_init_array+0x3c>)
    1ba4:	1b64      	subs	r4, r4, r5
    1ba6:	10a4      	asrs	r4, r4, #2
    1ba8:	42a6      	cmp	r6, r4
    1baa:	d109      	bne.n	1bc0 <__libc_init_array+0x24>
    1bac:	2600      	movs	r6, #0
    1bae:	f001 f9e3 	bl	2f78 <_init>
    1bb2:	4d0a      	ldr	r5, [pc, #40]	; (1bdc <__libc_init_array+0x40>)
    1bb4:	4c0a      	ldr	r4, [pc, #40]	; (1be0 <__libc_init_array+0x44>)
    1bb6:	1b64      	subs	r4, r4, r5
    1bb8:	10a4      	asrs	r4, r4, #2
    1bba:	42a6      	cmp	r6, r4
    1bbc:	d105      	bne.n	1bca <__libc_init_array+0x2e>
    1bbe:	bd70      	pop	{r4, r5, r6, pc}
    1bc0:	00b3      	lsls	r3, r6, #2
    1bc2:	58eb      	ldr	r3, [r5, r3]
    1bc4:	4798      	blx	r3
    1bc6:	3601      	adds	r6, #1
    1bc8:	e7ee      	b.n	1ba8 <__libc_init_array+0xc>
    1bca:	00b3      	lsls	r3, r6, #2
    1bcc:	58eb      	ldr	r3, [r5, r3]
    1bce:	4798      	blx	r3
    1bd0:	3601      	adds	r6, #1
    1bd2:	e7f2      	b.n	1bba <__libc_init_array+0x1e>
    1bd4:	00002f84 	.word	0x00002f84
    1bd8:	00002f84 	.word	0x00002f84
    1bdc:	00002f84 	.word	0x00002f84
    1be0:	00002f88 	.word	0x00002f88

00001be4 <memset>:
    1be4:	0003      	movs	r3, r0
    1be6:	1882      	adds	r2, r0, r2
    1be8:	4293      	cmp	r3, r2
    1bea:	d100      	bne.n	1bee <memset+0xa>
    1bec:	4770      	bx	lr
    1bee:	7019      	strb	r1, [r3, #0]
    1bf0:	3301      	adds	r3, #1
    1bf2:	e7f9      	b.n	1be8 <memset+0x4>

00001bf4 <iprintf>:
    1bf4:	b40f      	push	{r0, r1, r2, r3}
    1bf6:	4b0b      	ldr	r3, [pc, #44]	; (1c24 <iprintf+0x30>)
    1bf8:	b513      	push	{r0, r1, r4, lr}
    1bfa:	681c      	ldr	r4, [r3, #0]
    1bfc:	2c00      	cmp	r4, #0
    1bfe:	d005      	beq.n	1c0c <iprintf+0x18>
    1c00:	69a3      	ldr	r3, [r4, #24]
    1c02:	2b00      	cmp	r3, #0
    1c04:	d102      	bne.n	1c0c <iprintf+0x18>
    1c06:	0020      	movs	r0, r4
    1c08:	f000 faf2 	bl	21f0 <__sinit>
    1c0c:	ab05      	add	r3, sp, #20
    1c0e:	9a04      	ldr	r2, [sp, #16]
    1c10:	68a1      	ldr	r1, [r4, #8]
    1c12:	0020      	movs	r0, r4
    1c14:	9301      	str	r3, [sp, #4]
    1c16:	f000 fcc7 	bl	25a8 <_vfiprintf_r>
    1c1a:	bc16      	pop	{r1, r2, r4}
    1c1c:	bc08      	pop	{r3}
    1c1e:	b004      	add	sp, #16
    1c20:	4718      	bx	r3
    1c22:	46c0      	nop			; (mov r8, r8)
    1c24:	20000000 	.word	0x20000000

00001c28 <_puts_r>:
    1c28:	b570      	push	{r4, r5, r6, lr}
    1c2a:	0005      	movs	r5, r0
    1c2c:	000e      	movs	r6, r1
    1c2e:	2800      	cmp	r0, #0
    1c30:	d004      	beq.n	1c3c <_puts_r+0x14>
    1c32:	6983      	ldr	r3, [r0, #24]
    1c34:	2b00      	cmp	r3, #0
    1c36:	d101      	bne.n	1c3c <_puts_r+0x14>
    1c38:	f000 fada 	bl	21f0 <__sinit>
    1c3c:	69ab      	ldr	r3, [r5, #24]
    1c3e:	68ac      	ldr	r4, [r5, #8]
    1c40:	2b00      	cmp	r3, #0
    1c42:	d102      	bne.n	1c4a <_puts_r+0x22>
    1c44:	0028      	movs	r0, r5
    1c46:	f000 fad3 	bl	21f0 <__sinit>
    1c4a:	4b24      	ldr	r3, [pc, #144]	; (1cdc <_puts_r+0xb4>)
    1c4c:	429c      	cmp	r4, r3
    1c4e:	d10f      	bne.n	1c70 <_puts_r+0x48>
    1c50:	686c      	ldr	r4, [r5, #4]
    1c52:	89a3      	ldrh	r3, [r4, #12]
    1c54:	071b      	lsls	r3, r3, #28
    1c56:	d502      	bpl.n	1c5e <_puts_r+0x36>
    1c58:	6923      	ldr	r3, [r4, #16]
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	d120      	bne.n	1ca0 <_puts_r+0x78>
    1c5e:	0021      	movs	r1, r4
    1c60:	0028      	movs	r0, r5
    1c62:	f000 f957 	bl	1f14 <__swsetup_r>
    1c66:	2800      	cmp	r0, #0
    1c68:	d01a      	beq.n	1ca0 <_puts_r+0x78>
    1c6a:	2001      	movs	r0, #1
    1c6c:	4240      	negs	r0, r0
    1c6e:	bd70      	pop	{r4, r5, r6, pc}
    1c70:	4b1b      	ldr	r3, [pc, #108]	; (1ce0 <_puts_r+0xb8>)
    1c72:	429c      	cmp	r4, r3
    1c74:	d101      	bne.n	1c7a <_puts_r+0x52>
    1c76:	68ac      	ldr	r4, [r5, #8]
    1c78:	e7eb      	b.n	1c52 <_puts_r+0x2a>
    1c7a:	4b1a      	ldr	r3, [pc, #104]	; (1ce4 <_puts_r+0xbc>)
    1c7c:	429c      	cmp	r4, r3
    1c7e:	d1e8      	bne.n	1c52 <_puts_r+0x2a>
    1c80:	68ec      	ldr	r4, [r5, #12]
    1c82:	e7e6      	b.n	1c52 <_puts_r+0x2a>
    1c84:	3b01      	subs	r3, #1
    1c86:	3601      	adds	r6, #1
    1c88:	60a3      	str	r3, [r4, #8]
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	da04      	bge.n	1c98 <_puts_r+0x70>
    1c8e:	69a2      	ldr	r2, [r4, #24]
    1c90:	4293      	cmp	r3, r2
    1c92:	db16      	blt.n	1cc2 <_puts_r+0x9a>
    1c94:	290a      	cmp	r1, #10
    1c96:	d014      	beq.n	1cc2 <_puts_r+0x9a>
    1c98:	6823      	ldr	r3, [r4, #0]
    1c9a:	1c5a      	adds	r2, r3, #1
    1c9c:	6022      	str	r2, [r4, #0]
    1c9e:	7019      	strb	r1, [r3, #0]
    1ca0:	7831      	ldrb	r1, [r6, #0]
    1ca2:	68a3      	ldr	r3, [r4, #8]
    1ca4:	2900      	cmp	r1, #0
    1ca6:	d1ed      	bne.n	1c84 <_puts_r+0x5c>
    1ca8:	3b01      	subs	r3, #1
    1caa:	60a3      	str	r3, [r4, #8]
    1cac:	2b00      	cmp	r3, #0
    1cae:	da0f      	bge.n	1cd0 <_puts_r+0xa8>
    1cb0:	0022      	movs	r2, r4
    1cb2:	310a      	adds	r1, #10
    1cb4:	0028      	movs	r0, r5
    1cb6:	f000 f8d7 	bl	1e68 <__swbuf_r>
    1cba:	1c43      	adds	r3, r0, #1
    1cbc:	d0d5      	beq.n	1c6a <_puts_r+0x42>
    1cbe:	200a      	movs	r0, #10
    1cc0:	e7d5      	b.n	1c6e <_puts_r+0x46>
    1cc2:	0022      	movs	r2, r4
    1cc4:	0028      	movs	r0, r5
    1cc6:	f000 f8cf 	bl	1e68 <__swbuf_r>
    1cca:	1c43      	adds	r3, r0, #1
    1ccc:	d1e8      	bne.n	1ca0 <_puts_r+0x78>
    1cce:	e7cc      	b.n	1c6a <_puts_r+0x42>
    1cd0:	200a      	movs	r0, #10
    1cd2:	6823      	ldr	r3, [r4, #0]
    1cd4:	1c5a      	adds	r2, r3, #1
    1cd6:	6022      	str	r2, [r4, #0]
    1cd8:	7018      	strb	r0, [r3, #0]
    1cda:	e7c8      	b.n	1c6e <_puts_r+0x46>
    1cdc:	00002f04 	.word	0x00002f04
    1ce0:	00002f24 	.word	0x00002f24
    1ce4:	00002ee4 	.word	0x00002ee4

00001ce8 <puts>:
    1ce8:	b510      	push	{r4, lr}
    1cea:	4b03      	ldr	r3, [pc, #12]	; (1cf8 <puts+0x10>)
    1cec:	0001      	movs	r1, r0
    1cee:	6818      	ldr	r0, [r3, #0]
    1cf0:	f7ff ff9a 	bl	1c28 <_puts_r>
    1cf4:	bd10      	pop	{r4, pc}
    1cf6:	46c0      	nop			; (mov r8, r8)
    1cf8:	20000000 	.word	0x20000000

00001cfc <setbuf>:
    1cfc:	424a      	negs	r2, r1
    1cfe:	414a      	adcs	r2, r1
    1d00:	2380      	movs	r3, #128	; 0x80
    1d02:	b510      	push	{r4, lr}
    1d04:	0052      	lsls	r2, r2, #1
    1d06:	00db      	lsls	r3, r3, #3
    1d08:	f000 f802 	bl	1d10 <setvbuf>
    1d0c:	bd10      	pop	{r4, pc}
	...

00001d10 <setvbuf>:
    1d10:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d12:	001d      	movs	r5, r3
    1d14:	4b4f      	ldr	r3, [pc, #316]	; (1e54 <setvbuf+0x144>)
    1d16:	b085      	sub	sp, #20
    1d18:	681e      	ldr	r6, [r3, #0]
    1d1a:	0004      	movs	r4, r0
    1d1c:	000f      	movs	r7, r1
    1d1e:	9200      	str	r2, [sp, #0]
    1d20:	2e00      	cmp	r6, #0
    1d22:	d005      	beq.n	1d30 <setvbuf+0x20>
    1d24:	69b3      	ldr	r3, [r6, #24]
    1d26:	2b00      	cmp	r3, #0
    1d28:	d102      	bne.n	1d30 <setvbuf+0x20>
    1d2a:	0030      	movs	r0, r6
    1d2c:	f000 fa60 	bl	21f0 <__sinit>
    1d30:	4b49      	ldr	r3, [pc, #292]	; (1e58 <setvbuf+0x148>)
    1d32:	429c      	cmp	r4, r3
    1d34:	d150      	bne.n	1dd8 <setvbuf+0xc8>
    1d36:	6874      	ldr	r4, [r6, #4]
    1d38:	9b00      	ldr	r3, [sp, #0]
    1d3a:	2b02      	cmp	r3, #2
    1d3c:	d005      	beq.n	1d4a <setvbuf+0x3a>
    1d3e:	2b01      	cmp	r3, #1
    1d40:	d900      	bls.n	1d44 <setvbuf+0x34>
    1d42:	e084      	b.n	1e4e <setvbuf+0x13e>
    1d44:	2d00      	cmp	r5, #0
    1d46:	da00      	bge.n	1d4a <setvbuf+0x3a>
    1d48:	e081      	b.n	1e4e <setvbuf+0x13e>
    1d4a:	0021      	movs	r1, r4
    1d4c:	0030      	movs	r0, r6
    1d4e:	f000 f9e1 	bl	2114 <_fflush_r>
    1d52:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1d54:	2900      	cmp	r1, #0
    1d56:	d008      	beq.n	1d6a <setvbuf+0x5a>
    1d58:	0023      	movs	r3, r4
    1d5a:	3344      	adds	r3, #68	; 0x44
    1d5c:	4299      	cmp	r1, r3
    1d5e:	d002      	beq.n	1d66 <setvbuf+0x56>
    1d60:	0030      	movs	r0, r6
    1d62:	f000 fb51 	bl	2408 <_free_r>
    1d66:	2300      	movs	r3, #0
    1d68:	6363      	str	r3, [r4, #52]	; 0x34
    1d6a:	2300      	movs	r3, #0
    1d6c:	61a3      	str	r3, [r4, #24]
    1d6e:	6063      	str	r3, [r4, #4]
    1d70:	89a3      	ldrh	r3, [r4, #12]
    1d72:	061b      	lsls	r3, r3, #24
    1d74:	d503      	bpl.n	1d7e <setvbuf+0x6e>
    1d76:	6921      	ldr	r1, [r4, #16]
    1d78:	0030      	movs	r0, r6
    1d7a:	f000 fb45 	bl	2408 <_free_r>
    1d7e:	89a3      	ldrh	r3, [r4, #12]
    1d80:	4a36      	ldr	r2, [pc, #216]	; (1e5c <setvbuf+0x14c>)
    1d82:	4013      	ands	r3, r2
    1d84:	81a3      	strh	r3, [r4, #12]
    1d86:	9b00      	ldr	r3, [sp, #0]
    1d88:	2b02      	cmp	r3, #2
    1d8a:	d05a      	beq.n	1e42 <setvbuf+0x132>
    1d8c:	ab03      	add	r3, sp, #12
    1d8e:	aa02      	add	r2, sp, #8
    1d90:	0021      	movs	r1, r4
    1d92:	0030      	movs	r0, r6
    1d94:	f000 fac2 	bl	231c <__swhatbuf_r>
    1d98:	89a3      	ldrh	r3, [r4, #12]
    1d9a:	4318      	orrs	r0, r3
    1d9c:	81a0      	strh	r0, [r4, #12]
    1d9e:	2d00      	cmp	r5, #0
    1da0:	d124      	bne.n	1dec <setvbuf+0xdc>
    1da2:	9d02      	ldr	r5, [sp, #8]
    1da4:	0028      	movs	r0, r5
    1da6:	f000 fb25 	bl	23f4 <malloc>
    1daa:	9501      	str	r5, [sp, #4]
    1dac:	1e07      	subs	r7, r0, #0
    1dae:	d142      	bne.n	1e36 <setvbuf+0x126>
    1db0:	9b02      	ldr	r3, [sp, #8]
    1db2:	9301      	str	r3, [sp, #4]
    1db4:	42ab      	cmp	r3, r5
    1db6:	d139      	bne.n	1e2c <setvbuf+0x11c>
    1db8:	2001      	movs	r0, #1
    1dba:	4240      	negs	r0, r0
    1dbc:	2302      	movs	r3, #2
    1dbe:	89a2      	ldrh	r2, [r4, #12]
    1dc0:	4313      	orrs	r3, r2
    1dc2:	81a3      	strh	r3, [r4, #12]
    1dc4:	2300      	movs	r3, #0
    1dc6:	60a3      	str	r3, [r4, #8]
    1dc8:	0023      	movs	r3, r4
    1dca:	3347      	adds	r3, #71	; 0x47
    1dcc:	6023      	str	r3, [r4, #0]
    1dce:	6123      	str	r3, [r4, #16]
    1dd0:	2301      	movs	r3, #1
    1dd2:	6163      	str	r3, [r4, #20]
    1dd4:	b005      	add	sp, #20
    1dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dd8:	4b21      	ldr	r3, [pc, #132]	; (1e60 <setvbuf+0x150>)
    1dda:	429c      	cmp	r4, r3
    1ddc:	d101      	bne.n	1de2 <setvbuf+0xd2>
    1dde:	68b4      	ldr	r4, [r6, #8]
    1de0:	e7aa      	b.n	1d38 <setvbuf+0x28>
    1de2:	4b20      	ldr	r3, [pc, #128]	; (1e64 <setvbuf+0x154>)
    1de4:	429c      	cmp	r4, r3
    1de6:	d1a7      	bne.n	1d38 <setvbuf+0x28>
    1de8:	68f4      	ldr	r4, [r6, #12]
    1dea:	e7a5      	b.n	1d38 <setvbuf+0x28>
    1dec:	2f00      	cmp	r7, #0
    1dee:	d0d9      	beq.n	1da4 <setvbuf+0x94>
    1df0:	69b3      	ldr	r3, [r6, #24]
    1df2:	2b00      	cmp	r3, #0
    1df4:	d102      	bne.n	1dfc <setvbuf+0xec>
    1df6:	0030      	movs	r0, r6
    1df8:	f000 f9fa 	bl	21f0 <__sinit>
    1dfc:	9b00      	ldr	r3, [sp, #0]
    1dfe:	2b01      	cmp	r3, #1
    1e00:	d103      	bne.n	1e0a <setvbuf+0xfa>
    1e02:	89a3      	ldrh	r3, [r4, #12]
    1e04:	9a00      	ldr	r2, [sp, #0]
    1e06:	431a      	orrs	r2, r3
    1e08:	81a2      	strh	r2, [r4, #12]
    1e0a:	2008      	movs	r0, #8
    1e0c:	89a3      	ldrh	r3, [r4, #12]
    1e0e:	6027      	str	r7, [r4, #0]
    1e10:	6127      	str	r7, [r4, #16]
    1e12:	6165      	str	r5, [r4, #20]
    1e14:	4018      	ands	r0, r3
    1e16:	d018      	beq.n	1e4a <setvbuf+0x13a>
    1e18:	2001      	movs	r0, #1
    1e1a:	4018      	ands	r0, r3
    1e1c:	2300      	movs	r3, #0
    1e1e:	4298      	cmp	r0, r3
    1e20:	d011      	beq.n	1e46 <setvbuf+0x136>
    1e22:	426d      	negs	r5, r5
    1e24:	60a3      	str	r3, [r4, #8]
    1e26:	61a5      	str	r5, [r4, #24]
    1e28:	0018      	movs	r0, r3
    1e2a:	e7d3      	b.n	1dd4 <setvbuf+0xc4>
    1e2c:	9801      	ldr	r0, [sp, #4]
    1e2e:	f000 fae1 	bl	23f4 <malloc>
    1e32:	1e07      	subs	r7, r0, #0
    1e34:	d0c0      	beq.n	1db8 <setvbuf+0xa8>
    1e36:	2380      	movs	r3, #128	; 0x80
    1e38:	89a2      	ldrh	r2, [r4, #12]
    1e3a:	9d01      	ldr	r5, [sp, #4]
    1e3c:	4313      	orrs	r3, r2
    1e3e:	81a3      	strh	r3, [r4, #12]
    1e40:	e7d6      	b.n	1df0 <setvbuf+0xe0>
    1e42:	2000      	movs	r0, #0
    1e44:	e7ba      	b.n	1dbc <setvbuf+0xac>
    1e46:	60a5      	str	r5, [r4, #8]
    1e48:	e7c4      	b.n	1dd4 <setvbuf+0xc4>
    1e4a:	60a0      	str	r0, [r4, #8]
    1e4c:	e7c2      	b.n	1dd4 <setvbuf+0xc4>
    1e4e:	2001      	movs	r0, #1
    1e50:	4240      	negs	r0, r0
    1e52:	e7bf      	b.n	1dd4 <setvbuf+0xc4>
    1e54:	20000000 	.word	0x20000000
    1e58:	00002f04 	.word	0x00002f04
    1e5c:	fffff35c 	.word	0xfffff35c
    1e60:	00002f24 	.word	0x00002f24
    1e64:	00002ee4 	.word	0x00002ee4

00001e68 <__swbuf_r>:
    1e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e6a:	0005      	movs	r5, r0
    1e6c:	000e      	movs	r6, r1
    1e6e:	0014      	movs	r4, r2
    1e70:	2800      	cmp	r0, #0
    1e72:	d004      	beq.n	1e7e <__swbuf_r+0x16>
    1e74:	6983      	ldr	r3, [r0, #24]
    1e76:	2b00      	cmp	r3, #0
    1e78:	d101      	bne.n	1e7e <__swbuf_r+0x16>
    1e7a:	f000 f9b9 	bl	21f0 <__sinit>
    1e7e:	4b22      	ldr	r3, [pc, #136]	; (1f08 <__swbuf_r+0xa0>)
    1e80:	429c      	cmp	r4, r3
    1e82:	d12d      	bne.n	1ee0 <__swbuf_r+0x78>
    1e84:	686c      	ldr	r4, [r5, #4]
    1e86:	69a3      	ldr	r3, [r4, #24]
    1e88:	60a3      	str	r3, [r4, #8]
    1e8a:	89a3      	ldrh	r3, [r4, #12]
    1e8c:	071b      	lsls	r3, r3, #28
    1e8e:	d531      	bpl.n	1ef4 <__swbuf_r+0x8c>
    1e90:	6923      	ldr	r3, [r4, #16]
    1e92:	2b00      	cmp	r3, #0
    1e94:	d02e      	beq.n	1ef4 <__swbuf_r+0x8c>
    1e96:	6823      	ldr	r3, [r4, #0]
    1e98:	6922      	ldr	r2, [r4, #16]
    1e9a:	b2f7      	uxtb	r7, r6
    1e9c:	1a98      	subs	r0, r3, r2
    1e9e:	6963      	ldr	r3, [r4, #20]
    1ea0:	b2f6      	uxtb	r6, r6
    1ea2:	4298      	cmp	r0, r3
    1ea4:	db05      	blt.n	1eb2 <__swbuf_r+0x4a>
    1ea6:	0021      	movs	r1, r4
    1ea8:	0028      	movs	r0, r5
    1eaa:	f000 f933 	bl	2114 <_fflush_r>
    1eae:	2800      	cmp	r0, #0
    1eb0:	d126      	bne.n	1f00 <__swbuf_r+0x98>
    1eb2:	68a3      	ldr	r3, [r4, #8]
    1eb4:	3001      	adds	r0, #1
    1eb6:	3b01      	subs	r3, #1
    1eb8:	60a3      	str	r3, [r4, #8]
    1eba:	6823      	ldr	r3, [r4, #0]
    1ebc:	1c5a      	adds	r2, r3, #1
    1ebe:	6022      	str	r2, [r4, #0]
    1ec0:	701f      	strb	r7, [r3, #0]
    1ec2:	6963      	ldr	r3, [r4, #20]
    1ec4:	4298      	cmp	r0, r3
    1ec6:	d004      	beq.n	1ed2 <__swbuf_r+0x6a>
    1ec8:	89a3      	ldrh	r3, [r4, #12]
    1eca:	07db      	lsls	r3, r3, #31
    1ecc:	d51a      	bpl.n	1f04 <__swbuf_r+0x9c>
    1ece:	2e0a      	cmp	r6, #10
    1ed0:	d118      	bne.n	1f04 <__swbuf_r+0x9c>
    1ed2:	0021      	movs	r1, r4
    1ed4:	0028      	movs	r0, r5
    1ed6:	f000 f91d 	bl	2114 <_fflush_r>
    1eda:	2800      	cmp	r0, #0
    1edc:	d012      	beq.n	1f04 <__swbuf_r+0x9c>
    1ede:	e00f      	b.n	1f00 <__swbuf_r+0x98>
    1ee0:	4b0a      	ldr	r3, [pc, #40]	; (1f0c <__swbuf_r+0xa4>)
    1ee2:	429c      	cmp	r4, r3
    1ee4:	d101      	bne.n	1eea <__swbuf_r+0x82>
    1ee6:	68ac      	ldr	r4, [r5, #8]
    1ee8:	e7cd      	b.n	1e86 <__swbuf_r+0x1e>
    1eea:	4b09      	ldr	r3, [pc, #36]	; (1f10 <__swbuf_r+0xa8>)
    1eec:	429c      	cmp	r4, r3
    1eee:	d1ca      	bne.n	1e86 <__swbuf_r+0x1e>
    1ef0:	68ec      	ldr	r4, [r5, #12]
    1ef2:	e7c8      	b.n	1e86 <__swbuf_r+0x1e>
    1ef4:	0021      	movs	r1, r4
    1ef6:	0028      	movs	r0, r5
    1ef8:	f000 f80c 	bl	1f14 <__swsetup_r>
    1efc:	2800      	cmp	r0, #0
    1efe:	d0ca      	beq.n	1e96 <__swbuf_r+0x2e>
    1f00:	2601      	movs	r6, #1
    1f02:	4276      	negs	r6, r6
    1f04:	0030      	movs	r0, r6
    1f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f08:	00002f04 	.word	0x00002f04
    1f0c:	00002f24 	.word	0x00002f24
    1f10:	00002ee4 	.word	0x00002ee4

00001f14 <__swsetup_r>:
    1f14:	4b36      	ldr	r3, [pc, #216]	; (1ff0 <__swsetup_r+0xdc>)
    1f16:	b570      	push	{r4, r5, r6, lr}
    1f18:	681d      	ldr	r5, [r3, #0]
    1f1a:	0006      	movs	r6, r0
    1f1c:	000c      	movs	r4, r1
    1f1e:	2d00      	cmp	r5, #0
    1f20:	d005      	beq.n	1f2e <__swsetup_r+0x1a>
    1f22:	69ab      	ldr	r3, [r5, #24]
    1f24:	2b00      	cmp	r3, #0
    1f26:	d102      	bne.n	1f2e <__swsetup_r+0x1a>
    1f28:	0028      	movs	r0, r5
    1f2a:	f000 f961 	bl	21f0 <__sinit>
    1f2e:	4b31      	ldr	r3, [pc, #196]	; (1ff4 <__swsetup_r+0xe0>)
    1f30:	429c      	cmp	r4, r3
    1f32:	d10f      	bne.n	1f54 <__swsetup_r+0x40>
    1f34:	686c      	ldr	r4, [r5, #4]
    1f36:	230c      	movs	r3, #12
    1f38:	5ee2      	ldrsh	r2, [r4, r3]
    1f3a:	b293      	uxth	r3, r2
    1f3c:	0719      	lsls	r1, r3, #28
    1f3e:	d42d      	bmi.n	1f9c <__swsetup_r+0x88>
    1f40:	06d9      	lsls	r1, r3, #27
    1f42:	d411      	bmi.n	1f68 <__swsetup_r+0x54>
    1f44:	2309      	movs	r3, #9
    1f46:	2001      	movs	r0, #1
    1f48:	6033      	str	r3, [r6, #0]
    1f4a:	3337      	adds	r3, #55	; 0x37
    1f4c:	4313      	orrs	r3, r2
    1f4e:	81a3      	strh	r3, [r4, #12]
    1f50:	4240      	negs	r0, r0
    1f52:	bd70      	pop	{r4, r5, r6, pc}
    1f54:	4b28      	ldr	r3, [pc, #160]	; (1ff8 <__swsetup_r+0xe4>)
    1f56:	429c      	cmp	r4, r3
    1f58:	d101      	bne.n	1f5e <__swsetup_r+0x4a>
    1f5a:	68ac      	ldr	r4, [r5, #8]
    1f5c:	e7eb      	b.n	1f36 <__swsetup_r+0x22>
    1f5e:	4b27      	ldr	r3, [pc, #156]	; (1ffc <__swsetup_r+0xe8>)
    1f60:	429c      	cmp	r4, r3
    1f62:	d1e8      	bne.n	1f36 <__swsetup_r+0x22>
    1f64:	68ec      	ldr	r4, [r5, #12]
    1f66:	e7e6      	b.n	1f36 <__swsetup_r+0x22>
    1f68:	075b      	lsls	r3, r3, #29
    1f6a:	d513      	bpl.n	1f94 <__swsetup_r+0x80>
    1f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1f6e:	2900      	cmp	r1, #0
    1f70:	d008      	beq.n	1f84 <__swsetup_r+0x70>
    1f72:	0023      	movs	r3, r4
    1f74:	3344      	adds	r3, #68	; 0x44
    1f76:	4299      	cmp	r1, r3
    1f78:	d002      	beq.n	1f80 <__swsetup_r+0x6c>
    1f7a:	0030      	movs	r0, r6
    1f7c:	f000 fa44 	bl	2408 <_free_r>
    1f80:	2300      	movs	r3, #0
    1f82:	6363      	str	r3, [r4, #52]	; 0x34
    1f84:	2224      	movs	r2, #36	; 0x24
    1f86:	89a3      	ldrh	r3, [r4, #12]
    1f88:	4393      	bics	r3, r2
    1f8a:	81a3      	strh	r3, [r4, #12]
    1f8c:	2300      	movs	r3, #0
    1f8e:	6063      	str	r3, [r4, #4]
    1f90:	6923      	ldr	r3, [r4, #16]
    1f92:	6023      	str	r3, [r4, #0]
    1f94:	2308      	movs	r3, #8
    1f96:	89a2      	ldrh	r2, [r4, #12]
    1f98:	4313      	orrs	r3, r2
    1f9a:	81a3      	strh	r3, [r4, #12]
    1f9c:	6923      	ldr	r3, [r4, #16]
    1f9e:	2b00      	cmp	r3, #0
    1fa0:	d10b      	bne.n	1fba <__swsetup_r+0xa6>
    1fa2:	21a0      	movs	r1, #160	; 0xa0
    1fa4:	2280      	movs	r2, #128	; 0x80
    1fa6:	89a3      	ldrh	r3, [r4, #12]
    1fa8:	0089      	lsls	r1, r1, #2
    1faa:	0092      	lsls	r2, r2, #2
    1fac:	400b      	ands	r3, r1
    1fae:	4293      	cmp	r3, r2
    1fb0:	d003      	beq.n	1fba <__swsetup_r+0xa6>
    1fb2:	0021      	movs	r1, r4
    1fb4:	0030      	movs	r0, r6
    1fb6:	f000 f9d9 	bl	236c <__smakebuf_r>
    1fba:	2301      	movs	r3, #1
    1fbc:	89a2      	ldrh	r2, [r4, #12]
    1fbe:	4013      	ands	r3, r2
    1fc0:	d011      	beq.n	1fe6 <__swsetup_r+0xd2>
    1fc2:	2300      	movs	r3, #0
    1fc4:	60a3      	str	r3, [r4, #8]
    1fc6:	6963      	ldr	r3, [r4, #20]
    1fc8:	425b      	negs	r3, r3
    1fca:	61a3      	str	r3, [r4, #24]
    1fcc:	2000      	movs	r0, #0
    1fce:	6923      	ldr	r3, [r4, #16]
    1fd0:	4283      	cmp	r3, r0
    1fd2:	d1be      	bne.n	1f52 <__swsetup_r+0x3e>
    1fd4:	230c      	movs	r3, #12
    1fd6:	5ee2      	ldrsh	r2, [r4, r3]
    1fd8:	0613      	lsls	r3, r2, #24
    1fda:	d5ba      	bpl.n	1f52 <__swsetup_r+0x3e>
    1fdc:	2340      	movs	r3, #64	; 0x40
    1fde:	4313      	orrs	r3, r2
    1fe0:	81a3      	strh	r3, [r4, #12]
    1fe2:	3801      	subs	r0, #1
    1fe4:	e7b5      	b.n	1f52 <__swsetup_r+0x3e>
    1fe6:	0792      	lsls	r2, r2, #30
    1fe8:	d400      	bmi.n	1fec <__swsetup_r+0xd8>
    1fea:	6963      	ldr	r3, [r4, #20]
    1fec:	60a3      	str	r3, [r4, #8]
    1fee:	e7ed      	b.n	1fcc <__swsetup_r+0xb8>
    1ff0:	20000000 	.word	0x20000000
    1ff4:	00002f04 	.word	0x00002f04
    1ff8:	00002f24 	.word	0x00002f24
    1ffc:	00002ee4 	.word	0x00002ee4

00002000 <__sflush_r>:
    2000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2002:	898a      	ldrh	r2, [r1, #12]
    2004:	0005      	movs	r5, r0
    2006:	000c      	movs	r4, r1
    2008:	0713      	lsls	r3, r2, #28
    200a:	d460      	bmi.n	20ce <STACK_SIZE+0xce>
    200c:	684b      	ldr	r3, [r1, #4]
    200e:	2b00      	cmp	r3, #0
    2010:	dc04      	bgt.n	201c <STACK_SIZE+0x1c>
    2012:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2014:	2b00      	cmp	r3, #0
    2016:	dc01      	bgt.n	201c <STACK_SIZE+0x1c>
    2018:	2000      	movs	r0, #0
    201a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    201c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    201e:	2f00      	cmp	r7, #0
    2020:	d0fa      	beq.n	2018 <STACK_SIZE+0x18>
    2022:	2300      	movs	r3, #0
    2024:	682e      	ldr	r6, [r5, #0]
    2026:	602b      	str	r3, [r5, #0]
    2028:	2380      	movs	r3, #128	; 0x80
    202a:	015b      	lsls	r3, r3, #5
    202c:	401a      	ands	r2, r3
    202e:	d034      	beq.n	209a <STACK_SIZE+0x9a>
    2030:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2032:	89a3      	ldrh	r3, [r4, #12]
    2034:	075b      	lsls	r3, r3, #29
    2036:	d506      	bpl.n	2046 <STACK_SIZE+0x46>
    2038:	6863      	ldr	r3, [r4, #4]
    203a:	1ac0      	subs	r0, r0, r3
    203c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    203e:	2b00      	cmp	r3, #0
    2040:	d001      	beq.n	2046 <STACK_SIZE+0x46>
    2042:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2044:	1ac0      	subs	r0, r0, r3
    2046:	0002      	movs	r2, r0
    2048:	6a21      	ldr	r1, [r4, #32]
    204a:	2300      	movs	r3, #0
    204c:	0028      	movs	r0, r5
    204e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2050:	47b8      	blx	r7
    2052:	89a1      	ldrh	r1, [r4, #12]
    2054:	1c43      	adds	r3, r0, #1
    2056:	d106      	bne.n	2066 <STACK_SIZE+0x66>
    2058:	682b      	ldr	r3, [r5, #0]
    205a:	2b1d      	cmp	r3, #29
    205c:	d831      	bhi.n	20c2 <STACK_SIZE+0xc2>
    205e:	4a2c      	ldr	r2, [pc, #176]	; (2110 <STACK_SIZE+0x110>)
    2060:	40da      	lsrs	r2, r3
    2062:	07d3      	lsls	r3, r2, #31
    2064:	d52d      	bpl.n	20c2 <STACK_SIZE+0xc2>
    2066:	2300      	movs	r3, #0
    2068:	6063      	str	r3, [r4, #4]
    206a:	6923      	ldr	r3, [r4, #16]
    206c:	6023      	str	r3, [r4, #0]
    206e:	04cb      	lsls	r3, r1, #19
    2070:	d505      	bpl.n	207e <STACK_SIZE+0x7e>
    2072:	1c43      	adds	r3, r0, #1
    2074:	d102      	bne.n	207c <STACK_SIZE+0x7c>
    2076:	682b      	ldr	r3, [r5, #0]
    2078:	2b00      	cmp	r3, #0
    207a:	d100      	bne.n	207e <STACK_SIZE+0x7e>
    207c:	6560      	str	r0, [r4, #84]	; 0x54
    207e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2080:	602e      	str	r6, [r5, #0]
    2082:	2900      	cmp	r1, #0
    2084:	d0c8      	beq.n	2018 <STACK_SIZE+0x18>
    2086:	0023      	movs	r3, r4
    2088:	3344      	adds	r3, #68	; 0x44
    208a:	4299      	cmp	r1, r3
    208c:	d002      	beq.n	2094 <STACK_SIZE+0x94>
    208e:	0028      	movs	r0, r5
    2090:	f000 f9ba 	bl	2408 <_free_r>
    2094:	2000      	movs	r0, #0
    2096:	6360      	str	r0, [r4, #52]	; 0x34
    2098:	e7bf      	b.n	201a <STACK_SIZE+0x1a>
    209a:	2301      	movs	r3, #1
    209c:	6a21      	ldr	r1, [r4, #32]
    209e:	0028      	movs	r0, r5
    20a0:	47b8      	blx	r7
    20a2:	1c43      	adds	r3, r0, #1
    20a4:	d1c5      	bne.n	2032 <STACK_SIZE+0x32>
    20a6:	682b      	ldr	r3, [r5, #0]
    20a8:	2b00      	cmp	r3, #0
    20aa:	d0c2      	beq.n	2032 <STACK_SIZE+0x32>
    20ac:	2b1d      	cmp	r3, #29
    20ae:	d001      	beq.n	20b4 <STACK_SIZE+0xb4>
    20b0:	2b16      	cmp	r3, #22
    20b2:	d101      	bne.n	20b8 <STACK_SIZE+0xb8>
    20b4:	602e      	str	r6, [r5, #0]
    20b6:	e7af      	b.n	2018 <STACK_SIZE+0x18>
    20b8:	2340      	movs	r3, #64	; 0x40
    20ba:	89a2      	ldrh	r2, [r4, #12]
    20bc:	4313      	orrs	r3, r2
    20be:	81a3      	strh	r3, [r4, #12]
    20c0:	e7ab      	b.n	201a <STACK_SIZE+0x1a>
    20c2:	2340      	movs	r3, #64	; 0x40
    20c4:	430b      	orrs	r3, r1
    20c6:	2001      	movs	r0, #1
    20c8:	81a3      	strh	r3, [r4, #12]
    20ca:	4240      	negs	r0, r0
    20cc:	e7a5      	b.n	201a <STACK_SIZE+0x1a>
    20ce:	690f      	ldr	r7, [r1, #16]
    20d0:	2f00      	cmp	r7, #0
    20d2:	d0a1      	beq.n	2018 <STACK_SIZE+0x18>
    20d4:	680b      	ldr	r3, [r1, #0]
    20d6:	600f      	str	r7, [r1, #0]
    20d8:	1bdb      	subs	r3, r3, r7
    20da:	9301      	str	r3, [sp, #4]
    20dc:	2300      	movs	r3, #0
    20de:	0792      	lsls	r2, r2, #30
    20e0:	d100      	bne.n	20e4 <STACK_SIZE+0xe4>
    20e2:	694b      	ldr	r3, [r1, #20]
    20e4:	60a3      	str	r3, [r4, #8]
    20e6:	9b01      	ldr	r3, [sp, #4]
    20e8:	2b00      	cmp	r3, #0
    20ea:	dc00      	bgt.n	20ee <STACK_SIZE+0xee>
    20ec:	e794      	b.n	2018 <STACK_SIZE+0x18>
    20ee:	9b01      	ldr	r3, [sp, #4]
    20f0:	003a      	movs	r2, r7
    20f2:	6a21      	ldr	r1, [r4, #32]
    20f4:	0028      	movs	r0, r5
    20f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    20f8:	47b0      	blx	r6
    20fa:	2800      	cmp	r0, #0
    20fc:	dc03      	bgt.n	2106 <STACK_SIZE+0x106>
    20fe:	2340      	movs	r3, #64	; 0x40
    2100:	89a2      	ldrh	r2, [r4, #12]
    2102:	4313      	orrs	r3, r2
    2104:	e7df      	b.n	20c6 <STACK_SIZE+0xc6>
    2106:	9b01      	ldr	r3, [sp, #4]
    2108:	183f      	adds	r7, r7, r0
    210a:	1a1b      	subs	r3, r3, r0
    210c:	9301      	str	r3, [sp, #4]
    210e:	e7ea      	b.n	20e6 <STACK_SIZE+0xe6>
    2110:	20400001 	.word	0x20400001

00002114 <_fflush_r>:
    2114:	690b      	ldr	r3, [r1, #16]
    2116:	b570      	push	{r4, r5, r6, lr}
    2118:	0005      	movs	r5, r0
    211a:	000c      	movs	r4, r1
    211c:	2b00      	cmp	r3, #0
    211e:	d101      	bne.n	2124 <_fflush_r+0x10>
    2120:	2000      	movs	r0, #0
    2122:	bd70      	pop	{r4, r5, r6, pc}
    2124:	2800      	cmp	r0, #0
    2126:	d004      	beq.n	2132 <_fflush_r+0x1e>
    2128:	6983      	ldr	r3, [r0, #24]
    212a:	2b00      	cmp	r3, #0
    212c:	d101      	bne.n	2132 <_fflush_r+0x1e>
    212e:	f000 f85f 	bl	21f0 <__sinit>
    2132:	4b0b      	ldr	r3, [pc, #44]	; (2160 <_fflush_r+0x4c>)
    2134:	429c      	cmp	r4, r3
    2136:	d109      	bne.n	214c <_fflush_r+0x38>
    2138:	686c      	ldr	r4, [r5, #4]
    213a:	220c      	movs	r2, #12
    213c:	5ea3      	ldrsh	r3, [r4, r2]
    213e:	2b00      	cmp	r3, #0
    2140:	d0ee      	beq.n	2120 <_fflush_r+0xc>
    2142:	0021      	movs	r1, r4
    2144:	0028      	movs	r0, r5
    2146:	f7ff ff5b 	bl	2000 <__sflush_r>
    214a:	e7ea      	b.n	2122 <_fflush_r+0xe>
    214c:	4b05      	ldr	r3, [pc, #20]	; (2164 <_fflush_r+0x50>)
    214e:	429c      	cmp	r4, r3
    2150:	d101      	bne.n	2156 <_fflush_r+0x42>
    2152:	68ac      	ldr	r4, [r5, #8]
    2154:	e7f1      	b.n	213a <_fflush_r+0x26>
    2156:	4b04      	ldr	r3, [pc, #16]	; (2168 <_fflush_r+0x54>)
    2158:	429c      	cmp	r4, r3
    215a:	d1ee      	bne.n	213a <_fflush_r+0x26>
    215c:	68ec      	ldr	r4, [r5, #12]
    215e:	e7ec      	b.n	213a <_fflush_r+0x26>
    2160:	00002f04 	.word	0x00002f04
    2164:	00002f24 	.word	0x00002f24
    2168:	00002ee4 	.word	0x00002ee4

0000216c <_cleanup_r>:
    216c:	b510      	push	{r4, lr}
    216e:	4902      	ldr	r1, [pc, #8]	; (2178 <_cleanup_r+0xc>)
    2170:	f000 f8b2 	bl	22d8 <_fwalk_reent>
    2174:	bd10      	pop	{r4, pc}
    2176:	46c0      	nop			; (mov r8, r8)
    2178:	00002115 	.word	0x00002115

0000217c <std.isra.0>:
    217c:	2300      	movs	r3, #0
    217e:	b510      	push	{r4, lr}
    2180:	0004      	movs	r4, r0
    2182:	6003      	str	r3, [r0, #0]
    2184:	6043      	str	r3, [r0, #4]
    2186:	6083      	str	r3, [r0, #8]
    2188:	8181      	strh	r1, [r0, #12]
    218a:	6643      	str	r3, [r0, #100]	; 0x64
    218c:	81c2      	strh	r2, [r0, #14]
    218e:	6103      	str	r3, [r0, #16]
    2190:	6143      	str	r3, [r0, #20]
    2192:	6183      	str	r3, [r0, #24]
    2194:	0019      	movs	r1, r3
    2196:	2208      	movs	r2, #8
    2198:	305c      	adds	r0, #92	; 0x5c
    219a:	f7ff fd23 	bl	1be4 <memset>
    219e:	4b05      	ldr	r3, [pc, #20]	; (21b4 <std.isra.0+0x38>)
    21a0:	6224      	str	r4, [r4, #32]
    21a2:	6263      	str	r3, [r4, #36]	; 0x24
    21a4:	4b04      	ldr	r3, [pc, #16]	; (21b8 <std.isra.0+0x3c>)
    21a6:	62a3      	str	r3, [r4, #40]	; 0x28
    21a8:	4b04      	ldr	r3, [pc, #16]	; (21bc <std.isra.0+0x40>)
    21aa:	62e3      	str	r3, [r4, #44]	; 0x2c
    21ac:	4b04      	ldr	r3, [pc, #16]	; (21c0 <std.isra.0+0x44>)
    21ae:	6323      	str	r3, [r4, #48]	; 0x30
    21b0:	bd10      	pop	{r4, pc}
    21b2:	46c0      	nop			; (mov r8, r8)
    21b4:	00002b15 	.word	0x00002b15
    21b8:	00002b3d 	.word	0x00002b3d
    21bc:	00002b75 	.word	0x00002b75
    21c0:	00002ba1 	.word	0x00002ba1

000021c4 <__sfmoreglue>:
    21c4:	b570      	push	{r4, r5, r6, lr}
    21c6:	2568      	movs	r5, #104	; 0x68
    21c8:	1e4a      	subs	r2, r1, #1
    21ca:	4355      	muls	r5, r2
    21cc:	000e      	movs	r6, r1
    21ce:	0029      	movs	r1, r5
    21d0:	3174      	adds	r1, #116	; 0x74
    21d2:	f000 f963 	bl	249c <_malloc_r>
    21d6:	1e04      	subs	r4, r0, #0
    21d8:	d008      	beq.n	21ec <__sfmoreglue+0x28>
    21da:	2100      	movs	r1, #0
    21dc:	002a      	movs	r2, r5
    21de:	6001      	str	r1, [r0, #0]
    21e0:	6046      	str	r6, [r0, #4]
    21e2:	300c      	adds	r0, #12
    21e4:	60a0      	str	r0, [r4, #8]
    21e6:	3268      	adds	r2, #104	; 0x68
    21e8:	f7ff fcfc 	bl	1be4 <memset>
    21ec:	0020      	movs	r0, r4
    21ee:	bd70      	pop	{r4, r5, r6, pc}

000021f0 <__sinit>:
    21f0:	6983      	ldr	r3, [r0, #24]
    21f2:	b513      	push	{r0, r1, r4, lr}
    21f4:	0004      	movs	r4, r0
    21f6:	2b00      	cmp	r3, #0
    21f8:	d128      	bne.n	224c <__sinit+0x5c>
    21fa:	6483      	str	r3, [r0, #72]	; 0x48
    21fc:	64c3      	str	r3, [r0, #76]	; 0x4c
    21fe:	6503      	str	r3, [r0, #80]	; 0x50
    2200:	4b13      	ldr	r3, [pc, #76]	; (2250 <__sinit+0x60>)
    2202:	4a14      	ldr	r2, [pc, #80]	; (2254 <__sinit+0x64>)
    2204:	681b      	ldr	r3, [r3, #0]
    2206:	6282      	str	r2, [r0, #40]	; 0x28
    2208:	9301      	str	r3, [sp, #4]
    220a:	4298      	cmp	r0, r3
    220c:	d101      	bne.n	2212 <__sinit+0x22>
    220e:	2301      	movs	r3, #1
    2210:	6183      	str	r3, [r0, #24]
    2212:	0020      	movs	r0, r4
    2214:	f000 f820 	bl	2258 <__sfp>
    2218:	6060      	str	r0, [r4, #4]
    221a:	0020      	movs	r0, r4
    221c:	f000 f81c 	bl	2258 <__sfp>
    2220:	60a0      	str	r0, [r4, #8]
    2222:	0020      	movs	r0, r4
    2224:	f000 f818 	bl	2258 <__sfp>
    2228:	2200      	movs	r2, #0
    222a:	60e0      	str	r0, [r4, #12]
    222c:	2104      	movs	r1, #4
    222e:	6860      	ldr	r0, [r4, #4]
    2230:	f7ff ffa4 	bl	217c <std.isra.0>
    2234:	2201      	movs	r2, #1
    2236:	2109      	movs	r1, #9
    2238:	68a0      	ldr	r0, [r4, #8]
    223a:	f7ff ff9f 	bl	217c <std.isra.0>
    223e:	2202      	movs	r2, #2
    2240:	2112      	movs	r1, #18
    2242:	68e0      	ldr	r0, [r4, #12]
    2244:	f7ff ff9a 	bl	217c <std.isra.0>
    2248:	2301      	movs	r3, #1
    224a:	61a3      	str	r3, [r4, #24]
    224c:	bd13      	pop	{r0, r1, r4, pc}
    224e:	46c0      	nop			; (mov r8, r8)
    2250:	00002ee0 	.word	0x00002ee0
    2254:	0000216d 	.word	0x0000216d

00002258 <__sfp>:
    2258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    225a:	4b1e      	ldr	r3, [pc, #120]	; (22d4 <__sfp+0x7c>)
    225c:	0007      	movs	r7, r0
    225e:	681e      	ldr	r6, [r3, #0]
    2260:	69b3      	ldr	r3, [r6, #24]
    2262:	2b00      	cmp	r3, #0
    2264:	d102      	bne.n	226c <__sfp+0x14>
    2266:	0030      	movs	r0, r6
    2268:	f7ff ffc2 	bl	21f0 <__sinit>
    226c:	3648      	adds	r6, #72	; 0x48
    226e:	68b4      	ldr	r4, [r6, #8]
    2270:	6873      	ldr	r3, [r6, #4]
    2272:	3b01      	subs	r3, #1
    2274:	d504      	bpl.n	2280 <__sfp+0x28>
    2276:	6833      	ldr	r3, [r6, #0]
    2278:	2b00      	cmp	r3, #0
    227a:	d007      	beq.n	228c <__sfp+0x34>
    227c:	6836      	ldr	r6, [r6, #0]
    227e:	e7f6      	b.n	226e <__sfp+0x16>
    2280:	220c      	movs	r2, #12
    2282:	5ea5      	ldrsh	r5, [r4, r2]
    2284:	2d00      	cmp	r5, #0
    2286:	d00d      	beq.n	22a4 <__sfp+0x4c>
    2288:	3468      	adds	r4, #104	; 0x68
    228a:	e7f2      	b.n	2272 <__sfp+0x1a>
    228c:	2104      	movs	r1, #4
    228e:	0038      	movs	r0, r7
    2290:	f7ff ff98 	bl	21c4 <__sfmoreglue>
    2294:	6030      	str	r0, [r6, #0]
    2296:	2800      	cmp	r0, #0
    2298:	d1f0      	bne.n	227c <__sfp+0x24>
    229a:	230c      	movs	r3, #12
    229c:	0004      	movs	r4, r0
    229e:	603b      	str	r3, [r7, #0]
    22a0:	0020      	movs	r0, r4
    22a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22a4:	2301      	movs	r3, #1
    22a6:	0020      	movs	r0, r4
    22a8:	425b      	negs	r3, r3
    22aa:	81e3      	strh	r3, [r4, #14]
    22ac:	3302      	adds	r3, #2
    22ae:	81a3      	strh	r3, [r4, #12]
    22b0:	6665      	str	r5, [r4, #100]	; 0x64
    22b2:	6025      	str	r5, [r4, #0]
    22b4:	60a5      	str	r5, [r4, #8]
    22b6:	6065      	str	r5, [r4, #4]
    22b8:	6125      	str	r5, [r4, #16]
    22ba:	6165      	str	r5, [r4, #20]
    22bc:	61a5      	str	r5, [r4, #24]
    22be:	2208      	movs	r2, #8
    22c0:	0029      	movs	r1, r5
    22c2:	305c      	adds	r0, #92	; 0x5c
    22c4:	f7ff fc8e 	bl	1be4 <memset>
    22c8:	6365      	str	r5, [r4, #52]	; 0x34
    22ca:	63a5      	str	r5, [r4, #56]	; 0x38
    22cc:	64a5      	str	r5, [r4, #72]	; 0x48
    22ce:	64e5      	str	r5, [r4, #76]	; 0x4c
    22d0:	e7e6      	b.n	22a0 <__sfp+0x48>
    22d2:	46c0      	nop			; (mov r8, r8)
    22d4:	00002ee0 	.word	0x00002ee0

000022d8 <_fwalk_reent>:
    22d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    22da:	0004      	movs	r4, r0
    22dc:	0007      	movs	r7, r0
    22de:	2600      	movs	r6, #0
    22e0:	9101      	str	r1, [sp, #4]
    22e2:	3448      	adds	r4, #72	; 0x48
    22e4:	2c00      	cmp	r4, #0
    22e6:	d101      	bne.n	22ec <_fwalk_reent+0x14>
    22e8:	0030      	movs	r0, r6
    22ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    22ec:	6863      	ldr	r3, [r4, #4]
    22ee:	68a5      	ldr	r5, [r4, #8]
    22f0:	9300      	str	r3, [sp, #0]
    22f2:	9b00      	ldr	r3, [sp, #0]
    22f4:	3b01      	subs	r3, #1
    22f6:	9300      	str	r3, [sp, #0]
    22f8:	d501      	bpl.n	22fe <_fwalk_reent+0x26>
    22fa:	6824      	ldr	r4, [r4, #0]
    22fc:	e7f2      	b.n	22e4 <_fwalk_reent+0xc>
    22fe:	89ab      	ldrh	r3, [r5, #12]
    2300:	2b01      	cmp	r3, #1
    2302:	d908      	bls.n	2316 <_fwalk_reent+0x3e>
    2304:	220e      	movs	r2, #14
    2306:	5eab      	ldrsh	r3, [r5, r2]
    2308:	3301      	adds	r3, #1
    230a:	d004      	beq.n	2316 <_fwalk_reent+0x3e>
    230c:	0029      	movs	r1, r5
    230e:	0038      	movs	r0, r7
    2310:	9b01      	ldr	r3, [sp, #4]
    2312:	4798      	blx	r3
    2314:	4306      	orrs	r6, r0
    2316:	3568      	adds	r5, #104	; 0x68
    2318:	e7eb      	b.n	22f2 <_fwalk_reent+0x1a>
	...

0000231c <__swhatbuf_r>:
    231c:	b570      	push	{r4, r5, r6, lr}
    231e:	000e      	movs	r6, r1
    2320:	001d      	movs	r5, r3
    2322:	230e      	movs	r3, #14
    2324:	5ec9      	ldrsh	r1, [r1, r3]
    2326:	b090      	sub	sp, #64	; 0x40
    2328:	0014      	movs	r4, r2
    232a:	2900      	cmp	r1, #0
    232c:	da07      	bge.n	233e <__swhatbuf_r+0x22>
    232e:	2300      	movs	r3, #0
    2330:	602b      	str	r3, [r5, #0]
    2332:	89b3      	ldrh	r3, [r6, #12]
    2334:	061b      	lsls	r3, r3, #24
    2336:	d411      	bmi.n	235c <__swhatbuf_r+0x40>
    2338:	2380      	movs	r3, #128	; 0x80
    233a:	00db      	lsls	r3, r3, #3
    233c:	e00f      	b.n	235e <__swhatbuf_r+0x42>
    233e:	aa01      	add	r2, sp, #4
    2340:	f000 fc5a 	bl	2bf8 <_fstat_r>
    2344:	2800      	cmp	r0, #0
    2346:	dbf2      	blt.n	232e <__swhatbuf_r+0x12>
    2348:	22f0      	movs	r2, #240	; 0xf0
    234a:	9b02      	ldr	r3, [sp, #8]
    234c:	0212      	lsls	r2, r2, #8
    234e:	4013      	ands	r3, r2
    2350:	4a05      	ldr	r2, [pc, #20]	; (2368 <__swhatbuf_r+0x4c>)
    2352:	189b      	adds	r3, r3, r2
    2354:	425a      	negs	r2, r3
    2356:	4153      	adcs	r3, r2
    2358:	602b      	str	r3, [r5, #0]
    235a:	e7ed      	b.n	2338 <__swhatbuf_r+0x1c>
    235c:	2340      	movs	r3, #64	; 0x40
    235e:	2000      	movs	r0, #0
    2360:	6023      	str	r3, [r4, #0]
    2362:	b010      	add	sp, #64	; 0x40
    2364:	bd70      	pop	{r4, r5, r6, pc}
    2366:	46c0      	nop			; (mov r8, r8)
    2368:	ffffe000 	.word	0xffffe000

0000236c <__smakebuf_r>:
    236c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    236e:	2602      	movs	r6, #2
    2370:	898b      	ldrh	r3, [r1, #12]
    2372:	0005      	movs	r5, r0
    2374:	000c      	movs	r4, r1
    2376:	4233      	tst	r3, r6
    2378:	d006      	beq.n	2388 <__smakebuf_r+0x1c>
    237a:	0023      	movs	r3, r4
    237c:	3347      	adds	r3, #71	; 0x47
    237e:	6023      	str	r3, [r4, #0]
    2380:	6123      	str	r3, [r4, #16]
    2382:	2301      	movs	r3, #1
    2384:	6163      	str	r3, [r4, #20]
    2386:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2388:	ab01      	add	r3, sp, #4
    238a:	466a      	mov	r2, sp
    238c:	f7ff ffc6 	bl	231c <__swhatbuf_r>
    2390:	9900      	ldr	r1, [sp, #0]
    2392:	0007      	movs	r7, r0
    2394:	0028      	movs	r0, r5
    2396:	f000 f881 	bl	249c <_malloc_r>
    239a:	2800      	cmp	r0, #0
    239c:	d108      	bne.n	23b0 <__smakebuf_r+0x44>
    239e:	220c      	movs	r2, #12
    23a0:	5ea3      	ldrsh	r3, [r4, r2]
    23a2:	059a      	lsls	r2, r3, #22
    23a4:	d4ef      	bmi.n	2386 <__smakebuf_r+0x1a>
    23a6:	2203      	movs	r2, #3
    23a8:	4393      	bics	r3, r2
    23aa:	431e      	orrs	r6, r3
    23ac:	81a6      	strh	r6, [r4, #12]
    23ae:	e7e4      	b.n	237a <__smakebuf_r+0xe>
    23b0:	4b0f      	ldr	r3, [pc, #60]	; (23f0 <__smakebuf_r+0x84>)
    23b2:	62ab      	str	r3, [r5, #40]	; 0x28
    23b4:	2380      	movs	r3, #128	; 0x80
    23b6:	89a2      	ldrh	r2, [r4, #12]
    23b8:	6020      	str	r0, [r4, #0]
    23ba:	4313      	orrs	r3, r2
    23bc:	81a3      	strh	r3, [r4, #12]
    23be:	9b00      	ldr	r3, [sp, #0]
    23c0:	6120      	str	r0, [r4, #16]
    23c2:	6163      	str	r3, [r4, #20]
    23c4:	9b01      	ldr	r3, [sp, #4]
    23c6:	2b00      	cmp	r3, #0
    23c8:	d00d      	beq.n	23e6 <__smakebuf_r+0x7a>
    23ca:	230e      	movs	r3, #14
    23cc:	5ee1      	ldrsh	r1, [r4, r3]
    23ce:	0028      	movs	r0, r5
    23d0:	f000 fc24 	bl	2c1c <_isatty_r>
    23d4:	2800      	cmp	r0, #0
    23d6:	d006      	beq.n	23e6 <__smakebuf_r+0x7a>
    23d8:	2203      	movs	r2, #3
    23da:	89a3      	ldrh	r3, [r4, #12]
    23dc:	4393      	bics	r3, r2
    23de:	001a      	movs	r2, r3
    23e0:	2301      	movs	r3, #1
    23e2:	4313      	orrs	r3, r2
    23e4:	81a3      	strh	r3, [r4, #12]
    23e6:	89a0      	ldrh	r0, [r4, #12]
    23e8:	4338      	orrs	r0, r7
    23ea:	81a0      	strh	r0, [r4, #12]
    23ec:	e7cb      	b.n	2386 <__smakebuf_r+0x1a>
    23ee:	46c0      	nop			; (mov r8, r8)
    23f0:	0000216d 	.word	0x0000216d

000023f4 <malloc>:
    23f4:	b510      	push	{r4, lr}
    23f6:	4b03      	ldr	r3, [pc, #12]	; (2404 <malloc+0x10>)
    23f8:	0001      	movs	r1, r0
    23fa:	6818      	ldr	r0, [r3, #0]
    23fc:	f000 f84e 	bl	249c <_malloc_r>
    2400:	bd10      	pop	{r4, pc}
    2402:	46c0      	nop			; (mov r8, r8)
    2404:	20000000 	.word	0x20000000

00002408 <_free_r>:
    2408:	b570      	push	{r4, r5, r6, lr}
    240a:	0005      	movs	r5, r0
    240c:	2900      	cmp	r1, #0
    240e:	d010      	beq.n	2432 <_free_r+0x2a>
    2410:	1f0c      	subs	r4, r1, #4
    2412:	6823      	ldr	r3, [r4, #0]
    2414:	2b00      	cmp	r3, #0
    2416:	da00      	bge.n	241a <_free_r+0x12>
    2418:	18e4      	adds	r4, r4, r3
    241a:	0028      	movs	r0, r5
    241c:	f000 fc2f 	bl	2c7e <__malloc_lock>
    2420:	4a1d      	ldr	r2, [pc, #116]	; (2498 <_free_r+0x90>)
    2422:	6813      	ldr	r3, [r2, #0]
    2424:	2b00      	cmp	r3, #0
    2426:	d105      	bne.n	2434 <_free_r+0x2c>
    2428:	6063      	str	r3, [r4, #4]
    242a:	6014      	str	r4, [r2, #0]
    242c:	0028      	movs	r0, r5
    242e:	f000 fc27 	bl	2c80 <__malloc_unlock>
    2432:	bd70      	pop	{r4, r5, r6, pc}
    2434:	42a3      	cmp	r3, r4
    2436:	d909      	bls.n	244c <_free_r+0x44>
    2438:	6821      	ldr	r1, [r4, #0]
    243a:	1860      	adds	r0, r4, r1
    243c:	4283      	cmp	r3, r0
    243e:	d1f3      	bne.n	2428 <_free_r+0x20>
    2440:	6818      	ldr	r0, [r3, #0]
    2442:	685b      	ldr	r3, [r3, #4]
    2444:	1841      	adds	r1, r0, r1
    2446:	6021      	str	r1, [r4, #0]
    2448:	e7ee      	b.n	2428 <_free_r+0x20>
    244a:	0013      	movs	r3, r2
    244c:	685a      	ldr	r2, [r3, #4]
    244e:	2a00      	cmp	r2, #0
    2450:	d001      	beq.n	2456 <_free_r+0x4e>
    2452:	42a2      	cmp	r2, r4
    2454:	d9f9      	bls.n	244a <_free_r+0x42>
    2456:	6819      	ldr	r1, [r3, #0]
    2458:	1858      	adds	r0, r3, r1
    245a:	42a0      	cmp	r0, r4
    245c:	d10b      	bne.n	2476 <_free_r+0x6e>
    245e:	6820      	ldr	r0, [r4, #0]
    2460:	1809      	adds	r1, r1, r0
    2462:	1858      	adds	r0, r3, r1
    2464:	6019      	str	r1, [r3, #0]
    2466:	4282      	cmp	r2, r0
    2468:	d1e0      	bne.n	242c <_free_r+0x24>
    246a:	6810      	ldr	r0, [r2, #0]
    246c:	6852      	ldr	r2, [r2, #4]
    246e:	1841      	adds	r1, r0, r1
    2470:	6019      	str	r1, [r3, #0]
    2472:	605a      	str	r2, [r3, #4]
    2474:	e7da      	b.n	242c <_free_r+0x24>
    2476:	42a0      	cmp	r0, r4
    2478:	d902      	bls.n	2480 <_free_r+0x78>
    247a:	230c      	movs	r3, #12
    247c:	602b      	str	r3, [r5, #0]
    247e:	e7d5      	b.n	242c <_free_r+0x24>
    2480:	6821      	ldr	r1, [r4, #0]
    2482:	1860      	adds	r0, r4, r1
    2484:	4282      	cmp	r2, r0
    2486:	d103      	bne.n	2490 <_free_r+0x88>
    2488:	6810      	ldr	r0, [r2, #0]
    248a:	6852      	ldr	r2, [r2, #4]
    248c:	1841      	adds	r1, r0, r1
    248e:	6021      	str	r1, [r4, #0]
    2490:	6062      	str	r2, [r4, #4]
    2492:	605c      	str	r4, [r3, #4]
    2494:	e7ca      	b.n	242c <_free_r+0x24>
    2496:	46c0      	nop			; (mov r8, r8)
    2498:	200000a8 	.word	0x200000a8

0000249c <_malloc_r>:
    249c:	2303      	movs	r3, #3
    249e:	b570      	push	{r4, r5, r6, lr}
    24a0:	1ccd      	adds	r5, r1, #3
    24a2:	439d      	bics	r5, r3
    24a4:	3508      	adds	r5, #8
    24a6:	0006      	movs	r6, r0
    24a8:	2d0c      	cmp	r5, #12
    24aa:	d21e      	bcs.n	24ea <_malloc_r+0x4e>
    24ac:	250c      	movs	r5, #12
    24ae:	42a9      	cmp	r1, r5
    24b0:	d81d      	bhi.n	24ee <_malloc_r+0x52>
    24b2:	0030      	movs	r0, r6
    24b4:	f000 fbe3 	bl	2c7e <__malloc_lock>
    24b8:	4a25      	ldr	r2, [pc, #148]	; (2550 <_malloc_r+0xb4>)
    24ba:	6814      	ldr	r4, [r2, #0]
    24bc:	0021      	movs	r1, r4
    24be:	2900      	cmp	r1, #0
    24c0:	d119      	bne.n	24f6 <_malloc_r+0x5a>
    24c2:	4c24      	ldr	r4, [pc, #144]	; (2554 <_malloc_r+0xb8>)
    24c4:	6823      	ldr	r3, [r4, #0]
    24c6:	2b00      	cmp	r3, #0
    24c8:	d103      	bne.n	24d2 <_malloc_r+0x36>
    24ca:	0030      	movs	r0, r6
    24cc:	f000 fb10 	bl	2af0 <_sbrk_r>
    24d0:	6020      	str	r0, [r4, #0]
    24d2:	0029      	movs	r1, r5
    24d4:	0030      	movs	r0, r6
    24d6:	f000 fb0b 	bl	2af0 <_sbrk_r>
    24da:	1c43      	adds	r3, r0, #1
    24dc:	d12c      	bne.n	2538 <_malloc_r+0x9c>
    24de:	230c      	movs	r3, #12
    24e0:	0030      	movs	r0, r6
    24e2:	6033      	str	r3, [r6, #0]
    24e4:	f000 fbcc 	bl	2c80 <__malloc_unlock>
    24e8:	e003      	b.n	24f2 <_malloc_r+0x56>
    24ea:	2d00      	cmp	r5, #0
    24ec:	dadf      	bge.n	24ae <_malloc_r+0x12>
    24ee:	230c      	movs	r3, #12
    24f0:	6033      	str	r3, [r6, #0]
    24f2:	2000      	movs	r0, #0
    24f4:	bd70      	pop	{r4, r5, r6, pc}
    24f6:	680b      	ldr	r3, [r1, #0]
    24f8:	1b5b      	subs	r3, r3, r5
    24fa:	d41a      	bmi.n	2532 <_malloc_r+0x96>
    24fc:	2b0b      	cmp	r3, #11
    24fe:	d903      	bls.n	2508 <_malloc_r+0x6c>
    2500:	600b      	str	r3, [r1, #0]
    2502:	18cc      	adds	r4, r1, r3
    2504:	6025      	str	r5, [r4, #0]
    2506:	e003      	b.n	2510 <_malloc_r+0x74>
    2508:	428c      	cmp	r4, r1
    250a:	d10e      	bne.n	252a <_malloc_r+0x8e>
    250c:	6863      	ldr	r3, [r4, #4]
    250e:	6013      	str	r3, [r2, #0]
    2510:	0030      	movs	r0, r6
    2512:	f000 fbb5 	bl	2c80 <__malloc_unlock>
    2516:	0020      	movs	r0, r4
    2518:	2207      	movs	r2, #7
    251a:	300b      	adds	r0, #11
    251c:	1d23      	adds	r3, r4, #4
    251e:	4390      	bics	r0, r2
    2520:	1ac3      	subs	r3, r0, r3
    2522:	d0e7      	beq.n	24f4 <_malloc_r+0x58>
    2524:	425a      	negs	r2, r3
    2526:	50e2      	str	r2, [r4, r3]
    2528:	e7e4      	b.n	24f4 <_malloc_r+0x58>
    252a:	684b      	ldr	r3, [r1, #4]
    252c:	6063      	str	r3, [r4, #4]
    252e:	000c      	movs	r4, r1
    2530:	e7ee      	b.n	2510 <_malloc_r+0x74>
    2532:	000c      	movs	r4, r1
    2534:	6849      	ldr	r1, [r1, #4]
    2536:	e7c2      	b.n	24be <_malloc_r+0x22>
    2538:	2303      	movs	r3, #3
    253a:	1cc4      	adds	r4, r0, #3
    253c:	439c      	bics	r4, r3
    253e:	42a0      	cmp	r0, r4
    2540:	d0e0      	beq.n	2504 <_malloc_r+0x68>
    2542:	1a21      	subs	r1, r4, r0
    2544:	0030      	movs	r0, r6
    2546:	f000 fad3 	bl	2af0 <_sbrk_r>
    254a:	1c43      	adds	r3, r0, #1
    254c:	d1da      	bne.n	2504 <_malloc_r+0x68>
    254e:	e7c6      	b.n	24de <_malloc_r+0x42>
    2550:	200000a8 	.word	0x200000a8
    2554:	200000ac 	.word	0x200000ac

00002558 <__sfputc_r>:
    2558:	6893      	ldr	r3, [r2, #8]
    255a:	b510      	push	{r4, lr}
    255c:	3b01      	subs	r3, #1
    255e:	6093      	str	r3, [r2, #8]
    2560:	2b00      	cmp	r3, #0
    2562:	da05      	bge.n	2570 <__sfputc_r+0x18>
    2564:	6994      	ldr	r4, [r2, #24]
    2566:	42a3      	cmp	r3, r4
    2568:	db08      	blt.n	257c <__sfputc_r+0x24>
    256a:	b2cb      	uxtb	r3, r1
    256c:	2b0a      	cmp	r3, #10
    256e:	d005      	beq.n	257c <__sfputc_r+0x24>
    2570:	6813      	ldr	r3, [r2, #0]
    2572:	1c58      	adds	r0, r3, #1
    2574:	6010      	str	r0, [r2, #0]
    2576:	7019      	strb	r1, [r3, #0]
    2578:	b2c8      	uxtb	r0, r1
    257a:	bd10      	pop	{r4, pc}
    257c:	f7ff fc74 	bl	1e68 <__swbuf_r>
    2580:	e7fb      	b.n	257a <__sfputc_r+0x22>

00002582 <__sfputs_r>:
    2582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2584:	0006      	movs	r6, r0
    2586:	000f      	movs	r7, r1
    2588:	0014      	movs	r4, r2
    258a:	18d5      	adds	r5, r2, r3
    258c:	42ac      	cmp	r4, r5
    258e:	d101      	bne.n	2594 <__sfputs_r+0x12>
    2590:	2000      	movs	r0, #0
    2592:	e007      	b.n	25a4 <__sfputs_r+0x22>
    2594:	7821      	ldrb	r1, [r4, #0]
    2596:	003a      	movs	r2, r7
    2598:	0030      	movs	r0, r6
    259a:	f7ff ffdd 	bl	2558 <__sfputc_r>
    259e:	3401      	adds	r4, #1
    25a0:	1c43      	adds	r3, r0, #1
    25a2:	d1f3      	bne.n	258c <__sfputs_r+0xa>
    25a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000025a8 <_vfiprintf_r>:
    25a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    25aa:	b09f      	sub	sp, #124	; 0x7c
    25ac:	0006      	movs	r6, r0
    25ae:	000f      	movs	r7, r1
    25b0:	0014      	movs	r4, r2
    25b2:	9305      	str	r3, [sp, #20]
    25b4:	2800      	cmp	r0, #0
    25b6:	d004      	beq.n	25c2 <_vfiprintf_r+0x1a>
    25b8:	6983      	ldr	r3, [r0, #24]
    25ba:	2b00      	cmp	r3, #0
    25bc:	d101      	bne.n	25c2 <_vfiprintf_r+0x1a>
    25be:	f7ff fe17 	bl	21f0 <__sinit>
    25c2:	4b7f      	ldr	r3, [pc, #508]	; (27c0 <_vfiprintf_r+0x218>)
    25c4:	429f      	cmp	r7, r3
    25c6:	d15c      	bne.n	2682 <_vfiprintf_r+0xda>
    25c8:	6877      	ldr	r7, [r6, #4]
    25ca:	89bb      	ldrh	r3, [r7, #12]
    25cc:	071b      	lsls	r3, r3, #28
    25ce:	d562      	bpl.n	2696 <_vfiprintf_r+0xee>
    25d0:	693b      	ldr	r3, [r7, #16]
    25d2:	2b00      	cmp	r3, #0
    25d4:	d05f      	beq.n	2696 <_vfiprintf_r+0xee>
    25d6:	2300      	movs	r3, #0
    25d8:	ad06      	add	r5, sp, #24
    25da:	616b      	str	r3, [r5, #20]
    25dc:	3320      	adds	r3, #32
    25de:	766b      	strb	r3, [r5, #25]
    25e0:	3310      	adds	r3, #16
    25e2:	76ab      	strb	r3, [r5, #26]
    25e4:	9402      	str	r4, [sp, #8]
    25e6:	9c02      	ldr	r4, [sp, #8]
    25e8:	7823      	ldrb	r3, [r4, #0]
    25ea:	2b00      	cmp	r3, #0
    25ec:	d15d      	bne.n	26aa <_vfiprintf_r+0x102>
    25ee:	9b02      	ldr	r3, [sp, #8]
    25f0:	1ae3      	subs	r3, r4, r3
    25f2:	9304      	str	r3, [sp, #16]
    25f4:	d00d      	beq.n	2612 <_vfiprintf_r+0x6a>
    25f6:	9b04      	ldr	r3, [sp, #16]
    25f8:	9a02      	ldr	r2, [sp, #8]
    25fa:	0039      	movs	r1, r7
    25fc:	0030      	movs	r0, r6
    25fe:	f7ff ffc0 	bl	2582 <__sfputs_r>
    2602:	1c43      	adds	r3, r0, #1
    2604:	d100      	bne.n	2608 <_vfiprintf_r+0x60>
    2606:	e0cc      	b.n	27a2 <_vfiprintf_r+0x1fa>
    2608:	696a      	ldr	r2, [r5, #20]
    260a:	9b04      	ldr	r3, [sp, #16]
    260c:	4694      	mov	ip, r2
    260e:	4463      	add	r3, ip
    2610:	616b      	str	r3, [r5, #20]
    2612:	7823      	ldrb	r3, [r4, #0]
    2614:	2b00      	cmp	r3, #0
    2616:	d100      	bne.n	261a <_vfiprintf_r+0x72>
    2618:	e0c3      	b.n	27a2 <_vfiprintf_r+0x1fa>
    261a:	2201      	movs	r2, #1
    261c:	2300      	movs	r3, #0
    261e:	4252      	negs	r2, r2
    2620:	606a      	str	r2, [r5, #4]
    2622:	a902      	add	r1, sp, #8
    2624:	3254      	adds	r2, #84	; 0x54
    2626:	1852      	adds	r2, r2, r1
    2628:	3401      	adds	r4, #1
    262a:	602b      	str	r3, [r5, #0]
    262c:	60eb      	str	r3, [r5, #12]
    262e:	60ab      	str	r3, [r5, #8]
    2630:	7013      	strb	r3, [r2, #0]
    2632:	65ab      	str	r3, [r5, #88]	; 0x58
    2634:	7821      	ldrb	r1, [r4, #0]
    2636:	2205      	movs	r2, #5
    2638:	4862      	ldr	r0, [pc, #392]	; (27c4 <_vfiprintf_r+0x21c>)
    263a:	f000 fb15 	bl	2c68 <memchr>
    263e:	1c63      	adds	r3, r4, #1
    2640:	469c      	mov	ip, r3
    2642:	2800      	cmp	r0, #0
    2644:	d135      	bne.n	26b2 <_vfiprintf_r+0x10a>
    2646:	6829      	ldr	r1, [r5, #0]
    2648:	06cb      	lsls	r3, r1, #27
    264a:	d504      	bpl.n	2656 <_vfiprintf_r+0xae>
    264c:	2353      	movs	r3, #83	; 0x53
    264e:	aa02      	add	r2, sp, #8
    2650:	3020      	adds	r0, #32
    2652:	189b      	adds	r3, r3, r2
    2654:	7018      	strb	r0, [r3, #0]
    2656:	070b      	lsls	r3, r1, #28
    2658:	d504      	bpl.n	2664 <_vfiprintf_r+0xbc>
    265a:	2353      	movs	r3, #83	; 0x53
    265c:	202b      	movs	r0, #43	; 0x2b
    265e:	aa02      	add	r2, sp, #8
    2660:	189b      	adds	r3, r3, r2
    2662:	7018      	strb	r0, [r3, #0]
    2664:	7823      	ldrb	r3, [r4, #0]
    2666:	2b2a      	cmp	r3, #42	; 0x2a
    2668:	d02c      	beq.n	26c4 <_vfiprintf_r+0x11c>
    266a:	2000      	movs	r0, #0
    266c:	210a      	movs	r1, #10
    266e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2670:	7822      	ldrb	r2, [r4, #0]
    2672:	3a30      	subs	r2, #48	; 0x30
    2674:	2a09      	cmp	r2, #9
    2676:	d800      	bhi.n	267a <_vfiprintf_r+0xd2>
    2678:	e06b      	b.n	2752 <_vfiprintf_r+0x1aa>
    267a:	2800      	cmp	r0, #0
    267c:	d02a      	beq.n	26d4 <_vfiprintf_r+0x12c>
    267e:	9309      	str	r3, [sp, #36]	; 0x24
    2680:	e028      	b.n	26d4 <_vfiprintf_r+0x12c>
    2682:	4b51      	ldr	r3, [pc, #324]	; (27c8 <_vfiprintf_r+0x220>)
    2684:	429f      	cmp	r7, r3
    2686:	d101      	bne.n	268c <_vfiprintf_r+0xe4>
    2688:	68b7      	ldr	r7, [r6, #8]
    268a:	e79e      	b.n	25ca <_vfiprintf_r+0x22>
    268c:	4b4f      	ldr	r3, [pc, #316]	; (27cc <_vfiprintf_r+0x224>)
    268e:	429f      	cmp	r7, r3
    2690:	d19b      	bne.n	25ca <_vfiprintf_r+0x22>
    2692:	68f7      	ldr	r7, [r6, #12]
    2694:	e799      	b.n	25ca <_vfiprintf_r+0x22>
    2696:	0039      	movs	r1, r7
    2698:	0030      	movs	r0, r6
    269a:	f7ff fc3b 	bl	1f14 <__swsetup_r>
    269e:	2800      	cmp	r0, #0
    26a0:	d099      	beq.n	25d6 <_vfiprintf_r+0x2e>
    26a2:	2001      	movs	r0, #1
    26a4:	4240      	negs	r0, r0
    26a6:	b01f      	add	sp, #124	; 0x7c
    26a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26aa:	2b25      	cmp	r3, #37	; 0x25
    26ac:	d09f      	beq.n	25ee <_vfiprintf_r+0x46>
    26ae:	3401      	adds	r4, #1
    26b0:	e79a      	b.n	25e8 <_vfiprintf_r+0x40>
    26b2:	4b44      	ldr	r3, [pc, #272]	; (27c4 <_vfiprintf_r+0x21c>)
    26b4:	6829      	ldr	r1, [r5, #0]
    26b6:	1ac0      	subs	r0, r0, r3
    26b8:	2301      	movs	r3, #1
    26ba:	4083      	lsls	r3, r0
    26bc:	430b      	orrs	r3, r1
    26be:	602b      	str	r3, [r5, #0]
    26c0:	4664      	mov	r4, ip
    26c2:	e7b7      	b.n	2634 <_vfiprintf_r+0x8c>
    26c4:	9b05      	ldr	r3, [sp, #20]
    26c6:	1d18      	adds	r0, r3, #4
    26c8:	681b      	ldr	r3, [r3, #0]
    26ca:	9005      	str	r0, [sp, #20]
    26cc:	2b00      	cmp	r3, #0
    26ce:	db3a      	blt.n	2746 <_vfiprintf_r+0x19e>
    26d0:	9309      	str	r3, [sp, #36]	; 0x24
    26d2:	4664      	mov	r4, ip
    26d4:	7823      	ldrb	r3, [r4, #0]
    26d6:	2b2e      	cmp	r3, #46	; 0x2e
    26d8:	d10b      	bne.n	26f2 <_vfiprintf_r+0x14a>
    26da:	7863      	ldrb	r3, [r4, #1]
    26dc:	1c62      	adds	r2, r4, #1
    26de:	2b2a      	cmp	r3, #42	; 0x2a
    26e0:	d13f      	bne.n	2762 <_vfiprintf_r+0x1ba>
    26e2:	9b05      	ldr	r3, [sp, #20]
    26e4:	3402      	adds	r4, #2
    26e6:	1d1a      	adds	r2, r3, #4
    26e8:	681b      	ldr	r3, [r3, #0]
    26ea:	9205      	str	r2, [sp, #20]
    26ec:	2b00      	cmp	r3, #0
    26ee:	db35      	blt.n	275c <_vfiprintf_r+0x1b4>
    26f0:	9307      	str	r3, [sp, #28]
    26f2:	7821      	ldrb	r1, [r4, #0]
    26f4:	2203      	movs	r2, #3
    26f6:	4836      	ldr	r0, [pc, #216]	; (27d0 <_vfiprintf_r+0x228>)
    26f8:	f000 fab6 	bl	2c68 <memchr>
    26fc:	2800      	cmp	r0, #0
    26fe:	d007      	beq.n	2710 <_vfiprintf_r+0x168>
    2700:	4b33      	ldr	r3, [pc, #204]	; (27d0 <_vfiprintf_r+0x228>)
    2702:	682a      	ldr	r2, [r5, #0]
    2704:	1ac0      	subs	r0, r0, r3
    2706:	2340      	movs	r3, #64	; 0x40
    2708:	4083      	lsls	r3, r0
    270a:	4313      	orrs	r3, r2
    270c:	602b      	str	r3, [r5, #0]
    270e:	3401      	adds	r4, #1
    2710:	7821      	ldrb	r1, [r4, #0]
    2712:	1c63      	adds	r3, r4, #1
    2714:	2206      	movs	r2, #6
    2716:	482f      	ldr	r0, [pc, #188]	; (27d4 <_vfiprintf_r+0x22c>)
    2718:	9302      	str	r3, [sp, #8]
    271a:	7629      	strb	r1, [r5, #24]
    271c:	f000 faa4 	bl	2c68 <memchr>
    2720:	2800      	cmp	r0, #0
    2722:	d044      	beq.n	27ae <_vfiprintf_r+0x206>
    2724:	4b2c      	ldr	r3, [pc, #176]	; (27d8 <_vfiprintf_r+0x230>)
    2726:	2b00      	cmp	r3, #0
    2728:	d12f      	bne.n	278a <_vfiprintf_r+0x1e2>
    272a:	6829      	ldr	r1, [r5, #0]
    272c:	9b05      	ldr	r3, [sp, #20]
    272e:	2207      	movs	r2, #7
    2730:	05c9      	lsls	r1, r1, #23
    2732:	d528      	bpl.n	2786 <_vfiprintf_r+0x1de>
    2734:	189b      	adds	r3, r3, r2
    2736:	4393      	bics	r3, r2
    2738:	3308      	adds	r3, #8
    273a:	9305      	str	r3, [sp, #20]
    273c:	696b      	ldr	r3, [r5, #20]
    273e:	9a03      	ldr	r2, [sp, #12]
    2740:	189b      	adds	r3, r3, r2
    2742:	616b      	str	r3, [r5, #20]
    2744:	e74f      	b.n	25e6 <_vfiprintf_r+0x3e>
    2746:	425b      	negs	r3, r3
    2748:	60eb      	str	r3, [r5, #12]
    274a:	2302      	movs	r3, #2
    274c:	430b      	orrs	r3, r1
    274e:	602b      	str	r3, [r5, #0]
    2750:	e7bf      	b.n	26d2 <_vfiprintf_r+0x12a>
    2752:	434b      	muls	r3, r1
    2754:	3401      	adds	r4, #1
    2756:	189b      	adds	r3, r3, r2
    2758:	2001      	movs	r0, #1
    275a:	e789      	b.n	2670 <_vfiprintf_r+0xc8>
    275c:	2301      	movs	r3, #1
    275e:	425b      	negs	r3, r3
    2760:	e7c6      	b.n	26f0 <_vfiprintf_r+0x148>
    2762:	2300      	movs	r3, #0
    2764:	0014      	movs	r4, r2
    2766:	200a      	movs	r0, #10
    2768:	001a      	movs	r2, r3
    276a:	606b      	str	r3, [r5, #4]
    276c:	7821      	ldrb	r1, [r4, #0]
    276e:	3930      	subs	r1, #48	; 0x30
    2770:	2909      	cmp	r1, #9
    2772:	d903      	bls.n	277c <_vfiprintf_r+0x1d4>
    2774:	2b00      	cmp	r3, #0
    2776:	d0bc      	beq.n	26f2 <_vfiprintf_r+0x14a>
    2778:	9207      	str	r2, [sp, #28]
    277a:	e7ba      	b.n	26f2 <_vfiprintf_r+0x14a>
    277c:	4342      	muls	r2, r0
    277e:	3401      	adds	r4, #1
    2780:	1852      	adds	r2, r2, r1
    2782:	2301      	movs	r3, #1
    2784:	e7f2      	b.n	276c <_vfiprintf_r+0x1c4>
    2786:	3307      	adds	r3, #7
    2788:	e7d5      	b.n	2736 <_vfiprintf_r+0x18e>
    278a:	ab05      	add	r3, sp, #20
    278c:	9300      	str	r3, [sp, #0]
    278e:	003a      	movs	r2, r7
    2790:	4b12      	ldr	r3, [pc, #72]	; (27dc <_vfiprintf_r+0x234>)
    2792:	0029      	movs	r1, r5
    2794:	0030      	movs	r0, r6
    2796:	e000      	b.n	279a <_vfiprintf_r+0x1f2>
    2798:	bf00      	nop
    279a:	9003      	str	r0, [sp, #12]
    279c:	9b03      	ldr	r3, [sp, #12]
    279e:	3301      	adds	r3, #1
    27a0:	d1cc      	bne.n	273c <_vfiprintf_r+0x194>
    27a2:	89bb      	ldrh	r3, [r7, #12]
    27a4:	065b      	lsls	r3, r3, #25
    27a6:	d500      	bpl.n	27aa <_vfiprintf_r+0x202>
    27a8:	e77b      	b.n	26a2 <_vfiprintf_r+0xfa>
    27aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    27ac:	e77b      	b.n	26a6 <_vfiprintf_r+0xfe>
    27ae:	ab05      	add	r3, sp, #20
    27b0:	9300      	str	r3, [sp, #0]
    27b2:	003a      	movs	r2, r7
    27b4:	4b09      	ldr	r3, [pc, #36]	; (27dc <_vfiprintf_r+0x234>)
    27b6:	0029      	movs	r1, r5
    27b8:	0030      	movs	r0, r6
    27ba:	f000 f87f 	bl	28bc <_printf_i>
    27be:	e7ec      	b.n	279a <_vfiprintf_r+0x1f2>
    27c0:	00002f04 	.word	0x00002f04
    27c4:	00002f44 	.word	0x00002f44
    27c8:	00002f24 	.word	0x00002f24
    27cc:	00002ee4 	.word	0x00002ee4
    27d0:	00002f4a 	.word	0x00002f4a
    27d4:	00002f4e 	.word	0x00002f4e
    27d8:	00000000 	.word	0x00000000
    27dc:	00002583 	.word	0x00002583

000027e0 <_printf_common>:
    27e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    27e2:	0015      	movs	r5, r2
    27e4:	9301      	str	r3, [sp, #4]
    27e6:	688a      	ldr	r2, [r1, #8]
    27e8:	690b      	ldr	r3, [r1, #16]
    27ea:	9000      	str	r0, [sp, #0]
    27ec:	000c      	movs	r4, r1
    27ee:	4293      	cmp	r3, r2
    27f0:	da00      	bge.n	27f4 <_printf_common+0x14>
    27f2:	0013      	movs	r3, r2
    27f4:	0022      	movs	r2, r4
    27f6:	602b      	str	r3, [r5, #0]
    27f8:	3243      	adds	r2, #67	; 0x43
    27fa:	7812      	ldrb	r2, [r2, #0]
    27fc:	2a00      	cmp	r2, #0
    27fe:	d001      	beq.n	2804 <_printf_common+0x24>
    2800:	3301      	adds	r3, #1
    2802:	602b      	str	r3, [r5, #0]
    2804:	6823      	ldr	r3, [r4, #0]
    2806:	069b      	lsls	r3, r3, #26
    2808:	d502      	bpl.n	2810 <_printf_common+0x30>
    280a:	682b      	ldr	r3, [r5, #0]
    280c:	3302      	adds	r3, #2
    280e:	602b      	str	r3, [r5, #0]
    2810:	2706      	movs	r7, #6
    2812:	6823      	ldr	r3, [r4, #0]
    2814:	401f      	ands	r7, r3
    2816:	d027      	beq.n	2868 <_printf_common+0x88>
    2818:	0023      	movs	r3, r4
    281a:	3343      	adds	r3, #67	; 0x43
    281c:	781b      	ldrb	r3, [r3, #0]
    281e:	1e5a      	subs	r2, r3, #1
    2820:	4193      	sbcs	r3, r2
    2822:	6822      	ldr	r2, [r4, #0]
    2824:	0692      	lsls	r2, r2, #26
    2826:	d430      	bmi.n	288a <_printf_common+0xaa>
    2828:	0022      	movs	r2, r4
    282a:	9901      	ldr	r1, [sp, #4]
    282c:	3243      	adds	r2, #67	; 0x43
    282e:	9800      	ldr	r0, [sp, #0]
    2830:	9e08      	ldr	r6, [sp, #32]
    2832:	47b0      	blx	r6
    2834:	1c43      	adds	r3, r0, #1
    2836:	d025      	beq.n	2884 <_printf_common+0xa4>
    2838:	2306      	movs	r3, #6
    283a:	6820      	ldr	r0, [r4, #0]
    283c:	682a      	ldr	r2, [r5, #0]
    283e:	68e1      	ldr	r1, [r4, #12]
    2840:	4003      	ands	r3, r0
    2842:	2500      	movs	r5, #0
    2844:	2b04      	cmp	r3, #4
    2846:	d103      	bne.n	2850 <_printf_common+0x70>
    2848:	1a8d      	subs	r5, r1, r2
    284a:	43eb      	mvns	r3, r5
    284c:	17db      	asrs	r3, r3, #31
    284e:	401d      	ands	r5, r3
    2850:	68a3      	ldr	r3, [r4, #8]
    2852:	6922      	ldr	r2, [r4, #16]
    2854:	4293      	cmp	r3, r2
    2856:	dd01      	ble.n	285c <_printf_common+0x7c>
    2858:	1a9b      	subs	r3, r3, r2
    285a:	18ed      	adds	r5, r5, r3
    285c:	2700      	movs	r7, #0
    285e:	42bd      	cmp	r5, r7
    2860:	d120      	bne.n	28a4 <_printf_common+0xc4>
    2862:	2000      	movs	r0, #0
    2864:	e010      	b.n	2888 <_printf_common+0xa8>
    2866:	3701      	adds	r7, #1
    2868:	68e3      	ldr	r3, [r4, #12]
    286a:	682a      	ldr	r2, [r5, #0]
    286c:	1a9b      	subs	r3, r3, r2
    286e:	429f      	cmp	r7, r3
    2870:	dad2      	bge.n	2818 <_printf_common+0x38>
    2872:	0022      	movs	r2, r4
    2874:	2301      	movs	r3, #1
    2876:	3219      	adds	r2, #25
    2878:	9901      	ldr	r1, [sp, #4]
    287a:	9800      	ldr	r0, [sp, #0]
    287c:	9e08      	ldr	r6, [sp, #32]
    287e:	47b0      	blx	r6
    2880:	1c43      	adds	r3, r0, #1
    2882:	d1f0      	bne.n	2866 <_printf_common+0x86>
    2884:	2001      	movs	r0, #1
    2886:	4240      	negs	r0, r0
    2888:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    288a:	2030      	movs	r0, #48	; 0x30
    288c:	18e1      	adds	r1, r4, r3
    288e:	3143      	adds	r1, #67	; 0x43
    2890:	7008      	strb	r0, [r1, #0]
    2892:	0021      	movs	r1, r4
    2894:	1c5a      	adds	r2, r3, #1
    2896:	3145      	adds	r1, #69	; 0x45
    2898:	7809      	ldrb	r1, [r1, #0]
    289a:	18a2      	adds	r2, r4, r2
    289c:	3243      	adds	r2, #67	; 0x43
    289e:	3302      	adds	r3, #2
    28a0:	7011      	strb	r1, [r2, #0]
    28a2:	e7c1      	b.n	2828 <_printf_common+0x48>
    28a4:	0022      	movs	r2, r4
    28a6:	2301      	movs	r3, #1
    28a8:	321a      	adds	r2, #26
    28aa:	9901      	ldr	r1, [sp, #4]
    28ac:	9800      	ldr	r0, [sp, #0]
    28ae:	9e08      	ldr	r6, [sp, #32]
    28b0:	47b0      	blx	r6
    28b2:	1c43      	adds	r3, r0, #1
    28b4:	d0e6      	beq.n	2884 <_printf_common+0xa4>
    28b6:	3701      	adds	r7, #1
    28b8:	e7d1      	b.n	285e <_printf_common+0x7e>
	...

000028bc <_printf_i>:
    28bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    28be:	b08b      	sub	sp, #44	; 0x2c
    28c0:	9206      	str	r2, [sp, #24]
    28c2:	000a      	movs	r2, r1
    28c4:	3243      	adds	r2, #67	; 0x43
    28c6:	9307      	str	r3, [sp, #28]
    28c8:	9005      	str	r0, [sp, #20]
    28ca:	9204      	str	r2, [sp, #16]
    28cc:	7e0a      	ldrb	r2, [r1, #24]
    28ce:	000c      	movs	r4, r1
    28d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    28d2:	2a6e      	cmp	r2, #110	; 0x6e
    28d4:	d100      	bne.n	28d8 <_printf_i+0x1c>
    28d6:	e08f      	b.n	29f8 <_printf_i+0x13c>
    28d8:	d817      	bhi.n	290a <_printf_i+0x4e>
    28da:	2a63      	cmp	r2, #99	; 0x63
    28dc:	d02c      	beq.n	2938 <_printf_i+0x7c>
    28de:	d808      	bhi.n	28f2 <_printf_i+0x36>
    28e0:	2a00      	cmp	r2, #0
    28e2:	d100      	bne.n	28e6 <_printf_i+0x2a>
    28e4:	e099      	b.n	2a1a <_printf_i+0x15e>
    28e6:	2a58      	cmp	r2, #88	; 0x58
    28e8:	d054      	beq.n	2994 <_printf_i+0xd8>
    28ea:	0026      	movs	r6, r4
    28ec:	3642      	adds	r6, #66	; 0x42
    28ee:	7032      	strb	r2, [r6, #0]
    28f0:	e029      	b.n	2946 <_printf_i+0x8a>
    28f2:	2a64      	cmp	r2, #100	; 0x64
    28f4:	d001      	beq.n	28fa <_printf_i+0x3e>
    28f6:	2a69      	cmp	r2, #105	; 0x69
    28f8:	d1f7      	bne.n	28ea <_printf_i+0x2e>
    28fa:	6821      	ldr	r1, [r4, #0]
    28fc:	681a      	ldr	r2, [r3, #0]
    28fe:	0608      	lsls	r0, r1, #24
    2900:	d523      	bpl.n	294a <_printf_i+0x8e>
    2902:	1d11      	adds	r1, r2, #4
    2904:	6019      	str	r1, [r3, #0]
    2906:	6815      	ldr	r5, [r2, #0]
    2908:	e025      	b.n	2956 <_printf_i+0x9a>
    290a:	2a73      	cmp	r2, #115	; 0x73
    290c:	d100      	bne.n	2910 <_printf_i+0x54>
    290e:	e088      	b.n	2a22 <_printf_i+0x166>
    2910:	d808      	bhi.n	2924 <_printf_i+0x68>
    2912:	2a6f      	cmp	r2, #111	; 0x6f
    2914:	d029      	beq.n	296a <_printf_i+0xae>
    2916:	2a70      	cmp	r2, #112	; 0x70
    2918:	d1e7      	bne.n	28ea <_printf_i+0x2e>
    291a:	2220      	movs	r2, #32
    291c:	6809      	ldr	r1, [r1, #0]
    291e:	430a      	orrs	r2, r1
    2920:	6022      	str	r2, [r4, #0]
    2922:	e003      	b.n	292c <_printf_i+0x70>
    2924:	2a75      	cmp	r2, #117	; 0x75
    2926:	d020      	beq.n	296a <_printf_i+0xae>
    2928:	2a78      	cmp	r2, #120	; 0x78
    292a:	d1de      	bne.n	28ea <_printf_i+0x2e>
    292c:	0022      	movs	r2, r4
    292e:	2178      	movs	r1, #120	; 0x78
    2930:	3245      	adds	r2, #69	; 0x45
    2932:	7011      	strb	r1, [r2, #0]
    2934:	4a6c      	ldr	r2, [pc, #432]	; (2ae8 <_printf_i+0x22c>)
    2936:	e030      	b.n	299a <_printf_i+0xde>
    2938:	000e      	movs	r6, r1
    293a:	681a      	ldr	r2, [r3, #0]
    293c:	3642      	adds	r6, #66	; 0x42
    293e:	1d11      	adds	r1, r2, #4
    2940:	6019      	str	r1, [r3, #0]
    2942:	6813      	ldr	r3, [r2, #0]
    2944:	7033      	strb	r3, [r6, #0]
    2946:	2301      	movs	r3, #1
    2948:	e079      	b.n	2a3e <_printf_i+0x182>
    294a:	0649      	lsls	r1, r1, #25
    294c:	d5d9      	bpl.n	2902 <_printf_i+0x46>
    294e:	1d11      	adds	r1, r2, #4
    2950:	6019      	str	r1, [r3, #0]
    2952:	2300      	movs	r3, #0
    2954:	5ed5      	ldrsh	r5, [r2, r3]
    2956:	2d00      	cmp	r5, #0
    2958:	da03      	bge.n	2962 <_printf_i+0xa6>
    295a:	232d      	movs	r3, #45	; 0x2d
    295c:	9a04      	ldr	r2, [sp, #16]
    295e:	426d      	negs	r5, r5
    2960:	7013      	strb	r3, [r2, #0]
    2962:	4b62      	ldr	r3, [pc, #392]	; (2aec <_printf_i+0x230>)
    2964:	270a      	movs	r7, #10
    2966:	9303      	str	r3, [sp, #12]
    2968:	e02f      	b.n	29ca <_printf_i+0x10e>
    296a:	6820      	ldr	r0, [r4, #0]
    296c:	6819      	ldr	r1, [r3, #0]
    296e:	0605      	lsls	r5, r0, #24
    2970:	d503      	bpl.n	297a <_printf_i+0xbe>
    2972:	1d08      	adds	r0, r1, #4
    2974:	6018      	str	r0, [r3, #0]
    2976:	680d      	ldr	r5, [r1, #0]
    2978:	e005      	b.n	2986 <_printf_i+0xca>
    297a:	0640      	lsls	r0, r0, #25
    297c:	d5f9      	bpl.n	2972 <_printf_i+0xb6>
    297e:	680d      	ldr	r5, [r1, #0]
    2980:	1d08      	adds	r0, r1, #4
    2982:	6018      	str	r0, [r3, #0]
    2984:	b2ad      	uxth	r5, r5
    2986:	4b59      	ldr	r3, [pc, #356]	; (2aec <_printf_i+0x230>)
    2988:	2708      	movs	r7, #8
    298a:	9303      	str	r3, [sp, #12]
    298c:	2a6f      	cmp	r2, #111	; 0x6f
    298e:	d018      	beq.n	29c2 <_printf_i+0x106>
    2990:	270a      	movs	r7, #10
    2992:	e016      	b.n	29c2 <_printf_i+0x106>
    2994:	3145      	adds	r1, #69	; 0x45
    2996:	700a      	strb	r2, [r1, #0]
    2998:	4a54      	ldr	r2, [pc, #336]	; (2aec <_printf_i+0x230>)
    299a:	9203      	str	r2, [sp, #12]
    299c:	681a      	ldr	r2, [r3, #0]
    299e:	6821      	ldr	r1, [r4, #0]
    29a0:	1d10      	adds	r0, r2, #4
    29a2:	6018      	str	r0, [r3, #0]
    29a4:	6815      	ldr	r5, [r2, #0]
    29a6:	0608      	lsls	r0, r1, #24
    29a8:	d522      	bpl.n	29f0 <_printf_i+0x134>
    29aa:	07cb      	lsls	r3, r1, #31
    29ac:	d502      	bpl.n	29b4 <_printf_i+0xf8>
    29ae:	2320      	movs	r3, #32
    29b0:	4319      	orrs	r1, r3
    29b2:	6021      	str	r1, [r4, #0]
    29b4:	2710      	movs	r7, #16
    29b6:	2d00      	cmp	r5, #0
    29b8:	d103      	bne.n	29c2 <_printf_i+0x106>
    29ba:	2320      	movs	r3, #32
    29bc:	6822      	ldr	r2, [r4, #0]
    29be:	439a      	bics	r2, r3
    29c0:	6022      	str	r2, [r4, #0]
    29c2:	0023      	movs	r3, r4
    29c4:	2200      	movs	r2, #0
    29c6:	3343      	adds	r3, #67	; 0x43
    29c8:	701a      	strb	r2, [r3, #0]
    29ca:	6863      	ldr	r3, [r4, #4]
    29cc:	60a3      	str	r3, [r4, #8]
    29ce:	2b00      	cmp	r3, #0
    29d0:	db5c      	blt.n	2a8c <_printf_i+0x1d0>
    29d2:	2204      	movs	r2, #4
    29d4:	6821      	ldr	r1, [r4, #0]
    29d6:	4391      	bics	r1, r2
    29d8:	6021      	str	r1, [r4, #0]
    29da:	2d00      	cmp	r5, #0
    29dc:	d158      	bne.n	2a90 <_printf_i+0x1d4>
    29de:	9e04      	ldr	r6, [sp, #16]
    29e0:	2b00      	cmp	r3, #0
    29e2:	d064      	beq.n	2aae <_printf_i+0x1f2>
    29e4:	0026      	movs	r6, r4
    29e6:	9b03      	ldr	r3, [sp, #12]
    29e8:	3642      	adds	r6, #66	; 0x42
    29ea:	781b      	ldrb	r3, [r3, #0]
    29ec:	7033      	strb	r3, [r6, #0]
    29ee:	e05e      	b.n	2aae <_printf_i+0x1f2>
    29f0:	0648      	lsls	r0, r1, #25
    29f2:	d5da      	bpl.n	29aa <_printf_i+0xee>
    29f4:	b2ad      	uxth	r5, r5
    29f6:	e7d8      	b.n	29aa <_printf_i+0xee>
    29f8:	6809      	ldr	r1, [r1, #0]
    29fa:	681a      	ldr	r2, [r3, #0]
    29fc:	0608      	lsls	r0, r1, #24
    29fe:	d505      	bpl.n	2a0c <_printf_i+0x150>
    2a00:	1d11      	adds	r1, r2, #4
    2a02:	6019      	str	r1, [r3, #0]
    2a04:	6813      	ldr	r3, [r2, #0]
    2a06:	6962      	ldr	r2, [r4, #20]
    2a08:	601a      	str	r2, [r3, #0]
    2a0a:	e006      	b.n	2a1a <_printf_i+0x15e>
    2a0c:	0649      	lsls	r1, r1, #25
    2a0e:	d5f7      	bpl.n	2a00 <_printf_i+0x144>
    2a10:	1d11      	adds	r1, r2, #4
    2a12:	6019      	str	r1, [r3, #0]
    2a14:	6813      	ldr	r3, [r2, #0]
    2a16:	8aa2      	ldrh	r2, [r4, #20]
    2a18:	801a      	strh	r2, [r3, #0]
    2a1a:	2300      	movs	r3, #0
    2a1c:	9e04      	ldr	r6, [sp, #16]
    2a1e:	6123      	str	r3, [r4, #16]
    2a20:	e054      	b.n	2acc <_printf_i+0x210>
    2a22:	681a      	ldr	r2, [r3, #0]
    2a24:	1d11      	adds	r1, r2, #4
    2a26:	6019      	str	r1, [r3, #0]
    2a28:	6816      	ldr	r6, [r2, #0]
    2a2a:	2100      	movs	r1, #0
    2a2c:	6862      	ldr	r2, [r4, #4]
    2a2e:	0030      	movs	r0, r6
    2a30:	f000 f91a 	bl	2c68 <memchr>
    2a34:	2800      	cmp	r0, #0
    2a36:	d001      	beq.n	2a3c <_printf_i+0x180>
    2a38:	1b80      	subs	r0, r0, r6
    2a3a:	6060      	str	r0, [r4, #4]
    2a3c:	6863      	ldr	r3, [r4, #4]
    2a3e:	6123      	str	r3, [r4, #16]
    2a40:	2300      	movs	r3, #0
    2a42:	9a04      	ldr	r2, [sp, #16]
    2a44:	7013      	strb	r3, [r2, #0]
    2a46:	e041      	b.n	2acc <_printf_i+0x210>
    2a48:	6923      	ldr	r3, [r4, #16]
    2a4a:	0032      	movs	r2, r6
    2a4c:	9906      	ldr	r1, [sp, #24]
    2a4e:	9805      	ldr	r0, [sp, #20]
    2a50:	9d07      	ldr	r5, [sp, #28]
    2a52:	47a8      	blx	r5
    2a54:	1c43      	adds	r3, r0, #1
    2a56:	d043      	beq.n	2ae0 <_printf_i+0x224>
    2a58:	6823      	ldr	r3, [r4, #0]
    2a5a:	2500      	movs	r5, #0
    2a5c:	079b      	lsls	r3, r3, #30
    2a5e:	d40f      	bmi.n	2a80 <_printf_i+0x1c4>
    2a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2a62:	68e0      	ldr	r0, [r4, #12]
    2a64:	4298      	cmp	r0, r3
    2a66:	da3d      	bge.n	2ae4 <_printf_i+0x228>
    2a68:	0018      	movs	r0, r3
    2a6a:	e03b      	b.n	2ae4 <_printf_i+0x228>
    2a6c:	0022      	movs	r2, r4
    2a6e:	2301      	movs	r3, #1
    2a70:	3219      	adds	r2, #25
    2a72:	9906      	ldr	r1, [sp, #24]
    2a74:	9805      	ldr	r0, [sp, #20]
    2a76:	9e07      	ldr	r6, [sp, #28]
    2a78:	47b0      	blx	r6
    2a7a:	1c43      	adds	r3, r0, #1
    2a7c:	d030      	beq.n	2ae0 <_printf_i+0x224>
    2a7e:	3501      	adds	r5, #1
    2a80:	68e3      	ldr	r3, [r4, #12]
    2a82:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2a84:	1a9b      	subs	r3, r3, r2
    2a86:	429d      	cmp	r5, r3
    2a88:	dbf0      	blt.n	2a6c <_printf_i+0x1b0>
    2a8a:	e7e9      	b.n	2a60 <_printf_i+0x1a4>
    2a8c:	2d00      	cmp	r5, #0
    2a8e:	d0a9      	beq.n	29e4 <_printf_i+0x128>
    2a90:	9e04      	ldr	r6, [sp, #16]
    2a92:	0028      	movs	r0, r5
    2a94:	0039      	movs	r1, r7
    2a96:	f7ff f827 	bl	1ae8 <__aeabi_uidivmod>
    2a9a:	9b03      	ldr	r3, [sp, #12]
    2a9c:	3e01      	subs	r6, #1
    2a9e:	5c5b      	ldrb	r3, [r3, r1]
    2aa0:	0028      	movs	r0, r5
    2aa2:	7033      	strb	r3, [r6, #0]
    2aa4:	0039      	movs	r1, r7
    2aa6:	f7fe ff99 	bl	19dc <__udivsi3>
    2aaa:	1e05      	subs	r5, r0, #0
    2aac:	d1f1      	bne.n	2a92 <_printf_i+0x1d6>
    2aae:	2f08      	cmp	r7, #8
    2ab0:	d109      	bne.n	2ac6 <_printf_i+0x20a>
    2ab2:	6823      	ldr	r3, [r4, #0]
    2ab4:	07db      	lsls	r3, r3, #31
    2ab6:	d506      	bpl.n	2ac6 <_printf_i+0x20a>
    2ab8:	6863      	ldr	r3, [r4, #4]
    2aba:	6922      	ldr	r2, [r4, #16]
    2abc:	4293      	cmp	r3, r2
    2abe:	dc02      	bgt.n	2ac6 <_printf_i+0x20a>
    2ac0:	2330      	movs	r3, #48	; 0x30
    2ac2:	3e01      	subs	r6, #1
    2ac4:	7033      	strb	r3, [r6, #0]
    2ac6:	9b04      	ldr	r3, [sp, #16]
    2ac8:	1b9b      	subs	r3, r3, r6
    2aca:	6123      	str	r3, [r4, #16]
    2acc:	9b07      	ldr	r3, [sp, #28]
    2ace:	aa09      	add	r2, sp, #36	; 0x24
    2ad0:	9300      	str	r3, [sp, #0]
    2ad2:	0021      	movs	r1, r4
    2ad4:	9b06      	ldr	r3, [sp, #24]
    2ad6:	9805      	ldr	r0, [sp, #20]
    2ad8:	f7ff fe82 	bl	27e0 <_printf_common>
    2adc:	1c43      	adds	r3, r0, #1
    2ade:	d1b3      	bne.n	2a48 <_printf_i+0x18c>
    2ae0:	2001      	movs	r0, #1
    2ae2:	4240      	negs	r0, r0
    2ae4:	b00b      	add	sp, #44	; 0x2c
    2ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ae8:	00002f66 	.word	0x00002f66
    2aec:	00002f55 	.word	0x00002f55

00002af0 <_sbrk_r>:
    2af0:	2300      	movs	r3, #0
    2af2:	b570      	push	{r4, r5, r6, lr}
    2af4:	4c06      	ldr	r4, [pc, #24]	; (2b10 <_sbrk_r+0x20>)
    2af6:	0005      	movs	r5, r0
    2af8:	0008      	movs	r0, r1
    2afa:	6023      	str	r3, [r4, #0]
    2afc:	f7fe f902 	bl	d04 <_sbrk>
    2b00:	1c43      	adds	r3, r0, #1
    2b02:	d103      	bne.n	2b0c <_sbrk_r+0x1c>
    2b04:	6823      	ldr	r3, [r4, #0]
    2b06:	2b00      	cmp	r3, #0
    2b08:	d000      	beq.n	2b0c <_sbrk_r+0x1c>
    2b0a:	602b      	str	r3, [r5, #0]
    2b0c:	bd70      	pop	{r4, r5, r6, pc}
    2b0e:	46c0      	nop			; (mov r8, r8)
    2b10:	20000128 	.word	0x20000128

00002b14 <__sread>:
    2b14:	b570      	push	{r4, r5, r6, lr}
    2b16:	000c      	movs	r4, r1
    2b18:	250e      	movs	r5, #14
    2b1a:	5f49      	ldrsh	r1, [r1, r5]
    2b1c:	f000 f8b2 	bl	2c84 <_read_r>
    2b20:	2800      	cmp	r0, #0
    2b22:	db03      	blt.n	2b2c <__sread+0x18>
    2b24:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2b26:	181b      	adds	r3, r3, r0
    2b28:	6563      	str	r3, [r4, #84]	; 0x54
    2b2a:	bd70      	pop	{r4, r5, r6, pc}
    2b2c:	89a3      	ldrh	r3, [r4, #12]
    2b2e:	4a02      	ldr	r2, [pc, #8]	; (2b38 <__sread+0x24>)
    2b30:	4013      	ands	r3, r2
    2b32:	81a3      	strh	r3, [r4, #12]
    2b34:	e7f9      	b.n	2b2a <__sread+0x16>
    2b36:	46c0      	nop			; (mov r8, r8)
    2b38:	ffffefff 	.word	0xffffefff

00002b3c <__swrite>:
    2b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b3e:	001f      	movs	r7, r3
    2b40:	898b      	ldrh	r3, [r1, #12]
    2b42:	0005      	movs	r5, r0
    2b44:	000c      	movs	r4, r1
    2b46:	0016      	movs	r6, r2
    2b48:	05db      	lsls	r3, r3, #23
    2b4a:	d505      	bpl.n	2b58 <__swrite+0x1c>
    2b4c:	230e      	movs	r3, #14
    2b4e:	5ec9      	ldrsh	r1, [r1, r3]
    2b50:	2200      	movs	r2, #0
    2b52:	2302      	movs	r3, #2
    2b54:	f000 f874 	bl	2c40 <_lseek_r>
    2b58:	89a3      	ldrh	r3, [r4, #12]
    2b5a:	4a05      	ldr	r2, [pc, #20]	; (2b70 <__swrite+0x34>)
    2b5c:	0028      	movs	r0, r5
    2b5e:	4013      	ands	r3, r2
    2b60:	81a3      	strh	r3, [r4, #12]
    2b62:	0032      	movs	r2, r6
    2b64:	230e      	movs	r3, #14
    2b66:	5ee1      	ldrsh	r1, [r4, r3]
    2b68:	003b      	movs	r3, r7
    2b6a:	f000 f81f 	bl	2bac <_write_r>
    2b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b70:	ffffefff 	.word	0xffffefff

00002b74 <__sseek>:
    2b74:	b570      	push	{r4, r5, r6, lr}
    2b76:	000c      	movs	r4, r1
    2b78:	250e      	movs	r5, #14
    2b7a:	5f49      	ldrsh	r1, [r1, r5]
    2b7c:	f000 f860 	bl	2c40 <_lseek_r>
    2b80:	89a3      	ldrh	r3, [r4, #12]
    2b82:	1c42      	adds	r2, r0, #1
    2b84:	d103      	bne.n	2b8e <__sseek+0x1a>
    2b86:	4a05      	ldr	r2, [pc, #20]	; (2b9c <__sseek+0x28>)
    2b88:	4013      	ands	r3, r2
    2b8a:	81a3      	strh	r3, [r4, #12]
    2b8c:	bd70      	pop	{r4, r5, r6, pc}
    2b8e:	2280      	movs	r2, #128	; 0x80
    2b90:	0152      	lsls	r2, r2, #5
    2b92:	4313      	orrs	r3, r2
    2b94:	81a3      	strh	r3, [r4, #12]
    2b96:	6560      	str	r0, [r4, #84]	; 0x54
    2b98:	e7f8      	b.n	2b8c <__sseek+0x18>
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	ffffefff 	.word	0xffffefff

00002ba0 <__sclose>:
    2ba0:	b510      	push	{r4, lr}
    2ba2:	230e      	movs	r3, #14
    2ba4:	5ec9      	ldrsh	r1, [r1, r3]
    2ba6:	f000 f815 	bl	2bd4 <_close_r>
    2baa:	bd10      	pop	{r4, pc}

00002bac <_write_r>:
    2bac:	b570      	push	{r4, r5, r6, lr}
    2bae:	0005      	movs	r5, r0
    2bb0:	0008      	movs	r0, r1
    2bb2:	0011      	movs	r1, r2
    2bb4:	2200      	movs	r2, #0
    2bb6:	4c06      	ldr	r4, [pc, #24]	; (2bd0 <_write_r+0x24>)
    2bb8:	6022      	str	r2, [r4, #0]
    2bba:	001a      	movs	r2, r3
    2bbc:	f7fe feb0 	bl	1920 <_write>
    2bc0:	1c43      	adds	r3, r0, #1
    2bc2:	d103      	bne.n	2bcc <_write_r+0x20>
    2bc4:	6823      	ldr	r3, [r4, #0]
    2bc6:	2b00      	cmp	r3, #0
    2bc8:	d000      	beq.n	2bcc <_write_r+0x20>
    2bca:	602b      	str	r3, [r5, #0]
    2bcc:	bd70      	pop	{r4, r5, r6, pc}
    2bce:	46c0      	nop			; (mov r8, r8)
    2bd0:	20000128 	.word	0x20000128

00002bd4 <_close_r>:
    2bd4:	2300      	movs	r3, #0
    2bd6:	b570      	push	{r4, r5, r6, lr}
    2bd8:	4c06      	ldr	r4, [pc, #24]	; (2bf4 <_close_r+0x20>)
    2bda:	0005      	movs	r5, r0
    2bdc:	0008      	movs	r0, r1
    2bde:	6023      	str	r3, [r4, #0]
    2be0:	f7fe f8a2 	bl	d28 <_close>
    2be4:	1c43      	adds	r3, r0, #1
    2be6:	d103      	bne.n	2bf0 <_close_r+0x1c>
    2be8:	6823      	ldr	r3, [r4, #0]
    2bea:	2b00      	cmp	r3, #0
    2bec:	d000      	beq.n	2bf0 <_close_r+0x1c>
    2bee:	602b      	str	r3, [r5, #0]
    2bf0:	bd70      	pop	{r4, r5, r6, pc}
    2bf2:	46c0      	nop			; (mov r8, r8)
    2bf4:	20000128 	.word	0x20000128

00002bf8 <_fstat_r>:
    2bf8:	2300      	movs	r3, #0
    2bfa:	b570      	push	{r4, r5, r6, lr}
    2bfc:	4c06      	ldr	r4, [pc, #24]	; (2c18 <_fstat_r+0x20>)
    2bfe:	0005      	movs	r5, r0
    2c00:	0008      	movs	r0, r1
    2c02:	0011      	movs	r1, r2
    2c04:	6023      	str	r3, [r4, #0]
    2c06:	f7fe f892 	bl	d2e <_fstat>
    2c0a:	1c43      	adds	r3, r0, #1
    2c0c:	d103      	bne.n	2c16 <_fstat_r+0x1e>
    2c0e:	6823      	ldr	r3, [r4, #0]
    2c10:	2b00      	cmp	r3, #0
    2c12:	d000      	beq.n	2c16 <_fstat_r+0x1e>
    2c14:	602b      	str	r3, [r5, #0]
    2c16:	bd70      	pop	{r4, r5, r6, pc}
    2c18:	20000128 	.word	0x20000128

00002c1c <_isatty_r>:
    2c1c:	2300      	movs	r3, #0
    2c1e:	b570      	push	{r4, r5, r6, lr}
    2c20:	4c06      	ldr	r4, [pc, #24]	; (2c3c <_isatty_r+0x20>)
    2c22:	0005      	movs	r5, r0
    2c24:	0008      	movs	r0, r1
    2c26:	6023      	str	r3, [r4, #0]
    2c28:	f7fe f886 	bl	d38 <_isatty>
    2c2c:	1c43      	adds	r3, r0, #1
    2c2e:	d103      	bne.n	2c38 <_isatty_r+0x1c>
    2c30:	6823      	ldr	r3, [r4, #0]
    2c32:	2b00      	cmp	r3, #0
    2c34:	d000      	beq.n	2c38 <_isatty_r+0x1c>
    2c36:	602b      	str	r3, [r5, #0]
    2c38:	bd70      	pop	{r4, r5, r6, pc}
    2c3a:	46c0      	nop			; (mov r8, r8)
    2c3c:	20000128 	.word	0x20000128

00002c40 <_lseek_r>:
    2c40:	b570      	push	{r4, r5, r6, lr}
    2c42:	0005      	movs	r5, r0
    2c44:	0008      	movs	r0, r1
    2c46:	0011      	movs	r1, r2
    2c48:	2200      	movs	r2, #0
    2c4a:	4c06      	ldr	r4, [pc, #24]	; (2c64 <_lseek_r+0x24>)
    2c4c:	6022      	str	r2, [r4, #0]
    2c4e:	001a      	movs	r2, r3
    2c50:	f7fe f874 	bl	d3c <_lseek>
    2c54:	1c43      	adds	r3, r0, #1
    2c56:	d103      	bne.n	2c60 <_lseek_r+0x20>
    2c58:	6823      	ldr	r3, [r4, #0]
    2c5a:	2b00      	cmp	r3, #0
    2c5c:	d000      	beq.n	2c60 <_lseek_r+0x20>
    2c5e:	602b      	str	r3, [r5, #0]
    2c60:	bd70      	pop	{r4, r5, r6, pc}
    2c62:	46c0      	nop			; (mov r8, r8)
    2c64:	20000128 	.word	0x20000128

00002c68 <memchr>:
    2c68:	b2c9      	uxtb	r1, r1
    2c6a:	1882      	adds	r2, r0, r2
    2c6c:	4290      	cmp	r0, r2
    2c6e:	d101      	bne.n	2c74 <memchr+0xc>
    2c70:	2000      	movs	r0, #0
    2c72:	4770      	bx	lr
    2c74:	7803      	ldrb	r3, [r0, #0]
    2c76:	428b      	cmp	r3, r1
    2c78:	d0fb      	beq.n	2c72 <memchr+0xa>
    2c7a:	3001      	adds	r0, #1
    2c7c:	e7f6      	b.n	2c6c <memchr+0x4>

00002c7e <__malloc_lock>:
    2c7e:	4770      	bx	lr

00002c80 <__malloc_unlock>:
    2c80:	4770      	bx	lr
	...

00002c84 <_read_r>:
    2c84:	b570      	push	{r4, r5, r6, lr}
    2c86:	0005      	movs	r5, r0
    2c88:	0008      	movs	r0, r1
    2c8a:	0011      	movs	r1, r2
    2c8c:	2200      	movs	r2, #0
    2c8e:	4c06      	ldr	r4, [pc, #24]	; (2ca8 <_read_r+0x24>)
    2c90:	6022      	str	r2, [r4, #0]
    2c92:	001a      	movs	r2, r3
    2c94:	f7fe fe30 	bl	18f8 <_read>
    2c98:	1c43      	adds	r3, r0, #1
    2c9a:	d103      	bne.n	2ca4 <_read_r+0x20>
    2c9c:	6823      	ldr	r3, [r4, #0]
    2c9e:	2b00      	cmp	r3, #0
    2ca0:	d000      	beq.n	2ca4 <_read_r+0x20>
    2ca2:	602b      	str	r3, [r5, #0]
    2ca4:	bd70      	pop	{r4, r5, r6, pc}
    2ca6:	46c0      	nop			; (mov r8, r8)
    2ca8:	20000128 	.word	0x20000128
    2cac:	7461570a 	.word	0x7461570a
    2cb0:	6f646863 	.word	0x6f646863
    2cb4:	69542067 	.word	0x69542067
    2cb8:	2072656d 	.word	0x2072656d
    2cbc:	65732031 	.word	0x65732031
    2cc0:	646e6f63 	.word	0x646e6f63
    2cc4:	00000000 	.word	0x00000000
    2cc8:	7461570a 	.word	0x7461570a
    2ccc:	6f646863 	.word	0x6f646863
    2cd0:	69542067 	.word	0x69542067
    2cd4:	2072656d 	.word	0x2072656d
    2cd8:	65732032 	.word	0x65732032
    2cdc:	646e6f63 	.word	0x646e6f63
    2ce0:	00000000 	.word	0x00000000
    2ce4:	7461570a 	.word	0x7461570a
    2ce8:	6f646863 	.word	0x6f646863
    2cec:	69542067 	.word	0x69542067
    2cf0:	2072656d 	.word	0x2072656d
    2cf4:	65732034 	.word	0x65732034
    2cf8:	646e6f63 	.word	0x646e6f63
    2cfc:	00000000 	.word	0x00000000
    2d00:	7461570a 	.word	0x7461570a
    2d04:	6f646863 	.word	0x6f646863
    2d08:	69542067 	.word	0x69542067
    2d0c:	2072656d 	.word	0x2072656d
    2d10:	65732038 	.word	0x65732038
    2d14:	646e6f63 	.word	0x646e6f63
    2d18:	00000000 	.word	0x00000000
    2d1c:	7461570a 	.word	0x7461570a
    2d20:	6f646863 	.word	0x6f646863
    2d24:	69542067 	.word	0x69542067
    2d28:	2072656d 	.word	0x2072656d
    2d2c:	65732039 	.word	0x65732039
    2d30:	646e6f63 	.word	0x646e6f63
    2d34:	00000000 	.word	0x00000000
    2d38:	682f2e2e 	.word	0x682f2e2e
    2d3c:	692f6c61 	.word	0x692f6c61
    2d40:	756c636e 	.word	0x756c636e
    2d44:	682f6564 	.word	0x682f6564
    2d48:	775f6c61 	.word	0x775f6c61
    2d4c:	682e7464 	.word	0x682e7464
    2d50:	00000000 	.word	0x00000000
    2d54:	682f2e2e 	.word	0x682f2e2e
    2d58:	732f6c61 	.word	0x732f6c61
    2d5c:	682f6372 	.word	0x682f6372
    2d60:	695f6c61 	.word	0x695f6c61
    2d64:	00632e6f 	.word	0x00632e6f
    2d68:	682f2e2e 	.word	0x682f2e2e
    2d6c:	732f6c61 	.word	0x732f6c61
    2d70:	682f6372 	.word	0x682f6372
    2d74:	735f6c61 	.word	0x735f6c61
    2d78:	6d5f6970 	.word	0x6d5f6970
    2d7c:	6e79735f 	.word	0x6e79735f
    2d80:	00632e63 	.word	0x00632e63
    2d84:	682f2e2e 	.word	0x682f2e2e
    2d88:	732f6c61 	.word	0x732f6c61
    2d8c:	682f6372 	.word	0x682f6372
    2d90:	745f6c61 	.word	0x745f6c61
    2d94:	72656d69 	.word	0x72656d69
    2d98:	0000632e 	.word	0x0000632e
    2d9c:	682f2e2e 	.word	0x682f2e2e
    2da0:	732f6c61 	.word	0x732f6c61
    2da4:	682f6372 	.word	0x682f6372
    2da8:	755f6c61 	.word	0x755f6c61
    2dac:	74726173 	.word	0x74726173
    2db0:	6e79735f 	.word	0x6e79735f
    2db4:	00632e63 	.word	0x00632e63
    2db8:	682f2e2e 	.word	0x682f2e2e
    2dbc:	752f6c61 	.word	0x752f6c61
    2dc0:	736c6974 	.word	0x736c6974
    2dc4:	6372732f 	.word	0x6372732f
    2dc8:	6974752f 	.word	0x6974752f
    2dcc:	6c5f736c 	.word	0x6c5f736c
    2dd0:	2e747369 	.word	0x2e747369
    2dd4:	00000063 	.word	0x00000063

00002dd8 <_map>:
    2dd8:	00000004 00000024 0000000e 0000002e     ....$...........
    2de8:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    2df8:	632e6369 00000000                       ic.c....

00002e00 <_usarts>:
    2e00:	00000003 40100004 00030000 0000d8ad     .......@........
    2e10:	00000000                                ....

00002e14 <_i2cms>:
	...

00002e2c <_i2css>:
	...

00002e3c <sercomspi_regs>:
    2e3c:	0001000c 00020000 00000000 01ff0000     ................
    2e4c:	23000c00 02000000 00000000 ff000000     ...#............
    2e5c:	00000101 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    2e6c:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

00002e7c <_tcs>:
    2e7c:	07680003 00000000 00000000 00000007     ..h.............
    2e8c:	00000000 03680004 00000000 00000000     ......h.........
    2e9c:	000003e8 00000000 682f2e2e 742f6c70     ........../hpl/t
    2eac:	70682f63 63745f6c 0000632e 682f2e2e     c/hpl_tc.c..../h
    2ebc:	772f6c70 682f7464 775f6c70 632e7464     pl/wdt/hpl_wdt.c
    2ecc:	00000000 79530a0d 6d657473 6f6f4220     ......System Boo
    2edc:	00000074                                t...

00002ee0 <_global_impure_ptr>:
    2ee0:	20000004                                ... 

00002ee4 <__sf_fake_stderr>:
	...

00002f04 <__sf_fake_stdin>:
	...

00002f24 <__sf_fake_stdout>:
	...
    2f44:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2f54:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2f64:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2f74:	00006665                                ef..

00002f78 <_init>:
    2f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f7a:	46c0      	nop			; (mov r8, r8)
    2f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f7e:	bc08      	pop	{r3}
    2f80:	469e      	mov	lr, r3
    2f82:	4770      	bx	lr

00002f84 <__init_array_start>:
    2f84:	000000dd 	.word	0x000000dd

00002f88 <_fini>:
    2f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f8a:	46c0      	nop			; (mov r8, r8)
    2f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f8e:	bc08      	pop	{r3}
    2f90:	469e      	mov	lr, r3
    2f92:	4770      	bx	lr

00002f94 <__fini_array_start>:
    2f94:	000000b5 	.word	0x000000b5
